#ifndef UCD_PRECOMPILED_GC_H
#define UCD_PRECOMPILED_GC_H
/*
 *  Copyright (c) 2015 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by generate_UCD_property_functions.py - manual edits may be lost.
 */

#include "pablo/pablo_compiler.h"


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\


  struct Struct_gc_C {
  BitBlock cc;
};

  struct Struct_gc_Cc {
  BitBlock cc;
};

  struct Struct_gc_Cf {
  BitBlock cc;
};

  struct Struct_gc_Cn {
  BitBlock cc;
};

  struct Struct_gc_Co {
  BitBlock cc;
};

  struct Struct_gc_Cs {
  BitBlock cc;
};

  struct Struct_gc_L {
  BitBlock cc;
};

  struct Struct_gc_LC {
  BitBlock cc;
};

  struct Struct_gc_Ll {
  BitBlock cc;
};

  struct Struct_gc_Lm {
  BitBlock cc;
};

  struct Struct_gc_Lo {
  BitBlock cc;
};

  struct Struct_gc_Lt {
  BitBlock cc;
};

  struct Struct_gc_Lu {
  BitBlock cc;
};

  struct Struct_gc_M {
  BitBlock cc;
};

  struct Struct_gc_Mc {
  BitBlock cc;
};

  struct Struct_gc_Me {
  BitBlock cc;
};

  struct Struct_gc_Mn {
  BitBlock cc;
};

  struct Struct_gc_N {
  BitBlock cc;
};

  struct Struct_gc_Nd {
  BitBlock cc;
};

  struct Struct_gc_Nl {
  BitBlock cc;
};

  struct Struct_gc_No {
  BitBlock cc;
};

  struct Struct_gc_P {
  BitBlock cc;
};

  struct Struct_gc_Pc {
  BitBlock cc;
};

  struct Struct_gc_Pd {
  BitBlock cc;
};

  struct Struct_gc_Pe {
  BitBlock cc;
};

  struct Struct_gc_Pf {
  BitBlock cc;
};

  struct Struct_gc_Pi {
  BitBlock cc;
};

  struct Struct_gc_Po {
  BitBlock cc;
};

  struct Struct_gc_Ps {
  BitBlock cc;
};

  struct Struct_gc_S {
  BitBlock cc;
};

  struct Struct_gc_Sc {
  BitBlock cc;
};

  struct Struct_gc_Sk {
  BitBlock cc;
};

  struct Struct_gc_Sm {
  BitBlock cc;
};

  struct Struct_gc_So {
  BitBlock cc;
};

  struct Struct_gc_Z {
  BitBlock cc;
};

  struct Struct_gc_Zl {
  BitBlock cc;
};

  struct Struct_gc_Zp {
  BitBlock cc;
};

  struct Struct_gc_Zs {
  BitBlock cc;
};

  struct Property_gc_Nl {
  Property_gc_Nl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Nl & struct_gc_Nl) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9b, r1000_1fff_tmp6;
		BitBlock sequence_e1_9b, byte_e1_adv, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock byte_range_ae_b0, sequence_e1_9b_adv, r1000_1fff_tmp13;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_85, r2000_2fff_tmp5;
		BitBlock sequence_e2_85, byte_e2_adv, byte_range_a0_bf, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_80_82;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock byte_range_85_88, r2000_2fff_tmp15, r2000_4dff_tmp3, r2000_4dff_tmp4;
		BitBlock byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2;
		BitBlock r3000_4dff_tmp3, byte_80, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, byte_87, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, byte_range_a1_a9;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, r3000_4dff_tmp14;
		BitBlock r3000_4dff_tmp15, r3000_4dff_tmp16, byte_range_b8_ba;
		BitBlock r3000_4dff_tmp17, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock ra000_ffff_tmp8, sequence_ea_9b, byte_ea_adv, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_a6_af;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp12, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock sequence_f0_90_85, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_range_80_b4, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_8d, sequence_f0_90_8d, r10000_10ffff_tmp21, byte_81;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_8a;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock byte_8f, sequence_f0_90_8f, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_range_91_95, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, byte_92, sequence_f0_92;
		BitBlock r10000_10ffff_tmp34, sequence_f0_92_90, sequence_f0_92_adv;
		BitBlock byte_range_80_bf, sequence_f0_92_90_adv, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, byte_91, sequence_f0_92_91, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, byte_range_80_ae, sequence_f0_92_91_adv;
		BitBlock r10000_10ffff_tmp39;




        struct_gc_Nl.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 18))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 10))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 7))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9b = simd_and(r1000_1fff_tmp6, byte_9b);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r1000_1fff_tmp9 = simd_not(r1000_1fff_tmp8);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp10, basis_bits.bit_6);
                  r1000_1fff_tmp12 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp9), simd_andc(r1000_1fff_tmp11, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp12);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(2), sequence_e1_9b_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_9b_adv, byte_range_ae_b0);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r1000_1fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(3, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(3, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(3), r2000_2fff_tmp5));
                  sequence_e2_85 = simd_and(r2000_2fff_tmp5, byte_85);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(4), sequence_e2_85_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_85_adv, byte_range_a0_bf);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp8 = simd_andc(r2000_2fff_tmp2, r800_ffff_tmp1);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp9);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(5), sequence_e2_86_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_86_adv, byte_range_80_82);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp12 = simd_not(r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp14 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp12), simd_andc(r2000_2fff_tmp13, basis_bits.bit_4));
                  byte_range_85_88 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(sequence_e2_86_adv, byte_range_85_88);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r2000_2fff_tmp15);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(6, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(6), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(7), sequence_e3_80_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_80_adv, byte_87);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp9 = simd_not(r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp9), simd_andc(r3000_4dff_tmp10, basis_bits.bit_4));
                  byte_range_a1_a9 = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, byte_range_a1_a9);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp13);
                  r3000_4dff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp16 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp15);
                  byte_range_b8_ba = simd_andc(r3000_4dff_tmp16, r2000_4dff_tmp3);
                  r3000_4dff_tmp17 = simd_and(sequence_e3_80_adv, byte_range_b8_ba);
                  struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r3000_4dff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 7);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(8, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(8), ra000_ffff_tmp8));
              sequence_ea_9b = simd_and(ra000_ffff_tmp8, byte_9b);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_4, ra000_ffff_tmp10);
              byte_range_a6_af = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp11);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(9), sequence_ea_9b_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_9b_adv, byte_range_a6_af);
              struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 10);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(10, 8))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(10), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(11), r10000_10ffff_tmp13));
            sequence_f0_90_85 = simd_and(r10000_10ffff_tmp13, byte_85);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp16);
            byte_range_80_b4 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(12), sequence_f0_90_85_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp21);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(13), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_8d_adv, byte_81);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp24 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_8d_adv, byte_8a);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp27);
            byte_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            r10000_10ffff_tmp30 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp30), simd_andc(r10000_10ffff_tmp2, basis_bits.bit_5));
            byte_range_91_95 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp31);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(14), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_8f_adv, byte_range_91_95);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp33);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(15), r10000_10ffff_tmp34));
            sequence_f0_92_90 = simd_and(r10000_10ffff_tmp34, byte_90);
            sequence_f0_92_adv = r10000_10ffff_tmp34;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(16), sequence_f0_92_90_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_92_90_adv, byte_range_80_bf);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_91 = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp21);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp37 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp38 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp37);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp38);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(17), sequence_f0_92_91_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_92_91_adv, byte_range_80_ae);
            struct_gc_Nl.cc = simd_or(struct_gc_Nl.cc, r10000_10ffff_tmp39);
          }
          else {
            carryQ.CarryDequeueEnqueue(10, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 18);
        }
        carryQ.CarryQ_Adjust(18);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<18, 0> carryQ;
  };

  struct Property_gc_Mn {
  Property_gc_Mn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Mn & struct_gc_Mn) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, byte_range_80_bf, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1, r400_4ff_tmp2;
		BitBlock byte_d2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6;
		BitBlock r400_4ff_tmp7, byte_range_83_87, byte_d2_adv, r400_4ff_tmp8;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, r400_5ff_tmp3, byte_d6, r400_5ff_tmp4;
		BitBlock byte_range_90_bf, r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7;
		BitBlock r400_5ff_tmp8, byte_d7, r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2;
		BitBlock r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6;
		BitBlock r590_5ff_tmp7, r590_5ff_tmp8, byte_range_91_bd, byte_d6_adv;
		BitBlock r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12;
		BitBlock byte_bf, r590_5ff_tmp13, r590_5ff_tmp14, r590_5ff_tmp15;
		BitBlock r590_5ff_tmp16, byte_range_81_82, byte_d7_adv, r590_5ff_tmp17;
		BitBlock r590_5ff_tmp18, byte_range_84_85, r590_5ff_tmp19, byte_87;
		BitBlock r590_5ff_tmp20, r80_7ff_tmp6, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock r600_6ff_tmp2, byte_d8, r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5;
		BitBlock r600_6ff_tmp6, r600_6ff_tmp7, byte_range_90_9a, byte_d8_adv;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, byte_d9, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, byte_range_8b_9f, byte_d9_adv, r600_6ff_tmp13;
		BitBlock r600_6ff_tmp14, r600_6ff_tmp15, r600_6ff_tmp16, byte_b0;
		BitBlock r600_6ff_tmp17, r600_6ff_tmp18, byte_db, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, byte_range_96_9c;
		BitBlock byte_db_adv, r600_6ff_tmp23, r600_6ff_tmp24, r600_6ff_tmp25;
		BitBlock r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28, r600_6ff_tmp29;
		BitBlock r600_6ff_tmp30, byte_range_9f_a4, r600_6ff_tmp31, r600_6ff_tmp32;
		BitBlock r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35, r600_6ff_tmp36;
		BitBlock r600_6ff_tmp37, byte_range_a7_a8, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock r600_6ff_tmp40, byte_range_aa_ad, r600_6ff_tmp41, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5;
		BitBlock byte_range_80_8f, r700_77f_tmp6, r700_77f_tmp7, r700_77f_tmp8;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, byte_91, byte_dc_adv, r700_74f_tmp3;
		BitBlock r700_74f_tmp4, byte_range_b0_bf, r700_74f_tmp5, r700_74f_tmp6;
		BitBlock r700_74f_tmp7, r700_74f_tmp8, byte_range_80_8a, byte_dd_adv;
		BitBlock r700_74f_tmp9, r80_7ff_tmp9, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock r780_7bf_tmp4, r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7;
		BitBlock r780_7bf_tmp8, byte_range_a6_b0, byte_de_adv, r780_7bf_tmp9;
		BitBlock r780_7ff_tmp3, r780_7ff_tmp4, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, r7c0_7ff_tmp6;
		BitBlock byte_range_ab_b3, byte_df_adv, r7c0_7ff_tmp7, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock byte_range_96_99, sequence_e0_a0_adv, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, byte_range_9b_a3, r800_fff_tmp17;
		BitBlock r800_fff_tmp18, byte_range_a5_a7, r800_fff_tmp19, r800_fff_tmp20;
		BitBlock r800_fff_tmp21, r800_fff_tmp22, byte_range_a9_ad, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, r800_fff_tmp25, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, byte_range_99_9b, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp28, r800_fff_tmp29, byte_a3, sequence_e0_a3;
		BitBlock r800_fff_tmp30, byte_range_a4_bf, sequence_e0_a3_adv, r800_fff_tmp31;
		BitBlock byte_a4, sequence_e0_a4, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, byte_range_80_82, sequence_e0_a4_adv, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39;
		BitBlock byte_ba, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42, byte_bc;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, byte_range_81_88, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp47, r800_fff_tmp48, byte_8d, r800_fff_tmp49;
		BitBlock r800_fff_tmp50, byte_range_91_97, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock byte_range_a2_a3, r800_fff_tmp53, r800_fff_tmp54, byte_a6;
		BitBlock sequence_e0_a6, byte_81, sequence_e0_a6_adv, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, byte_a7, sequence_e0_a7;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, byte_range_81_84, sequence_e0_a7_adv;
		BitBlock r800_fff_tmp60, r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63;
		BitBlock byte_a8, sequence_e0_a8, r800_fff_tmp64, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp65, r800_fff_tmp66, r800_fff_tmp67, byte_a9;
		BitBlock sequence_e0_a9, sequence_e0_a9_adv, r800_fff_tmp68, r800_fff_tmp69;
		BitBlock r800_fff_tmp70, r800_fff_tmp71, byte_range_87_88, r800_fff_tmp72;
		BitBlock r800_fff_tmp73, r800_fff_tmp74, byte_range_8b_8d, r800_fff_tmp75;
		BitBlock r800_fff_tmp76, byte_range_b0_b1, r800_fff_tmp77, byte_b5;
		BitBlock r800_fff_tmp78, byte_aa, sequence_e0_aa, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp79, r800_fff_tmp80, r800_fff_tmp81, byte_ab;
		BitBlock sequence_e0_ab, byte_range_81_85, sequence_e0_ab_adv, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, r800_fff_tmp84, r800_fff_tmp85, byte_ac;
		BitBlock sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp86, r800_fff_tmp87;
		BitBlock r800_fff_tmp88, r800_fff_tmp89, byte_ad, sequence_e0_ad;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp90, r800_fff_tmp91, byte_96;
		BitBlock r800_fff_tmp92, r800_fff_tmp93, r800_fff_tmp94, byte_ae;
		BitBlock sequence_e0_ae, r800_fff_tmp95, byte_82, sequence_e0_ae_adv;
		BitBlock r800_fff_tmp96, byte_af, sequence_e0_af, byte_80, sequence_e0_af_adv;
		BitBlock r800_fff_tmp97, r800_fff_tmp98, sequence_e0_b0, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp99, r800_fff_tmp100, byte_range_be_bf, r800_fff_tmp101;
		BitBlock byte_b1, sequence_e0_b1, sequence_e0_b1_adv, r800_fff_tmp102;
		BitBlock r800_fff_tmp103, byte_range_86_88, r800_fff_tmp104, r800_fff_tmp105;
		BitBlock byte_range_8a_8d, r800_fff_tmp106, r800_fff_tmp107, byte_range_95_96;
		BitBlock r800_fff_tmp108, r800_fff_tmp109, byte_b2, sequence_e0_b2;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp110, r800_fff_tmp111, r800_fff_tmp112;
		BitBlock byte_b3, sequence_e0_b3, byte_86, sequence_e0_b3_adv, r800_fff_tmp113;
		BitBlock r800_fff_tmp114, byte_range_8c_8d, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock byte_b4, sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp117;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp118, r800_fff_tmp119;
		BitBlock r800_fff_tmp120, byte_b7, sequence_e0_b7, byte_8a, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123, byte_range_92_94;
		BitBlock r800_fff_tmp124, r800_fff_tmp125, byte_b8, sequence_e0_b8;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp126, r800_fff_tmp127, r800_fff_tmp128;
		BitBlock byte_range_b4_ba, r800_fff_tmp129, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp130, byte_range_87_8e, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp131, sequence_e0_ba, sequence_e0_ba_adv, r800_fff_tmp132;
		BitBlock r800_fff_tmp133, byte_range_b4_b9, r800_fff_tmp134, r800_fff_tmp135;
		BitBlock r800_fff_tmp136, byte_range_bb_bc, r800_fff_tmp137, byte_bb;
		BitBlock sequence_e0_bb, byte_range_88_8d, sequence_e0_bb_adv, r800_fff_tmp138;
		BitBlock sequence_e0_bc, r800_fff_tmp139, byte_range_98_99, sequence_e0_bc_adv;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, r800_fff_tmp143;
		BitBlock byte_bd, sequence_e0_bd, r800_fff_tmp144, r800_fff_tmp145;
		BitBlock byte_range_b1_be, sequence_e0_bd_adv, r800_fff_tmp146, byte_be;
		BitBlock sequence_e0_be, r800_fff_tmp147, byte_range_80_84, sequence_e0_be_adv;
		BitBlock r800_fff_tmp148, r800_fff_tmp149, byte_range_86_87, r800_fff_tmp150;
		BitBlock r800_fff_tmp151, r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock byte_range_8d_97, r800_fff_tmp155, r800_fff_tmp156, r800_fff_tmp157;
		BitBlock r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160, byte_range_99_bc;
		BitBlock r800_fff_tmp161, sequence_e0_bf, sequence_e0_bf_adv, r800_fff_tmp162;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, sequence_e1_80, byte_e1_adv;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, byte_range_ad_b0, sequence_e1_80_adv;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_b2_b7, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock byte_range_b9_ba, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock byte_range_bd_be, r1000_1fff_tmp20, sequence_e1_81, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock byte_range_9e_a0, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock byte_range_b1_b4, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, sequence_e1_82, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, byte_range_85_86;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39, byte_9d;
		BitBlock r1000_1fff_tmp40, sequence_e1_8d, r1000_1fff_tmp41, byte_range_9d_9f;
		BitBlock sequence_e1_8d_adv, r1000_1fff_tmp42, r1000_1fff_tmp43, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp47, byte_range_b2_b4;
		BitBlock r1000_1fff_tmp48, sequence_e1_9d, r1000_1fff_tmp49, byte_range_92_93;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp50, byte_range_b2_b3;
		BitBlock r1000_1fff_tmp51, r1000_1fff_tmp52, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp53, byte_range_b4_b5, sequence_e1_9e_adv;
		BitBlock r1000_1fff_tmp54, r1000_1fff_tmp55, r1000_1fff_tmp56;
		BitBlock r1000_1fff_tmp57, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock byte_range_b7_bd, r1000_1fff_tmp60, r1000_1fff_tmp61, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp62, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp63, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, r1000_1fff_tmp68;
		BitBlock byte_range_89_93, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, sequence_e1_a0, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, sequence_e1_a0_adv, r1000_1fff_tmp75, byte_a2;
		BitBlock sequence_e1_a2, r1000_1fff_tmp76, sequence_e1_a2_adv;
		BitBlock r1000_1fff_tmp77, sequence_e1_a4, r1000_1fff_tmp78, byte_range_a0_a2;
		BitBlock sequence_e1_a4_adv, r1000_1fff_tmp79, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, r1000_1fff_tmp82, r1000_1fff_tmp83;
		BitBlock byte_range_b9_bb, r1000_1fff_tmp84, r1000_1fff_tmp85, sequence_e1_a8;
		BitBlock byte_range_97_98, sequence_e1_a8_adv, r1000_1fff_tmp86;
		BitBlock r1000_1fff_tmp87, byte_9b, r1000_1fff_tmp88, sequence_e1_a9;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp89, r1000_1fff_tmp90;
		BitBlock byte_range_98_9e, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock r1000_1fff_tmp93, r1000_1fff_tmp94, r1000_1fff_tmp95;
		BitBlock byte_range_a5_ac, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock r1000_1fff_tmp98, r1000_1fff_tmp99, byte_range_b3_bc;
		BitBlock r1000_1fff_tmp100, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock sequence_e1_aa, r1000_1fff_tmp103, byte_range_b0_bd;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp104, sequence_e1_ac;
		BitBlock byte_range_80_83, sequence_e1_ac_adv, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, r1000_1fff_tmp107, r1000_1fff_tmp108;
		BitBlock byte_range_b6_ba, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r1000_1fff_tmp111;
		BitBlock r1000_1fff_tmp112, r1000_1fff_tmp113, r1000_1fff_tmp114;
		BitBlock sequence_e1_ae, byte_range_80_81, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp115, r1000_1fff_tmp116, r1000_1fff_tmp117;
		BitBlock byte_range_a2_a5, r1000_1fff_tmp118, byte_range_a8_a9;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, byte_range_ab_ad;
		BitBlock r1000_1fff_tmp121, sequence_e1_af, sequence_e1_af_adv;
		BitBlock r1000_1fff_tmp122, r1000_1fff_tmp123, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, r1000_1fff_tmp126, byte_range_af_b1;
		BitBlock r1000_1fff_tmp127, sequence_e1_b0, r1000_1fff_tmp128;
		BitBlock byte_range_ac_b3, sequence_e1_b0_adv, r1000_1fff_tmp129;
		BitBlock r1000_1fff_tmp130, byte_range_b6_b7, r1000_1fff_tmp131;
		BitBlock r1000_1fff_tmp132, sequence_e1_b3, r1000_1fff_tmp133;
		BitBlock byte_range_90_92, sequence_e1_b3_adv, r1000_1fff_tmp134;
		BitBlock r1000_1fff_tmp135, r1000_1fff_tmp136, byte_range_94_a0;
		BitBlock r1000_1fff_tmp137, r1000_1fff_tmp138, byte_range_a2_a8;
		BitBlock r1000_1fff_tmp139, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock byte_range_b8_b9, r1000_1fff_tmp142, r1000_1fff_tmp143;
		BitBlock sequence_e1_b7, r1000_1fff_tmp144, r1000_1fff_tmp145;
		BitBlock r1000_1fff_tmp146, byte_range_80_b5, sequence_e1_b7_adv;
		BitBlock r1000_1fff_tmp147, byte_range_bc_bf, r1000_1fff_tmp148;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_83, r2000_2fff_tmp5;
		BitBlock sequence_e2_83, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_90_9c;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, byte_range_a5_b0;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22, sequence_e2_b3;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, sequence_e2_b3_adv, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, sequence_e2_b5, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, sequence_e2_b7, byte_range_a0_bf;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp31, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp8, sequence_e3_82, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_99_9a, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, byte_range_b4_bd, ra000_ffff_tmp19, byte_9a;
		BitBlock sequence_ea_9a, sequence_ea_9a_adv, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, sequence_ea_9b, ra000_ffff_tmp22;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock sequence_ea_a0, ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, byte_8b, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, byte_range_a5_a6, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, sequence_ea_a3, byte_84, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock byte_range_a0_b1, ra000_ffff_tmp39, sequence_ea_a4, ra000_ffff_tmp40;
		BitBlock byte_range_a6_ad, sequence_ea_a4_adv, ra000_ffff_tmp41;
		BitBlock ra000_ffff_tmp42, sequence_ea_a5, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock byte_range_87_91, sequence_ea_a5_adv, ra000_ffff_tmp48;
		BitBlock sequence_ea_a6, ra000_ffff_tmp49, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, byte_range_b6_b9, ra000_ffff_tmp54;
		BitBlock ra000_ffff_tmp55, ra000_ffff_tmp56, ra000_ffff_tmp57, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock sequence_ea_a8, ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock byte_range_a9_ae, sequence_ea_a8_adv, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, byte_range_b1_b2, ra000_ffff_tmp65;
		BitBlock ra000_ffff_tmp66, byte_range_b5_b6, ra000_ffff_tmp67, sequence_ea_a9;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp68, byte_8c, ra000_ffff_tmp69;
		BitBlock ra000_ffff_tmp70, sequence_ea_aa, sequence_ea_aa_adv;
		BitBlock ra000_ffff_tmp71, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, byte_range_b7_b8;
		BitBlock ra000_ffff_tmp79, ra000_ffff_tmp80, ra000_ffff_tmp81, sequence_ea_ab;
		BitBlock ra000_ffff_tmp82, sequence_ea_ab_adv, ra000_ffff_tmp83;
		BitBlock ra000_ffff_tmp84, byte_range_ac_ad, ra000_ffff_tmp85, byte_b6;
		BitBlock ra000_ffff_tmp86, sequence_ea_af, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, ra000_ffff_tmp89;
		BitBlock ra000_ffff_tmp90, byte_ef, ra000_ffff_tmp91, sequence_ef_ac;
		BitBlock byte_ef_adv, ra000_ffff_tmp92, sequence_ef_ac_adv, ra000_ffff_tmp93;
		BitBlock sequence_ef_b8, sequence_ef_b8_adv, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, byte_range_a0_ad, ra000_ffff_tmp96, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock sequence_f0_90_87, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, sequence_f0_90_87_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, sequence_f0_90_8b;
		BitBlock r10000_10ffff_tmp21, sequence_f0_90_8b_adv, r10000_10ffff_tmp22;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp29, byte_range_81_83, sequence_f0_90_a8_adv;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, byte_range_8c_8f, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, byte_range_b8_ba, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp39, sequence_f0_90_ab_adv, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, sequence_f0_91, r10000_10ffff_tmp42;
		BitBlock sequence_f0_91_80, sequence_f0_91_adv, sequence_f0_91_80_adv;
		BitBlock r10000_10ffff_tmp43, byte_range_b8_bf, r10000_10ffff_tmp44;
		BitBlock sequence_f0_91_81, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock byte_range_80_86, sequence_f0_91_81_adv, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock sequence_f0_91_82, r10000_10ffff_tmp51, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock byte_range_b3_b6, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock r10000_10ffff_tmp57, sequence_f0_91_84, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock byte_range_a7_ab, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, byte_range_ad_b4;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, byte_85, sequence_f0_91_85;
		BitBlock r10000_10ffff_tmp70, sequence_f0_91_85_adv, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, sequence_f0_91_86, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock byte_range_b6_be, r10000_10ffff_tmp76, byte_88, sequence_f0_91_88;
		BitBlock r10000_10ffff_tmp77, r10000_10ffff_tmp78, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, byte_range_a3_aa;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock sequence_f0_91_8d, sequence_f0_91_8d_adv, r10000_10ffff_tmp89;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, byte_range_a6_ac;
		BitBlock r10000_10ffff_tmp92, byte_range_b0_b4, r10000_10ffff_tmp93, byte_92;
		BitBlock sequence_f0_91_92, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, byte_range_b3_b8, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, byte_93, sequence_f0_91_93;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock byte_range_82_83, r10000_10ffff_tmp103, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp104, byte_range_b2_b5, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, byte_range_bc_bd;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, byte_97;
		BitBlock sequence_f0_91_97, sequence_f0_91_97_adv, r10000_10ffff_tmp109;
		BitBlock byte_98, sequence_f0_91_98, byte_range_b3_ba, sequence_f0_91_98_adv;
		BitBlock r10000_10ffff_tmp110, r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, sequence_f0_91_99, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp114, sequence_f0_91_9a, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp115, r10000_10ffff_tmp116, byte_range_b0_b5;
		BitBlock r10000_10ffff_tmp117, r10000_10ffff_tmp118, sequence_f0_96;
		BitBlock r10000_10ffff_tmp119, sequence_f0_96_ab, sequence_f0_96_adv;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp120, sequence_f0_96_ac;
		BitBlock byte_range_b0_b6, sequence_f0_96_ac_adv, r10000_10ffff_tmp121;
		BitBlock r10000_10ffff_tmp122, sequence_f0_96_be, r10000_10ffff_tmp123;
		BitBlock r10000_10ffff_tmp124, r10000_10ffff_tmp125, r10000_10ffff_tmp126;
		BitBlock byte_range_8f_92, sequence_f0_96_be_adv, r10000_10ffff_tmp127;
		BitBlock sequence_f0_9b, r10000_10ffff_tmp128, sequence_f0_9b_b2;
		BitBlock sequence_f0_9b_adv, r10000_10ffff_tmp129, byte_range_9d_9e;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp130, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp131, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp132, r10000_10ffff_tmp133, r10000_10ffff_tmp134;
		BitBlock byte_range_a7_a9, sequence_f0_9d_85_adv, r10000_10ffff_tmp135;
		BitBlock byte_range_bb_bf, r10000_10ffff_tmp136, sequence_f0_9d_86;
		BitBlock sequence_f0_9d_86_adv, r10000_10ffff_tmp137, r10000_10ffff_tmp138;
		BitBlock byte_range_85_8b, r10000_10ffff_tmp139, r10000_10ffff_tmp140;
		BitBlock r10000_10ffff_tmp141, byte_89, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp142, r10000_10ffff_tmp143, byte_range_82_84;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp144, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp145, sequence_f0_9e_a3, sequence_f0_9e_adv;
		BitBlock r10000_10ffff_tmp146, byte_range_90_96, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp147, byte_f3, r10000_10ffff_tmp148, sequence_f3_a0;
		BitBlock byte_range_84_86, r10000_10ffff_tmp149;
		BitBlock sequence_f3_a0_byte_range_84_86, r10000_10ffff_tmp150;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, r10000_10ffff_tmp151;
		BitBlock sequence_f3_a0_87, r10000_10ffff_tmp152, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87_adv, r10000_10ffff_tmp153;




        struct_gc_Mn.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 133))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 12))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r100_3ff_tmp6;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(1), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 3))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(2, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r80_7ff_tmp3);
                byte_d2 = simd_and(r80_7ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r80_7ff_tmp1);
                r400_4ff_tmp5 = simd_andc(r400_4ff_tmp4, basis_bits.bit_4);
                r400_4ff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp7 = simd_or(basis_bits.bit_5, r400_4ff_tmp6);
                byte_range_83_87 = simd_and(r400_4ff_tmp5, r400_4ff_tmp7);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(2), byte_d2_adv));
                r400_4ff_tmp8 = simd_and(byte_d2_adv, byte_range_83_87);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r400_4ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, r400_5ff_tmp7);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(4, 1))) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp2 = simd_and(r590_5ff_tmp1, basis_bits.bit_6);
                r590_5ff_tmp3 = simd_and(basis_bits.bit_3, r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_not(r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp6 = simd_or(r80_7ff_tmp3, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(basis_bits.bit_3, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp4), simd_andc(r590_5ff_tmp7, basis_bits.bit_2));
                byte_range_91_bd = simd_and(r400_5ff_tmp4, r590_5ff_tmp8);
                byte_d6_adv = r400_5ff_tmp5;
                r590_5ff_tmp9 = simd_and(byte_d6_adv, byte_range_91_bd);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r590_5ff_tmp9);
                r590_5ff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp11 = simd_and(r400_5ff_tmp4, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(r590_5ff_tmp1, r400_5ff_tmp7);
                byte_bf = simd_and(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp13 = simd_and(byte_d6_adv, byte_bf);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r590_5ff_tmp13);
                r590_5ff_tmp14 = simd_andc(r400_5ff_tmp4, r80_7ff_tmp1);
                r590_5ff_tmp15 = simd_andc(r590_5ff_tmp14, r80_7ff_tmp3);
                r590_5ff_tmp16 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                byte_range_81_82 = simd_and(r590_5ff_tmp15, r590_5ff_tmp16);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(4), byte_d7_adv));
                r590_5ff_tmp17 = simd_and(byte_d7_adv, byte_range_81_82);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r590_5ff_tmp17);
                r590_5ff_tmp18 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
                byte_range_84_85 = simd_and(r590_5ff_tmp14, r590_5ff_tmp18);
                r590_5ff_tmp19 = simd_and(byte_d7_adv, byte_range_84_85);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r590_5ff_tmp19);
                byte_87 = simd_and(r590_5ff_tmp14, r400_5ff_tmp8);
                r590_5ff_tmp20 = simd_and(byte_d7_adv, byte_87);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r590_5ff_tmp20);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(5, 3))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              byte_range_90_9a = simd_andc(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(5), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_90_9a);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp6, r600_6ff_tmp9);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp12 = simd_or(basis_bits.bit_3, r600_6ff_tmp7);
              byte_range_8b_9f = simd_and(r600_6ff_tmp11, r600_6ff_tmp12);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(6), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, byte_range_8b_9f);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp15 = simd_and(r600_6ff_tmp3, r600_6ff_tmp14);
              r600_6ff_tmp16 = simd_or(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_b0 = simd_andc(r600_6ff_tmp15, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_and(byte_d9_adv, byte_b0);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp17);
              r600_6ff_tmp18 = simd_and(r80_7ff_tmp6, r600_6ff_tmp5);
              byte_db = simd_and(r80_7ff_tmp5, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_and(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp20 = simd_not(r600_6ff_tmp19);
              r600_6ff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp22 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp20), simd_andc(r600_6ff_tmp21, basis_bits.bit_4));
              byte_range_96_9c = simd_and(r600_6ff_tmp4, r600_6ff_tmp22);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(7), byte_db_adv));
              r600_6ff_tmp23 = simd_and(byte_db_adv, byte_range_96_9c);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp23);
              r600_6ff_tmp24 = simd_or(basis_bits.bit_4, r600_6ff_tmp19);
              r600_6ff_tmp25 = simd_or(basis_bits.bit_3, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_not(r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp28 = simd_and(r600_6ff_tmp27, r600_6ff_tmp5);
              r600_6ff_tmp29 = simd_and(basis_bits.bit_3, r600_6ff_tmp28);
              r600_6ff_tmp30 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp26), simd_andc(r600_6ff_tmp29, basis_bits.bit_2));
              byte_range_9f_a4 = simd_and(r600_6ff_tmp3, r600_6ff_tmp30);
              r600_6ff_tmp31 = simd_and(byte_db_adv, byte_range_9f_a4);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp31);
              r600_6ff_tmp32 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp33 = simd_and(r600_6ff_tmp3, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp35 = simd_not(r600_6ff_tmp34);
              r600_6ff_tmp36 = simd_and(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp35), simd_andc(r600_6ff_tmp36, basis_bits.bit_4));
              byte_range_a7_a8 = simd_and(r600_6ff_tmp33, r600_6ff_tmp37);
              r600_6ff_tmp38 = simd_and(byte_db_adv, byte_range_a7_a8);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp38);
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp33, basis_bits.bit_4);
              r600_6ff_tmp40 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_ad = simd_and(r600_6ff_tmp39, r600_6ff_tmp40);
              r600_6ff_tmp41 = simd_and(byte_db_adv, byte_range_aa_ad);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r600_6ff_tmp41);
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 3);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(8, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(8), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(9, 1))) {
                r700_74f_tmp1 = simd_and(r700_77f_tmp5, r80_7ff_tmp4);
                r700_74f_tmp2 = simd_andc(r700_77f_tmp3, r80_7ff_tmp3);
                byte_91 = simd_and(r700_74f_tmp1, r700_74f_tmp2);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(9), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_91);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r700_77f_tmp5, r700_74f_tmp4);
                r700_74f_tmp5 = simd_and(byte_dc_adv, byte_range_b0_bf);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r700_74f_tmp5);
                r700_74f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp7 = simd_or(basis_bits.bit_5, r700_74f_tmp6);
                r700_74f_tmp8 = simd_and(basis_bits.bit_4, r700_74f_tmp7);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp8);
                byte_dd_adv = r700_77f_tmp6;
                r700_74f_tmp9 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r700_74f_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(10, 2))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(10, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(r780_7bf_tmp1, basis_bits.bit_2);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r780_7bf_tmp4 = simd_or(r80_7ff_tmp3, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_not(r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp7 = simd_or(basis_bits.bit_4, r780_7bf_tmp6);
                r780_7bf_tmp8 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp5), simd_andc(r780_7bf_tmp7, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp2, r780_7bf_tmp8);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(10), byte_de_adv));
                r780_7bf_tmp9 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r780_7bf_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
              r780_7ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp4 = simd_and(r80_7ff_tmp7, r780_7ff_tmp3);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(11, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, basis_bits.bit_2);
                r7c0_7ff_tmp3 = simd_not(r80_7ff_tmp3);
                r7c0_7ff_tmp4 = simd_or(basis_bits.bit_5, r780_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_3, r7c0_7ff_tmp3), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_3));
                byte_range_ab_b3 = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp6);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(11), byte_df_adv));
                r7c0_7ff_tmp7 = simd_and(byte_df_adv, byte_range_ab_b3);
                struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r7c0_7ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 12);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 80))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(12), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(13, 61))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(13, 53))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(13, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_not(r800_fff_tmp5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  byte_range_96_99 = simd_and(r800_fff_tmp4, r800_fff_tmp8);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(14), sequence_e0_a0_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a0_adv, byte_range_96_99);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_or(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_4, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_3, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp11), simd_andc(r800_fff_tmp15, basis_bits.bit_2));
                  byte_range_9b_a3 = simd_and(r800_ffff_tmp5, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(sequence_e0_a0_adv, byte_range_9b_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  byte_range_a5_a7 = simd_and(r800_fff_tmp18, r800_ffff_tmp3);
                  r800_fff_tmp19 = simd_and(sequence_e0_a0_adv, byte_range_a5_a7);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp21 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp21), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_a9_ad = simd_and(r800_fff_tmp20, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(sequence_e0_a0_adv, byte_range_a9_ad);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp25 = simd_andc(r800_fff_tmp24, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp25);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp26 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp27 = simd_and(r800_fff_tmp4, r800_fff_tmp26);
                  byte_range_99_9b = simd_and(r800_fff_tmp27, r800_ffff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(15), sequence_e0_a1_adv));
                  r800_fff_tmp28 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp29);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp30 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  byte_range_a4_bf = simd_and(r800_fff_tmp30, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(16), sequence_e0_a3_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp31);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp33 = simd_andc(r800_ffff_tmp5, r800_fff_tmp32);
                  r800_fff_tmp34 = simd_andc(r800_fff_tmp33, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r800_fff_tmp34, r800_fff_tmp12);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(17), sequence_e0_a4_adv));
                  r800_fff_tmp35 = simd_and(sequence_e0_a4_adv, byte_range_80_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp37 = simd_and(r800_ffff_tmp5, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp39 = simd_and(r800_fff_tmp26, r800_fff_tmp38);
                  byte_ba = simd_and(r800_fff_tmp37, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_a4_adv, byte_ba);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp42 = simd_andc(r800_fff_tmp41, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp37, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_a4_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_ffff_tmp2, r800_fff_tmp24);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp45 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp46 = simd_xor(basis_bits.bit_4, r800_fff_tmp45);
                  byte_range_81_88 = simd_and(r800_fff_tmp33, r800_fff_tmp46);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(18), sequence_e0_a5_adv));
                  r800_fff_tmp47 = simd_and(sequence_e0_a5_adv, byte_range_81_88);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(r800_fff_tmp41, r800_fff_tmp24);
                  byte_8d = simd_and(r800_fff_tmp33, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_a5_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_andc(r800_fff_tmp4, basis_bits.bit_4);
                  byte_range_91_97 = simd_and(r800_fff_tmp50, r800_fff_tmp45);
                  r800_fff_tmp51 = simd_and(sequence_e0_a5_adv, byte_range_91_97);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_a2_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(sequence_e0_a5_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_ffff_tmp2, r800_fff_tmp38);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp54);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  byte_81 = simd_and(r800_fff_tmp33, r800_fff_tmp25);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(19), sequence_e0_a6_adv));
                  r800_fff_tmp55 = simd_and(sequence_e0_a6_adv, byte_81);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(sequence_e0_a6_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp57);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp58 = simd_andc(r800_fff_tmp33, basis_bits.bit_4);
                  r800_fff_tmp59 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_81_84 = simd_and(r800_fff_tmp58, r800_fff_tmp59);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(20), sequence_e0_a7_adv));
                  r800_fff_tmp60 = simd_and(sequence_e0_a7_adv, byte_range_81_84);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(sequence_e0_a7_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_and(sequence_e0_a7_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_andc(r800_fff_tmp26, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp63);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp64 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_81_82 = simd_and(r800_fff_tmp34, r800_fff_tmp64);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(21), sequence_e0_a8_adv));
                  r800_fff_tmp65 = simd_and(sequence_e0_a8_adv, byte_range_81_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_and(sequence_e0_a8_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(r800_fff_tmp26, r800_fff_tmp24);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp67);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(22), sequence_e0_a9_adv));
                  r800_fff_tmp68 = simd_and(sequence_e0_a9_adv, byte_range_81_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp68);
                  r800_fff_tmp69 = simd_not(r800_fff_tmp45);
                  r800_fff_tmp70 = simd_and(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp69), simd_andc(r800_fff_tmp70, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp33, r800_fff_tmp71);
                  r800_fff_tmp72 = simd_and(sequence_e0_a9_adv, byte_range_87_88);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(r800_fff_tmp33, basis_bits.bit_4);
                  r800_fff_tmp74 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp21), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r800_fff_tmp73, r800_fff_tmp74);
                  r800_fff_tmp75 = simd_and(sequence_e0_a9_adv, byte_range_8b_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp75);
                  byte_91 = simd_and(r800_fff_tmp4, r800_fff_tmp25);
                  r800_fff_tmp76 = simd_and(sequence_e0_a9_adv, byte_91);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp76);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp37, r800_4dff_tmp1);
                  r800_fff_tmp77 = simd_and(sequence_e0_a9_adv, byte_range_b0_b1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp77);
                  byte_b5 = simd_and(r800_fff_tmp37, r800_fff_tmp44);
                  r800_fff_tmp78 = simd_and(sequence_e0_a9_adv, byte_b5);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp78);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp39);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(23), sequence_e0_aa_adv));
                  r800_fff_tmp79 = simd_and(sequence_e0_aa_adv, byte_range_81_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp79);
                  r800_fff_tmp80 = simd_and(sequence_e0_aa_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(r800_fff_tmp26, r800_fff_tmp12);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp81);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  byte_range_81_85 = simd_and(r800_fff_tmp58, r800_fff_tmp22);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(24), sequence_e0_ab_adv));
                  r800_fff_tmp82 = simd_and(sequence_e0_ab_adv, byte_range_81_85);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp82);
                  r800_fff_tmp83 = simd_and(sequence_e0_ab_adv, byte_range_87_88);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_ab_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_and(sequence_e0_ab_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp85);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp42);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(25), sequence_e0_ac_adv));
                  r800_fff_tmp86 = simd_and(sequence_e0_ac_adv, byte_81);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp86);
                  r800_fff_tmp87 = simd_and(sequence_e0_ac_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp87);
                  r800_fff_tmp88 = simd_and(r800_fff_tmp41, r800_fff_tmp12);
                  byte_bf = simd_and(r800_fff_tmp37, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_ac_adv, byte_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp89);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp48);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(26), sequence_e0_ad_adv));
                  r800_fff_tmp90 = simd_and(sequence_e0_ad_adv, byte_range_81_84);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(sequence_e0_ad_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp91);
                  byte_96 = simd_and(r800_fff_tmp4, r800_fff_tmp54);
                  r800_fff_tmp92 = simd_and(sequence_e0_ad_adv, byte_96);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp92);
                  r800_fff_tmp93 = simd_and(sequence_e0_ad_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp93);
                  r800_fff_tmp94 = simd_and(r800_fff_tmp41, r800_fff_tmp38);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp94);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp95 = simd_andc(r800_fff_tmp38, r800_ffff_tmp1);
                  byte_82 = simd_and(r800_fff_tmp33, r800_fff_tmp95);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(27), sequence_e0_ae_adv));
                  r800_fff_tmp96 = simd_and(sequence_e0_ae_adv, byte_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp96);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp88);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_80 = simd_andc(r800_fff_tmp33, r800_1fff_tmp1);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(28), sequence_e0_af_adv));
                  r800_fff_tmp97 = simd_and(sequence_e0_af_adv, byte_80);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_and(sequence_e0_af_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp98);
                  byte_b0 = simd_andc(r800_fff_tmp37, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(29), sequence_e0_b0_adv));
                  r800_fff_tmp99 = simd_and(sequence_e0_b0_adv, byte_80);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp41, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp37, r800_fff_tmp100);
                  r800_fff_tmp101 = simd_and(sequence_e0_b0_adv, byte_range_be_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp101);
                  byte_b1 = simd_and(r800_fff_tmp37, r800_fff_tmp25);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(30), sequence_e0_b1_adv));
                  r800_fff_tmp102 = simd_and(sequence_e0_b1_adv, byte_80);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp69), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp33, r800_fff_tmp103);
                  r800_fff_tmp104 = simd_and(sequence_e0_b1_adv, byte_range_86_88);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp104);
                  r800_fff_tmp105 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r800_fff_tmp73, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(sequence_e0_b1_adv, byte_range_8a_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp4, r800_ffff_tmp2);
                  byte_range_95_96 = simd_and(r800_fff_tmp107, r800_fff_tmp64);
                  r800_fff_tmp108 = simd_and(sequence_e0_b1_adv, byte_range_95_96);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(sequence_e0_b1_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp109);
                  byte_b2 = simd_and(r800_fff_tmp37, r800_fff_tmp95);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(31), sequence_e0_b2_adv));
                  r800_fff_tmp110 = simd_and(sequence_e0_b2_adv, byte_81);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_and(sequence_e0_b2_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(sequence_e0_b2_adv, byte_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp112);
                  byte_b3 = simd_and(r800_fff_tmp37, r800_fff_tmp29);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  byte_86 = simd_and(r800_fff_tmp33, r800_fff_tmp54);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(32), sequence_e0_b3_adv));
                  r800_fff_tmp113 = simd_and(sequence_e0_b3_adv, byte_86);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp113);
                  r800_fff_tmp114 = simd_andc(r800_fff_tmp41, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r800_fff_tmp33, r800_fff_tmp114);
                  r800_fff_tmp115 = simd_and(sequence_e0_b3_adv, byte_range_8c_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_and(sequence_e0_b3_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp116);
                  byte_b4 = simd_and(r800_fff_tmp37, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(33), sequence_e0_b4_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_b4_adv, byte_81);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp117);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(34), sequence_e0_b5_adv));
                  r800_fff_tmp118 = simd_and(sequence_e0_b5_adv, byte_range_81_84);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_b5_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_b5_adv, byte_range_a2_a3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp120);
                  byte_b7 = simd_and(r800_fff_tmp37, r800_fff_tmp57);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_8a = simd_and(r800_fff_tmp33, r800_fff_tmp39);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(35), sequence_e0_b7_adv));
                  r800_fff_tmp121 = simd_and(sequence_e0_b7_adv, byte_8a);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp123 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp122), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_92_94 = simd_and(r800_fff_tmp50, r800_fff_tmp123);
                  r800_fff_tmp124 = simd_and(sequence_e0_b7_adv, byte_range_92_94);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp124);
                  r800_fff_tmp125 = simd_and(sequence_e0_b7_adv, byte_96);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp125);
                  byte_b8 = simd_and(r800_fff_tmp37, r800_fff_tmp63);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(36), sequence_e0_b8_adv));
                  r800_fff_tmp126 = simd_and(sequence_e0_b8_adv, byte_b1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp126);
                  r800_fff_tmp127 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp128 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp127), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_ba = simd_and(r800_fff_tmp37, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(sequence_e0_b8_adv, byte_range_b4_ba);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp129);
                  byte_b9 = simd_and(r800_fff_tmp37, r800_fff_tmp67);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp130 = simd_xor(basis_bits.bit_4, r800_fff_tmp70);
                  byte_range_87_8e = simd_and(r800_fff_tmp33, r800_fff_tmp130);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(37), sequence_e0_b9_adv));
                  r800_fff_tmp131 = simd_and(sequence_e0_b9_adv, byte_range_87_8e);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp131);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(38), sequence_e0_ba_adv));
                  r800_fff_tmp132 = simd_and(sequence_e0_ba_adv, byte_b1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp132);
                  r800_fff_tmp133 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r800_fff_tmp37, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_and(sequence_e0_ba_adv, byte_range_b4_b9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp37, basis_bits.bit_4);
                  r800_fff_tmp136 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp122), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(r800_fff_tmp135, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_and(sequence_e0_ba_adv, byte_range_bb_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp137);
                  byte_bb = simd_and(r800_fff_tmp37, r800_fff_tmp81);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  byte_range_88_8d = simd_andc(r800_fff_tmp73, r800_fff_tmp7);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(39), sequence_e0_bb_adv));
                  r800_fff_tmp138 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp138);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp139 = simd_andc(r800_fff_tmp26, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r800_fff_tmp4, r800_fff_tmp139);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(40), sequence_e0_bc_adv));
                  r800_fff_tmp140 = simd_and(sequence_e0_bc_adv, byte_range_98_99);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp140);
                  r800_fff_tmp141 = simd_and(sequence_e0_bc_adv, byte_b5);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_and(sequence_e0_bc_adv, byte_b7);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp142);
                  r800_fff_tmp143 = simd_and(sequence_e0_bc_adv, byte_b9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp143);
                  byte_bd = simd_and(r800_fff_tmp37, r800_fff_tmp48);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp144 = simd_not(r800_fff_tmp70);
                  r800_fff_tmp145 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp144), simd_andc(r800_fff_tmp45, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r800_fff_tmp37, r800_fff_tmp145);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(41), sequence_e0_bd_adv));
                  r800_fff_tmp146 = simd_and(sequence_e0_bd_adv, byte_range_b1_be);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp146);
                  byte_be = simd_and(r800_fff_tmp37, r800_fff_tmp94);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp147 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r800_fff_tmp58, r800_fff_tmp147);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(42), sequence_e0_be_adv));
                  r800_fff_tmp148 = simd_and(sequence_e0_be_adv, byte_range_80_84);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp148);
                  r800_fff_tmp149 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_86_87 = simd_and(r800_fff_tmp33, r800_fff_tmp149);
                  r800_fff_tmp150 = simd_and(sequence_e0_be_adv, byte_range_86_87);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp150);
                  r800_fff_tmp151 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp152 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp153 = simd_and(r800_fff_tmp41, r800_ffff_tmp3);
                  r800_fff_tmp154 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp152), simd_andc(r800_fff_tmp153, basis_bits.bit_3));
                  byte_range_8d_97 = simd_and(r800_fff_tmp151, r800_fff_tmp154);
                  r800_fff_tmp155 = simd_and(sequence_e0_be_adv, byte_range_8d_97);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp155);
                  r800_fff_tmp156 = simd_and(basis_bits.bit_3, r800_fff_tmp153);
                  r800_fff_tmp157 = simd_not(r800_fff_tmp156);
                  r800_fff_tmp158 = simd_and(basis_bits.bit_4, r800_fff_tmp45);
                  r800_fff_tmp159 = simd_and(basis_bits.bit_3, r800_fff_tmp158);
                  r800_fff_tmp160 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp157), simd_andc(r800_fff_tmp159, basis_bits.bit_2));
                  byte_range_99_bc = simd_and(r800_ffff_tmp5, r800_fff_tmp160);
                  r800_fff_tmp161 = simd_and(sequence_e0_be_adv, byte_range_99_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp161);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(43), sequence_e0_bf_adv));
                  r800_fff_tmp162 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r800_fff_tmp162);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 31);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(44, 22))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(44), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_not(r800_1fff_tmp1);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp6, r800_ffff_tmp3);
                  r1000_1fff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp5), simd_andc(r1000_1fff_tmp7, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp8);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(45), sequence_e1_80_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_80_adv, byte_range_ad_b0);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp11, basis_bits.bit_4);
                  r1000_1fff_tmp13 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_b2_b7 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_80_adv, byte_range_b2_b7);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b9_ba = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_80_adv, byte_range_b9_ba);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp6);
                  byte_range_bd_be = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp17);
                  r1000_1fff_tmp20 = simd_and(sequence_e1_80_adv, byte_range_bd_be);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp20);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp21 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_andc(r1000_1fff_tmp15, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(46), sequence_e1_81_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_81_adv, byte_range_98_99);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp26 = simd_not(r1000_1fff_tmp25);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp6, basis_bits.bit_6);
                  r1000_1fff_tmp28 = simd_and(basis_bits.bit_3, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp28, basis_bits.bit_2));
                  byte_range_9e_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_81_adv, byte_range_9e_a0);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b1_b4 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_81_adv, byte_range_b1_b4);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp34 = simd_andc(r1000_1fff_tmp33, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(47), sequence_e1_82_adv));
                  r1000_1fff_tmp35 = simd_and(sequence_e1_82_adv, byte_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r1000_1fff_tmp36, r1000_1fff_tmp17);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_82_adv, byte_range_85_86);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(r1000_1fff_tmp6, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_82_adv, byte_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp39);
                  byte_9d = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp38);
                  r1000_1fff_tmp40 = simd_and(sequence_e1_82_adv, byte_9d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp40);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp6);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp41, r800_ffff_tmp3);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(48), sequence_e1_8d_adv));
                  r1000_1fff_tmp42 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp42);
                  r1000_1fff_tmp43 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp43);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp44 = simd_andc(r1000_1fff_tmp22, basis_bits.bit_4);
                  r1000_1fff_tmp45 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp46 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp45), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_92_94 = simd_and(r1000_1fff_tmp44, r1000_1fff_tmp46);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(49), sequence_e1_9c_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_9c_adv, byte_range_92_94);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp47);
                  byte_range_b2_b4 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_9c_adv, byte_range_b2_b4);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp48);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp49 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_92_93 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp49);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(50), sequence_e1_9d_adv));
                  r1000_1fff_tmp50 = simd_and(sequence_e1_9d_adv, byte_range_92_93);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp50);
                  byte_range_b2_b3 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_and(sequence_e1_9d_adv, byte_range_b2_b3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp51);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp33);
                  byte_9e = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp52);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp53 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp53);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(51), sequence_e1_9e_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_9e_adv, byte_range_b4_b5);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp54);
                  r1000_1fff_tmp55 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp56 = simd_not(r1000_1fff_tmp55);
                  r1000_1fff_tmp57 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_5, r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp56), simd_andc(r1000_1fff_tmp58, basis_bits.bit_4));
                  byte_range_b7_bd = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp59);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_9e_adv, byte_range_b7_bd);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp57);
                  byte_9f = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp61);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp62 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp33);
                  byte_86 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp62);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(52), sequence_e1_9f_adv));
                  r1000_1fff_tmp63 = simd_and(sequence_e1_9f_adv, byte_86);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp65 = simd_not(r800_ffff_tmp1);
                  r1000_1fff_tmp66 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp67 = simd_and(basis_bits.bit_4, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp65), simd_andc(r1000_1fff_tmp67, basis_bits.bit_3));
                  byte_range_89_93 = simd_and(r1000_1fff_tmp64, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_and(sequence_e1_9f_adv, byte_range_89_93);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_9f_adv, byte_9d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp71, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp72 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp73 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp74 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp73), simd_andc(r1000_1fff_tmp57, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp72, r1000_1fff_tmp74);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(53), sequence_e1_a0_adv));
                  r1000_1fff_tmp75 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp75);
                  byte_a2 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp34);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp76 = simd_and(r1000_1fff_tmp15, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp76);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(54), sequence_e1_a2_adv));
                  r1000_1fff_tmp77 = simd_and(sequence_e1_a2_adv, byte_a9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp77);
                  byte_a4 = simd_and(r1000_1fff_tmp71, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp78 = simd_andc(r1000_1fff_tmp71, r800_ffff_tmp1);
                  byte_range_a0_a2 = simd_andc(r1000_1fff_tmp78, r1000_1fff_tmp57);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(55), sequence_e1_a4_adv));
                  r1000_1fff_tmp79 = simd_and(sequence_e1_a4_adv, byte_range_a0_a2);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_not(r1000_1fff_tmp66);
                  r1000_1fff_tmp81 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp80), simd_andc(r1000_1fff_tmp58, basis_bits.bit_4));
                  byte_range_a7_a8 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp81);
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a4_adv, byte_range_a7_a8);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp82);
                  byte_b2 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp34);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_a4_adv, byte_b2);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp83);
                  byte_range_b9_bb = simd_and(r1000_1fff_tmp16, r800_ffff_tmp3);
                  r1000_1fff_tmp84 = simd_and(sequence_e1_a4_adv, byte_range_b9_bb);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_andc(r1000_1fff_tmp15, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp85);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  byte_range_97_98 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp81);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(56), sequence_e1_a8_adv));
                  r1000_1fff_tmp86 = simd_and(sequence_e1_a8_adv, byte_range_97_98);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp86);
                  r1000_1fff_tmp87 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp57);
                  byte_9b = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_a8_adv, byte_9b);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp88);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_96 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp62);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(57), sequence_e1_a9_adv));
                  r1000_1fff_tmp89 = simd_and(sequence_e1_a9_adv, byte_96);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(r1000_1fff_tmp22, basis_bits.bit_4);
                  byte_range_98_9e = simd_andc(r1000_1fff_tmp90, r1000_1fff_tmp58);
                  r1000_1fff_tmp91 = simd_and(sequence_e1_a9_adv, byte_range_98_9e);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_and(sequence_e1_a9_adv, byte_a0);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp92);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_a9_adv, byte_a2);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp95 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp94);
                  byte_range_a5_ac = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp95);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_a9_adv, byte_range_a5_ac);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp96);
                  r1000_1fff_tmp97 = simd_not(r1000_1fff_tmp94);
                  r1000_1fff_tmp98 = simd_or(basis_bits.bit_5, r1000_1fff_tmp57);
                  r1000_1fff_tmp99 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp97), simd_andc(r1000_1fff_tmp98, basis_bits.bit_4));
                  byte_range_b3_bc = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_a9_adv, byte_range_b3_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp100);
                  byte_bf = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp61);
                  r1000_1fff_tmp101 = simd_and(sequence_e1_a9_adv, byte_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp33);
                  byte_aa = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp102);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp103 = simd_and(basis_bits.bit_4, r1000_1fff_tmp55);
                  byte_range_b0_bd = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp103);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(58), sequence_e1_aa_adv));
                  r1000_1fff_tmp104 = simd_and(sequence_e1_aa_adv, byte_range_b0_bd);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp104);
                  byte_ac = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp43);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  byte_range_80_83 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(59), sequence_e1_ac_adv));
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ac_adv, byte_range_80_83);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp105);
                  byte_b4 = simd_and(r1000_1fff_tmp11, r800_ffff_tmp4);
                  r1000_1fff_tmp106 = simd_and(sequence_e1_ac_adv, byte_b4);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp106);
                  r1000_1fff_tmp107 = simd_not(r1000_1fff_tmp98);
                  r1000_1fff_tmp108 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp107), simd_andc(r1000_1fff_tmp55, basis_bits.bit_4));
                  byte_range_b6_ba = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp108);
                  r1000_1fff_tmp109 = simd_and(sequence_e1_ac_adv, byte_range_b6_ba);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp109);
                  byte_bc = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp43);
                  r1000_1fff_tmp110 = simd_and(sequence_e1_ac_adv, byte_bc);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp110);
                  byte_ad = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp38);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(60), sequence_e1_ad_adv));
                  r1000_1fff_tmp111 = simd_and(sequence_e1_ad_adv, byte_82);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp111);
                  r1000_1fff_tmp112 = simd_and(basis_bits.bit_4, r1000_1fff_tmp98);
                  r1000_1fff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp65), simd_andc(r1000_1fff_tmp112, basis_bits.bit_3));
                  byte_range_ab_b3 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp113);
                  r1000_1fff_tmp114 = simd_and(sequence_e1_ad_adv, byte_range_ab_b3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp114);
                  byte_ae = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp52);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(61), sequence_e1_ae_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_ae_adv, byte_range_80_81);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp115);
                  r1000_1fff_tmp116 = simd_andc(r1000_1fff_tmp71, basis_bits.bit_4);
                  r1000_1fff_tmp117 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_a2_a5 = simd_and(r1000_1fff_tmp116, r1000_1fff_tmp117);
                  r1000_1fff_tmp118 = simd_and(sequence_e1_ae_adv, byte_range_a2_a5);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp118);
                  byte_range_a8_a9 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp23);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_ae_adv, byte_range_a8_a9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp119);
                  r1000_1fff_tmp120 = simd_and(r1000_1fff_tmp71, basis_bits.bit_4);
                  byte_range_ab_ad = simd_and(r1000_1fff_tmp120, r1000_1fff_tmp74);
                  r1000_1fff_tmp121 = simd_and(sequence_e1_ae_adv, byte_range_ab_ad);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp121);
                  byte_af = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp61);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  byte_a6 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp62);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(62), sequence_e1_af_adv));
                  r1000_1fff_tmp122 = simd_and(sequence_e1_af_adv, byte_a6);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp122);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_af_adv, byte_range_a8_a9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp123);
                  r1000_1fff_tmp124 = simd_and(sequence_e1_af_adv, byte_ad);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp126 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp125), simd_andc(r1000_1fff_tmp61, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp126);
                  r1000_1fff_tmp127 = simd_and(sequence_e1_af_adv, byte_range_af_b1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp127);
                  byte_b0 = simd_andc(r1000_1fff_tmp11, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp128 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp65), simd_andc(r1000_1fff_tmp6, basis_bits.bit_3));
                  byte_range_ac_b3 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp128);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(63), sequence_e1_b0_adv));
                  r1000_1fff_tmp129 = simd_and(sequence_e1_b0_adv, byte_range_ac_b3);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp129);
                  r1000_1fff_tmp130 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp130);
                  r1000_1fff_tmp131 = simd_and(sequence_e1_b0_adv, byte_range_b6_b7);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp131);
                  r1000_1fff_tmp132 = simd_andc(r1000_1fff_tmp57, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp132);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp133 = simd_andc(r1000_1fff_tmp22, r800_ffff_tmp1);
                  byte_range_90_92 = simd_andc(r1000_1fff_tmp133, r1000_1fff_tmp57);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(64), sequence_e1_b3_adv));
                  r1000_1fff_tmp134 = simd_and(sequence_e1_b3_adv, byte_range_90_92);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp134);
                  r1000_1fff_tmp135 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp136 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp135, basis_bits.bit_2));
                  byte_range_94_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp136);
                  r1000_1fff_tmp137 = simd_and(sequence_e1_b3_adv, byte_range_94_a0);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp137);
                  r1000_1fff_tmp138 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp80), simd_andc(r1000_1fff_tmp13, basis_bits.bit_4));
                  byte_range_a2_a8 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_and(sequence_e1_b3_adv, byte_range_a2_a8);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_b3_adv, byte_ad);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp140);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_b3_adv, byte_b4);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp141);
                  byte_range_b8_b9 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp23);
                  r1000_1fff_tmp142 = simd_and(sequence_e1_b3_adv, byte_range_b8_b9);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp142);
                  r1000_1fff_tmp143 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp57);
                  byte_b7 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp143);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp144 = simd_or(basis_bits.bit_4, r1000_1fff_tmp55);
                  r1000_1fff_tmp145 = simd_and(basis_bits.bit_3, r1000_1fff_tmp144);
                  r1000_1fff_tmp146 = simd_and(basis_bits.bit_2, r1000_1fff_tmp145);
                  byte_range_80_b5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp146);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(65), sequence_e1_b7_adv));
                  r1000_1fff_tmp147 = simd_and(sequence_e1_b7_adv, byte_range_80_b5);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp147);
                  byte_range_bc_bf = r1000_1fff_tmp19;
                  r1000_1fff_tmp148 = simd_and(sequence_e1_b7_adv, byte_range_bc_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r1000_1fff_tmp148);
                }
                else {
                  carryQ.CarryDequeueEnqueue(44, 22);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 53);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(66, 8))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(66, 5))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(66), r2000_2fff_tmp5));
                  sequence_e2_83 = simd_and(r2000_2fff_tmp5, byte_83);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, r2000_2fff_tmp8);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(67), sequence_e2_83_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_83_adv, byte_range_90_9c);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, r800_ffff_tmp1);
                  byte_a1 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_83_adv, byte_a1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp16 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r2000_2fff_tmp17 = simd_not(r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_or(basis_bits.bit_4, r2000_2fff_tmp8);
                  r2000_2fff_tmp19 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp17), simd_andc(r2000_2fff_tmp18, basis_bits.bit_3));
                  byte_range_a5_b0 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(sequence_e2_83_adv, byte_range_a5_b0);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp21);
                  byte_b3 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp4);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp23 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp24 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp3);
                  r2000_2fff_tmp26 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp23), simd_andc(r2000_2fff_tmp25, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp26);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(68), sequence_e2_b3_adv));
                  r2000_2fff_tmp27 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp12);
                  byte_b5 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp28);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_bf = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp25);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(69), sequence_e2_b5_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_b5_adv, byte_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b7 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp30);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_a0_bf = r2000_2fff_tmp15;
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(70), sequence_e2_b7_adv));
                  r2000_2fff_tmp31 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r2000_2fff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(66, 5);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(71, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(71), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_ad = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(72), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_aa_ad);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r3000_4dff_tmp8);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp12 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(73), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
                  struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r3000_4dff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(71, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(66, 8);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 61);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(74, 18))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[74] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(74), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              byte_af = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp12);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(75), sequence_ea_99_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_af);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp14);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp17 = simd_not(ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp17), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_b4_bd = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(sequence_ea_99_adv, byte_range_b4_bd);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp19);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp12);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(76), sequence_ea_9a_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_9a_adv, byte_9f);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp22 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp22);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(77), sequence_ea_9b_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp24);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp25 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp26 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_82 = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp27);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(78), sequence_ea_a0_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_a0_adv, byte_82);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_86 = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(sequence_ea_a0_adv, byte_86);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp30);
              byte_8b = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp21);
              ra000_ffff_tmp31 = simd_and(sequence_ea_a0_adv, byte_8b);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(ra000_ffff_tmp9, r800_ffff_tmp2);
              ra000_ffff_tmp33 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_a5_a6 = simd_and(ra000_ffff_tmp32, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(sequence_ea_a0_adv, byte_range_a5_a6);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_andc(ra000_ffff_tmp11, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp35);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_84 = simd_and(ra000_ffff_tmp26, r800_ffff_tmp4);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(79), sequence_ea_a3_adv));
              ra000_ffff_tmp36 = simd_and(sequence_ea_a3_adv, byte_84);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp38 = simd_and(basis_bits.bit_3, ra000_ffff_tmp22);
              byte_range_a0_b1 = simd_andc(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_and(sequence_ea_a3_adv, byte_range_a0_b1);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp39);
              byte_a4 = simd_and(ra000_ffff_tmp9, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp40 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp16);
              byte_range_a6_ad = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp40);
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(80), sequence_ea_a4_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp41);
              ra000_ffff_tmp42 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp6);
              byte_a5 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp42);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp43 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp44 = simd_not(ra000_ffff_tmp22);
              ra000_ffff_tmp45 = simd_and(basis_bits.bit_5, ra000_ffff_tmp11);
              ra000_ffff_tmp46 = simd_or(basis_bits.bit_4, ra000_ffff_tmp45);
              ra000_ffff_tmp47 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp44), simd_andc(ra000_ffff_tmp46, basis_bits.bit_3));
              byte_range_87_91 = simd_and(ra000_ffff_tmp43, ra000_ffff_tmp47);
              carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(81), sequence_ea_a5_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ea_a5_adv, byte_range_87_91);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp48);
              byte_a6 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp29);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp49 = simd_andc(ra000_ffff_tmp26, r800_ffff_tmp1);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp49, ra000_ffff_tmp11);
              carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(82), sequence_ea_a6_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ea_a6_adv, byte_range_80_82);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp50);
              byte_b3 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp35);
              ra000_ffff_tmp51 = simd_and(sequence_ea_a6_adv, byte_b3);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_not(r800_ffff_tmp12);
              ra000_ffff_tmp53 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp52), simd_andc(ra000_ffff_tmp16, basis_bits.bit_4));
              byte_range_b6_b9 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ea_a6_adv, byte_range_b6_b9);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp54);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_and(sequence_ea_a6_adv, byte_bc);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp11);
              byte_a7 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp57);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(83), sequence_ea_a7_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_a7_adv, byte_a5);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp59);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp60 = simd_and(ra000_ffff_tmp9, basis_bits.bit_4);
              ra000_ffff_tmp61 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp62 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp61), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              byte_range_a9_ae = simd_and(ra000_ffff_tmp60, ra000_ffff_tmp62);
              carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(84), sequence_ea_a8_adv));
              ra000_ffff_tmp63 = simd_and(sequence_ea_a8_adv, byte_range_a9_ae);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp63);
              ra000_ffff_tmp64 = simd_andc(ra000_ffff_tmp15, r800_ffff_tmp1);
              byte_range_b1_b2 = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp33);
              ra000_ffff_tmp65 = simd_and(sequence_ea_a8_adv, byte_range_b1_b2);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp65);
              ra000_ffff_tmp66 = simd_and(ra000_ffff_tmp15, r800_ffff_tmp2);
              byte_range_b5_b6 = simd_and(ra000_ffff_tmp66, ra000_ffff_tmp33);
              ra000_ffff_tmp67 = simd_and(sequence_ea_a8_adv, byte_range_b5_b6);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp67);
              byte_a9 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp7);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_83 = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp35);
              carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(85), sequence_ea_a9_adv));
              ra000_ffff_tmp68 = simd_and(sequence_ea_a9_adv, byte_83);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp68);
              byte_8c = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp55);
              ra000_ffff_tmp69 = simd_and(sequence_ea_a9_adv, byte_8c);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp69);
              ra000_ffff_tmp70 = simd_and(sequence_ea_a9_adv, byte_bc);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp70);
              byte_aa = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              byte_b0 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp24);
              carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(86), sequence_ea_aa_adv));
              ra000_ffff_tmp71 = simd_and(sequence_ea_aa_adv, byte_b0);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp71);
              ra000_ffff_tmp72 = simd_andc(ra000_ffff_tmp15, basis_bits.bit_4);
              ra000_ffff_tmp73 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp73), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_b2_b4 = simd_and(ra000_ffff_tmp72, ra000_ffff_tmp74);
              ra000_ffff_tmp75 = simd_and(sequence_ea_aa_adv, byte_range_b2_b4);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp75);
              ra000_ffff_tmp76 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp77 = simd_not(ra000_ffff_tmp76);
              ra000_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp77), simd_andc(ra000_ffff_tmp45, basis_bits.bit_4));
              byte_range_b7_b8 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp78);
              ra000_ffff_tmp79 = simd_and(sequence_ea_aa_adv, byte_range_b7_b8);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_and(ra000_ffff_tmp10, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp80);
              ra000_ffff_tmp81 = simd_and(sequence_ea_aa_adv, byte_range_be_bf);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp81);
              byte_ab = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp21);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp82 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp1);
              byte_81 = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp82);
              carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(87), sequence_ea_ab_adv));
              ra000_ffff_tmp83 = simd_and(sequence_ea_ab_adv, byte_81);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_6);
              byte_range_ac_ad = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp84);
              ra000_ffff_tmp85 = simd_and(sequence_ea_ab_adv, byte_range_ac_ad);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp85);
              byte_b6 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp29);
              ra000_ffff_tmp86 = simd_and(sequence_ea_ab_adv, byte_b6);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp86);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(88), sequence_ea_af_adv));
              ra000_ffff_tmp87 = simd_and(sequence_ea_af_adv, byte_a5);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(sequence_ea_af_adv, byte_a8);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp88);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp6);
              byte_ad = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(sequence_ea_af_adv, byte_ad);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp90);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp12);
              byte_ac = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp55);
              carryQ.cq[89] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(89), ra000_ffff_tmp91));
              sequence_ef_ac = simd_and(ra000_ffff_tmp91, byte_ac);
              byte_ef_adv = ra000_ffff_tmp91;
              ra000_ffff_tmp92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp92);
              carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(90), sequence_ef_ac_adv));
              ra000_ffff_tmp93 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp93);
              byte_b8 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp59);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              byte_range_80_8f = ra000_ffff_tmp26;
              carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(91), sequence_ef_b8_adv));
              ra000_ffff_tmp94 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp94);
              ra000_ffff_tmp95 = simd_and(basis_bits.bit_4, ra000_ffff_tmp16);
              byte_range_a0_ad = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp95);
              ra000_ffff_tmp96 = simd_and(sequence_ef_b8_adv, byte_range_a0_ad);
              struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, ra000_ffff_tmp96);
            }
            else {
              carryQ.CarryDequeueEnqueue(74, 18);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(12, 80);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(92, 41))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(92), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(93), r10000_10ffff_tmp13));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp13, byte_87);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_bd = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(94), sequence_f0_90_87_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp3);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(95), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp22);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp24 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp24), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_b6_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp26);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(96), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_8d_adv, byte_range_b6_ba);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp28);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            byte_range_81_83 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp2);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(97), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_a8_adv, byte_range_81_83);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            r10000_10ffff_tmp32 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_85_86 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a8_adv, byte_range_85_86);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp33);
            byte_range_8c_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            r10000_10ffff_tmp34 = simd_and(sequence_f0_90_a8_adv, byte_range_8c_8f);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp19);
            byte_range_b8_ba = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp11);
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_a8_adv, byte_range_b8_ba);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp11);
            byte_bf = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_a8_adv, byte_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp38);
            byte_ab = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp20);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp10);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp32);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(98), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_ab_adv, byte_range_a5_a6);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp41);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(99), r10000_10ffff_tmp42));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp42, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp42;
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp41);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(100), sequence_f0_91_80_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_91_80_adv, byte_81);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp43);
            byte_range_b8_bf = simd_and(r10000_10ffff_tmp14, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_80_adv, byte_range_b8_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp44);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp45 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp46 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp11);
            byte_range_80_86 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(101), sequence_f0_91_81_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_91_81_adv, byte_range_80_86);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_81_adv, byte_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp49, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp50);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp51 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp51);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(102), sequence_f0_91_82_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_91_82_adv, byte_range_80_81);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4);
            r10000_10ffff_tmp54 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp11);
            byte_range_b3_b6 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(sequence_f0_91_82_adv, byte_range_b3_b6);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp55);
            byte_range_b9_ba = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp32);
            r10000_10ffff_tmp56 = simd_and(sequence_f0_91_82_adv, byte_range_b9_ba);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp57);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp11);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(103), sequence_f0_91_84_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_91_84_adv, byte_range_80_82);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp58);
            r10000_10ffff_tmp59 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp60 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp59), simd_andc(r10000_10ffff_tmp46, basis_bits.bit_4));
            byte_range_a7_ab = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_and(sequence_f0_91_84_adv, byte_range_a7_ab);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp63 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp64 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp63);
            r10000_10ffff_tmp65 = simd_not(r10000_10ffff_tmp64);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            r10000_10ffff_tmp67 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp65), simd_andc(r10000_10ffff_tmp66, basis_bits.bit_3));
            byte_range_ad_b4 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_and(sequence_f0_91_84_adv, byte_range_ad_b4);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp69);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp70 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_b3 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp70);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(104), sequence_f0_91_85_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_91_85_adv, byte_b3);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp49);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp72);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(105), sequence_f0_91_86_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_91_86_adv, byte_range_80_81);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp75 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp74), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_b6_be = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp75);
            r10000_10ffff_tmp76 = simd_and(sequence_f0_91_86_adv, byte_range_b6_be);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp76);
            byte_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp77 = simd_not(r10000_10ffff_tmp51);
            r10000_10ffff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp77), simd_andc(r10000_10ffff_tmp37, basis_bits.bit_3));
            byte_range_af_b1 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp78);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(106), sequence_f0_91_88_adv));
            r10000_10ffff_tmp79 = simd_and(sequence_f0_91_88_adv, byte_range_af_b1);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp79);
            byte_b4 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp57);
            r10000_10ffff_tmp80 = simd_and(sequence_f0_91_88_adv, byte_b4);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_6);
            byte_range_b6_b7 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp81);
            r10000_10ffff_tmp82 = simd_and(sequence_f0_91_88_adv, byte_range_b6_b7);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp82);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp37);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(107), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_91_8b_adv, byte_9f);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_a3_aa = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(sequence_f0_91_8b_adv, byte_range_a3_aa);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp86);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(108), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_91_8c_adv, byte_81);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp87);
            byte_bc = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp86);
            r10000_10ffff_tmp88 = simd_and(sequence_f0_91_8c_adv, byte_bc);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp88);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(109), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp89 = simd_and(sequence_f0_91_8d_adv, byte_80);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp89);
            r10000_10ffff_tmp90 = simd_not(r10000_10ffff_tmp63);
            r10000_10ffff_tmp91 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp90), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_a6_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp91);
            r10000_10ffff_tmp92 = simd_and(sequence_f0_91_8d_adv, byte_range_a6_ac);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp92);
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp63);
            r10000_10ffff_tmp93 = simd_and(sequence_f0_91_8d_adv, byte_range_b0_b4);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp93);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp50);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            r10000_10ffff_tmp94 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp95 = simd_not(r10000_10ffff_tmp94);
            r10000_10ffff_tmp96 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp95), simd_andc(r10000_10ffff_tmp23, basis_bits.bit_4));
            byte_range_b3_b8 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp96);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(110), sequence_f0_91_92_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_91_92_adv, byte_range_b3_b8);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp49);
            byte_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_and(sequence_f0_91_92_adv, byte_ba);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_91_92_adv, byte_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp100);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp70);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(111), sequence_f0_91_93_adv));
            r10000_10ffff_tmp101 = simd_and(sequence_f0_91_93_adv, byte_80);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp101);
            r10000_10ffff_tmp102 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(sequence_f0_91_93_adv, byte_range_82_83);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp103);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp72);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp104 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_b2_b5 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp104);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(112), sequence_f0_91_96_adv));
            r10000_10ffff_tmp105 = simd_and(sequence_f0_91_96_adv, byte_range_b2_b5);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp105);
            r10000_10ffff_tmp106 = simd_andc(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_bc_bd = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp106);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_91_96_adv, byte_range_bc_bd);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(sequence_f0_91_96_adv, byte_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp108);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(113), sequence_f0_91_97_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp109);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp28);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            byte_range_b3_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp84);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(114), sequence_f0_91_98_adv));
            r10000_10ffff_tmp110 = simd_and(sequence_f0_91_98_adv, byte_range_b3_ba);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp110);
            r10000_10ffff_tmp111 = simd_and(sequence_f0_91_98_adv, byte_bd);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp111);
            r10000_10ffff_tmp112 = simd_and(sequence_f0_91_98_adv, byte_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp112);
            r10000_10ffff_tmp113 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp16);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp113);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(115), sequence_f0_91_99_adv));
            r10000_10ffff_tmp114 = simd_and(sequence_f0_91_99_adv, byte_80);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp114);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp98);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(116), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp115 = simd_and(sequence_f0_91_9a_adv, byte_ab);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp115);
            byte_ad = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp17);
            r10000_10ffff_tmp116 = simd_and(sequence_f0_91_9a_adv, byte_ad);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp116);
            byte_range_b0_b5 = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp25);
            r10000_10ffff_tmp117 = simd_and(sequence_f0_91_9a_adv, byte_range_b0_b5);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp117);
            byte_b7 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp12);
            r10000_10ffff_tmp118 = simd_and(sequence_f0_91_9a_adv, byte_b7);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp118);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(117), r10000_10ffff_tmp119));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp119, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp119;
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(118), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp120 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b4);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp120);
            byte_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp86);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp46);
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(119), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp121 = simd_and(sequence_f0_96_ac_adv, byte_range_b0_b6);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp121);
            r10000_10ffff_tmp122 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp49);
            byte_be = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp122);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp123 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp124 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            r10000_10ffff_tmp125 = simd_not(r10000_10ffff_tmp124);
            r10000_10ffff_tmp126 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp125), simd_andc(r10000_10ffff_tmp37, basis_bits.bit_3));
            byte_range_8f_92 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp126);
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(120), sequence_f0_96_be_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_96_be_adv, byte_range_8f_92);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp127);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp50);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(121), r10000_10ffff_tmp128));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp128, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp128;
            r10000_10ffff_tmp129 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp15);
            byte_range_9d_9e = simd_and(r10000_10ffff_tmp129, r10000_10ffff_tmp32);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(122), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp130 = simd_and(sequence_f0_9b_b2_adv, byte_range_9d_9e);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp130);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(123), r10000_10ffff_tmp131));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp131, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp131;
            r10000_10ffff_tmp132 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp133 = simd_not(r10000_10ffff_tmp132);
            r10000_10ffff_tmp134 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp133), simd_andc(r10000_10ffff_tmp46, basis_bits.bit_4));
            byte_range_a7_a9 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp134);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(124), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_9d_85_adv, byte_range_a7_a9);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp135);
            byte_range_bb_bf = simd_and(byte_range_b8_bf, r10000_10ffff_tmp23);
            r10000_10ffff_tmp136 = simd_and(sequence_f0_9d_85_adv, byte_range_bb_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp136);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(125), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp137 = simd_and(sequence_f0_9d_86_adv, byte_range_80_82);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp137);
            r10000_10ffff_tmp138 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp59), simd_andc(r10000_10ffff_tmp63, basis_bits.bit_4));
            byte_range_85_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp138);
            r10000_10ffff_tmp139 = simd_and(sequence_f0_9d_86_adv, byte_range_85_8b);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            byte_range_aa_ad = simd_and(r10000_10ffff_tmp140, r10000_10ffff_tmp104);
            r10000_10ffff_tmp141 = simd_and(sequence_f0_9d_86_adv, byte_range_aa_ad);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp141);
            byte_89 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp113);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp142 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp143 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp142), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp143);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(126), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp144);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp122);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_a3 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp70);
            carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(127), r10000_10ffff_tmp145));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp145, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp145;
            r10000_10ffff_tmp146 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            byte_range_90_96 = simd_andc(r10000_10ffff_tmp146, r10000_10ffff_tmp46);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(128), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_9e_a3_adv, byte_range_90_96);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp147);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp70);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(129), r10000_10ffff_tmp148));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp148, byte_a0);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp11);
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(130), r10000_10ffff_tmp149));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp149, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(131), r10000_10ffff_tmp150));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp150, byte_range_80_bf);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp151 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            sequence_f3_a0_87 = simd_and(r10000_10ffff_tmp149, byte_87);
            r10000_10ffff_tmp152 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_f3_adv = r10000_10ffff_tmp148;
            sequence_f3_a0_adv = r10000_10ffff_tmp149;
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(132), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp153 = simd_and(sequence_f3_a0_87_adv, byte_range_80_af);
            struct_gc_Mn.cc = simd_or(struct_gc_Mn.cc, r10000_10ffff_tmp153);
          }
          else {
            carryQ.CarryDequeueEnqueue(92, 41);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 133);
        }
        carryQ.CarryQ_Adjust(133);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<133, 0> carryQ;
  };

  struct Property_gc_Mc {
  Property_gc_Mc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Mc & struct_gc_Mc) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a4, r800_fff_tmp2, sequence_e0_a4, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6, byte_83;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, r800_fff_tmp11, byte_bb, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, byte_range_be_bf, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, byte_a5, sequence_e0_a5, byte_80;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp18, r800_fff_tmp19, r800_fff_tmp20;
		BitBlock byte_range_89_8c, r800_fff_tmp21, byte_range_8e_8f, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_a6, sequence_e0_a6;
		BitBlock r800_fff_tmp25, byte_range_82_83, sequence_e0_a6_adv, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, byte_a7, sequence_e0_a7;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31;
		BitBlock r800_fff_tmp32, r800_fff_tmp33, byte_range_87_88, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, r800_fff_tmp36, byte_range_8b_8c, r800_fff_tmp37;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, byte_97, r800_fff_tmp40;
		BitBlock r800_fff_tmp41, byte_a8, sequence_e0_a8, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44, byte_a9;
		BitBlock sequence_e0_a9, sequence_e0_a9_adv, r800_fff_tmp45, r800_fff_tmp46;
		BitBlock byte_aa, sequence_e0_aa, sequence_e0_aa_adv, r800_fff_tmp47;
		BitBlock r800_fff_tmp48, byte_ab, sequence_e0_ab, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp49, byte_89, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, byte_ac, sequence_e0_ac, sequence_e0_ac_adv;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, byte_be, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, byte_ad, sequence_e0_ad, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60;
		BitBlock byte_ae, sequence_e0_ae, sequence_e0_ae_adv, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, byte_af, sequence_e0_af, r800_fff_tmp63;
		BitBlock r800_fff_tmp64, byte_range_81_82, sequence_e0_af_adv, r800_fff_tmp65;
		BitBlock r800_fff_tmp66, r800_fff_tmp67, byte_range_86_88, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, byte_range_8a_8c, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock byte_b0, sequence_e0_b0, byte_range_81_83, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, byte_b1, sequence_e0_b1;
		BitBlock r800_fff_tmp74, byte_range_81_84, sequence_e0_b1_adv, r800_fff_tmp75;
		BitBlock r800_fff_tmp76, byte_b2, sequence_e0_b2, sequence_e0_b2_adv;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp79, byte_range_80_84, sequence_e0_b3_adv, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, byte_range_8a_8b, r800_fff_tmp83;
		BitBlock r800_fff_tmp84, byte_range_95_96, r800_fff_tmp85, byte_b4;
		BitBlock sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp86, r800_fff_tmp87;
		BitBlock byte_b5, sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp88;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, byte_b6;
		BitBlock sequence_e0_b6, sequence_e0_b6_adv, r800_fff_tmp92, byte_b7;
		BitBlock sequence_e0_b7, r800_fff_tmp93, r800_fff_tmp94, r800_fff_tmp95;
		BitBlock byte_range_8f_91, sequence_e0_b7_adv, r800_fff_tmp96;
		BitBlock byte_range_98_9f, r800_fff_tmp97, byte_range_b2_b3, r800_fff_tmp98;
		BitBlock byte_bc, sequence_e0_bc, sequence_e0_bc_adv, r800_fff_tmp99, byte_bd;
		BitBlock sequence_e0_bd, byte_bf, sequence_e0_bd_adv, r800_fff_tmp100;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, sequence_e1_80, byte_e1_adv;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, byte_range_ab_ac, sequence_e1_80_adv;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, byte_b8, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, byte_range_bb_bc, r1000_1fff_tmp17, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock byte_range_96_97, sequence_e1_81_adv, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, byte_range_a2_a4;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, byte_range_a7_ad;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31, byte_82;
		BitBlock sequence_e1_82, r1000_1fff_tmp32, byte_range_83_84;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, byte_range_87_8c;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39, byte_8f;
		BitBlock r1000_1fff_tmp40, r1000_1fff_tmp41, byte_range_9a_9c;
		BitBlock r1000_1fff_tmp42, r1000_1fff_tmp43, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp44, sequence_e1_9e_adv, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, r1000_1fff_tmp47, byte_9f, sequence_e1_9f;
		BitBlock byte_range_80_85, sequence_e1_9f_adv, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, r1000_1fff_tmp50, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, sequence_e1_a4, r1000_1fff_tmp53, byte_range_a3_a6;
		BitBlock sequence_e1_a4_adv, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock byte_range_a9_ab, r1000_1fff_tmp56, byte_range_b0_b1;
		BitBlock r1000_1fff_tmp57, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock byte_range_b3_b8, r1000_1fff_tmp60, sequence_e1_a6, byte_range_b0_bf;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock sequence_e1_a7, sequence_e1_a7_adv, r1000_1fff_tmp63;
		BitBlock r1000_1fff_tmp64, byte_range_88_89, r1000_1fff_tmp65, sequence_e1_a8;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_range_99_9a;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp68, r1000_1fff_tmp69;
		BitBlock sequence_e1_a9, r1000_1fff_tmp70, byte_95, sequence_e1_a9_adv;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, byte_a1, r1000_1fff_tmp73;
		BitBlock byte_range_a3_a4, r1000_1fff_tmp74, r1000_1fff_tmp75;
		BitBlock r1000_1fff_tmp76, r1000_1fff_tmp77, r1000_1fff_tmp78;
		BitBlock r1000_1fff_tmp79, byte_range_ad_b2, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, sequence_e1_ac, byte_84, sequence_e1_ac_adv;
		BitBlock r1000_1fff_tmp82, r1000_1fff_tmp83, r1000_1fff_tmp84;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, byte_range_bd_bf;
		BitBlock r1000_1fff_tmp87, r1000_1fff_tmp88, sequence_e1_ad, byte_range_80_81;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp89, r1000_1fff_tmp90;
		BitBlock sequence_e1_ae, sequence_e1_ae_adv, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, byte_range_a6_a7, r1000_1fff_tmp93;
		BitBlock r1000_1fff_tmp94, r1000_1fff_tmp95, sequence_e1_af;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp96, byte_range_aa_ac;
		BitBlock r1000_1fff_tmp97, r1000_1fff_tmp98, r1000_1fff_tmp99;
		BitBlock r1000_1fff_tmp100, sequence_e1_b0, r1000_1fff_tmp101;
		BitBlock byte_range_a4_ab, sequence_e1_b0_adv, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, byte_range_b4_b5, r1000_1fff_tmp104;
		BitBlock r1000_1fff_tmp105, sequence_e1_b3, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp106, r1000_1fff_tmp107, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1, r3000_4dff_tmp2;
		BitBlock r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, byte_range_ae_af;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp8, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_a0, ra000_ffff_tmp6;
		BitBlock sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, sequence_ea_a0_adv;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_a2, sequence_ea_a2, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, sequence_ea_a2_adv;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock byte_range_b4_bf, ra000_ffff_tmp21, ra000_ffff_tmp22, byte_a3;
		BitBlock sequence_ea_a3, byte_range_80_83, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25, sequence_ea_a5;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock byte_range_92_93, sequence_ea_a5_adv, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, sequence_ea_a6, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, byte_range_ba_bb, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock sequence_ea_a8, ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, byte_range_af_b0, sequence_ea_a8_adv;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, byte_range_b3_b4;
		BitBlock ra000_ffff_tmp47, ra000_ffff_tmp48, sequence_ea_a9, ra000_ffff_tmp49;
		BitBlock byte_8d, sequence_ea_a9_adv, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock ra000_ffff_tmp52, ra000_ffff_tmp53, sequence_ea_ab;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, sequence_ea_af;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock byte_range_a9_aa, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91_80, byte_f0_adv;
		BitBlock sequence_f0_91_adv, sequence_f0_91_80_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock sequence_f0_91_82, sequence_f0_91_82_adv, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_range_b0_b2, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock byte_range_b7_b8, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, sequence_f0_91_84, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, byte_86, sequence_f0_91_86;
		BitBlock sequence_f0_91_86_adv, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, byte_range_b3_b5;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_87, sequence_f0_91_87;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock r10000_10ffff_tmp44, byte_88, sequence_f0_91_88, r10000_10ffff_tmp45;
		BitBlock byte_range_ac_ae, sequence_f0_91_88_adv, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, byte_8b, sequence_f0_91_8b;
		BitBlock r10000_10ffff_tmp52, byte_range_a0_a2, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp53, byte_8c, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, sequence_f0_91_8d;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp60, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock byte_range_8b_8d, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock byte_range_a2_a3, r10000_10ffff_tmp65, byte_92, sequence_f0_91_92;
		BitBlock sequence_f0_91_92_adv, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock byte_b9, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, byte_range_bb_be, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, byte_93, sequence_f0_91_93;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp73, byte_96;
		BitBlock sequence_f0_91_96, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, byte_range_af_b1;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp78, byte_range_b8_bb;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock byte_98, sequence_f0_91_98, sequence_f0_91_98_adv;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock byte_9a, sequence_f0_91_9a, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock sequence_f0_96, r10000_10ffff_tmp91, sequence_f0_96_bd;
		BitBlock sequence_f0_96_adv, r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock r10000_10ffff_tmp94, r10000_10ffff_tmp95, byte_range_91_be;
		BitBlock sequence_f0_96_bd_adv, r10000_10ffff_tmp96, byte_9d, sequence_f0_9d;
		BitBlock byte_85, r10000_10ffff_tmp97, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_a5_a6;
		BitBlock sequence_f0_9d_85_adv, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock r10000_10ffff_tmp102, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105;




        struct_gc_Mc.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 74))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 54))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 42))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 40))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 23))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp2));
                  sequence_e0_a4 = simd_and(r800_fff_tmp2, byte_a4);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp4 = simd_andc(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp6 = simd_andc(r800_fff_tmp5, r800_ffff_tmp1);
                  byte_83 = simd_and(r800_fff_tmp4, r800_fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(2), sequence_e0_a4_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a4_adv, byte_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp5, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_and(r800_fff_tmp10, r800_fff_tmp5);
                  byte_bb = simd_and(r800_fff_tmp9, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(sequence_e0_a4_adv, byte_bb);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp14 = simd_and(r800_fff_tmp13, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp9, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(sequence_e0_a4_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp17 = simd_and(r800_ffff_tmp2, r800_fff_tmp16);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  byte_80 = simd_andc(r800_fff_tmp4, r800_1fff_tmp1);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(3), sequence_e0_a5_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_a5_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp4, basis_bits.bit_4);
                  r800_fff_tmp20 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_89_8c = simd_and(r800_fff_tmp19, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(sequence_e0_a5_adv, byte_range_89_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp21);
                  byte_range_8e_8f = simd_and(r800_fff_tmp4, r800_fff_tmp14);
                  r800_fff_tmp22 = simd_and(sequence_e0_a5_adv, byte_range_8e_8f);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp24 = simd_and(r800_ffff_tmp2, r800_fff_tmp23);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp24);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp25 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_82_83 = simd_and(r800_fff_tmp4, r800_fff_tmp25);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(4), sequence_e0_a6_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_a6_adv, byte_range_82_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_and(sequence_e0_a6_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp27);
                  r800_fff_tmp28 = simd_and(r800_ffff_tmp2, r800_fff_tmp5);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp28);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(5), sequence_e0_a7_adv));
                  r800_fff_tmp29 = simd_and(sequence_e0_a7_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp31 = simd_not(r800_fff_tmp30);
                  r800_fff_tmp32 = simd_and(basis_bits.bit_5, r800_fff_tmp5);
                  r800_fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp31), simd_andc(r800_fff_tmp32, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp4, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(sequence_e0_a7_adv, byte_range_87_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp36 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp35), simd_andc(r800_fff_tmp5, basis_bits.bit_5));
                  byte_range_8b_8c = simd_and(r800_fff_tmp19, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_a7_adv, byte_range_8b_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp39 = simd_and(r800_ffff_tmp5, r800_fff_tmp38);
                  byte_97 = simd_and(r800_fff_tmp39, r800_fff_tmp28);
                  r800_fff_tmp40 = simd_and(sequence_e0_a7_adv, byte_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp10, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp41);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(6), sequence_e0_a8_adv));
                  r800_fff_tmp42 = simd_and(sequence_e0_a8_adv, byte_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_a8_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_fff_tmp10, r800_fff_tmp16);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(7), sequence_e0_a9_adv));
                  r800_fff_tmp45 = simd_and(sequence_e0_a9_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(r800_fff_tmp10, r800_fff_tmp23);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp46);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(8), sequence_e0_aa_adv));
                  r800_fff_tmp47 = simd_and(sequence_e0_aa_adv, byte_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_aa_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp48);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp11);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(9), sequence_e0_ab_adv));
                  r800_fff_tmp49 = simd_and(sequence_e0_ab_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp49);
                  byte_89 = simd_and(r800_fff_tmp4, r800_fff_tmp44);
                  r800_fff_tmp50 = simd_and(sequence_e0_ab_adv, byte_89);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_and(sequence_e0_ab_adv, byte_range_8b_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_andc(r800_fff_tmp13, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp52);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(10), sequence_e0_ac_adv));
                  r800_fff_tmp53 = simd_and(sequence_e0_ac_adv, byte_range_82_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_fff_tmp13, r800_fff_tmp23);
                  byte_be = simd_and(r800_fff_tmp9, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_and(sequence_e0_ac_adv, byte_be);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp13, r800_fff_tmp16);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp56);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(11), sequence_e0_ad_adv));
                  r800_fff_tmp57 = simd_and(sequence_e0_ad_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(sequence_e0_ad_adv, byte_range_87_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(sequence_e0_ad_adv, byte_range_8b_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_and(sequence_e0_ad_adv, byte_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp60);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp54);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(12), sequence_e0_ae_adv));
                  r800_fff_tmp61 = simd_and(sequence_e0_ae_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_and(r800_fff_tmp13, r800_fff_tmp5);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp62);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp63 = simd_andc(r800_fff_tmp4, r800_ffff_tmp1);
                  r800_fff_tmp64 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_81_82 = simd_and(r800_fff_tmp63, r800_fff_tmp64);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(13), sequence_e0_af_adv));
                  r800_fff_tmp65 = simd_and(sequence_e0_af_adv, byte_range_81_82);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp67 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp31), simd_andc(r800_fff_tmp66, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp4, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(sequence_e0_af_adv, byte_range_86_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp68);
                  r800_fff_tmp69 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp35), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_8a_8c = simd_and(r800_fff_tmp19, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(sequence_e0_af_adv, byte_range_8a_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp70);
                  r800_fff_tmp71 = simd_and(sequence_e0_af_adv, byte_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp71);
                  byte_b0 = simd_andc(r800_fff_tmp9, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  byte_range_81_83 = simd_and(r800_fff_tmp63, r800_ffff_tmp3);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(14), sequence_e0_b0_adv));
                  r800_fff_tmp72 = simd_and(sequence_e0_b0_adv, byte_range_81_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_andc(r800_fff_tmp16, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp9, r800_fff_tmp73);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp74 = simd_andc(r800_fff_tmp4, basis_bits.bit_4);
                  byte_range_81_84 = simd_and(r800_fff_tmp74, r800_fff_tmp20);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(15), sequence_e0_b1_adv));
                  r800_fff_tmp75 = simd_and(sequence_e0_b1_adv, byte_range_81_84);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp75);
                  r800_fff_tmp76 = simd_andc(r800_fff_tmp23, r800_ffff_tmp1);
                  byte_b2 = simd_and(r800_fff_tmp9, r800_fff_tmp76);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(16), sequence_e0_b2_adv));
                  r800_fff_tmp77 = simd_and(sequence_e0_b2_adv, byte_range_82_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp77);
                  r800_fff_tmp78 = simd_and(sequence_e0_b2_adv, byte_be);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp78);
                  byte_b3 = simd_and(r800_fff_tmp9, r800_fff_tmp6);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp79 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r800_fff_tmp74, r800_fff_tmp79);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(17), sequence_e0_b3_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_b3_adv, byte_range_80_84);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(sequence_e0_b3_adv, byte_range_87_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp10, basis_bits.bit_6);
                  byte_range_8a_8b = simd_and(r800_fff_tmp4, r800_fff_tmp82);
                  r800_fff_tmp83 = simd_and(sequence_e0_b3_adv, byte_range_8a_8b);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(r800_fff_tmp39, r800_ffff_tmp2);
                  byte_range_95_96 = simd_and(r800_fff_tmp84, r800_fff_tmp64);
                  r800_fff_tmp85 = simd_and(sequence_e0_b3_adv, byte_range_95_96);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp85);
                  byte_b4 = simd_and(r800_fff_tmp9, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(18), sequence_e0_b4_adv));
                  r800_fff_tmp86 = simd_and(sequence_e0_b4_adv, byte_range_82_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp86);
                  r800_fff_tmp87 = simd_and(sequence_e0_b4_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp87);
                  byte_b5 = simd_and(r800_fff_tmp9, r800_fff_tmp17);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(19), sequence_e0_b5_adv));
                  r800_fff_tmp88 = simd_and(sequence_e0_b5_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_b5_adv, byte_range_86_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp89);
                  r800_fff_tmp90 = simd_and(sequence_e0_b5_adv, byte_range_8a_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(sequence_e0_b5_adv, byte_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp91);
                  byte_b6 = simd_and(r800_fff_tmp9, r800_fff_tmp24);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(20), sequence_e0_b6_adv));
                  r800_fff_tmp92 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp92);
                  byte_b7 = simd_and(r800_fff_tmp9, r800_fff_tmp28);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp93 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp94 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp95 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp94), simd_andc(r800_fff_tmp62, basis_bits.bit_3));
                  byte_range_8f_91 = simd_and(r800_fff_tmp93, r800_fff_tmp95);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(21), sequence_e0_b7_adv));
                  r800_fff_tmp96 = simd_and(sequence_e0_b7_adv, byte_range_8f_91);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp96);
                  byte_range_98_9f = simd_and(r800_fff_tmp39, basis_bits.bit_4);
                  r800_fff_tmp97 = simd_and(sequence_e0_b7_adv, byte_range_98_9f);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp97);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp9, r800_fff_tmp25);
                  r800_fff_tmp98 = simd_and(sequence_e0_b7_adv, byte_range_b2_b3);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp98);
                  byte_bc = simd_and(r800_fff_tmp9, r800_fff_tmp52);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(22), sequence_e0_bc_adv));
                  r800_fff_tmp99 = simd_and(sequence_e0_bc_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp99);
                  byte_bd = simd_and(r800_fff_tmp9, r800_fff_tmp56);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_bf = simd_and(r800_fff_tmp9, r800_fff_tmp62);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(23), sequence_e0_bd_adv));
                  r800_fff_tmp100 = simd_and(sequence_e0_bd_adv, byte_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r800_fff_tmp100);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 23);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(24, 17))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(24), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp4, basis_bits.bit_4);
                  r1000_1fff_tmp6 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp6), simd_andc(r1000_1fff_tmp7, basis_bits.bit_5));
                  byte_range_ab_ac = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp8);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(25), sequence_e1_80_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_80_adv, byte_range_ab_ac);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  byte_b1 = simd_and(r1000_1fff_tmp11, r800_1fff_tmp3);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_80_adv, byte_b1);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp14 = simd_andc(r1000_1fff_tmp13, r800_ffff_tmp3);
                  byte_b8 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_80_adv, byte_b8);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp11, basis_bits.bit_4);
                  byte_range_bb_bc = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp8);
                  r1000_1fff_tmp17 = simd_and(sequence_e1_80_adv, byte_range_bb_bc);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp17);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(26), sequence_e1_81_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_81_adv, byte_range_96_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_andc(r1000_1fff_tmp4, basis_bits.bit_4);
                  r1000_1fff_tmp23 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp6), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_a2_a4 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_81_adv, byte_range_a2_a4);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp26 = simd_not(r1000_1fff_tmp25);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_5, r1000_1fff_tmp7);
                  r1000_1fff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp27, basis_bits.bit_4));
                  byte_range_a7_ad = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_81_adv, byte_range_a7_ad);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp31 = simd_andc(r1000_1fff_tmp30, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp31);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp32 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  byte_range_83_84 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp8);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(27), sequence_e1_82_adv));
                  r1000_1fff_tmp33 = simd_and(sequence_e1_82_adv, byte_range_83_84);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp35 = simd_not(r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp35), simd_andc(r1000_1fff_tmp27, basis_bits.bit_4));
                  byte_range_87_8c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp36);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_82_adv, byte_range_87_8c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp7);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_and(sequence_e1_82_adv, byte_8f);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp40);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp19, basis_bits.bit_4);
                  byte_range_9a_9c = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp23);
                  r1000_1fff_tmp42 = simd_and(sequence_e1_82_adv, byte_range_9a_9c);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp42);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp30);
                  byte_9e = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp43);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp44 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp30);
                  byte_b6 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp44);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(28), sequence_e1_9e_adv));
                  r1000_1fff_tmp45 = simd_and(sequence_e1_9e_adv, byte_b6);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp45);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp38, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp46);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_9e_adv, byte_range_be_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp47);
                  byte_9f = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp39);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp32, r1000_1fff_tmp25);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(29), sequence_e1_9f_adv));
                  r1000_1fff_tmp48 = simd_and(sequence_e1_9f_adv, byte_range_80_85);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp50 = simd_not(r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp50), simd_andc(r1000_1fff_tmp27, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp51);
                  r1000_1fff_tmp52 = simd_and(sequence_e1_9f_adv, byte_range_87_88);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp52);
                  byte_a4 = simd_and(r1000_1fff_tmp4, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp53 = simd_xor(basis_bits.bit_5, r1000_1fff_tmp7);
                  byte_range_a3_a6 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp53);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(30), sequence_e1_a4_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_a4_adv, byte_range_a3_a6);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp54);
                  r1000_1fff_tmp55 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp13);
                  byte_range_a9_ab = simd_and(r1000_1fff_tmp55, r800_ffff_tmp3);
                  r1000_1fff_tmp56 = simd_and(sequence_e1_a4_adv, byte_range_a9_ab);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp56);
                  byte_range_b0_b1 = simd_andc(r1000_1fff_tmp11, r800_4dff_tmp1);
                  r1000_1fff_tmp57 = simd_and(sequence_e1_a4_adv, byte_range_b0_b1);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp57);
                  r1000_1fff_tmp58 = simd_or(basis_bits.bit_5, r1000_1fff_tmp7);
                  r1000_1fff_tmp59 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp50), simd_andc(r1000_1fff_tmp58, basis_bits.bit_4));
                  byte_range_b3_b8 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp59);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_a4_adv, byte_range_b3_b8);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp60);
                  byte_a6 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp44);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  byte_range_b0_bf = r1000_1fff_tmp11;
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(31), sequence_e1_a6_adv));
                  r1000_1fff_tmp61 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp7);
                  byte_a7 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp62);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(32), sequence_e1_a7_adv));
                  r1000_1fff_tmp63 = simd_and(sequence_e1_a7_adv, byte_80);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_andc(r1000_1fff_tmp13, basis_bits.bit_6);
                  byte_range_88_89 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(sequence_e1_a7_adv, byte_range_88_89);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp65);
                  byte_a8 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp14);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp13);
                  r1000_1fff_tmp67 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r1000_1fff_tmp66, r1000_1fff_tmp67);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(33), sequence_e1_a8_adv));
                  r1000_1fff_tmp68 = simd_and(sequence_e1_a8_adv, byte_range_99_9a);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_and(r1000_1fff_tmp13, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp69);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp70 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_95 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp70);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(34), sequence_e1_a9_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_a9_adv, byte_95);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp71);
                  byte_97 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp62);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_a9_adv, byte_97);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp72);
                  byte_a1 = simd_and(r1000_1fff_tmp4, r800_1fff_tmp3);
                  r1000_1fff_tmp73 = simd_and(sequence_e1_a9_adv, byte_a1);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp73);
                  byte_range_a3_a4 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp8);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_a9_adv, byte_range_a3_a4);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp76 = simd_or(r800_ffff_tmp1, r1000_1fff_tmp7);
                  r1000_1fff_tmp77 = simd_not(r1000_1fff_tmp76);
                  r1000_1fff_tmp78 = simd_and(r1000_1fff_tmp38, r800_ffff_tmp3);
                  r1000_1fff_tmp79 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp77), simd_andc(r1000_1fff_tmp78, basis_bits.bit_3));
                  byte_range_ad_b2 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_and(sequence_e1_a9_adv, byte_range_ad_b2);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_andc(r1000_1fff_tmp38, r800_ffff_tmp3);
                  byte_ac = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp81);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  byte_84 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(35), sequence_e1_ac_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_ac_adv, byte_84);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp82);
                  byte_b5 = simd_and(byte_range_b0_bf, r1000_1fff_tmp70);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_ac_adv, byte_b5);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp83);
                  r1000_1fff_tmp84 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp7);
                  byte_bb = simd_and(byte_range_b0_bf, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(sequence_e1_ac_adv, byte_bb);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp85);
                  r1000_1fff_tmp86 = simd_and(byte_range_b0_bf, r1000_1fff_tmp38);
                  byte_range_bd_bf = simd_and(r1000_1fff_tmp86, r800_ffff_tmp3);
                  r1000_1fff_tmp87 = simd_and(sequence_e1_ac_adv, byte_range_bd_bf);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_and(r1000_1fff_tmp38, r800_1fff_tmp2);
                  byte_ad = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp88);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(36), sequence_e1_ad_adv));
                  r1000_1fff_tmp89 = simd_and(sequence_e1_ad_adv, byte_range_80_81);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_ad_adv, byte_range_83_84);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp90);
                  byte_ae = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp43);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(37), sequence_e1_ae_adv));
                  r1000_1fff_tmp91 = simd_and(sequence_e1_ae_adv, byte_82);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_and(sequence_e1_ae_adv, byte_a1);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp92);
                  byte_range_a6_a7 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp20);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_ae_adv, byte_range_a6_a7);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp30);
                  byte_aa = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_and(sequence_e1_ae_adv, byte_aa);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp95);
                  byte_af = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp39);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(38), sequence_e1_af_adv));
                  r1000_1fff_tmp96 = simd_and(sequence_e1_af_adv, byte_a7);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp96);
                  byte_range_aa_ac = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp23);
                  r1000_1fff_tmp97 = simd_and(sequence_e1_af_adv, byte_range_aa_ac);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_and(sequence_e1_af_adv, byte_ae);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp98);
                  r1000_1fff_tmp99 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_af_adv, byte_range_b2_b3);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp100);
                  byte_b0 = simd_andc(byte_range_b0_bf, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp101 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_a4_ab = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp101);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(39), sequence_e1_b0_adv));
                  r1000_1fff_tmp102 = simd_and(sequence_e1_b0_adv, byte_range_a4_ab);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(byte_range_b0_bf, r1000_1fff_tmp103);
                  r1000_1fff_tmp104 = simd_and(sequence_e1_b0_adv, byte_range_b4_b5);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_andc(r1000_1fff_tmp7, r800_ffff_tmp1);
                  byte_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp105);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(40), sequence_e1_b3_adv));
                  r1000_1fff_tmp106 = simd_and(sequence_e1_b3_adv, byte_a1);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp106);
                  r1000_1fff_tmp107 = simd_and(sequence_e1_b3_adv, byte_range_b2_b3);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r1000_1fff_tmp107);
                }
                else {
                  carryQ.CarryDequeueEnqueue(24, 17);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 40);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(41, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(41, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(41), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp7 = simd_and(r3000_4dff_tmp6, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(42), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_ae_af);
                  struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r3000_4dff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(41, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(41, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 42);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(43, 11))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(43), ra000_ffff_tmp6));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp6, byte_a0);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_4);
              ra000_ffff_tmp8 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp8), simd_andc(ra000_ffff_tmp9, basis_bits.bit_5));
              byte_range_a3_a4 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp10);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(44), sequence_ea_a0_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a0_adv, byte_range_a3_a4);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp9);
              byte_a7 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(sequence_ea_a0_adv, byte_a7);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_a2 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp16 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp17);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(45), sequence_ea_a2_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_a2_adv, byte_range_80_81);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp19);
              byte_range_b4_bf = simd_and(ra000_ffff_tmp20, r800_ffff_tmp1);
              ra000_ffff_tmp21 = simd_and(sequence_ea_a2_adv, byte_range_b4_bf);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp9, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp22);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_80_83 = simd_andc(ra000_ffff_tmp16, r800_ffff_tmp1);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(46), sequence_ea_a3_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_a3_adv, byte_range_80_83);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp25 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp24);
              byte_a5 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp25);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp26 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp27 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp26);
              ra000_ffff_tmp28 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_92_93 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp28);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(47), sequence_ea_a5_adv));
              ra000_ffff_tmp29 = simd_and(sequence_ea_a5_adv, byte_range_92_93);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp30);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              byte_83 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp22);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(48), sequence_ea_a6_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_a6_adv, byte_83);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
              byte_range_b4_b5 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(sequence_ea_a6_adv, byte_range_b4_b5);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_ba_bb = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(sequence_ea_a6_adv, byte_range_ba_bb);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp37 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp36);
              byte_range_bd_bf = simd_and(ra000_ffff_tmp37, r800_ffff_tmp3);
              ra000_ffff_tmp38 = simd_and(sequence_ea_a6_adv, byte_range_bd_bf);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp38);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_80 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp5);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(49), sequence_ea_a7_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_a7_adv, byte_80);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp40);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp41 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp42 = simd_not(ra000_ffff_tmp5);
              ra000_ffff_tmp43 = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp9);
              ra000_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp42), simd_andc(ra000_ffff_tmp43, basis_bits.bit_3));
              byte_range_af_b0 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp44);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(50), sequence_ea_a8_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_a8_adv, byte_range_af_b0);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_andc(ra000_ffff_tmp20, basis_bits.bit_4);
              byte_range_b3_b4 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp10);
              ra000_ffff_tmp47 = simd_and(sequence_ea_a8_adv, byte_range_b3_b4);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp24);
              byte_a9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp48);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp24);
              byte_8d = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp49);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(51), sequence_ea_a9_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ea_a9_adv, byte_8d);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_bb = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_and(sequence_ea_a9_adv, byte_bb);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp52);
              byte_bd = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp49);
              ra000_ffff_tmp53 = simd_and(sequence_ea_a9_adv, byte_bd);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp53);
              byte_ab = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp51);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(52), sequence_ea_ab_adv));
              ra000_ffff_tmp54 = simd_and(sequence_ea_ab_adv, byte_ab);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp54);
              ra000_ffff_tmp55 = simd_and(ra000_ffff_tmp36, basis_bits.bit_6);
              byte_range_ae_af = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_and(sequence_ea_ab_adv, byte_range_ae_af);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp56);
              byte_b5 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp25);
              ra000_ffff_tmp57 = simd_and(sequence_ea_ab_adv, byte_b5);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp57);
              byte_af = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp43);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(53), sequence_ea_af_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_af_adv, byte_range_a3_a4);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
              byte_range_a6_a7 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(sequence_ea_af_adv, byte_range_a6_a7);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp1);
              ra000_ffff_tmp62 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_a9_aa = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp62);
              ra000_ffff_tmp63 = simd_and(sequence_ea_af_adv, byte_range_a9_aa);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp63);
              ra000_ffff_tmp64 = simd_andc(ra000_ffff_tmp36, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp64);
              ra000_ffff_tmp65 = simd_and(sequence_ea_af_adv, byte_ac);
              struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, ra000_ffff_tmp65);
            }
            else {
              carryQ.CarryDequeueEnqueue(43, 11);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 54);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(54, 20))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(54), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            byte_80 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(55), r10000_10ffff_tmp12));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp12, byte_80);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(56), sequence_f0_91_80_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_80_adv, byte_80);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_80_adv, byte_82);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp16);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(57), sequence_f0_91_82_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_91_82_adv, byte_82);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp18, r10000_10ffff_tmp1);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_b0_b2 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_82_adv, byte_range_b0_b2);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp23 = simd_not(r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp20);
            r10000_10ffff_tmp25 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp23), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_91_82_adv, byte_range_b7_b8);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp27, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp28);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp30, r10000_10ffff_tmp2);
            byte_ac = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp31);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(58), sequence_f0_91_84_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_91_84_adv, byte_ac);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp14);
            byte_86 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp33);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(59), sequence_f0_91_86_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_91_86_adv, byte_82);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp18, basis_bits.bit_4);
            r10000_10ffff_tmp36 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp37 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp36), simd_andc(r10000_10ffff_tmp20, basis_bits.bit_5));
            byte_range_b3_b5 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_91_86_adv, byte_range_b3_b5);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp20);
            byte_bf = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(sequence_f0_91_86_adv, byte_bf);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp20);
            byte_87 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp41);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(60), sequence_f0_91_87_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_91_87_adv, byte_80);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp44 = simd_andc(r10000_10ffff_tmp43, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp44);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp30);
            byte_range_ac_ae = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp20);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(61), sequence_f0_91_88_adv));
            r10000_10ffff_tmp46 = simd_and(sequence_f0_91_88_adv, byte_range_ac_ae);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_b2_b3 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_88_adv, byte_range_b2_b3);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp7);
            byte_b5 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_and(sequence_f0_91_88_adv, byte_b5);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp20);
            byte_8b = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp51);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp1);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp52, r10000_10ffff_tmp20);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(62), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_8b_adv, byte_range_a0_a2);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp53);
            byte_8c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp31);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp47);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(63), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_91_8c_adv, byte_range_82_83);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp30, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_and(sequence_f0_91_8c_adv, byte_range_be_bf);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp7);
            byte_8d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp57);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_4);
            r10000_10ffff_tmp59 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_81_84 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp59);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(64), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_91_8d_adv, byte_range_81_84);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp60);
            byte_range_87_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp25);
            r10000_10ffff_tmp61 = simd_and(sequence_f0_91_8d_adv, byte_range_87_88);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_4);
            byte_range_8b_8d = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp37);
            r10000_10ffff_tmp63 = simd_and(sequence_f0_91_8d_adv, byte_range_8b_8d);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp63);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp41);
            r10000_10ffff_tmp64 = simd_and(sequence_f0_91_8d_adv, byte_97);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp64);
            byte_range_a2_a3 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp47);
            r10000_10ffff_tmp65 = simd_and(sequence_f0_91_8d_adv, byte_range_a2_a3);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp65);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp15);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(65), sequence_f0_91_92_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_91_92_adv, byte_range_b0_b2);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp7);
            byte_b9 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_and(sequence_f0_91_92_adv, byte_b9);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp18, basis_bits.bit_4);
            r10000_10ffff_tmp70 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp20);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp70);
            r10000_10ffff_tmp71 = simd_and(sequence_f0_91_92_adv, byte_range_bb_be);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp72);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            byte_81 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp8);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(66), sequence_f0_91_93_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_91_93_adv, byte_81);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp73);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp33);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp75 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp76 = simd_not(r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp76), simd_andc(r10000_10ffff_tmp39, basis_bits.bit_3));
            byte_range_af_b1 = simd_and(r10000_10ffff_tmp74, r10000_10ffff_tmp77);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(67), sequence_f0_91_96_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_91_96_adv, byte_range_af_b1);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp78);
            byte_range_b8_bb = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp43);
            r10000_10ffff_tmp79 = simd_and(sequence_f0_91_96_adv, byte_range_b8_bb);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp14);
            byte_be = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(sequence_f0_91_96_adv, byte_be);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp81);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp44);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(68), sequence_f0_91_98_adv));
            r10000_10ffff_tmp82 = simd_and(sequence_f0_91_98_adv, byte_range_b0_b2);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp82);
            r10000_10ffff_tmp83 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp84 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp83), simd_andc(r10000_10ffff_tmp20, basis_bits.bit_5));
            byte_range_bb_bc = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(sequence_f0_91_98_adv, byte_range_bb_bc);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_and(sequence_f0_91_98_adv, byte_be);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp14);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp87);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(69), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_91_9a_adv, byte_ac);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp88);
            byte_range_ae_af = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp55);
            r10000_10ffff_tmp89 = simd_and(sequence_f0_91_9a_adv, byte_range_ae_af);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp89);
            byte_b6 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp33);
            r10000_10ffff_tmp90 = simd_and(sequence_f0_91_9a_adv, byte_b6);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp90);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_bd = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp57);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(70), r10000_10ffff_tmp91));
            sequence_f0_96_bd = simd_and(r10000_10ffff_tmp91, byte_bd);
            sequence_f0_96_adv = r10000_10ffff_tmp91;
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp39);
            r10000_10ffff_tmp93 = simd_not(r10000_10ffff_tmp92);
            r10000_10ffff_tmp94 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp93), simd_andc(r10000_10ffff_tmp94, basis_bits.bit_2));
            byte_range_91_be = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp95);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(71), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_96_bd_adv, byte_range_91_be);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp96);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp57);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp49);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(72), r10000_10ffff_tmp97));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp97, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp97;
            r10000_10ffff_tmp98 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp27);
            r10000_10ffff_tmp99 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp98, r10000_10ffff_tmp99);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(73), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_85_adv, byte_range_a5_a6);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp100);
            r10000_10ffff_tmp101 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp20);
            r10000_10ffff_tmp102 = simd_not(r10000_10ffff_tmp101);
            r10000_10ffff_tmp103 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp2);
            r10000_10ffff_tmp104 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp102), simd_andc(r10000_10ffff_tmp103, basis_bits.bit_3));
            byte_range_ad_b2 = simd_and(r10000_10ffff_tmp74, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_9d_85_adv, byte_range_ad_b2);
            struct_gc_Mc.cc = simd_or(struct_gc_Mc.cc, r10000_10ffff_tmp105);
          }
          else {
            carryQ.CarryDequeueEnqueue(54, 20);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 74);
        }
        carryQ.CarryQ_Adjust(74);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<74, 0> carryQ;
  };

  struct Property_gc_Me {
  Property_gc_Me() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Me & struct_gc_Me) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock r400_4ff_tmp2, byte_d2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5;
		BitBlock r400_4ff_tmp6, r400_4ff_tmp7, byte_range_88_89, byte_d2_adv;
		BitBlock r400_4ff_tmp8, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_aa, r1000_1fff_tmp5, sequence_e1_aa;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, byte_be, sequence_e1_aa_adv, r1000_1fff_tmp10;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_83, r2000_2fff_tmp5;
		BitBlock sequence_e2_83, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_range_9d_a0, sequence_e2_83_adv;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, byte_range_a2_a4;
		BitBlock r2000_2fff_tmp18, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_range_b0_b2, sequence_ea_99_adv, ra000_ffff_tmp13;




        struct_gc_Me.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 8))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 1))) {
              r400_5ff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp2, r400_5ff_tmp1);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(0, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r400_5ff_tmp1);
                byte_d2 = simd_and(r80_7ff_tmp2, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp5 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp4);
                r400_4ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp7 = simd_andc(r400_4ff_tmp6, basis_bits.bit_6);
                byte_range_88_89 = simd_and(r400_4ff_tmp5, r400_4ff_tmp7);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(0), byte_d2_adv));
                r400_4ff_tmp8 = simd_and(byte_d2_adv, byte_range_88_89);
                struct_gc_Me.cc = simd_or(struct_gc_Me.cc, r400_4ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 7))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(2, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_aa = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), r1000_1fff_tmp5));
                  sequence_e1_aa = simd_and(r1000_1fff_tmp5, byte_aa);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp3);
                  byte_be = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(3), sequence_e1_aa_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_aa_adv, byte_be);
                  struct_gc_Me.cc = simd_or(struct_gc_Me.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(4, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(4, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r2000_2fff_tmp5));
                  sequence_e2_83 = simd_and(r2000_2fff_tmp5, byte_83);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_not(r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, r800_ffff_tmp3);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_3, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp8), simd_andc(r2000_2fff_tmp11, basis_bits.bit_2));
                  byte_range_9d_a0 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp12);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(5), sequence_e2_83_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_83_adv, byte_range_9d_a0);
                  struct_gc_Me.cc = simd_or(struct_gc_Me.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp15 = simd_andc(r2000_2fff_tmp14, basis_bits.bit_4);
                  r2000_2fff_tmp16 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp17 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp16), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_a2_a4 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(sequence_e2_83_adv, byte_range_a2_a4);
                  struct_gc_Me.cc = simd_or(struct_gc_Me.cc, r2000_2fff_tmp18);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 4);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(6, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(6), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp10 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b0_b2 = simd_andc(ra000_ffff_tmp11, ra000_ffff_tmp12);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(7), sequence_ea_99_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_range_b0_b2);
              struct_gc_Me.cc = simd_or(struct_gc_Me.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 7);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 8);
        }
        carryQ.CarryQ_Adjust(8);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<8, 0> carryQ;
  };

  struct Property_gc_Sk {
  Property_gc_Sk() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Sk & struct_gc_Sk) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_5e_60_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, byte_a8, byte_c2_adv;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_af, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, byte_b4;
		BitBlock r80_7ff_tmp16, byte_b8, r80_7ff_tmp17, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, byte_ca;
		BitBlock byte_range_b0_bf, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_cb, r100_2ff_tmp5, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock byte_range_82_85, byte_cb_adv, r2b0_2ff_tmp4, r2b0_2ff_tmp5;
		BitBlock r2b0_2ff_tmp6, r2b0_2ff_tmp7, byte_range_92_9f, r2b0_2ff_tmp8;
		BitBlock r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11, byte_range_a5_ab;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, byte_ad;
		BitBlock r2b0_2ff_tmp15, r2b0_2ff_tmp16, r2b0_2ff_tmp17, byte_range_af_bf;
		BitBlock r2b0_2ff_tmp18, r100_3ff_tmp2, r100_3ff_tmp3, byte_cd, r100_3ff_tmp4;
		BitBlock r100_3ff_tmp5, r100_3ff_tmp6, byte_range_ce_cf, r100_3ff_tmp7;
		BitBlock r370_3ff_tmp1, byte_b5, byte_cd_adv, r370_3ff_tmp2, byte_ce;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, byte_range_84_85, byte_ce_adv;
		BitBlock r370_3ff_tmp5, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_be;
		BitBlock r1000_1fff_tmp3, sequence_e1_be, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock byte_bd, sequence_e1_be_adv, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, byte_bf, r1000_1fff_tmp8, sequence_e1_bf;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_range_80_81;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock byte_range_8d_8f, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, byte_range_9d_9f, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, byte_range_ad_af;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock byte_range_bd_be, r1000_1fff_tmp22, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e3;
		BitBlock r2000_4dff_tmp3, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock byte_82, r3000_4dff_tmp4, sequence_e3_82, byte_e3_adv;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8;
		BitBlock byte_range_9b_9c, sequence_e3_82_adv, r3000_4dff_tmp9, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock byte_ea, ra000_ffff_tmp3, ra000_ffff_tmp4, byte_9c, ra000_ffff_tmp5;
		BitBlock sequence_ea_9c, byte_ea_adv, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, byte_range_80_96;
		BitBlock sequence_ea_9c_adv, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, byte_range_a0_a1, ra000_ffff_tmp14, byte_9e;
		BitBlock sequence_ea_9e, ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, byte_range_89_8a, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21, sequence_ea_ad;
		BitBlock ra000_ffff_tmp22, byte_9b, sequence_ea_ad_adv, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, byte_ef, byte_ae, ra000_ffff_tmp25, sequence_ef_ae;
		BitBlock byte_ef_adv, ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock byte_range_b2_bf, sequence_ef_ae_adv, ra000_ffff_tmp29;
		BitBlock sequence_ef_af, sequence_ef_af_adv, ra000_ffff_tmp30, byte_bc;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, ra000_ffff_tmp31, sequence_ef_bd;
		BitBlock byte_80, sequence_ef_bd_adv, ra000_ffff_tmp32, sequence_ef_bf;
		BitBlock ra000_ffff_tmp33, byte_a3, sequence_ef_bf_adv, ra000_ffff_tmp34;




        struct_gc_Sk.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_or(tmp10, tmp11);
        tmp13 = simd_andc(tmp9, tmp12);
        cc_range_5e_60_1 = simd_or(tmp7, tmp13);
        struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, cc_range_5e_60_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 21))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp5, tmp10);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp8);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, tmp11);
            byte_a8 = simd_and(r80_7ff_tmp5, r80_7ff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp8 = simd_and(byte_c2_adv, byte_a8);
            struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r80_7ff_tmp8);
            r80_7ff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp10 = simd_and(tmp4, r80_7ff_tmp9);
            byte_af = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_af);
            struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp15 = simd_andc(r80_7ff_tmp14, tmp11);
            byte_b4 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
            r80_7ff_tmp16 = simd_and(byte_c2_adv, byte_b4);
            struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r80_7ff_tmp16);
            byte_b8 = simd_and(r80_7ff_tmp13, r80_7ff_tmp7);
            r80_7ff_tmp17 = simd_and(byte_c2_adv, byte_b8);
            struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r80_7ff_tmp17);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp10);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 4))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 2))) {
                r100_2ff_tmp1 = simd_and(r80_7ff_tmp6, tmp5);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp1);
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp2));
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp2, byte_range_b0_bf);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp6, r80_7ff_tmp9);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_or(r100_2ff_tmp3, byte_cb);
                if ((bitblock::any(r100_2ff_tmp5) || carryQ.CarryTest(2, 1))) {
                  r2b0_2ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                  r2b0_2ff_tmp2 = simd_andc(r2b0_2ff_tmp1, basis_bits.bit_4);
                  r2b0_2ff_tmp3 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_82_85 = simd_and(r2b0_2ff_tmp2, r2b0_2ff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(2), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_82_85);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r2b0_2ff_tmp4);
                  r2b0_2ff_tmp5 = simd_and(r80_7ff_tmp4, tmp2);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp7 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp6);
                  byte_range_92_9f = simd_and(r2b0_2ff_tmp5, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp8 = simd_and(byte_cb_adv, byte_range_92_9f);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp9 = simd_not(basis_bits.bit_5);
                  r2b0_2ff_tmp10 = simd_and(basis_bits.bit_5, tmp11);
                  r2b0_2ff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r2b0_2ff_tmp9), simd_andc(r2b0_2ff_tmp10, basis_bits.bit_4));
                  byte_range_a5_ab = simd_and(r80_7ff_tmp5, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp12 = simd_and(byte_cb_adv, byte_range_a5_ab);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2b0_2ff_tmp14 = simd_and(tmp4, r2b0_2ff_tmp13);
                  byte_ad = simd_and(r80_7ff_tmp5, r2b0_2ff_tmp14);
                  r2b0_2ff_tmp15 = simd_and(byte_cb_adv, byte_ad);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp16 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                  r2b0_2ff_tmp17 = simd_or(basis_bits.bit_3, r80_7ff_tmp10);
                  byte_range_af_bf = simd_and(r2b0_2ff_tmp16, r2b0_2ff_tmp17);
                  r2b0_2ff_tmp18 = simd_and(byte_cb_adv, byte_range_af_bf);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r2b0_2ff_tmp18);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(tmp4, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp13;
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(3), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(tmp4, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(4, 1))) {
                r370_3ff_tmp1 = simd_and(r80_7ff_tmp14, r100_3ff_tmp2);
                byte_b5 = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_b5);
                struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r370_3ff_tmp2);
                byte_ce = simd_and(r80_7ff_tmp2, tmp6);
                r370_3ff_tmp3 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp4 = simd_andc(r80_7ff_tmp14, basis_bits.bit_6);
                byte_range_84_85 = simd_and(r370_3ff_tmp3, r370_3ff_tmp4);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(4), byte_ce_adv));
                r370_3ff_tmp5 = simd_and(byte_ce_adv, byte_range_84_85);
                struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r370_3ff_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp8);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 16))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp10);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp11);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(6, 5))) {
              r800_4dff_tmp1 = simd_or(tmp10, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(6, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp10);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(6, 3))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_be = simd_and(r1000_1fff_tmp2, tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r1000_1fff_tmp3));
                  sequence_e1_be = simd_and(r1000_1fff_tmp3, byte_be);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(tmp4, r800_1fff_tmp1);
                  byte_bd = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(7), sequence_e1_be_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_be_adv, byte_bd);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(tmp4, r1000_1fff_tmp6);
                  byte_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(sequence_e1_be_adv, byte_bf);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp8);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp10 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp9);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp10, r800_4dff_tmp1);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(8), sequence_e1_bf_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_bf_adv, byte_range_80_81);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp10, tmp4);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp12, tmp11);
                  r1000_1fff_tmp13 = simd_and(sequence_e1_bf_adv, byte_range_8d_8f);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp3, tmp2);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, tmp4);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp15, tmp11);
                  r1000_1fff_tmp16 = simd_and(sequence_e1_bf_adv, byte_range_9d_9f);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp3, tmp8);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp17, tmp4);
                  byte_range_ad_af = simd_and(r1000_1fff_tmp18, tmp11);
                  r1000_1fff_tmp19 = simd_and(sequence_e1_bf_adv, byte_range_ad_af);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp2, tmp4);
                  r1000_1fff_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_bf_adv, byte_range_bd_be);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r1000_1fff_tmp22);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp10);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(9, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp10);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(9, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(tmp5, tmp10);
                  byte_82 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), r3000_4dff_tmp4));
                  sequence_e3_82 = simd_and(r3000_4dff_tmp4, byte_82);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp3, tmp2);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_not(tmp11);
                  r3000_4dff_tmp8 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp7), simd_andc(r2000_4dff_tmp1, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp8);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(10), sequence_e3_82_adv));
                  r3000_4dff_tmp9 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
                  struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, r3000_4dff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(11, 10))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp5);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp3, tmp2);
              ra000_ffff_tmp4 = simd_andc(tmp4, tmp11);
              byte_9c = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp4);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(11), ra000_ffff_tmp5));
              sequence_ea_9c = simd_and(ra000_ffff_tmp5, byte_9c);
              byte_ea_adv = ra000_ffff_tmp5;
              ra000_ffff_tmp6 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_5, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_4, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              byte_range_80_96 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp10);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(12), sequence_ea_9c_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_9c_adv, byte_range_80_96);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(r800_ffff_tmp3, tmp8);
              ra000_ffff_tmp13 = simd_or(tmp10, basis_bits.bit_6);
              byte_range_a0_a1 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(sequence_ea_9c_adv, byte_range_a0_a1);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp14);
              byte_9e = simd_and(ra000_ffff_tmp3, tmp6);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp16 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp1);
              ra000_ffff_tmp18 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_89_8a = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp18);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(13), sequence_ea_9e_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_9e_adv, byte_range_89_8a);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp21 = simd_and(tmp4, ra000_ffff_tmp20);
              byte_ad = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp21);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp7);
              byte_9b = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp22);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(14), sequence_ea_ad_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_ad_adv, byte_9b);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(tmp4, ra000_ffff_tmp7);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp24);
              byte_ae = simd_and(ra000_ffff_tmp12, tmp6);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(15), ra000_ffff_tmp25));
              sequence_ef_ae = simd_and(ra000_ffff_tmp25, byte_ae);
              byte_ef_adv = ra000_ffff_tmp25;
              ra000_ffff_tmp26 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp27 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp26);
              ra000_ffff_tmp28 = simd_or(basis_bits.bit_4, r800_ffff_tmp10);
              byte_range_b2_bf = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp28);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(16), sequence_ef_ae_adv));
              ra000_ffff_tmp29 = simd_and(sequence_ef_ae_adv, byte_range_b2_bf);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp29);
              byte_af = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp24);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp13);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(17), sequence_ef_af_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ef_af_adv, byte_range_80_81);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp30);
              byte_bc = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp4);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_be = simd_and(ra000_ffff_tmp27, tmp6);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(18), sequence_ef_bc_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ef_bc_adv, byte_be);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp31);
              byte_bd = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp21);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_80 = simd_andc(ra000_ffff_tmp16, tmp12);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(19), sequence_ef_bd_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ef_bd_adv, byte_80);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp32);
              byte_bf = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp24);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp33 = simd_andc(ra000_ffff_tmp7, tmp10);
              byte_a3 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp33);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(20), sequence_ef_bf_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ef_bf_adv, byte_a3);
              struct_gc_Sk.cc = simd_or(struct_gc_Sk.cc, ra000_ffff_tmp34);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 10);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 16);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 21);
        }
        carryQ.CarryQ_Adjust(21);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<21, 0> carryQ;
  };

  struct Property_gc_Sm {
  Property_gc_Sm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Sm & struct_gc_Sm) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, cc_range_2b_7e_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, byte_ac, byte_c2_adv, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_b1, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, byte_c3, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, byte_97, byte_c3_adv, r80_7ff_tmp17, byte_b7;
		BitBlock r80_7ff_tmp18, byte_range_c4_cf, r100_3ff_tmp1, byte_cd;
		BitBlock byte_range_b0_bf, r100_3ff_tmp2, r100_3ff_tmp3, r100_3ff_tmp4;
		BitBlock byte_range_ce_cf, r100_3ff_tmp5, r370_3ff_tmp1, byte_cf;
		BitBlock r370_3ff_tmp2, byte_b6, byte_cf_adv, r370_3ff_tmp3, r80_7ff_tmp19;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, byte_d8, r600_6ff_tmp2;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock byte_range_86_88, byte_d8_adv, r600_6ff_tmp7, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock byte_e4, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock byte_range_80_b7, r800_ffff_tmp7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, byte_84, sequence_e2_81_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, byte_92, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, byte_range_ba_bc, r2000_2fff_tmp14, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp15, byte_range_8a_8c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp16, sequence_e2_84;
		BitBlock r2000_2fff_tmp17, byte_98, sequence_e2_84_adv, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, byte_85, sequence_e2_85, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, byte_range_80_84, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp22, byte_8b, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock byte_86, sequence_e2_86, r2000_2fff_tmp25, byte_range_90_94;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock byte_range_9a_9b, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, byte_a0, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock byte_a3, r2000_2fff_tmp33, byte_a6, r2000_2fff_tmp34, byte_ae;
		BitBlock r2000_2fff_tmp35, r2000_2fff_tmp36, byte_87, sequence_e2_87;
		BitBlock r2000_2fff_tmp37, byte_range_8e_8f, sequence_e2_87_adv;
		BitBlock r2000_2fff_tmp38, r2000_2fff_tmp39, byte_94, r2000_2fff_tmp40;
		BitBlock byte_range_b4_bf, r2000_2fff_tmp41, byte_range_88_8b;
		BitBlock byte_e2_byte_range_88_8b, byte_range_80_bf, r2000_2fff_tmp42;
		BitBlock byte_e2_byte_range_88_8b_sfx, r2000_2fff_tmp43, byte_8c;
		BitBlock sequence_e2_8c, r2000_2fff_tmp44, r2000_2fff_tmp45, byte_range_a0_a1;
		BitBlock sequence_e2_8c_adv, r2000_2fff_tmp46, r2000_2fff_tmp47, byte_8d;
		BitBlock sequence_e2_8d, r2000_2fff_tmp48, byte_bc, sequence_e2_8d_adv;
		BitBlock r2000_2fff_tmp49, byte_8e, sequence_e2_8e, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, r2000_2fff_tmp55, byte_range_9b_b3;
		BitBlock sequence_e2_8e_adv, r2000_2fff_tmp56, r2000_2fff_tmp57, byte_8f;
		BitBlock sequence_e2_8f, r2000_2fff_tmp58, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, byte_range_9c_a1, sequence_e2_8f_adv;
		BitBlock r2000_2fff_tmp62, r2000_2fff_tmp63, byte_96, sequence_e2_96;
		BitBlock sequence_e2_96_adv, r2000_2fff_tmp64, sequence_e2_97;
		BitBlock sequence_e2_97_adv, r2000_2fff_tmp65, byte_range_b8_bf;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, byte_99, sequence_e2_99, byte_af;
		BitBlock sequence_e2_99_adv, r2000_2fff_tmp68, byte_9f, sequence_e2_9f;
		BitBlock r2000_2fff_tmp69, sequence_e2_9f_adv, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, r2000_2fff_tmp72, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, byte_range_87_a5;
		BitBlock r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock byte_range_a4_a5, byte_e2_byte_range_a4_a5, r2000_2fff_tmp82;
		BitBlock byte_e2_byte_range_a4_a5_sfx, sequence_e2_a6, r2000_2fff_tmp83;
		BitBlock byte_range_80_82, sequence_e2_a6_adv, r2000_2fff_tmp84;
		BitBlock r2000_2fff_tmp85, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, byte_range_99_bf, r2000_2fff_tmp89, byte_a7;
		BitBlock sequence_e2_a7, r2000_2fff_tmp90, byte_range_80_97;
		BitBlock sequence_e2_a7_adv, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock byte_range_9c_bb, r2000_2fff_tmp93, byte_range_be_bf;
		BitBlock r2000_2fff_tmp94, byte_range_a8_ab, byte_e2_byte_range_a8_ab;
		BitBlock r2000_2fff_tmp95, byte_e2_byte_range_a8_ab_sfx, sequence_e2_ac;
		BitBlock sequence_e2_ac_adv, r2000_2fff_tmp96, byte_ad, sequence_e2_ad;
		BitBlock sequence_e2_ad_adv, r2000_2fff_tmp97, r2000_2fff_tmp98;
		BitBlock r2000_2fff_tmp99, byte_range_87_8c, r2000_2fff_tmp100;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock byte_ef, ra000_ffff_tmp2, ra000_ffff_tmp3, sequence_ef_ac;
		BitBlock byte_ef_adv, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_a9;
		BitBlock sequence_ef_ac_adv, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_b9;
		BitBlock sequence_ef_b9, ra000_ffff_tmp8, byte_a2, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, byte_range_a4_a6, ra000_ffff_tmp11;
		BitBlock sequence_ef_bc, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, byte_range_9c_9e;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, byte_bd, sequence_ef_bd, byte_9c;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp20, byte_9e, ra000_ffff_tmp21;
		BitBlock byte_bf, sequence_ef_bf, sequence_ef_bf_adv, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, byte_range_a9_ac;
		BitBlock ra000_ffff_tmp25, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, byte_f0, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_9d;
		BitBlock r10000_10ffff_tmp8, sequence_f0_9d, byte_9b, r10000_10ffff_tmp9;
		BitBlock sequence_f0_9d_9b, byte_f0_adv, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock sequence_f0_9d_9b_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_bb, r10000_10ffff_tmp16, sequence_f0_9d_9c;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_95;
		BitBlock sequence_f0_9d_9c_adv, r10000_10ffff_tmp19, byte_b5;
		BitBlock r10000_10ffff_tmp20, sequence_f0_9d_9d, r10000_10ffff_tmp21;
		BitBlock sequence_f0_9d_9d_adv, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, sequence_f0_9d_9e, r10000_10ffff_tmp25, byte_89;
		BitBlock sequence_f0_9d_9e_adv, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock sequence_f0_9d_9f, r10000_10ffff_tmp28, byte_83;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp29, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp30, sequence_f0_9e_bb, sequence_f0_9e_adv;
		BitBlock r10000_10ffff_tmp31, byte_range_b0_b1, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp32;




        struct_gc_Sm.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp8, tmp1);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_and(tmp9, tmp10);
        tmp12 = simd_andc(tmp11, tmp5);
        tmp13 = simd_or(tmp7, tmp12);
        tmp14 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp15 = simd_and(tmp14, tmp8);
        tmp16 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp17 = simd_andc(tmp10, tmp16);
        tmp18 = simd_and(tmp15, tmp17);
        tmp19 = simd_or(tmp13, tmp18);
        tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp21 = simd_and(tmp10, tmp20);
        tmp22 = simd_and(tmp15, tmp21);
        cc_range_2b_7e_1 = simd_or(tmp19, tmp22);
        struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, cc_range_2b_7e_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 43))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(tmp20, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
            byte_ac = simd_and(r80_7ff_tmp6, tmp17);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_ac);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r80_7ff_tmp7);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp5, tmp8);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, r80_7ff_tmp3);
            byte_b1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b1);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp5, r80_7ff_tmp3);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(r80_7ff_tmp5, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp15, tmp5);
            byte_97 = simd_and(r80_7ff_tmp14, r80_7ff_tmp16);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp17 = simd_and(byte_c3_adv, byte_97);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r80_7ff_tmp17);
            byte_b7 = simd_and(r80_7ff_tmp8, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(byte_c3_adv, byte_b7);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r80_7ff_tmp18);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 2))) {
              r100_3ff_tmp1 = simd_and(tmp10, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              byte_range_b0_bf = r80_7ff_tmp8;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(2), r100_3ff_tmp2));
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, byte_range_b0_bf);
              r100_3ff_tmp4 = simd_and(tmp10, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_or(r100_3ff_tmp3, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp5) || carryQ.CarryTest(3, 1))) {
                r370_3ff_tmp1 = simd_and(tmp10, tmp5);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp15, tmp20);
                byte_b6 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(3), byte_cf_adv));
                r370_3ff_tmp3 = simd_and(byte_cf_adv, byte_b6);
                struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r370_3ff_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 2);
            }
            r80_7ff_tmp19 = simd_and(byte_range_c0_ff, r80_7ff_tmp13);
            byte_range_d8_db = simd_and(r80_7ff_tmp19, tmp4);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(4, 1))) {
              r600_6ff_tmp1 = simd_andc(tmp4, tmp16);
              byte_d8 = simd_and(r80_7ff_tmp19, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              r600_6ff_tmp3 = simd_or(basis_bits.bit_5, tmp16);
              r600_6ff_tmp4 = simd_not(r600_6ff_tmp3);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp6 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp4), simd_andc(r600_6ff_tmp5, basis_bits.bit_4));
              byte_range_86_88 = simd_and(r600_6ff_tmp2, r600_6ff_tmp6);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(4), byte_d8_adv));
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_range_86_88);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r600_6ff_tmp7);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 29))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, tmp16);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
            r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp6);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp7));
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, byte_range_80_b7);
            r800_ffff_tmp9 = simd_or(byte_range_e0_e3, r800_ffff_tmp8);
            if ((bitblock::any(r800_ffff_tmp9) || carryQ.CarryTest(6, 22))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp8);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(6, 22))) {
                r2000_4dff_tmp1 = simd_andc(tmp20, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 22))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp4, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp3);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(7), sequence_e2_81_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_81_adv, byte_84);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp4, r2000_2fff_tmp7);
                  byte_92 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp9 = simd_and(sequence_e2_81_adv, byte_92);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp4, tmp8);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp10, basis_bits.bit_4);
                  r2000_2fff_tmp12 = simd_not(tmp16);
                  r2000_2fff_tmp13 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp12), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_81_adv, byte_range_ba_bc);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp14);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp1);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_8a_8c = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp13);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(8), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_8a_8c);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp16);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_andc(tmp4, tmp16);
                  byte_98 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp17);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(9), sequence_e2_84_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_84_adv, byte_98);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp19);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp20 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_5, tmp16);
                  byte_range_80_84 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp21);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(10), sequence_e2_85_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_85_adv, byte_range_80_84);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp22);
                  byte_8b = simd_and(r2000_2fff_tmp2, tmp6);
                  r2000_2fff_tmp23 = simd_and(sequence_e2_85_adv, byte_8b);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp2, tmp20);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp24);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp25 = simd_andc(r2000_2fff_tmp8, basis_bits.bit_4);
                  byte_range_90_94 = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp21);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(11), sequence_e2_86_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_86_adv, byte_range_90_94);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(tmp4, basis_bits.bit_6);
                  byte_range_9a_9b = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(sequence_e2_86_adv, byte_range_9a_9b);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(r800_ffff_tmp4, tmp2);
                  r2000_2fff_tmp30 = simd_or(r800_ffff_tmp1, tmp16);
                  byte_a0 = simd_andc(r2000_2fff_tmp29, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_86_adv, byte_a0);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_andc(tmp5, r800_ffff_tmp1);
                  byte_a3 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp32);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_86_adv, byte_a3);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp33);
                  byte_a6 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp24);
                  r2000_2fff_tmp34 = simd_and(sequence_e2_86_adv, byte_a6);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp34);
                  byte_ae = simd_and(r2000_2fff_tmp29, tmp21);
                  r2000_2fff_tmp35 = simd_and(sequence_e2_86_adv, byte_ae);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r800_ffff_tmp2, tmp5);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp36);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  r2000_2fff_tmp37 = simd_and(tmp10, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp37);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(12), sequence_e2_87_adv));
                  r2000_2fff_tmp38 = simd_and(sequence_e2_87_adv, byte_range_8e_8f);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(sequence_e2_87_adv, byte_92);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp39);
                  byte_94 = simd_and(r2000_2fff_tmp8, r800_ffff_tmp3);
                  r2000_2fff_tmp40 = simd_and(sequence_e2_87_adv, byte_94);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp40);
                  byte_range_b4_bf = simd_and(r2000_2fff_tmp10, r800_ffff_tmp1);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_87_adv, byte_range_b4_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp41);
                  byte_range_88_8b = simd_and(r2000_2fff_tmp2, tmp4);
                  byte_e2_byte_range_88_8b = simd_and(byte_e2_adv, byte_range_88_8b);
                  byte_range_80_bf = r800_ffff_tmp4;
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_88_8b, carryQ.get_carry_in(13), r2000_2fff_tmp42));
                  byte_e2_byte_range_88_8b_sfx = simd_and(r2000_2fff_tmp42, byte_range_80_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, byte_e2_byte_range_88_8b_sfx);
                  r2000_2fff_tmp43 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  byte_8c = simd_and(r2000_2fff_tmp43, tmp17);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  r2000_2fff_tmp44 = simd_and(byte_range_80_bf, tmp2);
                  r2000_2fff_tmp45 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_a0_a1 = simd_andc(r2000_2fff_tmp44, r2000_2fff_tmp45);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(14), sequence_e2_8c_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_8c_adv, byte_range_a0_a1);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_and(tmp10, r2000_2fff_tmp3);
                  byte_8d = simd_and(r2000_2fff_tmp43, r2000_2fff_tmp47);
                  sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
                  r2000_2fff_tmp48 = simd_and(byte_range_80_bf, tmp8);
                  byte_bc = simd_and(r2000_2fff_tmp48, tmp17);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(15), sequence_e2_8d_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_8d_adv, byte_bc);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp49);
                  byte_8e = simd_and(r2000_2fff_tmp43, tmp21);
                  sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
                  r2000_2fff_tmp50 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp51 = simd_not(r2000_2fff_tmp50);
                  r2000_2fff_tmp52 = simd_or(basis_bits.bit_5, tmp5);
                  r2000_2fff_tmp53 = simd_and(basis_bits.bit_4, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(basis_bits.bit_3, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp51), simd_andc(r2000_2fff_tmp54, basis_bits.bit_2));
                  byte_range_9b_b3 = simd_and(byte_range_80_bf, r2000_2fff_tmp55);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(16), sequence_e2_8e_adv));
                  r2000_2fff_tmp56 = simd_and(sequence_e2_8e_adv, byte_range_9b_b3);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp56);
                  r2000_2fff_tmp57 = simd_and(tmp10, tmp5);
                  byte_8f = simd_and(r2000_2fff_tmp43, r2000_2fff_tmp57);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp58 = simd_or(basis_bits.bit_3, r2000_2fff_tmp45);
                  r2000_2fff_tmp59 = simd_not(r2000_2fff_tmp58);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_3, tmp10);
                  r2000_2fff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp59), simd_andc(r2000_2fff_tmp60, basis_bits.bit_2));
                  byte_range_9c_a1 = simd_and(byte_range_80_bf, r2000_2fff_tmp61);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(17), sequence_e2_8f_adv));
                  r2000_2fff_tmp62 = simd_and(sequence_e2_8f_adv, byte_range_9c_a1);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp62);
                  r2000_2fff_tmp63 = simd_and(byte_range_80_bf, r2000_2fff_tmp7);
                  byte_96 = simd_and(r2000_2fff_tmp63, r2000_2fff_tmp24);
                  sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
                  byte_b7 = simd_and(r2000_2fff_tmp48, r2000_2fff_tmp36);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(18), sequence_e2_96_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_96_adv, byte_b7);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp64);
                  byte_97 = simd_and(r2000_2fff_tmp63, r2000_2fff_tmp36);
                  sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(19), sequence_e2_97_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_97_adv, byte_81);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp65);
                  byte_range_b8_bf = simd_and(r2000_2fff_tmp48, basis_bits.bit_4);
                  r2000_2fff_tmp66 = simd_and(sequence_e2_97_adv, byte_range_b8_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_and(tmp4, r2000_2fff_tmp3);
                  byte_99 = simd_and(r2000_2fff_tmp63, r2000_2fff_tmp67);
                  sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
                  byte_af = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp57);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(20), sequence_e2_99_adv));
                  r2000_2fff_tmp68 = simd_and(sequence_e2_99_adv, byte_af);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp68);
                  byte_9f = simd_and(r2000_2fff_tmp63, r2000_2fff_tmp57);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  r2000_2fff_tmp69 = simd_andc(r2000_2fff_tmp43, basis_bits.bit_4);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(21), sequence_e2_9f_adv));
                  r2000_2fff_tmp70 = simd_and(sequence_e2_9f_adv, byte_range_80_84);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp70);
                  r2000_2fff_tmp71 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp72 = simd_or(basis_bits.bit_4, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_or(basis_bits.bit_3, r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_not(r2000_2fff_tmp73);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_5, tmp5);
                  r2000_2fff_tmp76 = simd_or(basis_bits.bit_4, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_or(basis_bits.bit_3, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp74), simd_andc(r2000_2fff_tmp77, basis_bits.bit_2));
                  byte_range_87_a5 = simd_and(byte_range_80_bf, r2000_2fff_tmp78);
                  r2000_2fff_tmp79 = simd_and(sequence_e2_9f_adv, byte_range_87_a5);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp79);
                  byte_range_b0_bf = r2000_2fff_tmp48;
                  r2000_2fff_tmp80 = simd_and(sequence_e2_9f_adv, byte_range_b0_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp80);
                  r2000_2fff_tmp81 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp81);
                  byte_e2_byte_range_a4_a5 = simd_and(byte_e2_adv, byte_range_a4_a5);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a4_a5, carryQ.get_carry_in(22), r2000_2fff_tmp82));
                  byte_e2_byte_range_a4_a5_sfx = simd_and(r2000_2fff_tmp82, byte_range_80_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, byte_e2_byte_range_a4_a5_sfx);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  r2000_2fff_tmp83 = simd_andc(r2000_2fff_tmp43, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp83, tmp5);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(23), sequence_e2_a6_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_a6_adv, byte_range_80_82);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp84);
                  r2000_2fff_tmp85 = simd_or(basis_bits.bit_5, tmp16);
                  r2000_2fff_tmp86 = simd_and(basis_bits.bit_4, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_and(basis_bits.bit_3, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_or(basis_bits.bit_2, r2000_2fff_tmp87);
                  byte_range_99_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp88);
                  r2000_2fff_tmp89 = simd_and(sequence_e2_a6_adv, byte_range_99_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp89);
                  byte_a7 = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp36);
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  r2000_2fff_tmp90 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_80_97 = simd_andc(r2000_2fff_tmp90, r800_ffff_tmp5);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(24), sequence_e2_a7_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_a7_adv, byte_range_80_97);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp91);
                  r2000_2fff_tmp92 = simd_xor(basis_bits.bit_2, r2000_2fff_tmp60);
                  byte_range_9c_bb = simd_and(byte_range_80_bf, r2000_2fff_tmp92);
                  r2000_2fff_tmp93 = simd_and(sequence_e2_a7_adv, byte_range_9c_bb);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp93);
                  byte_range_be_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp37);
                  r2000_2fff_tmp94 = simd_and(sequence_e2_a7_adv, byte_range_be_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp94);
                  byte_range_a8_ab = simd_and(r2000_2fff_tmp44, tmp4);
                  byte_e2_byte_range_a8_ab = simd_and(byte_e2_adv, byte_range_a8_ab);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a8_ab, carryQ.get_carry_in(25), r2000_2fff_tmp95));
                  byte_e2_byte_range_a8_ab_sfx = simd_and(r2000_2fff_tmp95, byte_range_80_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, byte_e2_byte_range_a8_ab_sfx);
                  byte_ac = simd_and(r2000_2fff_tmp44, tmp17);
                  sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(26), sequence_e2_ac_adv));
                  r2000_2fff_tmp96 = simd_and(sequence_e2_ac_adv, byte_range_b0_bf);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp96);
                  byte_ad = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp47);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(27), sequence_e2_ad_adv));
                  r2000_2fff_tmp97 = simd_and(sequence_e2_ad_adv, byte_range_80_84);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp97);
                  r2000_2fff_tmp98 = simd_not(r2000_2fff_tmp21);
                  r2000_2fff_tmp99 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp98), simd_andc(r2000_2fff_tmp75, basis_bits.bit_4));
                  byte_range_87_8c = simd_and(r2000_2fff_tmp43, r2000_2fff_tmp99);
                  r2000_2fff_tmp100 = simd_and(sequence_e2_ad_adv, byte_range_87_8c);
                  struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r2000_2fff_tmp100);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 22);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 22);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 22);
            }
            r800_ffff_tmp10 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp11);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(28, 6))) {
              ra000_ffff_tmp1 = simd_and(tmp10, tmp5);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp1);
              ra000_ffff_tmp2 = simd_and(r800_ffff_tmp4, tmp2);
              byte_ac = simd_and(ra000_ffff_tmp2, tmp17);
              carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(28), ra000_ffff_tmp3));
              sequence_ef_ac = simd_and(ra000_ffff_tmp3, byte_ac);
              byte_ef_adv = ra000_ffff_tmp3;
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp5 = simd_and(tmp4, ra000_ffff_tmp4);
              byte_a9 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp5);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(29), sequence_ef_ac_adv));
              ra000_ffff_tmp6 = simd_and(sequence_ef_ac_adv, byte_a9);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp6);
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp4, tmp8);
              byte_b9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp5);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp8 = simd_andc(tmp20, r800_ffff_tmp1);
              byte_a2 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp8);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(30), sequence_ef_b9_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ef_b9_adv, byte_a2);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp2, r800_ffff_tmp2);
              byte_range_a4_a6 = simd_andc(ra000_ffff_tmp10, tmp5);
              ra000_ffff_tmp11 = simd_and(sequence_ef_b9_adv, byte_range_a4_a6);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp11);
              byte_bc = simd_and(ra000_ffff_tmp7, tmp17);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp4, ra000_ffff_tmp12);
              byte_8b = simd_and(ra000_ffff_tmp13, tmp6);
              carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(31), sequence_ef_bc_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_bc_adv, byte_8b);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp4, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp16, tmp10);
              byte_range_9c_9e = simd_andc(ra000_ffff_tmp17, tmp5);
              ra000_ffff_tmp18 = simd_and(sequence_ef_bc_adv, byte_range_9c_9e);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(tmp10, ra000_ffff_tmp4);
              byte_bd = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp19);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_9c = simd_and(ra000_ffff_tmp16, tmp17);
              carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(32), sequence_ef_bd_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ef_bd_adv, byte_9c);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp20);
              byte_9e = simd_and(ra000_ffff_tmp16, tmp21);
              ra000_ffff_tmp21 = simd_and(sequence_ef_bd_adv, byte_9e);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp21);
              byte_bf = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp1);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(33), sequence_ef_bf_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ef_bf_adv, byte_a2);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp2, basis_bits.bit_4);
              ra000_ffff_tmp24 = simd_xor(basis_bits.bit_5, tmp16);
              byte_range_a9_ac = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(sequence_ef_bf_adv, byte_range_a9_ac);
              struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, ra000_ffff_tmp25);
            }
            else {
              carryQ.CarryDequeueEnqueue(28, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 29);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp8);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(34, 9))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(r10000_10ffff_tmp1, tmp16);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp2);
            r10000_10ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp4);
            r10000_10ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp7 = simd_and(tmp10, r10000_10ffff_tmp6);
            byte_9d = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(34), r10000_10ffff_tmp8));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp8, byte_9d);
            byte_9b = simd_and(r10000_10ffff_tmp5, tmp6);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(35), r10000_10ffff_tmp9));
            sequence_f0_9d_9b = simd_and(r10000_10ffff_tmp9, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp8;
            sequence_f0_9d_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(36), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_9d_9b_adv, byte_81);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9d_9b_adv, byte_9b);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp3, tmp8);
            byte_bb = simd_and(r10000_10ffff_tmp15, tmp6);
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9d_9b_adv, byte_bb);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp16);
            byte_9c = simd_and(r10000_10ffff_tmp5, tmp17);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp6);
            byte_95 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp18);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(37), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_9d_9c_adv, byte_95);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp19);
            byte_b5 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_9d_9c_adv, byte_b5);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp20);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp21 = simd_and(tmp10, tmp5);
            byte_8f = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp21);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(38), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9d_9d_adv, byte_8f);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp3, tmp2);
            byte_af = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp21);
            r10000_10ffff_tmp24 = simd_and(sequence_f0_9d_9d_adv, byte_af);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp24);
            byte_9e = simd_and(r10000_10ffff_tmp5, tmp21);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp25 = simd_and(tmp4, r10000_10ffff_tmp6);
            byte_89 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp25);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(39), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_9d_9e_adv, byte_89);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp26);
            byte_a9 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_9d_9e_adv, byte_a9);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp27);
            byte_9f = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp21);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp28 = simd_andc(tmp5, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp28);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(40), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_9d_9f_adv, byte_83);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp29);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(41), r10000_10ffff_tmp30));
            sequence_f0_9e_bb = simd_and(r10000_10ffff_tmp30, byte_bb);
            sequence_f0_9e_adv = r10000_10ffff_tmp30;
            r10000_10ffff_tmp31 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_b0_b1 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp31);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(42), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
            struct_gc_Sm.cc = simd_or(struct_gc_Sm.cc, r10000_10ffff_tmp32);
          }
          else {
            carryQ.CarryDequeueEnqueue(34, 9);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 43);
        }
        carryQ.CarryQ_Adjust(43);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<43, 0> carryQ;
  };

  struct Property_gc_So {
  Property_gc_So() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_So & struct_gc_So) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_a6;
		BitBlock byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, byte_a9, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock byte_ae, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, byte_b0, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, byte_d2, r400_4ff_tmp1, byte_82;
		BitBlock byte_d2_adv, r400_4ff_tmp2, r400_5ff_tmp1, byte_range_d4_d5, byte_d6;
		BitBlock byte_range_80_8f, r400_5ff_tmp2, r400_5ff_tmp3, r400_5ff_tmp4;
		BitBlock r500_58f_tmp1, byte_d4, byte_range_b0_bf, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_8d_8e, byte_d6_adv;
		BitBlock r530_58f_tmp3, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock r600_6ff_tmp2, r600_6ff_tmp3, byte_range_8e_8f, byte_d8_adv;
		BitBlock r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, byte_db, r600_6ff_tmp7;
		BitBlock byte_9e, byte_db_adv, r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10;
		BitBlock r600_6ff_tmp11, byte_range_bd_be, r600_6ff_tmp12, r80_7ff_tmp26;
		BitBlock byte_range_de_df, r780_7ff_tmp1, r780_7ff_tmp2, byte_df, byte_b6;
		BitBlock byte_df_adv, r7c0_7ff_tmp1, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a7;
		BitBlock r800_fff_tmp4, sequence_e0_a7, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, byte_ba;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_ad, sequence_e0_ad, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp14, r800_fff_tmp15, byte_af, sequence_e0_af;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock byte_range_b3_b8, sequence_e0_af_adv, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock r800_fff_tmp22, byte_b1, sequence_e0_b1, byte_bf, sequence_e0_b1_adv;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_b5, sequence_e0_b5;
		BitBlock r800_fff_tmp25, byte_b9, sequence_e0_b5_adv, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, byte_bc, sequence_e0_bc, r800_fff_tmp28;
		BitBlock r800_fff_tmp29, r800_fff_tmp30, byte_range_81_83, sequence_e0_bc_adv;
		BitBlock r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33, r800_fff_tmp34;
		BitBlock byte_93, r800_fff_tmp35, r800_fff_tmp36, byte_range_95_97;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39, byte_range_9a_9f;
		BitBlock r800_fff_tmp40, byte_b4, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, byte_b8, r800_fff_tmp45;
		BitBlock r800_fff_tmp46, byte_be, sequence_e0_be, r800_fff_tmp47;
		BitBlock byte_range_be_bf, sequence_e0_be_adv, r800_fff_tmp48, sequence_e0_bf;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, byte_range_80_85, sequence_e0_bf_adv;
		BitBlock r800_fff_tmp51, r800_fff_tmp52, r800_fff_tmp53, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, byte_range_87_8c, r800_fff_tmp56, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, byte_range_95_98, r800_fff_tmp59, r800_1fff_tmp2;
		BitBlock r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, byte_range_9e_9f, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_8e, sequence_e1_8e;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_range_90_99;
		BitBlock sequence_e1_8e_adv, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, byte_a5, sequence_e1_a5, byte_80;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, sequence_e1_a7, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock byte_range_9e_bf, sequence_e1_a7_adv, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, sequence_e1_ad, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, byte_range_a1_aa;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, byte_range_b4_bc, r1000_1fff_tmp34, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84, r2000_2fff_tmp3;
		BitBlock sequence_e2_84, byte_e2_adv, byte_range_80_81, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock byte_range_83_86, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock byte_range_88_89, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, byte_94, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock byte_range_96_97, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, byte_range_9e_a3;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, r2000_2fff_tmp31;
		BitBlock r2000_2fff_tmp32, r2000_2fff_tmp33, r2000_2fff_tmp34;
		BitBlock r2000_2fff_tmp35, r2000_2fff_tmp36, byte_range_ba_bb;
		BitBlock r2000_2fff_tmp37, byte_85, sequence_e2_85, r2000_2fff_tmp38, byte_8a;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp39, r2000_2fff_tmp40;
		BitBlock byte_range_8c_8d, r2000_2fff_tmp41, r2000_2fff_tmp42, byte_8f;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_range_95_99, sequence_e2_86_adv;
		BitBlock r2000_2fff_tmp49, byte_range_9c_9f, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, byte_range_a1_a2;
		BitBlock r2000_2fff_tmp53, r2000_2fff_tmp54, byte_range_a4_a5;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, byte_range_a7_ad;
		BitBlock r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock byte_range_af_bf, r2000_2fff_tmp63, byte_87, sequence_e2_87;
		BitBlock r2000_2fff_tmp64, byte_range_80_8d, sequence_e2_87_adv;
		BitBlock r2000_2fff_tmp65, byte_range_90_91, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, byte_range_95_b3, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, byte_8c, sequence_e2_8c, byte_range_80_87;
		BitBlock sequence_e2_8c_adv, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock r2000_2fff_tmp78, byte_range_8c_9f, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock byte_range_a2_a8, r2000_2fff_tmp83, r2000_2fff_tmp84;
		BitBlock r2000_2fff_tmp85, r2000_2fff_tmp86, byte_range_ab_bf;
		BitBlock r2000_2fff_tmp87, r2000_2fff_tmp88, byte_8d, sequence_e2_8d;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, byte_range_80_bb;
		BitBlock sequence_e2_8d_adv, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock byte_range_bd_bf, r2000_2fff_tmp93, sequence_e2_8e, r2000_2fff_tmp94;
		BitBlock byte_range_80_9a, sequence_e2_8e_adv, r2000_2fff_tmp95;
		BitBlock byte_range_b4_bf, r2000_2fff_tmp96, sequence_e2_8f, byte_range_80_9b;
		BitBlock sequence_e2_8f_adv, r2000_2fff_tmp97, r2000_2fff_tmp98;
		BitBlock r2000_2fff_tmp99, byte_range_a2_ba, r2000_2fff_tmp100;
		BitBlock r2000_2fff_tmp101, byte_90, sequence_e2_90, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, byte_range_80_a6;
		BitBlock sequence_e2_90_adv, r2000_2fff_tmp105, r2000_2fff_tmp106, byte_91;
		BitBlock sequence_e2_91, byte_range_80_8a, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp107, byte_92, sequence_e2_92, r2000_2fff_tmp108;
		BitBlock byte_range_9c_bf, sequence_e2_92_adv, r2000_2fff_tmp109;
		BitBlock sequence_e2_93, r2000_2fff_tmp110, r2000_2fff_tmp111;
		BitBlock r2000_2fff_tmp112, byte_range_80_a9, sequence_e2_93_adv;
		BitBlock r2000_2fff_tmp113, byte_range_94_95, byte_e2_byte_range_94_95;
		BitBlock byte_range_80_bf, r2000_2fff_tmp114, byte_e2_byte_range_94_95_sfx;
		BitBlock r2000_2fff_tmp115, byte_96, sequence_e2_96, r2000_2fff_tmp116;
		BitBlock r2000_2fff_tmp117, byte_range_80_b6, sequence_e2_96_adv;
		BitBlock r2000_2fff_tmp118, r2000_2fff_tmp119, byte_range_b8_bf;
		BitBlock r2000_2fff_tmp120, byte_97, sequence_e2_97, r2000_2fff_tmp121;
		BitBlock sequence_e2_97_adv, r2000_2fff_tmp122, r2000_2fff_tmp123;
		BitBlock r2000_2fff_tmp124, r2000_2fff_tmp125, byte_range_82_b7;
		BitBlock r2000_2fff_tmp126, r2000_2fff_tmp127, byte_98, sequence_e2_98;
		BitBlock sequence_e2_98_adv, r2000_2fff_tmp128, byte_99, sequence_e2_99;
		BitBlock r2000_2fff_tmp129, byte_range_80_ae, sequence_e2_99_adv;
		BitBlock r2000_2fff_tmp130, r2000_2fff_tmp131, r2000_2fff_tmp132;
		BitBlock r2000_2fff_tmp133, r2000_2fff_tmp134, byte_range_9a_9c;
		BitBlock byte_e2_byte_range_9a_9c, r2000_2fff_tmp135;
		BitBlock byte_e2_byte_range_9a_9c_sfx, byte_9d, sequence_e2_9d;
		BitBlock r2000_2fff_tmp136, r2000_2fff_tmp137, byte_range_80_a7;
		BitBlock sequence_e2_9d_adv, r2000_2fff_tmp138, sequence_e2_9e;
		BitBlock r2000_2fff_tmp139, byte_range_94_bf, sequence_e2_9e_adv;
		BitBlock r2000_2fff_tmp140, r2000_2fff_tmp141, byte_range_a0_a3;
		BitBlock byte_e2_byte_range_a0_a3, r2000_2fff_tmp142;
		BitBlock byte_e2_byte_range_a0_a3_sfx, byte_ac, sequence_e2_ac;
		BitBlock byte_range_80_af, sequence_e2_ac_adv, r2000_2fff_tmp143;
		BitBlock sequence_e2_ad, r2000_2fff_tmp144, byte_range_85_86;
		BitBlock sequence_e2_ad_adv, r2000_2fff_tmp145, r2000_2fff_tmp146;
		BitBlock r2000_2fff_tmp147, r2000_2fff_tmp148, byte_range_8d_b3;
		BitBlock r2000_2fff_tmp149, r2000_2fff_tmp150, byte_range_b6_bf;
		BitBlock r2000_2fff_tmp151, sequence_e2_ae, r2000_2fff_tmp152;
		BitBlock r2000_2fff_tmp153, byte_range_80_95, sequence_e2_ae_adv;
		BitBlock r2000_2fff_tmp154, r2000_2fff_tmp155, r2000_2fff_tmp156;
		BitBlock r2000_2fff_tmp157, byte_range_98_b9, r2000_2fff_tmp158;
		BitBlock r2000_2fff_tmp159, r2000_2fff_tmp160, sequence_e2_af;
		BitBlock r2000_2fff_tmp161, byte_range_80_88, sequence_e2_af_adv;
		BitBlock r2000_2fff_tmp162, r2000_2fff_tmp163, r2000_2fff_tmp164;
		BitBlock byte_range_8a_91, r2000_2fff_tmp165, byte_b3, sequence_e2_b3;
		BitBlock r2000_2fff_tmp166, r2000_2fff_tmp167, byte_range_a5_aa;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp168, sequence_e2_ba;
		BitBlock byte_range_80_99, sequence_e2_ba_adv, r2000_2fff_tmp169;
		BitBlock r2000_2fff_tmp170, byte_range_9b_bf, r2000_2fff_tmp171;
		BitBlock r2000_2fff_tmp172, byte_bb, sequence_e2_bb, r2000_2fff_tmp173;
		BitBlock byte_range_80_b3, sequence_e2_bb_adv, r2000_2fff_tmp174;
		BitBlock byte_range_bc_be, byte_e2_byte_range_bc_be, r2000_2fff_tmp175;
		BitBlock byte_e2_byte_range_bc_be_sfx, sequence_e2_bf, sequence_e2_bf_adv;
		BitBlock r2000_2fff_tmp176, byte_range_b0_bb, r2000_2fff_tmp177;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4;
		BitBlock sequence_e3_80, byte_e3_adv, sequence_e3_80_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, byte_range_92_93, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, byte_a0, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, byte_range_b6_b7;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, sequence_e3_86;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, byte_range_96_9f, r3000_4dff_tmp22;
		BitBlock r3000_4dff_tmp23, sequence_e3_87, r3000_4dff_tmp24, r3000_4dff_tmp25;
		BitBlock byte_range_80_a3, sequence_e3_87_adv, r3000_4dff_tmp26;
		BitBlock r3000_4dff_tmp27, r3000_4dff_tmp28, byte_88, sequence_e3_88;
		BitBlock r3000_4dff_tmp29, r3000_4dff_tmp30, r3000_4dff_tmp31;
		BitBlock byte_range_80_9e, sequence_e3_88_adv, r3000_4dff_tmp32;
		BitBlock r3000_4dff_tmp33, r3000_4dff_tmp34, r3000_4dff_tmp35;
		BitBlock r3000_4dff_tmp36, byte_range_aa_bf, r3000_4dff_tmp37;
		BitBlock r3000_4dff_tmp38, r3000_4dff_tmp39, byte_89, sequence_e3_89;
		BitBlock sequence_e3_89_adv, r3000_4dff_tmp40, r3000_4dff_tmp41;
		BitBlock byte_range_a0_bf, r3000_4dff_tmp42, r3000_4dff_tmp43, sequence_e3_8a;
		BitBlock r3000_4dff_tmp44, r3000_4dff_tmp45, r3000_4dff_tmp46;
		BitBlock byte_range_8a_b0, sequence_e3_8a_adv, r3000_4dff_tmp47;
		BitBlock r3000_4dff_tmp48, byte_8b, sequence_e3_8b, r3000_4dff_tmp49;
		BitBlock byte_range_80_be, sequence_e3_8b_adv, r3000_4dff_tmp50;
		BitBlock byte_range_8c_8f, byte_e3_byte_range_8c_8f, r3000_4dff_tmp51;
		BitBlock byte_e3_byte_range_8c_8f_sfx, r3000_4dff_tmp52, byte_b7;
		BitBlock sequence_e4_b7, byte_e4_adv, sequence_e4_b7_adv, r3000_4dff_tmp53;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, sequence_ea_92;
		BitBlock byte_ea_adv, ra000_ffff_tmp8, byte_range_90_bf, sequence_ea_92_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, sequence_ea_93;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock byte_range_80_86, sequence_ea_93_adv, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, sequence_ea_a0, byte_range_a8_ab;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25, sequence_ea_a9;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, byte_range_b7_b9;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, byte_ef, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock sequence_ef_b7, byte_ef_adv, ra000_ffff_tmp33, byte_bd;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp34, sequence_ef_bf, byte_a4;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp35, ra000_ffff_tmp36, byte_a8;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, ra000_ffff_tmp39;
		BitBlock byte_range_ad_ae, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock byte_range_bc_bd, ra000_ffff_tmp42, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_84, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_b7_bf;
		BitBlock sequence_f0_90_84_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, sequence_f0_90_85, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_b9_bf, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock sequence_f0_90_86, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_80_89, sequence_f0_90_86_adv, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock byte_range_90_9b, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, sequence_f0_90_87;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, byte_range_90_bc, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, byte_a1, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, byte_range_b7_b8;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, byte_ab, sequence_f0_90_ab, r10000_10ffff_tmp46;
		BitBlock sequence_f0_90_ab_adv, r10000_10ffff_tmp47, sequence_f0_96;
		BitBlock r10000_10ffff_tmp48, sequence_f0_96_ac, sequence_f0_96_adv;
		BitBlock byte_range_bc_bf, sequence_f0_96_ac_adv, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, sequence_f0_96_ad, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp51, byte_9b, sequence_f0_9b, r10000_10ffff_tmp52;
		BitBlock byte_b2, r10000_10ffff_tmp53, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock byte_9c, sequence_f0_9b_b2_adv, r10000_10ffff_tmp54, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp55, byte_range_80_82, r10000_10ffff_tmp56;
		BitBlock sequence_f0_9d_byte_range_80_82, r10000_10ffff_tmp57;
		BitBlock sequence_f0_9d_byte_range_80_82_sfx, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, byte_83, sequence_f0_9d_83, r10000_10ffff_tmp60;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, byte_range_80_b5;
		BitBlock sequence_f0_9d_83_adv, r10000_10ffff_tmp65, sequence_f0_9d_84;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, sequence_f0_9d_84_adv;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, byte_range_a9_bf, r10000_10ffff_tmp72;
		BitBlock sequence_f0_9d_85, r10000_10ffff_tmp73, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, byte_range_80_a4;
		BitBlock sequence_f0_9d_85_adv, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock byte_range_aa_ac, r10000_10ffff_tmp82, sequence_f0_9d_86;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, byte_range_83_84;
		BitBlock sequence_f0_9d_86_adv, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock r10000_10ffff_tmp87, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock byte_range_8c_a9, r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock r10000_10ffff_tmp92, byte_range_ae_bf, r10000_10ffff_tmp93;
		BitBlock sequence_f0_9d_87, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock byte_range_80_9d, sequence_f0_9d_87_adv, r10000_10ffff_tmp96;
		BitBlock sequence_f0_9d_88, sequence_f0_9d_88_adv, r10000_10ffff_tmp97;
		BitBlock r10000_10ffff_tmp98, sequence_f0_9d_89, r10000_10ffff_tmp99;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock sequence_f0_9d_8c, sequence_f0_9d_8c_adv, r10000_10ffff_tmp102;
		BitBlock sequence_f0_9d_8d, r10000_10ffff_tmp103, byte_range_80_96;
		BitBlock sequence_f0_9d_8d_adv, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock byte_9f, sequence_f0_9f, r10000_10ffff_tmp106, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, r10000_10ffff_tmp107, byte_range_80_ab;
		BitBlock sequence_f0_9f_80_adv, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock byte_81, sequence_f0_9f_81, sequence_f0_9f_81_adv;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9f_82, r10000_10ffff_tmp111;
		BitBlock byte_range_80_93, sequence_f0_9f_82_adv, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, byte_range_a0_ae, r10000_10ffff_tmp114;
		BitBlock r10000_10ffff_tmp115, byte_range_b1_bf, r10000_10ffff_tmp116;
		BitBlock sequence_f0_9f_83, byte_range_81_8f, sequence_f0_9f_83_adv;
		BitBlock r10000_10ffff_tmp117, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock r10000_10ffff_tmp120, byte_range_91_b5, r10000_10ffff_tmp121;
		BitBlock sequence_f0_9f_84, r10000_10ffff_tmp122, r10000_10ffff_tmp123;
		BitBlock r10000_10ffff_tmp124, byte_range_90_ae, sequence_f0_9f_84_adv;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, sequence_f0_9f_85;
		BitBlock sequence_f0_9f_85_adv, r10000_10ffff_tmp127, r10000_10ffff_tmp128;
		BitBlock sequence_f0_9f_86, r10000_10ffff_tmp129, r10000_10ffff_tmp130;
		BitBlock r10000_10ffff_tmp131, sequence_f0_9f_86_adv, r10000_10ffff_tmp132;
		BitBlock sequence_f0_9f_87, r10000_10ffff_tmp133, byte_range_a6_bf;
		BitBlock sequence_f0_9f_87_adv, r10000_10ffff_tmp134, sequence_f0_9f_88;
		BitBlock r10000_10ffff_tmp135, sequence_f0_9f_88_adv, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, byte_range_90_ba;
		BitBlock r10000_10ffff_tmp139, sequence_f0_9f_89, sequence_f0_9f_89_adv;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, sequence_f0_9f_8c;
		BitBlock r10000_10ffff_tmp142, r10000_10ffff_tmp143, byte_range_80_ac;
		BitBlock sequence_f0_9f_8c_adv, r10000_10ffff_tmp144, r10000_10ffff_tmp145;
		BitBlock sequence_f0_9f_8d, r10000_10ffff_tmp146, byte_range_80_bd;
		BitBlock sequence_f0_9f_8d_adv, r10000_10ffff_tmp147, r10000_10ffff_tmp148;
		BitBlock sequence_f0_9f_8e, sequence_f0_9f_8e_adv, r10000_10ffff_tmp149;
		BitBlock sequence_f0_9f_8f, byte_range_80_8e, sequence_f0_9f_8f_adv;
		BitBlock r10000_10ffff_tmp150, r10000_10ffff_tmp151, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, byte_range_94_b7, r10000_10ffff_tmp154;
		BitBlock r10000_10ffff_tmp155, byte_range_90_92;
		BitBlock sequence_f0_9f_byte_range_90_92, r10000_10ffff_tmp156;
		BitBlock sequence_f0_9f_byte_range_90_92_sfx, sequence_f0_9f_93;
		BitBlock r10000_10ffff_tmp157, r10000_10ffff_tmp158, sequence_f0_9f_93_adv;
		BitBlock r10000_10ffff_tmp159, sequence_f0_9f_94, sequence_f0_9f_94_adv;
		BitBlock r10000_10ffff_tmp160, byte_95, sequence_f0_9f_95;
		BitBlock sequence_f0_9f_95_adv, r10000_10ffff_tmp161, r10000_10ffff_tmp162;
		BitBlock r10000_10ffff_tmp163, r10000_10ffff_tmp164, byte_range_90_b9;
		BitBlock r10000_10ffff_tmp165, r10000_10ffff_tmp166, byte_range_bb_bf;
		BitBlock r10000_10ffff_tmp167, sequence_f0_9f_96, r10000_10ffff_tmp168;
		BitBlock r10000_10ffff_tmp169, sequence_f0_9f_96_adv, r10000_10ffff_tmp170;
		BitBlock byte_range_a5_bf, r10000_10ffff_tmp171, byte_range_97_98;
		BitBlock sequence_f0_9f_byte_range_97_98, r10000_10ffff_tmp172;
		BitBlock sequence_f0_9f_byte_range_97_98_sfx, sequence_f0_9f_99;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock byte_range_85_bf, r10000_10ffff_tmp175, r10000_10ffff_tmp176, byte_9a;
		BitBlock sequence_f0_9f_9a, sequence_f0_9f_9a_adv, r10000_10ffff_tmp177;
		BitBlock sequence_f0_9f_9b, sequence_f0_9f_9b_adv, r10000_10ffff_tmp178;
		BitBlock r10000_10ffff_tmp179, byte_range_a0_ac, r10000_10ffff_tmp180;
		BitBlock byte_range_b0_b3, r10000_10ffff_tmp181, sequence_f0_9f_9c;
		BitBlock sequence_f0_9f_9c_adv, r10000_10ffff_tmp182, sequence_f0_9f_9d;
		BitBlock r10000_10ffff_tmp183, sequence_f0_9f_9d_adv, r10000_10ffff_tmp184;
		BitBlock sequence_f0_9f_9e, sequence_f0_9f_9e_adv, r10000_10ffff_tmp185;
		BitBlock sequence_f0_9f_9f, r10000_10ffff_tmp186, byte_range_80_94;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp187, sequence_f0_9f_a0;
		BitBlock byte_range_80_8b, sequence_f0_9f_a0_adv, r10000_10ffff_tmp188;
		BitBlock r10000_10ffff_tmp189, sequence_f0_9f_a1, sequence_f0_9f_a1_adv;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, r10000_10ffff_tmp192;
		BitBlock byte_a2, sequence_f0_9f_a2, sequence_f0_9f_a2_adv;
		BitBlock r10000_10ffff_tmp193, r10000_10ffff_tmp194, r10000_10ffff_tmp195;
		BitBlock byte_range_90_ad, r10000_10ffff_tmp196;




        struct_gc_So.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 127))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 7))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp9, r80_7ff_tmp4);
            byte_a6 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_a6);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp14 = simd_and(r80_7ff_tmp12, r80_7ff_tmp13);
            byte_a9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
            r80_7ff_tmp15 = simd_and(byte_c2_adv, byte_a9);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r80_7ff_tmp15);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp17 = simd_and(r80_7ff_tmp16, r80_7ff_tmp4);
            byte_ae = simd_and(r80_7ff_tmp8, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_and(byte_c2_adv, byte_ae);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r80_7ff_tmp18);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp6, r80_7ff_tmp19);
            r80_7ff_tmp21 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp22 = simd_or(r80_7ff_tmp3, r80_7ff_tmp21);
            byte_b0 = simd_andc(r80_7ff_tmp20, r80_7ff_tmp22);
            r80_7ff_tmp23 = simd_and(byte_c2_adv, byte_b0);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r80_7ff_tmp23);
            r80_7ff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp25 = simd_and(byte_range_c0_ff, r80_7ff_tmp24);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp25, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(1, 3))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp25, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(1, 1))) {
                byte_d2 = simd_and(r80_7ff_tmp25, r80_7ff_tmp5);
                r400_4ff_tmp1 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                byte_82 = simd_and(r400_4ff_tmp1, r80_7ff_tmp5);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(1), byte_d2_adv));
                r400_4ff_tmp2 = simd_and(byte_d2_adv, byte_82);
                struct_gc_So.cc = simd_or(struct_gc_So.cc, r400_4ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp9, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp25, r400_5ff_tmp1);
              byte_d6 = simd_and(r80_7ff_tmp25, r80_7ff_tmp10);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(2), r400_5ff_tmp2));
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp2, byte_range_80_8f);
              r400_5ff_tmp4 = simd_or(byte_range_d4_d5, r400_5ff_tmp3);
              if ((bitblock::any(r400_5ff_tmp4) || carryQ.CarryTest(3, 1))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp9, r80_7ff_tmp21);
                byte_d4 = simd_and(r80_7ff_tmp25, r500_58f_tmp1);
                byte_range_b0_bf = r80_7ff_tmp20;
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(3), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_and(r80_7ff_tmp9, r80_7ff_tmp13);
                byte_d5 = simd_and(r80_7ff_tmp25, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp3);
                if (bitblock::any(r500_58f_tmp6)) {
                  r530_58f_tmp1 = simd_and(byte_range_80_8f, r80_7ff_tmp16);
                  r530_58f_tmp2 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_8d_8e = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_range_8d_8e);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp25, r80_7ff_tmp12);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(4, 2))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp12, r80_7ff_tmp21);
              byte_d8 = simd_and(r80_7ff_tmp25, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp3 = simd_and(r80_7ff_tmp16, basis_bits.bit_6);
              byte_range_8e_8f = simd_and(r600_6ff_tmp2, r600_6ff_tmp3);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(4), byte_d8_adv));
              r600_6ff_tmp4 = simd_and(byte_d8_adv, byte_range_8e_8f);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, r600_6ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_and(r80_7ff_tmp12, r600_6ff_tmp5);
              byte_db = simd_and(r80_7ff_tmp25, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(r80_7ff_tmp6, r80_7ff_tmp24);
              byte_9e = simd_and(r600_6ff_tmp7, r80_7ff_tmp17);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(5), byte_db_adv));
              r600_6ff_tmp8 = simd_and(byte_db_adv, byte_9e);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_and(byte_db_adv, byte_a9);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp20, r80_7ff_tmp16);
              r600_6ff_tmp11 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_bd_be = simd_and(r600_6ff_tmp10, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(byte_db_adv, byte_range_bd_be);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, r600_6ff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 2);
            }
            r80_7ff_tmp26 = simd_and(r80_7ff_tmp16, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp25, r80_7ff_tmp26);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(6, 1))) {
              r780_7ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp16, r780_7ff_tmp1);
              byte_df = simd_and(r80_7ff_tmp25, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(6, 1))) {
                byte_b6 = simd_and(r80_7ff_tmp20, r80_7ff_tmp10);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(6), byte_df_adv));
                r7c0_7ff_tmp1 = simd_and(byte_df_adv, byte_b6);
                struct_gc_So.cc = simd_or(struct_gc_So.cc, r7c0_7ff_tmp1);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 7);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(7, 65))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(7), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(8, 56))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(8, 15))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(8, 9))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(8), r800_fff_tmp4));
                  sequence_e0_a7 = simd_and(r800_fff_tmp4, byte_a7);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp9 = simd_and(r800_fff_tmp7, r800_fff_tmp8);
                  byte_ba = simd_and(r800_fff_tmp6, r800_fff_tmp9);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(9), sequence_e0_a7_adv));
                  r800_fff_tmp10 = simd_and(sequence_e0_a7_adv, byte_ba);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp11, r800_fff_tmp12);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  byte_b0 = simd_andc(r800_fff_tmp6, r800_1fff_tmp1);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(10), sequence_e0_ad_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_ad_adv, byte_b0);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp11, r800_fff_tmp2);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp15);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp16 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp17 = simd_not(r800_fff_tmp16);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_5, r800_fff_tmp2);
                  r800_fff_tmp19 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp17), simd_andc(r800_fff_tmp18, basis_bits.bit_4));
                  byte_range_b3_b8 = simd_and(r800_fff_tmp6, r800_fff_tmp19);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(11), sequence_e0_af_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_af_adv, byte_range_b3_b8);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(sequence_e0_af_adv, byte_ba);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp6, r800_fff_tmp22);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  byte_bf = simd_and(r800_fff_tmp6, r800_fff_tmp15);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(12), sequence_e0_b1_adv));
                  r800_fff_tmp23 = simd_and(sequence_e0_b1_adv, byte_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_b5 = simd_and(r800_fff_tmp6, r800_fff_tmp24);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp25 = simd_and(r800_fff_tmp7, r800_fff_tmp12);
                  byte_b9 = simd_and(r800_fff_tmp6, r800_fff_tmp25);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(13), sequence_e0_b5_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_b5_adv, byte_b9);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_andc(r800_fff_tmp11, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp6, r800_fff_tmp27);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp28 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp29 = simd_andc(r800_ffff_tmp5, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_andc(r800_fff_tmp29, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp30, r800_ffff_tmp3);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(14), sequence_e0_bc_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_bc_adv, byte_range_81_83);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp33 = simd_and(r800_ffff_tmp5, r800_fff_tmp32);
                  r800_fff_tmp34 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_93 = simd_and(r800_fff_tmp33, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_bc_adv, byte_93);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp33, r800_ffff_tmp2);
                  byte_range_95_97 = simd_and(r800_fff_tmp36, r800_ffff_tmp3);
                  r800_fff_tmp37 = simd_and(sequence_e0_bc_adv, byte_range_95_97);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp33, basis_bits.bit_4);
                  r800_fff_tmp39 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r800_fff_tmp38, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_bc_adv, byte_range_9a_9f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp40);
                  byte_b4 = simd_and(r800_fff_tmp6, r800_ffff_tmp4);
                  r800_fff_tmp41 = simd_and(sequence_e0_bc_adv, byte_b4);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_b6 = simd_and(r800_fff_tmp6, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_bc_adv, byte_b6);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_andc(r800_fff_tmp7, r800_ffff_tmp3);
                  byte_b8 = simd_and(r800_fff_tmp6, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(sequence_e0_bc_adv, byte_b8);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(r800_fff_tmp11, r800_fff_tmp8);
                  byte_be = simd_and(r800_fff_tmp6, r800_fff_tmp46);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp11, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp6, r800_fff_tmp47);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(15), sequence_e0_be_adv));
                  r800_fff_tmp48 = simd_and(sequence_e0_be_adv, byte_range_be_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp48);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp49 = simd_andc(r800_fff_tmp29, basis_bits.bit_4);
                  r800_fff_tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r800_fff_tmp49, r800_fff_tmp50);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(16), sequence_e0_bf_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_bf_adv, byte_range_80_85);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp53 = simd_not(r800_fff_tmp52);
                  r800_fff_tmp54 = simd_and(basis_bits.bit_5, r800_fff_tmp2);
                  r800_fff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp53), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  byte_range_87_8c = simd_and(r800_fff_tmp29, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(sequence_e0_bf_adv, byte_range_87_8c);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp56);
                  byte_range_8e_8f = simd_and(r800_fff_tmp29, r800_fff_tmp47);
                  r800_fff_tmp57 = simd_and(sequence_e0_bf_adv, byte_range_8e_8f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp17), simd_andc(r800_fff_tmp52, basis_bits.bit_4));
                  byte_range_95_98 = simd_and(r800_fff_tmp33, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(sequence_e0_bf_adv, byte_range_95_98);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r800_fff_tmp59);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 9);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(17, 6))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(17), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp8, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(18), sequence_e1_82_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_82_adv, byte_range_9e_9f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp3);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_4, r1000_1fff_tmp12);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp13);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(19), sequence_e1_8e_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_8e_adv, byte_range_90_99);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(20), sequence_e1_a5_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_a5_adv, byte_80);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp18);
                  byte_a7 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp19);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp20 = simd_and(basis_bits.bit_3, r1000_1fff_tmp9);
                  r1000_1fff_tmp21 = simd_or(basis_bits.bit_2, r1000_1fff_tmp20);
                  byte_range_9e_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp21);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(21), sequence_e1_a7_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_a7_adv, byte_range_9e_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp8, r800_1fff_tmp2);
                  byte_ad = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp23);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp24 = simd_or(basis_bits.bit_5, r1000_1fff_tmp18);
                  r1000_1fff_tmp25 = simd_not(r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp25), simd_andc(r1000_1fff_tmp26, basis_bits.bit_4));
                  byte_range_a1_aa = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp27);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(22), sequence_e1_ad_adv));
                  r1000_1fff_tmp28 = simd_and(sequence_e1_ad_adv, byte_range_a1_aa);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp32 = simd_not(r1000_1fff_tmp31);
                  r1000_1fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp32), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_bc = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_ad_adv, byte_range_b4_bc);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r1000_1fff_tmp34);
                }
                else {
                  carryQ.CarryDequeueEnqueue(17, 6);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 15);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(23, 41))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(23, 31))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(23), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_80_81 = simd_andc(r2000_2fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(24), sequence_e2_84_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_84_adv, byte_range_80_81);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_xor(basis_bits.bit_5, r2000_2fff_tmp6);
                  byte_range_83_86 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(sequence_e2_84_adv, byte_range_83_86);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp9, basis_bits.bit_6);
                  byte_range_88_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_84_adv, byte_range_88_89);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp12);
                  byte_94 = simd_and(r2000_2fff_tmp13, r800_ffff_tmp4);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_84_adv, byte_94);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(sequence_e2_84_adv, byte_range_96_97);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp18 = simd_not(r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp20 = simd_and(r2000_2fff_tmp19, basis_bits.bit_6);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_3, r2000_2fff_tmp20);
                  r2000_2fff_tmp22 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp18), simd_andc(r2000_2fff_tmp21, basis_bits.bit_2));
                  byte_range_9e_a3 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(sequence_e2_84_adv, byte_range_9e_a3);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp25 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp26 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp25);
                  byte_a5 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_84_adv, byte_a5);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp6);
                  byte_a7 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_84_adv, byte_a7);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp25);
                  byte_a9 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_84_adv, byte_a9);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp19, r2000_4dff_tmp1);
                  byte_ae = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp32);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_84_adv, byte_ae);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp9, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp36);
                  r2000_2fff_tmp37 = simd_and(sequence_e2_84_adv, byte_range_ba_bb);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp37);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp9, r2000_4dff_tmp1);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(25), sequence_e2_85_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_85_adv, byte_8a);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp39);
                  r2000_2fff_tmp40 = simd_andc(r2000_2fff_tmp19, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_85_adv, byte_range_8c_8d);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp6);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_85_adv, byte_8f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp44);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp45 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp46 = simd_not(r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp48 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp46), simd_andc(r2000_2fff_tmp47, basis_bits.bit_4));
                  byte_range_95_99 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp48);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(26), sequence_e2_86_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_86_adv, byte_range_95_99);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp49);
                  byte_range_9c_9f = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp19);
                  r2000_2fff_tmp50 = simd_and(sequence_e2_86_adv, byte_range_9c_9f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_andc(r2000_2fff_tmp24, r800_ffff_tmp1);
                  r2000_2fff_tmp52 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_a1_a2 = simd_and(r2000_2fff_tmp51, r2000_2fff_tmp52);
                  r2000_2fff_tmp53 = simd_and(sequence_e2_86_adv, byte_range_a1_a2);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp54);
                  r2000_2fff_tmp55 = simd_and(sequence_e2_86_adv, byte_range_a4_a5);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp57 = simd_not(r2000_2fff_tmp56);
                  r2000_2fff_tmp58 = simd_and(basis_bits.bit_5, r2000_2fff_tmp6);
                  r2000_2fff_tmp59 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp57), simd_andc(r2000_2fff_tmp58, basis_bits.bit_4));
                  byte_range_a7_ad = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp59);
                  r2000_2fff_tmp60 = simd_and(sequence_e2_86_adv, byte_range_a7_ad);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp60);
                  r2000_2fff_tmp61 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp62 = simd_or(basis_bits.bit_3, r2000_2fff_tmp42);
                  byte_range_af_bf = simd_and(r2000_2fff_tmp61, r2000_2fff_tmp62);
                  r2000_2fff_tmp63 = simd_and(sequence_e2_86_adv, byte_range_af_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp63);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp28);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  r2000_2fff_tmp64 = simd_and(basis_bits.bit_4, r2000_2fff_tmp56);
                  byte_range_80_8d = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp64);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(27), sequence_e2_87_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_87_adv, byte_range_80_8d);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp65);
                  byte_range_90_91 = simd_andc(r2000_2fff_tmp13, r800_4dff_tmp1);
                  r2000_2fff_tmp66 = simd_and(sequence_e2_87_adv, byte_range_90_91);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp6, r800_ffff_tmp1);
                  byte_93 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp67);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_87_adv, byte_93);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp68);
                  r2000_2fff_tmp69 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp70 = simd_not(r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_or(basis_bits.bit_4, r2000_2fff_tmp47);
                  r2000_2fff_tmp72 = simd_and(basis_bits.bit_3, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp70), simd_andc(r2000_2fff_tmp72, basis_bits.bit_2));
                  byte_range_95_b3 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp73);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_87_adv, byte_range_95_b3);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp74);
                  r2000_2fff_tmp75 = simd_andc(r2000_2fff_tmp19, r800_ffff_tmp3);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp75);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_range_80_87 = r2000_2fff_tmp5;
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(28), sequence_e2_8c_adv));
                  r2000_2fff_tmp76 = simd_and(sequence_e2_8c_adv, byte_range_80_87);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp76);
                  r2000_2fff_tmp77 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp78 = simd_or(basis_bits.bit_3, r2000_2fff_tmp19);
                  byte_range_8c_9f = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  r2000_2fff_tmp79 = simd_and(sequence_e2_8c_adv, byte_range_8c_9f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp79);
                  r2000_2fff_tmp80 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp81 = simd_not(r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp81), simd_andc(r2000_2fff_tmp45, basis_bits.bit_4));
                  byte_range_a2_a8 = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp82);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_8c_adv, byte_range_a2_a8);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp83);
                  r2000_2fff_tmp84 = simd_or(basis_bits.bit_5, r2000_2fff_tmp6);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_4, r2000_2fff_tmp84);
                  r2000_2fff_tmp86 = simd_or(basis_bits.bit_3, r2000_2fff_tmp85);
                  byte_range_ab_bf = simd_and(r2000_2fff_tmp61, r2000_2fff_tmp86);
                  r2000_2fff_tmp87 = simd_and(sequence_e2_8c_adv, byte_range_ab_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp87);
                  r2000_2fff_tmp88 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp25);
                  byte_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp88);
                  sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
                  r2000_2fff_tmp89 = simd_and(basis_bits.bit_3, r2000_2fff_tmp19);
                  r2000_2fff_tmp90 = simd_and(basis_bits.bit_2, r2000_2fff_tmp89);
                  byte_range_80_bb = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp90);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(29), sequence_e2_8d_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_8d_adv, byte_range_80_bb);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp91);
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp19);
                  byte_range_bd_bf = simd_and(r2000_2fff_tmp92, r800_ffff_tmp3);
                  r2000_2fff_tmp93 = simd_and(sequence_e2_8d_adv, byte_range_bd_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp93);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp32);
                  sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
                  r2000_2fff_tmp94 = simd_and(basis_bits.bit_3, r2000_2fff_tmp85);
                  byte_range_80_9a = simd_andc(r2000_2fff_tmp77, r2000_2fff_tmp94);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(30), sequence_e2_8e_adv));
                  r2000_2fff_tmp95 = simd_and(sequence_e2_8e_adv, byte_range_80_9a);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp95);
                  byte_range_b4_bf = simd_and(r2000_2fff_tmp35, r800_ffff_tmp1);
                  r2000_2fff_tmp96 = simd_and(sequence_e2_8e_adv, byte_range_b4_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp96);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  byte_range_80_9b = simd_andc(r2000_2fff_tmp77, r2000_2fff_tmp89);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(31), sequence_e2_8f_adv));
                  r2000_2fff_tmp97 = simd_and(sequence_e2_8f_adv, byte_range_80_9b);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp97);
                  r2000_2fff_tmp98 = simd_not(r2000_2fff_tmp85);
                  r2000_2fff_tmp99 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp98), simd_andc(r800_4dff_tmp1, basis_bits.bit_3));
                  byte_range_a2_ba = simd_and(r2000_2fff_tmp61, r2000_2fff_tmp99);
                  r2000_2fff_tmp100 = simd_and(sequence_e2_8f_adv, byte_range_a2_ba);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp100);
                  r2000_2fff_tmp101 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp101);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp102 = simd_or(basis_bits.bit_4, r2000_2fff_tmp58);
                  r2000_2fff_tmp103 = simd_or(basis_bits.bit_3, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_and(basis_bits.bit_2, r2000_2fff_tmp103);
                  byte_range_80_a6 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp104);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(32), sequence_e2_90_adv));
                  r2000_2fff_tmp105 = simd_and(sequence_e2_90_adv, byte_range_80_a6);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp105);
                  r2000_2fff_tmp106 = simd_andc(r2000_2fff_tmp25, r800_ffff_tmp1);
                  byte_91 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp106);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp85);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(33), sequence_e2_91_adv));
                  r2000_2fff_tmp107 = simd_and(sequence_e2_91_adv, byte_range_80_8a);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp107);
                  byte_92 = simd_and(r2000_2fff_tmp13, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp108 = simd_or(basis_bits.bit_2, r2000_2fff_tmp89);
                  byte_range_9c_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp108);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(34), sequence_e2_92_adv));
                  r2000_2fff_tmp109 = simd_and(sequence_e2_92_adv, byte_range_9c_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp109);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp110 = simd_and(basis_bits.bit_4, r2000_2fff_tmp45);
                  r2000_2fff_tmp111 = simd_or(basis_bits.bit_3, r2000_2fff_tmp110);
                  r2000_2fff_tmp112 = simd_and(basis_bits.bit_2, r2000_2fff_tmp111);
                  byte_range_80_a9 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp112);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(35), sequence_e2_93_adv));
                  r2000_2fff_tmp113 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp113);
                  byte_range_94_95 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp54);
                  byte_e2_byte_range_94_95 = simd_and(byte_e2_adv, byte_range_94_95);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_94_95, carryQ.get_carry_in(36), r2000_2fff_tmp114));
                  byte_e2_byte_range_94_95_sfx = simd_and(r2000_2fff_tmp114, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, byte_e2_byte_range_94_95_sfx);
                  r2000_2fff_tmp115 = simd_and(byte_range_80_bf, r2000_2fff_tmp12);
                  byte_96 = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp44);
                  sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
                  r2000_2fff_tmp116 = simd_and(basis_bits.bit_3, r2000_2fff_tmp102);
                  r2000_2fff_tmp117 = simd_and(basis_bits.bit_2, r2000_2fff_tmp116);
                  byte_range_80_b6 = simd_andc(byte_range_80_bf, r2000_2fff_tmp117);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(37), sequence_e2_96_adv));
                  r2000_2fff_tmp118 = simd_and(sequence_e2_96_adv, byte_range_80_b6);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp118);
                  r2000_2fff_tmp119 = simd_and(byte_range_80_bf, r2000_2fff_tmp34);
                  byte_range_b8_bf = simd_and(r2000_2fff_tmp119, basis_bits.bit_4);
                  r2000_2fff_tmp120 = simd_and(sequence_e2_96_adv, byte_range_b8_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp120);
                  byte_97 = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp28);
                  sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
                  r2000_2fff_tmp121 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp121, r2000_2fff_tmp101);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(38), sequence_e2_97_adv));
                  r2000_2fff_tmp122 = simd_and(sequence_e2_97_adv, byte_80);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp122);
                  r2000_2fff_tmp123 = simd_not(r800_ffff_tmp6);
                  r2000_2fff_tmp124 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r2000_2fff_tmp125 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp123), simd_andc(r2000_2fff_tmp124, basis_bits.bit_2));
                  byte_range_82_b7 = simd_and(byte_range_80_bf, r2000_2fff_tmp125);
                  r2000_2fff_tmp126 = simd_and(sequence_e2_97_adv, byte_range_82_b7);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp126);
                  r2000_2fff_tmp127 = simd_andc(r2000_2fff_tmp9, r800_ffff_tmp3);
                  byte_98 = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp127);
                  sequence_e2_98 = simd_and(byte_e2_adv, byte_98);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_98, carryQ.get_carry_in(39), sequence_e2_98_adv));
                  r2000_2fff_tmp128 = simd_and(sequence_e2_98_adv, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp128);
                  byte_99 = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp30);
                  sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
                  r2000_2fff_tmp129 = simd_and(basis_bits.bit_2, r2000_2fff_tmp62);
                  byte_range_80_ae = simd_andc(byte_range_80_bf, r2000_2fff_tmp129);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(40), sequence_e2_99_adv));
                  r2000_2fff_tmp130 = simd_and(sequence_e2_99_adv, byte_range_80_ae);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp130);
                  byte_range_b0_bf = r2000_2fff_tmp119;
                  r2000_2fff_tmp131 = simd_and(sequence_e2_99_adv, byte_range_b0_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp131);
                  r2000_2fff_tmp132 = simd_and(r2000_2fff_tmp115, basis_bits.bit_4);
                  r2000_2fff_tmp133 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp134 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp133), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_9a_9c = simd_and(r2000_2fff_tmp132, r2000_2fff_tmp134);
                  byte_e2_byte_range_9a_9c = simd_and(byte_e2_adv, byte_range_9a_9c);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_9a_9c, carryQ.get_carry_in(41), r2000_2fff_tmp135));
                  byte_e2_byte_range_9a_9c_sfx = simd_and(r2000_2fff_tmp135, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, byte_e2_byte_range_9a_9c_sfx);
                  byte_9d = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp88);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp136 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp137 = simd_and(basis_bits.bit_2, r2000_2fff_tmp136);
                  byte_range_80_a7 = simd_andc(byte_range_80_bf, r2000_2fff_tmp137);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(42), sequence_e2_9d_adv));
                  r2000_2fff_tmp138 = simd_and(sequence_e2_9d_adv, byte_range_80_a7);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp138);
                  byte_9e = simd_and(r2000_2fff_tmp115, r2000_2fff_tmp32);
                  sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
                  r2000_2fff_tmp139 = simd_or(basis_bits.bit_2, r2000_2fff_tmp69);
                  byte_range_94_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp139);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(43), sequence_e2_9e_adv));
                  r2000_2fff_tmp140 = simd_and(sequence_e2_9e_adv, byte_range_94_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp140);
                  r2000_2fff_tmp141 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r2000_2fff_tmp141, r800_ffff_tmp1);
                  byte_e2_byte_range_a0_a3 = simd_and(byte_e2_adv, byte_range_a0_a3);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a0_a3, carryQ.get_carry_in(44), r2000_2fff_tmp142));
                  byte_e2_byte_range_a0_a3_sfx = simd_and(r2000_2fff_tmp142, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, byte_e2_byte_range_a0_a3_sfx);
                  byte_ac = simd_and(r2000_2fff_tmp141, r2000_2fff_tmp75);
                  sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
                  byte_range_80_af = simd_andc(byte_range_80_bf, r2000_2fff_tmp34);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(45), sequence_e2_ac_adv));
                  r2000_2fff_tmp143 = simd_and(sequence_e2_ac_adv, byte_range_80_af);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp143);
                  byte_ad = simd_and(r2000_2fff_tmp141, r2000_2fff_tmp88);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp144 = simd_and(r2000_2fff_tmp121, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r2000_2fff_tmp144, r2000_2fff_tmp52);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(46), sequence_e2_ad_adv));
                  r2000_2fff_tmp145 = simd_and(sequence_e2_ad_adv, byte_range_85_86);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp145);
                  r2000_2fff_tmp146 = simd_and(r2000_2fff_tmp19, r800_ffff_tmp3);
                  r2000_2fff_tmp147 = simd_or(basis_bits.bit_3, r2000_2fff_tmp146);
                  r2000_2fff_tmp148 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp70), simd_andc(r2000_2fff_tmp147, basis_bits.bit_2));
                  byte_range_8d_b3 = simd_and(byte_range_80_bf, r2000_2fff_tmp148);
                  r2000_2fff_tmp149 = simd_and(sequence_e2_ad_adv, byte_range_8d_b3);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp149);
                  r2000_2fff_tmp150 = simd_or(basis_bits.bit_4, r2000_2fff_tmp56);
                  byte_range_b6_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp150);
                  r2000_2fff_tmp151 = simd_and(sequence_e2_ad_adv, byte_range_b6_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp151);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp152 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp153 = simd_and(basis_bits.bit_3, r2000_2fff_tmp150);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp152, r2000_2fff_tmp153);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(47), sequence_e2_ae_adv));
                  r2000_2fff_tmp154 = simd_and(sequence_e2_ae_adv, byte_range_80_95);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp154);
                  r2000_2fff_tmp155 = simd_and(basis_bits.bit_3, r2000_2fff_tmp110);
                  r2000_2fff_tmp156 = simd_not(r2000_2fff_tmp155);
                  r2000_2fff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp156), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  byte_range_98_b9 = simd_and(byte_range_80_bf, r2000_2fff_tmp157);
                  r2000_2fff_tmp158 = simd_and(sequence_e2_ae_adv, byte_range_98_b9);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp158);
                  r2000_2fff_tmp159 = simd_and(byte_range_b0_bf, r2000_2fff_tmp19);
                  r2000_2fff_tmp160 = simd_and(sequence_e2_ae_adv, byte_range_bd_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp160);
                  byte_af = simd_and(r2000_2fff_tmp141, r2000_2fff_tmp42);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp161 = simd_and(basis_bits.bit_4, r2000_2fff_tmp80);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp121, r2000_2fff_tmp161);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(48), sequence_e2_af_adv));
                  r2000_2fff_tmp162 = simd_and(sequence_e2_af_adv, byte_range_80_88);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp162);
                  r2000_2fff_tmp163 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp164 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp163), simd_andc(r2000_2fff_tmp110, basis_bits.bit_3));
                  byte_range_8a_91 = simd_and(r2000_2fff_tmp152, r2000_2fff_tmp164);
                  r2000_2fff_tmp165 = simd_and(sequence_e2_af_adv, byte_range_8a_91);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp165);
                  byte_b3 = simd_and(byte_range_b0_bf, r2000_2fff_tmp67);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp166 = simd_not(r2000_2fff_tmp84);
                  r2000_2fff_tmp167 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp166), simd_andc(r2000_2fff_tmp47, basis_bits.bit_4));
                  byte_range_a5_aa = simd_and(r2000_2fff_tmp141, r2000_2fff_tmp167);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(49), sequence_e2_b3_adv));
                  r2000_2fff_tmp168 = simd_and(sequence_e2_b3_adv, byte_range_a5_aa);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp168);
                  byte_ba = simd_and(byte_range_b0_bf, r2000_2fff_tmp38);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  byte_range_80_99 = simd_andc(r2000_2fff_tmp152, r2000_2fff_tmp155);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(50), sequence_e2_ba_adv));
                  r2000_2fff_tmp169 = simd_and(sequence_e2_ba_adv, byte_range_80_99);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp169);
                  r2000_2fff_tmp170 = simd_or(basis_bits.bit_2, r2000_2fff_tmp94);
                  byte_range_9b_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp170);
                  r2000_2fff_tmp171 = simd_and(sequence_e2_ba_adv, byte_range_9b_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp171);
                  r2000_2fff_tmp172 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp6);
                  byte_bb = simd_and(byte_range_b0_bf, r2000_2fff_tmp172);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  r2000_2fff_tmp173 = simd_and(basis_bits.bit_2, r2000_2fff_tmp69);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r2000_2fff_tmp173);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(51), sequence_e2_bb_adv));
                  r2000_2fff_tmp174 = simd_and(sequence_e2_bb_adv, byte_range_80_b3);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp174);
                  byte_range_bc_be = simd_andc(r2000_2fff_tmp159, r2000_2fff_tmp6);
                  byte_e2_byte_range_bc_be = simd_and(byte_e2_adv, byte_range_bc_be);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_bc_be, carryQ.get_carry_in(52), r2000_2fff_tmp175));
                  byte_e2_byte_range_bc_be_sfx = simd_and(r2000_2fff_tmp175, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, byte_e2_byte_range_bc_be_sfx);
                  byte_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp42);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(53), sequence_e2_bf_adv));
                  r2000_2fff_tmp176 = simd_and(sequence_e2_bf_adv, byte_range_80_95);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp176);
                  byte_range_b0_bb = simd_andc(byte_range_b0_bf, r2000_2fff_tmp19);
                  r2000_2fff_tmp177 = simd_and(sequence_e2_bf_adv, byte_range_b0_bb);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r2000_2fff_tmp177);
                }
                else {
                  carryQ.CarryDequeueEnqueue(23, 31);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(54, 10))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(54), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(55), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_84);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp5);
                  r3000_4dff_tmp6 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp6);
                  byte_range_92_93 = simd_and(r3000_4dff_tmp7, r800_4dff_tmp2);
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_92_93);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r3000_4dff_tmp9, r3000_4dff_tmp3);
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, byte_a0);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  r3000_4dff_tmp14 = simd_and(sequence_e3_80_adv, byte_range_b6_b7);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp14);
                  r3000_4dff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp16 = simd_and(r3000_4dff_tmp15, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_and(sequence_e3_80_adv, byte_range_be_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp17);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp18);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  byte_range_90_91 = simd_andc(r3000_4dff_tmp7, r800_4dff_tmp1);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(56), sequence_e3_86_adv));
                  r3000_4dff_tmp19 = simd_and(sequence_e3_86_adv, byte_range_90_91);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp19);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp21 = simd_or(basis_bits.bit_4, r3000_4dff_tmp20);
                  byte_range_96_9f = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_and(sequence_e3_86_adv, byte_range_96_9f);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp23);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r3000_4dff_tmp25 = simd_and(basis_bits.bit_2, r3000_4dff_tmp24);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp25);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(57), sequence_e3_87_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_87_adv, byte_range_80_a3);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp28 = simd_andc(r3000_4dff_tmp27, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp28);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  r3000_4dff_tmp29 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp30 = simd_and(r3000_4dff_tmp15, r2000_4dff_tmp3);
                  r3000_4dff_tmp31 = simd_and(basis_bits.bit_3, r3000_4dff_tmp30);
                  byte_range_80_9e = simd_andc(r3000_4dff_tmp29, r3000_4dff_tmp31);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(58), sequence_e3_88_adv));
                  r3000_4dff_tmp32 = simd_and(sequence_e3_88_adv, byte_range_80_9e);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp32);
                  r3000_4dff_tmp33 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp34 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp35 = simd_and(basis_bits.bit_4, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_or(basis_bits.bit_3, r3000_4dff_tmp35);
                  byte_range_aa_bf = simd_and(r3000_4dff_tmp33, r3000_4dff_tmp36);
                  r3000_4dff_tmp37 = simd_and(sequence_e3_88_adv, byte_range_aa_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp37);
                  r3000_4dff_tmp38 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp39 = simd_and(r3000_4dff_tmp27, r3000_4dff_tmp38);
                  byte_89 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp39);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  byte_range_80_87 = simd_andc(r3000_4dff_tmp2, basis_bits.bit_4);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(59), sequence_e3_89_adv));
                  r3000_4dff_tmp40 = simd_and(sequence_e3_89_adv, byte_range_80_87);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp40);
                  byte_90 = simd_andc(r3000_4dff_tmp7, r3000_4dff_tmp3);
                  r3000_4dff_tmp41 = simd_and(sequence_e3_89_adv, byte_90);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp41);
                  byte_range_a0_bf = r3000_4dff_tmp33;
                  r3000_4dff_tmp42 = simd_and(sequence_e3_89_adv, byte_range_a0_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp42);
                  r3000_4dff_tmp43 = simd_and(r3000_4dff_tmp27, r2000_4dff_tmp1);
                  byte_8a = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp43);
                  sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
                  r3000_4dff_tmp44 = simd_and(basis_bits.bit_3, r3000_4dff_tmp3);
                  r3000_4dff_tmp45 = simd_not(r3000_4dff_tmp44);
                  r3000_4dff_tmp46 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp45), simd_andc(r3000_4dff_tmp36, basis_bits.bit_2));
                  byte_range_8a_b0 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp46);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(60), sequence_e3_8a_adv));
                  r3000_4dff_tmp47 = simd_and(sequence_e3_8a_adv, byte_range_8a_b0);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp47);
                  r3000_4dff_tmp48 = simd_and(r3000_4dff_tmp27, r2000_4dff_tmp3);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp48);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  r3000_4dff_tmp49 = simd_and(basis_bits.bit_2, r3000_4dff_tmp31);
                  byte_range_80_be = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp49);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(61), sequence_e3_8b_adv));
                  r3000_4dff_tmp50 = simd_and(sequence_e3_8b_adv, byte_range_80_be);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp50);
                  byte_range_8c_8f = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp15);
                  byte_e3_byte_range_8c_8f = simd_and(byte_e3_adv, byte_range_8c_8f);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8c_8f, carryQ.get_carry_in(62), r3000_4dff_tmp51));
                  byte_e3_byte_range_8c_8f_sfx = simd_and(r3000_4dff_tmp51, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, byte_e3_byte_range_8c_8f_sfx);
                  r3000_4dff_tmp52 = simd_and(byte_range_80_bf, r3000_4dff_tmp11);
                  byte_b7 = simd_and(r3000_4dff_tmp52, r3000_4dff_tmp23);
                  sequence_e4_b7 = simd_and(r800_ffff_tmp8, byte_b7);
                  byte_e4_adv = r800_ffff_tmp8;
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(63), sequence_e4_b7_adv));
                  r3000_4dff_tmp53 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
                  struct_gc_So.cc = simd_or(struct_gc_So.cc, r3000_4dff_tmp53);
                }
                else {
                  carryQ.CarryDequeueEnqueue(54, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 41);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 56);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(64, 8))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(64), ra000_ffff_tmp7));
              sequence_ea_92 = simd_and(ra000_ffff_tmp7, byte_92);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r800_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(65), sequence_ea_92_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp11);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp12 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp13 = simd_andc(ra000_ffff_tmp12, basis_bits.bit_4);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_5, ra000_ffff_tmp10);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(66), sequence_ea_93_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_93_adv, byte_range_80_86);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp17 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp17);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_a8_ab = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp1);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(67), sequence_ea_a0_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_a0_adv, byte_range_a8_ab);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
              byte_range_b6_b7 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(sequence_ea_a0_adv, byte_range_b6_b7);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp23);
              byte_b9 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(sequence_ea_a0_adv, byte_b9);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp25);
              byte_a9 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp24);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp26 = simd_not(r800_ffff_tmp12);
              ra000_ffff_tmp27 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp26), simd_andc(ra000_ffff_tmp14, basis_bits.bit_4));
              byte_range_b7_b9 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp27);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(68), sequence_ea_a9_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_a9_adv, byte_range_b7_b9);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp30 = simd_and(ra000_ffff_tmp29, ra000_ffff_tmp10);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp30);
              ra000_ffff_tmp31 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_b7 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp31);
              carryQ.cq[69] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(69), ra000_ffff_tmp32));
              sequence_ef_b7 = simd_and(ra000_ffff_tmp32, byte_b7);
              byte_ef_adv = ra000_ffff_tmp32;
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp29, ra000_ffff_tmp23);
              byte_bd = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp33);
              carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(70), sequence_ef_b7_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ef_b7_adv, byte_bd);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp34);
              byte_bf = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp30);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_a4 = simd_and(ra000_ffff_tmp16, r800_ffff_tmp4);
              carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(71), sequence_ef_bf_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ef_bf_adv, byte_a4);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(sequence_ef_bf_adv, byte_a8);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp29);
              ra000_ffff_tmp39 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_ad_ae = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_and(sequence_ef_bf_adv, byte_range_ad_ae);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp40);
              ra000_ffff_tmp41 = simd_andc(ra000_ffff_tmp29, basis_bits.bit_6);
              byte_range_bc_bd = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp41);
              ra000_ffff_tmp42 = simd_and(sequence_ef_bf_adv, byte_range_bc_bd);
              struct_gc_So.cc = simd_or(struct_gc_So.cc, ra000_ffff_tmp42);
            }
            else {
              carryQ.CarryDequeueEnqueue(64, 8);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(7, 65);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(72, 55))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(72), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(73), r10000_10ffff_tmp12));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp12, byte_84);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp15);
            byte_range_b7_bf = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp16);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(74), sequence_f0_90_84_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_84_adv, byte_range_b7_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp18);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp19);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp13, basis_bits.bit_4);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp21);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(75), sequence_f0_90_85_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_85_adv, byte_range_b9_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp23);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp24);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp25);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp26);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(76), sequence_f0_90_86_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_86_adv, byte_range_80_89);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_86_adv, byte_8c);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp30);
            byte_range_90_9b = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp28);
            r10000_10ffff_tmp31 = simd_and(sequence_f0_90_86_adv, byte_range_90_9b);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp32, r10000_10ffff_tmp3);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_86_adv, byte_a0);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp14);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp34);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp2);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_not(r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp37), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_bc = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp38);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(77), sequence_f0_90_87_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp18, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp40);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            r10000_10ffff_tmp41 = simd_not(r10000_10ffff_tmp21);
            r10000_10ffff_tmp42 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp41), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp42);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(78), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_90_a1_adv, byte_range_b7_b8);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp14);
            byte_ab = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp45);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp46 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp46);
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(79), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_90_ab_adv, byte_88);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp47);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp24);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_ac = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp29);
            carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(80), r10000_10ffff_tmp48));
            sequence_f0_96_ac = simd_and(r10000_10ffff_tmp48, byte_ac);
            sequence_f0_96_adv = r10000_10ffff_tmp48;
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp28);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(81), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_96_ac_adv, byte_range_bc_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp18);
            byte_ad = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp50);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(82), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_96_ad_adv, byte_85);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp51);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp45);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp1);
            byte_b2 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp52);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(83), r10000_10ffff_tmp53));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp53, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp53;
            byte_9c = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp29);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(84), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_9b_b2_adv, byte_9c);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp54);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp50);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp55 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp14);
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(85), r10000_10ffff_tmp56));
            sequence_f0_9d_byte_range_80_82 = simd_and(r10000_10ffff_tmp56, byte_range_80_82);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(86), r10000_10ffff_tmp57));
            sequence_f0_9d_byte_range_80_82_sfx = simd_and(r10000_10ffff_tmp57, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, sequence_f0_9d_byte_range_80_82_sfx);
            r10000_10ffff_tmp58 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp59 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp59);
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp56, byte_83);
            r10000_10ffff_tmp60 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            sequence_f0_9d_adv = r10000_10ffff_tmp56;
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp61);
            r10000_10ffff_tmp63 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp63);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp64);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(87), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_9d_83_adv, byte_range_80_b5);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp65);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp66 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp67 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp66);
            byte_range_80_a6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp67);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(88), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_9d_84_adv, byte_range_80_a6);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp70 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            r10000_10ffff_tmp71 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp70);
            byte_range_a9_bf = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(sequence_f0_9d_84_adv, byte_range_a9_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp72);
            sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
            r10000_10ffff_tmp73 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp74 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp75);
            byte_range_80_a4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp76);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(89), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9d_85_adv, byte_range_80_a4);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp78, basis_bits.bit_4);
            r10000_10ffff_tmp80 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp80), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_aa_ac = simd_and(r10000_10ffff_tmp79, r10000_10ffff_tmp81);
            r10000_10ffff_tmp82 = simd_and(sequence_f0_9d_85_adv, byte_range_aa_ac);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp82);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp83 = simd_andc(r10000_10ffff_tmp58, basis_bits.bit_4);
            r10000_10ffff_tmp84 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp80), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_5));
            byte_range_83_84 = simd_and(r10000_10ffff_tmp83, r10000_10ffff_tmp84);
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(90), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp85 = simd_and(sequence_f0_9d_86_adv, byte_range_83_84);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp26);
            r10000_10ffff_tmp87 = simd_not(r10000_10ffff_tmp86);
            r10000_10ffff_tmp88 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp89 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp87), simd_andc(r10000_10ffff_tmp88, basis_bits.bit_2));
            byte_range_8c_a9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp89);
            r10000_10ffff_tmp90 = simd_and(sequence_f0_9d_86_adv, byte_range_8c_a9);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp28, basis_bits.bit_6);
            r10000_10ffff_tmp92 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp91);
            byte_range_ae_bf = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp92);
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_86_adv, byte_range_ae_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp93);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            r10000_10ffff_tmp94 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp95 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp91);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp95);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(91), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_9d_87_adv, byte_range_80_9d);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp96);
            sequence_f0_9d_88 = simd_and(sequence_f0_9d_adv, byte_88);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(92), sequence_f0_9d_88_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_9d_88_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp18);
            byte_89 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp98);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp99 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp99);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(93), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_89_adv, byte_range_80_81);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp100);
            r10000_10ffff_tmp101 = simd_and(sequence_f0_9d_89_adv, byte_85);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp101);
            sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(94), sequence_f0_9d_8c_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_9d_8c_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp102);
            byte_8d = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp50);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            r10000_10ffff_tmp103 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp103);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(95), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp104 = simd_and(sequence_f0_9d_8d_adv, byte_range_80_96);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp14);
            byte_9f = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp105);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            byte_80 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp3);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(96), r10000_10ffff_tmp106));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp106, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp106;
            r10000_10ffff_tmp107 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp88);
            byte_range_80_ab = simd_andc(byte_range_80_bf, r10000_10ffff_tmp107);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(97), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp108 = simd_and(sequence_f0_9f_80_adv, byte_range_80_ab);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp108);
            byte_range_b0_bf = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9f_80_adv, byte_range_b0_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp109);
            byte_81 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp40);
            sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(98), sequence_f0_9f_81_adv));
            r10000_10ffff_tmp110 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp110);
            byte_82 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp52);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            byte_range_80_93 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp111);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(99), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp112 = simd_and(sequence_f0_9f_82_adv, byte_range_80_93);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp112);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp15);
            byte_range_a0_ae = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp113);
            r10000_10ffff_tmp114 = simd_and(sequence_f0_9f_82_adv, byte_range_a0_ae);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp114);
            r10000_10ffff_tmp115 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp21);
            byte_range_b1_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp115);
            r10000_10ffff_tmp116 = simd_and(sequence_f0_9f_82_adv, byte_range_b1_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp116);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            byte_range_81_8f = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp115);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(100), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp117 = simd_and(sequence_f0_9f_83_adv, byte_range_81_8f);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp117);
            r10000_10ffff_tmp118 = simd_not(r10000_10ffff_tmp63);
            r10000_10ffff_tmp119 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp120 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp118), simd_andc(r10000_10ffff_tmp119, basis_bits.bit_2));
            byte_range_91_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp120);
            r10000_10ffff_tmp121 = simd_and(sequence_f0_9f_83_adv, byte_range_91_b5);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp121);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            r10000_10ffff_tmp122 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp105);
            r10000_10ffff_tmp123 = simd_not(r10000_10ffff_tmp122);
            r10000_10ffff_tmp124 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp123), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ae = simd_and(byte_range_80_bf, r10000_10ffff_tmp124);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(101), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp125 = simd_and(sequence_f0_9f_84_adv, byte_range_90_ae);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp126);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(102), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_9f_85_adv, byte_range_80_ab);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp127);
            r10000_10ffff_tmp128 = simd_and(sequence_f0_9f_85_adv, byte_range_b0_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp128);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            r10000_10ffff_tmp129 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp14);
            r10000_10ffff_tmp130 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp129);
            r10000_10ffff_tmp131 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp130);
            byte_range_80_9a = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp131);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(103), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp132 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp132);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            r10000_10ffff_tmp133 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp62);
            byte_range_a6_bf = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp133);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(104), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp134);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            r10000_10ffff_tmp135 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp1);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(105), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_9f_88_adv, byte_range_80_82);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp136);
            r10000_10ffff_tmp137 = simd_not(r10000_10ffff_tmp131);
            r10000_10ffff_tmp138 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp137), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ba = simd_and(byte_range_80_bf, r10000_10ffff_tmp138);
            r10000_10ffff_tmp139 = simd_and(sequence_f0_9f_88_adv, byte_range_90_ba);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp139);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp70);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(106), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp140 = simd_and(sequence_f0_9f_89_adv, byte_range_80_88);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp140);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp60, r10000_10ffff_tmp99);
            r10000_10ffff_tmp141 = simd_and(sequence_f0_9f_89_adv, byte_range_90_91);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp141);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            r10000_10ffff_tmp142 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp143 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp142);
            byte_range_80_ac = simd_andc(byte_range_80_bf, r10000_10ffff_tmp143);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(107), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_9f_8c_adv, byte_range_80_ac);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp144);
            r10000_10ffff_tmp145 = simd_and(sequence_f0_9f_8c_adv, byte_range_b0_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp145);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            r10000_10ffff_tmp146 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp95);
            byte_range_80_bd = simd_andc(byte_range_80_bf, r10000_10ffff_tmp146);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(108), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bd);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp23);
            byte_8e = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp148);
            sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(109), sequence_f0_9f_8e_adv));
            r10000_10ffff_tmp149 = simd_and(sequence_f0_9f_8e_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp149);
            byte_8f = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp105);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp113);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(110), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_9f_8f_adv, byte_range_80_8e);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp150);
            r10000_10ffff_tmp151 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp152 = simd_not(r10000_10ffff_tmp151);
            r10000_10ffff_tmp153 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp152), simd_andc(r10000_10ffff_tmp111, basis_bits.bit_2));
            byte_range_94_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp153);
            r10000_10ffff_tmp154 = simd_and(sequence_f0_9f_8f_adv, byte_range_94_b7);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp154);
            r10000_10ffff_tmp155 = simd_andc(r10000_10ffff_tmp60, r10000_10ffff_tmp1);
            byte_range_90_92 = simd_andc(r10000_10ffff_tmp155, r10000_10ffff_tmp14);
            sequence_f0_9f_byte_range_90_92 = simd_and(sequence_f0_9f_adv, byte_range_90_92);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_90_92, carryQ.get_carry_in(111), r10000_10ffff_tmp156));
            sequence_f0_9f_byte_range_90_92_sfx = simd_and(r10000_10ffff_tmp156, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, sequence_f0_9f_byte_range_90_92_sfx);
            byte_93 = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp59);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            r10000_10ffff_tmp157 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp105);
            r10000_10ffff_tmp158 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp157);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp158);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(112), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp159 = simd_and(sequence_f0_9f_93_adv, byte_range_80_be);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp159);
            byte_94 = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp11);
            sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(113), sequence_f0_9f_94_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_9f_94_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp160);
            byte_95 = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp19);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            byte_range_80_8a = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp130);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(114), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_9f_95_adv, byte_range_80_8a);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp161);
            r10000_10ffff_tmp162 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp26);
            r10000_10ffff_tmp163 = simd_not(r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp163), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp164);
            r10000_10ffff_tmp165 = simd_and(sequence_f0_9f_95_adv, byte_range_90_b9);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp165);
            r10000_10ffff_tmp166 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp166, r10000_10ffff_tmp129);
            r10000_10ffff_tmp167 = simd_and(sequence_f0_9f_95_adv, byte_range_bb_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp167);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            r10000_10ffff_tmp168 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp169 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp168);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp169);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(115), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp170 = simd_and(sequence_f0_9f_96_adv, byte_range_80_a3);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp170);
            byte_range_a5_bf = simd_and(r10000_10ffff_tmp69, r10000_10ffff_tmp75);
            r10000_10ffff_tmp171 = simd_and(sequence_f0_9f_96_adv, byte_range_a5_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp171);
            byte_range_97_98 = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp42);
            sequence_f0_9f_byte_range_97_98 = simd_and(sequence_f0_9f_adv, byte_range_97_98);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_97_98, carryQ.get_carry_in(116), r10000_10ffff_tmp172));
            sequence_f0_9f_byte_range_97_98_sfx = simd_and(r10000_10ffff_tmp172, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, sequence_f0_9f_byte_range_97_98_sfx);
            byte_99 = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp98);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(117), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp173 = simd_and(sequence_f0_9f_99_adv, byte_range_80_82);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp173);
            r10000_10ffff_tmp174 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp75);
            byte_range_85_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp174);
            r10000_10ffff_tmp175 = simd_and(sequence_f0_9f_99_adv, byte_range_85_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp175);
            r10000_10ffff_tmp176 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp23);
            byte_9a = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp176);
            sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(118), sequence_f0_9f_9a_adv));
            r10000_10ffff_tmp177 = simd_and(sequence_f0_9f_9a_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp177);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_80_8f = r10000_10ffff_tmp58;
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(119), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_9f_9b_adv, byte_range_80_8f);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp178);
            r10000_10ffff_tmp179 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp73);
            byte_range_a0_ac = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp179);
            r10000_10ffff_tmp180 = simd_and(sequence_f0_9f_9b_adv, byte_range_a0_ac);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp180);
            byte_range_b0_b3 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp1);
            r10000_10ffff_tmp181 = simd_and(sequence_f0_9f_9b_adv, byte_range_b0_b3);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp181);
            sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(120), sequence_f0_9f_9c_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_9f_9c_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp182);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            r10000_10ffff_tmp183 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp111);
            byte_range_80_b3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp183);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(121), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp184 = simd_and(sequence_f0_9f_9d_adv, byte_range_80_b3);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp184);
            byte_9e = simd_and(r10000_10ffff_tmp60, r10000_10ffff_tmp148);
            sequence_f0_9f_9e = simd_and(sequence_f0_9f_adv, byte_9e);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9e, carryQ.get_carry_in(122), sequence_f0_9f_9e_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_9f_9e_adv, byte_range_80_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp185);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            r10000_10ffff_tmp186 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp74);
            byte_range_80_94 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp186);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(123), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp187 = simd_and(sequence_f0_9f_9f_adv, byte_range_80_94);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp187);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            byte_range_80_8b = simd_andc(byte_range_80_8f, r10000_10ffff_tmp28);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(124), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp188 = simd_and(sequence_f0_9f_a0_adv, byte_range_80_8b);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp188);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp189 = simd_and(sequence_f0_9f_a0_adv, byte_range_90_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp189);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(125), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp190 = simd_and(sequence_f0_9f_a1_adv, byte_range_80_87);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp190);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp60, r10000_10ffff_tmp26);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_9f_a1_adv, byte_range_90_99);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp191);
            byte_range_a0_bf = r10000_10ffff_tmp69;
            r10000_10ffff_tmp192 = simd_and(sequence_f0_9f_a1_adv, byte_range_a0_bf);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp192);
            byte_a2 = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp52);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(126), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp193 = simd_and(sequence_f0_9f_a2_adv, byte_range_80_87);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp193);
            r10000_10ffff_tmp194 = simd_not(r10000_10ffff_tmp92);
            r10000_10ffff_tmp195 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp194), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp195);
            r10000_10ffff_tmp196 = simd_and(sequence_f0_9f_a2_adv, byte_range_90_ad);
            struct_gc_So.cc = simd_or(struct_gc_So.cc, r10000_10ffff_tmp196);
          }
          else {
            carryQ.CarryDequeueEnqueue(72, 55);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 127);
        }
        carryQ.CarryQ_Adjust(127);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<127, 0> carryQ;
  };

  struct Property_gc_Sc {
  Property_gc_Sc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Sc & struct_gc_Sc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_24, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, byte_range_a2_a5, byte_c2_adv;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock byte_range_80_8f, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock byte_d4, r500_58f_tmp1, byte_range_b0_bf, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, r500_58f_tmp4, r500_58f_tmp5, byte_d5, r500_58f_tmp6;
		BitBlock r500_58f_tmp7, r530_58f_tmp1, r530_58f_tmp2, r530_58f_tmp3, byte_8f;
		BitBlock byte_d6_adv, r530_58f_tmp4, r80_7ff_tmp13, byte_range_d8_db;
		BitBlock r600_6ff_tmp1, byte_d8, r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock byte_8b, byte_d8_adv, r600_6ff_tmp5, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, byte_e4, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_range_80_b7, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a7;
		BitBlock r800_fff_tmp4, sequence_e0_a7, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, byte_range_b2_b3, sequence_e0_a7_adv;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10, byte_bb, r800_fff_tmp11;
		BitBlock byte_ab, sequence_e0_ab, r800_fff_tmp12, r800_fff_tmp13, byte_b1;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock byte_af, sequence_e0_af, r800_fff_tmp17, byte_b9, sequence_e0_af_adv;
		BitBlock r800_fff_tmp18, r800_fff_tmp19, byte_b8, sequence_e0_b8, byte_bf;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp20, r800_1fff_tmp2, r800_1fff_tmp3;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9f, r1000_1fff_tmp6;
		BitBlock sequence_e1_9f, byte_e1_adv, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_9b, sequence_e1_9f_adv, r1000_1fff_tmp9, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_82, r2000_2fff_tmp3;
		BitBlock sequence_e2_82, byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_range_a0_bd;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp8, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_a0, ra000_ffff_tmp6;
		BitBlock sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, sequence_ea_a0_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13, byte_ef;
		BitBlock ra000_ffff_tmp14, byte_b7, ra000_ffff_tmp15, sequence_ef_b7;
		BitBlock byte_ef_adv, ra000_ffff_tmp16, byte_bc, sequence_ef_b7_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19, sequence_ef_b9;
		BitBlock byte_a9, sequence_ef_b9_adv, ra000_ffff_tmp20, sequence_ef_bc;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_84, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp23, sequence_ef_bf, ra000_ffff_tmp24, byte_range_a0_a1;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, byte_range_a5_a6, ra000_ffff_tmp28;




        struct_gc_Sc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        byte_24 = simd_and(tmp3, tmp6);
        struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, byte_24);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 21))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp2);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_a2_a5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp10 = simd_and(byte_c2_adv, byte_range_a2_a5);
            struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp12 = simd_and(byte_range_c0_ff, r80_7ff_tmp11);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp12, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(1, 2))) {
              r400_5ff_tmp1 = simd_andc(tmp4, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp12, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(tmp4, r80_7ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp12, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(1), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(2, 1))) {
                byte_d4 = simd_and(r80_7ff_tmp12, tmp6);
                r500_58f_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r80_7ff_tmp6, r500_58f_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(2), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp5 = simd_and(tmp4, r500_58f_tmp4);
                byte_d5 = simd_and(r80_7ff_tmp12, r500_58f_tmp5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp7 = simd_or(r500_58f_tmp6, r400_5ff_tmp4);
                if (bitblock::any(r500_58f_tmp7)) {
                  r530_58f_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r530_58f_tmp3 = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  byte_8f = simd_and(byte_range_80_8f, r530_58f_tmp3);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp4 = simd_and(byte_d6_adv, byte_8f);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r530_58f_tmp4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp12, r80_7ff_tmp13);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(3, 1))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp13, tmp5);
              byte_d8 = simd_and(r80_7ff_tmp12, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp13, r600_6ff_tmp3);
              byte_8b = simd_and(r600_6ff_tmp2, r600_6ff_tmp4);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(3), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_8b);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r600_6ff_tmp5);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 17))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            byte_e4 = simd_and(byte_range_e0_ef, tmp6);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp3 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_2, r800_ffff_tmp3);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp4);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(4), r800_ffff_tmp5));
            r800_ffff_tmp6 = simd_and(r800_ffff_tmp5, byte_range_80_b7);
            r800_ffff_tmp7 = simd_or(byte_range_e0_e3, r800_ffff_tmp6);
            if ((bitblock::any(r800_ffff_tmp7) || carryQ.CarryTest(5, 9))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(5, 7))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, tmp5);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(5, 5))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp2, tmp2);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_and(tmp4, r800_fff_tmp2);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(5), r800_fff_tmp4));
                  sequence_e0_a7 = simd_and(r800_fff_tmp4, byte_a7);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp2, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp6, r800_fff_tmp7);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(6), sequence_e0_a7_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a7_adv, byte_range_b2_b3);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r800_fff_tmp8);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp10 = simd_and(r800_fff_tmp9, r800_fff_tmp2);
                  byte_bb = simd_and(r800_fff_tmp6, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(sequence_e0_a7_adv, byte_bb);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r800_fff_tmp11);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp13 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp6, r800_fff_tmp13);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(7), sequence_e0_ab_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_ab_adv, byte_b1);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp15, r800_fff_tmp2);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp17 = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  byte_b9 = simd_and(r800_fff_tmp6, r800_fff_tmp17);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(8), sequence_e0_af_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_af_adv, byte_b9);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_andc(r800_fff_tmp9, tmp5);
                  byte_b8 = simd_and(r800_fff_tmp6, r800_fff_tmp19);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  byte_bf = simd_and(r800_fff_tmp6, r800_fff_tmp16);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(9), sequence_e0_b8_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_b8_adv, byte_bf);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r800_fff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 5);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(10, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(10), r1000_1fff_tmp6));
                  sequence_e1_9f = simd_and(r1000_1fff_tmp6, byte_9f);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp4);
                  byte_9b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(11), sequence_e1_9f_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_9f_adv, byte_9b);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(10, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 7);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp6);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(12, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(12, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp2, r2000_2fff_tmp1);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r2000_2fff_tmp3));
                  sequence_e2_82 = simd_and(r2000_2fff_tmp3, byte_82);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, basis_bits.bit_2);
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_and(r2000_2fff_tmp5, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_3, r2000_2fff_tmp6);
                  byte_range_a0_bd = simd_andc(r2000_2fff_tmp4, r2000_2fff_tmp7);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(13), sequence_e2_82_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_82_adv, byte_range_a0_bd);
                  struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 9);
            }
            r800_ffff_tmp8 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp8, r800_ffff_tmp9);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(14, 7))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp2, tmp2);
              ra000_ffff_tmp5 = simd_or(r800_ffff_tmp1, tmp5);
              byte_a0 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(14), ra000_ffff_tmp6));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp6, byte_a0);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp1, tmp5);
              byte_b8 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(15), sequence_ea_a0_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a0_adv, byte_b8);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(tmp4, ra000_ffff_tmp12);
              byte_b7 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp14);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), ra000_ffff_tmp15));
              sequence_ef_b7 = simd_and(ra000_ffff_tmp15, byte_b7);
              byte_ef_adv = ra000_ffff_tmp15;
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp11, tmp5);
              byte_bc = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp16);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(17), sequence_ef_b7_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ef_b7_adv, byte_bc);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp18);
              byte_b9 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp19);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_a9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp19);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(18), sequence_ef_b9_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ef_b9_adv, byte_a9);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp20);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp22 = simd_andc(r800_ffff_tmp2, ra000_ffff_tmp21);
              byte_84 = simd_and(ra000_ffff_tmp22, tmp6);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(19), sequence_ef_bc_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ef_bc_adv, byte_84);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp23);
              byte_bf = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp13);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp24 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_a0_a1 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp24);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(20), sequence_ef_bf_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ef_bf_adv, byte_range_a0_a1);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp25);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp4, tmp4);
              ra000_ffff_tmp27 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_a5_a6 = simd_and(ra000_ffff_tmp26, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(sequence_ef_bf_adv, byte_range_a5_a6);
              struct_gc_Sc.cc = simd_or(struct_gc_Sc.cc, ra000_ffff_tmp28);
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 17);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 21);
        }
        carryQ.CarryQ_Adjust(21);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<21, 0> carryQ;
  };

  struct Property_gc_Cn {
  Property_gc_Cn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Cn & struct_gc_Cn) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock byte_range_b8_b9, byte_cd_adv, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock r370_3ff_tmp5, byte_ce, r370_3ff_tmp6, byte_range_80_83, byte_ce_adv;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9, byte_8b, r370_3ff_tmp10;
		BitBlock byte_8d, r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13;
		BitBlock r370_3ff_tmp14, byte_a2, r370_3ff_tmp15, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, byte_d6, r400_5ff_tmp5;
		BitBlock byte_range_80_8f, r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock r500_58f_tmp5, r500_58f_tmp6, r500_58f_tmp7, byte_d5, r500_58f_tmp8;
		BitBlock r500_58f_tmp9, r530_58f_tmp1, byte_b0, byte_d4_adv, r530_58f_tmp2;
		BitBlock r530_58f_tmp3, r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6;
		BitBlock r530_58f_tmp7, r530_58f_tmp8, byte_range_97_98, byte_d5_adv;
		BitBlock r530_58f_tmp9, r530_58f_tmp10, r530_58f_tmp11, byte_a0;
		BitBlock r530_58f_tmp12, r530_58f_tmp13, r530_58f_tmp14, byte_88, byte_d6_adv;
		BitBlock r530_58f_tmp15, r530_58f_tmp16, r530_58f_tmp17, r530_58f_tmp18;
		BitBlock byte_range_8b_8c, r530_58f_tmp19, byte_range_90_bf, r400_5ff_tmp9;
		BitBlock r400_5ff_tmp10, r400_5ff_tmp11, byte_d7, r400_5ff_tmp12;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, byte_90, r590_5ff_tmp4;
		BitBlock byte_range_88_8f, byte_d7_adv, r590_5ff_tmp5, r590_5ff_tmp6;
		BitBlock r590_5ff_tmp7, r590_5ff_tmp8, r590_5ff_tmp9, byte_range_ab_af;
		BitBlock r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13;
		BitBlock r590_5ff_tmp14, byte_range_b5_bf, r590_5ff_tmp15, r80_7ff_tmp6;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_9d, byte_d8_adv, r600_6ff_tmp8, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5, r700_77f_tmp6;
		BitBlock r700_77f_tmp7, r700_77f_tmp8, r700_74f_tmp1, r700_74f_tmp2, byte_8e;
		BitBlock byte_dc_adv, r700_74f_tmp3, r700_74f_tmp4, r700_74f_tmp5;
		BitBlock r700_74f_tmp6, r700_74f_tmp7, byte_dd_adv, r700_74f_tmp8;
		BitBlock r80_7ff_tmp9, byte_range_de_df, r780_7ff_tmp1, r780_7ff_tmp2, byte_de;
		BitBlock r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock r780_7bf_tmp5, byte_range_b2_bf, byte_de_adv, r780_7bf_tmp6;
		BitBlock r780_7ff_tmp3, r780_7ff_tmp4, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, byte_range_bb_bf;
		BitBlock byte_df_adv, r7c0_7ff_tmp6, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, byte_range_ae_af, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, byte_bf, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, byte_a1, sequence_e0_a1, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, r800_fff_tmp15, byte_range_9c_9d, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, byte_range_9f_bf;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, sequence_e0_a2;
		BitBlock byte_range_80_9f, sequence_e0_a2_adv, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, byte_range_b3_bf, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock byte_range_80_a3, sequence_e0_a3_adv, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock byte_a6, sequence_e0_a6, r800_fff_tmp31, r800_fff_tmp32, byte_84;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp33, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock byte_range_8d_8e, r800_fff_tmp36, r800_fff_tmp37, byte_range_91_92;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, byte_a9;
		BitBlock r800_fff_tmp41, byte_b1, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, byte_range_b3_b5, r800_fff_tmp46;
		BitBlock r800_fff_tmp47, byte_range_ba_bb, r800_fff_tmp48, r800_fff_tmp49;
		BitBlock byte_a7, sequence_e0_a7, r800_fff_tmp50, byte_range_85_86;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp51, r800_fff_tmp52, byte_range_89_8a;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock r800_fff_tmp57, byte_range_8f_96, r800_fff_tmp58, byte_range_98_9b;
		BitBlock r800_fff_tmp59, r800_fff_tmp60, byte_9e, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, byte_range_a4_a5, r800_fff_tmp63, byte_range_bc_bf;
		BitBlock r800_fff_tmp64, r800_fff_tmp65, byte_a8, sequence_e0_a8, byte_80;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, byte_range_8b_8e, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, byte_b4, r800_fff_tmp74, byte_b7;
		BitBlock r800_fff_tmp75, r800_fff_tmp76, r800_fff_tmp77, byte_bd;
		BitBlock r800_fff_tmp78, sequence_e0_a9, r800_fff_tmp79, byte_range_83_86;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp80, r800_fff_tmp81, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, byte_range_8e_90, r800_fff_tmp84, r800_fff_tmp85;
		BitBlock r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88, byte_range_92_98;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, r800_fff_tmp92;
		BitBlock r800_fff_tmp93, r800_fff_tmp94, r800_fff_tmp95, byte_range_9f_a5;
		BitBlock r800_fff_tmp96, byte_range_b6_bf, r800_fff_tmp97, r800_fff_tmp98;
		BitBlock byte_aa, sequence_e0_aa, sequence_e0_aa_adv, r800_fff_tmp99;
		BitBlock r800_fff_tmp100, r800_fff_tmp101, byte_92, r800_fff_tmp102;
		BitBlock r800_fff_tmp103, r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106;
		BitBlock r800_fff_tmp107, byte_ab, sequence_e0_ab, byte_86, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp108, byte_8a, r800_fff_tmp109, byte_range_8e_8f;
		BitBlock r800_fff_tmp110, r800_fff_tmp111, byte_range_91_9f, r800_fff_tmp112;
		BitBlock r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock byte_ac, sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp117;
		BitBlock r800_fff_tmp118, r800_fff_tmp119, r800_fff_tmp120, r800_fff_tmp121;
		BitBlock r800_fff_tmp122, r800_fff_tmp123, r800_fff_tmp124, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_fff_tmp125, r800_fff_tmp126;
		BitBlock r800_fff_tmp127, r800_fff_tmp128, byte_range_8e_95, r800_fff_tmp129;
		BitBlock r800_fff_tmp130, r800_fff_tmp131, r800_fff_tmp132, byte_range_b8_bf;
		BitBlock r800_fff_tmp133, byte_ae, sequence_e0_ae, byte_range_80_81;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp134, r800_fff_tmp135;
		BitBlock byte_range_8b_8d, r800_fff_tmp136, byte_91, r800_fff_tmp137;
		BitBlock r800_fff_tmp138, byte_range_96_98, r800_fff_tmp139, byte_9b;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, byte_range_a0_a2;
		BitBlock r800_fff_tmp143, r800_fff_tmp144, byte_range_a5_a7, r800_fff_tmp145;
		BitBlock r800_fff_tmp146, byte_range_ab_ad, r800_fff_tmp147, r800_fff_tmp148;
		BitBlock byte_range_ba_bd, r800_fff_tmp149, byte_af, sequence_e0_af;
		BitBlock byte_range_83_85, sequence_e0_af_adv, r800_fff_tmp150, byte_89;
		BitBlock r800_fff_tmp151, r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock r800_fff_tmp155, byte_range_91_96, r800_fff_tmp156, r800_fff_tmp157;
		BitBlock byte_range_98_a5, r800_fff_tmp158, r800_fff_tmp159, sequence_e0_b0;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162;
		BitBlock r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165, byte_range_ba_bc;
		BitBlock r800_fff_tmp166, sequence_e0_b1, r800_fff_tmp167, byte_85;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170;
		BitBlock r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173, byte_range_8e_94;
		BitBlock r800_fff_tmp174, byte_97, r800_fff_tmp175, r800_fff_tmp176;
		BitBlock byte_range_9a_9f, r800_fff_tmp177, r800_fff_tmp178, byte_range_b0_b7;
		BitBlock r800_fff_tmp179, byte_b2, sequence_e0_b2, sequence_e0_b2_adv;
		BitBlock r800_fff_tmp180, r800_fff_tmp181, r800_fff_tmp182, r800_fff_tmp183;
		BitBlock r800_fff_tmp184, r800_fff_tmp185, r800_fff_tmp186, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp187, r800_fff_tmp188;
		BitBlock r800_fff_tmp189, r800_fff_tmp190, r800_fff_tmp191, byte_range_97_9d;
		BitBlock r800_fff_tmp192, byte_9f, r800_fff_tmp193, r800_fff_tmp194;
		BitBlock r800_fff_tmp195, r800_fff_tmp196, sequence_e0_b4, sequence_e0_b4_adv;
		BitBlock r800_fff_tmp197, r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200;
		BitBlock r800_fff_tmp201, byte_range_bb_bc, r800_fff_tmp202, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp203, r800_fff_tmp204;
		BitBlock r800_fff_tmp205, byte_range_98_9f, r800_fff_tmp206, r800_fff_tmp207;
		BitBlock byte_range_b6_b8, r800_fff_tmp208, byte_b6, sequence_e0_b6;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp209, r800_fff_tmp210, r800_fff_tmp211;
		BitBlock r800_fff_tmp212, byte_range_97_99, r800_fff_tmp213, r800_fff_tmp214;
		BitBlock byte_bc, r800_fff_tmp215, byte_range_be_bf, r800_fff_tmp216;
		BitBlock sequence_e0_b7, byte_range_87_89, sequence_e0_b7_adv, r800_fff_tmp217;
		BitBlock r800_fff_tmp218, byte_95, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, byte_range_a0_a5, r800_fff_tmp222, byte_range_b0_b1;
		BitBlock r800_fff_tmp223, r800_fff_tmp224, byte_b8, sequence_e0_b8;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp225, byte_range_bb_be;
		BitBlock r800_fff_tmp226, byte_b9, sequence_e0_b9, r800_fff_tmp227;
		BitBlock r800_fff_tmp228, byte_range_9c_bf, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp229, byte_ba, sequence_e0_ba, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp230, byte_83, r800_fff_tmp231, r800_fff_tmp232;
		BitBlock r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235, r800_fff_tmp236;
		BitBlock byte_range_8e_93, r800_fff_tmp237, byte_98, r800_fff_tmp238;
		BitBlock r800_fff_tmp239, byte_a4, r800_fff_tmp240, r800_fff_tmp241;
		BitBlock r800_fff_tmp242, byte_range_a8_a9, r800_fff_tmp243, r800_fff_tmp244;
		BitBlock r800_fff_tmp245, r800_fff_tmp246, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp247, byte_87, r800_fff_tmp248;
		BitBlock r800_fff_tmp249, byte_range_9a_9b, r800_fff_tmp250, byte_range_a0_bf;
		BitBlock r800_fff_tmp251, sequence_e0_bd, sequence_e0_bd_adv, r800_fff_tmp252;
		BitBlock r800_fff_tmp253, r800_fff_tmp254, byte_range_ad_b0, r800_fff_tmp255;
		BitBlock byte_be, sequence_e0_be, sequence_e0_be_adv, r800_fff_tmp256;
		BitBlock r800_fff_tmp257, sequence_e0_bf, sequence_e0_bf_adv, r800_fff_tmp258;
		BitBlock r800_fff_tmp259, r800_fff_tmp260, r800_fff_tmp261, byte_range_9b_bf;
		BitBlock r800_fff_tmp262, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, sequence_e1_83, byte_e1_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, sequence_e1_83_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, byte_range_88_8c, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, sequence_e1_89;
		BitBlock sequence_e1_89_adv, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, byte_99, r1000_1fff_tmp23, byte_range_9e_9f;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, sequence_e1_8a;
		BitBlock sequence_e1_8a_adv, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, byte_range_b6_b7, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, r1000_1fff_tmp35, sequence_e1_8b;
		BitBlock byte_81, sequence_e1_8b_adv, r1000_1fff_tmp36, byte_range_86_87;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39, byte_8c;
		BitBlock sequence_e1_8c, sequence_e1_8c_adv, r1000_1fff_tmp40;
		BitBlock byte_range_96_97, r1000_1fff_tmp41, r1000_1fff_tmp42, sequence_e1_8d;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock byte_range_9b_9c, sequence_e1_8d_adv, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, byte_range_bd_bf, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, sequence_e1_8e, r1000_1fff_tmp50;
		BitBlock sequence_e1_8e_adv, r1000_1fff_tmp51, byte_8f, sequence_e1_8f;
		BitBlock r1000_1fff_tmp52, sequence_e1_8f_adv, r1000_1fff_tmp53, byte_9a;
		BitBlock sequence_e1_9a, r1000_1fff_tmp54, byte_range_9d_9f;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp55, sequence_e1_9b;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, byte_range_b9_bf;
		BitBlock sequence_e1_9b_adv, r1000_1fff_tmp58, byte_9c, sequence_e1_9c;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp59, byte_range_95_9f;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock byte_range_b7_bf, r1000_1fff_tmp63, sequence_e1_9d, byte_range_94_9f;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_range_b4_bf;
		BitBlock r1000_1fff_tmp68, sequence_e1_9f, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp69, r1000_1fff_tmp70, byte_range_aa_af;
		BitBlock r1000_1fff_tmp71, byte_range_ba_bf, r1000_1fff_tmp72, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp73, r1000_1fff_tmp74;
		BitBlock sequence_e1_a1, sequence_e1_a1_adv, r1000_1fff_tmp75;
		BitBlock r1000_1fff_tmp76, sequence_e1_a2, r1000_1fff_tmp77;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp78, sequence_e1_a3;
		BitBlock r1000_1fff_tmp79, r1000_1fff_tmp80, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp81, sequence_e1_a4, sequence_e1_a4_adv;
		BitBlock r1000_1fff_tmp82, byte_range_ac_af, r1000_1fff_tmp83;
		BitBlock r1000_1fff_tmp84, r1000_1fff_tmp85, byte_a5, sequence_e1_a5;
		BitBlock r1000_1fff_tmp86, byte_range_81_83, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp87, r1000_1fff_tmp88, r1000_1fff_tmp89, sequence_e1_a6;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp90, sequence_e1_a7;
		BitBlock byte_range_8a_8f, sequence_e1_a7_adv, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, byte_range_9b_9d;
		BitBlock r1000_1fff_tmp94, r1000_1fff_tmp95, sequence_e1_a8, r1000_1fff_tmp96;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp97, sequence_e1_a9;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp98, r1000_1fff_tmp99;
		BitBlock byte_range_bd_be, r1000_1fff_tmp100, sequence_e1_aa;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, r1000_1fff_tmp104, sequence_e1_ab;
		BitBlock byte_range_80_bf, sequence_e1_ab_adv, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, sequence_e1_ad, r1000_1fff_tmp107;
		BitBlock byte_range_8c_8f, sequence_e1_ad_adv, r1000_1fff_tmp108;
		BitBlock r1000_1fff_tmp109, r1000_1fff_tmp110, r1000_1fff_tmp111;
		BitBlock sequence_e1_af, r1000_1fff_tmp112, byte_range_b4_bb;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp113, sequence_e1_b0;
		BitBlock r1000_1fff_tmp114, byte_range_b8_ba, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp115, sequence_e1_b1, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, byte_range_8a_8c, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp118, sequence_e1_b2, sequence_e1_b2_adv;
		BitBlock r1000_1fff_tmp119, sequence_e1_b3, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, r1000_1fff_tmp122;
		BitBlock r1000_1fff_tmp123, sequence_e1_b7, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, byte_range_b6_bb, sequence_e1_b7_adv;
		BitBlock r1000_1fff_tmp126, sequence_e1_bc, r1000_1fff_tmp127;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp128, r1000_1fff_tmp129;
		BitBlock sequence_e1_bd, sequence_e1_bd_adv, r1000_1fff_tmp130;
		BitBlock r1000_1fff_tmp131, r1000_1fff_tmp132, r1000_1fff_tmp133;
		BitBlock r1000_1fff_tmp134, r1000_1fff_tmp135, r1000_1fff_tmp136;
		BitBlock sequence_e1_be, sequence_e1_be_adv, r1000_1fff_tmp137, sequence_e1_bf;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp138, r1000_1fff_tmp139;
		BitBlock byte_range_94_95, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, r1000_1fff_tmp143, r1000_1fff_tmp144;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, byte_range_b2_b3;
		BitBlock r2000_2fff_tmp11, byte_82, sequence_e2_82, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, sequence_e2_83;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_range_b1_bf, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, sequence_e2_86, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp30, sequence_e2_8f;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, sequence_e2_8f_adv;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, sequence_e2_90, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock byte_range_a7_bf, sequence_e2_90_adv, r2000_2fff_tmp39;
		BitBlock sequence_e2_91, r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock byte_range_8b_9f, sequence_e2_91_adv, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, sequence_e2_ad, r2000_2fff_tmp45, byte_range_b4_b5;
		BitBlock sequence_e2_ad_adv, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock sequence_e2_ae, r2000_2fff_tmp48, sequence_e2_ae_adv;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, sequence_e2_af, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock sequence_e2_af_adv, r2000_2fff_tmp55, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, byte_range_92_bf, r2000_2fff_tmp58, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp59, sequence_e2_b1;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp60, sequence_e2_b3;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, byte_range_b4_b8;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp63, sequence_e2_b4;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, byte_range_a8_ac, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, sequence_e2_b5, byte_range_a8_ae;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, byte_range_b1_be, r2000_2fff_tmp72, sequence_e2_b6;
		BitBlock byte_range_97_9f, sequence_e2_b6_adv, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, sequence_e2_b7;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, sequence_e2_b9, r2000_2fff_tmp83;
		BitBlock r2000_2fff_tmp84, r2000_2fff_tmp85, byte_range_83_bf;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock sequence_e2_ba, sequence_e2_ba_adv, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, sequence_e2_bb, sequence_e2_bb_adv;
		BitBlock r2000_2fff_tmp90, sequence_e2_bf, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, r2000_2fff_tmp94, r2000_2fff_tmp95;
		BitBlock byte_range_96_af, sequence_e2_bf_adv, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, sequence_e3_81, byte_e3_adv;
		BitBlock r3000_4dff_tmp6, sequence_e3_81_adv, r3000_4dff_tmp7, sequence_e3_82;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, sequence_e3_84, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock byte_range_80_84, sequence_e3_84_adv, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, r3000_4dff_tmp22, byte_range_ae_b0;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, sequence_e3_86, r3000_4dff_tmp25;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp26, r3000_4dff_tmp27;
		BitBlock r3000_4dff_tmp28, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, sequence_e3_87, r3000_4dff_tmp33;
		BitBlock byte_range_a4_af, sequence_e3_87_adv, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, r3000_4dff_tmp36, sequence_e3_88;
		BitBlock sequence_e3_88_adv, r3000_4dff_tmp37, r3000_4dff_tmp38;
		BitBlock sequence_e3_8b, sequence_e3_8b_adv, r3000_4dff_tmp39, sequence_e4_b6;
		BitBlock byte_e4_adv, r3000_4dff_tmp40, r3000_4dff_tmp41, sequence_e4_b6_adv;
		BitBlock r3000_4dff_tmp42, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock byte_range_e5_e9, r800_ffff_tmp18, r4e00_9fff_tmp1, r4e00_9fff_tmp2;
		BitBlock r4e00_9fff_tmp3, byte_e9, r4e00_9fff_tmp4, r4e00_9fff_tmp5;
		BitBlock r4e00_9fff_tmp6, r4e00_9fff_tmp7, sequence_e9_bf, byte_e9_adv;
		BitBlock r4e00_9fff_tmp8, r4e00_9fff_tmp9, r4e00_9fff_tmp10, byte_range_8d_bf;
		BitBlock sequence_e9_bf_adv, r4e00_9fff_tmp11, r800_ffff_tmp19;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_92, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_8d_8f;
		BitBlock sequence_ea_92_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_93, sequence_ea_93, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_range_87_8f, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, sequence_ea_98, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_range_ac_bf, sequence_ea_98_adv;
		BitBlock ra000_ffff_tmp21, sequence_ea_9a, ra000_ffff_tmp22;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock sequence_ea_9b, sequence_ea_9b_adv, ra000_ffff_tmp25, sequence_ea_9e;
		BitBlock ra000_ffff_tmp26, sequence_ea_9e_adv, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, sequence_ea_9f, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, byte_range_80_b6, sequence_ea_9f_adv;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, sequence_ea_a0;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, sequence_ea_a1;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp41, sequence_ea_a3;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock byte_range_85_8d, sequence_ea_a3_adv, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, sequence_ea_a5, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock byte_range_94_9e, sequence_ea_a5_adv, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock byte_range_9a_9d, ra000_ffff_tmp57, ra000_ffff_tmp58, sequence_ea_a8;
		BitBlock sequence_ea_a8_adv, ra000_ffff_tmp59, ra000_ffff_tmp60;
		BitBlock sequence_ea_a9, sequence_ea_a9_adv, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, sequence_ea_ab, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, byte_range_83_9a;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, sequence_ea_ac, sequence_ea_ac_adv;
		BitBlock ra000_ffff_tmp73, ra000_ffff_tmp74, ra000_ffff_tmp75;
		BitBlock ra000_ffff_tmp76, byte_range_87_88, ra000_ffff_tmp77;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, byte_range_8f_90;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, sequence_ea_ad, byte_range_a0_a3;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp85, ra000_ffff_tmp86;
		BitBlock ra000_ffff_tmp87, byte_range_a6_bf, ra000_ffff_tmp88, sequence_ea_ae;
		BitBlock sequence_ea_ae_adv, ra000_ffff_tmp89, ra000_ffff_tmp90;
		BitBlock sequence_ea_af, sequence_ea_af_adv, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94, byte_ed;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, sequence_ed_9e, byte_ed_adv;
		BitBlock sequence_ed_9e_adv, ra000_ffff_tmp97, sequence_ed_9f;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock byte_range_87_8a, sequence_ed_9f_adv, ra000_ffff_tmp101;
		BitBlock ra000_ffff_tmp102, byte_ef, ra000_ffff_tmp103, sequence_ef_a9;
		BitBlock byte_ef_adv, sequence_ef_a9_adv, ra000_ffff_tmp104, sequence_ef_ab;
		BitBlock ra000_ffff_tmp105, ra000_ffff_tmp106, ra000_ffff_tmp107;
		BitBlock byte_range_9a_bf, sequence_ef_ab_adv, ra000_ffff_tmp108;
		BitBlock sequence_ef_ac, ra000_ffff_tmp109, ra000_ffff_tmp110;
		BitBlock ra000_ffff_tmp111, byte_range_87_92, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp112, ra000_ffff_tmp113, byte_range_98_9c;
		BitBlock ra000_ffff_tmp114, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock ra000_ffff_tmp117, sequence_ef_ad, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp118, ra000_ffff_tmp119, sequence_ef_af;
		BitBlock ra000_ffff_tmp120, ra000_ffff_tmp121, byte_range_82_92;
		BitBlock sequence_ef_af_adv, ra000_ffff_tmp122, sequence_ef_b5;
		BitBlock sequence_ef_b5_adv, ra000_ffff_tmp123, ra000_ffff_tmp124;
		BitBlock sequence_ef_b6, byte_range_90_91, sequence_ef_b6_adv;
		BitBlock ra000_ffff_tmp125, sequence_ef_b7, ra000_ffff_tmp126;
		BitBlock ra000_ffff_tmp127, ra000_ffff_tmp128, byte_range_88_af;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp129, ra000_ffff_tmp130;
		BitBlock sequence_ef_b8, sequence_ef_b8_adv, ra000_ffff_tmp131;
		BitBlock ra000_ffff_tmp132, sequence_ef_b9, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp133, ra000_ffff_tmp134, ra000_ffff_tmp135;
		BitBlock ra000_ffff_tmp136, sequence_ef_bb, ra000_ffff_tmp137;
		BitBlock ra000_ffff_tmp138, sequence_ef_bb_adv, ra000_ffff_tmp139;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, ra000_ffff_tmp140, sequence_ef_be;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp141, sequence_ef_bf;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp142, ra000_ffff_tmp143;
		BitBlock byte_range_88_89, ra000_ffff_tmp144, ra000_ffff_tmp145;
		BitBlock byte_range_98_99, ra000_ffff_tmp146, ra000_ffff_tmp147;
		BitBlock ra000_ffff_tmp148, ra000_ffff_tmp149, ra000_ffff_tmp150;
		BitBlock ra000_ffff_tmp151, ra000_ffff_tmp152, ra000_ffff_tmp153;
		BitBlock byte_range_af_b8, ra000_ffff_tmp154, ra000_ffff_tmp155;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_80, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock sequence_f0_90_80_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, sequence_f0_90_81, r10000_10ffff_tmp28;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_range_9e_bf, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, sequence_f0_90_83, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, sequence_f0_90_83_adv, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, sequence_f0_90_84, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, sequence_f0_90_84_adv, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_range_b4_b6, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, sequence_f0_90_86, r10000_10ffff_tmp44;
		BitBlock sequence_f0_90_86_adv, r10000_10ffff_tmp45, byte_range_9c_9f;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock byte_range_a1_bf, r10000_10ffff_tmp49, sequence_f0_90_87;
		BitBlock sequence_f0_90_87_adv, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, sequence_f0_90_byte_range_88_89;
		BitBlock r10000_10ffff_tmp53, sequence_f0_90_byte_range_88_89_sfx;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock sequence_f0_90_8a, r10000_10ffff_tmp57, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp58, sequence_f0_90_8b, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, sequence_f0_90_8b_adv, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, sequence_f0_90_8c;
		BitBlock r10000_10ffff_tmp64, sequence_f0_90_8c_adv, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, sequence_f0_90_8d, r10000_10ffff_tmp67;
		BitBlock byte_range_8b_8f, sequence_f0_90_8d_adv, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, sequence_f0_90_8e;
		BitBlock sequence_f0_90_8e_adv, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock sequence_f0_90_8f, byte_range_84_87, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, byte_range_96_bf;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, sequence_f0_90_92;
		BitBlock sequence_f0_90_92_adv, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock byte_range_aa_bf, r10000_10ffff_tmp85, sequence_f0_90_93;
		BitBlock sequence_f0_90_93_adv, r10000_10ffff_tmp86, byte_94;
		BitBlock sequence_f0_90_94, byte_range_a8_af, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp87, r10000_10ffff_tmp88, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp89, r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock byte_range_a4_ae, sequence_f0_90_95_adv, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock sequence_f0_90_byte_range_96_97, r10000_10ffff_tmp95;
		BitBlock sequence_f0_90_byte_range_96_97_sfx, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp96, sequence_f0_90_9c_adv, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_9d, byte_range_96_9f, sequence_f0_90_9d_adv;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_a8_bf;
		BitBlock r10000_10ffff_tmp100, sequence_f0_90_byte_range_9e_9f;
		BitBlock r10000_10ffff_tmp101, sequence_f0_90_byte_range_9e_9f_sfx;
		BitBlock sequence_f0_90_a0, sequence_f0_90_a0_adv, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock r10000_10ffff_tmp106, byte_range_b9_bb, r10000_10ffff_tmp107;
		BitBlock r10000_10ffff_tmp108, r10000_10ffff_tmp109, r10000_10ffff_tmp110;
		BitBlock sequence_f0_90_a1, byte_96, sequence_f0_90_a1_adv;
		BitBlock r10000_10ffff_tmp111, sequence_f0_90_a2, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock byte_range_9f_a6, sequence_f0_90_a2_adv, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_a3, sequence_f0_90_a3_adv;
		BitBlock r10000_10ffff_tmp118, sequence_f0_90_a4, byte_range_9c_9e;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, byte_range_ba_be;
		BitBlock r10000_10ffff_tmp123, sequence_f0_90_a5, sequence_f0_90_a5_adv;
		BitBlock r10000_10ffff_tmp124, sequence_f0_90_a6, byte_range_b8_bd;
		BitBlock sequence_f0_90_a6_adv, r10000_10ffff_tmp125, sequence_f0_90_a7;
		BitBlock sequence_f0_90_a7_adv, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_a8, sequence_f0_90_a8_adv, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, byte_range_87_8b;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, r10000_10ffff_tmp133;
		BitBlock byte_range_b4_b7, r10000_10ffff_tmp134, r10000_10ffff_tmp135;
		BitBlock sequence_f0_90_a9, sequence_f0_90_a9_adv, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, byte_range_99_9f, r10000_10ffff_tmp138;
		BitBlock sequence_f0_90_aa, sequence_f0_90_aa_adv, r10000_10ffff_tmp139;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp140, r10000_10ffff_tmp141;
		BitBlock byte_range_a7_aa, sequence_f0_90_ab_adv, r10000_10ffff_tmp142;
		BitBlock r10000_10ffff_tmp143, sequence_f0_90_ac, r10000_10ffff_tmp144;
		BitBlock r10000_10ffff_tmp145, sequence_f0_90_ac_adv, r10000_10ffff_tmp146;
		BitBlock sequence_f0_90_ad, sequence_f0_90_ad_adv, r10000_10ffff_tmp147;
		BitBlock r10000_10ffff_tmp148, byte_range_b3_b7, r10000_10ffff_tmp149;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp150, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp151, r10000_10ffff_tmp152, r10000_10ffff_tmp153;
		BitBlock r10000_10ffff_tmp154, r10000_10ffff_tmp155, r10000_10ffff_tmp156;
		BitBlock r10000_10ffff_tmp157, byte_range_9d_a8, r10000_10ffff_tmp158;
		BitBlock r10000_10ffff_tmp159, sequence_f0_90_af, sequence_f0_90_af_adv;
		BitBlock r10000_10ffff_tmp160, sequence_f0_90_b1, r10000_10ffff_tmp161;
		BitBlock byte_range_89_bf, sequence_f0_90_b1_adv, r10000_10ffff_tmp162;
		BitBlock byte_range_b2_b8, sequence_f0_90_byte_range_b2_b8;
		BitBlock r10000_10ffff_tmp163, sequence_f0_90_byte_range_b2_b8_sfx;
		BitBlock sequence_f0_90_b9, sequence_f0_90_b9_adv, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, sequence_f0_90_byte_range_ba_bf;
		BitBlock r10000_10ffff_tmp166, sequence_f0_90_byte_range_ba_bf_sfx;
		BitBlock sequence_f0_91, r10000_10ffff_tmp167, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp168, r10000_10ffff_tmp169;
		BitBlock r10000_10ffff_tmp170, byte_range_8e_91, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp171, r10000_10ffff_tmp172, byte_range_b0_be;
		BitBlock r10000_10ffff_tmp173, sequence_f0_91_83, r10000_10ffff_tmp174;
		BitBlock byte_range_82_8f, sequence_f0_91_83_adv, r10000_10ffff_tmp175;
		BitBlock byte_range_a9_af, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock sequence_f0_91_84, sequence_f0_91_84_adv, r10000_10ffff_tmp178;
		BitBlock sequence_f0_91_85, byte_range_84_8f, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp179, r10000_10ffff_tmp180, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp181, byte_range_89_8c, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp182, r10000_10ffff_tmp183, r10000_10ffff_tmp184;
		BitBlock r10000_10ffff_tmp185, r10000_10ffff_tmp186, r10000_10ffff_tmp187;
		BitBlock byte_range_9b_a0, r10000_10ffff_tmp188, r10000_10ffff_tmp189;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, sequence_f0_91_88;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp192, r10000_10ffff_tmp193;
		BitBlock sequence_f0_91_89, sequence_f0_91_89_adv, r10000_10ffff_tmp194;
		BitBlock sequence_f0_91_8a, byte_range_80_af, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp195, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp196, r10000_10ffff_tmp197, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp198, r10000_10ffff_tmp199;
		BitBlock r10000_10ffff_tmp200, r10000_10ffff_tmp201, r10000_10ffff_tmp202;
		BitBlock r10000_10ffff_tmp203, r10000_10ffff_tmp204, r10000_10ffff_tmp205;
		BitBlock r10000_10ffff_tmp206, r10000_10ffff_tmp207, r10000_10ffff_tmp208;
		BitBlock sequence_f0_91_8d, sequence_f0_91_8d_adv, r10000_10ffff_tmp209;
		BitBlock r10000_10ffff_tmp210, r10000_10ffff_tmp211, r10000_10ffff_tmp212;
		BitBlock r10000_10ffff_tmp213, byte_range_8e_96, r10000_10ffff_tmp214;
		BitBlock r10000_10ffff_tmp215, r10000_10ffff_tmp216, r10000_10ffff_tmp217;
		BitBlock r10000_10ffff_tmp218, byte_range_ad_af, r10000_10ffff_tmp219;
		BitBlock r10000_10ffff_tmp220, sequence_f0_91_byte_range_8e_91;
		BitBlock r10000_10ffff_tmp221, sequence_f0_91_byte_range_8e_91_sfx;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp222;
		BitBlock r10000_10ffff_tmp223, r10000_10ffff_tmp224, r10000_10ffff_tmp225;
		BitBlock sequence_f0_91_byte_range_94_95, r10000_10ffff_tmp226;
		BitBlock sequence_f0_91_byte_range_94_95_sfx, sequence_f0_91_96;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp227, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp228, byte_range_8a_bf, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp229, sequence_f0_91_99, byte_range_85_8f;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp230, r10000_10ffff_tmp231;
		BitBlock sequence_f0_91_9a, sequence_f0_91_9a_adv, r10000_10ffff_tmp232;
		BitBlock sequence_f0_91_9b, sequence_f0_91_9b_adv, r10000_10ffff_tmp233;
		BitBlock r10000_10ffff_tmp234, r10000_10ffff_tmp235, r10000_10ffff_tmp236;
		BitBlock r10000_10ffff_tmp237, byte_range_9c_a1;
		BitBlock sequence_f0_91_byte_range_9c_a1, r10000_10ffff_tmp238;
		BitBlock sequence_f0_91_byte_range_9c_a1_sfx, sequence_f0_91_a2;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp239, sequence_f0_91_a3;
		BitBlock r10000_10ffff_tmp240, byte_range_b3_be, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp241, r10000_10ffff_tmp242, byte_range_a4_aa;
		BitBlock sequence_f0_91_byte_range_a4_aa, r10000_10ffff_tmp243;
		BitBlock sequence_f0_91_byte_range_a4_aa_sfx, sequence_f0_91_ab;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp244, r10000_10ffff_tmp245;
		BitBlock sequence_f0_91_byte_range_ac_bf, r10000_10ffff_tmp246;
		BitBlock sequence_f0_91_byte_range_ac_bf_sfx, sequence_f0_92;
		BitBlock r10000_10ffff_tmp247, sequence_f0_92_8e, sequence_f0_92_adv;
		BitBlock r10000_10ffff_tmp248, r10000_10ffff_tmp249, byte_range_99_bf;
		BitBlock sequence_f0_92_8e_adv, r10000_10ffff_tmp250, sequence_f0_92_8f;
		BitBlock sequence_f0_92_8f_adv, r10000_10ffff_tmp251, sequence_f0_92_91;
		BitBlock sequence_f0_92_91_adv, r10000_10ffff_tmp252, r10000_10ffff_tmp253;
		BitBlock r10000_10ffff_tmp254, r10000_10ffff_tmp255;
		BitBlock sequence_f0_92_byte_range_92_bf, r10000_10ffff_tmp256;
		BitBlock sequence_f0_92_byte_range_92_bf_sfx, sequence_f0_93;
		BitBlock r10000_10ffff_tmp257, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock r10000_10ffff_tmp258, byte_range_af_bf, sequence_f0_93_90_adv;
		BitBlock r10000_10ffff_tmp259, r10000_10ffff_tmp260, r10000_10ffff_tmp261;
		BitBlock byte_range_91_bf, sequence_f0_93_byte_range_91_bf;
		BitBlock r10000_10ffff_tmp262, sequence_f0_93_byte_range_91_bf_sfx;
		BitBlock byte_f0_byte_range_94_95, r10000_10ffff_tmp263;
		BitBlock byte_f0_byte_range_94_95_sfx, r10000_10ffff_tmp264;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, sequence_f0_96;
		BitBlock r10000_10ffff_tmp265, sequence_f0_96_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp266, sequence_f0_96_byte_range_80_9f_sfx;
		BitBlock sequence_f0_96_a8, sequence_f0_96_adv, sequence_f0_96_a8_adv;
		BitBlock r10000_10ffff_tmp267, sequence_f0_96_a9, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, byte_range_aa_ad;
		BitBlock r10000_10ffff_tmp270, r10000_10ffff_tmp271, sequence_f0_96_aa;
		BitBlock sequence_f0_96_aa_adv, r10000_10ffff_tmp272, sequence_f0_96_ab;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp273, r10000_10ffff_tmp274;
		BitBlock r10000_10ffff_tmp275, sequence_f0_96_ad, byte_range_86_8f;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock r10000_10ffff_tmp278, byte_range_b8_bc, r10000_10ffff_tmp279;
		BitBlock sequence_f0_96_ae, sequence_f0_96_ae_adv, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, byte_range_af_bb;
		BitBlock sequence_f0_96_byte_range_af_bb, r10000_10ffff_tmp283;
		BitBlock sequence_f0_96_byte_range_af_bb_sfx, sequence_f0_96_bd;
		BitBlock sequence_f0_96_bd_adv, r10000_10ffff_tmp284, r10000_10ffff_tmp285;
		BitBlock sequence_f0_96_be, byte_range_80_8e, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp286, r10000_10ffff_tmp287, sequence_f0_96_bf;
		BitBlock sequence_f0_96_bf_adv, r10000_10ffff_tmp288, byte_range_97_9a;
		BitBlock byte_f0_byte_range_97_9a, r10000_10ffff_tmp289;
		BitBlock byte_f0_byte_range_97_9a_sfx, r10000_10ffff_tmp290;
		BitBlock byte_f0_byte_range_97_9a_sfx_sfx, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp291, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock r10000_10ffff_tmp292, byte_range_82_bf, sequence_f0_9b_80_adv;
		BitBlock r10000_10ffff_tmp293, r10000_10ffff_tmp294, r10000_10ffff_tmp295;
		BitBlock byte_range_81_af, sequence_f0_9b_byte_range_81_af;
		BitBlock r10000_10ffff_tmp296, sequence_f0_9b_byte_range_81_af_sfx;
		BitBlock sequence_f0_9b_b1, sequence_f0_9b_b1_adv, r10000_10ffff_tmp297;
		BitBlock r10000_10ffff_tmp298, sequence_f0_9b_b2, byte_range_89_8f;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp299, r10000_10ffff_tmp300;
		BitBlock r10000_10ffff_tmp301, byte_range_a4_bf, r10000_10ffff_tmp302;
		BitBlock r10000_10ffff_tmp303, sequence_f0_9b_byte_range_b3_bf;
		BitBlock r10000_10ffff_tmp304, sequence_f0_9b_byte_range_b3_bf_sfx;
		BitBlock sequence_f0_9c, r10000_10ffff_tmp305, sequence_f0_9c_byte_range_80_bf;
		BitBlock r10000_10ffff_tmp306, sequence_f0_9c_byte_range_80_bf_sfx;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp307, sequence_f0_9d_83;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83_adv, r10000_10ffff_tmp308;
		BitBlock sequence_f0_9d_84, r10000_10ffff_tmp309, byte_range_a7_a8;
		BitBlock sequence_f0_9d_84_adv, r10000_10ffff_tmp310, sequence_f0_9d_87;
		BitBlock sequence_f0_9d_87_adv, r10000_10ffff_tmp311, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp312, r10000_10ffff_tmp313, byte_range_86_bf;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp314, byte_range_8a_8b;
		BitBlock sequence_f0_9d_byte_range_8a_8b, r10000_10ffff_tmp315;
		BitBlock sequence_f0_9d_byte_range_8a_8b_sfx, sequence_f0_9d_8d;
		BitBlock sequence_f0_9d_8d_adv, r10000_10ffff_tmp316, r10000_10ffff_tmp317;
		BitBlock sequence_f0_9d_byte_range_8e_8f, r10000_10ffff_tmp318;
		BitBlock sequence_f0_9d_byte_range_8e_8f_sfx, sequence_f0_9d_91;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp319, sequence_f0_9d_92;
		BitBlock sequence_f0_9d_92_adv, r10000_10ffff_tmp320, byte_range_a0_a1;
		BitBlock r10000_10ffff_tmp321, r10000_10ffff_tmp322, r10000_10ffff_tmp323;
		BitBlock r10000_10ffff_tmp324, byte_range_a3_a4, r10000_10ffff_tmp325;
		BitBlock r10000_10ffff_tmp326, r10000_10ffff_tmp327, r10000_10ffff_tmp328;
		BitBlock r10000_10ffff_tmp329, sequence_f0_9d_93, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp330, sequence_f0_9d_94, sequence_f0_9d_94_adv;
		BitBlock r10000_10ffff_tmp331, r10000_10ffff_tmp332, r10000_10ffff_tmp333;
		BitBlock r10000_10ffff_tmp334, r10000_10ffff_tmp335, r10000_10ffff_tmp336;
		BitBlock sequence_f0_9d_95, sequence_f0_9d_95_adv, r10000_10ffff_tmp337;
		BitBlock r10000_10ffff_tmp338, r10000_10ffff_tmp339, r10000_10ffff_tmp340;
		BitBlock r10000_10ffff_tmp341, sequence_f0_9d_9a, byte_range_a6_a7;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp342, sequence_f0_9d_9f;
		BitBlock r10000_10ffff_tmp343, byte_range_8c_8d, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp344, sequence_f0_9d_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp345, sequence_f0_9d_byte_range_a0_bf_sfx;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp346, sequence_f0_9e_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp347, sequence_f0_9e_byte_range_80_9f_sfx;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp348, r10000_10ffff_tmp349, r10000_10ffff_tmp350;
		BitBlock byte_range_97_bf, r10000_10ffff_tmp351, r10000_10ffff_tmp352;
		BitBlock r10000_10ffff_tmp353, byte_range_a4_b7;
		BitBlock sequence_f0_9e_byte_range_a4_b7, r10000_10ffff_tmp354;
		BitBlock sequence_f0_9e_byte_range_a4_b7_sfx, sequence_f0_9e_b8;
		BitBlock sequence_f0_9e_b8_adv, r10000_10ffff_tmp355, r10000_10ffff_tmp356;
		BitBlock r10000_10ffff_tmp357, r10000_10ffff_tmp358, byte_range_a5_a6;
		BitBlock r10000_10ffff_tmp359, r10000_10ffff_tmp360, r10000_10ffff_tmp361;
		BitBlock r10000_10ffff_tmp362, r10000_10ffff_tmp363, r10000_10ffff_tmp364;
		BitBlock sequence_f0_9e_b9, sequence_f0_9e_b9_adv, r10000_10ffff_tmp365;
		BitBlock r10000_10ffff_tmp366, r10000_10ffff_tmp367, r10000_10ffff_tmp368;
		BitBlock r10000_10ffff_tmp369, r10000_10ffff_tmp370, r10000_10ffff_tmp371;
		BitBlock r10000_10ffff_tmp372, r10000_10ffff_tmp373, byte_range_95_96;
		BitBlock r10000_10ffff_tmp374, r10000_10ffff_tmp375, r10000_10ffff_tmp376;
		BitBlock r10000_10ffff_tmp377, r10000_10ffff_tmp378, r10000_10ffff_tmp379;
		BitBlock r10000_10ffff_tmp380, r10000_10ffff_tmp381, r10000_10ffff_tmp382;
		BitBlock r10000_10ffff_tmp383, r10000_10ffff_tmp384, r10000_10ffff_tmp385;
		BitBlock r10000_10ffff_tmp386, sequence_f0_9e_ba, sequence_f0_9e_ba_adv;
		BitBlock r10000_10ffff_tmp387, r10000_10ffff_tmp388, byte_range_9c_a0;
		BitBlock r10000_10ffff_tmp389, r10000_10ffff_tmp390, r10000_10ffff_tmp391;
		BitBlock r10000_10ffff_tmp392, sequence_f0_9e_bb, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp393, r10000_10ffff_tmp394;
		BitBlock sequence_f0_9e_byte_range_bc_bf, r10000_10ffff_tmp395;
		BitBlock sequence_f0_9e_byte_range_bc_bf_sfx, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp396, sequence_f0_9f_80, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_80_adv, r10000_10ffff_tmp397, sequence_f0_9f_82;
		BitBlock sequence_f0_9f_82_adv, r10000_10ffff_tmp398, r10000_10ffff_tmp399;
		BitBlock r10000_10ffff_tmp400, byte_range_af_b0, r10000_10ffff_tmp401;
		BitBlock sequence_f0_9f_83, sequence_f0_9f_83_adv, r10000_10ffff_tmp402;
		BitBlock r10000_10ffff_tmp403, r10000_10ffff_tmp404, sequence_f0_9f_84;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp405, r10000_10ffff_tmp406;
		BitBlock sequence_f0_9f_85, sequence_f0_9f_85_adv, r10000_10ffff_tmp407;
		BitBlock sequence_f0_9f_86, r10000_10ffff_tmp408, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp409, sequence_f0_9f_87, r10000_10ffff_tmp410;
		BitBlock byte_range_80_a5, sequence_f0_9f_87_adv, r10000_10ffff_tmp411;
		BitBlock sequence_f0_9f_88, byte_range_83_8f, sequence_f0_9f_88_adv;
		BitBlock r10000_10ffff_tmp412, r10000_10ffff_tmp413, sequence_f0_9f_89;
		BitBlock sequence_f0_9f_89_adv, r10000_10ffff_tmp414, r10000_10ffff_tmp415;
		BitBlock sequence_f0_9f_byte_range_8a_8b, r10000_10ffff_tmp416;
		BitBlock sequence_f0_9f_byte_range_8a_8b_sfx, sequence_f0_9f_8c;
		BitBlock sequence_f0_9f_8c_adv, r10000_10ffff_tmp417, sequence_f0_9f_8d;
		BitBlock sequence_f0_9f_8d_adv, r10000_10ffff_tmp418, sequence_f0_9f_8f;
		BitBlock r10000_10ffff_tmp419, r10000_10ffff_tmp420, byte_range_8f_93;
		BitBlock sequence_f0_9f_8f_adv, r10000_10ffff_tmp421, r10000_10ffff_tmp422;
		BitBlock sequence_f0_9f_93, sequence_f0_9f_93_adv, r10000_10ffff_tmp423;
		BitBlock sequence_f0_9f_95, sequence_f0_9f_95_adv, r10000_10ffff_tmp424;
		BitBlock r10000_10ffff_tmp425, sequence_f0_9f_96, sequence_f0_9f_96_adv;
		BitBlock r10000_10ffff_tmp426, sequence_f0_9f_99, byte_range_83_84;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp427, sequence_f0_9f_9b;
		BitBlock byte_range_90_9f, sequence_f0_9f_9b_adv, r10000_10ffff_tmp428;
		BitBlock r10000_10ffff_tmp429, r10000_10ffff_tmp430, sequence_f0_9f_9d;
		BitBlock sequence_f0_9f_9d_adv, r10000_10ffff_tmp431, sequence_f0_9f_9f;
		BitBlock r10000_10ffff_tmp432, r10000_10ffff_tmp433, byte_range_95_bf;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp434, sequence_f0_9f_a0;
		BitBlock sequence_f0_9f_a0_adv, r10000_10ffff_tmp435, sequence_f0_9f_a1;
		BitBlock sequence_f0_9f_a1_adv, r10000_10ffff_tmp436, r10000_10ffff_tmp437;
		BitBlock r10000_10ffff_tmp438, sequence_f0_9f_a2, sequence_f0_9f_a2_adv;
		BitBlock r10000_10ffff_tmp439, r10000_10ffff_tmp440, byte_range_ae_bf;
		BitBlock r10000_10ffff_tmp441, r10000_10ffff_tmp442, r10000_10ffff_tmp443;
		BitBlock byte_range_a3_bf, sequence_f0_9f_byte_range_a3_bf;
		BitBlock r10000_10ffff_tmp444, sequence_f0_9f_byte_range_a3_bf_sfx;
		BitBlock sequence_f0_aa, r10000_10ffff_tmp445, sequence_f0_aa_9b;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b_adv, r10000_10ffff_tmp446;
		BitBlock sequence_f0_ab, r10000_10ffff_tmp447, sequence_f0_ab_9c;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_9c_adv, r10000_10ffff_tmp448;
		BitBlock sequence_f0_ab_a0, sequence_f0_ab_a0_adv, r10000_10ffff_tmp449;
		BitBlock sequence_f0_ab_byte_range_a1_bf, r10000_10ffff_tmp450;
		BitBlock sequence_f0_ab_byte_range_a1_bf_sfx, byte_range_ac_ae;
		BitBlock byte_f0_byte_range_ac_ae, r10000_10ffff_tmp451;
		BitBlock byte_f0_byte_range_ac_ae_sfx, r10000_10ffff_tmp452;
		BitBlock byte_f0_byte_range_ac_ae_sfx_sfx, sequence_f0_af;
		BitBlock r10000_10ffff_tmp453, sequence_f0_af_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp454, sequence_f0_af_byte_range_80_9f_sfx;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp455, byte_range_a9_bf;
		BitBlock sequence_f0_af_byte_range_a9_bf, r10000_10ffff_tmp456;
		BitBlock sequence_f0_af_byte_range_a9_bf_sfx, byte_f0_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp457, byte_f0_byte_range_b0_bf_sfx;
		BitBlock r10000_10ffff_tmp458, byte_f0_byte_range_b0_bf_sfx_sfx;
		BitBlock r10000_10ffff_tmp459, byte_range_f1_f2, r10000_10ffff_tmp460;
		BitBlock byte_range_f1_f2_sfx, r10000_10ffff_tmp461, byte_range_f1_f2_sfx_sfx;
		BitBlock r10000_10ffff_tmp462, byte_range_f1_f2_sfx_sfx_sfx, byte_f3;
		BitBlock r10000_10ffff_tmp463, byte_f3_byte_range_80_9f, r10000_10ffff_tmp464;
		BitBlock byte_f3_byte_range_80_9f_sfx, r10000_10ffff_tmp465;
		BitBlock byte_f3_byte_range_80_9f_sfx_sfx, sequence_f3_a0;
		BitBlock r10000_10ffff_tmp466, sequence_f3_a0_80, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_80_adv, r10000_10ffff_tmp467;
		BitBlock byte_range_82_9f, r10000_10ffff_tmp468, r10000_10ffff_tmp469;
		BitBlock byte_range_82_83, sequence_f3_a0_byte_range_82_83;
		BitBlock r10000_10ffff_tmp470, sequence_f3_a0_byte_range_82_83_sfx;
		BitBlock sequence_f3_a0_87, sequence_f3_a0_87_adv, r10000_10ffff_tmp471;
		BitBlock r10000_10ffff_tmp472, byte_range_88_bf;
		BitBlock sequence_f3_a0_byte_range_88_bf, r10000_10ffff_tmp473;
		BitBlock sequence_f3_a0_byte_range_88_bf_sfx, byte_range_a1_af;
		BitBlock byte_f3_byte_range_a1_af, r10000_10ffff_tmp474;
		BitBlock byte_f3_byte_range_a1_af_sfx, r10000_10ffff_tmp475;
		BitBlock byte_f3_byte_range_a1_af_sfx_sfx, sequence_f3_bf;
		BitBlock r10000_10ffff_tmp476, sequence_f3_bf_bf, sequence_f3_bf_adv;
		BitBlock sequence_f3_bf_bf_adv, r10000_10ffff_tmp477, byte_f4;
		BitBlock r10000_10ffff_tmp478, sequence_f4_8f, r10000_10ffff_tmp479;
		BitBlock sequence_f4_8f_bf, byte_f4_adv, sequence_f4_8f_adv;
		BitBlock sequence_f4_8f_bf_adv, r10000_10ffff_tmp480;




        struct_gc_Cn.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 333))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 11))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp2 = simd_andc(r370_3ff_tmp1, basis_bits.bit_6);
                byte_range_b8_b9 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_range_b8_b9);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp5 = simd_and(r100_3ff_tmp1, r370_3ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_andc(r100_3ff_tmp4, r80_7ff_tmp1);
                byte_range_80_83 = simd_andc(r370_3ff_tmp6, r80_7ff_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(1), byte_ce_adv));
                r370_3ff_tmp7 = simd_and(byte_ce_adv, byte_range_80_83);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp1, r370_3ff_tmp8);
                byte_8b = simd_and(r370_3ff_tmp6, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(byte_ce_adv, byte_8b);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r370_3ff_tmp10);
                byte_8d = simd_and(r370_3ff_tmp6, r100_3ff_tmp3);
                r370_3ff_tmp11 = simd_and(byte_ce_adv, byte_8d);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp13 = simd_and(r100_3ff_tmp4, r370_3ff_tmp12);
                r370_3ff_tmp14 = simd_andc(r370_3ff_tmp4, r80_7ff_tmp3);
                byte_a2 = simd_and(r370_3ff_tmp13, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_and(byte_ce_adv, byte_a2);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r370_3ff_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 4))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp5, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(2), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_80_8f);
              r400_5ff_tmp8 = simd_or(byte_range_d4_d5, r400_5ff_tmp7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(3, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp5, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(3), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp5, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp7);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(4, 1))) {
                  r530_58f_tmp1 = simd_or(r80_7ff_tmp3, r500_58f_tmp1);
                  byte_b0 = simd_andc(byte_range_b0_bf, r530_58f_tmp1);
                  byte_d4_adv = r500_58f_tmp4;
                  r530_58f_tmp2 = simd_and(byte_d4_adv, byte_b0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r530_58f_tmp2);
                  r530_58f_tmp3 = simd_and(r400_5ff_tmp5, r80_7ff_tmp4);
                  r530_58f_tmp4 = simd_or(basis_bits.bit_5, r500_58f_tmp1);
                  r530_58f_tmp5 = simd_not(r530_58f_tmp4);
                  r530_58f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r530_58f_tmp7 = simd_and(basis_bits.bit_5, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_or(simd_and(basis_bits.bit_4, r530_58f_tmp5), simd_andc(r530_58f_tmp7, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r530_58f_tmp3, r530_58f_tmp8);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(4), byte_d5_adv));
                  r530_58f_tmp9 = simd_and(byte_d5_adv, byte_range_97_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r530_58f_tmp9);
                  r530_58f_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r530_58f_tmp11 = simd_and(r400_5ff_tmp5, r530_58f_tmp10);
                  byte_a0 = simd_andc(r530_58f_tmp11, r530_58f_tmp1);
                  r530_58f_tmp12 = simd_and(byte_d5_adv, byte_a0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r530_58f_tmp12);
                  r530_58f_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp14 = simd_andc(r530_58f_tmp13, r500_58f_tmp1);
                  byte_88 = simd_and(byte_range_80_8f, r530_58f_tmp14);
                  byte_d6_adv = r400_5ff_tmp6;
                  r530_58f_tmp15 = simd_and(byte_d6_adv, byte_88);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r530_58f_tmp15);
                  r530_58f_tmp16 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r530_58f_tmp17 = simd_not(r500_58f_tmp1);
                  r530_58f_tmp18 = simd_or(simd_and(basis_bits.bit_5, r530_58f_tmp17), simd_andc(r530_58f_tmp6, basis_bits.bit_5));
                  byte_range_8b_8c = simd_and(r530_58f_tmp16, r530_58f_tmp18);
                  r530_58f_tmp19 = simd_and(byte_d6_adv, byte_range_8b_8c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r530_58f_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 2);
              }
              byte_range_90_bf = simd_and(r400_5ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp6, byte_range_90_bf);
              r400_5ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp11 = simd_and(r400_5ff_tmp1, r400_5ff_tmp10);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp11);
              r400_5ff_tmp12 = simd_or(r400_5ff_tmp9, byte_d7);
              if ((bitblock::any(r400_5ff_tmp12) || carryQ.CarryTest(5, 1))) {
                r590_5ff_tmp1 = simd_and(r400_5ff_tmp5, r80_7ff_tmp4);
                r590_5ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp3 = simd_or(r80_7ff_tmp3, r590_5ff_tmp2);
                byte_90 = simd_andc(r590_5ff_tmp1, r590_5ff_tmp3);
                byte_d6_adv = r400_5ff_tmp6;
                r590_5ff_tmp4 = simd_and(byte_d6_adv, byte_90);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r590_5ff_tmp4);
                byte_range_88_8f = simd_and(byte_range_80_8f, basis_bits.bit_4);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(5), byte_d7_adv));
                r590_5ff_tmp5 = simd_and(byte_d7_adv, byte_range_88_8f);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r590_5ff_tmp5);
                r590_5ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp7 = simd_and(r400_5ff_tmp5, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_and(r590_5ff_tmp7, basis_bits.bit_4);
                r590_5ff_tmp9 = simd_or(basis_bits.bit_5, r400_5ff_tmp10);
                byte_range_ab_af = simd_and(r590_5ff_tmp8, r590_5ff_tmp9);
                r590_5ff_tmp10 = simd_and(byte_d7_adv, byte_range_ab_af);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r590_5ff_tmp10);
                r590_5ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp12 = simd_and(r400_5ff_tmp5, r590_5ff_tmp11);
                r590_5ff_tmp13 = simd_and(basis_bits.bit_5, r590_5ff_tmp2);
                r590_5ff_tmp14 = simd_or(basis_bits.bit_4, r590_5ff_tmp13);
                byte_range_b5_bf = simd_and(r590_5ff_tmp12, r590_5ff_tmp14);
                r590_5ff_tmp15 = simd_and(byte_d7_adv, byte_range_b5_bf);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r590_5ff_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 4);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(6, 1))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp5, r600_6ff_tmp6);
              byte_9d = simd_and(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(6), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_9d);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r600_6ff_tmp8);
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 1);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(7, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(7), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(8, 1))) {
                r700_74f_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp2 = simd_and(r80_7ff_tmp7, r700_74f_tmp1);
                byte_8e = simd_and(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(8), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_8e);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                r700_74f_tmp5 = simd_not(r700_77f_tmp1);
                r700_74f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp7 = simd_or(simd_and(basis_bits.bit_5, r700_74f_tmp5), simd_andc(r700_74f_tmp6, basis_bits.bit_5));
                byte_range_8b_8c = simd_and(r700_74f_tmp4, r700_74f_tmp7);
                byte_dd_adv = r700_77f_tmp6;
                r700_74f_tmp8 = simd_and(byte_dd_adv, byte_range_8b_8c);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r700_74f_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(9, 2))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(9, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r780_7bf_tmp3 = simd_and(r780_7bf_tmp1, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp5 = simd_or(basis_bits.bit_4, r780_7bf_tmp4);
                byte_range_b2_bf = simd_and(r780_7bf_tmp3, r780_7bf_tmp5);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(9), byte_de_adv));
                r780_7bf_tmp6 = simd_and(byte_de_adv, byte_range_b2_bf);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r780_7bf_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
              r780_7ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp4 = simd_and(r80_7ff_tmp7, r780_7ff_tmp3);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(10, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r7c0_7ff_tmp3 = simd_and(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(r7c0_7ff_tmp3, basis_bits.bit_4);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_5, r780_7ff_tmp3);
                byte_range_bb_bf = simd_and(r7c0_7ff_tmp4, r7c0_7ff_tmp5);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(10), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, byte_range_bb_bf);
                struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r7c0_7ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 11);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(11, 139))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(11), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(12, 98))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(12, 67))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(12, 30))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r800_fff_tmp1, r800_fff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(13), sequence_e0_a0_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a0_adv, byte_range_ae_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp5);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_and(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp9 = simd_and(r800_fff_tmp3, r800_fff_tmp8);
                  byte_bf = simd_and(r800_fff_tmp7, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(sequence_e0_a0_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp12 = simd_andc(r800_fff_tmp11, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp5, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_andc(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp14, r800_fff_tmp15);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(14), sequence_e0_a1_adv));
                  r800_fff_tmp16 = simd_and(sequence_e0_a1_adv, byte_range_9c_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_3, r800_fff_tmp9);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_2, r800_fff_tmp17);
                  byte_range_9f_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(sequence_e0_a1_adv, byte_range_9f_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp21 = simd_andc(r800_fff_tmp20, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(15), sequence_e0_a2_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_a2_adv, byte_range_80_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_or(basis_bits.bit_5, r800_fff_tmp8);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_4, r800_fff_tmp23);
                  byte_range_b3_bf = simd_and(r800_fff_tmp7, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_a2_adv, byte_range_b3_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_2, r800_fff_tmp27);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp5, r800_fff_tmp28);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(16), sequence_e0_a3_adv));
                  r800_fff_tmp29 = simd_and(sequence_e0_a3_adv, byte_range_80_a3);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(r800_ffff_tmp2, r800_fff_tmp20);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp30);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_andc(r800_ffff_tmp5, r800_fff_tmp31);
                  byte_84 = simd_and(r800_fff_tmp32, r800_ffff_tmp4);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(17), sequence_e0_a6_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_a6_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(r800_fff_tmp32, r800_fff_tmp3);
                  r800_fff_tmp35 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_8d_8e = simd_and(r800_fff_tmp34, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(sequence_e0_a6_adv, byte_range_8d_8e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_andc(r800_fff_tmp14, r800_ffff_tmp1);
                  byte_range_91_92 = simd_and(r800_fff_tmp37, r800_fff_tmp35);
                  r800_fff_tmp38 = simd_and(sequence_e0_a6_adv, byte_range_91_92);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp40 = simd_and(r800_fff_tmp39, r800_fff_tmp11);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_and(sequence_e0_a6_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp41);
                  byte_b1 = simd_and(r800_fff_tmp7, r800_fff_tmp12);
                  r800_fff_tmp42 = simd_and(sequence_e0_a6_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_andc(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp44 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp45 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp44), simd_andc(r800_fff_tmp8, basis_bits.bit_5));
                  byte_range_b3_b5 = simd_and(r800_fff_tmp43, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_a6_adv, byte_range_b3_b5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp39, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r800_fff_tmp7, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_a6_adv, byte_range_ba_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp49);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp32, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r800_fff_tmp50, r800_fff_tmp35);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(18), sequence_e0_a7_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_a7_adv, byte_range_85_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp32, r800_fff_tmp39);
                  byte_range_89_8a = simd_and(r800_fff_tmp52, r800_fff_tmp35);
                  r800_fff_tmp53 = simd_and(sequence_e0_a7_adv, byte_range_89_8a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(basis_bits.bit_5, r800_fff_tmp8);
                  r800_fff_tmp55 = simd_or(basis_bits.bit_4, r800_fff_tmp54);
                  r800_fff_tmp56 = simd_not(r800_fff_tmp55);
                  r800_fff_tmp57 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp56), simd_andc(r800_fff_tmp9, basis_bits.bit_3));
                  byte_range_8f_96 = simd_and(byte_range_80_9f, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(sequence_e0_a7_adv, byte_range_8f_96);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp58);
                  byte_range_98_9b = simd_and(r800_fff_tmp14, r800_fff_tmp39);
                  r800_fff_tmp59 = simd_and(sequence_e0_a7_adv, byte_range_98_9b);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_and(r800_fff_tmp3, r800_fff_tmp20);
                  byte_9e = simd_and(r800_fff_tmp14, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(sequence_e0_a7_adv, byte_9e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_and(sequence_e0_a7_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp63);
                  byte_range_bc_bf = simd_and(r800_fff_tmp7, r800_fff_tmp3);
                  r800_fff_tmp64 = simd_and(sequence_e0_a7_adv, byte_range_bc_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_andc(r800_fff_tmp39, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp65);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  byte_80 = simd_andc(r800_fff_tmp32, r800_1fff_tmp1);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(19), sequence_e0_a8_adv));
                  r800_fff_tmp66 = simd_and(sequence_e0_a8_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(sequence_e0_a8_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp69 = simd_xor(basis_bits.bit_5, r800_fff_tmp8);
                  byte_range_8b_8e = simd_and(r800_fff_tmp68, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(sequence_e0_a8_adv, byte_range_8b_8e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp70);
                  r800_fff_tmp71 = simd_and(sequence_e0_a8_adv, byte_range_91_92);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp71);
                  r800_fff_tmp72 = simd_and(sequence_e0_a8_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(sequence_e0_a8_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp73);
                  byte_b4 = simd_and(r800_fff_tmp7, r800_ffff_tmp4);
                  r800_fff_tmp74 = simd_and(sequence_e0_a8_adv, byte_b4);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp74);
                  byte_b7 = simd_and(r800_fff_tmp7, r800_fff_tmp49);
                  r800_fff_tmp75 = simd_and(sequence_e0_a8_adv, byte_b7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp75);
                  r800_fff_tmp76 = simd_and(sequence_e0_a8_adv, byte_range_ba_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(r800_fff_tmp3, r800_fff_tmp11);
                  byte_bd = simd_and(r800_fff_tmp7, r800_fff_tmp77);
                  r800_fff_tmp78 = simd_and(sequence_e0_a8_adv, byte_bd);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp78);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp79 = simd_andc(r800_fff_tmp32, basis_bits.bit_4);
                  byte_range_83_86 = simd_and(r800_fff_tmp79, r800_fff_tmp69);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(20), sequence_e0_a9_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_a9_adv, byte_range_83_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(sequence_e0_a9_adv, byte_range_89_8a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp83 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp82), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(byte_range_80_9f, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_a9_adv, byte_range_8e_90);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp86 = simd_not(r800_fff_tmp85);
                  r800_fff_tmp87 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp86), simd_andc(r800_fff_tmp87, basis_bits.bit_4));
                  byte_range_92_98 = simd_and(r800_fff_tmp14, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_a9_adv, byte_range_92_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp89);
                  byte_9d = simd_and(r800_fff_tmp14, r800_fff_tmp77);
                  r800_fff_tmp90 = simd_and(sequence_e0_a9_adv, byte_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp92 = simd_or(basis_bits.bit_4, r800_fff_tmp91);
                  r800_fff_tmp93 = simd_or(basis_bits.bit_3, r800_fff_tmp92);
                  r800_fff_tmp94 = simd_not(r800_fff_tmp93);
                  r800_fff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp94), simd_andc(r800_fff_tmp17, basis_bits.bit_2));
                  byte_range_9f_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp95);
                  r800_fff_tmp96 = simd_and(sequence_e0_a9_adv, byte_range_9f_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp96);
                  byte_range_b6_bf = simd_and(r800_fff_tmp7, r800_fff_tmp92);
                  r800_fff_tmp97 = simd_and(sequence_e0_a9_adv, byte_range_b6_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp39, r800_fff_tmp20);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp98);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(21), sequence_e0_aa_adv));
                  r800_fff_tmp99 = simd_and(sequence_e0_aa_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(sequence_e0_aa_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp100);
                  byte_8e = simd_and(r800_fff_tmp32, r800_fff_tmp60);
                  r800_fff_tmp101 = simd_and(sequence_e0_aa_adv, byte_8e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp101);
                  byte_92 = simd_and(r800_fff_tmp14, r800_fff_tmp21);
                  r800_fff_tmp102 = simd_and(sequence_e0_aa_adv, byte_92);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_and(sequence_e0_aa_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp103);
                  r800_fff_tmp104 = simd_and(sequence_e0_aa_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp104);
                  r800_fff_tmp105 = simd_and(sequence_e0_aa_adv, byte_b4);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(sequence_e0_aa_adv, byte_range_ba_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp39, r800_fff_tmp8);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp107);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  byte_86 = simd_and(r800_fff_tmp32, r800_fff_tmp30);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(22), sequence_e0_ab_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_ab_adv, byte_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp108);
                  byte_8a = simd_and(r800_fff_tmp32, r800_fff_tmp98);
                  r800_fff_tmp109 = simd_and(sequence_e0_ab_adv, byte_8a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp109);
                  byte_range_8e_8f = simd_and(r800_fff_tmp32, r800_fff_tmp4);
                  r800_fff_tmp110 = simd_and(sequence_e0_ab_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_or(basis_bits.bit_4, r800_fff_tmp85);
                  byte_range_91_9f = simd_and(r800_fff_tmp14, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(sequence_e0_ab_adv, byte_range_91_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp112);
                  r800_fff_tmp113 = simd_and(sequence_e0_ab_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp113);
                  r800_fff_tmp114 = simd_or(basis_bits.bit_4, r800_fff_tmp87);
                  byte_range_b2_bf = simd_and(r800_fff_tmp7, r800_fff_tmp114);
                  r800_fff_tmp115 = simd_and(sequence_e0_ab_adv, byte_range_b2_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_andc(r800_fff_tmp3, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp116);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(23), sequence_e0_ac_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_ac_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(sequence_e0_ac_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_ac_adv, byte_range_8d_8e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_ac_adv, byte_range_91_92);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp120);
                  r800_fff_tmp121 = simd_and(sequence_e0_ac_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_and(sequence_e0_ac_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp122);
                  r800_fff_tmp123 = simd_and(sequence_e0_ac_adv, byte_b4);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp123);
                  r800_fff_tmp124 = simd_and(sequence_e0_ac_adv, byte_range_ba_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp124);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp77);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(24), sequence_e0_ad_adv));
                  r800_fff_tmp125 = simd_and(sequence_e0_ad_adv, byte_range_85_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp125);
                  r800_fff_tmp126 = simd_and(sequence_e0_ad_adv, byte_range_89_8a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp126);
                  r800_fff_tmp127 = simd_not(r800_fff_tmp92);
                  r800_fff_tmp128 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp127), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_95 = simd_and(byte_range_80_9f, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(sequence_e0_ad_adv, byte_range_8e_95);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp129);
                  r800_fff_tmp130 = simd_and(sequence_e0_ad_adv, byte_range_98_9b);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp130);
                  r800_fff_tmp131 = simd_and(sequence_e0_ad_adv, byte_9e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp131);
                  r800_fff_tmp132 = simd_and(sequence_e0_ad_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp132);
                  byte_range_b8_bf = simd_and(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp133 = simd_and(sequence_e0_ad_adv, byte_range_b8_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp133);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp60);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  byte_range_80_81 = simd_andc(r800_fff_tmp32, r800_4dff_tmp1);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(25), sequence_e0_ae_adv));
                  r800_fff_tmp134 = simd_and(sequence_e0_ae_adv, byte_range_80_81);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(sequence_e0_ae_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp135);
                  byte_range_8b_8d = simd_and(r800_fff_tmp68, r800_fff_tmp45);
                  r800_fff_tmp136 = simd_and(sequence_e0_ae_adv, byte_range_8b_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp136);
                  byte_91 = simd_and(r800_fff_tmp14, r800_fff_tmp12);
                  r800_fff_tmp137 = simd_and(sequence_e0_ae_adv, byte_91);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp137);
                  r800_fff_tmp138 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp86), simd_andc(r800_fff_tmp91, basis_bits.bit_4));
                  byte_range_96_98 = simd_and(r800_fff_tmp14, r800_fff_tmp138);
                  r800_fff_tmp139 = simd_and(sequence_e0_ae_adv, byte_range_96_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp139);
                  byte_9b = simd_and(r800_fff_tmp14, r800_fff_tmp107);
                  r800_fff_tmp140 = simd_and(sequence_e0_ae_adv, byte_9b);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp140);
                  r800_fff_tmp141 = simd_and(sequence_e0_ae_adv, byte_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  byte_range_a0_a2 = simd_andc(r800_fff_tmp142, r800_fff_tmp8);
                  r800_fff_tmp143 = simd_and(sequence_e0_ae_adv, byte_range_a0_a2);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp143);
                  r800_fff_tmp144 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  byte_range_a5_a7 = simd_and(r800_fff_tmp144, r800_ffff_tmp3);
                  r800_fff_tmp145 = simd_and(sequence_e0_ae_adv, byte_range_a5_a7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp145);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_ab_ad = simd_and(r800_fff_tmp146, r800_fff_tmp45);
                  r800_fff_tmp147 = simd_and(sequence_e0_ae_adv, byte_range_ab_ad);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp147);
                  r800_fff_tmp148 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bd = simd_and(byte_range_b8_bf, r800_fff_tmp148);
                  r800_fff_tmp149 = simd_and(sequence_e0_ae_adv, byte_range_ba_bd);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp149);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp9);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_range_83_85 = simd_and(r800_fff_tmp79, r800_fff_tmp45);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(26), sequence_e0_af_adv));
                  r800_fff_tmp150 = simd_and(sequence_e0_af_adv, byte_range_83_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp150);
                  byte_89 = simd_and(r800_fff_tmp32, r800_fff_tmp40);
                  r800_fff_tmp151 = simd_and(sequence_e0_af_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(sequence_e0_af_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp152);
                  r800_fff_tmp153 = simd_andc(r800_fff_tmp14, basis_bits.bit_4);
                  r800_fff_tmp154 = simd_not(r800_fff_tmp8);
                  r800_fff_tmp155 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp154), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_91_96 = simd_and(r800_fff_tmp153, r800_fff_tmp155);
                  r800_fff_tmp156 = simd_and(sequence_e0_af_adv, byte_range_91_96);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp156);
                  r800_fff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp94), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  byte_range_98_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp157);
                  r800_fff_tmp158 = simd_and(sequence_e0_af_adv, byte_range_98_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp158);
                  byte_range_bb_bf = simd_and(byte_range_b8_bf, r800_fff_tmp23);
                  r800_fff_tmp159 = simd_and(sequence_e0_af_adv, byte_range_bb_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp159);
                  byte_b0 = simd_andc(r800_fff_tmp7, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(27), sequence_e0_b0_adv));
                  r800_fff_tmp160 = simd_and(sequence_e0_b0_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp160);
                  byte_8d = simd_and(r800_fff_tmp32, r800_fff_tmp77);
                  r800_fff_tmp161 = simd_and(sequence_e0_b0_adv, byte_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp161);
                  r800_fff_tmp162 = simd_and(sequence_e0_b0_adv, byte_91);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp162);
                  r800_fff_tmp163 = simd_and(sequence_e0_b0_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp163);
                  r800_fff_tmp164 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp165 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp164), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(byte_range_b8_bf, r800_fff_tmp165);
                  r800_fff_tmp166 = simd_and(sequence_e0_b0_adv, byte_range_ba_bc);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp166);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp167 = simd_and(r800_ffff_tmp2, r800_fff_tmp11);
                  byte_85 = simd_and(r800_fff_tmp32, r800_fff_tmp167);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(28), sequence_e0_b1_adv));
                  r800_fff_tmp168 = simd_and(sequence_e0_b1_adv, byte_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp168);
                  r800_fff_tmp169 = simd_and(sequence_e0_b1_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp169);
                  r800_fff_tmp170 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp171 = simd_or(basis_bits.bit_4, r800_fff_tmp170);
                  r800_fff_tmp172 = simd_not(r800_fff_tmp171);
                  r800_fff_tmp173 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp172), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_94 = simd_and(byte_range_80_9f, r800_fff_tmp173);
                  r800_fff_tmp174 = simd_and(sequence_e0_b1_adv, byte_range_8e_94);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp174);
                  byte_97 = simd_and(r800_fff_tmp14, r800_fff_tmp49);
                  r800_fff_tmp175 = simd_and(sequence_e0_b1_adv, byte_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp175);
                  r800_fff_tmp176 = simd_and(r800_fff_tmp14, basis_bits.bit_4);
                  byte_range_9a_9f = simd_and(r800_fff_tmp176, r800_fff_tmp87);
                  r800_fff_tmp177 = simd_and(sequence_e0_b1_adv, byte_range_9a_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp177);
                  r800_fff_tmp178 = simd_and(sequence_e0_b1_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp178);
                  byte_range_b0_b7 = r800_fff_tmp43;
                  r800_fff_tmp179 = simd_and(sequence_e0_b1_adv, byte_range_b0_b7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp179);
                  byte_b2 = simd_and(r800_fff_tmp7, r800_fff_tmp21);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(29), sequence_e0_b2_adv));
                  r800_fff_tmp180 = simd_and(sequence_e0_b2_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp180);
                  r800_fff_tmp181 = simd_and(sequence_e0_b2_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp181);
                  r800_fff_tmp182 = simd_and(sequence_e0_b2_adv, byte_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp182);
                  r800_fff_tmp183 = simd_and(sequence_e0_b2_adv, byte_91);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp183);
                  r800_fff_tmp184 = simd_and(sequence_e0_b2_adv, byte_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp184);
                  r800_fff_tmp185 = simd_and(sequence_e0_b2_adv, byte_b4);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp185);
                  r800_fff_tmp186 = simd_and(sequence_e0_b2_adv, byte_range_ba_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp186);
                  byte_b3 = simd_and(r800_fff_tmp7, r800_fff_tmp26);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(30), sequence_e0_b3_adv));
                  r800_fff_tmp187 = simd_and(sequence_e0_b3_adv, byte_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp187);
                  r800_fff_tmp188 = simd_and(sequence_e0_b3_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp188);
                  r800_fff_tmp189 = simd_and(sequence_e0_b3_adv, byte_range_8e_94);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp189);
                  r800_fff_tmp190 = simd_not(r800_fff_tmp91);
                  r800_fff_tmp191 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp190), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  byte_range_97_9d = simd_and(r800_fff_tmp14, r800_fff_tmp191);
                  r800_fff_tmp192 = simd_and(sequence_e0_b3_adv, byte_range_97_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp192);
                  byte_9f = simd_and(r800_fff_tmp14, r800_fff_tmp9);
                  r800_fff_tmp193 = simd_and(sequence_e0_b3_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp193);
                  r800_fff_tmp194 = simd_and(sequence_e0_b3_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp194);
                  r800_fff_tmp195 = simd_and(sequence_e0_b3_adv, byte_b0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp195);
                  r800_fff_tmp196 = simd_and(sequence_e0_b3_adv, byte_range_b3_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp196);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(31), sequence_e0_b4_adv));
                  r800_fff_tmp197 = simd_and(sequence_e0_b4_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp197);
                  r800_fff_tmp198 = simd_and(sequence_e0_b4_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp198);
                  r800_fff_tmp199 = simd_and(sequence_e0_b4_adv, byte_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp199);
                  r800_fff_tmp200 = simd_and(sequence_e0_b4_adv, byte_91);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp200);
                  r800_fff_tmp201 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp164), simd_andc(r800_fff_tmp8, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(byte_range_b8_bf, r800_fff_tmp201);
                  r800_fff_tmp202 = simd_and(sequence_e0_b4_adv, byte_range_bb_bc);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp202);
                  byte_b5 = simd_and(r800_fff_tmp7, r800_fff_tmp167);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(32), sequence_e0_b5_adv));
                  r800_fff_tmp203 = simd_and(sequence_e0_b5_adv, byte_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp203);
                  r800_fff_tmp204 = simd_and(sequence_e0_b5_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp204);
                  r800_fff_tmp205 = simd_and(sequence_e0_b5_adv, byte_range_8f_96);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp205);
                  byte_range_98_9f = r800_fff_tmp176;
                  r800_fff_tmp206 = simd_and(sequence_e0_b5_adv, byte_range_98_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp206);
                  r800_fff_tmp207 = simd_and(sequence_e0_b5_adv, byte_range_a4_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp207);
                  byte_range_b6_b8 = simd_and(r800_fff_tmp7, r800_fff_tmp138);
                  r800_fff_tmp208 = simd_and(sequence_e0_b5_adv, byte_range_b6_b8);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp208);
                  byte_b6 = simd_and(r800_fff_tmp7, r800_fff_tmp30);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(33), sequence_e0_b6_adv));
                  r800_fff_tmp209 = simd_and(sequence_e0_b6_adv, byte_range_80_81);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp209);
                  r800_fff_tmp210 = simd_and(sequence_e0_b6_adv, byte_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp210);
                  r800_fff_tmp211 = simd_not(r800_fff_tmp87);
                  r800_fff_tmp212 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp211), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  byte_range_97_99 = simd_and(r800_fff_tmp14, r800_fff_tmp212);
                  r800_fff_tmp213 = simd_and(sequence_e0_b6_adv, byte_range_97_99);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp213);
                  r800_fff_tmp214 = simd_and(sequence_e0_b6_adv, byte_b2);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp214);
                  byte_bc = simd_and(r800_fff_tmp7, r800_fff_tmp116);
                  r800_fff_tmp215 = simd_and(sequence_e0_b6_adv, byte_bc);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp215);
                  byte_range_be_bf = simd_and(r800_fff_tmp7, r800_fff_tmp4);
                  r800_fff_tmp216 = simd_and(sequence_e0_b6_adv, byte_range_be_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp216);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_range_87_89 = simd_and(r800_fff_tmp32, r800_fff_tmp212);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(34), sequence_e0_b7_adv));
                  r800_fff_tmp217 = simd_and(sequence_e0_b7_adv, byte_range_87_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp217);
                  r800_fff_tmp218 = simd_and(sequence_e0_b7_adv, byte_range_8b_8e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp218);
                  byte_95 = simd_and(r800_fff_tmp14, r800_fff_tmp167);
                  r800_fff_tmp219 = simd_and(sequence_e0_b7_adv, byte_95);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp219);
                  r800_fff_tmp220 = simd_and(sequence_e0_b7_adv, byte_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp220);
                  r800_fff_tmp221 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_a0_a5 = simd_andc(r800_fff_tmp221, r800_fff_tmp91);
                  r800_fff_tmp222 = simd_and(sequence_e0_b7_adv, byte_range_a0_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp222);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp7, r800_4dff_tmp1);
                  r800_fff_tmp223 = simd_and(sequence_e0_b7_adv, byte_range_b0_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp223);
                  byte_range_b5_bf = simd_and(r800_fff_tmp7, r800_fff_tmp171);
                  r800_fff_tmp224 = simd_and(sequence_e0_b7_adv, byte_range_b5_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp224);
                  byte_b8 = simd_and(r800_fff_tmp7, r800_fff_tmp65);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(35), sequence_e0_b8_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_b8_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp225);
                  byte_range_bb_be = simd_and(byte_range_b8_bf, r800_fff_tmp69);
                  r800_fff_tmp226 = simd_and(sequence_e0_b8_adv, byte_range_bb_be);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp226);
                  byte_b9 = simd_and(r800_fff_tmp7, r800_fff_tmp40);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp227 = simd_and(basis_bits.bit_3, r800_fff_tmp3);
                  r800_fff_tmp228 = simd_or(basis_bits.bit_2, r800_fff_tmp227);
                  byte_range_9c_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp228);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(36), sequence_e0_b9_adv));
                  r800_fff_tmp229 = simd_and(sequence_e0_b9_adv, byte_range_9c_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp229);
                  byte_ba = simd_and(r800_fff_tmp7, r800_fff_tmp98);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(37), sequence_e0_ba_adv));
                  r800_fff_tmp230 = simd_and(sequence_e0_ba_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp230);
                  byte_83 = simd_and(r800_fff_tmp32, r800_fff_tmp26);
                  r800_fff_tmp231 = simd_and(sequence_e0_ba_adv, byte_83);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp231);
                  r800_fff_tmp232 = simd_and(sequence_e0_ba_adv, byte_range_85_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp232);
                  r800_fff_tmp233 = simd_and(sequence_e0_ba_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp233);
                  byte_range_8b_8c = simd_and(r800_fff_tmp68, r800_fff_tmp201);
                  r800_fff_tmp234 = simd_and(sequence_e0_ba_adv, byte_range_8b_8c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp234);
                  r800_fff_tmp235 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp236 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp235), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_93 = simd_and(byte_range_80_9f, r800_fff_tmp236);
                  r800_fff_tmp237 = simd_and(sequence_e0_ba_adv, byte_range_8e_93);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp237);
                  byte_98 = simd_and(r800_fff_tmp14, r800_fff_tmp65);
                  r800_fff_tmp238 = simd_and(sequence_e0_ba_adv, byte_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp238);
                  r800_fff_tmp239 = simd_and(sequence_e0_ba_adv, byte_a0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp239);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  r800_fff_tmp240 = simd_and(sequence_e0_ba_adv, byte_a4);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp240);
                  r800_fff_tmp241 = simd_and(sequence_e0_ba_adv, byte_a6);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp241);
                  r800_fff_tmp242 = simd_andc(r800_fff_tmp39, basis_bits.bit_6);
                  byte_range_a8_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp242);
                  r800_fff_tmp243 = simd_and(sequence_e0_ba_adv, byte_range_a8_a9);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp243);
                  r800_fff_tmp244 = simd_and(sequence_e0_ba_adv, byte_ac);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp244);
                  r800_fff_tmp245 = simd_and(sequence_e0_ba_adv, byte_ba);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp245);
                  r800_fff_tmp246 = simd_and(sequence_e0_ba_adv, byte_range_be_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp246);
                  byte_bb = simd_and(r800_fff_tmp7, r800_fff_tmp107);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(38), sequence_e0_bb_adv));
                  r800_fff_tmp247 = simd_and(sequence_e0_bb_adv, byte_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp247);
                  byte_87 = simd_and(r800_fff_tmp32, r800_fff_tmp49);
                  r800_fff_tmp248 = simd_and(sequence_e0_bb_adv, byte_87);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp248);
                  r800_fff_tmp249 = simd_and(sequence_e0_bb_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp249);
                  byte_range_9a_9b = simd_and(r800_fff_tmp14, r800_fff_tmp47);
                  r800_fff_tmp250 = simd_and(sequence_e0_bb_adv, byte_range_9a_9b);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp250);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp251 = simd_and(sequence_e0_bb_adv, byte_range_a0_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp251);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_88 = simd_and(r800_fff_tmp32, r800_fff_tmp65);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(39), sequence_e0_bd_adv));
                  r800_fff_tmp252 = simd_and(sequence_e0_bd_adv, byte_88);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp252);
                  r800_fff_tmp253 = simd_and(r800_fff_tmp3, r800_ffff_tmp3);
                  r800_fff_tmp254 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp82), simd_andc(r800_fff_tmp253, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(byte_range_a0_bf, r800_fff_tmp254);
                  r800_fff_tmp255 = simd_and(sequence_e0_bd_adv, byte_range_ad_b0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp255);
                  byte_be = simd_and(r800_fff_tmp7, r800_fff_tmp60);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(40), sequence_e0_be_adv));
                  r800_fff_tmp256 = simd_and(sequence_e0_be_adv, byte_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp256);
                  r800_fff_tmp257 = simd_and(sequence_e0_be_adv, byte_bd);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp257);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(41), sequence_e0_bf_adv));
                  r800_fff_tmp258 = simd_and(sequence_e0_bf_adv, byte_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp258);
                  r800_fff_tmp259 = simd_and(basis_bits.bit_4, r800_fff_tmp23);
                  r800_fff_tmp260 = simd_and(basis_bits.bit_3, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(basis_bits.bit_2, r800_fff_tmp260);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp261);
                  r800_fff_tmp262 = simd_and(sequence_e0_bf_adv, byte_range_9b_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r800_fff_tmp262);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 30);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(42, 37))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(42), r1000_1fff_tmp5));
                  sequence_e1_83 = simd_and(r1000_1fff_tmp5, byte_83);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_86 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(43), sequence_e1_83_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_83_adv, byte_86);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_88_8c = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(sequence_e1_83_adv, byte_range_88_8c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp12, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_83_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp15, r800_1fff_tmp2);
                  byte_89 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp16);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(44), sequence_e1_89_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_89_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_89_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp3);
                  byte_97 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_89_adv, byte_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp22);
                  byte_99 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp16);
                  r1000_1fff_tmp23 = simd_and(sequence_e1_89_adv, byte_99);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp23);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp13);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_89_adv, byte_range_9e_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp6);
                  byte_8a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp25);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(45), sequence_e1_8a_adv));
                  r1000_1fff_tmp26 = simd_and(sequence_e1_8a_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_8a_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp28);
                  byte_b1 = simd_and(r1000_1fff_tmp29, r800_1fff_tmp3);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_8a_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_8a_adv, byte_range_b6_b7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp3);
                  byte_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_8a_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp3);
                  byte_8b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(46), sequence_e1_8b_adv));
                  r1000_1fff_tmp36 = simd_and(sequence_e1_8b_adv, byte_81);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp36);
                  byte_range_86_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp31);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_8b_adv, byte_range_86_87);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(sequence_e1_8b_adv, byte_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp12, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_91 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp3);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(47), sequence_e1_8c_adv));
                  r1000_1fff_tmp40 = simd_and(sequence_e1_8c_adv, byte_91);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp40);
                  byte_range_96_97 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp31);
                  r1000_1fff_tmp41 = simd_and(sequence_e1_8c_adv, byte_range_96_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp12, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp20, basis_bits.bit_4);
                  r1000_1fff_tmp44 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp45 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp44), simd_andc(r1000_1fff_tmp3, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp45);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(48), sequence_e1_8d_adv));
                  r1000_1fff_tmp46 = simd_and(sequence_e1_8d_adv, byte_range_9b_9c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp46);
                  r1000_1fff_tmp47 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp12);
                  byte_range_bd_bf = simd_and(r1000_1fff_tmp47, r800_ffff_tmp3);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_8d_adv, byte_range_bd_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp6);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp49);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp50 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp50);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(49), sequence_e1_8e_adv));
                  r1000_1fff_tmp51 = simd_and(sequence_e1_8e_adv, byte_range_9a_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp51);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp33);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp52 = simd_or(basis_bits.bit_4, r1000_1fff_tmp10);
                  byte_range_b5_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp52);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(50), sequence_e1_8f_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_8f_adv, byte_range_b5_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp53);
                  byte_9a = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp25);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp12);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp54, r800_ffff_tmp3);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(51), sequence_e1_9a_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_9a_adv, byte_range_9d_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp55);
                  byte_9b = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp35);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp29, basis_bits.bit_4);
                  r1000_1fff_tmp57 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp57);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(52), sequence_e1_9b_adv));
                  r1000_1fff_tmp58 = simd_and(sequence_e1_9b_adv, byte_range_b9_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp58);
                  byte_9c = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp39);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(53), sequence_e1_9c_adv));
                  r1000_1fff_tmp59 = simd_and(sequence_e1_9c_adv, byte_8d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp59);
                  byte_range_95_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp52);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_9c_adv, byte_range_95_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(basis_bits.bit_5, r1000_1fff_tmp3);
                  r1000_1fff_tmp62 = simd_or(basis_bits.bit_4, r1000_1fff_tmp61);
                  byte_range_b7_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_9c_adv, byte_range_b7_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp63);
                  byte_9d = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp42);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  byte_range_94_9f = simd_and(r1000_1fff_tmp20, r800_ffff_tmp1);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(54), sequence_e1_9d_adv));
                  r1000_1fff_tmp64 = simd_and(sequence_e1_9d_adv, byte_range_94_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp42);
                  r1000_1fff_tmp66 = simd_and(sequence_e1_9d_adv, byte_ad);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_9d_adv, byte_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp67);
                  byte_range_b4_bf = simd_and(r1000_1fff_tmp29, r800_ffff_tmp1);
                  r1000_1fff_tmp68 = simd_and(sequence_e1_9d_adv, byte_range_b4_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp68);
                  byte_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp33);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(55), sequence_e1_9f_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_9f_adv, byte_range_9e_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp65, basis_bits.bit_4);
                  byte_range_aa_af = simd_and(r1000_1fff_tmp70, r1000_1fff_tmp50);
                  r1000_1fff_tmp71 = simd_and(sequence_e1_9f_adv, byte_range_aa_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp71);
                  byte_range_ba_bf = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp50);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_9f_adv, byte_range_ba_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp72);
                  byte_a0 = simd_andc(r1000_1fff_tmp65, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(56), sequence_e1_a0_adv));
                  r1000_1fff_tmp73 = simd_and(sequence_e1_a0_adv, byte_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_a0_adv, byte_range_9a_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp74);
                  byte_a1 = simd_and(r1000_1fff_tmp65, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  byte_range_b8_bf = r1000_1fff_tmp56;
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(57), sequence_e1_a1_adv));
                  r1000_1fff_tmp75 = simd_and(sequence_e1_a1_adv, byte_range_b8_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp75);
                  r1000_1fff_tmp76 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp76);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp77 = simd_or(basis_bits.bit_5, r1000_1fff_tmp3);
                  byte_range_ab_af = simd_and(r1000_1fff_tmp70, r1000_1fff_tmp77);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(58), sequence_e1_a2_adv));
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a2_adv, byte_range_ab_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp78);
                  byte_a3 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp4);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp79 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp80 = simd_or(basis_bits.bit_4, r1000_1fff_tmp79);
                  byte_range_b6_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp80);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(59), sequence_e1_a3_adv));
                  r1000_1fff_tmp81 = simd_and(sequence_e1_a3_adv, byte_range_b6_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp81);
                  byte_a4 = simd_and(r1000_1fff_tmp65, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(60), sequence_e1_a4_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a4_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp82);
                  byte_range_ac_af = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp12);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_a4_adv, byte_range_ac_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp83);
                  byte_range_bc_bf = r1000_1fff_tmp47;
                  r1000_1fff_tmp84 = simd_and(sequence_e1_a4_adv, byte_range_bc_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp85);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp86 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r1000_1fff_tmp86, r800_ffff_tmp3);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(61), sequence_e1_a5_adv));
                  r1000_1fff_tmp87 = simd_and(sequence_e1_a5_adv, byte_range_81_83);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp87);
                  byte_range_ae_af = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp13);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_a5_adv, byte_range_ae_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(sequence_e1_a5_adv, byte_range_b5_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp89);
                  byte_a6 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp7);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(62), sequence_e1_a6_adv));
                  r1000_1fff_tmp90 = simd_and(sequence_e1_a6_adv, byte_range_ac_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp90);
                  byte_a7 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp21);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_8a_8f = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp50);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(63), sequence_e1_a7_adv));
                  r1000_1fff_tmp91 = simd_and(sequence_e1_a7_adv, byte_range_8a_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp93 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp92), simd_andc(r1000_1fff_tmp3, basis_bits.bit_5));
                  byte_range_9b_9d = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(sequence_e1_a7_adv, byte_range_9b_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_andc(r1000_1fff_tmp15, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp95);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp96 = simd_andc(r1000_1fff_tmp12, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp96);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(64), sequence_e1_a8_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_a8_adv, byte_range_9c_9d);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp97);
                  byte_a9 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp16);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(65), sequence_e1_a9_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_a9_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp98);
                  r1000_1fff_tmp99 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(byte_range_bc_bf, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_a9_adv, byte_range_bd_be);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp100);
                  byte_aa = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp25);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(66), sequence_e1_aa_adv));
                  r1000_1fff_tmp101 = simd_and(sequence_e1_aa_adv, byte_range_8a_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(sequence_e1_aa_adv, byte_range_9a_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_and(sequence_e1_aa_adv, byte_range_ae_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp103);
                  r1000_1fff_tmp104 = simd_and(sequence_e1_aa_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp104);
                  byte_ab = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp35);
                  sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(67), sequence_e1_ab_adv));
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp105);
                  r1000_1fff_tmp106 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp107 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_range_8c_8f = simd_and(r1000_1fff_tmp107, r1000_1fff_tmp12);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(68), sequence_e1_ad_adv));
                  r1000_1fff_tmp108 = simd_and(sequence_e1_ad_adv, byte_range_8c_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp108);
                  r1000_1fff_tmp109 = simd_and(byte_range_80_bf, r1000_1fff_tmp28);
                  r1000_1fff_tmp110 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp12);
                  r1000_1fff_tmp111 = simd_and(sequence_e1_ad_adv, byte_range_bd_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp111);
                  byte_af = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp33);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp112 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b4_bb = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp112);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(69), sequence_e1_af_adv));
                  r1000_1fff_tmp113 = simd_and(sequence_e1_af_adv, byte_range_b4_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp113);
                  byte_b0 = simd_andc(r1000_1fff_tmp109, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp114 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp15);
                  byte_range_b8_ba = simd_andc(r1000_1fff_tmp114, r1000_1fff_tmp3);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(70), sequence_e1_b0_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_b0_adv, byte_range_b8_ba);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp115);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp116 = simd_and(r1000_1fff_tmp107, basis_bits.bit_4);
                  r1000_1fff_tmp117 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp44), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_8a_8c = simd_and(r1000_1fff_tmp116, r1000_1fff_tmp117);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(71), sequence_e1_b1_adv));
                  r1000_1fff_tmp118 = simd_and(sequence_e1_b1_adv, byte_range_8a_8c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp118);
                  byte_b2 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp76);
                  sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(72), sequence_e1_b2_adv));
                  r1000_1fff_tmp119 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp119);
                  byte_b3 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp4);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_88_8f = r1000_1fff_tmp116;
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(73), sequence_e1_b3_adv));
                  r1000_1fff_tmp120 = simd_and(sequence_e1_b3_adv, byte_range_88_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp120);
                  byte_b7 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp21);
                  r1000_1fff_tmp121 = simd_and(sequence_e1_b3_adv, byte_b7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp121);
                  r1000_1fff_tmp122 = simd_and(r1000_1fff_tmp109, basis_bits.bit_4);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_b3_adv, byte_range_ba_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp123);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp124 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp125 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp124), simd_andc(r1000_1fff_tmp79, basis_bits.bit_4));
                  byte_range_b6_bb = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp125);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(74), sequence_e1_b7_adv));
                  r1000_1fff_tmp126 = simd_and(sequence_e1_b7_adv, byte_range_b6_bb);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp126);
                  byte_bc = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp39);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp127 = simd_and(byte_range_80_bf, r1000_1fff_tmp19);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(75), sequence_e1_bc_adv));
                  r1000_1fff_tmp128 = simd_and(sequence_e1_bc_adv, byte_range_96_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_bc_adv, byte_range_9e_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp129);
                  byte_bd = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp42);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(76), sequence_e1_bd_adv));
                  r1000_1fff_tmp130 = simd_and(sequence_e1_bd_adv, byte_range_86_87);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp130);
                  r1000_1fff_tmp131 = simd_and(sequence_e1_bd_adv, byte_range_8e_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp131);
                  byte_98 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp95);
                  r1000_1fff_tmp132 = simd_and(sequence_e1_bd_adv, byte_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp132);
                  r1000_1fff_tmp133 = simd_and(sequence_e1_bd_adv, byte_9a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp133);
                  r1000_1fff_tmp134 = simd_and(sequence_e1_bd_adv, byte_9c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp134);
                  byte_9e = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp49);
                  r1000_1fff_tmp135 = simd_and(sequence_e1_bd_adv, byte_9e);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp135);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp13);
                  r1000_1fff_tmp136 = simd_and(sequence_e1_bd_adv, byte_range_be_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp136);
                  byte_be = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp49);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_b5 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp85);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(77), sequence_e1_be_adv));
                  r1000_1fff_tmp137 = simd_and(sequence_e1_be_adv, byte_b5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp137);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_85 = simd_and(r1000_1fff_tmp107, r1000_1fff_tmp85);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(78), sequence_e1_bf_adv));
                  r1000_1fff_tmp138 = simd_and(sequence_e1_bf_adv, byte_85);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_94_95 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_bf_adv, byte_range_94_95);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp140);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_bf_adv, byte_9c);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp141);
                  byte_range_b0_b1 = simd_andc(r1000_1fff_tmp109, r800_4dff_tmp1);
                  r1000_1fff_tmp142 = simd_and(sequence_e1_bf_adv, byte_range_b0_b1);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp142);
                  r1000_1fff_tmp143 = simd_and(sequence_e1_bf_adv, byte_b5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp143);
                  r1000_1fff_tmp144 = simd_and(sequence_e1_bf_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r1000_1fff_tmp144);
                }
                else {
                  carryQ.CarryDequeueEnqueue(42, 37);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 67);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(79, 31))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(79, 22))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(79), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_a5 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(80), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_a5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp9);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp10, r800_4dff_tmp2);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, byte_range_b2_b3);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp13);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(81), sequence_e2_82_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_82_adv, byte_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp12);
                  byte_range_9d_9f = simd_and(r2000_2fff_tmp18, r800_ffff_tmp3);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_82_adv, byte_range_9d_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(r2000_2fff_tmp12, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_82_adv, byte_range_be_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_andc(r2000_2fff_tmp13, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(82), sequence_e2_83_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_83_adv, byte_range_80_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp25 = simd_or(basis_bits.bit_4, r2000_2fff_tmp24);
                  byte_range_b1_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_83_adv, byte_range_b1_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(byte_range_80_8f, r2000_2fff_tmp27);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp28 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r2000_2fff_tmp29 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8f = simd_and(r2000_2fff_tmp28, r2000_2fff_tmp29);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(83), sequence_e2_86_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_86_adv, byte_range_8a_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp30);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp10, basis_bits.bit_4);
                  r2000_2fff_tmp32 = simd_or(basis_bits.bit_5, r2000_2fff_tmp13);
                  byte_range_bb_bf = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp32);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(84), sequence_e2_8f_adv));
                  r2000_2fff_tmp33 = simd_and(sequence_e2_8f_adv, byte_range_bb_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r2000_2fff_tmp17, r2000_2fff_tmp34);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp36 = simd_and(basis_bits.bit_5, r2000_2fff_tmp13);
                  r2000_2fff_tmp37 = simd_or(basis_bits.bit_4, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_or(basis_bits.bit_3, r2000_2fff_tmp37);
                  byte_range_a7_bf = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(85), sequence_e2_90_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_90_adv, byte_range_a7_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp39);
                  byte_91 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp4);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  r2000_2fff_tmp40 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp41 = simd_and(basis_bits.bit_4, r2000_2fff_tmp32);
                  r2000_2fff_tmp42 = simd_or(basis_bits.bit_3, r2000_2fff_tmp41);
                  byte_range_8b_9f = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp42);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(86), sequence_e2_91_adv));
                  r2000_2fff_tmp43 = simd_and(sequence_e2_91_adv, byte_range_8b_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp3);
                  byte_ad = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp44);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp45 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp45);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(87), sequence_e2_ad_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_ad_adv, byte_range_b4_b5);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_and(r2000_2fff_tmp12, r2000_4dff_tmp1);
                  byte_ae = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp47);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp48 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp48);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(88), sequence_e2_ae_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_ae_adv, byte_range_96_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp51 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp51);
                  r2000_2fff_tmp52 = simd_and(sequence_e2_ae_adv, byte_range_ba_bc);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp52);
                  byte_af = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp14);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp53, r2000_2fff_tmp3);
                  byte_89 = simd_and(byte_range_80_8f, r2000_2fff_tmp54);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(89), sequence_e2_af_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_af_adv, byte_89);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r2000_2fff_tmp57 = simd_or(basis_bits.bit_2, r2000_2fff_tmp56);
                  byte_range_92_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_and(sequence_e2_af_adv, byte_range_92_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp58);
                  byte_b0 = simd_andc(r2000_2fff_tmp10, r2000_2fff_tmp34);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(90), sequence_e2_b0_adv));
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b0_adv, byte_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp59);
                  byte_b1 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  byte_9f = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp14);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(91), sequence_e2_b1_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b1_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp60);
                  byte_b3 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp22);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp61 = simd_not(r2000_2fff_tmp24);
                  r2000_2fff_tmp62 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp61), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b8 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp62);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(92), sequence_e2_b3_adv));
                  r2000_2fff_tmp63 = simd_and(sequence_e2_b3_adv, byte_range_b4_b8);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp63);
                  byte_b4 = simd_and(r2000_2fff_tmp10, r800_ffff_tmp4);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  byte_a6 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp27);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(93), sequence_e2_b4_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b4_adv, byte_a6);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp64);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp66 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_a8_ac = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_and(sequence_e2_b4_adv, byte_range_a8_ac);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp67);
                  byte_range_ae_af = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp20);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b4_adv, byte_range_ae_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp68);
                  byte_b5 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp7);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp36);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(94), sequence_e2_b5_adv));
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b5_adv, byte_range_a8_ae);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_not(r2000_2fff_tmp36);
                  r2000_2fff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp70), simd_andc(r2000_2fff_tmp24, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp71);
                  r2000_2fff_tmp72 = simd_and(sequence_e2_b5_adv, byte_range_b1_be);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp72);
                  byte_b6 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp27);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  byte_range_97_9f = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp37);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(95), sequence_e2_b6_adv));
                  r2000_2fff_tmp73 = simd_and(sequence_e2_b6_adv, byte_range_97_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp73);
                  r2000_2fff_tmp74 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp13);
                  byte_a7 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp74);
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b6_adv, byte_a7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp75);
                  r2000_2fff_tmp76 = simd_and(sequence_e2_b6_adv, byte_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp76);
                  byte_b7 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp74);
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b6_adv, byte_b7);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp77);
                  byte_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp14);
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b6_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp78);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_87 = simd_and(byte_range_80_8f, r2000_2fff_tmp74);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(96), sequence_e2_b7_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b7_adv, byte_87);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp79);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b7_adv, byte_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp80);
                  byte_97 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp74);
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b7_adv, byte_97);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b7_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp82);
                  byte_b9 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp54);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  r2000_2fff_tmp83 = simd_or(r800_ffff_tmp1, r2000_2fff_tmp13);
                  r2000_2fff_tmp84 = simd_or(basis_bits.bit_3, r2000_2fff_tmp83);
                  r2000_2fff_tmp85 = simd_or(basis_bits.bit_2, r2000_2fff_tmp84);
                  byte_range_83_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp85);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(97), sequence_e2_b9_adv));
                  r2000_2fff_tmp86 = simd_and(sequence_e2_b9_adv, byte_range_83_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp86);
                  r2000_2fff_tmp87 = simd_and(r2000_2fff_tmp53, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp87);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  byte_9a = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp87);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(98), sequence_e2_ba_adv));
                  r2000_2fff_tmp88 = simd_and(sequence_e2_ba_adv, byte_9a);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp88);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp53, r2000_2fff_tmp13);
                  byte_bb = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp89);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  byte_range_b4_bf = simd_and(r2000_2fff_tmp10, r800_ffff_tmp1);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(99), sequence_e2_bb_adv));
                  r2000_2fff_tmp90 = simd_and(sequence_e2_bb_adv, byte_range_b4_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp90);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  r2000_2fff_tmp91 = simd_not(basis_bits.bit_3);
                  r2000_2fff_tmp92 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp93 = simd_or(basis_bits.bit_4, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_and(basis_bits.bit_3, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp91), simd_andc(r2000_2fff_tmp94, basis_bits.bit_2));
                  byte_range_96_af = simd_and(r800_ffff_tmp5, r2000_2fff_tmp95);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(100), sequence_e2_bf_adv));
                  r2000_2fff_tmp96 = simd_and(sequence_e2_bf_adv, byte_range_96_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp96);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  r2000_2fff_tmp97 = simd_and(sequence_e2_bf_adv, byte_range_bc_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r2000_2fff_tmp97);
                }
                else {
                  carryQ.CarryDequeueEnqueue(79, 22);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(101, 9))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(101), r3000_4dff_tmp5));
                  sequence_e3_81 = simd_and(r3000_4dff_tmp5, byte_81);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(102), sequence_e3_81_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_81_adv, byte_80);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp7);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp11 = simd_not(r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_and(basis_bits.bit_5, r2000_4dff_tmp3);
                  r3000_4dff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp11), simd_andc(r3000_4dff_tmp12, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp13);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(103), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_97_98);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp14);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp2, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r3000_4dff_tmp15, r3000_4dff_tmp16);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(104), sequence_e3_84_adv));
                  r3000_4dff_tmp17 = simd_and(sequence_e3_84_adv, byte_range_80_84);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp17);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp19 = simd_not(r3000_4dff_tmp6);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp21 = simd_and(r3000_4dff_tmp20, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_or(simd_and(basis_bits.bit_3, r3000_4dff_tmp19), simd_andc(r3000_4dff_tmp21, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_and(sequence_e3_84_adv, byte_range_ae_b0);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp24);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp25 = simd_and(r3000_4dff_tmp20, r2000_4dff_tmp3);
                  byte_8f = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(105), sequence_e3_86_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_86_adv, byte_8f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp28 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp27);
                  r3000_4dff_tmp29 = simd_and(r3000_4dff_tmp28, basis_bits.bit_4);
                  r3000_4dff_tmp30 = simd_or(basis_bits.bit_5, r2000_4dff_tmp3);
                  byte_range_bb_bf = simd_and(r3000_4dff_tmp29, r3000_4dff_tmp30);
                  r3000_4dff_tmp31 = simd_and(sequence_e3_86_adv, byte_range_bb_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp31);
                  r3000_4dff_tmp32 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp32);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp33 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a4_af = simd_and(r3000_4dff_tmp33, r800_ffff_tmp1);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(106), sequence_e3_87_adv));
                  r3000_4dff_tmp34 = simd_and(sequence_e3_87_adv, byte_range_a4_af);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp34);
                  r3000_4dff_tmp35 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp36 = simd_andc(r3000_4dff_tmp35, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp36);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  byte_9f = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp25);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(107), sequence_e3_88_adv));
                  r3000_4dff_tmp37 = simd_and(sequence_e3_88_adv, byte_9f);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp37);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp35, r2000_4dff_tmp3);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp38);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  byte_bf = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp25);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(108), sequence_e3_8b_adv));
                  r3000_4dff_tmp39 = simd_and(sequence_e3_8b_adv, byte_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp39);
                  byte_b6 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp24);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp8, byte_b6);
                  byte_e4_adv = r800_ffff_tmp8;
                  r3000_4dff_tmp40 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp41 = simd_or(basis_bits.bit_4, r3000_4dff_tmp40);
                  byte_range_b6_bf = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp41);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(109), sequence_e4_b6_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e4_b6_adv, byte_range_b6_bf);
                  struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r3000_4dff_tmp42);
                }
                else {
                  carryQ.CarryDequeueEnqueue(101, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(79, 31);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 98);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(110, 2))) {
              r4e00_9fff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp3 = simd_and(r4e00_9fff_tmp1, r4e00_9fff_tmp2);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp3);
              r4e00_9fff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r4e00_9fff_tmp6 = simd_and(r4e00_9fff_tmp4, r4e00_9fff_tmp5);
              byte_bf = simd_and(r800_ffff_tmp12, r4e00_9fff_tmp6);
              carryQ.cq[110] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(110), r4e00_9fff_tmp7));
              sequence_e9_bf = simd_and(r4e00_9fff_tmp7, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp7;
              r4e00_9fff_tmp8 = simd_and(r4e00_9fff_tmp4, r800_ffff_tmp3);
              r4e00_9fff_tmp9 = simd_or(basis_bits.bit_3, r4e00_9fff_tmp8);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, r4e00_9fff_tmp9);
              byte_range_8d_bf = simd_and(r800_ffff_tmp5, r4e00_9fff_tmp10);
              carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(111), sequence_e9_bf_adv));
              r4e00_9fff_tmp11 = simd_and(sequence_e9_bf_adv, byte_range_8d_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r4e00_9fff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(110, 2);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(112, 38))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[112] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(112), ra000_ffff_tmp7));
              sequence_ea_92 = simd_and(ra000_ffff_tmp7, byte_92);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp9 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp10);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp11, r800_ffff_tmp3);
              carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(113), sequence_ea_92_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_92_adv, byte_range_8d_8f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_5, ra000_ffff_tmp13);
              ra000_ffff_tmp16 = simd_or(basis_bits.bit_4, ra000_ffff_tmp15);
              byte_range_87_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp16);
              carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(114), sequence_ea_93_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_93_adv, byte_range_87_8f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp18);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_ac_bf = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp20);
              carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(115), sequence_ea_98_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_98_adv, byte_range_ac_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp21);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(116), sequence_ea_9a_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9a_adv, byte_9e);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp13);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp24);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(117), sequence_ea_9b_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_9b_adv, byte_range_b8_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp25);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              byte_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp26);
              carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(118), sequence_ea_9e_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ea_9e_adv, byte_8f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp10, basis_bits.bit_6);
              byte_range_ae_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(sequence_ea_9e_adv, byte_range_ae_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp30);
              ra000_ffff_tmp31 = simd_or(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_b2_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(sequence_ea_9e_adv, byte_range_b2_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp32);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp26);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp33 = simd_and(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_2, ra000_ffff_tmp33);
              byte_range_80_b6 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp34);
              carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(119), sequence_ea_9f_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_9f_adv, byte_range_80_b6);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp36);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_ac_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp10);
              carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(120), sequence_ea_a0_adv));
              ra000_ffff_tmp37 = simd_and(sequence_ea_a0_adv, byte_range_ac_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp37);
              byte_range_ba_bf = simd_and(byte_range_b8_bf, r800_ffff_tmp14);
              ra000_ffff_tmp38 = simd_and(sequence_ea_a0_adv, byte_range_ba_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp39, r800_ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp40);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(121), sequence_ea_a1_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_a1_adv, byte_range_b8_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp41);
              byte_a3 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp14);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp43 = simd_not(ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp43), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_85_8d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp44);
              carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(122), sequence_ea_a3_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_a3_adv, byte_range_85_8d);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp5, basis_bits.bit_4);
              byte_range_9a_9f = simd_and(ra000_ffff_tmp46, r800_ffff_tmp14);
              ra000_ffff_tmp47 = simd_and(sequence_ea_a3_adv, byte_range_9a_9f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp47);
              byte_range_bc_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp10);
              ra000_ffff_tmp48 = simd_and(sequence_ea_a3_adv, byte_range_bc_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp39);
              byte_a5 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp49);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp50 = simd_not(ra000_ffff_tmp15);
              ra000_ffff_tmp51 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp50), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_94_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp51);
              carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(123), sequence_ea_a5_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ea_a5_adv, byte_range_94_9e);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp52);
              byte_range_bd_bf = simd_and(byte_range_bc_bf, r800_ffff_tmp3);
              ra000_ffff_tmp53 = simd_and(sequence_ea_a5_adv, byte_range_bd_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp13);
              byte_a7 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp54);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp22);
              carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(124), sequence_ea_a7_adv));
              ra000_ffff_tmp55 = simd_and(sequence_ea_a7_adv, byte_8e);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_9a_9d = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(sequence_ea_a7_adv, byte_range_9a_9d);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp57);
              byte_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp26);
              ra000_ffff_tmp58 = simd_and(sequence_ea_a7_adv, byte_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp58);
              byte_a8 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp18);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              byte_range_b7_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp16);
              carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(125), sequence_ea_a8_adv));
              ra000_ffff_tmp59 = simd_and(sequence_ea_a8_adv, byte_range_b7_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp39);
              byte_a9 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp60);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp29);
              carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(126), sequence_ea_a9_adv));
              ra000_ffff_tmp61 = simd_and(sequence_ea_a9_adv, byte_range_8e_8f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_9a_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp62);
              ra000_ffff_tmp63 = simd_and(sequence_ea_a9_adv, byte_range_9a_9b);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp63);
              byte_ab = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp24);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp64 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp65 = simd_or(basis_bits.bit_5, ra000_ffff_tmp13);
              ra000_ffff_tmp66 = simd_and(basis_bits.bit_4, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_not(ra000_ffff_tmp66);
              ra000_ffff_tmp68 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp13);
              ra000_ffff_tmp69 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp67), simd_andc(ra000_ffff_tmp68, basis_bits.bit_3));
              byte_range_83_9a = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp69);
              carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(127), sequence_ea_ab_adv));
              ra000_ffff_tmp70 = simd_and(sequence_ea_ab_adv, byte_range_83_9a);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_and(sequence_ea_ab_adv, byte_range_b7_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp71);
              ra000_ffff_tmp72 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp72);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_80 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp36);
              carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(128), sequence_ea_ac_adv));
              ra000_ffff_tmp73 = simd_and(sequence_ea_ac_adv, byte_80);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp73);
              ra000_ffff_tmp74 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp75 = simd_not(ra000_ffff_tmp74);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp75), simd_andc(ra000_ffff_tmp15, basis_bits.bit_4));
              byte_range_87_88 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp76);
              ra000_ffff_tmp77 = simd_and(sequence_ea_ac_adv, byte_range_87_88);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp77);
              ra000_ffff_tmp78 = simd_not(ra000_ffff_tmp36);
              ra000_ffff_tmp79 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp78), simd_andc(ra000_ffff_tmp26, basis_bits.bit_3));
              byte_range_8f_90 = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_and(sequence_ea_ac_adv, byte_range_8f_90);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp80);
              byte_range_97_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp16);
              ra000_ffff_tmp81 = simd_and(sequence_ea_ac_adv, byte_range_97_9f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_and(sequence_ea_ac_adv, byte_a7);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp82);
              byte_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp26);
              ra000_ffff_tmp83 = simd_and(sequence_ea_ac_adv, byte_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp39);
              byte_ad = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp84);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_a0_a3 = simd_andc(ra000_ffff_tmp28, r800_ffff_tmp1);
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(129), sequence_ea_ad_adv));
              ra000_ffff_tmp85 = simd_and(sequence_ea_ad_adv, byte_range_a0_a3);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp85);
              ra000_ffff_tmp86 = simd_or(basis_bits.bit_4, ra000_ffff_tmp42);
              ra000_ffff_tmp87 = simd_or(basis_bits.bit_3, ra000_ffff_tmp86);
              byte_range_a6_bf = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(sequence_ea_ad_adv, byte_range_a6_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp88);
              byte_ae = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp22);
              sequence_ea_ae = simd_and(byte_ea_adv, byte_ae);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_ea_ae, carryQ.get_carry_in(130), sequence_ea_ae_adv));
              ra000_ffff_tmp89 = simd_and(sequence_ea_ae_adv, byte_range_80_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(131), sequence_ea_af_adv));
              ra000_ffff_tmp91 = simd_and(sequence_ea_af_adv, byte_range_ae_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp91);
              ra000_ffff_tmp92 = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp92, basis_bits.bit_4);
              ra000_ffff_tmp94 = simd_and(sequence_ea_af_adv, byte_range_ba_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp94);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp84);
              ra000_ffff_tmp95 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(132), ra000_ffff_tmp96));
              sequence_ed_9e = simd_and(ra000_ffff_tmp96, byte_9e);
              byte_ed_adv = ra000_ffff_tmp96;
              byte_range_a4_af = simd_and(ra000_ffff_tmp90, r800_ffff_tmp1);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(133), sequence_ed_9e_adv));
              ra000_ffff_tmp97 = simd_and(sequence_ed_9e_adv, byte_range_a4_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp97);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              ra000_ffff_tmp98 = simd_andc(byte_range_80_bf, ra000_ffff_tmp8);
              ra000_ffff_tmp99 = simd_not(ra000_ffff_tmp65);
              ra000_ffff_tmp100 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp99), simd_andc(ra000_ffff_tmp15, basis_bits.bit_4));
              byte_range_87_8a = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp100);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(134), sequence_ed_9f_adv));
              ra000_ffff_tmp101 = simd_and(sequence_ed_9f_adv, byte_range_87_8a);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp101);
              ra000_ffff_tmp102 = simd_and(sequence_ed_9f_adv, byte_range_bc_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp102);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp26);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(135), ra000_ffff_tmp103));
              sequence_ef_a9 = simd_and(ra000_ffff_tmp103, byte_a9);
              byte_ef_adv = ra000_ffff_tmp103;
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(136), sequence_ef_a9_adv));
              ra000_ffff_tmp104 = simd_and(sequence_ef_a9_adv, byte_range_ae_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp104);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp105 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              ra000_ffff_tmp106 = simd_and(basis_bits.bit_3, ra000_ffff_tmp105);
              ra000_ffff_tmp107 = simd_or(basis_bits.bit_2, ra000_ffff_tmp106);
              byte_range_9a_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(137), sequence_ef_ab_adv));
              ra000_ffff_tmp108 = simd_and(sequence_ef_ab_adv, byte_range_9a_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp108);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              ra000_ffff_tmp109 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp110 = simd_not(ra000_ffff_tmp68);
              ra000_ffff_tmp111 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp110), simd_andc(ra000_ffff_tmp16, basis_bits.bit_3));
              byte_range_87_92 = simd_and(ra000_ffff_tmp109, ra000_ffff_tmp111);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(138), sequence_ef_ac_adv));
              ra000_ffff_tmp112 = simd_and(sequence_ef_ac_adv, byte_range_87_92);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp112);
              ra000_ffff_tmp113 = simd_and(ra000_ffff_tmp95, basis_bits.bit_4);
              byte_range_98_9c = simd_andc(ra000_ffff_tmp113, r800_ffff_tmp16);
              ra000_ffff_tmp114 = simd_and(sequence_ef_ac_adv, byte_range_98_9c);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp114);
              byte_b7 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp54);
              ra000_ffff_tmp115 = simd_and(sequence_ef_ac_adv, byte_b7);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp115);
              byte_bd = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp84);
              ra000_ffff_tmp116 = simd_and(sequence_ef_ac_adv, byte_bd);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp116);
              ra000_ffff_tmp117 = simd_and(sequence_ef_ac_adv, byte_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp117);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              byte_82 = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp6);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(139), sequence_ef_ad_adv));
              ra000_ffff_tmp118 = simd_and(sequence_ef_ad_adv, byte_82);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp118);
              byte_85 = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp49);
              ra000_ffff_tmp119 = simd_and(sequence_ef_ad_adv, byte_85);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp119);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp120 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp121 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp110), simd_andc(ra000_ffff_tmp120, basis_bits.bit_3));
              byte_range_82_92 = simd_and(ra000_ffff_tmp109, ra000_ffff_tmp121);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(140), sequence_ef_af_adv));
              ra000_ffff_tmp122 = simd_and(sequence_ef_af_adv, byte_range_82_92);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp122);
              byte_b5 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp49);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_80_8f = ra000_ffff_tmp98;
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(141), sequence_ef_b5_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ef_b5_adv, byte_range_80_8f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp123);
              ra000_ffff_tmp124 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_b6 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp124);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_90_91 = simd_andc(ra000_ffff_tmp95, ra000_ffff_tmp120);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(142), sequence_ef_b6_adv));
              ra000_ffff_tmp125 = simd_and(sequence_ef_b6_adv, byte_range_90_91);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp125);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              ra000_ffff_tmp126 = simd_not(basis_bits.bit_3);
              ra000_ffff_tmp127 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp128 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp126), simd_andc(ra000_ffff_tmp127, basis_bits.bit_2));
              byte_range_88_af = simd_and(byte_range_80_bf, ra000_ffff_tmp128);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(143), sequence_ef_b7_adv));
              ra000_ffff_tmp129 = simd_and(sequence_ef_b7_adv, byte_range_88_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp129);
              byte_range_be_bf = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp29);
              ra000_ffff_tmp130 = simd_and(sequence_ef_b7_adv, byte_range_be_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp130);
              byte_b8 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp18);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(144), sequence_ef_b8_adv));
              ra000_ffff_tmp131 = simd_and(sequence_ef_b8_adv, byte_range_9a_9f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp131);
              ra000_ffff_tmp132 = simd_and(sequence_ef_b8_adv, byte_range_ae_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp132);
              byte_b9 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp60);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(145), sequence_ef_b9_adv));
              ra000_ffff_tmp133 = simd_and(sequence_ef_b9_adv, byte_93);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp133);
              ra000_ffff_tmp134 = simd_and(sequence_ef_b9_adv, byte_a7);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp134);
              ra000_ffff_tmp135 = simd_and(sequence_ef_b9_adv, byte_range_ac_af);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp135);
              ra000_ffff_tmp136 = simd_and(sequence_ef_b9_adv, byte_b5);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp136);
              byte_bb = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp24);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp137 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp10);
              ra000_ffff_tmp138 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_bd_be = simd_and(ra000_ffff_tmp137, ra000_ffff_tmp138);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(146), sequence_ef_bb_adv));
              ra000_ffff_tmp139 = simd_and(sequence_ef_bb_adv, byte_range_bd_be);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp139);
              byte_bc = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp72);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(147), sequence_ef_bc_adv));
              ra000_ffff_tmp140 = simd_and(sequence_ef_bc_adv, byte_80);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp140);
              byte_be = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp22);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(148), sequence_ef_be_adv));
              ra000_ffff_tmp141 = simd_and(sequence_ef_be_adv, byte_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp141);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_80_81 = simd_andc(byte_range_80_8f, ra000_ffff_tmp120);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(149), sequence_ef_bf_adv));
              ra000_ffff_tmp142 = simd_and(sequence_ef_bf_adv, byte_range_80_81);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp142);
              ra000_ffff_tmp143 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_88_89 = simd_and(byte_range_80_8f, ra000_ffff_tmp143);
              ra000_ffff_tmp144 = simd_and(sequence_ef_bf_adv, byte_range_88_89);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp144);
              ra000_ffff_tmp145 = simd_and(sequence_ef_bf_adv, byte_range_90_91);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp145);
              byte_range_98_99 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp143);
              ra000_ffff_tmp146 = simd_and(sequence_ef_bf_adv, byte_range_98_99);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp146);
              ra000_ffff_tmp147 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp10);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp147, r800_ffff_tmp3);
              ra000_ffff_tmp148 = simd_and(sequence_ef_bf_adv, byte_range_9d_9f);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp148);
              ra000_ffff_tmp149 = simd_and(sequence_ef_bf_adv, byte_a7);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp149);
              ra000_ffff_tmp150 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp151 = simd_and(basis_bits.bit_4, ra000_ffff_tmp74);
              ra000_ffff_tmp152 = simd_not(ra000_ffff_tmp151);
              ra000_ffff_tmp153 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp152), simd_andc(ra000_ffff_tmp26, basis_bits.bit_3));
              byte_range_af_b8 = simd_and(ra000_ffff_tmp150, ra000_ffff_tmp153);
              ra000_ffff_tmp154 = simd_and(sequence_ef_bf_adv, byte_range_af_b8);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp154);
              ra000_ffff_tmp155 = simd_and(sequence_ef_bf_adv, byte_range_be_bf);
              struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, ra000_ffff_tmp155);
            }
            else {
              carryQ.CarryDequeueEnqueue(112, 38);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 139);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(150, 183))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[150] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(150), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(151), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(152), sequence_f0_90_80_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_80_adv, byte_8c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_a7 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_80_adv, byte_a7);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp16);
            byte_bb = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_80_adv, byte_bb);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp23);
            byte_be = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_90_80_adv, byte_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp27);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_8e_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(153), sequence_f0_90_81_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_81_adv, byte_range_8e_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp31 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp30);
            byte_range_9e_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_81_adv, byte_range_9e_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp33);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp19, basis_bits.bit_4);
            r10000_10ffff_tmp35 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp16);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(154), sequence_f0_90_83_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_83_adv, byte_range_bb_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp37);
            sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp39 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp16);
            byte_range_83_86 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(155), sequence_f0_90_84_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_84_adv, byte_range_83_86);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp15);
            byte_range_b4_b6 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp16);
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_84_adv, byte_range_b4_b6);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp23);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp43);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp2);
            carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(156), sequence_f0_90_86_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_86_adv, byte_range_8d_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp45);
            byte_range_9c_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_90_86_adv, byte_range_9c_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp48 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp3);
            byte_range_a1_bf = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_86_adv, byte_range_a1_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp49);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            byte_range_80_8f = r10000_10ffff_tmp9;
            carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(157), sequence_f0_90_87_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_90_87_adv, byte_range_80_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp50);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp28);
            r10000_10ffff_tmp51 = simd_and(sequence_f0_90_87_adv, byte_range_be_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp20, basis_bits.bit_6);
            byte_range_88_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp52);
            sequence_f0_90_byte_range_88_89 = simd_and(sequence_f0_90_adv, byte_range_88_89);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(158), r10000_10ffff_tmp53));
            sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10ffff_tmp53, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_90_byte_range_88_89_sfx);
            r10000_10ffff_tmp54 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp55 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            byte_8a = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp11);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp2);
            carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(159), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_90_8a_adv, byte_range_9d_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp58);
            byte_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp21);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp59 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp59);
            byte_range_91_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp60);
            carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(160), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_90_8b_adv, byte_range_91_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp11);
            r10000_10ffff_tmp63 = simd_and(sequence_f0_90_8b_adv, byte_range_bc_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp63);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp64 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_range_a4_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp1);
            carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(161), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_8c_adv, byte_range_a4_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp26);
            byte_8d = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp66);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp55, basis_bits.bit_4);
            byte_range_8b_8f = simd_and(r10000_10ffff_tmp67, r10000_10ffff_tmp35);
            carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(162), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_90_8d_adv, byte_range_8b_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp62, basis_bits.bit_4);
            r10000_10ffff_tmp70 = simd_and(sequence_f0_90_8d_adv, byte_range_bb_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp70);
            byte_8e = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp24);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            byte_9e = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp24);
            carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(163), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_90_8e_adv, byte_9e);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp16);
            byte_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp72);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_84_87 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp15);
            carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(164), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_8f_adv, byte_range_84_87);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp75 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp76);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_8f_adv, byte_range_96_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp79);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp28);
            carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(165), sequence_f0_90_92_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_90_92_adv, byte_range_9e_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp82 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp83 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp82);
            r10000_10ffff_tmp84 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp83);
            byte_range_aa_bf = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(sequence_f0_90_92_adv, byte_range_aa_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp85);
            byte_93 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp33);
            sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
            carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(166), sequence_f0_90_93_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_90_93_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp86);
            byte_94 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp37);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            byte_range_a8_af = simd_and(r10000_10ffff_tmp64, basis_bits.bit_4);
            carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(167), sequence_f0_90_94_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_90_94_adv, byte_range_a8_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp26);
            byte_95 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp88);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp89 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp16);
            r10000_10ffff_tmp90 = simd_not(r10000_10ffff_tmp89);
            r10000_10ffff_tmp91 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp90), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp91);
            carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(168), sequence_f0_90_95_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_90_95_adv, byte_range_a4_ae);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp92);
            byte_range_b0_bf = r10000_10ffff_tmp62;
            r10000_10ffff_tmp93 = simd_and(sequence_f0_90_95_adv, byte_range_b0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp94);
            sequence_f0_90_byte_range_96_97 = simd_and(sequence_f0_90_adv, byte_range_96_97);
            carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_96_97, carryQ.get_carry_in(169), r10000_10ffff_tmp95));
            sequence_f0_90_byte_range_96_97_sfx = simd_and(r10000_10ffff_tmp95, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_90_byte_range_96_97_sfx);
            byte_9c = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp12);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp96 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp89);
            byte_range_b7_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp96);
            carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(170), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_90_9c_adv, byte_range_b7_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp97);
            byte_9d = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp66);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_96_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp75);
            carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(171), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp98 = simd_and(sequence_f0_90_9d_adv, byte_range_96_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_90_9d_adv, byte_range_a8_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp100);
            sequence_f0_90_byte_range_9e_9f = simd_and(sequence_f0_90_adv, byte_range_9e_9f);
            carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_9e_9f, carryQ.get_carry_in(172), r10000_10ffff_tmp101));
            sequence_f0_90_byte_range_9e_9f_sfx = simd_and(r10000_10ffff_tmp101, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_90_byte_range_9e_9f_sfx);
            byte_a0 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp3);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            byte_range_86_87 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp94);
            carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(173), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_90_a0_adv, byte_range_86_87);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp26);
            byte_89 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_and(sequence_f0_90_a0_adv, byte_89);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp104);
            byte_b6 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp43);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_90_a0_adv, byte_b6);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp105);
            r10000_10ffff_tmp106 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp20);
            byte_range_b9_bb = simd_and(r10000_10ffff_tmp106, r10000_10ffff_tmp2);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_90_a0_adv, byte_range_b9_bb);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp109 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bd_be = simd_and(r10000_10ffff_tmp108, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_and(sequence_f0_90_a0_adv, byte_range_bd_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp110);
            byte_a1 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp27);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            byte_96 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp43);
            carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(174), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_90_a1_adv, byte_96);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp111);
            byte_a2 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp79);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp112 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp96);
            r10000_10ffff_tmp113 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp114 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp72);
            r10000_10ffff_tmp115 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp113), simd_andc(r10000_10ffff_tmp114, basis_bits.bit_2));
            byte_range_9f_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp115);
            carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(175), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_90_a2_adv, byte_range_9f_a6);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(sequence_f0_90_a2_adv, byte_range_b0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp117);
            byte_a3 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp33);
            sequence_f0_90_a3 = simd_and(sequence_f0_90_adv, byte_a3);
            carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a3, carryQ.get_carry_in(176), sequence_f0_90_a3_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_90_a3_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp118);
            byte_a4 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp37);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            byte_range_9c_9e = simd_andc(r10000_10ffff_tmp57, r10000_10ffff_tmp16);
            carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(177), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp119 = simd_and(sequence_f0_90_a4_adv, byte_range_9c_9e);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp121 = simd_not(r10000_10ffff_tmp16);
            r10000_10ffff_tmp122 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp121), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_ba_be = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp122);
            r10000_10ffff_tmp123 = simd_and(sequence_f0_90_a4_adv, byte_range_ba_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp123);
            byte_a5 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp88);
            sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
            carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(178), sequence_f0_90_a5_adv));
            r10000_10ffff_tmp124 = simd_and(sequence_f0_90_a5_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp124);
            byte_a6 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp43);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            byte_range_b8_bd = simd_andc(r10000_10ffff_tmp120, r10000_10ffff_tmp74);
            carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(179), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp125 = simd_and(sequence_f0_90_a6_adv, byte_range_b8_bd);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp125);
            sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
            carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(180), sequence_f0_90_a7_adv));
            r10000_10ffff_tmp126 = simd_and(sequence_f0_90_a7_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp126);
            r10000_10ffff_tmp127 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp127);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(181), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_90_a8_adv, byte_84);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp128);
            r10000_10ffff_tmp129 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp129), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_87_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp130);
            r10000_10ffff_tmp131 = simd_and(sequence_f0_90_a8_adv, byte_range_87_8b);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp131);
            r10000_10ffff_tmp132 = simd_and(sequence_f0_90_a8_adv, byte_94);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp132);
            byte_98 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp127);
            r10000_10ffff_tmp133 = simd_and(sequence_f0_90_a8_adv, byte_98);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp133);
            byte_range_b4_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp15);
            r10000_10ffff_tmp134 = simd_and(sequence_f0_90_a8_adv, byte_range_b4_b7);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp134);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp39);
            r10000_10ffff_tmp135 = simd_and(sequence_f0_90_a8_adv, byte_range_bb_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp135);
            byte_a9 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp103);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_88_8f = r10000_10ffff_tmp67;
            carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(182), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_90_a9_adv, byte_range_88_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp136);
            r10000_10ffff_tmp137 = simd_and(r10000_10ffff_tmp54, basis_bits.bit_4);
            byte_range_99_9f = simd_and(r10000_10ffff_tmp137, r10000_10ffff_tmp59);
            r10000_10ffff_tmp138 = simd_and(sequence_f0_90_a9_adv, byte_range_99_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp138);
            byte_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp56);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_a0_bf = r10000_10ffff_tmp81;
            carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(183), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp139 = simd_and(sequence_f0_90_aa_adv, byte_range_a0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp139);
            byte_ab = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp21);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp140 = simd_not(r10000_10ffff_tmp35);
            r10000_10ffff_tmp141 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp140), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp141);
            carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(184), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_90_ab_adv, byte_range_a7_aa);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp142);
            r10000_10ffff_tmp143 = simd_and(sequence_f0_90_ab_adv, byte_range_b7_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp143);
            byte_ac = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp12);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp144 = simd_not(r10000_10ffff_tmp59);
            r10000_10ffff_tmp145 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp74, basis_bits.bit_4));
            byte_range_b6_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp145);
            carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(185), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp146 = simd_and(sequence_f0_90_ac_adv, byte_range_b6_b8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp146);
            byte_ad = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp66);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(186), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_90_ad_adv, byte_range_96_97);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_b3_b7 = simd_and(r10000_10ffff_tmp148, r10000_10ffff_tmp35);
            r10000_10ffff_tmp149 = simd_and(sequence_f0_90_ad_adv, byte_range_b3_b7);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp149);
            byte_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp24);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp150 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp82, basis_bits.bit_4));
            byte_range_92_98 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp150);
            carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(187), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_90_ae_adv, byte_range_92_98);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp151);
            r10000_10ffff_tmp152 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp59);
            r10000_10ffff_tmp153 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_not(r10000_10ffff_tmp153);
            r10000_10ffff_tmp155 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp156 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp155);
            r10000_10ffff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp154), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_9d_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp157);
            r10000_10ffff_tmp158 = simd_and(sequence_f0_90_ae_adv, byte_range_9d_a8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp158);
            r10000_10ffff_tmp159 = simd_and(sequence_f0_90_ae_adv, byte_range_b0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp159);
            byte_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp72);
            sequence_f0_90_af = simd_and(sequence_f0_90_adv, byte_af);
            carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_af, carryQ.get_carry_in(188), sequence_f0_90_af_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_90_af_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp160);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp161 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp153);
            byte_range_89_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp161);
            carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(189), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_90_b1_adv, byte_range_89_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp162);
            byte_range_b2_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp150);
            sequence_f0_90_byte_range_b2_b8 = simd_and(sequence_f0_90_adv, byte_range_b2_b8);
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_b2_b8, carryQ.get_carry_in(190), r10000_10ffff_tmp163));
            sequence_f0_90_byte_range_b2_b8_sfx = simd_and(r10000_10ffff_tmp163, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_90_byte_range_b2_b8_sfx);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp103);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(191), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp164 = simd_and(sequence_f0_90_b9_adv, byte_range_80_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp164);
            byte_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp72);
            r10000_10ffff_tmp165 = simd_and(sequence_f0_90_b9_adv, byte_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp165);
            byte_range_ba_bf = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp82);
            sequence_f0_90_byte_range_ba_bf = simd_and(sequence_f0_90_adv, byte_range_ba_bf);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_ba_bf, carryQ.get_carry_in(192), r10000_10ffff_tmp166));
            sequence_f0_90_byte_range_ba_bf_sfx = simd_and(r10000_10ffff_tmp166, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_90_byte_range_ba_bf_sfx);
            byte_91 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp27);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(193), r10000_10ffff_tmp167));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp167, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp167;
            r10000_10ffff_tmp168 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp169 = simd_not(r10000_10ffff_tmp168);
            r10000_10ffff_tmp170 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp169), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_3));
            byte_range_8e_91 = simd_and(byte_range_80_9f, r10000_10ffff_tmp170);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(194), sequence_f0_91_81_adv));
            r10000_10ffff_tmp171 = simd_and(sequence_f0_91_81_adv, byte_range_8e_91);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp171);
            r10000_10ffff_tmp172 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp89);
            byte_range_b0_be = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp172);
            r10000_10ffff_tmp173 = simd_and(sequence_f0_91_81_adv, byte_range_b0_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp173);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp174 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp82);
            byte_range_82_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp174);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(195), sequence_f0_91_83_adv));
            r10000_10ffff_tmp175 = simd_and(sequence_f0_91_83_adv, byte_range_82_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp175);
            byte_range_a9_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp59);
            r10000_10ffff_tmp176 = simd_and(sequence_f0_91_83_adv, byte_range_a9_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp176);
            r10000_10ffff_tmp177 = simd_and(sequence_f0_91_83_adv, byte_range_ba_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp177);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            byte_b5 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp88);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(196), sequence_f0_91_84_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_91_84_adv, byte_b5);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp178);
            byte_85 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp88);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_84_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp1);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(197), sequence_f0_91_85_adv));
            r10000_10ffff_tmp179 = simd_and(sequence_f0_91_85_adv, byte_range_84_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp179);
            r10000_10ffff_tmp180 = simd_and(sequence_f0_91_85_adv, byte_range_b7_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp180);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp181 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_89_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp181);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(198), sequence_f0_91_87_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_91_87_adv, byte_range_89_8c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp182);
            r10000_10ffff_tmp183 = simd_and(sequence_f0_91_87_adv, byte_range_8e_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp183);
            r10000_10ffff_tmp184 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp185 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp35);
            r10000_10ffff_tmp186 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp186, basis_bits.bit_2));
            byte_range_9b_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp187);
            r10000_10ffff_tmp188 = simd_and(sequence_f0_91_87_adv, byte_range_9b_a0);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp188);
            r10000_10ffff_tmp189 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp190 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp189);
            byte_range_b5_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp190);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_91_87_adv, byte_range_b5_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp191);
            byte_88 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp127);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(199), sequence_f0_91_88_adv));
            r10000_10ffff_tmp192 = simd_and(sequence_f0_91_88_adv, byte_92);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp192);
            r10000_10ffff_tmp193 = simd_and(sequence_f0_91_88_adv, byte_range_be_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp193);
            sequence_f0_91_89 = simd_and(sequence_f0_91_adv, byte_89);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_91_89, carryQ.get_carry_in(200), sequence_f0_91_89_adv));
            r10000_10ffff_tmp194 = simd_and(sequence_f0_91_89_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp194);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(201), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp195 = simd_and(sequence_f0_91_8a_adv, byte_range_80_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp195);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            byte_range_ab_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp35);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(202), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_8b_adv, byte_range_ab_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp196);
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_8b_adv, byte_range_ba_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp197);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(203), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_8c_adv, byte_80);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp198);
            r10000_10ffff_tmp199 = simd_and(sequence_f0_91_8c_adv, byte_84);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp199);
            r10000_10ffff_tmp200 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp11);
            byte_range_8d_8e = simd_and(r10000_10ffff_tmp200, r10000_10ffff_tmp109);
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_8c_adv, byte_range_8d_8e);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp201);
            r10000_10ffff_tmp202 = simd_andc(r10000_10ffff_tmp54, r10000_10ffff_tmp1);
            byte_range_91_92 = simd_and(r10000_10ffff_tmp202, r10000_10ffff_tmp109);
            r10000_10ffff_tmp203 = simd_and(sequence_f0_91_8c_adv, byte_range_91_92);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp203);
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_8c_adv, byte_a9);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp204);
            r10000_10ffff_tmp205 = simd_and(sequence_f0_91_8c_adv, byte_b1);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp205);
            byte_b4 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp37);
            r10000_10ffff_tmp206 = simd_and(sequence_f0_91_8c_adv, byte_b4);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp206);
            r10000_10ffff_tmp207 = simd_and(r10000_10ffff_tmp20, basis_bits.bit_6);
            byte_range_ba_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp207);
            r10000_10ffff_tmp208 = simd_and(sequence_f0_91_8c_adv, byte_range_ba_bb);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp208);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            byte_range_85_86 = simd_and(byte_range_84_87, r10000_10ffff_tmp109);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(204), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp209 = simd_and(sequence_f0_91_8d_adv, byte_range_85_86);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp209);
            r10000_10ffff_tmp210 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp20);
            byte_range_89_8a = simd_and(r10000_10ffff_tmp210, r10000_10ffff_tmp109);
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_8d_adv, byte_range_89_8a);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp211);
            r10000_10ffff_tmp212 = simd_not(r10000_10ffff_tmp96);
            r10000_10ffff_tmp213 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp212), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_3));
            byte_range_8e_96 = simd_and(byte_range_80_9f, r10000_10ffff_tmp213);
            r10000_10ffff_tmp214 = simd_and(sequence_f0_91_8d_adv, byte_range_8e_96);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp214);
            byte_range_98_9c = simd_andc(r10000_10ffff_tmp137, r10000_10ffff_tmp189);
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_8d_adv, byte_range_98_9c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp215);
            r10000_10ffff_tmp216 = simd_andc(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_a4_a5 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp216);
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_8d_adv, byte_range_a4_a5);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp217);
            r10000_10ffff_tmp218 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp11);
            byte_range_ad_af = simd_and(r10000_10ffff_tmp218, r10000_10ffff_tmp2);
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_8d_adv, byte_range_ad_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp219);
            r10000_10ffff_tmp220 = simd_and(sequence_f0_91_8d_adv, byte_range_b5_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp220);
            sequence_f0_91_byte_range_8e_91 = simd_and(sequence_f0_91_adv, byte_range_8e_91);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_8e_91, carryQ.get_carry_in(205), r10000_10ffff_tmp221));
            sequence_f0_91_byte_range_8e_91_sfx = simd_and(r10000_10ffff_tmp221, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_91_byte_range_8e_91_sfx);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(206), sequence_f0_91_93_adv));
            r10000_10ffff_tmp222 = simd_and(sequence_f0_91_93_adv, byte_range_88_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp222);
            r10000_10ffff_tmp223 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp83);
            r10000_10ffff_tmp224 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp223);
            byte_range_9a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp224);
            r10000_10ffff_tmp225 = simd_and(sequence_f0_91_93_adv, byte_range_9a_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp225);
            byte_range_94_95 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp216);
            sequence_f0_91_byte_range_94_95 = simd_and(sequence_f0_91_adv, byte_range_94_95);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_94_95, carryQ.get_carry_in(207), r10000_10ffff_tmp226));
            sequence_f0_91_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp226, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_91_byte_range_94_95_sfx);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            byte_range_b6_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp94);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(208), sequence_f0_91_96_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_91_96_adv, byte_range_b6_b7);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp227);
            byte_97 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp17);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp228 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp84);
            byte_range_8a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp228);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(209), sequence_f0_91_97_adv));
            r10000_10ffff_tmp229 = simd_and(sequence_f0_91_97_adv, byte_range_8a_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp229);
            byte_99 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp103);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_85_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp190);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(210), sequence_f0_91_99_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_91_99_adv, byte_range_85_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp230);
            r10000_10ffff_tmp231 = simd_and(sequence_f0_91_99_adv, byte_range_9a_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp231);
            byte_9a = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp56);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            byte_range_b8_bf = r10000_10ffff_tmp120;
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(211), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp232 = simd_and(sequence_f0_91_9a_adv, byte_range_b8_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp232);
            byte_9b = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp21);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(212), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_91_9b_adv, byte_range_8a_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp233);
            r10000_10ffff_tmp234 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp168);
            r10000_10ffff_tmp235 = simd_not(r10000_10ffff_tmp234);
            r10000_10ffff_tmp236 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp237 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp235), simd_andc(r10000_10ffff_tmp236, basis_bits.bit_2));
            byte_range_9c_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp237);
            sequence_f0_91_byte_range_9c_a1 = simd_and(sequence_f0_91_adv, byte_range_9c_a1);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_9c_a1, carryQ.get_carry_in(213), r10000_10ffff_tmp238));
            sequence_f0_91_byte_range_9c_a1_sfx = simd_and(r10000_10ffff_tmp238, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_91_byte_range_9c_a1_sfx);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(214), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp239 = simd_and(sequence_f0_91_a2_adv, byte_range_80_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp239);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp240 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp90), simd_andc(r10000_10ffff_tmp35, basis_bits.bit_4));
            byte_range_b3_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp240);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(215), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp241 = simd_and(sequence_f0_91_a3_adv, byte_range_b3_be);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp241);
            r10000_10ffff_tmp242 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp140), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp242);
            sequence_f0_91_byte_range_a4_aa = simd_and(sequence_f0_91_adv, byte_range_a4_aa);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_a4_aa, carryQ.get_carry_in(216), r10000_10ffff_tmp243));
            sequence_f0_91_byte_range_a4_aa_sfx = simd_and(r10000_10ffff_tmp243, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_91_byte_range_a4_aa_sfx);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            byte_range_b9_bf = simd_and(byte_range_b8_bf, r10000_10ffff_tmp59);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(217), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp244 = simd_and(sequence_f0_91_ab_adv, byte_range_b9_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp244);
            r10000_10ffff_tmp245 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            byte_range_ac_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp245);
            sequence_f0_91_byte_range_ac_bf = simd_and(sequence_f0_91_adv, byte_range_ac_bf);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_ac_bf, carryQ.get_carry_in(218), r10000_10ffff_tmp246));
            sequence_f0_91_byte_range_ac_bf_sfx = simd_and(r10000_10ffff_tmp246, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_91_byte_range_ac_bf_sfx);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(219), r10000_10ffff_tmp247));
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp247, byte_8e);
            sequence_f0_92_adv = r10000_10ffff_tmp247;
            r10000_10ffff_tmp248 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp249 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp248);
            byte_range_99_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp249);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(220), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp250 = simd_and(sequence_f0_92_8e_adv, byte_range_99_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp250);
            sequence_f0_92_8f = simd_and(sequence_f0_92_adv, byte_8f);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8f, carryQ.get_carry_in(221), sequence_f0_92_8f_adv));
            r10000_10ffff_tmp251 = simd_and(sequence_f0_92_8f_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp251);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(222), sequence_f0_92_91_adv));
            r10000_10ffff_tmp252 = simd_and(sequence_f0_92_91_adv, byte_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp252);
            r10000_10ffff_tmp253 = simd_and(sequence_f0_92_91_adv, byte_range_b5_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp253);
            r10000_10ffff_tmp254 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp168);
            r10000_10ffff_tmp255 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp254);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp255);
            sequence_f0_92_byte_range_92_bf = simd_and(sequence_f0_92_adv, byte_range_92_bf);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_92_bf, carryQ.get_carry_in(223), r10000_10ffff_tmp256));
            sequence_f0_92_byte_range_92_bf_sfx = simd_and(r10000_10ffff_tmp256, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_92_byte_range_92_bf_sfx);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(224), r10000_10ffff_tmp257));
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp257, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp257;
            r10000_10ffff_tmp258 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp72);
            byte_range_af_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp258);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(225), sequence_f0_93_90_adv));
            r10000_10ffff_tmp259 = simd_and(sequence_f0_93_90_adv, byte_range_af_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp259);
            r10000_10ffff_tmp260 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp261 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp260);
            byte_range_91_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp261);
            sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(226), r10000_10ffff_tmp262));
            sequence_f0_93_byte_range_91_bf_sfx = simd_and(r10000_10ffff_tmp262, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_93_byte_range_91_bf_sfx);
            byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(227), r10000_10ffff_tmp263));
            byte_f0_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp263, byte_range_80_bf);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(228), r10000_10ffff_tmp264));
            byte_f0_byte_range_94_95_sfx_sfx = simd_and(r10000_10ffff_tmp264, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f0_byte_range_94_95_sfx_sfx);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(229), r10000_10ffff_tmp265));
            sequence_f0_96_byte_range_80_9f = simd_and(r10000_10ffff_tmp265, byte_range_80_9f);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_80_9f, carryQ.get_carry_in(230), r10000_10ffff_tmp266));
            sequence_f0_96_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp266, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_96_byte_range_80_9f_sfx);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp265, byte_a8);
            sequence_f0_96_adv = r10000_10ffff_tmp265;
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(231), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp267 = simd_and(sequence_f0_96_a8_adv, byte_range_b9_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp267);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            byte_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp72);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(232), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp268 = simd_and(sequence_f0_96_a9_adv, byte_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp268);
            r10000_10ffff_tmp269 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_aa_ad = simd_and(byte_range_a8_af, r10000_10ffff_tmp269);
            r10000_10ffff_tmp270 = simd_and(sequence_f0_96_a9_adv, byte_range_aa_ad);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp270);
            r10000_10ffff_tmp271 = simd_and(sequence_f0_96_a9_adv, byte_range_b0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp271);
            sequence_f0_96_aa = simd_and(sequence_f0_96_adv, byte_aa);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_96_aa, carryQ.get_carry_in(233), sequence_f0_96_aa_adv));
            r10000_10ffff_tmp272 = simd_and(sequence_f0_96_aa_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp272);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(234), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp273 = simd_and(sequence_f0_96_ab_adv, byte_range_80_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp273);
            byte_range_ae_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp28);
            r10000_10ffff_tmp274 = simd_and(sequence_f0_96_ab_adv, byte_range_ae_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp274);
            byte_range_b6_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp75);
            r10000_10ffff_tmp275 = simd_and(sequence_f0_96_ab_adv, byte_range_b6_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp275);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_86_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp75);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(235), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp276 = simd_and(sequence_f0_96_ad_adv, byte_range_86_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp276);
            r10000_10ffff_tmp277 = simd_and(sequence_f0_96_ad_adv, byte_9a);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp277);
            r10000_10ffff_tmp278 = simd_and(sequence_f0_96_ad_adv, byte_a2);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp278);
            byte_range_b8_bc = simd_andc(byte_range_b8_bf, r10000_10ffff_tmp189);
            r10000_10ffff_tmp279 = simd_and(sequence_f0_96_ad_adv, byte_range_b8_bc);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp279);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(236), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp280 = simd_and(sequence_f0_96_ae_adv, byte_range_90_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp280);
            r10000_10ffff_tmp281 = simd_not(r10000_10ffff_tmp11);
            r10000_10ffff_tmp282 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp281), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_af_bb = simd_and(byte_range_a0_bf, r10000_10ffff_tmp282);
            sequence_f0_96_byte_range_af_bb = simd_and(sequence_f0_96_adv, byte_range_af_bb);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_af_bb, carryQ.get_carry_in(237), r10000_10ffff_tmp283));
            sequence_f0_96_byte_range_af_bb_sfx = simd_and(r10000_10ffff_tmp283, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_96_byte_range_af_bb_sfx);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp66);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(238), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp284 = simd_and(sequence_f0_96_bd_adv, byte_range_85_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp284);
            r10000_10ffff_tmp285 = simd_and(sequence_f0_96_bd_adv, byte_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp285);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp172);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(239), sequence_f0_96_be_adv));
            r10000_10ffff_tmp286 = simd_and(sequence_f0_96_be_adv, byte_range_80_8e);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp286);
            r10000_10ffff_tmp287 = simd_and(sequence_f0_96_be_adv, byte_range_a0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp287);
            sequence_f0_96_bf = simd_and(sequence_f0_96_adv, byte_bf);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bf, carryQ.get_carry_in(240), sequence_f0_96_bf_adv));
            r10000_10ffff_tmp288 = simd_and(sequence_f0_96_bf_adv, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp288);
            byte_range_97_9a = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp141);
            byte_f0_byte_range_97_9a = simd_and(byte_f0_adv, byte_range_97_9a);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a, carryQ.get_carry_in(241), r10000_10ffff_tmp289));
            byte_f0_byte_range_97_9a_sfx = simd_and(r10000_10ffff_tmp289, byte_range_80_bf);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a_sfx, carryQ.get_carry_in(242), r10000_10ffff_tmp290));
            byte_f0_byte_range_97_9a_sfx_sfx = simd_and(r10000_10ffff_tmp290, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f0_byte_range_97_9a_sfx_sfx);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(243), r10000_10ffff_tmp291));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp291, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp291;
            r10000_10ffff_tmp292 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp234);
            byte_range_82_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp292);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(244), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp293 = simd_and(sequence_f0_9b_80_adv, byte_range_82_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp293);
            r10000_10ffff_tmp294 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp295 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp294), simd_andc(r10000_10ffff_tmp48, basis_bits.bit_2));
            byte_range_81_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp295);
            sequence_f0_9b_byte_range_81_af = simd_and(sequence_f0_9b_adv, byte_range_81_af);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_81_af, carryQ.get_carry_in(245), r10000_10ffff_tmp296));
            sequence_f0_9b_byte_range_81_af_sfx = simd_and(r10000_10ffff_tmp296, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9b_byte_range_81_af_sfx);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(246), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp297 = simd_and(sequence_f0_9b_b1_adv, byte_range_ab_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp297);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp108, r10000_10ffff_tmp2);
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9b_b1_adv, byte_range_bd_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp298);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp79);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            byte_range_89_8f = simd_and(byte_range_88_8f, r10000_10ffff_tmp59);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(247), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp299 = simd_and(sequence_f0_9b_b2_adv, byte_range_89_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp299);
            byte_range_9a_9b = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp207);
            r10000_10ffff_tmp300 = simd_and(sequence_f0_9b_b2_adv, byte_range_9a_9b);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp300);
            r10000_10ffff_tmp301 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            byte_range_a4_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp301);
            r10000_10ffff_tmp302 = simd_and(sequence_f0_9b_b2_adv, byte_range_a4_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp302);
            r10000_10ffff_tmp303 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp35);
            byte_range_b3_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp303);
            sequence_f0_9b_byte_range_b3_bf = simd_and(sequence_f0_9b_adv, byte_range_b3_bf);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_b3_bf, carryQ.get_carry_in(248), r10000_10ffff_tmp304));
            sequence_f0_9b_byte_range_b3_bf_sfx = simd_and(r10000_10ffff_tmp304, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9b_byte_range_b3_bf_sfx);
            sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(249), r10000_10ffff_tmp305));
            sequence_f0_9c_byte_range_80_bf = simd_and(r10000_10ffff_tmp305, byte_range_80_bf);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_byte_range_80_bf, carryQ.get_carry_in(250), r10000_10ffff_tmp306));
            sequence_f0_9c_byte_range_80_bf_sfx = simd_and(r10000_10ffff_tmp306, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9c_byte_range_80_bf_sfx);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(251), r10000_10ffff_tmp307));
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp307, byte_83);
            sequence_f0_9d_adv = r10000_10ffff_tmp307;
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(252), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp308 = simd_and(sequence_f0_9d_83_adv, byte_range_b6_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp308);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp309 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_a7_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp309);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(253), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp310 = simd_and(sequence_f0_9d_84_adv, byte_range_a7_a8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp310);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(254), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp311 = simd_and(sequence_f0_9d_87_adv, byte_range_9e_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp311);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp312 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp313 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp312);
            byte_range_86_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp313);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(255), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp314 = simd_and(sequence_f0_9d_89_adv, byte_range_86_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp314);
            byte_range_8a_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp207);
            sequence_f0_9d_byte_range_8a_8b = simd_and(sequence_f0_9d_adv, byte_range_8a_8b);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8a_8b, carryQ.get_carry_in(256), r10000_10ffff_tmp315));
            sequence_f0_9d_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp315, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9d_byte_range_8a_8b_sfx);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            byte_range_97_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp96);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(257), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp316 = simd_and(sequence_f0_9d_8d_adv, byte_range_97_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp316);
            byte_range_b2_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp174);
            r10000_10ffff_tmp317 = simd_and(sequence_f0_9d_8d_adv, byte_range_b2_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp317);
            sequence_f0_9d_byte_range_8e_8f = simd_and(sequence_f0_9d_adv, byte_range_8e_8f);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8e_8f, carryQ.get_carry_in(258), r10000_10ffff_tmp318));
            sequence_f0_9d_byte_range_8e_8f_sfx = simd_and(r10000_10ffff_tmp318, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9d_byte_range_8e_8f_sfx);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(259), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp319 = simd_and(sequence_f0_9d_91_adv, byte_95);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp319);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(260), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp320 = simd_and(sequence_f0_9d_92_adv, byte_9d);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp320);
            byte_range_a0_a1 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp168);
            r10000_10ffff_tmp321 = simd_and(sequence_f0_9d_92_adv, byte_range_a0_a1);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp321);
            r10000_10ffff_tmp322 = simd_andc(r10000_10ffff_tmp64, basis_bits.bit_4);
            r10000_10ffff_tmp323 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp324 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp323), simd_andc(r10000_10ffff_tmp16, basis_bits.bit_5));
            byte_range_a3_a4 = simd_and(r10000_10ffff_tmp322, r10000_10ffff_tmp324);
            r10000_10ffff_tmp325 = simd_and(sequence_f0_9d_92_adv, byte_range_a3_a4);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp325);
            r10000_10ffff_tmp326 = simd_and(sequence_f0_9d_92_adv, byte_range_a7_a8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp326);
            r10000_10ffff_tmp327 = simd_and(sequence_f0_9d_92_adv, byte_ad);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp327);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp56);
            r10000_10ffff_tmp328 = simd_and(sequence_f0_9d_92_adv, byte_ba);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp328);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp12);
            r10000_10ffff_tmp329 = simd_and(sequence_f0_9d_92_adv, byte_bc);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp329);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(261), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp330 = simd_and(sequence_f0_9d_93_adv, byte_84);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp330);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(262), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp331 = simd_and(sequence_f0_9d_94_adv, byte_86);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp331);
            byte_range_8b_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp324);
            r10000_10ffff_tmp332 = simd_and(sequence_f0_9d_94_adv, byte_range_8b_8c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp332);
            r10000_10ffff_tmp333 = simd_and(sequence_f0_9d_94_adv, byte_95);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp333);
            r10000_10ffff_tmp334 = simd_and(sequence_f0_9d_94_adv, byte_9d);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp334);
            r10000_10ffff_tmp335 = simd_and(sequence_f0_9d_94_adv, byte_ba);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp335);
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9d_94_adv, byte_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp336);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(263), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp337 = simd_and(sequence_f0_9d_95_adv, byte_85);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp337);
            r10000_10ffff_tmp338 = simd_not(r10000_10ffff_tmp82);
            r10000_10ffff_tmp339 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp338), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_87_89 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp339);
            r10000_10ffff_tmp340 = simd_and(sequence_f0_9d_95_adv, byte_range_87_89);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp340);
            r10000_10ffff_tmp341 = simd_and(sequence_f0_9d_95_adv, byte_91);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp341);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            byte_range_a6_a7 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp94);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(264), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp342 = simd_and(sequence_f0_9d_9a_adv, byte_range_a6_a7);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp342);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp343 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_8c_8d = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp343);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(265), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp344 = simd_and(sequence_f0_9d_9f_adv, byte_range_8c_8d);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp344);
            sequence_f0_9d_byte_range_a0_bf = simd_and(sequence_f0_9d_adv, byte_range_a0_bf);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_a0_bf, carryQ.get_carry_in(266), r10000_10ffff_tmp345));
            sequence_f0_9d_byte_range_a0_bf_sfx = simd_and(r10000_10ffff_tmp345, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9d_byte_range_a0_bf_sfx);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(267), r10000_10ffff_tmp346));
            sequence_f0_9e_byte_range_80_9f = simd_and(r10000_10ffff_tmp346, byte_range_80_9f);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_80_9f, carryQ.get_carry_in(268), r10000_10ffff_tmp347));
            sequence_f0_9e_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp347, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9e_byte_range_80_9f_sfx);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp346, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp346;
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(269), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp348 = simd_and(sequence_f0_9e_a3_adv, byte_range_85_86);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp348);
            r10000_10ffff_tmp349 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp96);
            r10000_10ffff_tmp350 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp349);
            byte_range_97_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp350);
            r10000_10ffff_tmp351 = simd_and(sequence_f0_9e_a3_adv, byte_range_97_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp351);
            r10000_10ffff_tmp352 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp353 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp352), simd_andc(r10000_10ffff_tmp1, basis_bits.bit_3));
            byte_range_a4_b7 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp353);
            sequence_f0_9e_byte_range_a4_b7 = simd_and(sequence_f0_9e_adv, byte_range_a4_b7);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a4_b7, carryQ.get_carry_in(270), r10000_10ffff_tmp354));
            sequence_f0_9e_byte_range_a4_b7_sfx = simd_and(r10000_10ffff_tmp354, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9e_byte_range_a4_b7_sfx);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp127);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(271), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp355 = simd_and(sequence_f0_9e_b8_adv, byte_84);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp355);
            r10000_10ffff_tmp356 = simd_and(sequence_f0_9e_b8_adv, byte_a0);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp356);
            r10000_10ffff_tmp357 = simd_and(sequence_f0_9e_b8_adv, byte_a3);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp357);
            r10000_10ffff_tmp358 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp15);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp358, r10000_10ffff_tmp109);
            r10000_10ffff_tmp359 = simd_and(sequence_f0_9e_b8_adv, byte_range_a5_a6);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp359);
            r10000_10ffff_tmp360 = simd_and(sequence_f0_9e_b8_adv, byte_a8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp360);
            byte_b3 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp33);
            r10000_10ffff_tmp361 = simd_and(sequence_f0_9e_b8_adv, byte_b3);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp361);
            r10000_10ffff_tmp362 = simd_and(sequence_f0_9e_b8_adv, byte_b8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp362);
            r10000_10ffff_tmp363 = simd_and(sequence_f0_9e_b8_adv, byte_ba);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp363);
            r10000_10ffff_tmp364 = simd_and(sequence_f0_9e_b8_adv, byte_range_bc_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp364);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp168);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(272), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp365 = simd_and(sequence_f0_9e_b9_adv, byte_range_80_81);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp365);
            r10000_10ffff_tmp366 = simd_andc(r10000_10ffff_tmp55, basis_bits.bit_4);
            r10000_10ffff_tmp367 = simd_and(sequence_f0_9e_b9_adv, byte_range_83_86);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp367);
            r10000_10ffff_tmp368 = simd_and(sequence_f0_9e_b9_adv, byte_88);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp368);
            r10000_10ffff_tmp369 = simd_and(sequence_f0_9e_b9_adv, byte_8a);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp369);
            r10000_10ffff_tmp370 = simd_and(sequence_f0_9e_b9_adv, byte_8c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp370);
            r10000_10ffff_tmp371 = simd_and(sequence_f0_9e_b9_adv, byte_90);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp371);
            r10000_10ffff_tmp372 = simd_and(sequence_f0_9e_b9_adv, byte_93);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp372);
            r10000_10ffff_tmp373 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp15);
            byte_range_95_96 = simd_and(r10000_10ffff_tmp373, r10000_10ffff_tmp109);
            r10000_10ffff_tmp374 = simd_and(sequence_f0_9e_b9_adv, byte_range_95_96);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp374);
            r10000_10ffff_tmp375 = simd_and(sequence_f0_9e_b9_adv, byte_98);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp375);
            r10000_10ffff_tmp376 = simd_and(sequence_f0_9e_b9_adv, byte_9a);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp376);
            r10000_10ffff_tmp377 = simd_and(sequence_f0_9e_b9_adv, byte_9c);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp377);
            r10000_10ffff_tmp378 = simd_and(sequence_f0_9e_b9_adv, byte_9e);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp378);
            r10000_10ffff_tmp379 = simd_and(sequence_f0_9e_b9_adv, byte_a0);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp379);
            r10000_10ffff_tmp380 = simd_and(sequence_f0_9e_b9_adv, byte_a3);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp380);
            r10000_10ffff_tmp381 = simd_and(sequence_f0_9e_b9_adv, byte_range_a5_a6);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp381);
            r10000_10ffff_tmp382 = simd_and(sequence_f0_9e_b9_adv, byte_ab);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp382);
            r10000_10ffff_tmp383 = simd_and(sequence_f0_9e_b9_adv, byte_b3);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp383);
            r10000_10ffff_tmp384 = simd_and(sequence_f0_9e_b9_adv, byte_b8);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp384);
            r10000_10ffff_tmp385 = simd_and(sequence_f0_9e_b9_adv, byte_bd);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp385);
            r10000_10ffff_tmp386 = simd_and(sequence_f0_9e_b9_adv, byte_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp386);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(273), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp387 = simd_and(sequence_f0_9e_ba_adv, byte_8a);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp387);
            r10000_10ffff_tmp388 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp236, basis_bits.bit_2));
            byte_range_9c_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp388);
            r10000_10ffff_tmp389 = simd_and(sequence_f0_9e_ba_adv, byte_range_9c_a0);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp389);
            r10000_10ffff_tmp390 = simd_and(sequence_f0_9e_ba_adv, byte_a4);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp390);
            r10000_10ffff_tmp391 = simd_and(sequence_f0_9e_ba_adv, byte_aa);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp391);
            r10000_10ffff_tmp392 = simd_and(sequence_f0_9e_ba_adv, byte_range_bc_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp392);
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(274), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp393 = simd_and(sequence_f0_9e_bb_adv, byte_range_80_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp393);
            r10000_10ffff_tmp394 = simd_and(sequence_f0_9e_bb_adv, byte_range_b2_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp394);
            sequence_f0_9e_byte_range_bc_bf = simd_and(sequence_f0_9e_adv, byte_range_bc_bf);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_bc_bf, carryQ.get_carry_in(275), r10000_10ffff_tmp395));
            sequence_f0_9e_byte_range_bc_bf_sfx = simd_and(r10000_10ffff_tmp395, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9e_byte_range_bc_bf_sfx);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(276), r10000_10ffff_tmp396));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp396, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp396;
            byte_range_ac_af = r10000_10ffff_tmp218;
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(277), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp397 = simd_and(sequence_f0_9f_80_adv, byte_range_ac_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp397);
            byte_82 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp79);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            byte_range_94_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp1);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(278), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp398 = simd_and(sequence_f0_9f_82_adv, byte_range_94_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp398);
            r10000_10ffff_tmp399 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp400 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp399), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_af_b0 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp400);
            r10000_10ffff_tmp401 = simd_and(sequence_f0_9f_82_adv, byte_range_af_b0);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp401);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(279), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp402 = simd_and(sequence_f0_9f_83_adv, byte_80);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp402);
            r10000_10ffff_tmp403 = simd_and(sequence_f0_9f_83_adv, byte_90);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp403);
            r10000_10ffff_tmp404 = simd_and(sequence_f0_9f_83_adv, byte_range_b6_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp404);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(280), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp405 = simd_and(sequence_f0_9f_84_adv, byte_range_8d_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp405);
            r10000_10ffff_tmp406 = simd_and(sequence_f0_9f_84_adv, byte_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp406);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(281), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp407 = simd_and(sequence_f0_9f_85_adv, byte_range_ac_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp407);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            r10000_10ffff_tmp408 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp186);
            byte_range_9b_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp408);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(282), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp409 = simd_and(sequence_f0_9f_86_adv, byte_range_9b_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp409);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            r10000_10ffff_tmp410 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp312);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp410);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(283), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp411 = simd_and(sequence_f0_9f_87_adv, byte_range_80_a5);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp411);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            byte_range_83_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp303);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(284), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp412 = simd_and(sequence_f0_9f_88_adv, byte_range_83_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp412);
            r10000_10ffff_tmp413 = simd_and(sequence_f0_9f_88_adv, byte_range_bb_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp413);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(285), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp414 = simd_and(sequence_f0_9f_89_adv, byte_range_89_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp414);
            r10000_10ffff_tmp415 = simd_and(sequence_f0_9f_89_adv, byte_range_92_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp415);
            sequence_f0_9f_byte_range_8a_8b = simd_and(sequence_f0_9f_adv, byte_range_8a_8b);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_8a_8b, carryQ.get_carry_in(286), r10000_10ffff_tmp416));
            sequence_f0_9f_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp416, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9f_byte_range_8a_8b_sfx);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(287), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp417 = simd_and(sequence_f0_9f_8c_adv, byte_range_ad_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp417);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(288), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp418 = simd_and(sequence_f0_9f_8d_adv, byte_range_be_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp418);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            r10000_10ffff_tmp419 = simd_not(r10000_10ffff_tmp1);
            r10000_10ffff_tmp420 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp419), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_8f_93 = simd_and(byte_range_80_9f, r10000_10ffff_tmp420);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(289), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp421 = simd_and(sequence_f0_9f_8f_adv, byte_range_8f_93);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp421);
            r10000_10ffff_tmp422 = simd_and(sequence_f0_9f_8f_adv, byte_range_b8_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp422);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(290), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp423 = simd_and(sequence_f0_9f_93_adv, byte_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp423);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(291), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp424 = simd_and(sequence_f0_9f_95_adv, byte_range_8b_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp424);
            r10000_10ffff_tmp425 = simd_and(sequence_f0_9f_95_adv, byte_ba);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp425);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(292), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp426 = simd_and(sequence_f0_9f_96_adv, byte_a4);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp426);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            byte_range_83_84 = simd_and(r10000_10ffff_tmp366, r10000_10ffff_tmp324);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(293), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp427 = simd_and(sequence_f0_9f_99_adv, byte_range_83_84);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp427);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_90_9f = r10000_10ffff_tmp54;
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(294), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp428 = simd_and(sequence_f0_9f_9b_adv, byte_range_90_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp428);
            r10000_10ffff_tmp429 = simd_and(sequence_f0_9f_9b_adv, byte_range_ad_af);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp429);
            byte_range_b4_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp1);
            r10000_10ffff_tmp430 = simd_and(sequence_f0_9f_9b_adv, byte_range_b4_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp430);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(295), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp431 = simd_and(sequence_f0_9f_9d_adv, byte_range_b4_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp431);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            r10000_10ffff_tmp432 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp190);
            r10000_10ffff_tmp433 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp432);
            byte_range_95_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp433);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(296), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp434 = simd_and(sequence_f0_9f_9f_adv, byte_range_95_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp434);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            byte_range_8c_8f = r10000_10ffff_tmp200;
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(297), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp435 = simd_and(sequence_f0_9f_a0_adv, byte_range_8c_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp435);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(298), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp436 = simd_and(sequence_f0_9f_a1_adv, byte_range_88_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp436);
            r10000_10ffff_tmp437 = simd_and(byte_range_90_9f, basis_bits.bit_4);
            byte_range_9a_9f = simd_and(r10000_10ffff_tmp437, r10000_10ffff_tmp82);
            r10000_10ffff_tmp438 = simd_and(sequence_f0_9f_a1_adv, byte_range_9a_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp438);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(299), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp439 = simd_and(sequence_f0_9f_a2_adv, byte_range_88_8f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp439);
            r10000_10ffff_tmp440 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            byte_range_ae_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp440);
            r10000_10ffff_tmp441 = simd_and(sequence_f0_9f_a2_adv, byte_range_ae_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp441);
            r10000_10ffff_tmp442 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp443 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp442);
            byte_range_a3_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp443);
            sequence_f0_9f_byte_range_a3_bf = simd_and(sequence_f0_9f_adv, byte_range_a3_bf);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_a3_bf, carryQ.get_carry_in(300), r10000_10ffff_tmp444));
            sequence_f0_9f_byte_range_a3_bf_sfx = simd_and(r10000_10ffff_tmp444, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_9f_byte_range_a3_bf_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(301), r10000_10ffff_tmp445));
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp445, byte_9b);
            sequence_f0_aa_adv = r10000_10ffff_tmp445;
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(302), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp446 = simd_and(sequence_f0_aa_9b_adv, byte_range_97_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp446);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(303), r10000_10ffff_tmp447));
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp447, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp447;
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(304), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp448 = simd_and(sequence_f0_ab_9c_adv, byte_range_b5_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp448);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(305), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp449 = simd_and(sequence_f0_ab_a0_adv, byte_range_9e_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp449);
            sequence_f0_ab_byte_range_a1_bf = simd_and(sequence_f0_ab_adv, byte_range_a1_bf);
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_a1_bf, carryQ.get_carry_in(306), r10000_10ffff_tmp450));
            sequence_f0_ab_byte_range_a1_bf_sfx = simd_and(r10000_10ffff_tmp450, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_ab_byte_range_a1_bf_sfx);
            byte_range_ac_ae = simd_andc(byte_range_ac_af, r10000_10ffff_tmp16);
            byte_f0_byte_range_ac_ae = simd_and(byte_f0_adv, byte_range_ac_ae);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae, carryQ.get_carry_in(307), r10000_10ffff_tmp451));
            byte_f0_byte_range_ac_ae_sfx = simd_and(r10000_10ffff_tmp451, byte_range_80_bf);
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae_sfx, carryQ.get_carry_in(308), r10000_10ffff_tmp452));
            byte_f0_byte_range_ac_ae_sfx_sfx = simd_and(r10000_10ffff_tmp452, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f0_byte_range_ac_ae_sfx_sfx);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(309), r10000_10ffff_tmp453));
            sequence_f0_af_byte_range_80_9f = simd_and(r10000_10ffff_tmp453, byte_range_80_9f);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_80_9f, carryQ.get_carry_in(310), r10000_10ffff_tmp454));
            sequence_f0_af_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp454, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_af_byte_range_80_9f_sfx);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp453, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp453;
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(311), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp455 = simd_and(sequence_f0_af_a8_adv, byte_range_9e_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp455);
            byte_range_a9_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp153);
            sequence_f0_af_byte_range_a9_bf = simd_and(sequence_f0_af_adv, byte_range_a9_bf);
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a9_bf, carryQ.get_carry_in(312), r10000_10ffff_tmp456));
            sequence_f0_af_byte_range_a9_bf_sfx = simd_and(r10000_10ffff_tmp456, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f0_af_byte_range_a9_bf_sfx);
            byte_f0_byte_range_b0_bf = simd_and(byte_f0_adv, byte_range_b0_bf);
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf, carryQ.get_carry_in(313), r10000_10ffff_tmp457));
            byte_f0_byte_range_b0_bf_sfx = simd_and(r10000_10ffff_tmp457, byte_range_80_bf);
            carryQ.cq[314] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf_sfx, carryQ.get_carry_in(314), r10000_10ffff_tmp458));
            byte_f0_byte_range_b0_bf_sfx_sfx = simd_and(r10000_10ffff_tmp458, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f0_byte_range_b0_bf_sfx_sfx);
            r10000_10ffff_tmp459 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp1);
            byte_range_f1_f2 = simd_and(r10000_10ffff_tmp459, r10000_10ffff_tmp109);
            carryQ.cq[315] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(315), r10000_10ffff_tmp460));
            byte_range_f1_f2_sfx = simd_and(r10000_10ffff_tmp460, byte_range_80_bf);
            carryQ.cq[316] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(316), r10000_10ffff_tmp461));
            byte_range_f1_f2_sfx_sfx = simd_and(r10000_10ffff_tmp461, byte_range_80_bf);
            carryQ.cq[317] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(317), r10000_10ffff_tmp462));
            byte_range_f1_f2_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp462, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_range_f1_f2_sfx_sfx_sfx);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp33);
            carryQ.cq[318] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(318), r10000_10ffff_tmp463));
            byte_f3_byte_range_80_9f = simd_and(r10000_10ffff_tmp463, byte_range_80_9f);
            carryQ.cq[319] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f, carryQ.get_carry_in(319), r10000_10ffff_tmp464));
            byte_f3_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp464, byte_range_80_bf);
            carryQ.cq[320] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f_sfx, carryQ.get_carry_in(320), r10000_10ffff_tmp465));
            byte_f3_byte_range_80_9f_sfx_sfx = simd_and(r10000_10ffff_tmp465, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f3_byte_range_80_9f_sfx_sfx);
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp463, byte_a0);
            carryQ.cq[321] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(321), r10000_10ffff_tmp466));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp466, byte_80);
            byte_f3_adv = r10000_10ffff_tmp463;
            sequence_f3_a0_adv = r10000_10ffff_tmp466;
            carryQ.cq[322] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(322), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp467 = simd_and(sequence_f3_a0_80_adv, byte_80);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp467);
            byte_range_82_9f = simd_and(byte_range_80_9f, r10000_10ffff_tmp234);
            r10000_10ffff_tmp468 = simd_and(sequence_f3_a0_80_adv, byte_range_82_9f);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp468);
            r10000_10ffff_tmp469 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp469);
            sequence_f3_a0_byte_range_82_83 = simd_and(sequence_f3_a0_adv, byte_range_82_83);
            carryQ.cq[323] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_82_83, carryQ.get_carry_in(323), r10000_10ffff_tmp470));
            sequence_f3_a0_byte_range_82_83_sfx = simd_and(r10000_10ffff_tmp470, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f3_a0_byte_range_82_83_sfx);
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            carryQ.cq[324] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(324), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp471 = simd_and(sequence_f3_a0_87_adv, byte_range_b0_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp471);
            r10000_10ffff_tmp472 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp99);
            byte_range_88_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp472);
            sequence_f3_a0_byte_range_88_bf = simd_and(sequence_f3_a0_adv, byte_range_88_bf);
            carryQ.cq[325] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_88_bf, carryQ.get_carry_in(325), r10000_10ffff_tmp473));
            sequence_f3_a0_byte_range_88_bf_sfx = simd_and(r10000_10ffff_tmp473, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, sequence_f3_a0_byte_range_88_bf_sfx);
            byte_range_a1_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp60);
            byte_f3_byte_range_a1_af = simd_and(byte_f3_adv, byte_range_a1_af);
            carryQ.cq[326] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_af, carryQ.get_carry_in(326), r10000_10ffff_tmp474));
            byte_f3_byte_range_a1_af_sfx = simd_and(r10000_10ffff_tmp474, byte_range_80_bf);
            carryQ.cq[327] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_af_sfx, carryQ.get_carry_in(327), r10000_10ffff_tmp475));
            byte_f3_byte_range_a1_af_sfx_sfx = simd_and(r10000_10ffff_tmp475, byte_range_80_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, byte_f3_byte_range_a1_af_sfx_sfx);
            sequence_f3_bf = simd_and(byte_f3_adv, byte_bf);
            carryQ.cq[328] = carryout2carry(pablo_blk_Advance(sequence_f3_bf, carryQ.get_carry_in(328), r10000_10ffff_tmp476));
            sequence_f3_bf_bf = simd_and(r10000_10ffff_tmp476, byte_bf);
            sequence_f3_bf_adv = r10000_10ffff_tmp476;
            carryQ.cq[329] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_bf, carryQ.get_carry_in(329), sequence_f3_bf_bf_adv));
            r10000_10ffff_tmp477 = simd_and(sequence_f3_bf_bf_adv, byte_range_be_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp477);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp37);
            carryQ.cq[330] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(330), r10000_10ffff_tmp478));
            sequence_f4_8f = simd_and(r10000_10ffff_tmp478, byte_8f);
            carryQ.cq[331] = carryout2carry(pablo_blk_Advance(sequence_f4_8f, carryQ.get_carry_in(331), r10000_10ffff_tmp479));
            sequence_f4_8f_bf = simd_and(r10000_10ffff_tmp479, byte_bf);
            byte_f4_adv = r10000_10ffff_tmp478;
            sequence_f4_8f_adv = r10000_10ffff_tmp479;
            carryQ.cq[332] = carryout2carry(pablo_blk_Advance(sequence_f4_8f_bf, carryQ.get_carry_in(332), sequence_f4_8f_bf_adv));
            r10000_10ffff_tmp480 = simd_and(sequence_f4_8f_bf_adv, byte_range_be_bf);
            struct_gc_Cn.cc = simd_or(struct_gc_Cn.cc, r10000_10ffff_tmp480);
          }
          else {
            carryQ.CarryDequeueEnqueue(150, 183);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 333);
        }
        carryQ.CarryQ_Adjust(333);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<333, 0> carryQ;
  };

  struct Property_gc_Co {
  Property_gc_Co() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Co & struct_gc_Co) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ee, byte_range_80_bf, ra000_ffff_tmp4;
		BitBlock byte_ee_byte_range_80_bf, ra000_ffff_tmp5;
		BitBlock byte_ee_byte_range_80_bf_sfx, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_ef, ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock byte_range_80_a3, ra000_ffff_tmp11, byte_ef_byte_range_80_a3;
		BitBlock ra000_ffff_tmp12, byte_ef_byte_range_80_a3_sfx, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f3, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_range_b0_be;
		BitBlock r10000_10ffff_tmp8, byte_f3_byte_range_b0_be, r10000_10ffff_tmp9;
		BitBlock byte_f3_byte_range_b0_be_sfx, r10000_10ffff_tmp10;
		BitBlock byte_f3_byte_range_b0_be_sfx_sfx, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_bf, sequence_f3_bf;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, byte_range_80_be;
		BitBlock r10000_10ffff_tmp16, sequence_f3_bf_byte_range_80_be;
		BitBlock r10000_10ffff_tmp17, sequence_f3_bf_byte_range_80_be_sfx;
		BitBlock sequence_f3_bf_bf, byte_f3_adv, sequence_f3_bf_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_range_80_bd, sequence_f3_bf_bf_adv, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock byte_f4, r10000_10ffff_tmp25, r10000_10ffff_tmp26, byte_range_80_8e;
		BitBlock r10000_10ffff_tmp27, byte_f4_byte_range_80_8e, r10000_10ffff_tmp28;
		BitBlock byte_f4_byte_range_80_8e_sfx, r10000_10ffff_tmp29;
		BitBlock byte_f4_byte_range_80_8e_sfx_sfx, byte_8f, sequence_f4_8f;
		BitBlock r10000_10ffff_tmp30, sequence_f4_8f_byte_range_80_be;
		BitBlock r10000_10ffff_tmp31, sequence_f4_8f_byte_range_80_be_sfx;
		BitBlock sequence_f4_8f_bf, byte_f4_adv, sequence_f4_8f_adv;
		BitBlock sequence_f4_8f_bf_adv, r10000_10ffff_tmp32;




        struct_gc_Co.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 16))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ee = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(0), ra000_ffff_tmp4));
              byte_ee_byte_range_80_bf = simd_and(ra000_ffff_tmp4, byte_range_80_bf);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(1), ra000_ffff_tmp5));
              byte_ee_byte_range_80_bf_sfx = simd_and(ra000_ffff_tmp5, byte_range_80_bf);
              struct_gc_Co.cc = simd_or(struct_gc_Co.cc, byte_ee_byte_range_80_bf_sfx);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_3, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, ra000_ffff_tmp9);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp10);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(2), ra000_ffff_tmp11));
              byte_ef_byte_range_80_a3 = simd_and(ra000_ffff_tmp11, byte_range_80_a3);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(3), ra000_ffff_tmp12));
              byte_ef_byte_range_80_a3_sfx = simd_and(ra000_ffff_tmp12, byte_range_80_bf);
              struct_gc_Co.cc = simd_or(struct_gc_Co.cc, byte_ef_byte_range_80_a3_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(4, 12))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp6 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp6);
            byte_range_b0_be = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(4), r10000_10ffff_tmp8));
            byte_f3_byte_range_b0_be = simd_and(r10000_10ffff_tmp8, byte_range_b0_be);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be, carryQ.get_carry_in(5), r10000_10ffff_tmp9));
            byte_f3_byte_range_b0_be_sfx = simd_and(r10000_10ffff_tmp9, byte_range_80_bf);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be_sfx, carryQ.get_carry_in(6), r10000_10ffff_tmp10));
            byte_f3_byte_range_b0_be_sfx_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, byte_f3_byte_range_b0_be_sfx_sfx);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_bf = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            sequence_f3_bf = simd_and(r10000_10ffff_tmp8, byte_bf);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp14);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp15);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f3_bf, carryQ.get_carry_in(7), r10000_10ffff_tmp16));
            sequence_f3_bf_byte_range_80_be = simd_and(r10000_10ffff_tmp16, byte_range_80_be);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_byte_range_80_be, carryQ.get_carry_in(8), r10000_10ffff_tmp17));
            sequence_f3_bf_byte_range_80_be_sfx = simd_and(r10000_10ffff_tmp17, byte_range_80_bf);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, sequence_f3_bf_byte_range_80_be_sfx);
            sequence_f3_bf_bf = simd_and(r10000_10ffff_tmp16, byte_bf);
            byte_f3_adv = r10000_10ffff_tmp8;
            sequence_f3_bf_adv = r10000_10ffff_tmp16;
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp19);
            byte_range_80_bd = simd_andc(byte_range_80_bf, r10000_10ffff_tmp20);
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_bf, carryQ.get_carry_in(9), sequence_f3_bf_bf_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f3_bf_bf_adv, byte_range_80_bd);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp26 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp25);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp7);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(10), r10000_10ffff_tmp27));
            byte_f4_byte_range_80_8e = simd_and(r10000_10ffff_tmp27, byte_range_80_8e);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8e, carryQ.get_carry_in(11), r10000_10ffff_tmp28));
            byte_f4_byte_range_80_8e_sfx = simd_and(r10000_10ffff_tmp28, byte_range_80_bf);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8e_sfx, carryQ.get_carry_in(12), r10000_10ffff_tmp29));
            byte_f4_byte_range_80_8e_sfx_sfx = simd_and(r10000_10ffff_tmp29, byte_range_80_bf);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, byte_f4_byte_range_80_8e_sfx_sfx);
            byte_8f = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp13);
            sequence_f4_8f = simd_and(r10000_10ffff_tmp27, byte_8f);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f4_8f, carryQ.get_carry_in(13), r10000_10ffff_tmp30));
            sequence_f4_8f_byte_range_80_be = simd_and(r10000_10ffff_tmp30, byte_range_80_be);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f4_8f_byte_range_80_be, carryQ.get_carry_in(14), r10000_10ffff_tmp31));
            sequence_f4_8f_byte_range_80_be_sfx = simd_and(r10000_10ffff_tmp31, byte_range_80_bf);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, sequence_f4_8f_byte_range_80_be_sfx);
            sequence_f4_8f_bf = simd_and(r10000_10ffff_tmp30, byte_bf);
            byte_f4_adv = r10000_10ffff_tmp27;
            sequence_f4_8f_adv = r10000_10ffff_tmp30;
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f4_8f_bf, carryQ.get_carry_in(15), sequence_f4_8f_bf_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f4_8f_bf_adv, byte_range_80_bd);
            struct_gc_Co.cc = simd_or(struct_gc_Co.cc, r10000_10ffff_tmp32);
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 12);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 16);
        }
        carryQ.CarryQ_Adjust(16);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<16, 0> carryQ;
  };

  struct Property_gc_LC {
  Property_gc_LC() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_LC & struct_gc_LC) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_7a_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock byte_range_80_96, byte_c3_adv, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, byte_range_98_b6, r80_7ff_tmp21;
		BitBlock byte_range_b8_bf, r80_7ff_tmp22, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp6, r100_2ff_tmp7, r100_2ff_tmp8;
		BitBlock r100_24f_tmp1, byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_c6, r180_24f_tmp2, r180_24f_tmp3;
		BitBlock byte_range_80_ba, byte_c6_adv, r180_24f_tmp4, r180_24f_tmp5;
		BitBlock byte_range_bc_bf, r180_24f_tmp6, r180_24f_tmp7, byte_c7;
		BitBlock r180_24f_tmp8, r180_24f_tmp9, byte_range_84_bf, byte_c7_adv;
		BitBlock r180_24f_tmp10, r180_24f_tmp11, byte_c8, byte_c8_adv, r180_24f_tmp12;
		BitBlock byte_c9_adv, r180_24f_tmp13, byte_range_90_bf, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, byte_ca, byte_range_80_af, r100_2ff_tmp11;
		BitBlock r100_2ff_tmp12, r100_2ff_tmp13, r250_2af_tmp1, r250_2af_tmp2;
		BitBlock byte_range_80_93, byte_ca_adv, r250_2af_tmp3, r250_2af_tmp4;
		BitBlock r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7, r250_2af_tmp8;
		BitBlock byte_range_95_af, r250_2af_tmp9, r100_3ff_tmp2, r100_3ff_tmp3;
		BitBlock byte_cd, byte_range_b0_bf, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, byte_range_ce_cf, r100_3ff_tmp7, byte_range_b0_b3;
		BitBlock byte_cd_adv, r370_3ff_tmp1, r370_3ff_tmp2, byte_range_b6_b7;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock byte_range_bb_bd, r370_3ff_tmp7, r370_3ff_tmp8, byte_bf;
		BitBlock r370_3ff_tmp9, r370_3ff_tmp10, byte_ce, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, byte_86, byte_ce_adv, r370_3ff_tmp13, r370_3ff_tmp14;
		BitBlock r370_3ff_tmp15, byte_range_88_8a, r370_3ff_tmp16, r370_3ff_tmp17;
		BitBlock byte_8c, r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20;
		BitBlock r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23, byte_range_8e_a1;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock byte_range_a3_bf, r370_3ff_tmp28, byte_cf, r370_3ff_tmp29;
		BitBlock r370_3ff_tmp30, r370_3ff_tmp31, r370_3ff_tmp32, byte_range_80_b5;
		BitBlock byte_cf_adv, r370_3ff_tmp33, byte_range_b7_bf, r370_3ff_tmp34;
		BitBlock r80_7ff_tmp23, r80_7ff_tmp24, byte_range_d0_d7, byte_range_d0_d3;
		BitBlock r400_4ff_tmp1, byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx;
		BitBlock byte_d2, r400_4ff_tmp3, byte_range_80_81, byte_d2_adv, r400_4ff_tmp4;
		BitBlock r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7, r400_4ff_tmp8;
		BitBlock byte_range_8a_bf, r400_4ff_tmp9, byte_d3, byte_d3_adv, r400_4ff_tmp10;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1, byte_d4;
		BitBlock r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv, r500_52f_tmp1;
		BitBlock r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1;
		BitBlock r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3, byte_d5_adv;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, byte_range_a1_bf;
		BitBlock r530_58f_tmp7, byte_range_80_87, byte_d6_adv, r530_58f_tmp8;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5;
		BitBlock sequence_e1_82, byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_83, sequence_e1_83;
		BitBlock r1000_1fff_tmp8, r1000_1fff_tmp9, byte_range_80_85;
		BitBlock sequence_e1_83_adv, r1000_1fff_tmp10, r1000_1fff_tmp11, byte_87;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14, byte_8d;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17, byte_b4;
		BitBlock sequence_e1_b4, r1000_1fff_tmp18, r1000_1fff_tmp19, byte_range_80_ab;
		BitBlock sequence_e1_b4_adv, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock sequence_e1_b5, r1000_1fff_tmp22, r1000_1fff_tmp23, byte_range_ab_b7;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, byte_range_b9_bf, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, byte_b6, sequence_e1_b6, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, byte_range_80_9a, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, byte_range_b8_bb;
		BitBlock byte_e1_byte_range_b8_bb, r1000_1fff_tmp33;
		BitBlock byte_e1_byte_range_b8_bb_sfx, r1000_1fff_tmp34, r1000_1fff_tmp35;
		BitBlock byte_bc, sequence_e1_bc, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, byte_range_80_95, sequence_e1_bc_adv;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, r1000_1fff_tmp41;
		BitBlock r1000_1fff_tmp42, byte_range_98_9d, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, byte_bd, sequence_e1_bd, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, sequence_e1_bd_adv, r1000_1fff_tmp47;
		BitBlock r1000_1fff_tmp48, byte_range_88_8d, r1000_1fff_tmp49;
		BitBlock byte_range_90_97, r1000_1fff_tmp50, r1000_1fff_tmp51, byte_99;
		BitBlock r1000_1fff_tmp52, r1000_1fff_tmp53, byte_9b, r1000_1fff_tmp54;
		BitBlock byte_9d, r1000_1fff_tmp55, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, r1000_1fff_tmp59, r1000_1fff_tmp60;
		BitBlock r1000_1fff_tmp61, byte_range_9f_bd, r1000_1fff_tmp62;
		BitBlock r1000_1fff_tmp63, byte_be, sequence_e1_be, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock byte_range_80_b4, sequence_e1_be_adv, r1000_1fff_tmp68;
		BitBlock r1000_1fff_tmp69, r1000_1fff_tmp70, byte_range_b6_bc;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, sequence_e1_bf, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, byte_range_82_84, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp75, byte_range_86_8c, r1000_1fff_tmp76;
		BitBlock byte_range_90_93, r1000_1fff_tmp77, r1000_1fff_tmp78;
		BitBlock r1000_1fff_tmp79, byte_range_96_9b, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, r1000_1fff_tmp82, byte_range_a0_ac;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, byte_range_b2_b4;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84, r2000_2fff_tmp3;
		BitBlock sequence_e2_84, byte_e2_adv, sequence_e2_84_adv, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, byte_range_8a_93;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_95, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock byte_range_99_9d, r2000_2fff_tmp21, r2000_2fff_tmp22, byte_a4;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, byte_a6, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, byte_a8, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, byte_range_aa_ad;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, byte_range_af_b4;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, byte_b9, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock byte_85, sequence_e2_85, r2000_2fff_tmp45, r2000_2fff_tmp46;
		BitBlock byte_range_85_89, sequence_e2_85_adv, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_8e, r2000_2fff_tmp49, sequence_e2_86;
		BitBlock r2000_2fff_tmp50, r2000_2fff_tmp51, r2000_2fff_tmp52;
		BitBlock byte_range_83_84, sequence_e2_86_adv, r2000_2fff_tmp53, byte_b0;
		BitBlock sequence_e2_b0, r2000_2fff_tmp54, r2000_2fff_tmp55, byte_range_80_ae;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, byte_b1, sequence_e2_b1, r2000_2fff_tmp59;
		BitBlock byte_range_80_9e, sequence_e2_b1_adv, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, byte_range_a0_bb, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, byte_range_be_bf, r2000_2fff_tmp64, byte_b2;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, byte_b3, sequence_e2_b3;
		BitBlock r2000_2fff_tmp68, r2000_2fff_tmp69, byte_range_80_a4;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, byte_range_ab_ae;
		BitBlock r2000_2fff_tmp74, byte_range_b2_b3, r2000_2fff_tmp75, sequence_e2_b4;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, byte_range_80_a5, sequence_e2_b4_adv;
		BitBlock r2000_2fff_tmp80, byte_a7, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock byte_ad, r2000_2fff_tmp83, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_range_80_ad, sequence_ea_99_adv, ra000_ffff_tmp13, byte_9a;
		BitBlock sequence_ea_9a, ra000_ffff_tmp14, ra000_ffff_tmp15, byte_range_80_9b;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp16, ra000_ffff_tmp17, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock byte_range_a2_bf, sequence_ea_9c_adv, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, sequence_ea_9d, ra000_ffff_tmp23;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, byte_9e, sequence_ea_9e, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, sequence_ea_9e_adv, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, byte_range_8b_8e;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock byte_range_90_ad, ra000_ffff_tmp38, byte_range_b0_b1;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, byte_9f, sequence_ea_9f, byte_ba;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp41, ra000_ffff_tmp42, byte_ac;
		BitBlock sequence_ea_ac, sequence_ea_ac_adv, ra000_ffff_tmp43, sequence_ea_ad;
		BitBlock ra000_ffff_tmp44, sequence_ea_ad_adv, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, byte_range_a4_a5, ra000_ffff_tmp47, byte_ef;
		BitBlock ra000_ffff_tmp48, sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp49;
		BitBlock byte_range_80_86, sequence_ef_ac_adv, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, byte_range_93_97, ra000_ffff_tmp52, sequence_ef_bc;
		BitBlock byte_range_a1_ba, sequence_ef_bc_adv, ra000_ffff_tmp53;
		BitBlock sequence_ef_bd, byte_range_81_9a, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp54, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, byte_f0_adv, sequence_f0_90_adv;
		BitBlock sequence_f0_90_90_adv, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_91, sequence_f0_90_91;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_91_adv, r10000_10ffff_tmp11;
		BitBlock sequence_f0_91, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, byte_a2, r10000_10ffff_tmp15, sequence_f0_91_a2;
		BitBlock sequence_f0_91_adv, sequence_f0_91_a2_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_a3, sequence_f0_91_a3, byte_range_80_9f;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, sequence_f0_9d, r10000_10ffff_tmp21;
		BitBlock sequence_f0_9d_90, sequence_f0_9d_adv, sequence_f0_9d_90_adv;
		BitBlock r10000_10ffff_tmp22, sequence_f0_9d_91, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_range_80_94;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock byte_range_96_bf, r10000_10ffff_tmp31, byte_92, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, byte_range_80_9c;
		BitBlock sequence_f0_9d_92_adv, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock byte_range_9e_9f, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock byte_range_a5_a6, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, byte_range_a9_ac, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, byte_range_ae_b9, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock byte_bb, r10000_10ffff_tmp53, r10000_10ffff_tmp54, byte_range_bd_bf;
		BitBlock r10000_10ffff_tmp55, byte_93, sequence_f0_9d_93, byte_range_80_83;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, byte_range_85_bf, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, byte_94, sequence_f0_9d_94, r10000_10ffff_tmp61;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, byte_range_87_8a;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock byte_range_8d_94, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, byte_range_96_9c, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, byte_range_9e_b9, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, byte_range_bb_be;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, sequence_f0_9d_95;
		BitBlock byte_range_80_84, sequence_f0_9d_95_adv, r10000_10ffff_tmp82;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, byte_range_8a_90, r10000_10ffff_tmp87;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock byte_range_92_bf, r10000_10ffff_tmp91, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp94;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, r10000_10ffff_tmp95;
		BitBlock sequence_f0_9d_9a, r10000_10ffff_tmp96, r10000_10ffff_tmp97;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp98, r10000_10ffff_tmp99;
		BitBlock byte_range_a8_bf, r10000_10ffff_tmp100, sequence_f0_9d_9b, byte_80;
		BitBlock sequence_f0_9d_9b_adv, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock byte_range_82_9a, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock byte_range_9c_ba, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9d_9c, sequence_f0_9d_9c_adv;
		BitBlock r10000_10ffff_tmp111, r10000_10ffff_tmp112, r10000_10ffff_tmp113;
		BitBlock byte_range_96_b4, r10000_10ffff_tmp114, byte_range_b6_bf;
		BitBlock r10000_10ffff_tmp115, sequence_f0_9d_9d, r10000_10ffff_tmp116;
		BitBlock byte_range_80_8e, sequence_f0_9d_9d_adv, r10000_10ffff_tmp117;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, byte_range_90_ae, r10000_10ffff_tmp122;
		BitBlock r10000_10ffff_tmp123, r10000_10ffff_tmp124, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, byte_range_80_88;
		BitBlock sequence_f0_9d_9e_adv, r10000_10ffff_tmp127, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock byte_range_8a_a8, r10000_10ffff_tmp132, byte_range_aa_bf;
		BitBlock r10000_10ffff_tmp133, sequence_f0_9d_9f, byte_range_80_82;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp134, r10000_10ffff_tmp135;
		BitBlock byte_range_84_8b, r10000_10ffff_tmp136;




        struct_gc_LC.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_7a_1 = simd_and(tmp8, tmp9);
        struct_gc_LC.cc = simd_or(struct_gc_LC.cc, cc_range_41_7a_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 72))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 17))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp15 = simd_or(basis_bits.bit_4, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_3, r80_7ff_tmp15);
            byte_range_80_96 = simd_andc(r80_7ff_tmp13, r80_7ff_tmp16);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp17 = simd_and(byte_c3_adv, byte_range_80_96);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_not(r80_7ff_tmp16);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp18), simd_andc(r80_7ff_tmp19, basis_bits.bit_2));
            byte_range_98_b6 = simd_and(r80_7ff_tmp5, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_and(byte_c3_adv, byte_range_98_b6);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r80_7ff_tmp21);
            byte_range_b8_bf = simd_and(r80_7ff_tmp7, basis_bits.bit_4);
            r80_7ff_tmp22 = simd_and(byte_c3_adv, byte_range_b8_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r80_7ff_tmp22);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 6))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 4))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_and(basis_bits.bit_3, tmp3);
                    r180_24f_tmp3 = simd_and(basis_bits.bit_2, r180_24f_tmp2);
                    byte_range_80_ba = simd_andc(r80_7ff_tmp5, r180_24f_tmp3);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(4), byte_c6_adv));
                    r180_24f_tmp4 = simd_and(byte_c6_adv, byte_range_80_ba);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r180_24f_tmp4);
                    r180_24f_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    byte_range_bc_bf = simd_and(r80_7ff_tmp7, r180_24f_tmp5);
                    r180_24f_tmp6 = simd_and(byte_c6_adv, byte_range_bc_bf);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r180_24f_tmp6);
                    r180_24f_tmp7 = simd_and(r80_7ff_tmp8, tmp1);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp7);
                    r180_24f_tmp8 = simd_or(basis_bits.bit_3, tmp5);
                    r180_24f_tmp9 = simd_or(basis_bits.bit_2, r180_24f_tmp8);
                    byte_range_84_bf = simd_and(r80_7ff_tmp5, r180_24f_tmp9);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(5), byte_c7_adv));
                    r180_24f_tmp10 = simd_and(byte_c7_adv, byte_range_84_bf);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r180_24f_tmp10);
                    r180_24f_tmp11 = simd_andc(r100_2ff_tmp4, tmp6);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp11);
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(6), byte_c8_adv));
                    r180_24f_tmp12 = simd_and(byte_c8_adv, byte_range_80_bf);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r180_24f_tmp12);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp13 = simd_and(byte_c9_adv, byte_range_80_8f);
                    struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r180_24f_tmp13);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 4);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(7), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp9, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r250_2af_tmp1);
                  r250_2af_tmp2 = simd_and(basis_bits.bit_3, tmp5);
                  byte_range_80_93 = simd_andc(r80_7ff_tmp13, r250_2af_tmp2);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp3 = simd_and(byte_ca_adv, byte_range_80_93);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r250_2af_tmp3);
                  r250_2af_tmp4 = simd_not(basis_bits.bit_3);
                  r250_2af_tmp5 = simd_and(basis_bits.bit_5, tmp6);
                  r250_2af_tmp6 = simd_or(basis_bits.bit_4, r250_2af_tmp5);
                  r250_2af_tmp7 = simd_and(basis_bits.bit_3, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_or(simd_and(basis_bits.bit_2, r250_2af_tmp4), simd_andc(r250_2af_tmp7, basis_bits.bit_2));
                  byte_range_95_af = simd_and(r80_7ff_tmp5, r250_2af_tmp8);
                  r250_2af_tmp9 = simd_and(byte_ca_adv, byte_range_95_af);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r250_2af_tmp9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 6);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp7;
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(8), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(9, 2))) {
                byte_range_b0_b3 = simd_andc(byte_range_b0_bf, tmp5);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_range_b0_b3);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                byte_range_b6_b7 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_range_b6_b7);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp5 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp6 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp5), simd_andc(tmp1, basis_bits.bit_5));
                byte_range_bb_bd = simd_and(r370_3ff_tmp4, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_and(byte_cd_adv, byte_range_bb_bd);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(r100_3ff_tmp2, tmp1);
                byte_bf = simd_and(byte_range_b0_bf, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(byte_cd_adv, byte_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp12 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                byte_86 = simd_and(r370_3ff_tmp11, r370_3ff_tmp12);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(9), byte_ce_adv));
                r370_3ff_tmp13 = simd_and(byte_ce_adv, byte_86);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp15 = simd_and(r370_3ff_tmp11, r370_3ff_tmp14);
                byte_range_88_8a = simd_andc(r370_3ff_tmp15, tmp1);
                r370_3ff_tmp16 = simd_and(byte_ce_adv, byte_range_88_8a);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp16);
                r370_3ff_tmp17 = simd_andc(r100_3ff_tmp2, tmp6);
                byte_8c = simd_and(r370_3ff_tmp11, r370_3ff_tmp17);
                r370_3ff_tmp18 = simd_and(byte_ce_adv, byte_8c);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp18);
                r370_3ff_tmp19 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp20 = simd_or(basis_bits.bit_3, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_not(r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(basis_bits.bit_3, r100_3ff_tmp6);
                r370_3ff_tmp23 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp21), simd_andc(r370_3ff_tmp22, basis_bits.bit_2));
                byte_range_8e_a1 = simd_and(r80_7ff_tmp5, r370_3ff_tmp23);
                r370_3ff_tmp24 = simd_and(byte_ce_adv, byte_range_8e_a1);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp24);
                r370_3ff_tmp25 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp26 = simd_or(tmp5, tmp1);
                r370_3ff_tmp27 = simd_or(basis_bits.bit_3, r370_3ff_tmp26);
                byte_range_a3_bf = simd_and(r370_3ff_tmp25, r370_3ff_tmp27);
                r370_3ff_tmp28 = simd_and(byte_ce_adv, byte_range_a3_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp28);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp8);
                r370_3ff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp30 = simd_or(basis_bits.bit_4, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(basis_bits.bit_3, r370_3ff_tmp30);
                r370_3ff_tmp32 = simd_and(basis_bits.bit_2, r370_3ff_tmp31);
                byte_range_80_b5 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp32);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(10), byte_cf_adv));
                r370_3ff_tmp33 = simd_and(byte_cf_adv, byte_range_80_b5);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp33);
                byte_range_b7_bf = simd_and(byte_range_b0_bf, r80_7ff_tmp15);
                r370_3ff_tmp34 = simd_and(byte_cf_adv, byte_range_b7_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r370_3ff_tmp34);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 9);
            }
            r80_7ff_tmp23 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp24 = simd_and(byte_range_c0_ff, r80_7ff_tmp23);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp24, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(11, 6))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp24, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(11, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp24, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(11), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp24, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), byte_d2_adv));
                r400_4ff_tmp4 = simd_and(byte_d2_adv, byte_range_80_81);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r400_4ff_tmp6 = simd_and(basis_bits.bit_4, r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_or(basis_bits.bit_3, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_2, r400_4ff_tmp7);
                byte_range_8a_bf = simd_and(byte_range_80_bf, r400_4ff_tmp8);
                r400_4ff_tmp9 = simd_and(byte_d2_adv, byte_range_8a_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r400_4ff_tmp9);
                byte_d3 = simd_and(r80_7ff_tmp24, r80_7ff_tmp12);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), byte_d3_adv));
                r400_4ff_tmp10 = simd_and(byte_d3_adv, byte_range_80_bf);
                struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r400_4ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp24, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp24, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp24, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp24, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r530_58f_tmp3);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r530_58f_tmp4);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp6 = simd_or(basis_bits.bit_3, tmp7);
                  byte_range_a1_bf = simd_and(r530_58f_tmp5, r530_58f_tmp6);
                  r530_58f_tmp7 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r530_58f_tmp7);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp8 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r530_58f_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 17);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(17, 34))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(17), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(18, 20))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(18, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(18, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(19), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_83_adv, byte_range_80_85);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_83_adv, byte_87);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp13, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_83_adv, byte_8d);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp16);
                  byte_b4 = simd_and(r1000_1fff_tmp17, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  r1000_1fff_tmp18 = simd_or(basis_bits.bit_3, r1000_1fff_tmp13);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_2, r1000_1fff_tmp18);
                  byte_range_80_ab = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp19);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(21), sequence_e1_b4_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_b4_adv, byte_range_80_ab);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp21);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp22 = simd_not(basis_bits.bit_4);
                  r1000_1fff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp22), simd_andc(tmp3, basis_bits.bit_3));
                  byte_range_ab_b7 = simd_and(byte_range_a0_bf, r1000_1fff_tmp23);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(22), sequence_e1_b5_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b5_adv, byte_range_ab_b7);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp17, basis_bits.bit_4);
                  r1000_1fff_tmp26 = simd_or(basis_bits.bit_5, tmp6);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b5_adv, byte_range_b9_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp3);
                  byte_b6 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp28);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp29 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_and(basis_bits.bit_3, tmp3);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp29, r1000_1fff_tmp30);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(23), sequence_e1_b6_adv));
                  r1000_1fff_tmp31 = simd_and(sequence_e1_b6_adv, byte_range_80_9a);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b8_bb = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp32);
                  byte_e1_byte_range_b8_bb = simd_and(byte_e1_adv, byte_range_b8_bb);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b8_bb, carryQ.get_carry_in(24), r1000_1fff_tmp33));
                  byte_e1_byte_range_b8_bb_sfx = simd_and(r1000_1fff_tmp33, byte_range_80_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, byte_e1_byte_range_b8_bb_sfx);
                  r1000_1fff_tmp34 = simd_and(byte_range_80_bf, r1000_1fff_tmp16);
                  r1000_1fff_tmp35 = simd_andc(r1000_1fff_tmp13, tmp6);
                  byte_bc = simd_and(r1000_1fff_tmp34, r1000_1fff_tmp35);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp36 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp37 = simd_or(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp38 = simd_and(basis_bits.bit_3, r1000_1fff_tmp37);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp36, r1000_1fff_tmp38);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(25), sequence_e1_bc_adv));
                  r1000_1fff_tmp39 = simd_and(sequence_e1_bc_adv, byte_range_80_95);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp41 = simd_and(byte_range_80_bf, r1000_1fff_tmp40);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp41, basis_bits.bit_4);
                  byte_range_98_9d = simd_andc(r1000_1fff_tmp42, r1000_1fff_tmp9);
                  r1000_1fff_tmp43 = simd_and(sequence_e1_bc_adv, byte_range_98_9d);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp43);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_bc_adv, byte_range_a0_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp44);
                  byte_bd = simd_and(r1000_1fff_tmp34, r1000_1fff_tmp14);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp45 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp46 = simd_andc(r1000_1fff_tmp45, basis_bits.bit_4);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(26), sequence_e1_bd_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_bd_adv, byte_range_80_85);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp47);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp45, basis_bits.bit_4);
                  byte_range_88_8d = simd_andc(r1000_1fff_tmp48, r1000_1fff_tmp9);
                  r1000_1fff_tmp49 = simd_and(sequence_e1_bd_adv, byte_range_88_8d);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp49);
                  byte_range_90_97 = simd_andc(r1000_1fff_tmp41, basis_bits.bit_4);
                  r1000_1fff_tmp50 = simd_and(sequence_e1_bd_adv, byte_range_90_97);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp50);
                  r1000_1fff_tmp51 = simd_and(r1000_1fff_tmp32, r800_1fff_tmp1);
                  byte_99 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp51);
                  r1000_1fff_tmp52 = simd_and(sequence_e1_bd_adv, byte_99);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp52);
                  r1000_1fff_tmp53 = simd_and(r1000_1fff_tmp32, tmp1);
                  byte_9b = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp53);
                  r1000_1fff_tmp54 = simd_and(sequence_e1_bd_adv, byte_9b);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp54);
                  byte_9d = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp14);
                  r1000_1fff_tmp55 = simd_and(sequence_e1_bd_adv, byte_9d);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp55);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp13, basis_bits.bit_6);
                  r1000_1fff_tmp57 = simd_and(basis_bits.bit_3, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_not(r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp13, tmp1);
                  r1000_1fff_tmp60 = simd_and(basis_bits.bit_3, r1000_1fff_tmp59);
                  r1000_1fff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp58), simd_andc(r1000_1fff_tmp60, basis_bits.bit_2));
                  byte_range_9f_bd = simd_and(byte_range_80_bf, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(sequence_e1_bd_adv, byte_range_9f_bd);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp3);
                  byte_be = simd_and(r1000_1fff_tmp34, r1000_1fff_tmp63);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp64 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp65 = simd_or(basis_bits.bit_4, r1000_1fff_tmp64);
                  r1000_1fff_tmp66 = simd_and(basis_bits.bit_3, r1000_1fff_tmp65);
                  r1000_1fff_tmp67 = simd_and(basis_bits.bit_2, r1000_1fff_tmp66);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp67);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(27), sequence_e1_be_adv));
                  r1000_1fff_tmp68 = simd_and(sequence_e1_be_adv, byte_range_80_b4);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_not(r1000_1fff_tmp64);
                  r1000_1fff_tmp70 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp69), simd_andc(r1000_1fff_tmp9, basis_bits.bit_4));
                  byte_range_b6_bc = simd_and(r1000_1fff_tmp34, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(sequence_e1_be_adv, byte_range_b6_bc);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp71);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_be_adv, byte_be);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp72);
                  byte_bf = simd_and(r1000_1fff_tmp34, r1000_1fff_tmp59);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp73 = simd_not(tmp6);
                  r1000_1fff_tmp74 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp73), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp46, r1000_1fff_tmp74);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(28), sequence_e1_bf_adv));
                  r1000_1fff_tmp75 = simd_and(sequence_e1_bf_adv, byte_range_82_84);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp75);
                  byte_range_86_8c = simd_and(r1000_1fff_tmp45, r1000_1fff_tmp70);
                  r1000_1fff_tmp76 = simd_and(sequence_e1_bf_adv, byte_range_86_8c);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp76);
                  byte_range_90_93 = simd_andc(r1000_1fff_tmp41, tmp5);
                  r1000_1fff_tmp77 = simd_and(sequence_e1_bf_adv, byte_range_90_93);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp79 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp78), simd_andc(r1000_1fff_tmp9, basis_bits.bit_4));
                  byte_range_96_9b = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_and(sequence_e1_bf_adv, byte_range_96_9b);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp82 = simd_and(basis_bits.bit_4, r1000_1fff_tmp64);
                  byte_range_a0_ac = simd_andc(r1000_1fff_tmp81, r1000_1fff_tmp82);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_bf_adv, byte_range_a0_ac);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp83);
                  r1000_1fff_tmp84 = simd_andc(r1000_1fff_tmp34, basis_bits.bit_4);
                  byte_range_b2_b4 = simd_and(r1000_1fff_tmp84, r1000_1fff_tmp74);
                  r1000_1fff_tmp85 = simd_and(sequence_e1_bf_adv, byte_range_b2_b4);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp85);
                  r1000_1fff_tmp86 = simd_and(sequence_e1_bf_adv, byte_range_b6_bc);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r1000_1fff_tmp86);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(29, 9))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(29, 9))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(30), sequence_e2_84_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_84_adv, byte_82);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(sequence_e2_84_adv, byte_87);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp8 = simd_not(tmp5);
                  r2000_2fff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_4, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp8), simd_andc(r2000_2fff_tmp10, basis_bits.bit_3));
                  byte_range_8a_93 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(sequence_e2_84_adv, byte_range_8a_93);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp13);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp15);
                  byte_95 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_84_adv, byte_95);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp14, basis_bits.bit_4);
                  r2000_2fff_tmp19 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp20 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp19), simd_andc(tmp6, basis_bits.bit_5));
                  byte_range_99_9d = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_84_adv, byte_range_99_9d);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r2000_2fff_tmp22, r800_ffff_tmp2);
                  r2000_2fff_tmp23 = simd_and(sequence_e2_84_adv, byte_a4);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_84_adv, byte_a6);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp27 = simd_andc(r2000_2fff_tmp26, tmp6);
                  byte_a8 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(sequence_e2_84_adv, byte_a8);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(r2000_2fff_tmp22, basis_bits.bit_4);
                  r2000_2fff_tmp30 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_ad = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_84_adv, byte_range_aa_ad);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp33 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp34 = simd_or(basis_bits.bit_4, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_not(r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp37 = simd_and(r2000_2fff_tmp36, tmp1);
                  r2000_2fff_tmp38 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp35), simd_andc(r2000_2fff_tmp37, basis_bits.bit_3));
                  byte_range_af_b4 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(sequence_e2_84_adv, byte_range_af_b4);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp39);
                  r2000_2fff_tmp40 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp41 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp26, r2000_2fff_tmp15);
                  byte_b9 = simd_and(r2000_2fff_tmp41, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_84_adv, byte_b9);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp43);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp41, r2000_2fff_tmp36);
                  r2000_2fff_tmp44 = simd_and(sequence_e2_84_adv, byte_range_bc_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp44);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp45 = simd_not(r2000_2fff_tmp9);
                  r2000_2fff_tmp46 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp45), simd_andc(r2000_2fff_tmp33, basis_bits.bit_4));
                  byte_range_85_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp46);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp47 = simd_and(sequence_e2_85_adv, byte_range_85_89);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp36, r2000_4dff_tmp1);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_85_adv, byte_8e);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp49);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp24);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp50 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp51 = simd_not(tmp6);
                  r2000_2fff_tmp52 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp51), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_83_84 = simd_and(r2000_2fff_tmp50, r2000_2fff_tmp52);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_86_adv, byte_range_83_84);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp53);
                  byte_b0 = simd_andc(r2000_2fff_tmp41, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp54 = simd_or(basis_bits.bit_3, r2000_2fff_tmp37);
                  r2000_2fff_tmp55 = simd_and(basis_bits.bit_2, r2000_2fff_tmp54);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp55);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(33), sequence_e2_b0_adv));
                  r2000_2fff_tmp56 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp56);
                  byte_range_b0_bf = r2000_2fff_tmp41;
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_andc(r2000_2fff_tmp15, tmp5);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp58);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp59 = simd_and(basis_bits.bit_3, r2000_2fff_tmp37);
                  byte_range_80_9e = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp59);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(34), sequence_e2_b1_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b1_adv, byte_range_80_9e);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp60);
                  r2000_2fff_tmp61 = simd_and(basis_bits.bit_3, r2000_2fff_tmp36);
                  byte_range_a0_bb = simd_andc(r2000_2fff_tmp32, r2000_2fff_tmp61);
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b1_adv, byte_range_a0_bb);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp62);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp36, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp63);
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b1_adv, byte_range_be_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp64);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(35), sequence_e2_b2_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp65);
                  r2000_2fff_tmp66 = simd_and(byte_range_80_bf, r2000_2fff_tmp40);
                  r2000_2fff_tmp67 = simd_andc(tmp1, tmp5);
                  byte_b3 = simd_and(r2000_2fff_tmp66, r2000_2fff_tmp67);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp68 = simd_or(basis_bits.bit_3, r2000_2fff_tmp34);
                  r2000_2fff_tmp69 = simd_and(basis_bits.bit_2, r2000_2fff_tmp68);
                  byte_range_80_a4 = simd_andc(byte_range_80_bf, r2000_2fff_tmp69);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(36), sequence_e2_b3_adv));
                  r2000_2fff_tmp70 = simd_and(sequence_e2_b3_adv, byte_range_80_a4);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp70);
                  r2000_2fff_tmp71 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp72 = simd_and(r2000_2fff_tmp71, basis_bits.bit_4);
                  r2000_2fff_tmp73 = simd_xor(basis_bits.bit_5, tmp1);
                  byte_range_ab_ae = simd_and(r2000_2fff_tmp72, r2000_2fff_tmp73);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_b3_adv, byte_range_ab_ae);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp74);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp66, r800_4dff_tmp2);
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b3_adv, byte_range_b2_b3);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp75);
                  byte_b4 = simd_and(r2000_2fff_tmp66, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp76 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp77 = simd_or(basis_bits.bit_4, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(basis_bits.bit_3, r2000_2fff_tmp77);
                  r2000_2fff_tmp79 = simd_and(basis_bits.bit_2, r2000_2fff_tmp78);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r2000_2fff_tmp79);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(37), sequence_e2_b4_adv));
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b4_adv, byte_range_80_a5);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp80);
                  byte_a7 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp5);
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b4_adv, byte_a7);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp15);
                  byte_ad = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp82);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b4_adv, byte_ad);
                  struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r2000_2fff_tmp83);
                }
                else {
                  carryQ.CarryDequeueEnqueue(29, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(29, 9);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 20);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(38, 13))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(38), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              byte_range_80_ad = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(39), sequence_ea_99_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_range_80_ad);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp13);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp14 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              byte_range_80_9b = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp15);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(40), sequence_ea_9a_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_9a_adv, byte_range_80_9b);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp9, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp19 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_3, ra000_ffff_tmp19);
              byte_range_a2_bf = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp20);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(41), sequence_ea_9c_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_9c_adv, byte_range_a2_bf);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp23 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp23);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(42), sequence_ea_9d_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_9d_adv, byte_range_80_af);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp23);
              ra000_ffff_tmp26 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp27 = simd_or(basis_bits.bit_4, ra000_ffff_tmp26);
              byte_range_b1_bf = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(sequence_ea_9d_adv, byte_range_b1_bf);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp31 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp30);
              byte_range_80_87 = simd_andc(ra000_ffff_tmp31, basis_bits.bit_4);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(43), sequence_ea_9e_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ea_9e_adv, byte_range_80_87);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp31, basis_bits.bit_4);
              ra000_ffff_tmp34 = simd_xor(basis_bits.bit_5, tmp1);
              byte_range_8b_8e = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(sequence_ea_9e_adv, byte_range_8b_8e);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp37 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp36), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_ad = simd_and(r800_ffff_tmp3, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(sequence_ea_9e_adv, byte_range_90_ad);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp38);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp25, ra000_ffff_tmp19);
              ra000_ffff_tmp39 = simd_and(sequence_ea_9e_adv, byte_range_b0_b1);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp9, tmp1);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp40);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              byte_ba = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp3);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(44), sequence_ea_9f_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_9f_adv, byte_ba);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp41);
              ra000_ffff_tmp42 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              byte_ac = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp17);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_b0_bf = ra000_ffff_tmp25;
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(45), sequence_ea_ac_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp43);
              byte_ad = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp22);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp44 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp44);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(46), sequence_ea_ad_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_ad_adv, byte_range_80_9a);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_a4_a5 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(sequence_ea_ad_adv, byte_range_a4_a5);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp47);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp40);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(47), ra000_ffff_tmp48));
              sequence_ef_ac = simd_and(ra000_ffff_tmp48, byte_ac);
              byte_ef_adv = ra000_ffff_tmp48;
              ra000_ffff_tmp49 = simd_and(basis_bits.bit_5, tmp1);
              byte_range_80_86 = simd_andc(byte_range_80_87, ra000_ffff_tmp49);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(48), sequence_ef_ac_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ef_ac_adv, byte_range_80_86);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              byte_range_93_97 = simd_and(ra000_ffff_tmp51, tmp2);
              ra000_ffff_tmp52 = simd_and(sequence_ef_ac_adv, byte_range_93_97);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp52);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp17);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp18, tmp8);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(49), sequence_ef_bc_adv));
              ra000_ffff_tmp53 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp53);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp22);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp14, tmp8);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(50), sequence_ef_bd_adv));
              ra000_ffff_tmp54 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_gc_LC.cc = simd_or(struct_gc_LC.cc, ra000_ffff_tmp54);
            }
            else {
              carryQ.CarryDequeueEnqueue(38, 13);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(17, 34);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(51, 21))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(51), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(52), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(53), sequence_f0_90_90_adv));
            r10000_10ffff_tmp6 = simd_and(sequence_f0_90_90_adv, byte_range_80_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp6);
            r10000_10ffff_tmp7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, tmp5);
            byte_91 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(54), sequence_f0_90_91_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp11);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp12 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, tmp5);
            byte_a2 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(55), r10000_10ffff_tmp15));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp15, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(56), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(tmp1, tmp5);
            byte_a3 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(57), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp20);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(58), r10000_10ffff_tmp21));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp21, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp21;
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(59), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp22);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            byte_range_80_94 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp25);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(60), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_9d_91_adv, byte_range_80_94);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp29);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(sequence_f0_9d_91_adv, byte_range_96_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp31);
            byte_92 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp14);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp19, tmp6);
            r10000_10ffff_tmp33 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp32);
            byte_range_80_9c = simd_andc(byte_range_80_9f, r10000_10ffff_tmp33);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(61), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_9d_92_adv, byte_range_80_9c);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp19, basis_bits.bit_6);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(sequence_f0_9d_92_adv, byte_range_9e_9f);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_9d_92_adv, byte_a2);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp38);
            r10000_10ffff_tmp40 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(sequence_f0_9d_92_adv, byte_range_a5_a6);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_4);
            r10000_10ffff_tmp43 = simd_xor(basis_bits.bit_5, tmp6);
            byte_range_a9_ac = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_and(sequence_f0_9d_92_adv, byte_range_a9_ac);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp46 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp47), simd_andc(r10000_10ffff_tmp35, basis_bits.bit_3));
            byte_range_ae_b9 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_9d_92_adv, byte_range_ae_b9);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp51 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp51, tmp1);
            byte_bb = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_9d_92_adv, byte_bb);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp19);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp54, tmp6);
            r10000_10ffff_tmp55 = simd_and(sequence_f0_9d_92_adv, byte_range_bd_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp55);
            byte_93 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp17);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            byte_range_80_83 = simd_andc(byte_range_80_8f, tmp5);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(62), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_9d_93_adv, byte_range_80_83);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp58 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp57);
            byte_range_85_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp58);
            r10000_10ffff_tmp59 = simd_and(sequence_f0_9d_93_adv, byte_range_85_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_andc(r10000_10ffff_tmp38, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp60);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp61 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp27);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(63), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_9d_94_adv, byte_range_80_85);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_not(tmp2);
            r10000_10ffff_tmp64 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp65 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp63), simd_andc(r10000_10ffff_tmp64, basis_bits.bit_4));
            byte_range_87_8a = simd_and(byte_range_80_8f, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(sequence_f0_9d_94_adv, byte_range_87_8a);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp68 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp67), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_3));
            byte_range_8d_94 = simd_and(byte_range_80_9f, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(sequence_f0_9d_94_adv, byte_range_8d_94);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp70), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            byte_range_96_9c = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(sequence_f0_9d_94_adv, byte_range_96_9c);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp72);
            r10000_10ffff_tmp73 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp74 = simd_not(r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp74), simd_andc(r10000_10ffff_tmp75, basis_bits.bit_2));
            byte_range_9e_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp76);
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9d_94_adv, byte_range_9e_b9);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp50, basis_bits.bit_4);
            r10000_10ffff_tmp79 = simd_xor(basis_bits.bit_5, tmp1);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(sequence_f0_9d_94_adv, byte_range_bb_be);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp8);
            byte_95 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp81);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp23);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(64), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp82 = simd_and(sequence_f0_9d_95_adv, byte_range_80_84);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp82);
            r10000_10ffff_tmp83 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp13);
            byte_86 = simd_and(byte_range_80_8f, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(sequence_f0_9d_95_adv, byte_86);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_not(tmp7);
            r10000_10ffff_tmp86 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp85), simd_andc(r10000_10ffff_tmp46, basis_bits.bit_3));
            byte_range_8a_90 = simd_and(byte_range_80_9f, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9d_95_adv, byte_range_8a_90);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_or(tmp5, basis_bits.bit_6);
            r10000_10ffff_tmp89 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp88);
            r10000_10ffff_tmp90 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp89);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_and(sequence_f0_9d_95_adv, byte_range_92_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp91);
            r10000_10ffff_tmp92 = simd_not(r10000_10ffff_tmp45);
            r10000_10ffff_tmp93 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp92), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp93);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(65), r10000_10ffff_tmp94));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp94, byte_range_80_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, sequence_f0_9d_byte_range_96_99_sfx);
            r10000_10ffff_tmp95 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp13);
            byte_9a = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp95);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp96 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp97 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp96);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp97);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(66), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp98 = simd_and(sequence_f0_9d_9a_adv, byte_range_80_a5);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_9a_adv, byte_range_a8_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp100);
            byte_9b = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp52);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            byte_80 = simd_andc(byte_range_80_8f, tmp7);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(67), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp101 = simd_and(sequence_f0_9d_9b_adv, byte_80);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp101);
            r10000_10ffff_tmp102 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(r10000_10ffff_tmp88, basis_bits.bit_3));
            byte_range_82_9a = simd_and(byte_range_80_9f, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(sequence_f0_9d_9b_adv, byte_range_82_9a);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_and(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp105 = simd_not(r10000_10ffff_tmp104);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp107 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp105), simd_andc(r10000_10ffff_tmp106, basis_bits.bit_2));
            byte_range_9c_ba = simd_and(byte_range_80_bf, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(sequence_f0_9d_9b_adv, byte_range_9c_ba);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp108);
            byte_range_bc_bf = r10000_10ffff_tmp54;
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9d_9b_adv, byte_range_bc_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_andc(r10000_10ffff_tmp19, tmp6);
            byte_9c = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp110);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(68), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_9d_9c_adv, byte_range_80_94);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp111);
            r10000_10ffff_tmp112 = simd_not(r10000_10ffff_tmp25);
            r10000_10ffff_tmp113 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp112), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_2));
            byte_range_96_b4 = simd_and(byte_range_80_bf, r10000_10ffff_tmp113);
            r10000_10ffff_tmp114 = simd_and(sequence_f0_9d_9c_adv, byte_range_96_b4);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp114);
            byte_range_b6_bf = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp28);
            r10000_10ffff_tmp115 = simd_and(sequence_f0_9d_9c_adv, byte_range_b6_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp115);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp116 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp64);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp116);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(69), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp117 = simd_and(sequence_f0_9d_9d_adv, byte_range_80_8e);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp117);
            r10000_10ffff_tmp118 = simd_and(r10000_10ffff_tmp19, tmp1);
            r10000_10ffff_tmp119 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp118);
            r10000_10ffff_tmp120 = simd_not(r10000_10ffff_tmp119);
            r10000_10ffff_tmp121 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp120), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ae = simd_and(byte_range_80_bf, r10000_10ffff_tmp121);
            r10000_10ffff_tmp122 = simd_and(sequence_f0_9d_9d_adv, byte_range_90_ae);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp122);
            byte_range_b0_bf = r10000_10ffff_tmp50;
            r10000_10ffff_tmp123 = simd_and(sequence_f0_9d_9d_adv, byte_range_b0_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp13);
            byte_9e = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp124);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp125);
            byte_range_80_88 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp126);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(70), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_9d_9e_adv, byte_range_80_88);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp127);
            r10000_10ffff_tmp128 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp129 = simd_not(r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp131 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp129), simd_andc(r10000_10ffff_tmp130, basis_bits.bit_2));
            byte_range_8a_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp131);
            r10000_10ffff_tmp132 = simd_and(sequence_f0_9d_9e_adv, byte_range_8a_a8);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp132);
            byte_range_aa_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp130);
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9d_9e_adv, byte_range_aa_bf);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp133);
            byte_9f = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp118);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(byte_range_80_83, tmp1);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(71), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_9d_9f_adv, byte_range_80_82);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp134);
            r10000_10ffff_tmp135 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_84_8b = simd_and(byte_range_80_8f, r10000_10ffff_tmp135);
            r10000_10ffff_tmp136 = simd_and(sequence_f0_9d_9f_adv, byte_range_84_8b);
            struct_gc_LC.cc = simd_or(struct_gc_LC.cc, r10000_10ffff_tmp136);
          }
          else {
            carryQ.CarryDequeueEnqueue(51, 21);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 72);
        }
        carryQ.CarryQ_Adjust(72);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<72, 0> carryQ;
  };

  struct Property_gc_Cc {
  Property_gc_Cc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Cc & struct_gc_Cc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock cc_range_0_7f_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2;
		BitBlock r80_7ff_tmp6, byte_range_80_9f, byte_c2_adv, r80_7ff_tmp7;




        struct_gc_Cc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(tmp1, basis_bits.bit_2);
        tmp3 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp5 = simd_and(tmp3, tmp4);
        tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp8 = simd_and(tmp6, tmp7);
        tmp9 = simd_and(tmp5, tmp8);
        tmp10 = simd_andc(tmp2, tmp9);
        cc_range_0_7f_1 = simd_not(tmp10);
        struct_gc_Cc.cc = simd_or(struct_gc_Cc.cc, cc_range_0_7f_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            byte_range_80_9f = simd_andc(r80_7ff_tmp6, basis_bits.bit_2);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_range_80_9f);
            struct_gc_Cc.cc = simd_or(struct_gc_Cc.cc, r80_7ff_tmp7);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_gc_Zs {
  Property_gc_Zs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Zs & struct_gc_Zs) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_20, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_c2, r80_7ff_tmp5, r80_7ff_tmp6, byte_a0;
		BitBlock byte_c2_adv, r80_7ff_tmp7, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock byte_9a, r1000_1fff_tmp6, sequence_e1_9a, byte_e1_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_80, sequence_e1_9a_adv;
		BitBlock r1000_1fff_tmp9, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_80, byte_e2_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, byte_range_80_8a;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, byte_af, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, byte_81, sequence_e2_81, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_9f, sequence_e2_81_adv, r2000_2fff_tmp16;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, sequence_e3_80_adv, r3000_4dff_tmp4;




        struct_gc_Zs.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_20 = simd_andc(tmp3, tmp6);
        struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, byte_20);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 9))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp4);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
            byte_a0 = simd_andc(r80_7ff_tmp6, tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a0);
            struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r80_7ff_tmp7);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 8))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp5);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(2, 7))) {
              r800_4dff_tmp1 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp4);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(2, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp7);
                  byte_80 = simd_andc(r1000_1fff_tmp8, tmp6);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(3), sequence_e1_9a_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_9a_adv, byte_80);
                  struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(4, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp4);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(4, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r2000_2fff_tmp3));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp3, byte_80);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_or(basis_bits.bit_5, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, r2000_2fff_tmp5);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(5), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_80_8a);
                  struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp3, tmp2);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp4);
                  byte_af = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_80_adv, byte_af);
                  struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, tmp4);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp13);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp14);
                  byte_9f = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp10);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(6), sequence_e2_81_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_81_adv, byte_9f);
                  struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r2000_2fff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(7, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp6);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(7), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(8), sequence_e3_80_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e3_80_adv, byte_80);
                  struct_gc_Zs.cc = simd_or(struct_gc_Zs.cc, r3000_4dff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<9, 0> carryQ;
  };

  struct Property_gc_Cf {
  Property_gc_Cf() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Cf & struct_gc_Cf) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_ad, byte_c2_adv, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock r600_6ff_tmp2, byte_d8, r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5;
		BitBlock byte_range_80_85, byte_d8_adv, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, byte_9c, r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock byte_db, byte_9d, byte_db_adv, r600_6ff_tmp12, r80_7ff_tmp16;
		BitBlock byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc, byte_dd;
		BitBlock byte_range_80_8f, r700_77f_tmp3, r700_77f_tmp4, r700_77f_tmp5;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, byte_8f, byte_dc_adv, r700_74f_tmp3;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a0, r1000_1fff_tmp3;
		BitBlock sequence_e1_a0, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_8e;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp9, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_range_8b_8f;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock byte_range_aa_ae, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_81, sequence_e2_81, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, byte_range_a0_a4, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock byte_range_a6_af, r2000_2fff_tmp21, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_bb, ra000_ffff_tmp8, sequence_ef_bb;
		BitBlock byte_ef_adv, byte_bf, sequence_ef_bb_adv, ra000_ffff_tmp9;
		BitBlock sequence_ef_bf, ra000_ffff_tmp10, byte_range_b9_bb;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp11, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91;
		BitBlock r10000_10ffff_tmp9, sequence_f0_91, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock byte_82, r10000_10ffff_tmp14, sequence_f0_91_82, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_bd, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_9b, sequence_f0_9b, byte_b2;
		BitBlock r10000_10ffff_tmp22, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock r10000_10ffff_tmp23, byte_range_a0_a3, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp24, sequence_f0_9d, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, byte_85, r10000_10ffff_tmp27, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock byte_range_b3_ba, sequence_f0_9d_85_adv, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_f3, r10000_10ffff_tmp32, sequence_f3_a0;
		BitBlock r10000_10ffff_tmp33, sequence_f3_a0_80, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_80_adv, r10000_10ffff_tmp34;
		BitBlock byte_range_a0_bf, r10000_10ffff_tmp35, sequence_f3_a0_81;
		BitBlock byte_range_80_bf, sequence_f3_a0_81_adv, r10000_10ffff_tmp36;




        struct_gc_Cf.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 25))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_ad = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ad);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp15);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(1, 2))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp15, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp14, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp4 = simd_andc(r600_6ff_tmp3, basis_bits.bit_4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_80_85 = simd_andc(r600_6ff_tmp4, r600_6ff_tmp5);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(1), byte_d8_adv));
              r600_6ff_tmp6 = simd_and(byte_d8_adv, byte_range_80_85);
              struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(r80_7ff_tmp6, r80_7ff_tmp13);
              r600_6ff_tmp8 = simd_andc(r80_7ff_tmp9, r600_6ff_tmp1);
              byte_9c = simd_and(r600_6ff_tmp7, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_and(byte_d8_adv, byte_9c);
              struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp11 = simd_and(r80_7ff_tmp15, r600_6ff_tmp10);
              byte_db = simd_and(r80_7ff_tmp14, r600_6ff_tmp11);
              byte_9d = simd_and(r600_6ff_tmp7, r80_7ff_tmp11);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(2), byte_db_adv));
              r600_6ff_tmp12 = simd_and(byte_db_adv, byte_9d);
              struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r600_6ff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp16 = simd_andc(r80_7ff_tmp9, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp14, r80_7ff_tmp16);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(3, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp9, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp14, r700_77f_tmp2);
              byte_dd = simd_and(r80_7ff_tmp14, r80_7ff_tmp11);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(3), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(4, 1))) {
                r700_74f_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp2 = simd_and(r80_7ff_tmp9, r700_74f_tmp1);
                byte_8f = simd_and(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(4), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_8f);
                struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r700_74f_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 9))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(6, 5))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(6, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(6, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_a0 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r1000_1fff_tmp3));
                  sequence_e1_a0 = simd_and(r1000_1fff_tmp3, byte_a0);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp7);
                  byte_8e = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp8);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(7), sequence_e1_a0_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_a0_adv, byte_8e);
                  struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(8, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(8, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(8), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_5, r2000_2fff_tmp6);
                  byte_range_8b_8f = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(9), sequence_e2_80_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_80_adv, byte_range_8b_8f);
                  struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, basis_bits.bit_4);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp6);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_aa_ae = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_80_adv, byte_range_aa_ae);
                  struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_andc(r2000_2fff_tmp14, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp9, basis_bits.bit_4);
                  r2000_2fff_tmp17 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_a0_a4 = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp17);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(10), sequence_e2_81_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_81_adv, byte_range_a0_a4);
                  struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp20 = simd_or(basis_bits.bit_4, r2000_2fff_tmp19);
                  byte_range_a6_af = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_81_adv, byte_range_a6_af);
                  struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r2000_2fff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(11, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_bb = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(11), ra000_ffff_tmp8));
              sequence_ef_bb = simd_and(ra000_ffff_tmp8, byte_bb);
              byte_ef_adv = ra000_ffff_tmp8;
              byte_bf = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(12), sequence_ef_bb_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ef_bb_adv, byte_bf);
              struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, ra000_ffff_tmp9);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              byte_range_b9_bb = simd_and(ra000_ffff_tmp10, r800_ffff_tmp3);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(13), sequence_ef_bf_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_bf_adv, byte_range_b9_bb);
              struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 9);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(14, 11))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(14), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(15), r10000_10ffff_tmp14));
            sequence_f0_91_82 = simd_and(r10000_10ffff_tmp14, byte_82);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp7);
            byte_bd = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(16), sequence_f0_91_82_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_82_adv, byte_bd);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp21);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp13);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(17), r10000_10ffff_tmp22));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp22, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp22;
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp1);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(18), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_9b_b2_adv, byte_range_a0_a3);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp24);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp25 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp26);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(19), r10000_10ffff_tmp27));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp27, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp27;
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp20);
            r10000_10ffff_tmp29 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp28);
            byte_range_b3_ba = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp29);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(20), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_9d_85_adv, byte_range_b3_ba);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp31);
            byte_a0 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp3);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(21), r10000_10ffff_tmp32));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp32, byte_a0);
            byte_80 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(22), r10000_10ffff_tmp33));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp33, byte_80);
            byte_f3_adv = r10000_10ffff_tmp32;
            sequence_f3_a0_adv = r10000_10ffff_tmp33;
            byte_81 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp8);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(23), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f3_a0_80_adv, byte_81);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp34);
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp35 = simd_and(sequence_f3_a0_80_adv, byte_range_a0_bf);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp35);
            sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(24), sequence_f3_a0_81_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
            struct_gc_Cf.cc = simd_or(struct_gc_Cf.cc, r10000_10ffff_tmp36);
          }
          else {
            carryQ.CarryDequeueEnqueue(14, 11);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 25);
        }
        carryQ.CarryQ_Adjust(25);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<25, 0> carryQ;
  };

  struct Property_gc_Zp {
  Property_gc_Zp() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Zp & struct_gc_Zp) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, byte_a9, sequence_e2_80_adv, r2000_2fff_tmp9;




        struct_gc_Zp.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  byte_a9 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_80_adv, byte_a9);
                  struct_gc_Zp.cc = simd_or(struct_gc_Zp.cc, r2000_2fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_gc_Zl {
  Property_gc_Zl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Zl & struct_gc_Zl) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock byte_a8, sequence_e2_80_adv, r2000_2fff_tmp8;




        struct_gc_Zl.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, r800_ffff_tmp3);
                  byte_a8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_80_adv, byte_a8);
                  struct_gc_Zl.cc = simd_or(struct_gc_Zl.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_gc_Cs {
  Property_gc_Cs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Cs & struct_gc_Cs) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ed, ra000_ffff_tmp4, byte_range_a0_bf;
		BitBlock ra000_ffff_tmp5, byte_ed_byte_range_a0_bf, byte_range_80_bf;
		BitBlock ra000_ffff_tmp6, byte_ed_byte_range_a0_bf_sfx;




        struct_gc_Cs.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(0), ra000_ffff_tmp5));
              byte_ed_byte_range_a0_bf = simd_and(ra000_ffff_tmp5, byte_range_a0_bf);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_a0_bf, carryQ.get_carry_in(1), ra000_ffff_tmp6));
              byte_ed_byte_range_a0_bf_sfx = simd_and(ra000_ffff_tmp6, byte_range_80_bf);
              struct_gc_Cs.cc = simd_or(struct_gc_Cs.cc, byte_ed_byte_range_a0_bf_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_gc_L {
  Property_gc_L() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_L & struct_gc_L) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_7a_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, byte_aa;
		BitBlock byte_c2_adv, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, byte_b5, r80_7ff_tmp16;
		BitBlock byte_ba, r80_7ff_tmp17, r80_7ff_tmp18, byte_c3, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22, byte_range_80_96;
		BitBlock byte_c3_adv, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, byte_range_98_b6, r80_7ff_tmp27, byte_range_b8_bf;
		BitBlock r80_7ff_tmp28, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, byte_c9, byte_range_80_8f, r100_2ff_tmp5;
		BitBlock r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1, byte_range_c4_c5;
		BitBlock byte_range_80_bf, r100_17f_tmp1, byte_range_c4_c5_sfx, r100_24f_tmp2;
		BitBlock r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4, r180_24f_tmp1;
		BitBlock byte_range_c6_c8_sfx, byte_c9_adv, r180_24f_tmp2, byte_range_90_bf;
		BitBlock r100_2ff_tmp8, byte_ca, byte_range_80_af, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r250_2af_tmp1, byte_ca_adv;
		BitBlock r250_2af_tmp2, byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13;
		BitBlock byte_cb, r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2;
		BitBlock byte_range_80_81, byte_cb_adv, r2b0_2ff_tmp3, r2b0_2ff_tmp4;
		BitBlock r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7, byte_range_86_91;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, byte_range_a0_a4;
		BitBlock r2b0_2ff_tmp11, r2b0_2ff_tmp12, r2b0_2ff_tmp13, byte_ac;
		BitBlock r2b0_2ff_tmp14, r2b0_2ff_tmp15, byte_ae, r2b0_2ff_tmp16;
		BitBlock r100_3ff_tmp2, r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, byte_range_ce_cf, r100_3ff_tmp7, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, byte_range_b0_b4, byte_cd_adv, r370_3ff_tmp3;
		BitBlock r370_3ff_tmp4, byte_range_b6_b7, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, byte_range_ba_bd, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock byte_bf, r370_3ff_tmp10, r370_3ff_tmp11, byte_ce, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, byte_86, byte_ce_adv, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock byte_range_88_8a, r370_3ff_tmp16, r370_3ff_tmp17, byte_8c;
		BitBlock r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20, r370_3ff_tmp21;
		BitBlock r370_3ff_tmp22, r370_3ff_tmp23, byte_range_8e_a1, r370_3ff_tmp24;
		BitBlock r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27, byte_range_a3_bf;
		BitBlock r370_3ff_tmp28, byte_cf, r370_3ff_tmp29, r370_3ff_tmp30;
		BitBlock r370_3ff_tmp31, r370_3ff_tmp32, byte_range_80_b5, byte_cf_adv;
		BitBlock r370_3ff_tmp33, byte_range_b7_bf, r370_3ff_tmp34, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2;
		BitBlock r400_4ff_tmp3, byte_d2_adv, r400_4ff_tmp4, r400_4ff_tmp5;
		BitBlock r400_4ff_tmp6, r400_4ff_tmp7, r400_4ff_tmp8, byte_range_8a_bf;
		BitBlock r400_4ff_tmp9, byte_d3, byte_d3_adv, r400_4ff_tmp10, r400_5ff_tmp1;
		BitBlock byte_range_d4_d5, r400_5ff_tmp2, byte_d6, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1, byte_d4, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, byte_d4_adv, r500_52f_tmp1, r500_58f_tmp4, byte_d5;
		BitBlock r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock byte_range_b1_bf, r530_58f_tmp3, byte_d5_adv, r530_58f_tmp4;
		BitBlock r530_58f_tmp5, r530_58f_tmp6, byte_99, r530_58f_tmp7, r530_58f_tmp8;
		BitBlock r530_58f_tmp9, byte_range_a1_bf, r530_58f_tmp10, byte_range_80_87;
		BitBlock byte_d6_adv, r530_58f_tmp11, r400_5ff_tmp6, r400_5ff_tmp7, byte_d7;
		BitBlock r400_5ff_tmp8, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3;
		BitBlock byte_range_90_aa, byte_d7_adv, r590_5ff_tmp4, r590_5ff_tmp5;
		BitBlock byte_range_b0_b2, r590_5ff_tmp6, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock byte_d8, byte_range_a0_bf, byte_d8_adv, r600_6ff_tmp2, r600_6ff_tmp3;
		BitBlock byte_d9, r600_6ff_tmp4, byte_range_80_8a, byte_d9_adv, r600_6ff_tmp5;
		BitBlock r600_6ff_tmp6, r600_6ff_tmp7, byte_range_ae_af, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, byte_da, byte_da_adv;
		BitBlock r600_6ff_tmp12, r600_6ff_tmp13, byte_db, r600_6ff_tmp14;
		BitBlock r600_6ff_tmp15, byte_range_80_93, byte_db_adv, r600_6ff_tmp16;
		BitBlock r600_6ff_tmp17, byte_95, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, byte_range_a5_a6, r600_6ff_tmp22;
		BitBlock r600_6ff_tmp23, r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26;
		BitBlock r600_6ff_tmp27, byte_range_ba_bc, r600_6ff_tmp28, r600_6ff_tmp29;
		BitBlock r600_6ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, byte_range_dc_dd;
		BitBlock r700_77f_tmp1, byte_dc, r700_77f_tmp2, byte_dd, r700_77f_tmp3;
		BitBlock r700_77f_tmp4, r700_77f_tmp5, r700_74f_tmp1, byte_90, byte_dc_adv;
		BitBlock r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4, r700_74f_tmp5;
		BitBlock r700_74f_tmp6, byte_range_92_af, r700_74f_tmp7, r700_74f_tmp8;
		BitBlock byte_range_8d_8f, byte_dd_adv, r700_74f_tmp9, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp33, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock byte_range_80_a5, byte_de_adv, r780_7bf_tmp5, r780_7bf_tmp6, byte_b1;
		BitBlock r780_7bf_tmp7, r780_7ff_tmp2, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, r7c0_7ff_tmp6;
		BitBlock byte_range_8a_aa, byte_df_adv, r7c0_7ff_tmp7, r7c0_7ff_tmp8;
		BitBlock byte_range_b4_b5, r7c0_7ff_tmp9, r7c0_7ff_tmp10, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6, byte_range_80_95;
		BitBlock sequence_e0_a0_adv, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12, byte_9a;
		BitBlock r800_fff_tmp13, byte_a4, r800_fff_tmp14, r800_fff_tmp15, byte_a8;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, byte_a1;
		BitBlock sequence_e0_a1, r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock byte_range_80_98, sequence_e0_a1_adv, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock byte_a2, sequence_e0_a2, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp27;
		BitBlock sequence_e0_a4, r800_fff_tmp28, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33, byte_range_84_b9;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, byte_bd, r800_fff_tmp39;
		BitBlock r800_fff_tmp40, byte_a5, sequence_e0_a5, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44;
		BitBlock byte_range_98_a1, r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47;
		BitBlock r800_fff_tmp48, byte_a6, sequence_e0_a6, r800_fff_tmp49;
		BitBlock r800_fff_tmp50, byte_80, sequence_e0_a6_adv, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, r800_fff_tmp53, byte_range_85_8c, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, r800_fff_tmp56, r800_fff_tmp57, byte_range_8f_90;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60, r800_fff_tmp61;
		BitBlock byte_range_93_a8, r800_fff_tmp62, r800_fff_tmp63, byte_range_aa_b0;
		BitBlock r800_fff_tmp64, byte_b2, r800_fff_tmp65, r800_fff_tmp66;
		BitBlock r800_fff_tmp67, byte_range_b6_b9, r800_fff_tmp68, r800_fff_tmp69;
		BitBlock r800_fff_tmp70, byte_a7, sequence_e0_a7, r800_fff_tmp71, byte_8e;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp72, r800_fff_tmp73, byte_range_9c_9d;
		BitBlock r800_fff_tmp74, r800_fff_tmp75, r800_fff_tmp76, byte_range_9f_a1;
		BitBlock r800_fff_tmp77, byte_range_b0_b1, r800_fff_tmp78, sequence_e0_a8;
		BitBlock r800_fff_tmp79, r800_fff_tmp80, byte_range_85_8a, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84;
		BitBlock r800_fff_tmp85, byte_range_b2_b3, r800_fff_tmp86, r800_fff_tmp87;
		BitBlock r800_fff_tmp88, byte_range_b5_b6, r800_fff_tmp89, r800_fff_tmp90;
		BitBlock byte_range_b8_b9, r800_fff_tmp91, r800_fff_tmp92, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp93, r800_fff_tmp94, byte_range_99_9c;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp95, byte_9e, r800_fff_tmp96;
		BitBlock r800_fff_tmp97, r800_fff_tmp98, r800_fff_tmp99, byte_range_b2_b4;
		BitBlock r800_fff_tmp100, sequence_e0_aa, r800_fff_tmp101, r800_fff_tmp102;
		BitBlock byte_range_85_8d, sequence_e0_aa_adv, r800_fff_tmp103;
		BitBlock r800_fff_tmp104, r800_fff_tmp105, byte_range_8f_91, r800_fff_tmp106;
		BitBlock r800_fff_tmp107, r800_fff_tmp108, r800_fff_tmp109, r800_fff_tmp110;
		BitBlock byte_range_b5_b9, r800_fff_tmp111, r800_fff_tmp112, r800_fff_tmp113;
		BitBlock byte_ab, sequence_e0_ab, sequence_e0_ab_adv, r800_fff_tmp114;
		BitBlock byte_range_a0_a1, r800_fff_tmp115, r800_fff_tmp116, sequence_e0_ac;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119;
		BitBlock r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123;
		BitBlock byte_ad, sequence_e0_ad, sequence_e0_ad_adv, r800_fff_tmp124;
		BitBlock r800_fff_tmp125, r800_fff_tmp126, sequence_e0_ae, r800_fff_tmp127;
		BitBlock byte_83, sequence_e0_ae_adv, r800_fff_tmp128, r800_fff_tmp129;
		BitBlock r800_fff_tmp130, r800_fff_tmp131, byte_range_8e_90, r800_fff_tmp132;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, byte_range_92_95, r800_fff_tmp135;
		BitBlock r800_fff_tmp136, byte_range_99_9a, r800_fff_tmp137, byte_9c;
		BitBlock r800_fff_tmp138, byte_range_9e_9f, r800_fff_tmp139, r800_fff_tmp140;
		BitBlock r800_fff_tmp141, byte_range_a3_a4, r800_fff_tmp142, r800_fff_tmp143;
		BitBlock byte_range_a8_aa, r800_fff_tmp144, r800_fff_tmp145, r800_fff_tmp146;
		BitBlock byte_range_ae_b9, r800_fff_tmp147, byte_af, sequence_e0_af;
		BitBlock sequence_e0_af_adv, r800_fff_tmp148, byte_b0, sequence_e0_b0;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151;
		BitBlock r800_fff_tmp152, byte_range_92_a8, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock byte_range_aa_b9, r800_fff_tmp155, r800_fff_tmp156, sequence_e0_b1;
		BitBlock byte_range_98_99, sequence_e0_b1_adv, r800_fff_tmp157;
		BitBlock r800_fff_tmp158, sequence_e0_b2, sequence_e0_b2_adv, r800_fff_tmp159;
		BitBlock r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162, r800_fff_tmp163;
		BitBlock byte_range_aa_b3, r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166;
		BitBlock byte_b3, sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp167;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, byte_range_b1_b2, r800_fff_tmp170;
		BitBlock byte_b4, sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp171;
		BitBlock r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174, r800_fff_tmp175;
		BitBlock byte_range_92_ba, r800_fff_tmp176, r800_fff_tmp177, sequence_e0_b5;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp178, r800_fff_tmp179, r800_fff_tmp180;
		BitBlock byte_range_ba_bf, r800_fff_tmp181, byte_b6, sequence_e0_b6;
		BitBlock r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184, r800_fff_tmp185;
		BitBlock r800_fff_tmp186, byte_range_85_96, sequence_e0_b6_adv;
		BitBlock r800_fff_tmp187, r800_fff_tmp188, r800_fff_tmp189, byte_range_9a_b1;
		BitBlock r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192, byte_range_b3_bb;
		BitBlock r800_fff_tmp193, r800_fff_tmp194, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp195, byte_range_80_86, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp196, byte_b8, sequence_e0_b8, r800_fff_tmp197;
		BitBlock r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200, byte_range_81_b0;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp201, r800_fff_tmp202, byte_b9;
		BitBlock sequence_e0_b9, sequence_e0_b9_adv, r800_fff_tmp203, sequence_e0_ba;
		BitBlock r800_fff_tmp204, byte_range_81_82, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp205, byte_84, r800_fff_tmp206, r800_fff_tmp207;
		BitBlock r800_fff_tmp208, byte_range_87_88, r800_fff_tmp209, byte_8a;
		BitBlock r800_fff_tmp210, byte_8d, r800_fff_tmp211, byte_range_94_97;
		BitBlock r800_fff_tmp212, byte_range_99_9f, r800_fff_tmp213, r800_fff_tmp214;
		BitBlock byte_range_a1_a3, r800_fff_tmp215, r800_fff_tmp216, r800_fff_tmp217;
		BitBlock r800_fff_tmp218, byte_range_aa_ab, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, byte_range_ad_b0, r800_fff_tmp222, r800_fff_tmp223;
		BitBlock r800_fff_tmp224, byte_bb, sequence_e0_bb, byte_range_80_84;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp225, r800_fff_tmp226;
		BitBlock byte_range_9c_9f, r800_fff_tmp227, byte_bc, sequence_e0_bc;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp228, sequence_e0_bd;
		BitBlock sequence_e0_bd_adv, r800_fff_tmp229, r800_fff_tmp230, r800_fff_tmp231;
		BitBlock r800_fff_tmp232, byte_range_89_ac, r800_fff_tmp233, byte_be;
		BitBlock sequence_e0_be, r800_fff_tmp234, byte_range_88_8c, sequence_e0_be_adv;
		BitBlock r800_fff_tmp235, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, byte_range_80_aa;
		BitBlock sequence_e1_80_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, byte_range_90_95, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock byte_range_9a_9d, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, byte_range_ae_b0;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock byte_range_b5_bf, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, byte_82, sequence_e1_82, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, sequence_e1_83, r1000_1fff_tmp40;
		BitBlock byte_range_80_85, sequence_e1_83_adv, r1000_1fff_tmp41;
		BitBlock r1000_1fff_tmp42, byte_87, r1000_1fff_tmp43, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, r1000_1fff_tmp46, r1000_1fff_tmp47;
		BitBlock r1000_1fff_tmp48, byte_range_90_ba, r1000_1fff_tmp49;
		BitBlock byte_range_bc_bf, r1000_1fff_tmp50, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, r1000_1fff_tmp53, byte_range_84_88;
		BitBlock byte_e1_byte_range_84_88, r1000_1fff_tmp54;
		BitBlock byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp55, r1000_1fff_tmp56;
		BitBlock r1000_1fff_tmp57, byte_89, sequence_e1_89, r1000_1fff_tmp58;
		BitBlock byte_range_80_88, sequence_e1_89_adv, r1000_1fff_tmp59;
		BitBlock r1000_1fff_tmp60, byte_range_8a_8d, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock byte_range_90_96, r1000_1fff_tmp65, r1000_1fff_tmp66, byte_98;
		BitBlock r1000_1fff_tmp67, r1000_1fff_tmp68, r1000_1fff_tmp69;
		BitBlock r1000_1fff_tmp70, r1000_1fff_tmp71, sequence_e1_8a;
		BitBlock sequence_e1_8a_adv, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock byte_range_90_b0, r1000_1fff_tmp77, r1000_1fff_tmp78;
		BitBlock r1000_1fff_tmp79, byte_range_b2_b5, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, byte_range_b8_be, r1000_1fff_tmp82;
		BitBlock r1000_1fff_tmp83, byte_8b, sequence_e1_8b, sequence_e1_8b_adv;
		BitBlock r1000_1fff_tmp84, r1000_1fff_tmp85, byte_range_82_85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, byte_range_88_96;
		BitBlock r1000_1fff_tmp91, r1000_1fff_tmp92, byte_range_98_bf;
		BitBlock r1000_1fff_tmp93, r1000_1fff_tmp94, sequence_e1_8c, byte_range_80_90;
		BitBlock sequence_e1_8c_adv, r1000_1fff_tmp95, r1000_1fff_tmp96;
		BitBlock r1000_1fff_tmp97, sequence_e1_8d, byte_range_80_9a;
		BitBlock sequence_e1_8d_adv, r1000_1fff_tmp98, sequence_e1_8e;
		BitBlock sequence_e1_8e_adv, r1000_1fff_tmp99, r1000_1fff_tmp100, byte_8f;
		BitBlock sequence_e1_8f, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock byte_range_80_b4, sequence_e1_8f_adv, r1000_1fff_tmp103;
		BitBlock sequence_e1_90, r1000_1fff_tmp104, r1000_1fff_tmp105;
		BitBlock byte_range_81_bf, sequence_e1_90_adv, r1000_1fff_tmp106;
		BitBlock r1000_1fff_tmp107, byte_range_91_98, byte_e1_byte_range_91_98;
		BitBlock r1000_1fff_tmp108, byte_e1_byte_range_91_98_sfx, sequence_e1_99;
		BitBlock r1000_1fff_tmp109, r1000_1fff_tmp110, r1000_1fff_tmp111;
		BitBlock byte_range_80_ac, sequence_e1_99_adv, r1000_1fff_tmp112;
		BitBlock r1000_1fff_tmp113, r1000_1fff_tmp114, byte_range_af_bf;
		BitBlock r1000_1fff_tmp115, sequence_e1_9a, byte_range_81_9a;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp116, r1000_1fff_tmp117, byte_9b;
		BitBlock sequence_e1_9b, sequence_e1_9b_adv, r1000_1fff_tmp118;
		BitBlock byte_range_b1_b8, r1000_1fff_tmp119, sequence_e1_9c;
		BitBlock r1000_1fff_tmp120, byte_range_80_8c, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp121, r1000_1fff_tmp122, r1000_1fff_tmp123;
		BitBlock byte_range_8e_91, r1000_1fff_tmp124, r1000_1fff_tmp125;
		BitBlock byte_range_a0_b1, r1000_1fff_tmp126, byte_9d, sequence_e1_9d;
		BitBlock byte_range_80_91, sequence_e1_9d_adv, r1000_1fff_tmp127;
		BitBlock r1000_1fff_tmp128, byte_range_a0_ac, r1000_1fff_tmp129;
		BitBlock r1000_1fff_tmp130, sequence_e1_9e, r1000_1fff_tmp131;
		BitBlock r1000_1fff_tmp132, byte_range_80_b3, sequence_e1_9e_adv;
		BitBlock r1000_1fff_tmp133, byte_9f, sequence_e1_9f, byte_97;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp134, r1000_1fff_tmp135;
		BitBlock sequence_e1_a0, sequence_e1_a0_adv, r1000_1fff_tmp136, sequence_e1_a1;
		BitBlock sequence_e1_a1_adv, r1000_1fff_tmp137, sequence_e1_a2;
		BitBlock r1000_1fff_tmp138, r1000_1fff_tmp139, byte_range_80_a8;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, byte_a3, sequence_e1_a3, r1000_1fff_tmp143;
		BitBlock r1000_1fff_tmp144, r1000_1fff_tmp145, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp146, sequence_e1_a4, r1000_1fff_tmp147;
		BitBlock byte_range_80_9e, sequence_e1_a4_adv, r1000_1fff_tmp148;
		BitBlock r1000_1fff_tmp149, sequence_e1_a5, r1000_1fff_tmp150;
		BitBlock r1000_1fff_tmp151, r1000_1fff_tmp152, byte_range_90_ad;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp153, r1000_1fff_tmp154;
		BitBlock r1000_1fff_tmp155, r1000_1fff_tmp156, sequence_e1_a6;
		BitBlock r1000_1fff_tmp157, r1000_1fff_tmp158, byte_range_80_ab;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp159, sequence_e1_a7;
		BitBlock r1000_1fff_tmp160, byte_range_81_87, sequence_e1_a7_adv;
		BitBlock r1000_1fff_tmp161, sequence_e1_a8, r1000_1fff_tmp162;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp163, r1000_1fff_tmp164;
		BitBlock sequence_e1_a9, byte_range_80_94, sequence_e1_a9_adv;
		BitBlock r1000_1fff_tmp165, sequence_e1_aa, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp166, sequence_e1_ac, r1000_1fff_tmp167;
		BitBlock r1000_1fff_tmp168, r1000_1fff_tmp169, byte_range_85_b3;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp170, sequence_e1_ad;
		BitBlock r1000_1fff_tmp171, r1000_1fff_tmp172, byte_range_85_8b;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp173, sequence_e1_ae;
		BitBlock r1000_1fff_tmp174, r1000_1fff_tmp175, r1000_1fff_tmp176;
		BitBlock r1000_1fff_tmp177, byte_range_83_a0, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp178, r1000_1fff_tmp179, r1000_1fff_tmp180;
		BitBlock r1000_1fff_tmp181, r1000_1fff_tmp182, sequence_e1_af;
		BitBlock r1000_1fff_tmp183, r1000_1fff_tmp184, sequence_e1_af_adv;
		BitBlock r1000_1fff_tmp185, sequence_e1_b0, r1000_1fff_tmp186;
		BitBlock r1000_1fff_tmp187, byte_range_80_a3, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp188, sequence_e1_b1, r1000_1fff_tmp189;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp190, r1000_1fff_tmp191;
		BitBlock r1000_1fff_tmp192, r1000_1fff_tmp193, r1000_1fff_tmp194;
		BitBlock r1000_1fff_tmp195, byte_range_9a_bd, r1000_1fff_tmp196;
		BitBlock sequence_e1_b3, r1000_1fff_tmp197, r1000_1fff_tmp198;
		BitBlock byte_range_a9_ac, sequence_e1_b3_adv, r1000_1fff_tmp199;
		BitBlock byte_range_ae_b1, r1000_1fff_tmp200, r1000_1fff_tmp201;
		BitBlock r1000_1fff_tmp202, byte_range_b4_b6, byte_e1_byte_range_b4_b6;
		BitBlock r1000_1fff_tmp203, byte_e1_byte_range_b4_b6_sfx, byte_range_b8_bb;
		BitBlock byte_e1_byte_range_b8_bb, r1000_1fff_tmp204;
		BitBlock byte_e1_byte_range_b8_bb_sfx, sequence_e1_bc, sequence_e1_bc_adv;
		BitBlock r1000_1fff_tmp205, byte_range_98_9d, r1000_1fff_tmp206;
		BitBlock r1000_1fff_tmp207, sequence_e1_bd, sequence_e1_bd_adv;
		BitBlock r1000_1fff_tmp208, r1000_1fff_tmp209, byte_range_88_8d;
		BitBlock r1000_1fff_tmp210, byte_range_90_97, r1000_1fff_tmp211;
		BitBlock r1000_1fff_tmp212, r1000_1fff_tmp213, r1000_1fff_tmp214;
		BitBlock r1000_1fff_tmp215, byte_range_9f_bd, r1000_1fff_tmp216;
		BitBlock sequence_e1_be, sequence_e1_be_adv, r1000_1fff_tmp217;
		BitBlock r1000_1fff_tmp218, r1000_1fff_tmp219, byte_range_b6_bc;
		BitBlock r1000_1fff_tmp220, r1000_1fff_tmp221, sequence_e1_bf;
		BitBlock r1000_1fff_tmp222, r1000_1fff_tmp223, byte_range_82_84;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp224, byte_range_86_8c;
		BitBlock r1000_1fff_tmp225, byte_range_90_93, r1000_1fff_tmp226;
		BitBlock r1000_1fff_tmp227, byte_range_96_9b, r1000_1fff_tmp228;
		BitBlock r1000_1fff_tmp229, r1000_1fff_tmp230, r1000_1fff_tmp231;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock sequence_e2_82, r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, sequence_e2_84, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, byte_range_8a_93;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, r2000_2fff_tmp29, r2000_2fff_tmp30;
		BitBlock byte_range_99_9d, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, byte_range_aa_ad;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, byte_range_af_b9, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, byte_85, sequence_e2_85, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_range_85_89, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51, sequence_e2_86;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock byte_range_83_84, sequence_e2_86_adv, r2000_2fff_tmp55;
		BitBlock sequence_e2_b0, r2000_2fff_tmp56, r2000_2fff_tmp57, byte_range_80_ae;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock sequence_e2_b1, r2000_2fff_tmp60, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, sequence_e2_b2;
		BitBlock sequence_e2_b2_adv, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock r2000_2fff_tmp65, sequence_e2_b3, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, byte_range_80_a4, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, byte_range_ab_ae, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, sequence_e2_b4, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, sequence_e2_b4_adv;
		BitBlock r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock r2000_2fff_tmp82, r2000_2fff_tmp83, sequence_e2_b5, r2000_2fff_tmp84;
		BitBlock r2000_2fff_tmp85, byte_range_80_a7, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, sequence_e2_b6, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, r2000_2fff_tmp91;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp92, r2000_2fff_tmp93;
		BitBlock byte_range_a0_a6, r2000_2fff_tmp94, byte_range_a8_ae;
		BitBlock r2000_2fff_tmp95, r2000_2fff_tmp96, byte_range_b0_b6;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99, sequence_e2_b7;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp102, r2000_2fff_tmp103, byte_range_88_8e;
		BitBlock r2000_2fff_tmp104, r2000_2fff_tmp105, r2000_2fff_tmp106;
		BitBlock r2000_2fff_tmp107, r2000_2fff_tmp108, byte_range_98_9e;
		BitBlock r2000_2fff_tmp109, sequence_e2_b8, sequence_e2_b8_adv;
		BitBlock r2000_2fff_tmp110, r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, byte_range_85_86;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11, byte_range_b1_b5;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, r3000_4dff_tmp14;
		BitBlock r3000_4dff_tmp15, byte_range_bb_bc, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, sequence_e3_81, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, sequence_e3_81_adv, r3000_4dff_tmp21;
		BitBlock sequence_e3_82, r3000_4dff_tmp22, r3000_4dff_tmp23, r3000_4dff_tmp24;
		BitBlock r3000_4dff_tmp25, sequence_e3_82_adv, r3000_4dff_tmp26;
		BitBlock r3000_4dff_tmp27, r3000_4dff_tmp28, r3000_4dff_tmp29;
		BitBlock r3000_4dff_tmp30, byte_range_9d_9f, r3000_4dff_tmp31;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, sequence_e3_83, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, byte_range_80_ba, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp36, r3000_4dff_tmp37, sequence_e3_84, r3000_4dff_tmp38;
		BitBlock r3000_4dff_tmp39, r3000_4dff_tmp40, r3000_4dff_tmp41;
		BitBlock r3000_4dff_tmp42, r3000_4dff_tmp43, r3000_4dff_tmp44;
		BitBlock byte_range_85_ad, sequence_e3_84_adv, r3000_4dff_tmp45;
		BitBlock r3000_4dff_tmp46, r3000_4dff_tmp47, r3000_4dff_tmp48;
		BitBlock r3000_4dff_tmp49, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r3000_4dff_tmp50, r3000_4dff_tmp51, r3000_4dff_tmp52, sequence_e3_86;
		BitBlock r3000_4dff_tmp53, byte_range_80_8e, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp54, r3000_4dff_tmp55, byte_range_a0_ba;
		BitBlock r3000_4dff_tmp56, r3000_4dff_tmp57, sequence_e3_87;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp58, byte_e3_byte_range_90_bf;
		BitBlock r3000_4dff_tmp59, byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp60;
		BitBlock r3000_4dff_tmp61, r3000_4dff_tmp62, r3000_4dff_tmp63;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp64;
		BitBlock byte_e4_byte_range_80_b5_sfx, sequence_e4_b6, byte_e4_adv;
		BitBlock sequence_e4_b6_adv, r3000_4dff_tmp65, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, byte_range_e5_e9, r800_ffff_tmp16;
		BitBlock byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12;
		BitBlock r4e00_9fff_tmp13, byte_range_80_be, r4e00_9fff_tmp14;
		BitBlock byte_e9_byte_range_80_be, r4e00_9fff_tmp15;
		BitBlock byte_e9_byte_range_80_be_sfx, r4e00_9fff_tmp16, sequence_e9_bf;
		BitBlock byte_e9_adv, r4e00_9fff_tmp17, r4e00_9fff_tmp18, r4e00_9fff_tmp19;
		BitBlock sequence_e9_bf_adv, r4e00_9fff_tmp20, r800_ffff_tmp17;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_ea_byte_range_80_91, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_92, sequence_ea_92, byte_ea_adv;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock sequence_ea_92_adv, ra000_ffff_tmp15, ra000_ffff_tmp16, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, byte_range_90_bd;
		BitBlock sequence_ea_93_adv, ra000_ffff_tmp22, byte_ea_byte_range_94_97;
		BitBlock ra000_ffff_tmp23, byte_ea_byte_range_94_97_sfx, ra000_ffff_tmp24;
		BitBlock sequence_ea_98, sequence_ea_98_adv, ra000_ffff_tmp25;
		BitBlock byte_range_90_9f, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, sequence_ea_99, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, sequence_ea_99_adv, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, sequence_ea_9a, ra000_ffff_tmp38;
		BitBlock byte_range_80_9d, sequence_ea_9a_adv, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, sequence_ea_9b, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock sequence_ea_9c, ra000_ffff_tmp48, ra000_ffff_tmp49, byte_range_97_9f;
		BitBlock sequence_ea_9c_adv, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock byte_range_a2_bf, ra000_ffff_tmp52, ra000_ffff_tmp53, sequence_ea_9d;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock sequence_ea_9e, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock sequence_ea_9e_adv, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, byte_range_8b_8e, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, sequence_ea_9f;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp67, sequence_ea_a0;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp68, ra000_ffff_tmp69;
		BitBlock ra000_ffff_tmp70, ra000_ffff_tmp71, byte_range_83_85;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock byte_range_87_8a, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, byte_range_8c_a2, ra000_ffff_tmp81;
		BitBlock ra000_ffff_tmp82, sequence_ea_a1, ra000_ffff_tmp83, ra000_ffff_tmp84;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp85, sequence_ea_a2;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, byte_range_82_b3;
		BitBlock sequence_ea_a2_adv, ra000_ffff_tmp88, sequence_ea_a3;
		BitBlock ra000_ffff_tmp89, byte_range_b2_b7, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, sequence_ea_a4, ra000_ffff_tmp92;
		BitBlock ra000_ffff_tmp93, ra000_ffff_tmp94, ra000_ffff_tmp95;
		BitBlock byte_range_8a_a5, sequence_ea_a4_adv, ra000_ffff_tmp96;
		BitBlock ra000_ffff_tmp97, ra000_ffff_tmp98, sequence_ea_a5;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, byte_range_a0_bc, ra000_ffff_tmp102;
		BitBlock ra000_ffff_tmp103, sequence_ea_a6, ra000_ffff_tmp104;
		BitBlock ra000_ffff_tmp105, ra000_ffff_tmp106, ra000_ffff_tmp107;
		BitBlock byte_range_84_b2, sequence_ea_a6_adv, ra000_ffff_tmp108;
		BitBlock ra000_ffff_tmp109, sequence_ea_a7, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock byte_range_a6_af, ra000_ffff_tmp113, ra000_ffff_tmp114;
		BitBlock ra000_ffff_tmp115, ra000_ffff_tmp116, byte_range_ba_be;
		BitBlock ra000_ffff_tmp117, sequence_ea_a8, ra000_ffff_tmp118;
		BitBlock ra000_ffff_tmp119, sequence_ea_a8_adv, ra000_ffff_tmp120;
		BitBlock sequence_ea_a9, ra000_ffff_tmp121, byte_range_80_82;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp122, ra000_ffff_tmp123;
		BitBlock byte_range_84_8b, ra000_ffff_tmp124, ra000_ffff_tmp125;
		BitBlock byte_range_a0_b6, ra000_ffff_tmp126, ra000_ffff_tmp127;
		BitBlock byte_range_be_bf, ra000_ffff_tmp128, sequence_ea_aa;
		BitBlock sequence_ea_aa_adv, ra000_ffff_tmp129, ra000_ffff_tmp130;
		BitBlock ra000_ffff_tmp131, ra000_ffff_tmp132, ra000_ffff_tmp133;
		BitBlock ra000_ffff_tmp134, byte_range_b9_bd, ra000_ffff_tmp135;
		BitBlock sequence_ea_ab, sequence_ea_ab_adv, ra000_ffff_tmp136;
		BitBlock ra000_ffff_tmp137, ra000_ffff_tmp138, byte_range_9b_9d;
		BitBlock ra000_ffff_tmp139, byte_range_a0_aa, ra000_ffff_tmp140;
		BitBlock ra000_ffff_tmp141, ra000_ffff_tmp142, ra000_ffff_tmp143;
		BitBlock ra000_ffff_tmp144, sequence_ea_ac, ra000_ffff_tmp145;
		BitBlock byte_range_81_86, sequence_ea_ac_adv, ra000_ffff_tmp146;
		BitBlock byte_range_89_8e, ra000_ffff_tmp147, ra000_ffff_tmp148;
		BitBlock byte_range_91_96, ra000_ffff_tmp149, ra000_ffff_tmp150;
		BitBlock ra000_ffff_tmp151, ra000_ffff_tmp152, ra000_ffff_tmp153;
		BitBlock sequence_ea_ad, ra000_ffff_tmp154, sequence_ea_ad_adv;
		BitBlock ra000_ffff_tmp155, ra000_ffff_tmp156, ra000_ffff_tmp157;
		BitBlock byte_range_a4_a5, ra000_ffff_tmp158, sequence_ea_af;
		BitBlock ra000_ffff_tmp159, byte_range_80_a2, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp160, byte_ea_byte_range_b0_bf, ra000_ffff_tmp161;
		BitBlock byte_ea_byte_range_b0_bf_sfx, ra000_ffff_tmp162, byte_range_eb_ec;
		BitBlock ra000_ffff_tmp163, byte_range_eb_ec_sfx, ra000_ffff_tmp164;
		BitBlock byte_range_eb_ec_sfx_sfx, byte_ed, ra000_ffff_tmp165;
		BitBlock byte_ed_byte_range_80_9d, ra000_ffff_tmp166;
		BitBlock byte_ed_byte_range_80_9d_sfx, sequence_ed_9e, byte_ed_adv;
		BitBlock ra000_ffff_tmp167, sequence_ed_9e_adv, ra000_ffff_tmp168;
		BitBlock ra000_ffff_tmp169, sequence_ed_9f, sequence_ed_9f_adv;
		BitBlock ra000_ffff_tmp170, ra000_ffff_tmp171, ra000_ffff_tmp172;
		BitBlock ra000_ffff_tmp173, ra000_ffff_tmp174, byte_range_8b_bb;
		BitBlock ra000_ffff_tmp175, byte_ef, ra000_ffff_tmp176, ra000_ffff_tmp177;
		BitBlock byte_range_a4_a8, ra000_ffff_tmp178, byte_ef_byte_range_a4_a8;
		BitBlock ra000_ffff_tmp179, byte_ef_byte_range_a4_a8_sfx, sequence_ef_a9;
		BitBlock byte_ef_adv, ra000_ffff_tmp180, byte_range_80_ad, sequence_ef_a9_adv;
		BitBlock ra000_ffff_tmp181, ra000_ffff_tmp182, sequence_ef_aa;
		BitBlock sequence_ef_aa_adv, ra000_ffff_tmp183, sequence_ef_ab;
		BitBlock ra000_ffff_tmp184, byte_range_80_99, sequence_ef_ab_adv;
		BitBlock ra000_ffff_tmp185, sequence_ef_ac, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp186, byte_range_93_97, ra000_ffff_tmp187;
		BitBlock ra000_ffff_tmp188, ra000_ffff_tmp189, ra000_ffff_tmp190;
		BitBlock ra000_ffff_tmp191, byte_range_9f_a8, ra000_ffff_tmp192;
		BitBlock ra000_ffff_tmp193, ra000_ffff_tmp194, byte_range_aa_b6;
		BitBlock ra000_ffff_tmp195, byte_range_b8_bc, ra000_ffff_tmp196;
		BitBlock ra000_ffff_tmp197, sequence_ef_ad, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp198, ra000_ffff_tmp199, ra000_ffff_tmp200;
		BitBlock byte_range_86_bf, ra000_ffff_tmp201, sequence_ef_ae;
		BitBlock ra000_ffff_tmp202, byte_range_80_b1, sequence_ef_ae_adv;
		BitBlock ra000_ffff_tmp203, sequence_ef_af, ra000_ffff_tmp204;
		BitBlock byte_range_93_bf, sequence_ef_af_adv, ra000_ffff_tmp205;
		BitBlock byte_range_b0_b3, byte_ef_byte_range_b0_b3, ra000_ffff_tmp206;
		BitBlock byte_ef_byte_range_b0_b3_sfx, sequence_ef_b4, ra000_ffff_tmp207;
		BitBlock byte_range_80_bd, sequence_ef_b4_adv, ra000_ffff_tmp208;
		BitBlock sequence_ef_b5, sequence_ef_b5_adv, ra000_ffff_tmp209, sequence_ef_b6;
		BitBlock sequence_ef_b6_adv, ra000_ffff_tmp210, ra000_ffff_tmp211;
		BitBlock byte_range_92_bf, ra000_ffff_tmp212, sequence_ef_b7;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp213, byte_range_b0_bb;
		BitBlock ra000_ffff_tmp214, sequence_ef_b9, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp215, byte_range_b6_bf, ra000_ffff_tmp216;
		BitBlock sequence_ef_ba, sequence_ef_ba_adv, ra000_ffff_tmp217, sequence_ef_bb;
		BitBlock ra000_ffff_tmp218, byte_range_80_bc, sequence_ef_bb_adv;
		BitBlock ra000_ffff_tmp219, sequence_ef_bc, byte_range_a1_ba;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp220, sequence_ef_bd;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp221, byte_range_a6_bf;
		BitBlock ra000_ffff_tmp222, sequence_ef_be, ra000_ffff_tmp223;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp224, sequence_ef_bf;
		BitBlock byte_range_82_87, sequence_ef_bf_adv, ra000_ffff_tmp225;
		BitBlock ra000_ffff_tmp226, byte_range_8a_8f, ra000_ffff_tmp227;
		BitBlock byte_range_92_97, ra000_ffff_tmp228, byte_range_9a_9c;
		BitBlock ra000_ffff_tmp229, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, sequence_f0_90_80;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp8, byte_range_80_8b;
		BitBlock sequence_f0_90_80_adv, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_range_8d_a6, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_a8_ba, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_bc_bd;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, sequence_f0_90_81;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, byte_range_80_8d;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp30, byte_range_90_9d;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock sequence_f0_90_82, sequence_f0_90_82_adv, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, sequence_f0_90_83;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock sequence_f0_90_83_adv, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, sequence_f0_90_8a, r10000_10ffff_tmp43;
		BitBlock r10000_10ffff_tmp44, byte_range_80_9c, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp48, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, sequence_f0_90_8c;
		BitBlock byte_range_80_9f, sequence_f0_90_8c_adv, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, sequence_f0_90_8d;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, byte_range_82_89, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, byte_range_90_b5, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, sequence_f0_90_8e, r10000_10ffff_tmp64;
		BitBlock r10000_10ffff_tmp65, sequence_f0_90_8e_adv, r10000_10ffff_tmp66;
		BitBlock r10000_10ffff_tmp67, sequence_f0_90_8f, byte_range_80_83;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp68, byte_range_88_8f;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, byte_range_90_91;
		BitBlock sequence_f0_90_byte_range_90_91, r10000_10ffff_tmp71;
		BitBlock sequence_f0_90_byte_range_90_91_sfx, sequence_f0_90_92;
		BitBlock sequence_f0_90_92_adv, r10000_10ffff_tmp72, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, byte_94, sequence_f0_90_94, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, sequence_f0_90_94_adv, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, sequence_f0_90_95_adv;
		BitBlock r10000_10ffff_tmp82, byte_range_98_9b;
		BitBlock sequence_f0_90_byte_range_98_9b, r10000_10ffff_tmp83;
		BitBlock sequence_f0_90_byte_range_98_9b_sfx, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, byte_range_80_b6;
		BitBlock sequence_f0_90_9c_adv, r10000_10ffff_tmp86, sequence_f0_90_9d;
		BitBlock sequence_f0_90_9d_adv, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock byte_range_a0_a7, r10000_10ffff_tmp89, sequence_f0_90_a0;
		BitBlock r10000_10ffff_tmp90, sequence_f0_90_a0_adv, r10000_10ffff_tmp91;
		BitBlock r10000_10ffff_tmp92, byte_88, r10000_10ffff_tmp93;
		BitBlock r10000_10ffff_tmp94, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock byte_range_8a_b5, r10000_10ffff_tmp97, r10000_10ffff_tmp98;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, byte_range_b7_b8;
		BitBlock r10000_10ffff_tmp101, r10000_10ffff_tmp102, r10000_10ffff_tmp103;
		BitBlock sequence_f0_90_a1, sequence_f0_90_a1_adv, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, sequence_f0_90_a2, r10000_10ffff_tmp106;
		BitBlock sequence_f0_90_a2_adv, r10000_10ffff_tmp107, sequence_f0_90_a4;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock byte_range_a0_b9, r10000_10ffff_tmp110, r10000_10ffff_tmp111;
		BitBlock sequence_f0_90_a6, r10000_10ffff_tmp112, r10000_10ffff_tmp113;
		BitBlock sequence_f0_90_a6_adv, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock sequence_f0_90_a8, sequence_f0_90_a8_adv, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, r10000_10ffff_tmp118, byte_range_95_97;
		BitBlock r10000_10ffff_tmp119, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock r10000_10ffff_tmp122, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock byte_range_99_b3, r10000_10ffff_tmp125, r10000_10ffff_tmp126;
		BitBlock sequence_f0_90_a9, sequence_f0_90_a9_adv, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_aa, sequence_f0_90_aa_adv, r10000_10ffff_tmp128;
		BitBlock sequence_f0_90_ab, sequence_f0_90_ab_adv, r10000_10ffff_tmp129;
		BitBlock r10000_10ffff_tmp130, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock r10000_10ffff_tmp133, r10000_10ffff_tmp134, r10000_10ffff_tmp135;
		BitBlock byte_range_89_a4, r10000_10ffff_tmp136, sequence_f0_90_ac;
		BitBlock r10000_10ffff_tmp137, sequence_f0_90_ac_adv, r10000_10ffff_tmp138;
		BitBlock sequence_f0_90_ad, sequence_f0_90_ad_adv, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, r10000_10ffff_tmp142;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp143, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp144, sequence_f0_90_b0, sequence_f0_90_b0_adv;
		BitBlock r10000_10ffff_tmp145, sequence_f0_90_b1, sequence_f0_90_b1_adv;
		BitBlock r10000_10ffff_tmp146, byte_91, sequence_f0_91, r10000_10ffff_tmp147;
		BitBlock sequence_f0_91_80, sequence_f0_91_adv, r10000_10ffff_tmp148;
		BitBlock r10000_10ffff_tmp149, r10000_10ffff_tmp150, byte_range_83_b7;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp151, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp152, r10000_10ffff_tmp153, byte_range_83_af;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp154, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp155, r10000_10ffff_tmp156, byte_range_90_a8;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp157, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp158, byte_range_83_a6, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp159, sequence_f0_91_85, r10000_10ffff_tmp160;
		BitBlock r10000_10ffff_tmp161, byte_range_90_b2, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, sequence_f0_91_86;
		BitBlock r10000_10ffff_tmp164, byte_range_83_b2, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp165, r10000_10ffff_tmp166, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp167, byte_range_81_84, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, sequence_f0_91_88;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp170, r10000_10ffff_tmp171;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, byte_range_93_ab;
		BitBlock r10000_10ffff_tmp174, sequence_f0_91_8a, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp175, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp176, sequence_f0_91_8c, r10000_10ffff_tmp177;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp178, r10000_10ffff_tmp179;
		BitBlock r10000_10ffff_tmp180, r10000_10ffff_tmp181, r10000_10ffff_tmp182;
		BitBlock r10000_10ffff_tmp183, r10000_10ffff_tmp184, r10000_10ffff_tmp185;
		BitBlock r10000_10ffff_tmp186, r10000_10ffff_tmp187, r10000_10ffff_tmp188;
		BitBlock r10000_10ffff_tmp189, r10000_10ffff_tmp190, r10000_10ffff_tmp191;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp192, r10000_10ffff_tmp193;
		BitBlock r10000_10ffff_tmp194, byte_range_9d_a1, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp195, sequence_f0_91_92, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp196, sequence_f0_91_93, r10000_10ffff_tmp197;
		BitBlock byte_range_84_85, sequence_f0_91_93_adv, r10000_10ffff_tmp198;
		BitBlock r10000_10ffff_tmp199, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp200, r10000_10ffff_tmp201, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp202, sequence_f0_91_98, sequence_f0_91_98_adv;
		BitBlock r10000_10ffff_tmp203, sequence_f0_91_99, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp204, sequence_f0_91_9a, r10000_10ffff_tmp205;
		BitBlock r10000_10ffff_tmp206, sequence_f0_91_9a_adv, r10000_10ffff_tmp207;
		BitBlock sequence_f0_91_a2, sequence_f0_91_a2_adv, r10000_10ffff_tmp208;
		BitBlock sequence_f0_91_a3, sequence_f0_91_a3_adv, r10000_10ffff_tmp209;
		BitBlock r10000_10ffff_tmp210, sequence_f0_91_ab, r10000_10ffff_tmp211;
		BitBlock byte_range_80_b8, sequence_f0_91_ab_adv, r10000_10ffff_tmp212;
		BitBlock sequence_f0_92, r10000_10ffff_tmp213, sequence_f0_92_byte_range_80_8d;
		BitBlock r10000_10ffff_tmp214, sequence_f0_92_byte_range_80_8d_sfx;
		BitBlock sequence_f0_92_8e, sequence_f0_92_adv, sequence_f0_92_8e_adv;
		BitBlock r10000_10ffff_tmp215, sequence_f0_93, r10000_10ffff_tmp216;
		BitBlock sequence_f0_93_byte_range_80_8f, r10000_10ffff_tmp217;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, sequence_f0_93_90;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90_adv, r10000_10ffff_tmp218;
		BitBlock sequence_f0_96, r10000_10ffff_tmp219, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp220, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_a8, sequence_f0_96_adv, sequence_f0_96_a8_adv;
		BitBlock r10000_10ffff_tmp221, sequence_f0_96_a9, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp222, sequence_f0_96_ab, r10000_10ffff_tmp223;
		BitBlock r10000_10ffff_tmp224, r10000_10ffff_tmp225, sequence_f0_96_ab_adv;
		BitBlock r10000_10ffff_tmp226, sequence_f0_96_ac, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp227, sequence_f0_96_ad, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp228, r10000_10ffff_tmp229, r10000_10ffff_tmp230;
		BitBlock byte_range_a3_b7, r10000_10ffff_tmp231, r10000_10ffff_tmp232;
		BitBlock byte_range_bd_bf, r10000_10ffff_tmp233, sequence_f0_96_ae;
		BitBlock sequence_f0_96_ae_adv, r10000_10ffff_tmp234, sequence_f0_96_bc;
		BitBlock sequence_f0_96_bc_adv, r10000_10ffff_tmp235, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp236, sequence_f0_96_bd_adv, r10000_10ffff_tmp237;
		BitBlock r10000_10ffff_tmp238, sequence_f0_96_be, r10000_10ffff_tmp239;
		BitBlock byte_range_93_9f, sequence_f0_96_be_adv, r10000_10ffff_tmp240;
		BitBlock sequence_f0_9b, r10000_10ffff_tmp241, sequence_f0_9b_80;
		BitBlock sequence_f0_9b_adv, sequence_f0_9b_80_adv, r10000_10ffff_tmp242;
		BitBlock sequence_f0_9b_b0, sequence_f0_9b_b0_adv, r10000_10ffff_tmp243;
		BitBlock sequence_f0_9b_b1, sequence_f0_9b_b1_adv, r10000_10ffff_tmp244;
		BitBlock r10000_10ffff_tmp245, byte_range_b0_bc, r10000_10ffff_tmp246;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_b2_adv, r10000_10ffff_tmp247;
		BitBlock byte_range_90_99, r10000_10ffff_tmp248, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp249, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp250, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp251, sequence_f0_9d_91_adv, r10000_10ffff_tmp252;
		BitBlock r10000_10ffff_tmp253, byte_range_96_bf, r10000_10ffff_tmp254;
		BitBlock sequence_f0_9d_92, sequence_f0_9d_92_adv, r10000_10ffff_tmp255;
		BitBlock r10000_10ffff_tmp256, r10000_10ffff_tmp257, r10000_10ffff_tmp258;
		BitBlock r10000_10ffff_tmp259, r10000_10ffff_tmp260, r10000_10ffff_tmp261;
		BitBlock r10000_10ffff_tmp262, r10000_10ffff_tmp263, r10000_10ffff_tmp264;
		BitBlock r10000_10ffff_tmp265, r10000_10ffff_tmp266, r10000_10ffff_tmp267;
		BitBlock sequence_f0_9d_93, sequence_f0_9d_93_adv, r10000_10ffff_tmp268;
		BitBlock r10000_10ffff_tmp269, byte_range_85_bf, r10000_10ffff_tmp270;
		BitBlock sequence_f0_9d_94, sequence_f0_9d_94_adv, r10000_10ffff_tmp271;
		BitBlock r10000_10ffff_tmp272, r10000_10ffff_tmp273, r10000_10ffff_tmp274;
		BitBlock r10000_10ffff_tmp275, r10000_10ffff_tmp276, byte_range_8d_94;
		BitBlock r10000_10ffff_tmp277, r10000_10ffff_tmp278, r10000_10ffff_tmp279;
		BitBlock byte_range_96_9c, r10000_10ffff_tmp280, r10000_10ffff_tmp281;
		BitBlock r10000_10ffff_tmp282, byte_range_9e_b9, r10000_10ffff_tmp283;
		BitBlock r10000_10ffff_tmp284, r10000_10ffff_tmp285, byte_range_bb_be;
		BitBlock r10000_10ffff_tmp286, sequence_f0_9d_95, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp287, r10000_10ffff_tmp288, byte_range_8a_90;
		BitBlock r10000_10ffff_tmp289, r10000_10ffff_tmp290, r10000_10ffff_tmp291;
		BitBlock r10000_10ffff_tmp292, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp293;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp294, r10000_10ffff_tmp295, sequence_f0_9d_9a_adv;
		BitBlock r10000_10ffff_tmp296, byte_range_a8_bf, r10000_10ffff_tmp297;
		BitBlock sequence_f0_9d_9b, sequence_f0_9d_9b_adv, r10000_10ffff_tmp298;
		BitBlock r10000_10ffff_tmp299, byte_range_82_9a, r10000_10ffff_tmp300;
		BitBlock r10000_10ffff_tmp301, r10000_10ffff_tmp302, r10000_10ffff_tmp303;
		BitBlock byte_range_9c_ba, r10000_10ffff_tmp304, r10000_10ffff_tmp305;
		BitBlock sequence_f0_9d_9c, sequence_f0_9d_9c_adv, r10000_10ffff_tmp306;
		BitBlock r10000_10ffff_tmp307, r10000_10ffff_tmp308, byte_range_96_b4;
		BitBlock r10000_10ffff_tmp309, r10000_10ffff_tmp310, sequence_f0_9d_9d;
		BitBlock r10000_10ffff_tmp311, sequence_f0_9d_9d_adv, r10000_10ffff_tmp312;
		BitBlock r10000_10ffff_tmp313, r10000_10ffff_tmp314, byte_range_90_ae;
		BitBlock r10000_10ffff_tmp315, r10000_10ffff_tmp316, sequence_f0_9d_9e;
		BitBlock sequence_f0_9d_9e_adv, r10000_10ffff_tmp317, r10000_10ffff_tmp318;
		BitBlock byte_range_8a_a8, r10000_10ffff_tmp319, byte_range_aa_bf;
		BitBlock r10000_10ffff_tmp320, sequence_f0_9d_9f, r10000_10ffff_tmp321;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp322, r10000_10ffff_tmp323;
		BitBlock r10000_10ffff_tmp324, sequence_f0_9e, r10000_10ffff_tmp325;
		BitBlock byte_range_a0_a2, r10000_10ffff_tmp326;
		BitBlock sequence_f0_9e_byte_range_a0_a2, r10000_10ffff_tmp327;
		BitBlock sequence_f0_9e_byte_range_a0_a2_sfx, sequence_f0_9e_a3;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_a3_adv, r10000_10ffff_tmp328;
		BitBlock sequence_f0_9e_b8, sequence_f0_9e_b8_adv, r10000_10ffff_tmp329;
		BitBlock byte_range_85_9f, r10000_10ffff_tmp330, byte_range_a1_a2;
		BitBlock r10000_10ffff_tmp331, r10000_10ffff_tmp332, r10000_10ffff_tmp333;
		BitBlock r10000_10ffff_tmp334, r10000_10ffff_tmp335, byte_range_a9_b2;
		BitBlock r10000_10ffff_tmp336, byte_range_b4_b7, r10000_10ffff_tmp337;
		BitBlock r10000_10ffff_tmp338, r10000_10ffff_tmp339, sequence_f0_9e_b9;
		BitBlock sequence_f0_9e_b9_adv, r10000_10ffff_tmp340, r10000_10ffff_tmp341;
		BitBlock r10000_10ffff_tmp342, r10000_10ffff_tmp343, r10000_10ffff_tmp344;
		BitBlock r10000_10ffff_tmp345, byte_range_91_92, r10000_10ffff_tmp346;
		BitBlock r10000_10ffff_tmp347, r10000_10ffff_tmp348, r10000_10ffff_tmp349;
		BitBlock r10000_10ffff_tmp350, r10000_10ffff_tmp351, r10000_10ffff_tmp352;
		BitBlock r10000_10ffff_tmp353, r10000_10ffff_tmp354, byte_range_a7_aa;
		BitBlock r10000_10ffff_tmp355, r10000_10ffff_tmp356, byte_range_ac_b2;
		BitBlock r10000_10ffff_tmp357, r10000_10ffff_tmp358, byte_range_b9_bc;
		BitBlock r10000_10ffff_tmp359, r10000_10ffff_tmp360, sequence_f0_9e_ba;
		BitBlock byte_range_80_89, sequence_f0_9e_ba_adv, r10000_10ffff_tmp361;
		BitBlock r10000_10ffff_tmp362, r10000_10ffff_tmp363, byte_range_8b_9b;
		BitBlock r10000_10ffff_tmp364, r10000_10ffff_tmp365, byte_range_a5_a9;
		BitBlock r10000_10ffff_tmp366, byte_range_ab_bb, r10000_10ffff_tmp367;
		BitBlock byte_range_a0_a9, byte_f0_byte_range_a0_a9, r10000_10ffff_tmp368;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp369;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa;
		BitBlock r10000_10ffff_tmp370, sequence_f0_aa_byte_range_80_9a;
		BitBlock r10000_10ffff_tmp371, sequence_f0_aa_byte_range_80_9a_sfx;
		BitBlock sequence_f0_aa_9b, sequence_f0_aa_adv, sequence_f0_aa_9b_adv;
		BitBlock r10000_10ffff_tmp372, r10000_10ffff_tmp373, byte_range_9c_bf;
		BitBlock sequence_f0_aa_byte_range_9c_bf, r10000_10ffff_tmp374;
		BitBlock sequence_f0_aa_byte_range_9c_bf_sfx, sequence_f0_ab, byte_range_80_9b;
		BitBlock r10000_10ffff_tmp375, sequence_f0_ab_byte_range_80_9b;
		BitBlock r10000_10ffff_tmp376, sequence_f0_ab_byte_range_80_9b_sfx;
		BitBlock sequence_f0_ab_9c, sequence_f0_ab_adv, r10000_10ffff_tmp377;
		BitBlock sequence_f0_ab_9c_adv, r10000_10ffff_tmp378, r10000_10ffff_tmp379;
		BitBlock sequence_f0_ab_byte_range_9d_9f, r10000_10ffff_tmp380;
		BitBlock sequence_f0_ab_byte_range_9d_9f_sfx, sequence_f0_ab_a0;
		BitBlock sequence_f0_ab_a0_adv, r10000_10ffff_tmp381, sequence_f0_af;
		BitBlock r10000_10ffff_tmp382, sequence_f0_af_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp383, sequence_f0_af_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp384;




        struct_gc_L.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_7a_1 = simd_and(tmp8, tmp9);
        struct_gc_L.cc = simd_or(struct_gc_L.cc, cc_range_41_7a_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 303))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 25))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            byte_aa = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp10 = simd_and(byte_c2_adv, byte_aa);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            byte_b5 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp16 = simd_and(byte_c2_adv, byte_b5);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp16);
            byte_ba = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            r80_7ff_tmp17 = simd_and(byte_c2_adv, byte_ba);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp18);
            r80_7ff_tmp19 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp20 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp21 = simd_or(basis_bits.bit_4, r80_7ff_tmp20);
            r80_7ff_tmp22 = simd_and(basis_bits.bit_3, r80_7ff_tmp21);
            byte_range_80_96 = simd_andc(r80_7ff_tmp19, r80_7ff_tmp22);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp23 = simd_and(byte_c3_adv, byte_range_80_96);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp23);
            r80_7ff_tmp24 = simd_not(r80_7ff_tmp22);
            r80_7ff_tmp25 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp24), simd_andc(r80_7ff_tmp25, basis_bits.bit_2));
            byte_range_98_b6 = simd_and(r80_7ff_tmp5, r80_7ff_tmp26);
            r80_7ff_tmp27 = simd_and(byte_c3_adv, byte_range_98_b6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp27);
            byte_range_b8_bf = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            r80_7ff_tmp28 = simd_and(byte_c3_adv, byte_range_b8_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r80_7ff_tmp28);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 8))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_range_c6_c8_sfx);
                    byte_c9_adv = r100_2ff_tmp5;
                    r180_24f_tmp2 = simd_and(byte_c9_adv, byte_range_80_8f);
                    struct_gc_L.cc = simd_or(struct_gc_L.cc, r180_24f_tmp2);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp5, basis_bits.bit_6);
                  byte_range_80_81 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp3 = simd_and(byte_cb_adv, byte_range_80_81);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp3);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  byte_range_86_91 = simd_and(r80_7ff_tmp19, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp8 = simd_and(byte_cb_adv, byte_range_86_91);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp9 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp10 = simd_and(basis_bits.bit_5, tmp6);
                  byte_range_a0_a4 = simd_andc(r2b0_2ff_tmp9, r2b0_2ff_tmp10);
                  r2b0_2ff_tmp11 = simd_and(byte_cb_adv, byte_range_a0_a4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp13 = simd_andc(r2b0_2ff_tmp12, tmp6);
                  byte_ac = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp13);
                  r2b0_2ff_tmp14 = simd_and(byte_cb_adv, byte_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp14);
                  r2b0_2ff_tmp15 = simd_and(r2b0_2ff_tmp12, r80_7ff_tmp3);
                  byte_ae = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp16 = simd_and(byte_cb_adv, byte_ae);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2b0_2ff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp12;
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp6);
                byte_range_b0_b4 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_range_b0_b4);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp13, basis_bits.bit_6);
                byte_range_b6_b7 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_and(byte_cd_adv, byte_range_b6_b7);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp7 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                byte_range_ba_bd = simd_and(r370_3ff_tmp6, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(byte_cd_adv, byte_range_ba_bd);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(r100_3ff_tmp2, tmp1);
                byte_bf = simd_and(byte_range_b0_bf, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(byte_cd_adv, byte_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp13 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                byte_86 = simd_and(r370_3ff_tmp12, r370_3ff_tmp13);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp14 = simd_and(byte_ce_adv, byte_86);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_and(r370_3ff_tmp12, r80_7ff_tmp8);
                byte_range_88_8a = simd_andc(r370_3ff_tmp15, tmp1);
                r370_3ff_tmp16 = simd_and(byte_ce_adv, byte_range_88_8a);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp16);
                r370_3ff_tmp17 = simd_andc(r100_3ff_tmp2, tmp6);
                byte_8c = simd_and(r370_3ff_tmp12, r370_3ff_tmp17);
                r370_3ff_tmp18 = simd_and(byte_ce_adv, byte_8c);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp18);
                r370_3ff_tmp19 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp20 = simd_or(basis_bits.bit_3, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_not(r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(basis_bits.bit_3, r100_3ff_tmp6);
                r370_3ff_tmp23 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp21), simd_andc(r370_3ff_tmp22, basis_bits.bit_2));
                byte_range_8e_a1 = simd_and(r80_7ff_tmp5, r370_3ff_tmp23);
                r370_3ff_tmp24 = simd_and(byte_ce_adv, byte_range_8e_a1);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp24);
                r370_3ff_tmp25 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp26 = simd_or(tmp5, tmp1);
                r370_3ff_tmp27 = simd_or(basis_bits.bit_3, r370_3ff_tmp26);
                byte_range_a3_bf = simd_and(r370_3ff_tmp25, r370_3ff_tmp27);
                r370_3ff_tmp28 = simd_and(byte_ce_adv, byte_range_a3_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp28);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp9);
                r370_3ff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp30 = simd_or(basis_bits.bit_4, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(basis_bits.bit_3, r370_3ff_tmp30);
                r370_3ff_tmp32 = simd_and(basis_bits.bit_2, r370_3ff_tmp31);
                byte_range_80_b5 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp32);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp33 = simd_and(byte_cf_adv, byte_range_80_b5);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp33);
                byte_range_b7_bf = simd_and(byte_range_b0_bf, r80_7ff_tmp21);
                r370_3ff_tmp34 = simd_and(byte_cf_adv, byte_range_b7_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r370_3ff_tmp34);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 8);
            }
            r80_7ff_tmp29 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp30 = simd_and(byte_range_c0_ff, r80_7ff_tmp29);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp30, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp30, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp30, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(10), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp30, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(11), byte_d2_adv));
                r400_4ff_tmp4 = simd_and(byte_d2_adv, byte_range_80_81);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r400_4ff_tmp6 = simd_and(basis_bits.bit_4, r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_or(basis_bits.bit_3, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_2, r400_4ff_tmp7);
                byte_range_8a_bf = simd_and(byte_range_80_bf, r400_4ff_tmp8);
                r400_4ff_tmp9 = simd_and(byte_d2_adv, byte_range_8a_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r400_4ff_tmp9);
                byte_d3 = simd_and(r80_7ff_tmp30, r80_7ff_tmp18);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(12), byte_d3_adv));
                r400_4ff_tmp10 = simd_and(byte_d3_adv, byte_range_80_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r400_4ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp30, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp30, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(13), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(14, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp30, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(14), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp30, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(15, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r530_58f_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r530_58f_tmp4);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp5, r80_7ff_tmp29);
                  r530_58f_tmp6 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                  byte_99 = simd_and(r530_58f_tmp5, r530_58f_tmp6);
                  r530_58f_tmp7 = simd_and(byte_d5_adv, byte_99);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r530_58f_tmp7);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp7);
                  byte_range_a1_bf = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  r530_58f_tmp10 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r530_58f_tmp10);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp11 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r530_58f_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(r80_7ff_tmp13, tmp1);
              byte_d7 = simd_and(r80_7ff_tmp30, r400_5ff_tmp7);
              r400_5ff_tmp8 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(16, 1))) {
                r590_5ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r590_5ff_tmp2 = simd_not(r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp2), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                byte_range_90_aa = simd_and(r80_7ff_tmp5, r590_5ff_tmp3);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(16), byte_d7_adv));
                r590_5ff_tmp4 = simd_and(byte_d7_adv, byte_range_90_aa);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r590_5ff_tmp4);
                r590_5ff_tmp5 = simd_andc(r80_7ff_tmp12, tmp5);
                byte_range_b0_b2 = simd_andc(r590_5ff_tmp5, tmp1);
                r590_5ff_tmp6 = simd_and(byte_d7_adv, byte_range_b0_b2);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r590_5ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp30, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(17, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
              byte_d8 = simd_and(r80_7ff_tmp30, r600_6ff_tmp1);
              byte_range_a0_bf = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(17), byte_d8_adv));
              r600_6ff_tmp2 = simd_and(byte_d8_adv, byte_range_a0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
              byte_d9 = simd_and(r80_7ff_tmp30, r600_6ff_tmp3);
              r600_6ff_tmp4 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              byte_range_80_8a = simd_andc(r600_6ff_tmp4, tmp3);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(18), byte_d9_adv));
              r600_6ff_tmp5 = simd_and(byte_d9_adv, byte_range_80_8a);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp6, basis_bits.bit_6);
              byte_range_ae_af = simd_and(r80_7ff_tmp7, r600_6ff_tmp7);
              r600_6ff_tmp8 = simd_and(byte_d9_adv, byte_range_ae_af);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_or(basis_bits.bit_5, tmp6);
              r600_6ff_tmp10 = simd_or(basis_bits.bit_4, r600_6ff_tmp9);
              byte_range_b1_bf = simd_and(r80_7ff_tmp12, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_and(byte_d9_adv, byte_range_b1_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp11);
              byte_da = simd_and(r80_7ff_tmp30, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(19), byte_da_adv));
              r600_6ff_tmp12 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
              byte_db = simd_and(r80_7ff_tmp30, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp15 = simd_and(basis_bits.bit_3, tmp5);
              byte_range_80_93 = simd_andc(r600_6ff_tmp14, r600_6ff_tmp15);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
              r600_6ff_tmp16 = simd_and(byte_db_adv, byte_range_80_93);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_and(byte_range_80_bf, r80_7ff_tmp29);
              byte_95 = simd_and(r600_6ff_tmp17, r80_7ff_tmp15);
              r600_6ff_tmp18 = simd_and(byte_db_adv, byte_95);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, r80_7ff_tmp6);
              r600_6ff_tmp20 = simd_and(r600_6ff_tmp19, r80_7ff_tmp13);
              r600_6ff_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_a5_a6 = simd_and(r600_6ff_tmp20, r600_6ff_tmp21);
              r600_6ff_tmp22 = simd_and(byte_db_adv, byte_range_a5_a6);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp22);
              r600_6ff_tmp23 = simd_and(byte_db_adv, byte_range_ae_af);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp23);
              r600_6ff_tmp24 = simd_and(byte_range_80_bf, r80_7ff_tmp11);
              r600_6ff_tmp25 = simd_and(r600_6ff_tmp24, basis_bits.bit_4);
              r600_6ff_tmp26 = simd_not(tmp6);
              r600_6ff_tmp27 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp26), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_ba_bc = simd_and(r600_6ff_tmp25, r600_6ff_tmp27);
              r600_6ff_tmp28 = simd_and(byte_db_adv, byte_range_ba_bc);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp28);
              r600_6ff_tmp29 = simd_and(r600_6ff_tmp6, tmp1);
              byte_bf = simd_and(r600_6ff_tmp24, r600_6ff_tmp29);
              r600_6ff_tmp30 = simd_and(byte_db_adv, byte_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r600_6ff_tmp30);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 4);
            }
            r80_7ff_tmp31 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp32 = simd_andc(r80_7ff_tmp31, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp30, r80_7ff_tmp32);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(21, 2))) {
              r700_77f_tmp1 = simd_andc(r80_7ff_tmp31, tmp6);
              byte_dc = simd_and(r80_7ff_tmp30, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp31, r80_7ff_tmp14);
              byte_dd = simd_and(r80_7ff_tmp30, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(21), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(22, 1))) {
                r700_74f_tmp1 = simd_and(r80_7ff_tmp5, r80_7ff_tmp29);
                byte_90 = simd_andc(r700_74f_tmp1, tmp7);
                carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(22), byte_dc_adv));
                r700_74f_tmp2 = simd_and(byte_dc_adv, byte_90);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r700_74f_tmp2);
                r700_74f_tmp3 = simd_not(basis_bits.bit_3);
                r700_74f_tmp4 = simd_or(tmp5, basis_bits.bit_6);
                r700_74f_tmp5 = simd_and(basis_bits.bit_3, r700_74f_tmp4);
                r700_74f_tmp6 = simd_or(simd_and(basis_bits.bit_2, r700_74f_tmp3), simd_andc(r700_74f_tmp5, basis_bits.bit_2));
                byte_range_92_af = simd_and(r80_7ff_tmp5, r700_74f_tmp6);
                r700_74f_tmp7 = simd_and(byte_dc_adv, byte_range_92_af);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r700_74f_tmp7);
                r700_74f_tmp8 = simd_and(byte_range_80_8f, r80_7ff_tmp31);
                byte_range_8d_8f = simd_and(r700_74f_tmp8, tmp6);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp9 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r700_74f_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 2);
            }
            r80_7ff_tmp33 = simd_and(r80_7ff_tmp31, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp30, r80_7ff_tmp33);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(23, 2))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp31, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp30, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(23, 1))) {
                r780_7bf_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_3, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_2, r780_7bf_tmp3);
                byte_range_80_a5 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp4);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(23), byte_de_adv));
                r780_7bf_tmp5 = simd_and(byte_de_adv, byte_range_80_a5);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r780_7bf_tmp5);
                r780_7bf_tmp6 = simd_andc(r80_7ff_tmp14, tmp5);
                byte_b1 = simd_and(r80_7ff_tmp12, r780_7bf_tmp6);
                r780_7bf_tmp7 = simd_and(byte_de_adv, byte_b1);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r780_7bf_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp31, tmp1);
              byte_df = simd_and(r80_7ff_tmp30, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(24, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_2, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_2));
                byte_range_8a_aa = simd_and(r80_7ff_tmp5, r7c0_7ff_tmp6);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(24), byte_df_adv));
                r7c0_7ff_tmp7 = simd_and(byte_df_adv, byte_range_8a_aa);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r7c0_7ff_tmp7);
                r7c0_7ff_tmp8 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                byte_range_b4_b5 = simd_and(r80_7ff_tmp12, r7c0_7ff_tmp8);
                r7c0_7ff_tmp9 = simd_and(byte_df_adv, byte_range_b4_b5);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r7c0_7ff_tmp9);
                r7c0_7ff_tmp10 = simd_and(byte_df_adv, byte_ba);
                struct_gc_L.cc = simd_or(struct_gc_L.cc, r7c0_7ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(23, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 25);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(25, 167))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(25), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(26, 104))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(26, 77))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp7);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(26, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp7);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(26), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_4, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  byte_range_80_95 = simd_andc(r800_fff_tmp3, r800_fff_tmp6);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(27), sequence_e0_a0_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a0_adv, byte_range_80_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp3, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp10, r800_fff_tmp11);
                  byte_9a = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(sequence_e0_a0_adv, byte_9a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp13);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp14 = simd_and(sequence_e0_a0_adv, byte_a4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(r800_fff_tmp10, tmp6);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(sequence_e0_a0_adv, byte_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp18 = simd_andc(r800_fff_tmp17, tmp5);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp18);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_5, tmp6);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_4, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_and(basis_bits.bit_3, r800_fff_tmp20);
                  byte_range_80_98 = simd_andc(r800_fff_tmp3, r800_fff_tmp21);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(28), sequence_e0_a1_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp11, tmp5);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp23);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp24 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp25 = simd_or(tmp5, tmp1);
                  r800_fff_tmp26 = simd_and(basis_bits.bit_3, r800_fff_tmp25);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp24, r800_fff_tmp26);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(29), sequence_e0_a2_adv));
                  r800_fff_tmp27 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp27);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp28 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_4, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_and(basis_bits.bit_3, r800_fff_tmp29);
                  r800_fff_tmp31 = simd_not(r800_fff_tmp30);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_3, tmp5);
                  r800_fff_tmp33 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp31), simd_andc(r800_fff_tmp32, basis_bits.bit_2));
                  byte_range_84_b9 = simd_and(r800_ffff_tmp3, r800_fff_tmp33);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(30), sequence_e0_a4_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a4_adv, byte_range_84_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp36 = simd_and(r800_ffff_tmp3, r800_fff_tmp35);
                  r800_fff_tmp37 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp37, r800_fff_tmp17);
                  byte_bd = simd_and(r800_fff_tmp36, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(sequence_e0_a4_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(r800_ffff_tmp1, r800_fff_tmp17);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  byte_90 = simd_andc(r800_fff_tmp9, tmp7);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(31), sequence_e0_a5_adv));
                  r800_fff_tmp41 = simd_and(sequence_e0_a5_adv, byte_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp43 = simd_not(r800_fff_tmp42);
                  r800_fff_tmp44 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp43), simd_andc(r800_ffff_tmp4, basis_bits.bit_2));
                  byte_range_98_a1 = simd_and(r800_ffff_tmp3, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(sequence_e0_a5_adv, byte_range_98_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_or(basis_bits.bit_4, r800_fff_tmp19);
                  byte_range_b1_bf = simd_and(r800_fff_tmp36, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(sequence_e0_a5_adv, byte_range_b1_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(r800_ffff_tmp1, r800_fff_tmp11);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp48);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp49 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp50 = simd_andc(r800_ffff_tmp3, r800_fff_tmp49);
                  byte_80 = simd_andc(r800_fff_tmp50, tmp7);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(32), sequence_e0_a6_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_a6_adv, byte_80);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(basis_bits.bit_5, tmp6);
                  r800_fff_tmp53 = simd_xor(basis_bits.bit_4, r800_fff_tmp52);
                  byte_range_85_8c = simd_and(r800_fff_tmp50, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_a6_adv, byte_range_85_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_not(tmp7);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp37, tmp1);
                  r800_fff_tmp57 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp55), simd_andc(r800_fff_tmp56, basis_bits.bit_3));
                  byte_range_8f_90 = simd_and(r800_fff_tmp3, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(sequence_e0_a6_adv, byte_range_8f_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_or(basis_bits.bit_3, r800_fff_tmp20);
                  r800_fff_tmp60 = simd_not(r800_fff_tmp59);
                  r800_fff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp60), simd_andc(r800_fff_tmp26, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp3, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_and(sequence_e0_a6_adv, byte_range_93_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp55), simd_andc(r800_fff_tmp29, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp24, r800_fff_tmp63);
                  r800_fff_tmp64 = simd_and(sequence_e0_a6_adv, byte_range_aa_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp64);
                  byte_b2 = simd_and(r800_fff_tmp36, r800_fff_tmp23);
                  r800_fff_tmp65 = simd_and(sequence_e0_a6_adv, byte_b2);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_not(r800_fff_tmp28);
                  r800_fff_tmp67 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp66), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  byte_range_b6_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(sequence_e0_a6_adv, byte_range_b6_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp68);
                  r800_fff_tmp69 = simd_and(sequence_e0_a6_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp70);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp71 = simd_and(r800_fff_tmp37, r800_fff_tmp11);
                  byte_8e = simd_and(r800_fff_tmp50, r800_fff_tmp71);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(33), sequence_e0_a7_adv));
                  r800_fff_tmp72 = simd_and(sequence_e0_a7_adv, byte_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_andc(r800_fff_tmp37, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp9, r800_fff_tmp73);
                  r800_fff_tmp74 = simd_and(sequence_e0_a7_adv, byte_range_9c_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp74);
                  r800_fff_tmp75 = simd_and(basis_bits.bit_3, r800_fff_tmp56);
                  r800_fff_tmp76 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp43), simd_andc(r800_fff_tmp75, basis_bits.bit_2));
                  byte_range_9f_a1 = simd_and(r800_ffff_tmp3, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(sequence_e0_a7_adv, byte_range_9f_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp77);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp36, r800_4dff_tmp1);
                  r800_fff_tmp78 = simd_and(sequence_e0_a7_adv, byte_range_b0_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp78);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp79 = simd_not(tmp2);
                  r800_fff_tmp80 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp79), simd_andc(r800_fff_tmp52, basis_bits.bit_4));
                  byte_range_85_8a = simd_and(r800_fff_tmp50, r800_fff_tmp80);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(34), sequence_e0_a8_adv));
                  r800_fff_tmp81 = simd_and(sequence_e0_a8_adv, byte_range_85_8a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_and(sequence_e0_a8_adv, byte_range_8f_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp82);
                  r800_fff_tmp83 = simd_and(sequence_e0_a8_adv, byte_range_93_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_a8_adv, byte_range_aa_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_andc(basis_bits.bit_6, tmp5);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp36, r800_fff_tmp85);
                  r800_fff_tmp86 = simd_and(sequence_e0_a8_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp86);
                  r800_fff_tmp87 = simd_and(r800_fff_tmp36, r800_ffff_tmp1);
                  r800_fff_tmp88 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b5_b6 = simd_and(r800_fff_tmp87, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_a8_adv, byte_range_b5_b6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp89);
                  r800_fff_tmp90 = simd_andc(r800_fff_tmp10, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(sequence_e0_a8_adv, byte_range_b8_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp91);
                  r800_fff_tmp92 = simd_and(r800_fff_tmp10, r800_fff_tmp17);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp92);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp93 = simd_and(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp94 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_99_9c = simd_and(r800_fff_tmp93, r800_fff_tmp94);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(35), sequence_e0_a9_adv));
                  r800_fff_tmp95 = simd_and(sequence_e0_a9_adv, byte_range_99_9c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp95);
                  byte_9e = simd_and(r800_fff_tmp9, r800_fff_tmp71);
                  r800_fff_tmp96 = simd_and(sequence_e0_a9_adv, byte_9e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp96);
                  r800_fff_tmp97 = simd_andc(r800_fff_tmp36, basis_bits.bit_4);
                  r800_fff_tmp98 = simd_not(tmp6);
                  r800_fff_tmp99 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp98), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_b2_b4 = simd_and(r800_fff_tmp97, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(sequence_e0_a9_adv, byte_range_b2_b4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp100);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp101 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp102 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp101), simd_andc(r800_fff_tmp52, basis_bits.bit_4));
                  byte_range_85_8d = simd_and(r800_fff_tmp50, r800_fff_tmp102);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(36), sequence_e0_aa_adv));
                  r800_fff_tmp103 = simd_and(sequence_e0_aa_adv, byte_range_85_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp103);
                  r800_fff_tmp104 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp105 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp104), simd_andc(r800_fff_tmp56, basis_bits.bit_3));
                  byte_range_8f_91 = simd_and(r800_fff_tmp3, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(sequence_e0_aa_adv, byte_range_8f_91);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(sequence_e0_aa_adv, byte_range_93_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp107);
                  r800_fff_tmp108 = simd_and(sequence_e0_aa_adv, byte_range_aa_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(sequence_e0_aa_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp109);
                  r800_fff_tmp110 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp66), simd_andc(r800_fff_tmp52, basis_bits.bit_4));
                  byte_range_b5_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_and(sequence_e0_aa_adv, byte_range_b5_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(sequence_e0_aa_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp112);
                  r800_fff_tmp113 = simd_and(r800_fff_tmp10, tmp1);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp113);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(37), sequence_e0_ab_adv));
                  r800_fff_tmp114 = simd_and(sequence_e0_ab_adv, byte_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp114);
                  byte_range_a0_a1 = simd_andc(r800_fff_tmp1, r800_4dff_tmp1);
                  r800_fff_tmp115 = simd_and(sequence_e0_ab_adv, byte_range_a0_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_andc(r800_fff_tmp37, tmp6);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp116);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(38), sequence_e0_ac_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_ac_adv, byte_range_85_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(sequence_e0_ac_adv, byte_range_8f_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_ac_adv, byte_range_93_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_ac_adv, byte_range_aa_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp120);
                  r800_fff_tmp121 = simd_and(sequence_e0_ac_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_and(sequence_e0_ac_adv, byte_range_b5_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp122);
                  r800_fff_tmp123 = simd_and(sequence_e0_ac_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp123);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp38);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(39), sequence_e0_ad_adv));
                  r800_fff_tmp124 = simd_and(sequence_e0_ad_adv, byte_range_9c_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp124);
                  r800_fff_tmp125 = simd_and(sequence_e0_ad_adv, byte_range_9f_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp125);
                  byte_b1 = simd_and(r800_fff_tmp36, r800_fff_tmp18);
                  r800_fff_tmp126 = simd_and(sequence_e0_ad_adv, byte_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp126);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp71);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp127 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r800_fff_tmp50, r800_fff_tmp127);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(40), sequence_e0_ae_adv));
                  r800_fff_tmp128 = simd_and(sequence_e0_ae_adv, byte_83);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(sequence_e0_ae_adv, byte_range_85_8a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp129);
                  r800_fff_tmp130 = simd_and(r800_fff_tmp37, basis_bits.bit_6);
                  r800_fff_tmp131 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp55), simd_andc(r800_fff_tmp130, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp3, r800_fff_tmp131);
                  r800_fff_tmp132 = simd_and(sequence_e0_ae_adv, byte_range_8e_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp132);
                  r800_fff_tmp133 = simd_andc(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp134 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_92_95 = simd_and(r800_fff_tmp133, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(sequence_e0_ae_adv, byte_range_92_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp135);
                  r800_fff_tmp136 = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  byte_range_99_9a = simd_and(r800_fff_tmp136, r800_fff_tmp88);
                  r800_fff_tmp137 = simd_and(sequence_e0_ae_adv, byte_range_99_9a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp137);
                  byte_9c = simd_and(r800_fff_tmp9, r800_fff_tmp116);
                  r800_fff_tmp138 = simd_and(sequence_e0_ae_adv, byte_9c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp138);
                  byte_range_9e_9f = simd_and(r800_fff_tmp9, r800_fff_tmp130);
                  r800_fff_tmp139 = simd_and(sequence_e0_ae_adv, byte_range_9e_9f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp139);
                  r800_fff_tmp140 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp141 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp98), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_a3_a4 = simd_and(r800_fff_tmp140, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_and(sequence_e0_ae_adv, byte_range_a3_a4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp142);
                  r800_fff_tmp143 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  byte_range_a8_aa = simd_andc(r800_fff_tmp143, tmp1);
                  r800_fff_tmp144 = simd_and(sequence_e0_ae_adv, byte_range_a8_aa);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp144);
                  r800_fff_tmp145 = simd_not(r800_fff_tmp29);
                  r800_fff_tmp146 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp145), simd_andc(r800_fff_tmp130, basis_bits.bit_3));
                  byte_range_ae_b9 = simd_and(r800_fff_tmp24, r800_fff_tmp146);
                  r800_fff_tmp147 = simd_and(sequence_e0_ae_adv, byte_range_ae_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp147);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp56);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(41), sequence_e0_af_adv));
                  r800_fff_tmp148 = simd_and(sequence_e0_af_adv, byte_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp148);
                  byte_b0 = simd_andc(r800_fff_tmp36, tmp7);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(42), sequence_e0_b0_adv));
                  r800_fff_tmp149 = simd_and(sequence_e0_b0_adv, byte_range_85_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp149);
                  r800_fff_tmp150 = simd_and(sequence_e0_b0_adv, byte_range_8e_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp150);
                  r800_fff_tmp151 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp152 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp60), simd_andc(r800_fff_tmp151, basis_bits.bit_2));
                  byte_range_92_a8 = simd_and(r800_ffff_tmp3, r800_fff_tmp152);
                  r800_fff_tmp153 = simd_and(sequence_e0_b0_adv, byte_range_92_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp153);
                  r800_fff_tmp154 = simd_xor(basis_bits.bit_3, r800_fff_tmp29);
                  byte_range_aa_b9 = simd_and(r800_fff_tmp24, r800_fff_tmp154);
                  r800_fff_tmp155 = simd_and(sequence_e0_b0_adv, byte_range_aa_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp155);
                  r800_fff_tmp156 = simd_and(sequence_e0_b0_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp156);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  byte_range_98_99 = simd_and(r800_fff_tmp9, r800_fff_tmp90);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(43), sequence_e0_b1_adv));
                  r800_fff_tmp157 = simd_and(sequence_e0_b1_adv, byte_range_98_99);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp157);
                  r800_fff_tmp158 = simd_and(sequence_e0_b1_adv, byte_range_a0_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp158);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(44), sequence_e0_b2_adv));
                  r800_fff_tmp159 = simd_and(sequence_e0_b2_adv, byte_range_85_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp159);
                  r800_fff_tmp160 = simd_and(sequence_e0_b2_adv, byte_range_8e_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp160);
                  r800_fff_tmp161 = simd_and(sequence_e0_b2_adv, byte_range_92_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp161);
                  r800_fff_tmp162 = simd_not(tmp5);
                  r800_fff_tmp163 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp162), simd_andc(r800_fff_tmp29, basis_bits.bit_3));
                  byte_range_aa_b3 = simd_and(r800_fff_tmp24, r800_fff_tmp163);
                  r800_fff_tmp164 = simd_and(sequence_e0_b2_adv, byte_range_aa_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp164);
                  r800_fff_tmp165 = simd_and(sequence_e0_b2_adv, byte_range_b5_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp165);
                  r800_fff_tmp166 = simd_and(sequence_e0_b2_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp166);
                  byte_b3 = simd_and(r800_fff_tmp36, r800_fff_tmp127);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(45), sequence_e0_b3_adv));
                  r800_fff_tmp167 = simd_and(sequence_e0_b3_adv, byte_9e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp167);
                  r800_fff_tmp168 = simd_and(sequence_e0_b3_adv, byte_range_a0_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp168);
                  r800_fff_tmp169 = simd_andc(r800_fff_tmp36, tmp5);
                  byte_range_b1_b2 = simd_and(r800_fff_tmp169, r800_fff_tmp88);
                  r800_fff_tmp170 = simd_and(sequence_e0_b3_adv, byte_range_b1_b2);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp170);
                  byte_b4 = simd_and(r800_fff_tmp36, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(46), sequence_e0_b4_adv));
                  r800_fff_tmp171 = simd_and(sequence_e0_b4_adv, byte_range_85_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp171);
                  r800_fff_tmp172 = simd_and(sequence_e0_b4_adv, byte_range_8e_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp172);
                  r800_fff_tmp173 = simd_and(basis_bits.bit_3, tmp3);
                  r800_fff_tmp174 = simd_not(r800_fff_tmp173);
                  r800_fff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp174), simd_andc(r800_fff_tmp151, basis_bits.bit_2));
                  byte_range_92_ba = simd_and(r800_ffff_tmp3, r800_fff_tmp175);
                  r800_fff_tmp176 = simd_and(sequence_e0_b4_adv, byte_range_92_ba);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp176);
                  r800_fff_tmp177 = simd_and(sequence_e0_b4_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp177);
                  byte_b5 = simd_and(r800_fff_tmp36, r800_fff_tmp40);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(47), sequence_e0_b5_adv));
                  r800_fff_tmp178 = simd_and(sequence_e0_b5_adv, byte_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp178);
                  r800_fff_tmp179 = simd_and(sequence_e0_b5_adv, byte_range_a0_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp179);
                  r800_fff_tmp180 = simd_and(r800_fff_tmp36, basis_bits.bit_4);
                  byte_range_ba_bf = simd_and(r800_fff_tmp180, r800_fff_tmp28);
                  r800_fff_tmp181 = simd_and(sequence_e0_b5_adv, byte_range_ba_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp181);
                  byte_b6 = simd_and(r800_fff_tmp36, r800_fff_tmp48);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp182 = simd_and(basis_bits.bit_5, tmp1);
                  r800_fff_tmp183 = simd_or(basis_bits.bit_4, r800_fff_tmp182);
                  r800_fff_tmp184 = simd_not(r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(basis_bits.bit_4, r800_fff_tmp52);
                  r800_fff_tmp186 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp184), simd_andc(r800_fff_tmp185, basis_bits.bit_3));
                  byte_range_85_96 = simd_and(r800_fff_tmp3, r800_fff_tmp186);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(48), sequence_e0_b6_adv));
                  r800_fff_tmp187 = simd_and(sequence_e0_b6_adv, byte_range_85_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp187);
                  r800_fff_tmp188 = simd_not(r800_fff_tmp151);
                  r800_fff_tmp189 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp188), simd_andc(r800_fff_tmp30, basis_bits.bit_2));
                  byte_range_9a_b1 = simd_and(r800_ffff_tmp3, r800_fff_tmp189);
                  r800_fff_tmp190 = simd_and(sequence_e0_b6_adv, byte_range_9a_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp190);
                  r800_fff_tmp191 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp192 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp191), simd_andc(tmp2, basis_bits.bit_4));
                  byte_range_b3_bb = simd_and(r800_fff_tmp36, r800_fff_tmp192);
                  r800_fff_tmp193 = simd_and(sequence_e0_b6_adv, byte_range_b3_bb);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp193);
                  r800_fff_tmp194 = simd_and(sequence_e0_b6_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp194);
                  byte_b7 = simd_and(r800_fff_tmp36, r800_fff_tmp70);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp195 = simd_andc(r800_fff_tmp50, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r800_fff_tmp195, r800_fff_tmp182);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(49), sequence_e0_b7_adv));
                  r800_fff_tmp196 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp196);
                  byte_b8 = simd_and(r800_fff_tmp36, r800_fff_tmp15);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp197 = simd_and(basis_bits.bit_3, tmp7);
                  r800_fff_tmp198 = simd_not(r800_fff_tmp197);
                  r800_fff_tmp199 = simd_or(basis_bits.bit_3, tmp7);
                  r800_fff_tmp200 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp198), simd_andc(r800_fff_tmp199, basis_bits.bit_2));
                  byte_range_81_b0 = simd_and(r800_ffff_tmp3, r800_fff_tmp200);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(50), sequence_e0_b8_adv));
                  r800_fff_tmp201 = simd_and(sequence_e0_b8_adv, byte_range_81_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp201);
                  r800_fff_tmp202 = simd_and(sequence_e0_b8_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp202);
                  byte_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp92);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(51), sequence_e0_b9_adv));
                  r800_fff_tmp203 = simd_and(sequence_e0_b9_adv, byte_range_80_86);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp203);
                  byte_ba = simd_and(r800_fff_tmp36, r800_fff_tmp12);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp204 = simd_andc(r800_fff_tmp50, tmp5);
                  byte_range_81_82 = simd_and(r800_fff_tmp204, r800_fff_tmp88);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(52), sequence_e0_ba_adv));
                  r800_fff_tmp205 = simd_and(sequence_e0_ba_adv, byte_range_81_82);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp205);
                  byte_84 = simd_and(r800_fff_tmp50, r800_ffff_tmp2);
                  r800_fff_tmp206 = simd_and(sequence_e0_ba_adv, byte_84);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp206);
                  r800_fff_tmp207 = simd_not(r800_fff_tmp19);
                  r800_fff_tmp208 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp207), simd_andc(r800_fff_tmp182, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp50, r800_fff_tmp208);
                  r800_fff_tmp209 = simd_and(sequence_e0_ba_adv, byte_range_87_88);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp209);
                  byte_8a = simd_and(r800_fff_tmp50, r800_fff_tmp12);
                  r800_fff_tmp210 = simd_and(sequence_e0_ba_adv, byte_8a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp210);
                  byte_8d = simd_and(r800_fff_tmp50, r800_fff_tmp38);
                  r800_fff_tmp211 = simd_and(sequence_e0_ba_adv, byte_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp211);
                  byte_range_94_97 = simd_and(r800_fff_tmp9, r800_ffff_tmp1);
                  r800_fff_tmp212 = simd_and(sequence_e0_ba_adv, byte_range_94_97);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp212);
                  byte_range_99_9f = simd_and(r800_fff_tmp93, r800_fff_tmp19);
                  r800_fff_tmp213 = simd_and(sequence_e0_ba_adv, byte_range_99_9f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp213);
                  r800_fff_tmp214 = simd_andc(r800_fff_tmp1, tmp5);
                  byte_range_a1_a3 = simd_and(r800_fff_tmp214, tmp6);
                  r800_fff_tmp215 = simd_and(sequence_e0_ba_adv, byte_range_a1_a3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp215);
                  r800_fff_tmp216 = simd_and(sequence_e0_ba_adv, byte_a5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp216);
                  r800_fff_tmp217 = simd_and(sequence_e0_ba_adv, byte_a7);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp217);
                  r800_fff_tmp218 = simd_and(r800_fff_tmp10, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r800_fff_tmp1, r800_fff_tmp218);
                  r800_fff_tmp219 = simd_and(sequence_e0_ba_adv, byte_range_aa_ab);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp219);
                  r800_fff_tmp220 = simd_and(r800_fff_tmp37, tmp6);
                  r800_fff_tmp221 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp55), simd_andc(r800_fff_tmp220, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(r800_fff_tmp24, r800_fff_tmp221);
                  r800_fff_tmp222 = simd_and(sequence_e0_ba_adv, byte_range_ad_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp222);
                  r800_fff_tmp223 = simd_and(sequence_e0_ba_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp223);
                  r800_fff_tmp224 = simd_and(sequence_e0_ba_adv, byte_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp224);
                  byte_bb = simd_and(r800_fff_tmp36, r800_fff_tmp113);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  byte_range_80_84 = simd_andc(r800_fff_tmp195, r800_fff_tmp52);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(53), sequence_e0_bb_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_bb_adv, byte_range_80_84);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp225);
                  byte_86 = simd_and(r800_fff_tmp50, r800_fff_tmp48);
                  r800_fff_tmp226 = simd_and(sequence_e0_bb_adv, byte_86);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp226);
                  byte_range_9c_9f = simd_and(r800_fff_tmp9, r800_fff_tmp37);
                  r800_fff_tmp227 = simd_and(sequence_e0_bb_adv, byte_range_9c_9f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp227);
                  byte_bc = simd_and(r800_fff_tmp36, r800_fff_tmp116);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(54), sequence_e0_bc_adv));
                  r800_fff_tmp228 = simd_and(sequence_e0_bc_adv, byte_80);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp228);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_range_80_87 = r800_fff_tmp195;
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(55), sequence_e0_bd_adv));
                  r800_fff_tmp229 = simd_and(sequence_e0_bd_adv, byte_range_80_87);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp229);
                  r800_fff_tmp230 = simd_or(basis_bits.bit_3, r800_fff_tmp220);
                  r800_fff_tmp231 = simd_not(r800_fff_tmp230);
                  r800_fff_tmp232 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp231), simd_andc(r800_fff_tmp59, basis_bits.bit_2));
                  byte_range_89_ac = simd_and(r800_ffff_tmp3, r800_fff_tmp232);
                  r800_fff_tmp233 = simd_and(sequence_e0_bd_adv, byte_range_89_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp233);
                  byte_be = simd_and(r800_fff_tmp36, r800_fff_tmp71);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp234 = simd_and(r800_fff_tmp50, basis_bits.bit_4);
                  byte_range_88_8c = simd_andc(r800_fff_tmp234, r800_fff_tmp52);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
                  r800_fff_tmp235 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r800_fff_tmp235);
                }
                else {
                  carryQ.CarryDequeueEnqueue(26, 31);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(57, 46))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp7);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(57), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_2, r1000_1fff_tmp4);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp5);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(58), sequence_e1_80_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_80_adv, byte_range_80_aa);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp9, tmp1);
                  byte_bf = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(sequence_e1_80_adv, byte_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp11);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_andc(r1000_1fff_tmp13, basis_bits.bit_4);
                  r1000_1fff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_90_95 = simd_andc(r1000_1fff_tmp14, r1000_1fff_tmp15);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(59), sequence_e1_81_adv));
                  r1000_1fff_tmp16 = simd_and(sequence_e1_81_adv, byte_range_90_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp13, basis_bits.bit_4);
                  r1000_1fff_tmp18 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9d = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_and(sequence_e1_81_adv, byte_range_9a_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a1 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp2);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_81_adv, byte_a1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp20, r800_ffff_tmp1);
                  r1000_1fff_tmp23 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_a5_a6 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_81_adv, byte_range_a5_a6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp26 = simd_not(tmp7);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp9, basis_bits.bit_6);
                  r1000_1fff_tmp28 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp27, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_81_adv, byte_range_ae_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp31 = simd_or(basis_bits.bit_4, r1000_1fff_tmp30);
                  byte_range_b5_bf = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_81_adv, byte_range_b5_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp34 = simd_andc(r1000_1fff_tmp33, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(60), sequence_e1_82_adv));
                  r1000_1fff_tmp35 = simd_and(sequence_e1_82_adv, byte_range_80_81);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp33);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp36);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_82_adv, byte_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp37);
                  byte_range_a0_bf = r1000_1fff_tmp25;
                  r1000_1fff_tmp38 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp40 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp40, r1000_1fff_tmp15);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(61), sequence_e1_83_adv));
                  r1000_1fff_tmp41 = simd_and(sequence_e1_83_adv, byte_range_80_85);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  r1000_1fff_tmp43 = simd_and(sequence_e1_83_adv, byte_87);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp43);
                  r1000_1fff_tmp44 = simd_and(r1000_1fff_tmp9, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_and(sequence_e1_83_adv, byte_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp45);
                  r1000_1fff_tmp46 = simd_and(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp47 = simd_not(r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp47), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ba = simd_and(r800_ffff_tmp3, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_and(sequence_e1_83_adv, byte_range_90_ba);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp49);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp50 = simd_and(sequence_e1_83_adv, byte_range_bc_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp50);
                  r1000_1fff_tmp51 = simd_or(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp52 = simd_not(r1000_1fff_tmp51);
                  r1000_1fff_tmp53 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp52), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp53);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(62), r1000_1fff_tmp54));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp54, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp55 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp56 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp57 = simd_and(r1000_1fff_tmp56, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp55, r1000_1fff_tmp57);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_4, r1000_1fff_tmp51);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp55, r1000_1fff_tmp58);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(63), sequence_e1_89_adv));
                  r1000_1fff_tmp59 = simd_and(sequence_e1_89_adv, byte_range_80_88);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp59);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp55, basis_bits.bit_4);
                  byte_range_8a_8d = simd_and(r1000_1fff_tmp60, r1000_1fff_tmp18);
                  r1000_1fff_tmp61 = simd_and(sequence_e1_89_adv, byte_range_8a_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(byte_range_80_bf, r1000_1fff_tmp12);
                  r1000_1fff_tmp63 = simd_andc(r1000_1fff_tmp62, basis_bits.bit_4);
                  r1000_1fff_tmp64 = simd_and(basis_bits.bit_5, tmp1);
                  byte_range_90_96 = simd_andc(r1000_1fff_tmp63, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(sequence_e1_89_adv, byte_range_90_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp65);
                  r1000_1fff_tmp66 = simd_andc(r1000_1fff_tmp56, tmp6);
                  byte_98 = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_89_adv, byte_98);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp67);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp62, basis_bits.bit_4);
                  r1000_1fff_tmp69 = simd_and(sequence_e1_89_adv, byte_range_9a_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_89_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp33);
                  byte_8a = simd_and(r1000_1fff_tmp55, r1000_1fff_tmp71);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(64), sequence_e1_8a_adv));
                  r1000_1fff_tmp72 = simd_and(sequence_e1_8a_adv, byte_range_80_88);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_and(sequence_e1_8a_adv, byte_range_8a_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(basis_bits.bit_3, tmp7);
                  r1000_1fff_tmp75 = simd_not(r1000_1fff_tmp74);
                  r1000_1fff_tmp76 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp75), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(byte_range_80_bf, r1000_1fff_tmp76);
                  r1000_1fff_tmp77 = simd_and(sequence_e1_8a_adv, byte_range_90_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(byte_range_80_bf, r1000_1fff_tmp7);
                  r1000_1fff_tmp79 = simd_andc(r1000_1fff_tmp78, basis_bits.bit_4);
                  byte_range_b2_b5 = simd_and(r1000_1fff_tmp79, r1000_1fff_tmp18);
                  r1000_1fff_tmp80 = simd_and(sequence_e1_8a_adv, byte_range_b2_b5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(r1000_1fff_tmp78, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r1000_1fff_tmp81, r1000_1fff_tmp64);
                  r1000_1fff_tmp82 = simd_and(sequence_e1_8a_adv, byte_range_b8_be);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp82);
                  r1000_1fff_tmp83 = simd_and(r1000_1fff_tmp56, tmp1);
                  byte_8b = simd_and(r1000_1fff_tmp55, r1000_1fff_tmp83);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(65), sequence_e1_8b_adv));
                  r1000_1fff_tmp84 = simd_and(sequence_e1_8b_adv, byte_80);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_andc(r1000_1fff_tmp55, basis_bits.bit_4);
                  byte_range_82_85 = simd_and(r1000_1fff_tmp85, r1000_1fff_tmp18);
                  r1000_1fff_tmp86 = simd_and(sequence_e1_8b_adv, byte_range_82_85);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp86);
                  r1000_1fff_tmp87 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp88 = simd_or(basis_bits.bit_4, r1000_1fff_tmp64);
                  r1000_1fff_tmp89 = simd_not(r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp89), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
                  byte_range_88_96 = simd_and(r1000_1fff_tmp87, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_and(sequence_e1_8b_adv, byte_range_88_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_or(basis_bits.bit_2, r800_ffff_tmp4);
                  byte_range_98_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp92);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_8b_adv, byte_range_98_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_andc(r1000_1fff_tmp9, tmp6);
                  byte_8c = simd_and(r1000_1fff_tmp55, r1000_1fff_tmp94);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp74);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(66), sequence_e1_8c_adv));
                  r1000_1fff_tmp95 = simd_and(sequence_e1_8c_adv, byte_range_80_90);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp95);
                  byte_range_92_95 = simd_and(r1000_1fff_tmp63, r1000_1fff_tmp18);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_8c_adv, byte_range_92_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp96);
                  r1000_1fff_tmp97 = simd_and(sequence_e1_8c_adv, byte_range_98_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp97);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp46);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(67), sequence_e1_8d_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_8d_adv, byte_range_80_9a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp98);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp55;
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(68), sequence_e1_8e_adv));
                  r1000_1fff_tmp99 = simd_and(sequence_e1_8e_adv, byte_range_80_8f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_8e_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp100);
                  byte_8f = simd_and(byte_range_80_8f, r1000_1fff_tmp10);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp101 = simd_and(basis_bits.bit_3, r1000_1fff_tmp31);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_2, r1000_1fff_tmp101);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp102);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(69), sequence_e1_8f_adv));
                  r1000_1fff_tmp103 = simd_and(sequence_e1_8f_adv, byte_range_80_b4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp103);
                  byte_90 = simd_andc(r1000_1fff_tmp62, tmp7);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp104 = simd_or(basis_bits.bit_3, tmp7);
                  r1000_1fff_tmp105 = simd_or(basis_bits.bit_2, r1000_1fff_tmp104);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp105);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(70), sequence_e1_90_adv));
                  r1000_1fff_tmp106 = simd_and(sequence_e1_90_adv, byte_range_81_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp106);
                  r1000_1fff_tmp107 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp51);
                  byte_range_91_98 = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp107);
                  byte_e1_byte_range_91_98 = simd_and(byte_e1_adv, byte_range_91_98);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_91_98, carryQ.get_carry_in(71), r1000_1fff_tmp108));
                  byte_e1_byte_range_91_98_sfx = simd_and(r1000_1fff_tmp108, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e1_byte_range_91_98_sfx);
                  byte_99 = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp57);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp109 = simd_and(r1000_1fff_tmp9, tmp6);
                  r1000_1fff_tmp110 = simd_or(basis_bits.bit_3, r1000_1fff_tmp109);
                  r1000_1fff_tmp111 = simd_and(basis_bits.bit_2, r1000_1fff_tmp110);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp111);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(72), sequence_e1_99_adv));
                  r1000_1fff_tmp112 = simd_and(sequence_e1_99_adv, byte_range_80_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp112);
                  r1000_1fff_tmp113 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp114 = simd_or(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_af_bf = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp114);
                  r1000_1fff_tmp115 = simd_and(sequence_e1_99_adv, byte_range_af_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp115);
                  byte_9a = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp71);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp87, tmp8);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(73), sequence_e1_9a_adv));
                  r1000_1fff_tmp116 = simd_and(sequence_e1_9a_adv, byte_range_81_9a);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp116);
                  r1000_1fff_tmp117 = simd_and(sequence_e1_9a_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp117);
                  byte_9b = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp83);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(74), sequence_e1_9b_adv));
                  r1000_1fff_tmp118 = simd_and(sequence_e1_9b_adv, byte_range_80_aa);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp118);
                  byte_range_b1_b8 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp107);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_9b_adv, byte_range_b1_b8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp119);
                  byte_9c = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp94);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp120 = simd_and(basis_bits.bit_4, r1000_1fff_tmp30);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp120);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(75), sequence_e1_9c_adv));
                  r1000_1fff_tmp121 = simd_and(sequence_e1_9c_adv, byte_range_80_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp121);
                  r1000_1fff_tmp122 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp123 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp122), simd_andc(r1000_1fff_tmp27, basis_bits.bit_3));
                  byte_range_8e_91 = simd_and(r1000_1fff_tmp87, r1000_1fff_tmp123);
                  r1000_1fff_tmp124 = simd_and(sequence_e1_9c_adv, byte_range_8e_91);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  byte_range_a0_b1 = simd_andc(r1000_1fff_tmp113, r1000_1fff_tmp125);
                  r1000_1fff_tmp126 = simd_and(sequence_e1_9c_adv, byte_range_a0_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp126);
                  byte_9d = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp44);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  byte_range_80_91 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp125);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(76), sequence_e1_9d_adv));
                  r1000_1fff_tmp127 = simd_and(sequence_e1_9d_adv, byte_range_80_91);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp127);
                  r1000_1fff_tmp128 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_range_a0_ac = simd_andc(r1000_1fff_tmp128, r1000_1fff_tmp120);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_9d_adv, byte_range_a0_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp129);
                  r1000_1fff_tmp130 = simd_and(sequence_e1_9d_adv, byte_range_ae_b0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp130);
                  byte_9e = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp36);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp131 = simd_and(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp132 = simd_and(basis_bits.bit_2, r1000_1fff_tmp131);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp132);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(77), sequence_e1_9e_adv));
                  r1000_1fff_tmp133 = simd_and(sequence_e1_9e_adv, byte_range_80_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp133);
                  byte_9f = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp10);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  byte_97 = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp42);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(78), sequence_e1_9f_adv));
                  r1000_1fff_tmp134 = simd_and(sequence_e1_9f_adv, byte_97);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp134);
                  r1000_1fff_tmp135 = simd_and(sequence_e1_9f_adv, byte_9c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp135);
                  byte_a0 = simd_andc(r1000_1fff_tmp128, tmp7);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(79), sequence_e1_a0_adv));
                  r1000_1fff_tmp136 = simd_and(sequence_e1_a0_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp136);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(80), sequence_e1_a1_adv));
                  r1000_1fff_tmp137 = simd_and(sequence_e1_a1_adv, byte_range_80_b7);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp137);
                  byte_a2 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp34);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp138 = simd_or(basis_bits.bit_3, r1000_1fff_tmp58);
                  r1000_1fff_tmp139 = simd_and(basis_bits.bit_2, r1000_1fff_tmp138);
                  byte_range_80_a8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp139);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(81), sequence_e1_a2_adv));
                  r1000_1fff_tmp140 = simd_and(sequence_e1_a2_adv, byte_range_80_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp140);
                  byte_aa = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp71);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_a2_adv, byte_aa);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp141);
                  byte_range_b0_bf = r1000_1fff_tmp78;
                  r1000_1fff_tmp142 = simd_and(sequence_e1_a2_adv, byte_range_b0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp142);
                  byte_a3 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp39);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp143 = simd_or(basis_bits.bit_4, r1000_1fff_tmp15);
                  r1000_1fff_tmp144 = simd_and(basis_bits.bit_3, r1000_1fff_tmp143);
                  r1000_1fff_tmp145 = simd_and(basis_bits.bit_2, r1000_1fff_tmp144);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp145);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(82), sequence_e1_a3_adv));
                  r1000_1fff_tmp146 = simd_and(sequence_e1_a3_adv, byte_range_80_b5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp146);
                  byte_a4 = simd_and(r1000_1fff_tmp128, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp147 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp147);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(83), sequence_e1_a4_adv));
                  r1000_1fff_tmp148 = simd_and(sequence_e1_a4_adv, byte_range_80_9e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp148);
                  r1000_1fff_tmp149 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp149);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp150 = simd_or(basis_bits.bit_3, r1000_1fff_tmp27);
                  r1000_1fff_tmp151 = simd_not(r1000_1fff_tmp150);
                  r1000_1fff_tmp152 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp151), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp152);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(84), sequence_e1_a5_adv));
                  r1000_1fff_tmp153 = simd_and(sequence_e1_a5_adv, byte_range_90_ad);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp153);
                  r1000_1fff_tmp154 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  byte_range_b0_b4 = simd_andc(r1000_1fff_tmp154, r1000_1fff_tmp30);
                  r1000_1fff_tmp155 = simd_and(sequence_e1_a5_adv, byte_range_b0_b4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp155);
                  r1000_1fff_tmp156 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp33);
                  byte_a6 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp156);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp157 = simd_or(basis_bits.bit_3, r1000_1fff_tmp9);
                  r1000_1fff_tmp158 = simd_and(basis_bits.bit_2, r1000_1fff_tmp157);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp158);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(85), sequence_e1_a6_adv));
                  r1000_1fff_tmp159 = simd_and(sequence_e1_a6_adv, byte_range_80_ab);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp159);
                  byte_a7 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp42);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp160 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_81_87 = simd_and(r1000_1fff_tmp160, r1000_1fff_tmp51);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(86), sequence_e1_a7_adv));
                  r1000_1fff_tmp161 = simd_and(sequence_e1_a7_adv, byte_range_81_87);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp161);
                  byte_a8 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp66);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp162 = simd_and(basis_bits.bit_3, r1000_1fff_tmp88);
                  byte_range_80_96 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp162);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(87), sequence_e1_a8_adv));
                  r1000_1fff_tmp163 = simd_and(sequence_e1_a8_adv, byte_range_80_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp163);
                  r1000_1fff_tmp164 = simd_and(sequence_e1_a8_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp164);
                  byte_a9 = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp57);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_94 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp101);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(88), sequence_e1_a9_adv));
                  r1000_1fff_tmp165 = simd_and(sequence_e1_a9_adv, byte_range_80_94);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp165);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(89), sequence_e1_aa_adv));
                  r1000_1fff_tmp166 = simd_and(sequence_e1_aa_adv, byte_a7);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp166);
                  byte_ac = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp94);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp167 = simd_not(r1000_1fff_tmp131);
                  r1000_1fff_tmp168 = simd_or(basis_bits.bit_3, r1000_1fff_tmp31);
                  r1000_1fff_tmp169 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp167), simd_andc(r1000_1fff_tmp168, basis_bits.bit_2));
                  byte_range_85_b3 = simd_and(byte_range_80_bf, r1000_1fff_tmp169);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(90), sequence_e1_ac_adv));
                  r1000_1fff_tmp170 = simd_and(sequence_e1_ac_adv, byte_range_85_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp170);
                  byte_ad = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp44);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp171 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp172 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp171), simd_andc(r1000_1fff_tmp30, basis_bits.bit_4));
                  byte_range_85_8b = simd_and(byte_range_80_8f, r1000_1fff_tmp172);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(91), sequence_e1_ad_adv));
                  r1000_1fff_tmp173 = simd_and(sequence_e1_ad_adv, byte_range_85_8b);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp173);
                  byte_ae = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp36);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp174 = simd_not(r1000_1fff_tmp104);
                  r1000_1fff_tmp175 = simd_or(tmp5, tmp1);
                  r1000_1fff_tmp176 = simd_or(basis_bits.bit_3, r1000_1fff_tmp175);
                  r1000_1fff_tmp177 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp174), simd_andc(r1000_1fff_tmp176, basis_bits.bit_2));
                  byte_range_83_a0 = simd_and(byte_range_80_bf, r1000_1fff_tmp177);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(92), sequence_e1_ae_adv));
                  r1000_1fff_tmp178 = simd_and(sequence_e1_ae_adv, byte_range_83_a0);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp178);
                  byte_range_ae_af = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp27);
                  r1000_1fff_tmp179 = simd_and(sequence_e1_ae_adv, byte_range_ae_af);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp179);
                  r1000_1fff_tmp180 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                  r1000_1fff_tmp181 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bf = simd_and(r1000_1fff_tmp180, r1000_1fff_tmp181);
                  r1000_1fff_tmp182 = simd_and(sequence_e1_ae_adv, byte_range_ba_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp182);
                  byte_af = simd_and(r1000_1fff_tmp128, r1000_1fff_tmp10);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp183 = simd_or(basis_bits.bit_3, r1000_1fff_tmp143);
                  r1000_1fff_tmp184 = simd_and(basis_bits.bit_2, r1000_1fff_tmp183);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp184);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(93), sequence_e1_af_adv));
                  r1000_1fff_tmp185 = simd_and(sequence_e1_af_adv, byte_range_80_a5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp185);
                  byte_b0 = simd_andc(byte_range_b0_bf, tmp7);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp186 = simd_or(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp187 = simd_and(basis_bits.bit_2, r1000_1fff_tmp186);
                  byte_range_80_a3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp187);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(94), sequence_e1_b0_adv));
                  r1000_1fff_tmp188 = simd_and(sequence_e1_b0_adv, byte_range_80_a3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp188);
                  byte_b1 = simd_and(byte_range_b0_bf, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp189 = simd_and(byte_range_80_8f, r1000_1fff_tmp9);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp189, tmp6);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(95), sequence_e1_b1_adv));
                  r1000_1fff_tmp190 = simd_and(sequence_e1_b1_adv, byte_range_8d_8f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp190);
                  r1000_1fff_tmp191 = simd_and(basis_bits.bit_3, r1000_1fff_tmp27);
                  r1000_1fff_tmp192 = simd_not(r1000_1fff_tmp191);
                  r1000_1fff_tmp193 = simd_and(basis_bits.bit_4, r1000_1fff_tmp181);
                  r1000_1fff_tmp194 = simd_and(basis_bits.bit_3, r1000_1fff_tmp193);
                  r1000_1fff_tmp195 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp192), simd_andc(r1000_1fff_tmp194, basis_bits.bit_2));
                  byte_range_9a_bd = simd_and(byte_range_80_bf, r1000_1fff_tmp195);
                  r1000_1fff_tmp196 = simd_and(sequence_e1_b1_adv, byte_range_9a_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp196);
                  byte_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp39);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp197 = simd_and(r1000_1fff_tmp128, basis_bits.bit_4);
                  r1000_1fff_tmp198 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp197, r1000_1fff_tmp198);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(96), sequence_e1_b3_adv));
                  r1000_1fff_tmp199 = simd_and(sequence_e1_b3_adv, byte_range_a9_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp199);
                  byte_range_ae_b1 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp123);
                  r1000_1fff_tmp200 = simd_and(sequence_e1_b3_adv, byte_range_ae_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp200);
                  r1000_1fff_tmp201 = simd_and(byte_range_b0_bf, r800_ffff_tmp1);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp201, r1000_1fff_tmp23);
                  r1000_1fff_tmp202 = simd_and(sequence_e1_b3_adv, byte_range_b5_b6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp202);
                  byte_range_b4_b6 = simd_andc(r1000_1fff_tmp201, tmp1);
                  byte_e1_byte_range_b4_b6 = simd_and(byte_e1_adv, byte_range_b4_b6);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b4_b6, carryQ.get_carry_in(97), r1000_1fff_tmp203));
                  byte_e1_byte_range_b4_b6_sfx = simd_and(r1000_1fff_tmp203, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e1_byte_range_b4_b6_sfx);
                  byte_range_b8_bb = simd_and(byte_range_b0_bf, r1000_1fff_tmp56);
                  byte_e1_byte_range_b8_bb = simd_and(byte_e1_adv, byte_range_b8_bb);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b8_bb, carryQ.get_carry_in(98), r1000_1fff_tmp204));
                  byte_e1_byte_range_b8_bb_sfx = simd_and(r1000_1fff_tmp204, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e1_byte_range_b8_bb_sfx);
                  byte_bc = simd_and(byte_range_b0_bf, r1000_1fff_tmp94);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp144);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(99), sequence_e1_bc_adv));
                  r1000_1fff_tmp205 = simd_and(sequence_e1_bc_adv, byte_range_80_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp205);
                  byte_range_98_9d = simd_andc(r1000_1fff_tmp68, r1000_1fff_tmp15);
                  r1000_1fff_tmp206 = simd_and(sequence_e1_bc_adv, byte_range_98_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp206);
                  r1000_1fff_tmp207 = simd_and(sequence_e1_bc_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp207);
                  byte_bd = simd_and(byte_range_b0_bf, r1000_1fff_tmp44);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(100), sequence_e1_bd_adv));
                  r1000_1fff_tmp208 = simd_and(sequence_e1_bd_adv, byte_range_80_85);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp208);
                  r1000_1fff_tmp209 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_88_8d = simd_andc(r1000_1fff_tmp209, r1000_1fff_tmp15);
                  r1000_1fff_tmp210 = simd_and(sequence_e1_bd_adv, byte_range_88_8d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp210);
                  byte_range_90_97 = r1000_1fff_tmp63;
                  r1000_1fff_tmp211 = simd_and(sequence_e1_bd_adv, byte_range_90_97);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp211);
                  r1000_1fff_tmp212 = simd_and(sequence_e1_bd_adv, byte_99);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp212);
                  r1000_1fff_tmp213 = simd_and(sequence_e1_bd_adv, byte_9b);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp213);
                  r1000_1fff_tmp214 = simd_and(sequence_e1_bd_adv, byte_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp214);
                  r1000_1fff_tmp215 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp192), simd_andc(r1000_1fff_tmp147, basis_bits.bit_2));
                  byte_range_9f_bd = simd_and(byte_range_80_bf, r1000_1fff_tmp215);
                  r1000_1fff_tmp216 = simd_and(sequence_e1_bd_adv, byte_range_9f_bd);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp216);
                  byte_be = simd_and(byte_range_b0_bf, r1000_1fff_tmp36);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(101), sequence_e1_be_adv));
                  r1000_1fff_tmp217 = simd_and(sequence_e1_be_adv, byte_range_80_b4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp217);
                  r1000_1fff_tmp218 = simd_not(r1000_1fff_tmp30);
                  r1000_1fff_tmp219 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp218), simd_andc(r1000_1fff_tmp15, basis_bits.bit_4));
                  byte_range_b6_bc = simd_and(byte_range_b0_bf, r1000_1fff_tmp219);
                  r1000_1fff_tmp220 = simd_and(sequence_e1_be_adv, byte_range_b6_bc);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp220);
                  r1000_1fff_tmp221 = simd_and(sequence_e1_be_adv, byte_be);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp221);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp222 = simd_not(tmp6);
                  r1000_1fff_tmp223 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp222), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp160, r1000_1fff_tmp223);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(102), sequence_e1_bf_adv));
                  r1000_1fff_tmp224 = simd_and(sequence_e1_bf_adv, byte_range_82_84);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp224);
                  byte_range_86_8c = simd_and(byte_range_80_8f, r1000_1fff_tmp219);
                  r1000_1fff_tmp225 = simd_and(sequence_e1_bf_adv, byte_range_86_8c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp225);
                  byte_range_90_93 = simd_andc(r1000_1fff_tmp62, tmp5);
                  r1000_1fff_tmp226 = simd_and(sequence_e1_bf_adv, byte_range_90_93);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp226);
                  r1000_1fff_tmp227 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp171), simd_andc(r1000_1fff_tmp15, basis_bits.bit_4));
                  byte_range_96_9b = simd_and(r1000_1fff_tmp62, r1000_1fff_tmp227);
                  r1000_1fff_tmp228 = simd_and(sequence_e1_bf_adv, byte_range_96_9b);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp228);
                  r1000_1fff_tmp229 = simd_and(sequence_e1_bf_adv, byte_range_a0_ac);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp229);
                  byte_range_b2_b4 = simd_and(r1000_1fff_tmp154, r1000_1fff_tmp223);
                  r1000_1fff_tmp230 = simd_and(sequence_e1_bf_adv, byte_range_b2_b4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp230);
                  r1000_1fff_tmp231 = simd_and(sequence_e1_bf_adv, byte_range_b6_bc);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r1000_1fff_tmp231);
                }
                else {
                  carryQ.CarryDequeueEnqueue(57, 46);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(26, 77);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(103, 27))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(103, 15))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(103), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(104), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_b1);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, tmp1);
                  byte_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, byte_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(105), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(106), sequence_e2_84_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_84_adv, byte_82);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_84_adv, byte_87);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp21 = simd_not(tmp5);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_4, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp21), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  byte_range_8a_93 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_84_adv, byte_range_8a_93);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  byte_95 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_84_adv, byte_95);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp29 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp30 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp29), simd_andc(tmp6, basis_bits.bit_5));
                  byte_range_99_9d = simd_and(r2000_2fff_tmp28, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_84_adv, byte_range_99_9d);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r2000_2fff_tmp32, r800_ffff_tmp2);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_84_adv, byte_a4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp34);
                  r2000_2fff_tmp35 = simd_and(sequence_e2_84_adv, byte_a6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp37 = simd_andc(r2000_2fff_tmp36, tmp6);
                  byte_a8 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_84_adv, byte_a8);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(r2000_2fff_tmp32, basis_bits.bit_4);
                  r2000_2fff_tmp40 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_ad = simd_and(r2000_2fff_tmp39, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_84_adv, byte_range_aa_ad);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp43 = simd_not(r2000_2fff_tmp23);
                  r2000_2fff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp43), simd_andc(r2000_2fff_tmp10, basis_bits.bit_3));
                  byte_range_af_b9 = simd_and(r2000_2fff_tmp42, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(sequence_e2_84_adv, byte_range_af_b9);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp45);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  r2000_2fff_tmp46 = simd_and(sequence_e2_84_adv, byte_range_bc_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp46);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp47 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp48 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp47), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  byte_range_85_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp48);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(107), sequence_e2_85_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_85_adv, byte_range_85_89);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_and(r2000_2fff_tmp9, r2000_4dff_tmp1);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_and(sequence_e2_85_adv, byte_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp51);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp34);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp52 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp53 = simd_not(tmp6);
                  r2000_2fff_tmp54 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp53), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_83_84 = simd_and(r2000_2fff_tmp52, r2000_2fff_tmp54);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(108), sequence_e2_86_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_86_adv, byte_range_83_84);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp55);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp56 = simd_or(basis_bits.bit_3, r2000_2fff_tmp10);
                  r2000_2fff_tmp57 = simd_and(basis_bits.bit_2, r2000_2fff_tmp56);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp57);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(109), sequence_e2_b0_adv));
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp58);
                  byte_range_b0_bf = r2000_2fff_tmp7;
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp59);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_3, r2000_2fff_tmp10);
                  byte_range_80_9e = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp60);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(110), sequence_e2_b1_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_b1_adv, byte_range_80_9e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp61);
                  byte_range_a0_bf = r2000_2fff_tmp42;
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b1_adv, byte_range_a0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp62);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(111), sequence_e2_b2_adv));
                  r2000_2fff_tmp63 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp63);
                  r2000_2fff_tmp64 = simd_and(byte_range_80_bf, r2000_2fff_tmp6);
                  r2000_2fff_tmp65 = simd_andc(tmp1, tmp5);
                  byte_b3 = simd_and(r2000_2fff_tmp64, r2000_2fff_tmp65);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp66 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp67 = simd_or(basis_bits.bit_3, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_and(basis_bits.bit_2, r2000_2fff_tmp67);
                  byte_range_80_a4 = simd_andc(byte_range_80_bf, r2000_2fff_tmp68);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(112), sequence_e2_b3_adv));
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b3_adv, byte_range_80_a4);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp71 = simd_and(r2000_2fff_tmp70, basis_bits.bit_4);
                  r2000_2fff_tmp72 = simd_xor(basis_bits.bit_5, tmp1);
                  byte_range_ab_ae = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp72);
                  r2000_2fff_tmp73 = simd_and(sequence_e2_b3_adv, byte_range_ab_ae);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp73);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp64, r800_4dff_tmp2);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_b3_adv, byte_range_b2_b3);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp74);
                  byte_b4 = simd_and(r2000_2fff_tmp64, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp76 = simd_or(basis_bits.bit_4, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_or(basis_bits.bit_3, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_and(basis_bits.bit_2, r2000_2fff_tmp77);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r2000_2fff_tmp78);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(113), sequence_e2_b4_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b4_adv, byte_range_80_a5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp79);
                  byte_a7 = simd_and(r2000_2fff_tmp70, r2000_2fff_tmp18);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b4_adv, byte_a7);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp80);
                  r2000_2fff_tmp81 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp3);
                  byte_ad = simd_and(r2000_2fff_tmp70, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b4_adv, byte_ad);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp82);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp83);
                  byte_b5 = simd_and(r2000_2fff_tmp64, r2000_2fff_tmp26);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp84 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_2, r2000_2fff_tmp84);
                  byte_range_80_a7 = simd_andc(byte_range_80_bf, r2000_2fff_tmp85);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(114), sequence_e2_b5_adv));
                  r2000_2fff_tmp86 = simd_and(sequence_e2_b5_adv, byte_range_80_a7);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp86);
                  byte_af = simd_and(r2000_2fff_tmp70, r2000_2fff_tmp10);
                  r2000_2fff_tmp87 = simd_and(sequence_e2_b5_adv, byte_af);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp87);
                  byte_b6 = simd_and(r2000_2fff_tmp64, r2000_2fff_tmp34);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp88 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp89 = simd_and(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp90 = simd_or(basis_bits.bit_4, r2000_2fff_tmp89);
                  r2000_2fff_tmp91 = simd_and(basis_bits.bit_3, r2000_2fff_tmp90);
                  byte_range_80_96 = simd_andc(r2000_2fff_tmp88, r2000_2fff_tmp91);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(115), sequence_e2_b6_adv));
                  r2000_2fff_tmp92 = simd_and(sequence_e2_b6_adv, byte_range_80_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp92);
                  r2000_2fff_tmp93 = simd_andc(r2000_2fff_tmp70, basis_bits.bit_4);
                  byte_range_a0_a6 = simd_andc(r2000_2fff_tmp93, r2000_2fff_tmp89);
                  r2000_2fff_tmp94 = simd_and(sequence_e2_b6_adv, byte_range_a0_a6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp94);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp71, r2000_2fff_tmp89);
                  r2000_2fff_tmp95 = simd_and(sequence_e2_b6_adv, byte_range_a8_ae);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp95);
                  r2000_2fff_tmp96 = simd_andc(r2000_2fff_tmp64, basis_bits.bit_4);
                  byte_range_b0_b6 = simd_andc(r2000_2fff_tmp96, r2000_2fff_tmp89);
                  r2000_2fff_tmp97 = simd_and(sequence_e2_b6_adv, byte_range_b0_b6);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp97);
                  r2000_2fff_tmp98 = simd_and(r2000_2fff_tmp64, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r2000_2fff_tmp98, r2000_2fff_tmp89);
                  r2000_2fff_tmp99 = simd_and(sequence_e2_b6_adv, byte_range_b8_be);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp99);
                  byte_b7 = simd_and(r2000_2fff_tmp64, r2000_2fff_tmp18);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp100 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp101 = simd_andc(r2000_2fff_tmp100, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r2000_2fff_tmp101, r2000_2fff_tmp89);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(116), sequence_e2_b7_adv));
                  r2000_2fff_tmp102 = simd_and(sequence_e2_b7_adv, byte_range_80_86);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp102);
                  r2000_2fff_tmp103 = simd_and(r2000_2fff_tmp100, basis_bits.bit_4);
                  byte_range_88_8e = simd_andc(r2000_2fff_tmp103, r2000_2fff_tmp89);
                  r2000_2fff_tmp104 = simd_and(sequence_e2_b7_adv, byte_range_88_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp104);
                  r2000_2fff_tmp105 = simd_and(byte_range_80_bf, r2000_2fff_tmp12);
                  r2000_2fff_tmp106 = simd_andc(r2000_2fff_tmp105, basis_bits.bit_4);
                  byte_range_90_96 = simd_andc(r2000_2fff_tmp106, r2000_2fff_tmp89);
                  r2000_2fff_tmp107 = simd_and(sequence_e2_b7_adv, byte_range_90_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp107);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp105, basis_bits.bit_4);
                  byte_range_98_9e = simd_andc(r2000_2fff_tmp108, r2000_2fff_tmp89);
                  r2000_2fff_tmp109 = simd_and(sequence_e2_b7_adv, byte_range_98_9e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp109);
                  byte_b8 = simd_and(r2000_2fff_tmp64, r2000_2fff_tmp37);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(117), sequence_e2_b8_adv));
                  r2000_2fff_tmp110 = simd_and(sequence_e2_b8_adv, byte_af);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r2000_2fff_tmp110);
                }
                else {
                  carryQ.CarryDequeueEnqueue(103, 15);
                }
                r2000_4dff_tmp3 = simd_andc(tmp1, tmp5);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(118, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp7);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(118), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_85_86 = simd_and(r3000_4dff_tmp4, r3000_4dff_tmp5);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(119), sequence_e3_80_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_80_adv, byte_range_85_86);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp8 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_andc(r3000_4dff_tmp8, basis_bits.bit_4);
                  r3000_4dff_tmp10 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp10), simd_andc(tmp6, basis_bits.bit_5));
                  byte_range_b1_b5 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, byte_range_b1_b5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(r3000_4dff_tmp8, basis_bits.bit_4);
                  r3000_4dff_tmp14 = simd_not(tmp6);
                  r3000_4dff_tmp15 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp14), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(sequence_e3_80_adv, byte_range_bb_bc);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp18 = simd_andc(r3000_4dff_tmp17, tmp5);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp18);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp19 = simd_or(basis_bits.bit_3, tmp7);
                  r3000_4dff_tmp20 = simd_or(basis_bits.bit_2, r3000_4dff_tmp19);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp20);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(120), sequence_e3_81_adv));
                  r3000_4dff_tmp21 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp21);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp22 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp23 = simd_and(basis_bits.bit_5, tmp1);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_4, r3000_4dff_tmp23);
                  r3000_4dff_tmp25 = simd_and(basis_bits.bit_3, r3000_4dff_tmp24);
                  byte_range_80_96 = simd_andc(r3000_4dff_tmp22, r3000_4dff_tmp25);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(121), sequence_e3_82_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_82_adv, byte_range_80_96);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp28 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp27);
                  r3000_4dff_tmp29 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp30 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp29);
                  byte_range_9d_9f = simd_and(r3000_4dff_tmp30, tmp6);
                  r3000_4dff_tmp31 = simd_and(sequence_e3_82_adv, byte_range_9d_9f);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp31);
                  r3000_4dff_tmp32 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  byte_range_a1_bf = simd_and(r3000_4dff_tmp32, r3000_4dff_tmp19);
                  r3000_4dff_tmp33 = simd_and(sequence_e3_82_adv, byte_range_a1_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp33);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp34 = simd_and(basis_bits.bit_3, tmp3);
                  r3000_4dff_tmp35 = simd_and(basis_bits.bit_2, r3000_4dff_tmp34);
                  byte_range_80_ba = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp35);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(122), sequence_e3_83_adv));
                  r3000_4dff_tmp36 = simd_and(sequence_e3_83_adv, byte_range_80_ba);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp36);
                  byte_range_bc_bf = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp29);
                  r3000_4dff_tmp37 = simd_and(sequence_e3_83_adv, byte_range_bc_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp37);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp29, basis_bits.bit_6);
                  r3000_4dff_tmp39 = simd_or(basis_bits.bit_3, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_not(r3000_4dff_tmp39);
                  r3000_4dff_tmp41 = simd_and(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp42 = simd_or(basis_bits.bit_4, r3000_4dff_tmp41);
                  r3000_4dff_tmp43 = simd_or(basis_bits.bit_3, r3000_4dff_tmp42);
                  r3000_4dff_tmp44 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp40), simd_andc(r3000_4dff_tmp43, basis_bits.bit_2));
                  byte_range_85_ad = simd_and(r800_ffff_tmp3, r3000_4dff_tmp44);
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(123), sequence_e3_84_adv));
                  r3000_4dff_tmp45 = simd_and(sequence_e3_84_adv, byte_range_85_ad);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp45);
                  r3000_4dff_tmp46 = simd_or(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp47 = simd_or(basis_bits.bit_4, r3000_4dff_tmp46);
                  byte_range_b1_bf = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp47);
                  r3000_4dff_tmp48 = simd_and(sequence_e3_84_adv, byte_range_b1_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp48);
                  r3000_4dff_tmp49 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp17);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp49);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(124), sequence_e3_85_adv));
                  r3000_4dff_tmp50 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp50);
                  r3000_4dff_tmp51 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp52 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp51, r3000_4dff_tmp52);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp53 = simd_and(basis_bits.bit_4, r3000_4dff_tmp23);
                  byte_range_80_8e = simd_andc(r3000_4dff_tmp51, r3000_4dff_tmp53);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(125), sequence_e3_86_adv));
                  r3000_4dff_tmp54 = simd_and(sequence_e3_86_adv, byte_range_80_8e);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp54);
                  r3000_4dff_tmp55 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_a0_ba = simd_andc(r3000_4dff_tmp55, r3000_4dff_tmp34);
                  r3000_4dff_tmp56 = simd_and(sequence_e3_86_adv, byte_range_a0_ba);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp56);
                  r3000_4dff_tmp57 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp51, r3000_4dff_tmp57);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp7);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(126), sequence_e3_87_adv));
                  r3000_4dff_tmp58 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp58);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(127), r3000_4dff_tmp59));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp59, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp61 = simd_or(basis_bits.bit_4, r3000_4dff_tmp60);
                  r3000_4dff_tmp62 = simd_and(basis_bits.bit_3, r3000_4dff_tmp61);
                  r3000_4dff_tmp63 = simd_and(basis_bits.bit_2, r3000_4dff_tmp62);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp63);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(128), r3000_4dff_tmp64));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp64, byte_range_80_bf);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp52);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp6, byte_b6);
                  byte_e4_adv = r800_ffff_tmp6;
                  carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(129), sequence_e4_b6_adv));
                  r3000_4dff_tmp65 = simd_and(sequence_e4_b6_adv, byte_range_80_b5);
                  struct_gc_L.cc = simd_or(struct_gc_L.cc, r3000_4dff_tmp65);
                }
                else {
                  carryQ.CarryDequeueEnqueue(118, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(103, 27);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(26, 104);
            }
            r800_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp3, r800_ffff_tmp9);
            byte_range_b8_bf = simd_and(r800_ffff_tmp10, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
            r800_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp13), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp15);
            r800_ffff_tmp16 = simd_or(r800_ffff_tmp11, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp16) || carryQ.CarryTest(130, 6))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp11;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(130), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp6);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(131), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(132), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp11 = simd_and(r4e00_9fff_tmp10, tmp1);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_3, r4e00_9fff_tmp11);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_2, r4e00_9fff_tmp12);
              byte_range_80_be = simd_andc(byte_range_80_bf, r4e00_9fff_tmp13);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(133), r4e00_9fff_tmp14));
              byte_e9_byte_range_80_be = simd_and(r4e00_9fff_tmp14, byte_range_80_be);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_e9_byte_range_80_be, carryQ.get_carry_in(134), r4e00_9fff_tmp15));
              byte_e9_byte_range_80_be_sfx = simd_and(r4e00_9fff_tmp15, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_e9_byte_range_80_be_sfx);
              r4e00_9fff_tmp16 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
              byte_bf = simd_and(r4e00_9fff_tmp16, r4e00_9fff_tmp11);
              sequence_e9_bf = simd_and(r4e00_9fff_tmp14, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp14;
              r4e00_9fff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp18 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp17);
              r4e00_9fff_tmp19 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp18, r4e00_9fff_tmp19);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(135), sequence_e9_bf_adv));
              r4e00_9fff_tmp20 = simd_and(sequence_e9_bf_adv, byte_range_80_8c);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, r4e00_9fff_tmp20);
            }
            else {
              carryQ.CarryDequeueEnqueue(130, 6);
            }
            r800_ffff_tmp17 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp17, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(136, 56))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(136), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(137), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp2, tmp5);
              byte_92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              sequence_ea_92 = simd_and(ra000_ffff_tmp7, byte_92);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(byte_range_80_bf, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(138), sequence_ea_92_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_92_adv, byte_range_80_8c);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(tmp1, tmp5);
              byte_93 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp16);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp17, basis_bits.bit_6);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(139), sequence_ea_93_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_93_adv, byte_range_90_bd);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp22);
              byte_range_94_97 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_ea_byte_range_94_97 = simd_and(byte_ea_adv, byte_range_94_97);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_94_97, carryQ.get_carry_in(140), ra000_ffff_tmp23));
              byte_ea_byte_range_94_97_sfx = simd_and(ra000_ffff_tmp23, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ea_byte_range_94_97_sfx);
              ra000_ffff_tmp24 = simd_andc(ra000_ffff_tmp1, tmp6);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp24);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(141), sequence_ea_98_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_98_adv, byte_range_80_8c);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp25);
              byte_range_90_9f = ra000_ffff_tmp10;
              ra000_ffff_tmp26 = simd_and(sequence_ea_98_adv, byte_range_90_9f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_aa_ab = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(sequence_ea_98_adv, byte_range_aa_ab);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp30);
              byte_99 = simd_and(byte_range_90_9f, ra000_ffff_tmp31);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp32 = simd_and(ra000_ffff_tmp17, tmp1);
              ra000_ffff_tmp33 = simd_or(basis_bits.bit_3, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_2, ra000_ffff_tmp33);
              byte_range_80_ae = simd_andc(byte_range_80_bf, ra000_ffff_tmp34);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(142), sequence_ea_99_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_99_adv, byte_range_80_ae);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
              byte_bf = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp32);
              ra000_ffff_tmp37 = simd_and(sequence_ea_99_adv, byte_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp37);
              byte_9a = simd_and(byte_range_90_9f, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp38 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp19);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(143), sequence_ea_9a_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_9a_adv, byte_range_80_9d);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp39);
              byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp40 = simd_and(sequence_ea_9a_adv, byte_range_a0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp40);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp1, tmp1);
              byte_9b = simd_and(byte_range_90_9f, ra000_ffff_tmp41);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp43 = simd_or(basis_bits.bit_4, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_or(basis_bits.bit_3, ra000_ffff_tmp43);
              ra000_ffff_tmp45 = simd_and(basis_bits.bit_2, ra000_ffff_tmp44);
              byte_range_80_a5 = simd_andc(byte_range_80_bf, ra000_ffff_tmp45);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(144), sequence_ea_9b_adv));
              ra000_ffff_tmp46 = simd_and(sequence_ea_9b_adv, byte_range_80_a5);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_andc(ra000_ffff_tmp17, tmp6);
              byte_9c = simd_and(byte_range_90_9f, ra000_ffff_tmp47);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp48 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp49 = simd_or(basis_bits.bit_4, ra000_ffff_tmp48);
              byte_range_97_9f = simd_and(byte_range_90_9f, ra000_ffff_tmp49);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(145), sequence_ea_9c_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ea_9c_adv, byte_range_97_9f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_or(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_a2_bf = simd_and(byte_range_a0_bf, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_and(sequence_ea_9c_adv, byte_range_a2_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp30);
              byte_9d = simd_and(byte_range_90_9f, ra000_ffff_tmp53);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(146), sequence_ea_9d_adv));
              ra000_ffff_tmp54 = simd_and(sequence_ea_9d_adv, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp54);
              ra000_ffff_tmp55 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp2);
              byte_9e = simd_and(byte_range_90_9f, ra000_ffff_tmp55);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp56 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp57 = simd_and(basis_bits.bit_4, ra000_ffff_tmp56);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp57);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(147), sequence_ea_9e_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_9e_adv, byte_range_80_88);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp13, basis_bits.bit_4);
              ra000_ffff_tmp60 = simd_xor(basis_bits.bit_5, tmp1);
              byte_range_8b_8e = simd_and(ra000_ffff_tmp59, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_and(sequence_ea_9e_adv, byte_range_8b_8e);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp63 = simd_not(ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp63), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_ad = simd_and(byte_range_80_bf, ra000_ffff_tmp64);
              ra000_ffff_tmp65 = simd_and(sequence_ea_9e_adv, byte_range_90_ad);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp65);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp36, ra000_ffff_tmp5);
              ra000_ffff_tmp66 = simd_and(sequence_ea_9e_adv, byte_range_b0_b1);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp66);
              byte_9f = simd_and(byte_range_90_9f, ra000_ffff_tmp32);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp49);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(148), sequence_ea_9f_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ea_9f_adv, byte_range_b7_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp67);
              byte_a0 = simd_andc(ra000_ffff_tmp27, tmp7);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp5);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(149), sequence_ea_a0_adv));
              ra000_ffff_tmp68 = simd_and(sequence_ea_a0_adv, byte_range_80_81);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp68);
              ra000_ffff_tmp69 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              ra000_ffff_tmp70 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp71 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp70), simd_andc(tmp1, basis_bits.bit_5));
              byte_range_83_85 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp71);
              ra000_ffff_tmp72 = simd_and(sequence_ea_a0_adv, byte_range_83_85);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp72);
              ra000_ffff_tmp73 = simd_not(tmp2);
              ra000_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp73), simd_andc(ra000_ffff_tmp48, basis_bits.bit_4));
              byte_range_87_8a = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp74);
              ra000_ffff_tmp75 = simd_and(sequence_ea_a0_adv, byte_range_87_8a);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp75);
              ra000_ffff_tmp76 = simd_or(tmp5, tmp1);
              ra000_ffff_tmp77 = simd_or(basis_bits.bit_3, ra000_ffff_tmp76);
              ra000_ffff_tmp78 = simd_not(ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_or(basis_bits.bit_3, ra000_ffff_tmp17);
              ra000_ffff_tmp80 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp78), simd_andc(ra000_ffff_tmp79, basis_bits.bit_2));
              byte_range_8c_a2 = simd_and(byte_range_80_bf, ra000_ffff_tmp80);
              ra000_ffff_tmp81 = simd_and(sequence_ea_a0_adv, byte_range_8c_a2);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_andc(ra000_ffff_tmp30, tmp5);
              byte_a1 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp82);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp83 = simd_and(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp84 = simd_and(basis_bits.bit_2, ra000_ffff_tmp83);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp84);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(150), sequence_ea_a1_adv));
              ra000_ffff_tmp85 = simd_and(sequence_ea_a1_adv, byte_range_80_b3);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp85);
              byte_a2 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp11);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp86 = simd_not(ra000_ffff_tmp83);
              ra000_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp86), simd_andc(ra000_ffff_tmp51, basis_bits.bit_2));
              byte_range_82_b3 = simd_and(byte_range_80_bf, ra000_ffff_tmp87);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(151), sequence_ea_a2_adv));
              ra000_ffff_tmp88 = simd_and(sequence_ea_a2_adv, byte_range_82_b3);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp88);
              byte_a3 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp16);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp89 = simd_andc(ra000_ffff_tmp36, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp89, r800_ffff_tmp12);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(152), sequence_ea_a3_adv));
              ra000_ffff_tmp90 = simd_and(sequence_ea_a3_adv, byte_range_b2_b7);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp90);
              byte_bb = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp41);
              ra000_ffff_tmp91 = simd_and(sequence_ea_a3_adv, byte_bb);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp91);
              byte_a4 = simd_and(ra000_ffff_tmp27, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp92 = simd_not(ra000_ffff_tmp44);
              ra000_ffff_tmp93 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              ra000_ffff_tmp94 = simd_or(basis_bits.bit_3, ra000_ffff_tmp93);
              ra000_ffff_tmp95 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp92), simd_andc(ra000_ffff_tmp94, basis_bits.bit_2));
              byte_range_8a_a5 = simd_and(byte_range_80_bf, ra000_ffff_tmp95);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(153), sequence_ea_a4_adv));
              ra000_ffff_tmp96 = simd_and(sequence_ea_a4_adv, byte_range_8a_a5);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp96);
              byte_range_b0_bf = ra000_ffff_tmp36;
              ra000_ffff_tmp97 = simd_and(sequence_ea_a4_adv, byte_range_b0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp97);
              ra000_ffff_tmp98 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp30);
              byte_a5 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp98);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp69, ra000_ffff_tmp48);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(154), sequence_ea_a5_adv));
              ra000_ffff_tmp99 = simd_and(sequence_ea_a5_adv, byte_range_80_86);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp99);
              ra000_ffff_tmp100 = simd_and(ra000_ffff_tmp17, tmp6);
              ra000_ffff_tmp101 = simd_and(basis_bits.bit_3, ra000_ffff_tmp100);
              byte_range_a0_bc = simd_andc(byte_range_a0_bf, ra000_ffff_tmp101);
              ra000_ffff_tmp102 = simd_and(sequence_ea_a5_adv, byte_range_a0_bc);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp102);
              ra000_ffff_tmp103 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp103);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp104 = simd_and(basis_bits.bit_3, ra000_ffff_tmp76);
              ra000_ffff_tmp105 = simd_not(ra000_ffff_tmp104);
              ra000_ffff_tmp106 = simd_or(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp107 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp105), simd_andc(ra000_ffff_tmp106, basis_bits.bit_2));
              byte_range_84_b2 = simd_and(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(155), sequence_ea_a6_adv));
              ra000_ffff_tmp108 = simd_and(sequence_ea_a6_adv, byte_range_84_b2);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp108);
              ra000_ffff_tmp109 = simd_and(r800_ffff_tmp1, tmp1);
              byte_a7 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp109);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8f = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp32);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(156), sequence_ea_a7_adv));
              ra000_ffff_tmp110 = simd_and(sequence_ea_a7_adv, byte_8f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp110);
              ra000_ffff_tmp111 = simd_andc(ra000_ffff_tmp27, basis_bits.bit_4);
              byte_range_a0_a4 = simd_andc(ra000_ffff_tmp111, r800_ffff_tmp14);
              ra000_ffff_tmp112 = simd_and(sequence_ea_a7_adv, byte_range_a0_a4);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp112);
              byte_range_a6_af = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp43);
              ra000_ffff_tmp113 = simd_and(sequence_ea_a7_adv, byte_range_a6_af);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp113);
              ra000_ffff_tmp114 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
              ra000_ffff_tmp115 = simd_not(tmp1);
              ra000_ffff_tmp116 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp115), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_ba_be = simd_and(ra000_ffff_tmp114, ra000_ffff_tmp116);
              ra000_ffff_tmp117 = simd_and(sequence_ea_a7_adv, byte_range_ba_be);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp117);
              byte_a8 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp24);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp118 = simd_or(basis_bits.bit_3, ra000_ffff_tmp57);
              ra000_ffff_tmp119 = simd_and(basis_bits.bit_2, ra000_ffff_tmp118);
              byte_range_80_a8 = simd_andc(byte_range_80_bf, ra000_ffff_tmp119);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(157), sequence_ea_a8_adv));
              ra000_ffff_tmp120 = simd_and(sequence_ea_a8_adv, byte_range_80_a8);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp120);
              byte_a9 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp31);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp121 = simd_andc(ra000_ffff_tmp13, tmp5);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp121, tmp1);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(158), sequence_ea_a9_adv));
              ra000_ffff_tmp122 = simd_and(sequence_ea_a9_adv, byte_range_80_82);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp122);
              ra000_ffff_tmp123 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_84_8b = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp123);
              ra000_ffff_tmp124 = simd_and(sequence_ea_a9_adv, byte_range_84_8b);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp124);
              ra000_ffff_tmp125 = simd_and(basis_bits.bit_3, ra000_ffff_tmp49);
              byte_range_a0_b6 = simd_andc(byte_range_a0_bf, ra000_ffff_tmp125);
              ra000_ffff_tmp126 = simd_and(sequence_ea_a9_adv, byte_range_a0_b6);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp126);
              byte_ba = simd_and(byte_range_b0_bf, ra000_ffff_tmp3);
              ra000_ffff_tmp127 = simd_and(sequence_ea_a9_adv, byte_ba);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp127);
              byte_range_be_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp18);
              ra000_ffff_tmp128 = simd_and(sequence_ea_a9_adv, byte_range_be_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp128);
              byte_aa = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              byte_range_80_af = simd_andc(byte_range_80_bf, r800_ffff_tmp9);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(159), sequence_ea_aa_adv));
              ra000_ffff_tmp129 = simd_and(sequence_ea_aa_adv, byte_range_80_af);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp129);
              byte_b1 = simd_and(byte_range_b0_bf, ra000_ffff_tmp82);
              ra000_ffff_tmp130 = simd_and(sequence_ea_aa_adv, byte_b1);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp130);
              ra000_ffff_tmp131 = simd_and(byte_range_b0_bf, r800_ffff_tmp1);
              ra000_ffff_tmp132 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b5_b6 = simd_and(ra000_ffff_tmp131, ra000_ffff_tmp132);
              ra000_ffff_tmp133 = simd_and(sequence_ea_aa_adv, byte_range_b5_b6);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp133);
              ra000_ffff_tmp134 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp70), simd_andc(tmp6, basis_bits.bit_5));
              byte_range_b9_bd = simd_and(ra000_ffff_tmp114, ra000_ffff_tmp134);
              ra000_ffff_tmp135 = simd_and(sequence_ea_aa_adv, byte_range_b9_bd);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp135);
              byte_ab = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp41);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_80 = simd_andc(ra000_ffff_tmp13, tmp7);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(160), sequence_ea_ab_adv));
              ra000_ffff_tmp136 = simd_and(sequence_ea_ab_adv, byte_80);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp136);
              byte_82 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp11);
              ra000_ffff_tmp137 = simd_and(sequence_ea_ab_adv, byte_82);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp137);
              ra000_ffff_tmp138 = simd_and(byte_range_90_9f, basis_bits.bit_4);
              byte_range_9b_9d = simd_and(ra000_ffff_tmp138, ra000_ffff_tmp71);
              ra000_ffff_tmp139 = simd_and(sequence_ea_ab_adv, byte_range_9b_9d);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp139);
              byte_range_a0_aa = simd_andc(ra000_ffff_tmp27, tmp3);
              ra000_ffff_tmp140 = simd_and(sequence_ea_ab_adv, byte_range_a0_aa);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp140);
              ra000_ffff_tmp141 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
              ra000_ffff_tmp142 = simd_not(tmp6);
              ra000_ffff_tmp143 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp142), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_b2_b4 = simd_and(ra000_ffff_tmp141, ra000_ffff_tmp143);
              ra000_ffff_tmp144 = simd_and(sequence_ea_ab_adv, byte_range_b2_b4);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp144);
              byte_ac = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp47);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp145 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp115), simd_andc(tmp6, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp145);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(161), sequence_ea_ac_adv));
              ra000_ffff_tmp146 = simd_and(sequence_ea_ac_adv, byte_range_81_86);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp146);
              byte_range_89_8e = simd_and(ra000_ffff_tmp59, ra000_ffff_tmp145);
              ra000_ffff_tmp147 = simd_and(sequence_ea_ac_adv, byte_range_89_8e);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp147);
              ra000_ffff_tmp148 = simd_andc(byte_range_90_9f, basis_bits.bit_4);
              byte_range_91_96 = simd_and(ra000_ffff_tmp148, ra000_ffff_tmp145);
              ra000_ffff_tmp149 = simd_and(sequence_ea_ac_adv, byte_range_91_96);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp149);
              byte_range_a0_a6 = simd_andc(ra000_ffff_tmp111, ra000_ffff_tmp48);
              ra000_ffff_tmp150 = simd_and(sequence_ea_ac_adv, byte_range_a0_a6);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp150);
              ra000_ffff_tmp151 = simd_and(ra000_ffff_tmp27, basis_bits.bit_4);
              byte_range_a8_ae = simd_andc(ra000_ffff_tmp151, ra000_ffff_tmp48);
              ra000_ffff_tmp152 = simd_and(sequence_ea_ac_adv, byte_range_a8_ae);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp152);
              ra000_ffff_tmp153 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp153);
              byte_ad = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp53);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp154 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp154);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(162), sequence_ea_ad_adv));
              ra000_ffff_tmp155 = simd_and(sequence_ea_ad_adv, byte_range_80_9a);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp155);
              byte_range_9c_9f = simd_and(byte_range_90_9f, ra000_ffff_tmp17);
              ra000_ffff_tmp156 = simd_and(sequence_ea_ad_adv, byte_range_9c_9f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp156);
              ra000_ffff_tmp157 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_a4_a5 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp157);
              ra000_ffff_tmp158 = simd_and(sequence_ea_ad_adv, byte_range_a4_a5);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp158);
              byte_af = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp32);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp159 = simd_and(basis_bits.bit_2, ra000_ffff_tmp77);
              byte_range_80_a2 = simd_andc(byte_range_80_bf, ra000_ffff_tmp159);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(163), sequence_ea_af_adv));
              ra000_ffff_tmp160 = simd_and(sequence_ea_af_adv, byte_range_80_a2);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp160);
              byte_ea_byte_range_b0_bf = simd_and(byte_ea_adv, byte_range_b0_bf);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_b0_bf, carryQ.get_carry_in(164), ra000_ffff_tmp161));
              byte_ea_byte_range_b0_bf_sfx = simd_and(ra000_ffff_tmp161, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ea_byte_range_b0_bf_sfx);
              ra000_ffff_tmp162 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp142), simd_andc(tmp1, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp17, ra000_ffff_tmp162);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(165), ra000_ffff_tmp163));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp163, byte_range_80_bf);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(166), ra000_ffff_tmp164));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp164, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp53);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(167), ra000_ffff_tmp165));
              byte_ed_byte_range_80_9d = simd_and(ra000_ffff_tmp165, byte_range_80_9d);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_80_9d, carryQ.get_carry_in(168), ra000_ffff_tmp166));
              byte_ed_byte_range_80_9d_sfx = simd_and(ra000_ffff_tmp166, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ed_byte_range_80_9d_sfx);
              sequence_ed_9e = simd_and(ra000_ffff_tmp165, byte_9e);
              byte_ed_adv = ra000_ffff_tmp165;
              ra000_ffff_tmp167 = simd_and(basis_bits.bit_2, ra000_ffff_tmp106);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp167);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(169), sequence_ed_9e_adv));
              ra000_ffff_tmp168 = simd_and(sequence_ed_9e_adv, byte_range_80_a3);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp168);
              ra000_ffff_tmp169 = simd_and(sequence_ed_9e_adv, byte_range_b0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp169);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(170), sequence_ed_9f_adv));
              ra000_ffff_tmp170 = simd_and(sequence_ed_9f_adv, byte_range_80_86);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp170);
              ra000_ffff_tmp171 = simd_and(basis_bits.bit_3, ra000_ffff_tmp17);
              ra000_ffff_tmp172 = simd_not(ra000_ffff_tmp171);
              ra000_ffff_tmp173 = simd_or(basis_bits.bit_3, tmp3);
              ra000_ffff_tmp174 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp172), simd_andc(ra000_ffff_tmp173, basis_bits.bit_2));
              byte_range_8b_bb = simd_and(byte_range_80_bf, ra000_ffff_tmp174);
              ra000_ffff_tmp175 = simd_and(sequence_ed_9f_adv, byte_range_8b_bb);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp175);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp32);
              ra000_ffff_tmp176 = simd_not(ra000_ffff_tmp56);
              ra000_ffff_tmp177 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp176), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp177);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(171), ra000_ffff_tmp178));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp178, byte_range_a4_a8);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(172), ra000_ffff_tmp179));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp179, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ef_byte_range_a4_a8_sfx);
              sequence_ef_a9 = simd_and(ra000_ffff_tmp178, byte_a9);
              byte_ef_adv = ra000_ffff_tmp178;
              ra000_ffff_tmp180 = simd_and(basis_bits.bit_2, ra000_ffff_tmp62);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp180);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(173), sequence_ef_a9_adv));
              ra000_ffff_tmp181 = simd_and(sequence_ef_a9_adv, byte_range_80_ad);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp181);
              ra000_ffff_tmp182 = simd_and(sequence_ef_a9_adv, byte_range_b0_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp182);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(174), sequence_ef_aa_adv));
              ra000_ffff_tmp183 = simd_and(sequence_ef_aa_adv, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp183);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp184 = simd_and(basis_bits.bit_3, ra000_ffff_tmp93);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp184);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(175), sequence_ef_ab_adv));
              ra000_ffff_tmp185 = simd_and(sequence_ef_ab_adv, byte_range_80_99);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp185);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(176), sequence_ef_ac_adv));
              ra000_ffff_tmp186 = simd_and(sequence_ef_ac_adv, byte_range_80_86);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp186);
              byte_range_93_97 = simd_and(ra000_ffff_tmp148, tmp2);
              ra000_ffff_tmp187 = simd_and(sequence_ef_ac_adv, byte_range_93_97);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp187);
              ra000_ffff_tmp188 = simd_and(sequence_ef_ac_adv, byte_9d);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp188);
              ra000_ffff_tmp189 = simd_not(ra000_ffff_tmp118);
              ra000_ffff_tmp190 = simd_and(basis_bits.bit_3, ra000_ffff_tmp32);
              ra000_ffff_tmp191 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp189), simd_andc(ra000_ffff_tmp190, basis_bits.bit_2));
              byte_range_9f_a8 = simd_and(byte_range_80_bf, ra000_ffff_tmp191);
              ra000_ffff_tmp192 = simd_and(sequence_ef_ac_adv, byte_range_9f_a8);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp192);
              ra000_ffff_tmp193 = simd_not(ra000_ffff_tmp49);
              ra000_ffff_tmp194 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp193), simd_andc(ra000_ffff_tmp93, basis_bits.bit_3));
              byte_range_aa_b6 = simd_and(byte_range_a0_bf, ra000_ffff_tmp194);
              ra000_ffff_tmp195 = simd_and(sequence_ef_ac_adv, byte_range_aa_b6);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp195);
              byte_range_b8_bc = simd_andc(ra000_ffff_tmp114, r800_ffff_tmp14);
              ra000_ffff_tmp196 = simd_and(sequence_ef_ac_adv, byte_range_b8_bc);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp196);
              byte_be = simd_and(byte_range_b0_bf, ra000_ffff_tmp55);
              ra000_ffff_tmp197 = simd_and(sequence_ef_ac_adv, byte_be);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp197);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(177), sequence_ef_ad_adv));
              ra000_ffff_tmp198 = simd_and(sequence_ef_ad_adv, byte_range_80_81);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp198);
              byte_range_83_84 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp162);
              ra000_ffff_tmp199 = simd_and(sequence_ef_ad_adv, byte_range_83_84);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp199);
              ra000_ffff_tmp200 = simd_or(basis_bits.bit_2, ra000_ffff_tmp44);
              byte_range_86_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp200);
              ra000_ffff_tmp201 = simd_and(sequence_ef_ad_adv, byte_range_86_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp201);
              byte_ae = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp55);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp202 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp202);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(178), sequence_ef_ae_adv));
              ra000_ffff_tmp203 = simd_and(sequence_ef_ae_adv, byte_range_80_b1);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp203);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp204 = simd_or(basis_bits.bit_2, ra000_ffff_tmp104);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp204);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(179), sequence_ef_af_adv));
              ra000_ffff_tmp205 = simd_and(sequence_ef_af_adv, byte_range_93_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp205);
              byte_range_b0_b3 = simd_andc(byte_range_b0_bf, tmp5);
              byte_ef_byte_range_b0_b3 = simd_and(byte_ef_adv, byte_range_b0_b3);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_b0_b3, carryQ.get_carry_in(180), ra000_ffff_tmp206));
              byte_ef_byte_range_b0_b3_sfx = simd_and(ra000_ffff_tmp206, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_ef_byte_range_b0_b3_sfx);
              byte_b4 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp207 = simd_and(basis_bits.bit_2, ra000_ffff_tmp19);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp207);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(181), sequence_ef_b4_adv));
              ra000_ffff_tmp208 = simd_and(sequence_ef_b4_adv, byte_range_80_bd);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp208);
              byte_b5 = simd_and(byte_range_b0_bf, ra000_ffff_tmp98);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp12);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(182), sequence_ef_b5_adv));
              ra000_ffff_tmp209 = simd_and(sequence_ef_b5_adv, byte_range_90_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp209);
              byte_b6 = simd_and(byte_range_b0_bf, ra000_ffff_tmp103);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp13;
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(183), sequence_ef_b6_adv));
              ra000_ffff_tmp210 = simd_and(sequence_ef_b6_adv, byte_range_80_8f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp210);
              ra000_ffff_tmp211 = simd_or(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_92_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp211);
              ra000_ffff_tmp212 = simd_and(sequence_ef_b6_adv, byte_range_92_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp212);
              byte_b7 = simd_and(byte_range_b0_bf, ra000_ffff_tmp109);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(184), sequence_ef_b7_adv));
              ra000_ffff_tmp213 = simd_and(sequence_ef_b7_adv, byte_range_80_87);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp213);
              byte_range_b0_bb = simd_andc(byte_range_b0_bf, ra000_ffff_tmp17);
              ra000_ffff_tmp214 = simd_and(sequence_ef_b7_adv, byte_range_b0_bb);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp214);
              byte_b9 = simd_and(byte_range_b0_bf, ra000_ffff_tmp31);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_range_b0_b4 = simd_andc(ra000_ffff_tmp141, r800_ffff_tmp14);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(185), sequence_ef_b9_adv));
              ra000_ffff_tmp215 = simd_and(sequence_ef_b9_adv, byte_range_b0_b4);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp215);
              byte_range_b6_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp43);
              ra000_ffff_tmp216 = simd_and(sequence_ef_b9_adv, byte_range_b6_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp216);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(186), sequence_ef_ba_adv));
              ra000_ffff_tmp217 = simd_and(sequence_ef_ba_adv, byte_range_80_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp217);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp218 = simd_and(basis_bits.bit_2, ra000_ffff_tmp101);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp218);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(187), sequence_ef_bb_adv));
              ra000_ffff_tmp219 = simd_and(sequence_ef_bb_adv, byte_range_80_bc);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp219);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp47);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_range_a1_ba = simd_and(byte_range_a0_bf, tmp8);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(188), sequence_ef_bc_adv));
              ra000_ffff_tmp220 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp220);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp53);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp38, tmp8);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(189), sequence_ef_bd_adv));
              ra000_ffff_tmp221 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp221);
              byte_range_a6_bf = simd_and(byte_range_a0_bf, ra000_ffff_tmp44);
              ra000_ffff_tmp222 = simd_and(sequence_ef_bd_adv, byte_range_a6_bf);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp222);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp223 = simd_and(basis_bits.bit_2, ra000_ffff_tmp190);
              byte_range_80_be = simd_andc(byte_range_80_bf, ra000_ffff_tmp223);
              carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(190), sequence_ef_be_adv));
              ra000_ffff_tmp224 = simd_and(sequence_ef_be_adv, byte_range_80_be);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp224);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp12);
              carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(191), sequence_ef_bf_adv));
              ra000_ffff_tmp225 = simd_and(sequence_ef_bf_adv, byte_range_82_87);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp225);
              ra000_ffff_tmp226 = simd_and(byte_range_80_8f, basis_bits.bit_4);
              byte_range_8a_8f = simd_and(ra000_ffff_tmp226, r800_ffff_tmp12);
              ra000_ffff_tmp227 = simd_and(sequence_ef_bf_adv, byte_range_8a_8f);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp227);
              byte_range_92_97 = simd_and(ra000_ffff_tmp148, r800_ffff_tmp12);
              ra000_ffff_tmp228 = simd_and(sequence_ef_bf_adv, byte_range_92_97);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp228);
              byte_range_9a_9c = simd_and(ra000_ffff_tmp138, ra000_ffff_tmp143);
              ra000_ffff_tmp229 = simd_and(sequence_ef_bf_adv, byte_range_9a_9c);
              struct_gc_L.cc = simd_or(struct_gc_L.cc, ra000_ffff_tmp229);
            }
            else {
              carryQ.CarryDequeueEnqueue(136, 56);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 167);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(192, 111))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(192), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            r10000_10ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp5);
            byte_80 = simd_andc(r10000_10ffff_tmp6, tmp7);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(193), r10000_10ffff_tmp7));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp7, byte_80);
            byte_f0_adv = r10000_10ffff_tmp4;
            sequence_f0_90_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_80_8b = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(194), sequence_f0_90_80_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_90_80_adv, byte_range_80_8b);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp9);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_not(r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp8, tmp6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_2));
            byte_range_8d_a6 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_80_adv, byte_range_8d_a6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            byte_range_a8_ba = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_80_adv, byte_range_a8_ba);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp8, basis_bits.bit_6);
            byte_range_bc_bd = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_80_adv, byte_range_bc_bd);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp8, tmp1);
            byte_bf = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_90_80_adv, byte_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, tmp5);
            byte_81 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp27);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp28);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp29);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(195), sequence_f0_90_81_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_81_adv, byte_range_80_8d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp30);
            byte_range_90_9d = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(sequence_f0_90_81_adv, byte_range_90_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp32, tmp5);
            byte_82 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp33);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(196), sequence_f0_90_82_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp36 = simd_andc(tmp1, tmp5);
            byte_83 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp36);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp37 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp38 = simd_and(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp39 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp38);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp39);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(197), sequence_f0_90_83_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp32);
            byte_8a = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp42);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp43 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            byte_range_80_9c = simd_andc(r10000_10ffff_tmp43, r10000_10ffff_tmp44);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(198), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_8a_adv, byte_range_80_9c);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp45);
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_90_8a_adv, byte_range_a0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp41, tmp1);
            byte_8b = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp47);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_3, tmp7);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp43, r10000_10ffff_tmp48);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(199), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp8, tmp6);
            byte_8c = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp50);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            byte_range_80_9f = r10000_10ffff_tmp43;
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(200), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_90_8c_adv, byte_range_80_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp51);
            byte_range_b0_bf = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_8c_adv, byte_range_b0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp26);
            byte_8d = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp53);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(201), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_90_8d_adv, byte_80);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp56 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp55);
            byte_range_82_89 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_90_8d_adv, byte_range_82_89);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp28);
            r10000_10ffff_tmp59 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_not(r10000_10ffff_tmp59);
            r10000_10ffff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp60), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(sequence_f0_90_8d_adv, byte_range_90_b5);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp32);
            byte_8e = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp63);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp64 = simd_and(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp65 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp64);
            byte_range_80_9d = simd_andc(byte_range_80_9f, r10000_10ffff_tmp65);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(202), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_90_8e_adv, byte_range_80_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(sequence_f0_90_8e_adv, byte_range_a0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp67);
            byte_8f = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp24);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp35, tmp5);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(203), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_90_8f_adv, byte_range_80_83);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp68);
            byte_range_88_8f = simd_and(r10000_10ffff_tmp35, basis_bits.bit_4);
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_8f_adv, byte_range_88_8f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_or(tmp5, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp37, r10000_10ffff_tmp70);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(204), r10000_10ffff_tmp71));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp71, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp33);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(205), sequence_f0_90_92_adv));
            r10000_10ffff_tmp72 = simd_and(sequence_f0_90_92_adv, byte_range_80_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp72);
            r10000_10ffff_tmp73 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp74 = simd_andc(r10000_10ffff_tmp73, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp74);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp75 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp75);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp76);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(206), sequence_f0_90_94_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_90_94_adv, byte_range_80_a7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_94_adv, byte_range_b0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp73, r10000_10ffff_tmp26);
            byte_95 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp79);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp80 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp81 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp80);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp81);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(207), sequence_f0_90_95_adv));
            r10000_10ffff_tmp82 = simd_and(sequence_f0_90_95_adv, byte_range_80_a3);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp82);
            byte_range_98_9b = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp41);
            sequence_f0_90_byte_range_98_9b = simd_and(sequence_f0_90_adv, byte_range_98_9b);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_98_9b, carryQ.get_carry_in(208), r10000_10ffff_tmp83));
            sequence_f0_90_byte_range_98_9b_sfx = simd_and(r10000_10ffff_tmp83, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_90_byte_range_98_9b_sfx);
            byte_9c = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp50);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp84 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp85 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp84);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp85);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(209), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_90_9c_adv, byte_range_80_b6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp86);
            byte_9d = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp53);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_80_95 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp59);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(210), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_90_9d_adv, byte_range_80_95);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp88, basis_bits.bit_4);
            r10000_10ffff_tmp89 = simd_and(sequence_f0_90_9d_adv, byte_range_a0_a7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp89);
            byte_a0 = simd_andc(r10000_10ffff_tmp88, tmp7);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp90 = simd_andc(r10000_10ffff_tmp35, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp90, r10000_10ffff_tmp28);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(211), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp91 = simd_and(sequence_f0_90_a0_adv, byte_range_80_85);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp91);
            r10000_10ffff_tmp92 = simd_andc(r10000_10ffff_tmp41, tmp6);
            byte_88 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp92);
            r10000_10ffff_tmp93 = simd_and(sequence_f0_90_a0_adv, byte_88);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp55);
            r10000_10ffff_tmp95 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp94);
            r10000_10ffff_tmp96 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp60), simd_andc(r10000_10ffff_tmp95, basis_bits.bit_2));
            byte_range_8a_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp96);
            r10000_10ffff_tmp97 = simd_and(sequence_f0_90_a0_adv, byte_range_8a_b5);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp99 = simd_not(r10000_10ffff_tmp98);
            r10000_10ffff_tmp100 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp99), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp100);
            r10000_10ffff_tmp101 = simd_and(sequence_f0_90_a0_adv, byte_range_b7_b8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp101);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp50);
            r10000_10ffff_tmp102 = simd_and(sequence_f0_90_a0_adv, byte_bc);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(sequence_f0_90_a0_adv, byte_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp103);
            byte_a1 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp27);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(212), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp104 = simd_and(sequence_f0_90_a1_adv, byte_range_80_95);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp104);
            byte_range_a0_b6 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp84);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_90_a1_adv, byte_range_a0_b6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp105);
            byte_a2 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp33);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            byte_range_80_9e = simd_andc(byte_range_80_9f, r10000_10ffff_tmp106);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(213), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp107 = simd_and(sequence_f0_90_a2_adv, byte_range_80_9e);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp107);
            byte_a4 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp74);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(214), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp108 = simd_and(sequence_f0_90_a4_adv, byte_range_80_95);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp108);
            r10000_10ffff_tmp109 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp94);
            byte_range_a0_b9 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_and(sequence_f0_90_a4_adv, byte_range_a0_b9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp110);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp73, r10000_10ffff_tmp32);
            byte_a6 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp111);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp113);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(215), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp114 = simd_and(sequence_f0_90_a6_adv, byte_range_80_b7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp114);
            byte_range_be_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp64);
            r10000_10ffff_tmp115 = simd_and(sequence_f0_90_a6_adv, byte_range_be_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp115);
            byte_a8 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp92);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(216), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_90_a8_adv, byte_80);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp116);
            byte_range_90_93 = simd_andc(r10000_10ffff_tmp37, tmp5);
            r10000_10ffff_tmp117 = simd_and(sequence_f0_90_a8_adv, byte_range_90_93);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp117);
            r10000_10ffff_tmp118 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp73);
            byte_range_95_97 = simd_and(r10000_10ffff_tmp118, tmp6);
            r10000_10ffff_tmp119 = simd_and(sequence_f0_90_a8_adv, byte_range_95_97);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp121 = simd_not(r10000_10ffff_tmp120);
            r10000_10ffff_tmp122 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp98);
            r10000_10ffff_tmp123 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp122);
            r10000_10ffff_tmp124 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp121), simd_andc(r10000_10ffff_tmp123, basis_bits.bit_2));
            byte_range_99_b3 = simd_and(byte_range_80_bf, r10000_10ffff_tmp124);
            r10000_10ffff_tmp125 = simd_and(sequence_f0_90_a8_adv, byte_range_99_b3);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp26);
            byte_a9 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp126);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp44);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(217), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bc);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp127);
            byte_aa = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp42);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(218), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_90_aa_adv, byte_range_80_9c);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp128);
            byte_ab = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp47);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp90;
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(219), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp129 = simd_and(sequence_f0_90_ab_adv, byte_range_80_87);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp129);
            r10000_10ffff_tmp130 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp131 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp131);
            r10000_10ffff_tmp133 = simd_not(r10000_10ffff_tmp132);
            r10000_10ffff_tmp134 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp122);
            r10000_10ffff_tmp135 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp133), simd_andc(r10000_10ffff_tmp134, basis_bits.bit_2));
            byte_range_89_a4 = simd_and(byte_range_80_bf, r10000_10ffff_tmp135);
            r10000_10ffff_tmp136 = simd_and(sequence_f0_90_ab_adv, byte_range_89_a4);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp136);
            byte_ac = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp50);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp137 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp59);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp137);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(220), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp138 = simd_and(sequence_f0_90_ac_adv, byte_range_80_b5);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp138);
            byte_ad = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp53);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(221), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp139 = simd_and(sequence_f0_90_ad_adv, byte_range_80_95);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_or(tmp5, tmp1);
            r10000_10ffff_tmp141 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp140);
            byte_range_a0_b2 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp141);
            r10000_10ffff_tmp142 = simd_and(sequence_f0_90_ad_adv, byte_range_a0_b2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp142);
            byte_ae = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp63);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp143 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp70);
            byte_range_80_91 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp143);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(222), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_90_ae_adv, byte_range_80_91);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp144);
            byte_b0 = simd_andc(byte_range_b0_bf, tmp7);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(223), sequence_f0_90_b0_adv));
            r10000_10ffff_tmp145 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp145);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp122);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(224), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp146 = simd_and(sequence_f0_90_b1_adv, byte_range_80_88);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp146);
            byte_91 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp27);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(225), r10000_10ffff_tmp147));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp147, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp147;
            r10000_10ffff_tmp148 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp149 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp140);
            r10000_10ffff_tmp150 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp148), simd_andc(r10000_10ffff_tmp149, basis_bits.bit_2));
            byte_range_83_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp150);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(226), sequence_f0_91_80_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp151);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp152 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp153 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp152), simd_andc(r10000_10ffff_tmp149, basis_bits.bit_2));
            byte_range_83_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp153);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(227), sequence_f0_91_82_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp154);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp155 = simd_not(r10000_10ffff_tmp134);
            r10000_10ffff_tmp156 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp156);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(228), sequence_f0_91_83_adv));
            r10000_10ffff_tmp157 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp157);
            byte_84 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp74);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp149, basis_bits.bit_2));
            byte_range_83_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(229), sequence_f0_91_84_adv));
            r10000_10ffff_tmp159 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp159);
            byte_85 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp79);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp160 = simd_not(r10000_10ffff_tmp141);
            r10000_10ffff_tmp161 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp160), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp161);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(230), sequence_f0_91_85_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_91_85_adv, byte_range_90_b2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp162);
            byte_b6 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp111);
            r10000_10ffff_tmp163 = simd_and(sequence_f0_91_85_adv, byte_b6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp163);
            byte_86 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp111);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp164 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp160), simd_andc(r10000_10ffff_tmp149, basis_bits.bit_2));
            byte_range_83_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp164);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(231), sequence_f0_91_86_adv));
            r10000_10ffff_tmp165 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp165);
            r10000_10ffff_tmp166 = simd_and(r10000_10ffff_tmp73, tmp1);
            byte_87 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp166);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp167 = simd_xor(basis_bits.bit_5, tmp6);
            byte_range_81_84 = simd_and(byte_range_80_87, r10000_10ffff_tmp167);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(232), sequence_f0_91_87_adv));
            r10000_10ffff_tmp168 = simd_and(sequence_f0_91_87_adv, byte_range_81_84);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp168);
            byte_9a = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp42);
            r10000_10ffff_tmp169 = simd_and(sequence_f0_91_87_adv, byte_9a);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp169);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(233), sequence_f0_91_88_adv));
            r10000_10ffff_tmp170 = simd_and(sequence_f0_91_88_adv, byte_range_80_91);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp170);
            r10000_10ffff_tmp171 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp8);
            r10000_10ffff_tmp172 = simd_not(r10000_10ffff_tmp171);
            r10000_10ffff_tmp173 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp172), simd_andc(r10000_10ffff_tmp141, basis_bits.bit_2));
            byte_range_93_ab = simd_and(byte_range_80_bf, r10000_10ffff_tmp173);
            r10000_10ffff_tmp174 = simd_and(sequence_f0_91_88_adv, byte_range_93_ab);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp174);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(234), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp175 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp175);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(235), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp176 = simd_and(sequence_f0_91_8b_adv, byte_range_80_9e);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp176);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp177 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp130);
            byte_range_85_8c = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp177);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(236), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_91_8c_adv, byte_range_85_8c);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp178);
            r10000_10ffff_tmp179 = simd_not(tmp7);
            r10000_10ffff_tmp180 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp179), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_3));
            byte_range_8f_90 = simd_and(byte_range_80_9f, r10000_10ffff_tmp180);
            r10000_10ffff_tmp181 = simd_and(sequence_f0_91_8c_adv, byte_range_8f_90);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp181);
            r10000_10ffff_tmp182 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp141, basis_bits.bit_2));
            byte_range_93_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp182);
            r10000_10ffff_tmp183 = simd_and(sequence_f0_91_8c_adv, byte_range_93_a8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp183);
            r10000_10ffff_tmp184 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp179), simd_andc(r10000_10ffff_tmp94, basis_bits.bit_3));
            byte_range_aa_b0 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp184);
            r10000_10ffff_tmp185 = simd_and(sequence_f0_91_8c_adv, byte_range_aa_b0);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp185);
            r10000_10ffff_tmp186 = simd_andc(basis_bits.bit_6, tmp5);
            byte_range_b2_b3 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp186);
            r10000_10ffff_tmp187 = simd_and(sequence_f0_91_8c_adv, byte_range_b2_b3);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp187);
            r10000_10ffff_tmp188 = simd_not(r10000_10ffff_tmp55);
            r10000_10ffff_tmp189 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp188), simd_andc(r10000_10ffff_tmp130, basis_bits.bit_4));
            byte_range_b5_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp189);
            r10000_10ffff_tmp190 = simd_and(sequence_f0_91_8c_adv, byte_range_b5_b9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp190);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp53);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_91_8c_adv, byte_bd);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp191);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp192 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp70);
            r10000_10ffff_tmp193 = simd_not(r10000_10ffff_tmp192);
            r10000_10ffff_tmp194 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp193), simd_andc(r10000_10ffff_tmp44, basis_bits.bit_2));
            byte_range_9d_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp194);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(237), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp195 = simd_and(sequence_f0_91_8d_adv, byte_range_9d_a1);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp195);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(238), sequence_f0_91_92_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_92_adv, byte_range_80_af);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp196);
            byte_93 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp36);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp197 = simd_andc(r10000_10ffff_tmp73, basis_bits.bit_6);
            byte_range_84_85 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp197);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(239), sequence_f0_91_93_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_93_adv, byte_range_84_85);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp198);
            r10000_10ffff_tmp199 = simd_and(sequence_f0_91_93_adv, byte_87);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp199);
            byte_96 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp111);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp200 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp201 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp200);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp201);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(240), sequence_f0_91_96_adv));
            r10000_10ffff_tmp202 = simd_and(sequence_f0_91_96_adv, byte_range_80_ae);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp202);
            byte_98 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp92);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(241), sequence_f0_91_98_adv));
            r10000_10ffff_tmp203 = simd_and(sequence_f0_91_98_adv, byte_range_80_af);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp203);
            byte_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp126);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(242), sequence_f0_91_99_adv));
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_99_adv, byte_84);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp204);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp205 = simd_or(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp206 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp205);
            byte_range_80_aa = simd_andc(byte_range_80_bf, r10000_10ffff_tmp206);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(243), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp207);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(244), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp208 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp208);
            byte_a3 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp36);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(245), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp209 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp209);
            r10000_10ffff_tmp210 = simd_and(sequence_f0_91_a3_adv, byte_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp210);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp211 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp123);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp211);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(246), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp212 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp212);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(247), r10000_10ffff_tmp213));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp213, byte_range_80_8d);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(248), r10000_10ffff_tmp214));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp214, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp213, byte_8e);
            sequence_f0_92_adv = r10000_10ffff_tmp213;
            byte_range_80_98 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp123);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(249), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp215 = simd_and(sequence_f0_92_8e_adv, byte_range_80_98);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp215);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp35;
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(250), r10000_10ffff_tmp216));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp216, byte_range_80_8f);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(251), r10000_10ffff_tmp217));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp217, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp216, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp216;
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(252), sequence_f0_93_90_adv));
            r10000_10ffff_tmp218 = simd_and(sequence_f0_93_90_adv, byte_range_80_ae);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp218);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(253), r10000_10ffff_tmp219));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp219, byte_range_a0_a7);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(254), r10000_10ffff_tmp220));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp220, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp219, byte_a8);
            sequence_f0_96_adv = r10000_10ffff_tmp219;
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(255), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp221 = simd_and(sequence_f0_96_a8_adv, byte_range_80_b8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp221);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(256), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp222 = simd_and(sequence_f0_96_a9_adv, byte_range_80_9e);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp222);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp223 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp64);
            r10000_10ffff_tmp224 = simd_not(r10000_10ffff_tmp223);
            r10000_10ffff_tmp225 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp224), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp225);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(257), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp226 = simd_and(sequence_f0_96_ab_adv, byte_range_90_ad);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp226);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(258), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_96_ac_adv, byte_range_80_af);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp227);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(259), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp228 = simd_and(sequence_f0_96_ad_adv, byte_range_80_83);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp228);
            r10000_10ffff_tmp229 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp230 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp229), simd_andc(r10000_10ffff_tmp140, basis_bits.bit_3));
            byte_range_a3_b7 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp230);
            r10000_10ffff_tmp231 = simd_and(sequence_f0_96_ad_adv, byte_range_a3_b7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp231);
            r10000_10ffff_tmp232 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp8);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp232, tmp6);
            r10000_10ffff_tmp233 = simd_and(sequence_f0_96_ad_adv, byte_range_bd_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp233);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(260), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp234 = simd_and(sequence_f0_96_ae_adv, byte_range_80_8f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp234);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(261), sequence_f0_96_bc_adv));
            r10000_10ffff_tmp235 = simd_and(sequence_f0_96_bc_adv, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp235);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp236 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp236, r10000_10ffff_tmp130);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(262), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp237 = simd_and(sequence_f0_96_bd_adv, byte_range_80_84);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp237);
            r10000_10ffff_tmp238 = simd_and(sequence_f0_96_bd_adv, byte_90);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp238);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp63);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp239 = simd_or(basis_bits.bit_4, tmp2);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp239);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(263), sequence_f0_96_be_adv));
            r10000_10ffff_tmp240 = simd_and(sequence_f0_96_be_adv, byte_range_93_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp240);
            byte_9b = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp47);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(264), r10000_10ffff_tmp241));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp241, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp241;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp70);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(265), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp242 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp242);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(266), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp243 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp243);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(267), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp244 = simd_and(sequence_f0_9b_b1_adv, byte_range_80_aa);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp244);
            r10000_10ffff_tmp245 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp130);
            byte_range_b0_bc = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp245);
            r10000_10ffff_tmp246 = simd_and(sequence_f0_9b_b1_adv, byte_range_b0_bc);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp246);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp33);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(268), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp247 = simd_and(sequence_f0_9b_b2_adv, byte_range_80_88);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp247);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp37, r10000_10ffff_tmp94);
            r10000_10ffff_tmp248 = simd_and(sequence_f0_9b_b2_adv, byte_range_90_99);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp248);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(269), r10000_10ffff_tmp249));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp249, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp249;
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(270), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp250 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp250);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp251 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp131);
            byte_range_80_94 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp251);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(271), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp252 = simd_and(sequence_f0_9d_91_adv, byte_range_80_94);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp252);
            r10000_10ffff_tmp253 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp59);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp253);
            r10000_10ffff_tmp254 = simd_and(sequence_f0_9d_91_adv, byte_range_96_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp254);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(272), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp255 = simd_and(sequence_f0_9d_92_adv, byte_range_80_9c);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp255);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp64);
            r10000_10ffff_tmp256 = simd_and(sequence_f0_9d_92_adv, byte_range_9e_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp256);
            r10000_10ffff_tmp257 = simd_and(sequence_f0_9d_92_adv, byte_a2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp257);
            r10000_10ffff_tmp258 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp73);
            r10000_10ffff_tmp259 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp258, r10000_10ffff_tmp259);
            r10000_10ffff_tmp260 = simd_and(sequence_f0_9d_92_adv, byte_range_a5_a6);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp260);
            r10000_10ffff_tmp261 = simd_and(r10000_10ffff_tmp88, basis_bits.bit_4);
            byte_range_a9_ac = simd_and(r10000_10ffff_tmp261, r10000_10ffff_tmp167);
            r10000_10ffff_tmp262 = simd_and(sequence_f0_9d_92_adv, byte_range_a9_ac);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp262);
            r10000_10ffff_tmp263 = simd_not(r10000_10ffff_tmp94);
            r10000_10ffff_tmp264 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp263), simd_andc(r10000_10ffff_tmp64, basis_bits.bit_3));
            byte_range_ae_b9 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp264);
            r10000_10ffff_tmp265 = simd_and(sequence_f0_9d_92_adv, byte_range_ae_b9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp265);
            byte_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp47);
            r10000_10ffff_tmp266 = simd_and(sequence_f0_9d_92_adv, byte_bb);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp266);
            r10000_10ffff_tmp267 = simd_and(sequence_f0_9d_92_adv, byte_range_bd_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp267);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(273), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp268 = simd_and(sequence_f0_9d_93_adv, byte_range_80_83);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp268);
            r10000_10ffff_tmp269 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp132);
            byte_range_85_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp269);
            r10000_10ffff_tmp270 = simd_and(sequence_f0_9d_93_adv, byte_range_85_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp270);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(274), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp271 = simd_and(sequence_f0_9d_94_adv, byte_range_80_85);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp271);
            r10000_10ffff_tmp272 = simd_not(tmp2);
            r10000_10ffff_tmp273 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp272), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            byte_range_87_8a = simd_and(byte_range_80_8f, r10000_10ffff_tmp273);
            r10000_10ffff_tmp274 = simd_and(sequence_f0_9d_94_adv, byte_range_87_8a);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp274);
            r10000_10ffff_tmp275 = simd_not(r10000_10ffff_tmp131);
            r10000_10ffff_tmp276 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp275), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_3));
            byte_range_8d_94 = simd_and(byte_range_80_9f, r10000_10ffff_tmp276);
            r10000_10ffff_tmp277 = simd_and(sequence_f0_9d_94_adv, byte_range_8d_94);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp277);
            r10000_10ffff_tmp278 = simd_not(r10000_10ffff_tmp130);
            r10000_10ffff_tmp279 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp278), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_4));
            byte_range_96_9c = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp279);
            r10000_10ffff_tmp280 = simd_and(sequence_f0_9d_94_adv, byte_range_96_9c);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp280);
            r10000_10ffff_tmp281 = simd_not(r10000_10ffff_tmp109);
            r10000_10ffff_tmp282 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp281), simd_andc(r10000_10ffff_tmp65, basis_bits.bit_2));
            byte_range_9e_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp282);
            r10000_10ffff_tmp283 = simd_and(sequence_f0_9d_94_adv, byte_range_9e_b9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp283);
            r10000_10ffff_tmp284 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp285 = simd_xor(basis_bits.bit_5, tmp1);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp284, r10000_10ffff_tmp285);
            r10000_10ffff_tmp286 = simd_and(sequence_f0_9d_94_adv, byte_range_bb_be);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp286);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(275), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp287 = simd_and(sequence_f0_9d_95_adv, byte_range_80_84);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp287);
            r10000_10ffff_tmp288 = simd_and(sequence_f0_9d_95_adv, byte_86);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp288);
            byte_range_8a_90 = simd_and(byte_range_80_9f, r10000_10ffff_tmp184);
            r10000_10ffff_tmp289 = simd_and(sequence_f0_9d_95_adv, byte_range_8a_90);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp289);
            r10000_10ffff_tmp290 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp143);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp290);
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_95_adv, byte_range_92_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp291);
            r10000_10ffff_tmp292 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp188), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp292);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(276), r10000_10ffff_tmp293));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp293, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp294 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp58);
            r10000_10ffff_tmp295 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp294);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp295);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(277), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp296 = simd_and(sequence_f0_9d_9a_adv, byte_range_80_a5);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp296);
            byte_range_a8_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp75);
            r10000_10ffff_tmp297 = simd_and(sequence_f0_9d_9a_adv, byte_range_a8_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp297);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(278), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9d_9b_adv, byte_80);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp298);
            r10000_10ffff_tmp299 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(r10000_10ffff_tmp70, basis_bits.bit_3));
            byte_range_82_9a = simd_and(byte_range_80_9f, r10000_10ffff_tmp299);
            r10000_10ffff_tmp300 = simd_and(sequence_f0_9d_9b_adv, byte_range_82_9a);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp300);
            r10000_10ffff_tmp301 = simd_not(r10000_10ffff_tmp38);
            r10000_10ffff_tmp302 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp8);
            r10000_10ffff_tmp303 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp301), simd_andc(r10000_10ffff_tmp302, basis_bits.bit_2));
            byte_range_9c_ba = simd_and(byte_range_80_bf, r10000_10ffff_tmp303);
            r10000_10ffff_tmp304 = simd_and(sequence_f0_9d_9b_adv, byte_range_9c_ba);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp304);
            byte_range_bc_bf = r10000_10ffff_tmp232;
            r10000_10ffff_tmp305 = simd_and(sequence_f0_9d_9b_adv, byte_range_bc_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp305);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(279), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp306 = simd_and(sequence_f0_9d_9c_adv, byte_range_80_94);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp306);
            r10000_10ffff_tmp307 = simd_not(r10000_10ffff_tmp251);
            r10000_10ffff_tmp308 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp307), simd_andc(r10000_10ffff_tmp59, basis_bits.bit_2));
            byte_range_96_b4 = simd_and(byte_range_80_bf, r10000_10ffff_tmp308);
            r10000_10ffff_tmp309 = simd_and(sequence_f0_9d_9c_adv, byte_range_96_b4);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp309);
            byte_range_b6_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp58);
            r10000_10ffff_tmp310 = simd_and(sequence_f0_9d_9c_adv, byte_range_b6_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp310);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp311 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp10);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp311);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(280), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp312 = simd_and(sequence_f0_9d_9d_adv, byte_range_80_8e);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp312);
            r10000_10ffff_tmp313 = simd_not(r10000_10ffff_tmp200);
            r10000_10ffff_tmp314 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp313), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ae = simd_and(byte_range_80_bf, r10000_10ffff_tmp314);
            r10000_10ffff_tmp315 = simd_and(sequence_f0_9d_9d_adv, byte_range_90_ae);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp315);
            r10000_10ffff_tmp316 = simd_and(sequence_f0_9d_9d_adv, byte_range_b0_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp316);
            byte_9e = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp63);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(281), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp317 = simd_and(sequence_f0_9d_9e_adv, byte_range_80_88);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp317);
            r10000_10ffff_tmp318 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp95, basis_bits.bit_2));
            byte_range_8a_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp318);
            r10000_10ffff_tmp319 = simd_and(sequence_f0_9d_9e_adv, byte_range_8a_a8);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp319);
            byte_range_aa_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp95);
            r10000_10ffff_tmp320 = simd_and(sequence_f0_9d_9e_adv, byte_range_aa_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp320);
            byte_9f = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp24);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp321 = simd_andc(byte_range_80_8f, tmp5);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp321, tmp1);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(282), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp322 = simd_and(sequence_f0_9d_9f_adv, byte_range_80_82);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp322);
            r10000_10ffff_tmp323 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_84_8b = simd_and(byte_range_80_8f, r10000_10ffff_tmp323);
            r10000_10ffff_tmp324 = simd_and(sequence_f0_9d_9f_adv, byte_range_84_8b);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp324);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp325 = simd_andc(r10000_10ffff_tmp88, tmp5);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp325, tmp1);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(283), r10000_10ffff_tmp326));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp326, byte_range_a0_a2);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(284), r10000_10ffff_tmp327));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp327, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp326, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp326;
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(285), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp328 = simd_and(sequence_f0_9e_a3_adv, byte_range_80_84);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp328);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp92);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(286), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp329 = simd_and(sequence_f0_9e_b8_adv, byte_range_80_83);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp329);
            byte_range_85_9f = simd_and(byte_range_80_9f, r10000_10ffff_tmp132);
            r10000_10ffff_tmp330 = simd_and(sequence_f0_9e_b8_adv, byte_range_85_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp330);
            byte_range_a1_a2 = simd_and(r10000_10ffff_tmp325, r10000_10ffff_tmp259);
            r10000_10ffff_tmp331 = simd_and(sequence_f0_9e_b8_adv, byte_range_a1_a2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp331);
            r10000_10ffff_tmp332 = simd_and(sequence_f0_9e_b8_adv, byte_a4);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp332);
            byte_a7 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp166);
            r10000_10ffff_tmp333 = simd_and(sequence_f0_9e_b8_adv, byte_a7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp333);
            r10000_10ffff_tmp334 = simd_not(r10000_10ffff_tmp140);
            r10000_10ffff_tmp335 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp334), simd_andc(r10000_10ffff_tmp122, basis_bits.bit_3));
            byte_range_a9_b2 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp335);
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9e_b8_adv, byte_range_a9_b2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp336);
            byte_range_b4_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp73);
            r10000_10ffff_tmp337 = simd_and(sequence_f0_9e_b8_adv, byte_range_b4_b7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp337);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp126);
            r10000_10ffff_tmp338 = simd_and(sequence_f0_9e_b8_adv, byte_b9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp338);
            r10000_10ffff_tmp339 = simd_and(sequence_f0_9e_b8_adv, byte_bb);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp339);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(287), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp340 = simd_and(sequence_f0_9e_b9_adv, byte_82);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp340);
            r10000_10ffff_tmp341 = simd_and(sequence_f0_9e_b9_adv, byte_87);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp341);
            byte_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp126);
            r10000_10ffff_tmp342 = simd_and(sequence_f0_9e_b9_adv, byte_89);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp342);
            r10000_10ffff_tmp343 = simd_and(sequence_f0_9e_b9_adv, byte_8b);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp343);
            r10000_10ffff_tmp344 = simd_and(byte_range_80_8f, r10000_10ffff_tmp8);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp344, tmp6);
            r10000_10ffff_tmp345 = simd_and(sequence_f0_9e_b9_adv, byte_range_8d_8f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp345);
            byte_range_91_92 = simd_and(byte_range_90_93, r10000_10ffff_tmp259);
            r10000_10ffff_tmp346 = simd_and(sequence_f0_9e_b9_adv, byte_range_91_92);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp346);
            r10000_10ffff_tmp347 = simd_and(sequence_f0_9e_b9_adv, byte_94);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp347);
            byte_97 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp166);
            r10000_10ffff_tmp348 = simd_and(sequence_f0_9e_b9_adv, byte_97);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp348);
            r10000_10ffff_tmp349 = simd_and(sequence_f0_9e_b9_adv, byte_99);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp349);
            r10000_10ffff_tmp350 = simd_and(sequence_f0_9e_b9_adv, byte_9b);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp350);
            r10000_10ffff_tmp351 = simd_and(sequence_f0_9e_b9_adv, byte_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp351);
            r10000_10ffff_tmp352 = simd_and(sequence_f0_9e_b9_adv, byte_9f);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp352);
            r10000_10ffff_tmp353 = simd_and(sequence_f0_9e_b9_adv, byte_range_a1_a2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp353);
            r10000_10ffff_tmp354 = simd_and(sequence_f0_9e_b9_adv, byte_a4);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp354);
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp273);
            r10000_10ffff_tmp355 = simd_and(sequence_f0_9e_b9_adv, byte_range_a7_aa);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp355);
            r10000_10ffff_tmp356 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp334), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_3));
            byte_range_ac_b2 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp356);
            r10000_10ffff_tmp357 = simd_and(sequence_f0_9e_b9_adv, byte_range_ac_b2);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp357);
            r10000_10ffff_tmp358 = simd_and(sequence_f0_9e_b9_adv, byte_range_b4_b7);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp358);
            byte_range_b9_bc = simd_and(r10000_10ffff_tmp284, r10000_10ffff_tmp167);
            r10000_10ffff_tmp359 = simd_and(sequence_f0_9e_b9_adv, byte_range_b9_bc);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp359);
            r10000_10ffff_tmp360 = simd_and(sequence_f0_9e_b9_adv, byte_be);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp360);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp42);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            byte_range_80_89 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp94);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(288), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp361 = simd_and(sequence_f0_9e_ba_adv, byte_range_80_89);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp361);
            r10000_10ffff_tmp362 = simd_not(r10000_10ffff_tmp8);
            r10000_10ffff_tmp363 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp362), simd_andc(tmp3, basis_bits.bit_3));
            byte_range_8b_9b = simd_and(byte_range_80_9f, r10000_10ffff_tmp363);
            r10000_10ffff_tmp364 = simd_and(sequence_f0_9e_ba_adv, byte_range_8b_9b);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp364);
            byte_range_a1_a3 = simd_and(r10000_10ffff_tmp325, tmp6);
            r10000_10ffff_tmp365 = simd_and(sequence_f0_9e_ba_adv, byte_range_a1_a3);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp365);
            byte_range_a5_a9 = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp189);
            r10000_10ffff_tmp366 = simd_and(sequence_f0_9e_ba_adv, byte_range_a5_a9);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp366);
            byte_range_ab_bb = simd_and(byte_range_a0_bf, r10000_10ffff_tmp363);
            r10000_10ffff_tmp367 = simd_and(sequence_f0_9e_ba_adv, byte_range_ab_bb);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp367);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp88, r10000_10ffff_tmp94);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(289), r10000_10ffff_tmp368));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp368, byte_range_80_bf);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(290), r10000_10ffff_tmp369));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp369, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            byte_range_80_9a = simd_andc(byte_range_80_9f, r10000_10ffff_tmp38);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(291), r10000_10ffff_tmp370));
            sequence_f0_aa_byte_range_80_9a = simd_and(r10000_10ffff_tmp370, byte_range_80_9a);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_80_9a, carryQ.get_carry_in(292), r10000_10ffff_tmp371));
            sequence_f0_aa_byte_range_80_9a_sfx = simd_and(r10000_10ffff_tmp371, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_aa_byte_range_80_9a_sfx);
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp370, byte_9b);
            sequence_f0_aa_adv = r10000_10ffff_tmp370;
            byte_range_80_96 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp84);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(293), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp372 = simd_and(sequence_f0_aa_9b_adv, byte_range_80_96);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp372);
            r10000_10ffff_tmp373 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp302);
            byte_range_9c_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp373);
            sequence_f0_aa_byte_range_9c_bf = simd_and(sequence_f0_aa_adv, byte_range_9c_bf);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_9c_bf, carryQ.get_carry_in(294), r10000_10ffff_tmp374));
            sequence_f0_aa_byte_range_9c_bf_sfx = simd_and(r10000_10ffff_tmp374, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_aa_byte_range_9c_bf_sfx);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            byte_range_80_9b = simd_andc(byte_range_80_9f, r10000_10ffff_tmp302);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(295), r10000_10ffff_tmp375));
            sequence_f0_ab_byte_range_80_9b = simd_and(r10000_10ffff_tmp375, byte_range_80_9b);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_80_9b, carryQ.get_carry_in(296), r10000_10ffff_tmp376));
            sequence_f0_ab_byte_range_80_9b_sfx = simd_and(r10000_10ffff_tmp376, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_ab_byte_range_80_9b_sfx);
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp375, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp375;
            r10000_10ffff_tmp377 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp251);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp377);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(297), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp378 = simd_and(sequence_f0_ab_9c_adv, byte_range_80_b4);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp378);
            r10000_10ffff_tmp379 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp8);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp379, tmp6);
            sequence_f0_ab_byte_range_9d_9f = simd_and(sequence_f0_ab_adv, byte_range_9d_9f);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_9d_9f, carryQ.get_carry_in(298), r10000_10ffff_tmp380));
            sequence_f0_ab_byte_range_9d_9f_sfx = simd_and(r10000_10ffff_tmp380, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_ab_byte_range_9d_9f_sfx);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(299), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp381 = simd_and(sequence_f0_ab_a0_adv, byte_range_80_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp381);
            byte_af = simd_and(r10000_10ffff_tmp88, r10000_10ffff_tmp24);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(300), r10000_10ffff_tmp382));
            sequence_f0_af_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp382, byte_range_a0_a7);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a0_a7, carryQ.get_carry_in(301), r10000_10ffff_tmp383));
            sequence_f0_af_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp383, byte_range_80_bf);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, sequence_f0_af_byte_range_a0_a7_sfx);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp382, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp382;
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(302), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp384 = simd_and(sequence_f0_af_a8_adv, byte_range_80_9d);
            struct_gc_L.cc = simd_or(struct_gc_L.cc, r10000_10ffff_tmp384);
          }
          else {
            carryQ.CarryDequeueEnqueue(192, 111);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 303);
        }
        carryQ.CarryQ_Adjust(303);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<303, 0> carryQ;
  };

  struct Property_gc_M {
  Property_gc_M() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_M & struct_gc_M) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, byte_range_80_bf, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1, r400_4ff_tmp2;
		BitBlock byte_d2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6;
		BitBlock r400_4ff_tmp7, r400_4ff_tmp8, r400_4ff_tmp9, byte_range_83_89;
		BitBlock byte_d2_adv, r400_4ff_tmp10, r400_5ff_tmp1, r400_5ff_tmp2;
		BitBlock r400_5ff_tmp3, byte_d6, r400_5ff_tmp4, byte_range_90_bf;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, byte_d7;
		BitBlock r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3;
		BitBlock r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6, r590_5ff_tmp7;
		BitBlock r590_5ff_tmp8, byte_range_91_bd, byte_d6_adv, r590_5ff_tmp9;
		BitBlock r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12, byte_bf;
		BitBlock r590_5ff_tmp13, r590_5ff_tmp14, r590_5ff_tmp15, r590_5ff_tmp16;
		BitBlock byte_range_81_82, byte_d7_adv, r590_5ff_tmp17, r590_5ff_tmp18;
		BitBlock byte_range_84_85, r590_5ff_tmp19, byte_87, r590_5ff_tmp20;
		BitBlock r80_7ff_tmp6, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_range_90_9a, byte_d8_adv, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, byte_d9, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, byte_range_8b_9f, byte_d9_adv, r600_6ff_tmp13;
		BitBlock r600_6ff_tmp14, r600_6ff_tmp15, r600_6ff_tmp16, byte_b0;
		BitBlock r600_6ff_tmp17, r600_6ff_tmp18, byte_db, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, byte_range_96_9c;
		BitBlock byte_db_adv, r600_6ff_tmp23, r600_6ff_tmp24, r600_6ff_tmp25;
		BitBlock r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28, r600_6ff_tmp29;
		BitBlock r600_6ff_tmp30, byte_range_9f_a4, r600_6ff_tmp31, r600_6ff_tmp32;
		BitBlock r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35, r600_6ff_tmp36;
		BitBlock r600_6ff_tmp37, byte_range_a7_a8, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock r600_6ff_tmp40, byte_range_aa_ad, r600_6ff_tmp41, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5;
		BitBlock byte_range_80_8f, r700_77f_tmp6, r700_77f_tmp7, r700_77f_tmp8;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, byte_91, byte_dc_adv, r700_74f_tmp3;
		BitBlock r700_74f_tmp4, byte_range_b0_bf, r700_74f_tmp5, r700_74f_tmp6;
		BitBlock r700_74f_tmp7, r700_74f_tmp8, byte_range_80_8a, byte_dd_adv;
		BitBlock r700_74f_tmp9, r80_7ff_tmp9, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock r780_7bf_tmp4, r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7;
		BitBlock r780_7bf_tmp8, byte_range_a6_b0, byte_de_adv, r780_7bf_tmp9;
		BitBlock r780_7ff_tmp3, r780_7ff_tmp4, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, r7c0_7ff_tmp6;
		BitBlock byte_range_ab_b3, byte_df_adv, r7c0_7ff_tmp7, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock byte_range_96_99, sequence_e0_a0_adv, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, byte_range_9b_a3, r800_fff_tmp17;
		BitBlock r800_fff_tmp18, byte_range_a5_a7, r800_fff_tmp19, r800_fff_tmp20;
		BitBlock r800_fff_tmp21, r800_fff_tmp22, byte_range_a9_ad, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, r800_fff_tmp25, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, byte_range_99_9b, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp28, r800_fff_tmp29, byte_a3, sequence_e0_a3;
		BitBlock r800_fff_tmp30, byte_range_a4_bf, sequence_e0_a3_adv, r800_fff_tmp31;
		BitBlock byte_a4, sequence_e0_a4, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock byte_range_80_83, sequence_e0_a4_adv, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39;
		BitBlock byte_range_ba_bc, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock byte_range_be_bf, r800_fff_tmp43, r800_fff_tmp44, byte_a5;
		BitBlock sequence_e0_a5, sequence_e0_a5_adv, r800_fff_tmp45, r800_fff_tmp46;
		BitBlock r800_fff_tmp47, byte_range_91_97, r800_fff_tmp48, r800_fff_tmp49;
		BitBlock byte_range_a2_a3, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock byte_a6, sequence_e0_a6, r800_fff_tmp53, byte_range_81_83;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp54, r800_fff_tmp55, byte_bc;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, r800_fff_tmp58, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp59, r800_fff_tmp60, byte_range_80_84;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63;
		BitBlock r800_fff_tmp64, byte_range_87_88, r800_fff_tmp65, r800_fff_tmp66;
		BitBlock r800_fff_tmp67, byte_range_8b_8d, r800_fff_tmp68, byte_97;
		BitBlock r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71, byte_a8;
		BitBlock sequence_e0_a8, sequence_e0_a8_adv, r800_fff_tmp72, r800_fff_tmp73;
		BitBlock r800_fff_tmp74, r800_fff_tmp75, byte_a9, sequence_e0_a9;
		BitBlock byte_range_80_82, sequence_e0_a9_adv, r800_fff_tmp76, r800_fff_tmp77;
		BitBlock r800_fff_tmp78, r800_fff_tmp79, byte_range_b0_b1, r800_fff_tmp80;
		BitBlock byte_b5, r800_fff_tmp81, r800_fff_tmp82, byte_aa, sequence_e0_aa;
		BitBlock sequence_e0_aa_adv, r800_fff_tmp83, r800_fff_tmp84, r800_fff_tmp85;
		BitBlock r800_fff_tmp86, byte_ab, sequence_e0_ab, byte_range_80_85;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp87, r800_fff_tmp88, byte_range_87_89;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, byte_ac;
		BitBlock sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp92, r800_fff_tmp93;
		BitBlock r800_fff_tmp94, r800_fff_tmp95, byte_ad, sequence_e0_ad;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp96, r800_fff_tmp97, r800_fff_tmp98;
		BitBlock r800_fff_tmp99, byte_range_96_97, r800_fff_tmp100, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, byte_ae, sequence_e0_ae, r800_fff_tmp103, byte_82;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106;
		BitBlock byte_af, sequence_e0_af, sequence_e0_af_adv, r800_fff_tmp107;
		BitBlock r800_fff_tmp108, byte_range_86_88, r800_fff_tmp109, r800_fff_tmp110;
		BitBlock byte_range_8a_8d, r800_fff_tmp111, r800_fff_tmp112, sequence_e0_b0;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp113, r800_fff_tmp114, byte_b1;
		BitBlock sequence_e0_b1, sequence_e0_b1_adv, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119, byte_range_95_96;
		BitBlock r800_fff_tmp120, r800_fff_tmp121, byte_b2, sequence_e0_b2;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp122, r800_fff_tmp123, r800_fff_tmp124;
		BitBlock byte_b3, sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp125;
		BitBlock r800_fff_tmp126, r800_fff_tmp127, r800_fff_tmp128, r800_fff_tmp129;
		BitBlock byte_b4, sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp130;
		BitBlock r800_fff_tmp131, sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp132;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, r800_fff_tmp135, r800_fff_tmp136;
		BitBlock byte_b6, sequence_e0_b6, byte_range_82_83, sequence_e0_b6_adv;
		BitBlock r800_fff_tmp137, byte_b7, sequence_e0_b7, byte_8a, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141;
		BitBlock r800_fff_tmp142, byte_range_8f_94, r800_fff_tmp143, byte_96;
		BitBlock r800_fff_tmp144, byte_range_98_9f, r800_fff_tmp145, byte_range_b2_b3;
		BitBlock r800_fff_tmp146, byte_b8, sequence_e0_b8, sequence_e0_b8_adv;
		BitBlock r800_fff_tmp147, r800_fff_tmp148, r800_fff_tmp149, byte_range_b4_ba;
		BitBlock r800_fff_tmp150, byte_b9, sequence_e0_b9, r800_fff_tmp151;
		BitBlock byte_range_87_8e, sequence_e0_b9_adv, r800_fff_tmp152, byte_ba;
		BitBlock sequence_e0_ba, sequence_e0_ba_adv, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock byte_range_b4_b9, r800_fff_tmp155, r800_fff_tmp156, byte_range_bb_bc;
		BitBlock r800_fff_tmp157, byte_bb, sequence_e0_bb, byte_range_88_8d;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp158, sequence_e0_bc, r800_fff_tmp159;
		BitBlock byte_range_98_99, sequence_e0_bc_adv, r800_fff_tmp160;
		BitBlock r800_fff_tmp161, r800_fff_tmp162, r800_fff_tmp163, r800_fff_tmp164;
		BitBlock byte_bd, sequence_e0_bd, r800_fff_tmp165, byte_range_b1_bf;
		BitBlock sequence_e0_bd_adv, r800_fff_tmp166, byte_be, sequence_e0_be;
		BitBlock sequence_e0_be_adv, r800_fff_tmp167, byte_range_86_87;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170, r800_fff_tmp171;
		BitBlock byte_range_8d_97, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, r800_fff_tmp176, r800_fff_tmp177, byte_range_99_bc;
		BitBlock r800_fff_tmp178, sequence_e0_bf, byte_86, sequence_e0_bf_adv;
		BitBlock r800_fff_tmp179, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3;
		BitBlock sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_ab_be;
		BitBlock sequence_e1_80_adv, r1000_1fff_tmp12, byte_81, sequence_e1_81;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock sequence_e1_81_adv, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_range_9e_a0, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, byte_range_a2_a4, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock byte_range_a7_ad, r1000_1fff_tmp34, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, r1000_1fff_tmp37, r1000_1fff_tmp38;
		BitBlock byte_range_b1_b4, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, sequence_e1_82, r1000_1fff_tmp42, byte_range_82_8d;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp43, byte_8f, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, r1000_1fff_tmp46, byte_range_9a_9d;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, byte_8d, sequence_e1_8d;
		BitBlock r1000_1fff_tmp49, byte_range_9d_9f, sequence_e1_8d_adv;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, byte_9c, sequence_e1_9c;
		BitBlock r1000_1fff_tmp52, byte_range_92_94, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp53, byte_range_b2_b4, r1000_1fff_tmp54, byte_9d;
		BitBlock sequence_e1_9d, r1000_1fff_tmp55, byte_range_92_93;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, byte_9e, sequence_e1_9e, byte_range_b4_bf;
		BitBlock sequence_e1_9e_adv, r1000_1fff_tmp59, byte_9f, sequence_e1_9f;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, byte_range_80_93;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp62, r1000_1fff_tmp63;
		BitBlock sequence_e1_a0, r1000_1fff_tmp64, r1000_1fff_tmp65, r1000_1fff_tmp66;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp67, byte_a2, sequence_e1_a2;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, sequence_e1_a2_adv;
		BitBlock r1000_1fff_tmp70, sequence_e1_a4, byte_range_a0_ab;
		BitBlock sequence_e1_a4_adv, r1000_1fff_tmp71, byte_range_b0_bb;
		BitBlock r1000_1fff_tmp72, r1000_1fff_tmp73, sequence_e1_a6;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp74, r1000_1fff_tmp75;
		BitBlock sequence_e1_a7, sequence_e1_a7_adv, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, byte_range_88_89, r1000_1fff_tmp78;
		BitBlock r1000_1fff_tmp79, sequence_e1_a8, r1000_1fff_tmp80, r1000_1fff_tmp81;
		BitBlock byte_range_97_9b, sequence_e1_a8_adv, r1000_1fff_tmp82;
		BitBlock sequence_e1_a9, r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock byte_range_95_9e, sequence_e1_a9_adv, r1000_1fff_tmp86;
		BitBlock r1000_1fff_tmp87, r1000_1fff_tmp88, byte_range_a0_bc;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91, sequence_e1_aa;
		BitBlock r1000_1fff_tmp92, byte_range_b0_be, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp93, sequence_e1_ac, r1000_1fff_tmp94;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp95, r1000_1fff_tmp96;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r1000_1fff_tmp97;
		BitBlock r1000_1fff_tmp98, r1000_1fff_tmp99, r1000_1fff_tmp100, sequence_e1_ae;
		BitBlock r1000_1fff_tmp101, sequence_e1_ae_adv, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, r1000_1fff_tmp104, byte_range_a1_ad;
		BitBlock r1000_1fff_tmp105, sequence_e1_af, r1000_1fff_tmp106;
		BitBlock r1000_1fff_tmp107, byte_range_a6_b3, sequence_e1_af_adv;
		BitBlock r1000_1fff_tmp108, sequence_e1_b0, r1000_1fff_tmp109;
		BitBlock r1000_1fff_tmp110, byte_range_a4_b7, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp111, r1000_1fff_tmp112, sequence_e1_b3;
		BitBlock r1000_1fff_tmp113, byte_range_90_92, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp114, r1000_1fff_tmp115, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, r1000_1fff_tmp118, byte_range_94_a8;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, byte_range_b8_b9, r1000_1fff_tmp123;
		BitBlock sequence_e1_b7, r1000_1fff_tmp124, r1000_1fff_tmp125;
		BitBlock byte_range_80_b5, sequence_e1_b7_adv, r1000_1fff_tmp126;
		BitBlock byte_range_bc_bf, r1000_1fff_tmp127, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4;
		BitBlock byte_83, r2000_2fff_tmp5, sequence_e2_83, byte_e2_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock byte_range_90_b0, sequence_e2_83_adv, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, sequence_e2_b3, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, byte_range_af_b1, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20, sequence_e2_b5;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock sequence_e2_b7, byte_range_a0_bf, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp23, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, byte_range_aa_af;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp8, sequence_e3_82, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_99_9a, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock byte_range_af_b2, sequence_ea_99_adv, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, byte_range_b4_bd;
		BitBlock ra000_ffff_tmp22, byte_9a, sequence_ea_9a, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, byte_9b, sequence_ea_9b;
		BitBlock ra000_ffff_tmp25, sequence_ea_9b_adv, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, sequence_ea_a0, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, sequence_ea_a0_adv;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, ra000_ffff_tmp34, byte_8b;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock byte_range_a3_a7, ra000_ffff_tmp38, sequence_ea_a2, byte_range_80_81;
		BitBlock sequence_ea_a2_adv, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock ra000_ffff_tmp41, sequence_ea_a3, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock byte_range_a0_b1, ra000_ffff_tmp46, sequence_ea_a4, ra000_ffff_tmp47;
		BitBlock byte_range_a6_ad, sequence_ea_a4_adv, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, sequence_ea_a5, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock ra000_ffff_tmp52, ra000_ffff_tmp53, ra000_ffff_tmp54;
		BitBlock byte_range_87_93, sequence_ea_a5_adv, ra000_ffff_tmp55;
		BitBlock sequence_ea_a6, sequence_ea_a6_adv, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, byte_range_b3_bf, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, sequence_ea_a7, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62, sequence_ea_a8;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, ra000_ffff_tmp65;
		BitBlock ra000_ffff_tmp66, byte_range_a9_b6, sequence_ea_a8_adv;
		BitBlock ra000_ffff_tmp67, sequence_ea_a9, sequence_ea_a9_adv;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, byte_range_8c_8d;
		BitBlock ra000_ffff_tmp70, ra000_ffff_tmp71, ra000_ffff_tmp72;
		BitBlock ra000_ffff_tmp73, byte_range_bb_bd, ra000_ffff_tmp74, sequence_ea_aa;
		BitBlock sequence_ea_aa_adv, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, byte_range_b7_b8;
		BitBlock ra000_ffff_tmp82, ra000_ffff_tmp83, ra000_ffff_tmp84, sequence_ea_ab;
		BitBlock ra000_ffff_tmp85, sequence_ea_ab_adv, ra000_ffff_tmp86;
		BitBlock ra000_ffff_tmp87, byte_range_ab_af, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, byte_range_b5_b6;
		BitBlock ra000_ffff_tmp91, sequence_ea_af, ra000_ffff_tmp92, byte_range_a3_aa;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp93, byte_range_ac_ad;
		BitBlock ra000_ffff_tmp94, byte_ef, ra000_ffff_tmp95, ra000_ffff_tmp96;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp97, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp98, sequence_ef_b8, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp99, ra000_ffff_tmp100, byte_range_a0_ad;
		BitBlock ra000_ffff_tmp101, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, sequence_f0_90_87;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock sequence_f0_90_87_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, sequence_f0_90_8b, r10000_10ffff_tmp21;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp22, sequence_f0_90_8d;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, byte_range_b6_ba, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp29, sequence_f0_90_a8_adv, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, byte_range_85_86;
		BitBlock r10000_10ffff_tmp33, byte_range_8c_8f, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, byte_range_b8_ba, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp39, byte_range_a5_a6, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, sequence_f0_91;
		BitBlock r10000_10ffff_tmp42, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp43, byte_range_b8_bf;
		BitBlock r10000_10ffff_tmp44, sequence_f0_91_81, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, byte_range_80_86, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, sequence_f0_91_82, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, byte_range_b0_ba;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, byte_84, sequence_f0_91_84;
		BitBlock sequence_f0_91_84_adv, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock r10000_10ffff_tmp57, r10000_10ffff_tmp58, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, r10000_10ffff_tmp61, byte_range_a7_b4;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, byte_85, sequence_f0_91_85;
		BitBlock r10000_10ffff_tmp64, sequence_f0_91_85_adv, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, sequence_f0_91_86, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp67, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock sequence_f0_91_87, sequence_f0_91_87_adv, r10000_10ffff_tmp70;
		BitBlock byte_88, sequence_f0_91_88, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock byte_range_ac_b7, sequence_f0_91_88_adv, r10000_10ffff_tmp73;
		BitBlock sequence_f0_91_8b, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, byte_range_9f_aa;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp78, r10000_10ffff_tmp79;
		BitBlock byte_8c, sequence_f0_91_8c, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock r10000_10ffff_tmp83, sequence_f0_91_8d, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock r10000_10ffff_tmp87, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, r10000_10ffff_tmp97, byte_range_a6_ac;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_b0_b4;
		BitBlock r10000_10ffff_tmp100, byte_92, sequence_f0_91_92;
		BitBlock sequence_f0_91_92_adv, r10000_10ffff_tmp101, byte_93;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp102;
		BitBlock sequence_f0_91_96, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, byte_range_af_b5, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp106, r10000_10ffff_tmp107, sequence_f0_91_97;
		BitBlock sequence_f0_91_97_adv, r10000_10ffff_tmp108, byte_98;
		BitBlock sequence_f0_91_98, sequence_f0_91_98_adv, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, sequence_f0_91_99, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp111, r10000_10ffff_tmp112, sequence_f0_91_9a;
		BitBlock r10000_10ffff_tmp113, byte_range_ab_b7, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp114, sequence_f0_96, r10000_10ffff_tmp115;
		BitBlock sequence_f0_96_ab, sequence_f0_96_adv, r10000_10ffff_tmp116;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp117, sequence_f0_96_ac;
		BitBlock byte_range_b0_b6, sequence_f0_96_ac_adv, r10000_10ffff_tmp118;
		BitBlock sequence_f0_96_bd, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, byte_range_91_be, sequence_f0_96_bd_adv;
		BitBlock r10000_10ffff_tmp122, r10000_10ffff_tmp123, sequence_f0_96_be;
		BitBlock r10000_10ffff_tmp124, r10000_10ffff_tmp125, r10000_10ffff_tmp126;
		BitBlock r10000_10ffff_tmp127, byte_range_8f_92, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp128, sequence_f0_9b, r10000_10ffff_tmp129;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, r10000_10ffff_tmp130;
		BitBlock byte_range_9d_9e, sequence_f0_9b_b2_adv, r10000_10ffff_tmp131;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp132, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp133, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, byte_range_a5_a9, sequence_f0_9d_85_adv;
		BitBlock r10000_10ffff_tmp136, r10000_10ffff_tmp137, r10000_10ffff_tmp138;
		BitBlock byte_range_ad_b2, r10000_10ffff_tmp139, r10000_10ffff_tmp140;
		BitBlock byte_range_bb_bf, r10000_10ffff_tmp141, sequence_f0_9d_86;
		BitBlock sequence_f0_9d_86_adv, r10000_10ffff_tmp142, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, byte_range_85_8b, r10000_10ffff_tmp145;
		BitBlock r10000_10ffff_tmp146, r10000_10ffff_tmp147, r10000_10ffff_tmp148;
		BitBlock byte_89, sequence_f0_9d_89, r10000_10ffff_tmp149;
		BitBlock r10000_10ffff_tmp150, byte_range_82_84, sequence_f0_9d_89_adv;
		BitBlock r10000_10ffff_tmp151, sequence_f0_9e, r10000_10ffff_tmp152;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, r10000_10ffff_tmp153;
		BitBlock byte_range_90_96, sequence_f0_9e_a3_adv, r10000_10ffff_tmp154;
		BitBlock byte_f3, r10000_10ffff_tmp155, sequence_f3_a0, byte_range_84_86;
		BitBlock r10000_10ffff_tmp156, sequence_f3_a0_byte_range_84_86;
		BitBlock r10000_10ffff_tmp157, sequence_f3_a0_byte_range_84_86_sfx;
		BitBlock r10000_10ffff_tmp158, sequence_f3_a0_87, r10000_10ffff_tmp159;
		BitBlock byte_f3_adv, sequence_f3_a0_adv, sequence_f3_a0_87_adv;
		BitBlock r10000_10ffff_tmp160;




        struct_gc_M.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 139))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 12))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r100_3ff_tmp6;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(1), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 3))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(2, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r80_7ff_tmp3);
                byte_d2 = simd_and(r80_7ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r80_7ff_tmp1);
                r400_4ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r400_4ff_tmp6 = simd_not(r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_5, r400_4ff_tmp7);
                r400_4ff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r400_4ff_tmp6), simd_andc(r400_4ff_tmp8, basis_bits.bit_4));
                byte_range_83_89 = simd_and(r400_4ff_tmp4, r400_4ff_tmp9);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(2), byte_d2_adv));
                r400_4ff_tmp10 = simd_and(byte_d2_adv, byte_range_83_89);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r400_4ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, r400_5ff_tmp7);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(4, 1))) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp2 = simd_and(r590_5ff_tmp1, basis_bits.bit_6);
                r590_5ff_tmp3 = simd_and(basis_bits.bit_3, r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_not(r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp6 = simd_or(r80_7ff_tmp3, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(basis_bits.bit_3, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp4), simd_andc(r590_5ff_tmp7, basis_bits.bit_2));
                byte_range_91_bd = simd_and(r400_5ff_tmp4, r590_5ff_tmp8);
                byte_d6_adv = r400_5ff_tmp5;
                r590_5ff_tmp9 = simd_and(byte_d6_adv, byte_range_91_bd);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r590_5ff_tmp9);
                r590_5ff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp11 = simd_and(r400_5ff_tmp4, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(r590_5ff_tmp1, r400_5ff_tmp7);
                byte_bf = simd_and(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp13 = simd_and(byte_d6_adv, byte_bf);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r590_5ff_tmp13);
                r590_5ff_tmp14 = simd_andc(r400_5ff_tmp4, r80_7ff_tmp1);
                r590_5ff_tmp15 = simd_andc(r590_5ff_tmp14, r80_7ff_tmp3);
                r590_5ff_tmp16 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                byte_range_81_82 = simd_and(r590_5ff_tmp15, r590_5ff_tmp16);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(4), byte_d7_adv));
                r590_5ff_tmp17 = simd_and(byte_d7_adv, byte_range_81_82);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r590_5ff_tmp17);
                r590_5ff_tmp18 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
                byte_range_84_85 = simd_and(r590_5ff_tmp14, r590_5ff_tmp18);
                r590_5ff_tmp19 = simd_and(byte_d7_adv, byte_range_84_85);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r590_5ff_tmp19);
                byte_87 = simd_and(r590_5ff_tmp14, r400_5ff_tmp8);
                r590_5ff_tmp20 = simd_and(byte_d7_adv, byte_87);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r590_5ff_tmp20);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(5, 3))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              byte_range_90_9a = simd_andc(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(5), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_90_9a);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp6, r600_6ff_tmp9);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp12 = simd_or(basis_bits.bit_3, r600_6ff_tmp7);
              byte_range_8b_9f = simd_and(r600_6ff_tmp11, r600_6ff_tmp12);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(6), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, byte_range_8b_9f);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp15 = simd_and(r600_6ff_tmp3, r600_6ff_tmp14);
              r600_6ff_tmp16 = simd_or(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_b0 = simd_andc(r600_6ff_tmp15, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_and(byte_d9_adv, byte_b0);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp17);
              r600_6ff_tmp18 = simd_and(r80_7ff_tmp6, r600_6ff_tmp5);
              byte_db = simd_and(r80_7ff_tmp5, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_and(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp20 = simd_not(r600_6ff_tmp19);
              r600_6ff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp22 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp20), simd_andc(r600_6ff_tmp21, basis_bits.bit_4));
              byte_range_96_9c = simd_and(r600_6ff_tmp4, r600_6ff_tmp22);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(7), byte_db_adv));
              r600_6ff_tmp23 = simd_and(byte_db_adv, byte_range_96_9c);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp23);
              r600_6ff_tmp24 = simd_or(basis_bits.bit_4, r600_6ff_tmp19);
              r600_6ff_tmp25 = simd_or(basis_bits.bit_3, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_not(r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp28 = simd_and(r600_6ff_tmp27, r600_6ff_tmp5);
              r600_6ff_tmp29 = simd_and(basis_bits.bit_3, r600_6ff_tmp28);
              r600_6ff_tmp30 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp26), simd_andc(r600_6ff_tmp29, basis_bits.bit_2));
              byte_range_9f_a4 = simd_and(r600_6ff_tmp3, r600_6ff_tmp30);
              r600_6ff_tmp31 = simd_and(byte_db_adv, byte_range_9f_a4);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp31);
              r600_6ff_tmp32 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp33 = simd_and(r600_6ff_tmp3, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp35 = simd_not(r600_6ff_tmp34);
              r600_6ff_tmp36 = simd_and(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp35), simd_andc(r600_6ff_tmp36, basis_bits.bit_4));
              byte_range_a7_a8 = simd_and(r600_6ff_tmp33, r600_6ff_tmp37);
              r600_6ff_tmp38 = simd_and(byte_db_adv, byte_range_a7_a8);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp38);
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp33, basis_bits.bit_4);
              r600_6ff_tmp40 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_ad = simd_and(r600_6ff_tmp39, r600_6ff_tmp40);
              r600_6ff_tmp41 = simd_and(byte_db_adv, byte_range_aa_ad);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, r600_6ff_tmp41);
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 3);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(8, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(8), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(9, 1))) {
                r700_74f_tmp1 = simd_and(r700_77f_tmp5, r80_7ff_tmp4);
                r700_74f_tmp2 = simd_andc(r700_77f_tmp3, r80_7ff_tmp3);
                byte_91 = simd_and(r700_74f_tmp1, r700_74f_tmp2);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(9), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_91);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r700_77f_tmp5, r700_74f_tmp4);
                r700_74f_tmp5 = simd_and(byte_dc_adv, byte_range_b0_bf);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r700_74f_tmp5);
                r700_74f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp7 = simd_or(basis_bits.bit_5, r700_74f_tmp6);
                r700_74f_tmp8 = simd_and(basis_bits.bit_4, r700_74f_tmp7);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp8);
                byte_dd_adv = r700_77f_tmp6;
                r700_74f_tmp9 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r700_74f_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(10, 2))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(10, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(r780_7bf_tmp1, basis_bits.bit_2);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r780_7bf_tmp4 = simd_or(r80_7ff_tmp3, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_not(r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp7 = simd_or(basis_bits.bit_4, r780_7bf_tmp6);
                r780_7bf_tmp8 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp5), simd_andc(r780_7bf_tmp7, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp2, r780_7bf_tmp8);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(10), byte_de_adv));
                r780_7bf_tmp9 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r780_7bf_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
              r780_7ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp4 = simd_and(r80_7ff_tmp7, r780_7ff_tmp3);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(11, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, basis_bits.bit_2);
                r7c0_7ff_tmp3 = simd_not(r80_7ff_tmp3);
                r7c0_7ff_tmp4 = simd_or(basis_bits.bit_5, r780_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_3, r7c0_7ff_tmp3), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_3));
                byte_range_ab_b3 = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp6);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(11), byte_df_adv));
                r7c0_7ff_tmp7 = simd_and(byte_df_adv, byte_range_ab_b3);
                struct_gc_M.cc = simd_or(struct_gc_M.cc, r7c0_7ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 12);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 84))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(12), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(13, 64))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(13, 56))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(13, 32))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_not(r800_fff_tmp5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  byte_range_96_99 = simd_and(r800_fff_tmp4, r800_fff_tmp8);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(14), sequence_e0_a0_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a0_adv, byte_range_96_99);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_or(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_4, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_3, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp11), simd_andc(r800_fff_tmp15, basis_bits.bit_2));
                  byte_range_9b_a3 = simd_and(r800_ffff_tmp5, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(sequence_e0_a0_adv, byte_range_9b_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  byte_range_a5_a7 = simd_and(r800_fff_tmp18, r800_ffff_tmp3);
                  r800_fff_tmp19 = simd_and(sequence_e0_a0_adv, byte_range_a5_a7);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp21 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp21), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_a9_ad = simd_and(r800_fff_tmp20, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(sequence_e0_a0_adv, byte_range_a9_ad);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp25 = simd_andc(r800_fff_tmp24, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp25);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp26 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp27 = simd_and(r800_fff_tmp4, r800_fff_tmp26);
                  byte_range_99_9b = simd_and(r800_fff_tmp27, r800_ffff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(15), sequence_e0_a1_adv));
                  r800_fff_tmp28 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp29);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp30 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  byte_range_a4_bf = simd_and(r800_fff_tmp30, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(16), sequence_e0_a3_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp31);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp33 = simd_andc(r800_ffff_tmp5, r800_fff_tmp32);
                  byte_range_80_83 = simd_andc(r800_fff_tmp33, r800_ffff_tmp1);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(17), sequence_e0_a4_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a4_adv, byte_range_80_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp36 = simd_and(r800_ffff_tmp5, r800_fff_tmp35);
                  r800_fff_tmp37 = simd_and(r800_fff_tmp36, basis_bits.bit_4);
                  r800_fff_tmp38 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp39 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp38), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r800_fff_tmp37, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_a4_adv, byte_range_ba_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp41, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp36, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_a4_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_ffff_tmp2, r800_fff_tmp24);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  byte_range_80_8f = r800_fff_tmp33;
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(18), sequence_e0_a5_adv));
                  r800_fff_tmp45 = simd_and(sequence_e0_a5_adv, byte_range_80_8f);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_andc(r800_fff_tmp4, basis_bits.bit_4);
                  r800_fff_tmp47 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_91_97 = simd_and(r800_fff_tmp46, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_a5_adv, byte_range_91_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_a2_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_and(sequence_e0_a5_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp52 = simd_and(r800_ffff_tmp2, r800_fff_tmp51);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp52);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp53 = simd_andc(byte_range_80_8f, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp53, r800_ffff_tmp3);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(19), sequence_e0_a6_adv));
                  r800_fff_tmp54 = simd_and(sequence_e0_a6_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_andc(r800_fff_tmp41, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp36, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(sequence_e0_a6_adv, byte_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_a6_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp58);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp59 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  r800_fff_tmp60 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r800_fff_tmp59, r800_fff_tmp60);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(20), sequence_e0_a7_adv));
                  r800_fff_tmp61 = simd_and(sequence_e0_a7_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_not(r800_fff_tmp47);
                  r800_fff_tmp63 = simd_and(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp64 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp62), simd_andc(r800_fff_tmp63, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(byte_range_80_8f, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_and(sequence_e0_a7_adv, byte_range_87_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r800_fff_tmp67 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp21), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r800_fff_tmp66, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(sequence_e0_a7_adv, byte_range_8b_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp68);
                  byte_97 = simd_and(r800_fff_tmp4, r800_fff_tmp58);
                  r800_fff_tmp69 = simd_and(sequence_e0_a7_adv, byte_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(sequence_e0_a7_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp70);
                  r800_fff_tmp71 = simd_andc(r800_fff_tmp26, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp71);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(21), sequence_e0_a8_adv));
                  r800_fff_tmp72 = simd_and(sequence_e0_a8_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(sequence_e0_a8_adv, byte_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp73);
                  r800_fff_tmp74 = simd_and(sequence_e0_a8_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp74);
                  r800_fff_tmp75 = simd_and(r800_fff_tmp26, r800_fff_tmp24);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp75);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  byte_range_80_82 = simd_andc(r800_fff_tmp53, r800_fff_tmp12);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(22), sequence_e0_a9_adv));
                  r800_fff_tmp76 = simd_and(sequence_e0_a9_adv, byte_range_80_82);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(sequence_e0_a9_adv, byte_range_87_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp77);
                  r800_fff_tmp78 = simd_and(sequence_e0_a9_adv, byte_range_8b_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp78);
                  byte_91 = simd_and(r800_fff_tmp4, r800_fff_tmp25);
                  r800_fff_tmp79 = simd_and(sequence_e0_a9_adv, byte_91);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp79);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp36, r800_4dff_tmp1);
                  r800_fff_tmp80 = simd_and(sequence_e0_a9_adv, byte_range_b0_b1);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp80);
                  byte_b5 = simd_and(r800_fff_tmp36, r800_fff_tmp44);
                  r800_fff_tmp81 = simd_and(sequence_e0_a9_adv, byte_b5);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp26, r800_fff_tmp51);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp82);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(23), sequence_e0_aa_adv));
                  r800_fff_tmp83 = simd_and(sequence_e0_aa_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_aa_adv, byte_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_and(sequence_e0_aa_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp85);
                  r800_fff_tmp86 = simd_and(r800_fff_tmp26, r800_fff_tmp12);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp86);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  byte_range_80_85 = simd_andc(r800_fff_tmp59, r800_fff_tmp7);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(24), sequence_e0_ab_adv));
                  r800_fff_tmp87 = simd_and(sequence_e0_ab_adv, byte_range_80_85);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp87);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(r800_fff_tmp63, basis_bits.bit_4));
                  byte_range_87_89 = simd_and(byte_range_80_8f, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_ab_adv, byte_range_87_89);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp89);
                  r800_fff_tmp90 = simd_and(sequence_e0_ab_adv, byte_range_8b_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(sequence_e0_ab_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp91);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp55);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(25), sequence_e0_ac_adv));
                  r800_fff_tmp92 = simd_and(sequence_e0_ac_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp92);
                  r800_fff_tmp93 = simd_and(sequence_e0_ac_adv, byte_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp93);
                  r800_fff_tmp94 = simd_and(sequence_e0_ac_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp94);
                  r800_fff_tmp95 = simd_and(r800_fff_tmp41, r800_fff_tmp24);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp95);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(26), sequence_e0_ad_adv));
                  r800_fff_tmp96 = simd_and(sequence_e0_ad_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp96);
                  r800_fff_tmp97 = simd_and(sequence_e0_ad_adv, byte_range_87_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_and(sequence_e0_ad_adv, byte_range_8b_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp98);
                  r800_fff_tmp99 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r800_fff_tmp4, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(sequence_e0_ad_adv, byte_range_96_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp100);
                  r800_fff_tmp101 = simd_and(sequence_e0_ad_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp101);
                  r800_fff_tmp102 = simd_and(r800_fff_tmp41, r800_fff_tmp51);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp102);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp103 = simd_andc(r800_fff_tmp51, r800_ffff_tmp1);
                  byte_82 = simd_and(byte_range_80_8f, r800_fff_tmp103);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(27), sequence_e0_ae_adv));
                  r800_fff_tmp104 = simd_and(sequence_e0_ae_adv, byte_82);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp104);
                  r800_fff_tmp105 = simd_and(sequence_e0_ae_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(r800_fff_tmp41, r800_fff_tmp12);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp106);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(28), sequence_e0_af_adv));
                  r800_fff_tmp107 = simd_and(sequence_e0_af_adv, byte_range_80_82);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp107);
                  r800_fff_tmp108 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp62), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(byte_range_80_8f, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(sequence_e0_af_adv, byte_range_86_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp109);
                  r800_fff_tmp110 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r800_fff_tmp66, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_and(sequence_e0_af_adv, byte_range_8a_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(sequence_e0_af_adv, byte_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp112);
                  byte_b0 = simd_andc(r800_fff_tmp36, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(29), sequence_e0_b0_adv));
                  r800_fff_tmp113 = simd_and(sequence_e0_b0_adv, byte_range_80_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp113);
                  r800_fff_tmp114 = simd_and(sequence_e0_b0_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp114);
                  byte_b1 = simd_and(r800_fff_tmp36, r800_fff_tmp25);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(30), sequence_e0_b1_adv));
                  r800_fff_tmp115 = simd_and(sequence_e0_b1_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_and(sequence_e0_b1_adv, byte_range_86_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp116);
                  r800_fff_tmp117 = simd_and(sequence_e0_b1_adv, byte_range_8a_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(r800_fff_tmp4, r800_ffff_tmp2);
                  r800_fff_tmp119 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_95_96 = simd_and(r800_fff_tmp118, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_b1_adv, byte_range_95_96);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp120);
                  r800_fff_tmp121 = simd_and(sequence_e0_b1_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp121);
                  byte_b2 = simd_and(r800_fff_tmp36, r800_fff_tmp103);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(31), sequence_e0_b2_adv));
                  r800_fff_tmp122 = simd_and(sequence_e0_b2_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp122);
                  r800_fff_tmp123 = simd_and(sequence_e0_b2_adv, byte_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp123);
                  r800_fff_tmp124 = simd_and(sequence_e0_b2_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp124);
                  byte_b3 = simd_and(r800_fff_tmp36, r800_fff_tmp29);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(32), sequence_e0_b3_adv));
                  r800_fff_tmp125 = simd_and(sequence_e0_b3_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp125);
                  r800_fff_tmp126 = simd_and(sequence_e0_b3_adv, byte_range_86_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp126);
                  r800_fff_tmp127 = simd_and(sequence_e0_b3_adv, byte_range_8a_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp127);
                  r800_fff_tmp128 = simd_and(sequence_e0_b3_adv, byte_range_95_96);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(sequence_e0_b3_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp129);
                  byte_b4 = simd_and(r800_fff_tmp36, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(33), sequence_e0_b4_adv));
                  r800_fff_tmp130 = simd_and(sequence_e0_b4_adv, byte_range_81_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp130);
                  r800_fff_tmp131 = simd_and(sequence_e0_b4_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp131);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(34), sequence_e0_b5_adv));
                  r800_fff_tmp132 = simd_and(sequence_e0_b5_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp132);
                  r800_fff_tmp133 = simd_and(sequence_e0_b5_adv, byte_range_86_88);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_and(sequence_e0_b5_adv, byte_range_8a_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(sequence_e0_b5_adv, byte_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp135);
                  r800_fff_tmp136 = simd_and(sequence_e0_b5_adv, byte_range_a2_a3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp136);
                  byte_b6 = simd_and(r800_fff_tmp36, r800_fff_tmp52);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  byte_range_82_83 = simd_and(byte_range_80_8f, r800_fff_tmp49);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(35), sequence_e0_b6_adv));
                  r800_fff_tmp137 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp137);
                  byte_b7 = simd_and(r800_fff_tmp36, r800_fff_tmp58);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_8a = simd_and(byte_range_80_8f, r800_fff_tmp82);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(36), sequence_e0_b7_adv));
                  r800_fff_tmp138 = simd_and(sequence_e0_b7_adv, byte_8a);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp138);
                  r800_fff_tmp139 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp140 = simd_or(basis_bits.bit_4, r800_fff_tmp60);
                  r800_fff_tmp141 = simd_not(r800_fff_tmp140);
                  r800_fff_tmp142 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp141), simd_andc(r800_fff_tmp106, basis_bits.bit_3));
                  byte_range_8f_94 = simd_and(r800_fff_tmp139, r800_fff_tmp142);
                  r800_fff_tmp143 = simd_and(sequence_e0_b7_adv, byte_range_8f_94);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp143);
                  byte_96 = simd_and(r800_fff_tmp4, r800_fff_tmp52);
                  r800_fff_tmp144 = simd_and(sequence_e0_b7_adv, byte_96);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp144);
                  byte_range_98_9f = simd_and(r800_fff_tmp4, basis_bits.bit_4);
                  r800_fff_tmp145 = simd_and(sequence_e0_b7_adv, byte_range_98_9f);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp145);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp36, r800_fff_tmp49);
                  r800_fff_tmp146 = simd_and(sequence_e0_b7_adv, byte_range_b2_b3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp146);
                  byte_b8 = simd_and(r800_fff_tmp36, r800_fff_tmp71);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(37), sequence_e0_b8_adv));
                  r800_fff_tmp147 = simd_and(sequence_e0_b8_adv, byte_b1);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp147);
                  r800_fff_tmp148 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp149 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp148), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_ba = simd_and(r800_fff_tmp36, r800_fff_tmp149);
                  r800_fff_tmp150 = simd_and(sequence_e0_b8_adv, byte_range_b4_ba);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp150);
                  byte_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp75);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp151 = simd_xor(basis_bits.bit_4, r800_fff_tmp63);
                  byte_range_87_8e = simd_and(byte_range_80_8f, r800_fff_tmp151);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(38), sequence_e0_b9_adv));
                  r800_fff_tmp152 = simd_and(sequence_e0_b9_adv, byte_range_87_8e);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp152);
                  byte_ba = simd_and(r800_fff_tmp36, r800_fff_tmp82);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(39), sequence_e0_ba_adv));
                  r800_fff_tmp153 = simd_and(sequence_e0_ba_adv, byte_b1);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp153);
                  r800_fff_tmp154 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r800_fff_tmp36, r800_fff_tmp154);
                  r800_fff_tmp155 = simd_and(sequence_e0_ba_adv, byte_range_b4_b9);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp155);
                  r800_fff_tmp156 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp38), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(r800_fff_tmp37, r800_fff_tmp156);
                  r800_fff_tmp157 = simd_and(sequence_e0_ba_adv, byte_range_bb_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp157);
                  byte_bb = simd_and(r800_fff_tmp36, r800_fff_tmp86);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  byte_range_88_8d = simd_andc(r800_fff_tmp66, r800_fff_tmp7);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(40), sequence_e0_bb_adv));
                  r800_fff_tmp158 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp158);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp159 = simd_andc(r800_fff_tmp26, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r800_fff_tmp4, r800_fff_tmp159);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(41), sequence_e0_bc_adv));
                  r800_fff_tmp160 = simd_and(sequence_e0_bc_adv, byte_range_98_99);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp160);
                  r800_fff_tmp161 = simd_and(sequence_e0_bc_adv, byte_b5);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp161);
                  r800_fff_tmp162 = simd_and(sequence_e0_bc_adv, byte_b7);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp162);
                  r800_fff_tmp163 = simd_and(sequence_e0_bc_adv, byte_b9);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp163);
                  r800_fff_tmp164 = simd_and(sequence_e0_bc_adv, byte_range_be_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp164);
                  byte_bd = simd_and(r800_fff_tmp36, r800_fff_tmp95);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp165 = simd_or(basis_bits.bit_4, r800_fff_tmp47);
                  byte_range_b1_bf = simd_and(r800_fff_tmp36, r800_fff_tmp165);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(42), sequence_e0_bd_adv));
                  r800_fff_tmp166 = simd_and(sequence_e0_bd_adv, byte_range_b1_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp166);
                  byte_be = simd_and(r800_fff_tmp36, r800_fff_tmp102);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(43), sequence_e0_be_adv));
                  r800_fff_tmp167 = simd_and(sequence_e0_be_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp167);
                  byte_range_86_87 = simd_and(byte_range_80_8f, r800_fff_tmp99);
                  r800_fff_tmp168 = simd_and(sequence_e0_be_adv, byte_range_86_87);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp168);
                  r800_fff_tmp169 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp170 = simd_and(r800_fff_tmp41, r800_ffff_tmp3);
                  r800_fff_tmp171 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp169), simd_andc(r800_fff_tmp170, basis_bits.bit_3));
                  byte_range_8d_97 = simd_and(r800_fff_tmp139, r800_fff_tmp171);
                  r800_fff_tmp172 = simd_and(sequence_e0_be_adv, byte_range_8d_97);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp172);
                  r800_fff_tmp173 = simd_and(basis_bits.bit_3, r800_fff_tmp170);
                  r800_fff_tmp174 = simd_not(r800_fff_tmp173);
                  r800_fff_tmp175 = simd_and(basis_bits.bit_4, r800_fff_tmp47);
                  r800_fff_tmp176 = simd_and(basis_bits.bit_3, r800_fff_tmp175);
                  r800_fff_tmp177 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp174), simd_andc(r800_fff_tmp176, basis_bits.bit_2));
                  byte_range_99_bc = simd_and(r800_ffff_tmp5, r800_fff_tmp177);
                  r800_fff_tmp178 = simd_and(sequence_e0_be_adv, byte_range_99_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp178);
                  byte_bf = simd_and(r800_fff_tmp36, r800_fff_tmp106);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = simd_and(byte_range_80_8f, r800_fff_tmp52);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(44), sequence_e0_bf_adv));
                  r800_fff_tmp179 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r800_fff_tmp179);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 32);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(45, 24))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(45), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_not(r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_5, r1000_1fff_tmp6);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp8), simd_andc(r1000_1fff_tmp10, basis_bits.bit_3));
                  byte_range_ab_be = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp11);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(46), sequence_e1_80_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_80_adv, byte_range_ab_be);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp12);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp16 = simd_not(r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp18 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp16), simd_andc(r1000_1fff_tmp17, basis_bits.bit_4));
                  byte_range_96_99 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp18);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(47), sequence_e1_81_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_81_adv, byte_range_96_99);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp21 = simd_not(r1000_1fff_tmp20);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp5, basis_bits.bit_6);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_3, r1000_1fff_tmp22);
                  r1000_1fff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp21), simd_andc(r1000_1fff_tmp23, basis_bits.bit_2));
                  byte_range_9e_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_81_adv, byte_range_9e_a0);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp27 = simd_andc(r1000_1fff_tmp26, basis_bits.bit_4);
                  r1000_1fff_tmp28 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp28), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_a2_a4 = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_81_adv, byte_range_a2_a4);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_not(r1000_1fff_tmp17);
                  r1000_1fff_tmp32 = simd_and(basis_bits.bit_5, r1000_1fff_tmp6);
                  r1000_1fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp31), simd_andc(r1000_1fff_tmp32, basis_bits.bit_4));
                  byte_range_a7_ad = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_81_adv, byte_range_a7_ad);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp36 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_andc(r1000_1fff_tmp36, basis_bits.bit_4);
                  r1000_1fff_tmp38 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b1_b4 = simd_and(r1000_1fff_tmp37, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_81_adv, byte_range_b1_b4);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp41 = simd_andc(r1000_1fff_tmp40, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp41);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp42 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp31), simd_andc(r1000_1fff_tmp15, basis_bits.bit_4));
                  byte_range_82_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(48), sequence_e1_82_adv));
                  r1000_1fff_tmp43 = simd_and(sequence_e1_82_adv, byte_range_82_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp43);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_82_adv, byte_8f);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp46 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9d = simd_and(r1000_1fff_tmp45, r1000_1fff_tmp46);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_82_adv, byte_range_9a_9d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp47);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp5, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp48);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp49 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp5);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp49, r800_ffff_tmp3);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(49), sequence_e1_8d_adv));
                  r1000_1fff_tmp50 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp50);
                  r1000_1fff_tmp51 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp51);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp52 = simd_andc(r1000_1fff_tmp14, basis_bits.bit_4);
                  byte_range_92_94 = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp29);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(50), sequence_e1_9c_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_9c_adv, byte_range_92_94);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp53);
                  byte_range_b2_b4 = simd_and(r1000_1fff_tmp37, r1000_1fff_tmp29);
                  r1000_1fff_tmp54 = simd_and(sequence_e1_9c_adv, byte_range_b2_b4);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp54);
                  byte_9d = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp48);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp55 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_92_93 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp55);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(51), sequence_e1_9d_adv));
                  r1000_1fff_tmp56 = simd_and(sequence_e1_9d_adv, byte_range_92_93);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp56);
                  byte_range_b2_b3 = simd_and(r1000_1fff_tmp36, r1000_1fff_tmp55);
                  r1000_1fff_tmp57 = simd_and(sequence_e1_9d_adv, byte_range_b2_b3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp57);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp40);
                  byte_9e = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp58);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  byte_range_b4_bf = simd_and(r1000_1fff_tmp36, r800_ffff_tmp1);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(52), sequence_e1_9e_adv));
                  r1000_1fff_tmp59 = simd_and(sequence_e1_9e_adv, byte_range_b4_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp59);
                  byte_9f = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp7);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp60 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp61 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_80_93 = simd_andc(r1000_1fff_tmp60, r1000_1fff_tmp61);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(53), sequence_e1_9f_adv));
                  r1000_1fff_tmp62 = simd_and(sequence_e1_9f_adv, byte_range_80_93);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_9f_adv, byte_9d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp63);
                  byte_a0 = simd_andc(r1000_1fff_tmp26, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp64 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp65 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp66 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp65), simd_andc(r1000_1fff_tmp6, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp64, r1000_1fff_tmp66);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(54), sequence_e1_a0_adv));
                  r1000_1fff_tmp67 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp67);
                  byte_a2 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp41);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp68 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp69 = simd_and(r1000_1fff_tmp68, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp69);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(55), sequence_e1_a2_adv));
                  r1000_1fff_tmp70 = simd_and(sequence_e1_a2_adv, byte_a9);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp70);
                  byte_a4 = simd_and(r1000_1fff_tmp26, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  byte_range_a0_ab = simd_andc(r1000_1fff_tmp26, r1000_1fff_tmp5);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(56), sequence_e1_a4_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_a4_adv, byte_range_a0_ab);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp71);
                  byte_range_b0_bb = simd_andc(r1000_1fff_tmp36, r1000_1fff_tmp5);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_a4_adv, byte_range_b0_bb);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp40);
                  byte_a6 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp73);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  byte_range_b0_bf = r1000_1fff_tmp36;
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(57), sequence_e1_a6_adv));
                  r1000_1fff_tmp74 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_a7 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp75);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(58), sequence_e1_a7_adv));
                  r1000_1fff_tmp76 = simd_and(sequence_e1_a7_adv, byte_80);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp76);
                  r1000_1fff_tmp77 = simd_andc(r1000_1fff_tmp68, basis_bits.bit_6);
                  byte_range_88_89 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a7_adv, byte_range_88_89);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp78);
                  r1000_1fff_tmp79 = simd_andc(r1000_1fff_tmp68, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp79);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp80 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp81 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp80), simd_andc(r1000_1fff_tmp32, basis_bits.bit_4));
                  byte_range_97_9b = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp81);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(59), sequence_e1_a8_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a8_adv, byte_range_97_9b);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp82);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp83 = simd_not(r1000_1fff_tmp32);
                  r1000_1fff_tmp84 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp85 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp83), simd_andc(r1000_1fff_tmp84, basis_bits.bit_4));
                  byte_range_95_9e = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp85);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(60), sequence_e1_a9_adv));
                  r1000_1fff_tmp86 = simd_and(sequence_e1_a9_adv, byte_range_95_9e);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp86);
                  r1000_1fff_tmp87 = simd_and(r1000_1fff_tmp5, r800_ffff_tmp3);
                  r1000_1fff_tmp88 = simd_and(basis_bits.bit_3, r1000_1fff_tmp87);
                  byte_range_a0_bc = simd_andc(r1000_1fff_tmp4, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(sequence_e1_a9_adv, byte_range_a0_bc);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp89);
                  byte_bf = simd_and(byte_range_b0_bf, r1000_1fff_tmp7);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_a9_adv, byte_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_and(r1000_1fff_tmp68, r1000_1fff_tmp40);
                  byte_aa = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp91);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp92 = simd_and(basis_bits.bit_4, r1000_1fff_tmp32);
                  byte_range_b0_be = simd_andc(byte_range_b0_bf, r1000_1fff_tmp92);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(61), sequence_e1_aa_adv));
                  r1000_1fff_tmp93 = simd_and(sequence_e1_aa_adv, byte_range_b0_be);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp93);
                  byte_ac = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp51);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp94 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r1000_1fff_tmp94, r1000_1fff_tmp84);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(62), sequence_e1_ac_adv));
                  r1000_1fff_tmp95 = simd_and(sequence_e1_ac_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp95);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_ac_adv, byte_range_b4_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp96);
                  byte_ad = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp48);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(63), sequence_e1_ad_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_ad_adv, byte_range_80_84);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_not(r800_ffff_tmp1);
                  r1000_1fff_tmp99 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp98), simd_andc(r1000_1fff_tmp10, basis_bits.bit_3));
                  byte_range_ab_b3 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_ad_adv, byte_range_ab_b3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp100);
                  byte_ae = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp58);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp101 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r1000_1fff_tmp101, r1000_1fff_tmp6);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(64), sequence_e1_ae_adv));
                  r1000_1fff_tmp102 = simd_and(sequence_e1_ae_adv, byte_range_80_82);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp104 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp31), simd_andc(r1000_1fff_tmp103, basis_bits.bit_4));
                  byte_range_a1_ad = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ae_adv, byte_range_a1_ad);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp105);
                  byte_af = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp7);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp106 = simd_or(basis_bits.bit_4, r1000_1fff_tmp17);
                  r1000_1fff_tmp107 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp98), simd_andc(r1000_1fff_tmp106, basis_bits.bit_3));
                  byte_range_a6_b3 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp107);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(65), sequence_e1_af_adv));
                  r1000_1fff_tmp108 = simd_and(sequence_e1_af_adv, byte_range_a6_b3);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp108);
                  byte_b0 = simd_andc(byte_range_b0_bf, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp109 = simd_not(basis_bits.bit_4);
                  r1000_1fff_tmp110 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp109), simd_andc(r800_ffff_tmp1, basis_bits.bit_3));
                  byte_range_a4_b7 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp110);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(66), sequence_e1_b0_adv));
                  r1000_1fff_tmp111 = simd_and(sequence_e1_b0_adv, byte_range_a4_b7);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp111);
                  r1000_1fff_tmp112 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp112);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp113 = simd_andc(r1000_1fff_tmp14, r800_ffff_tmp1);
                  byte_range_90_92 = simd_andc(r1000_1fff_tmp113, r1000_1fff_tmp6);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(67), sequence_e1_b3_adv));
                  r1000_1fff_tmp114 = simd_and(sequence_e1_b3_adv, byte_range_90_92);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp114);
                  r1000_1fff_tmp115 = simd_and(basis_bits.bit_4, r1000_1fff_tmp103);
                  r1000_1fff_tmp116 = simd_or(basis_bits.bit_3, r1000_1fff_tmp115);
                  r1000_1fff_tmp117 = simd_not(r1000_1fff_tmp116);
                  r1000_1fff_tmp118 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp117), simd_andc(r1000_1fff_tmp61, basis_bits.bit_2));
                  byte_range_94_a8 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp118);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_b3_adv, byte_range_94_a8);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp119);
                  r1000_1fff_tmp120 = simd_and(sequence_e1_b3_adv, byte_ad);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp120);
                  r1000_1fff_tmp121 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  r1000_1fff_tmp122 = simd_and(sequence_e1_b3_adv, byte_range_b2_b4);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp122);
                  byte_range_b8_b9 = simd_and(byte_range_b0_bf, r1000_1fff_tmp77);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_b3_adv, byte_range_b8_b9);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp123);
                  byte_b7 = simd_and(byte_range_b0_bf, r1000_1fff_tmp75);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp124 = simd_and(basis_bits.bit_3, r1000_1fff_tmp106);
                  r1000_1fff_tmp125 = simd_and(basis_bits.bit_2, r1000_1fff_tmp124);
                  byte_range_80_b5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp125);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(68), sequence_e1_b7_adv));
                  r1000_1fff_tmp126 = simd_and(sequence_e1_b7_adv, byte_range_80_b5);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp126);
                  byte_range_bc_bf = simd_and(byte_range_b0_bf, r1000_1fff_tmp5);
                  r1000_1fff_tmp127 = simd_and(sequence_e1_b7_adv, byte_range_bc_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r1000_1fff_tmp127);
                }
                else {
                  carryQ.CarryDequeueEnqueue(45, 24);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 56);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(69, 8))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(69, 5))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(69), r2000_2fff_tmp5));
                  sequence_e2_83 = simd_and(r2000_2fff_tmp5, byte_83);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_not(r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp8), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp9);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(70), sequence_e2_83_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_83_adv, byte_range_90_b0);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp12 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp11);
                  byte_b3 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp4);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp14 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp3);
                  r2000_2fff_tmp17 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp14), simd_andc(r2000_2fff_tmp16, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp17);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(71), sequence_e2_b3_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp19);
                  byte_b5 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp20);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_bf = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp16);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(72), sequence_e2_b5_adv));
                  r2000_2fff_tmp21 = simd_and(sequence_e2_b5_adv, byte_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b7 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp22);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_a0_bf = r2000_2fff_tmp13;
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(73), sequence_e2_b7_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r2000_2fff_tmp23);
                }
                else {
                  carryQ.CarryDequeueEnqueue(69, 5);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(74, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(74), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_af = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(75), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_aa_af);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r3000_4dff_tmp8);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp12 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(76), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
                  struct_gc_M.cc = simd_or(struct_gc_M.cc, r3000_4dff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(74, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(69, 8);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 64);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(77, 19))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(77), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp10);
              ra000_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp12), simd_andc(ra000_ffff_tmp14, basis_bits.bit_3));
              byte_range_af_b2 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp15);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(78), sequence_ea_99_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_99_adv, byte_range_af_b2);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp20), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_b4_bd = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(sequence_ea_99_adv, byte_range_b4_bd);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp22);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(79), sequence_ea_9a_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9a_adv, byte_9f);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp24);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp25 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp25);
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(80), sequence_ea_9b_adv));
              ra000_ffff_tmp26 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp28 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp28);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp30 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_82 = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp31);
              carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(81), sequence_ea_a0_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ea_a0_adv, byte_82);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_86 = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(sequence_ea_a0_adv, byte_86);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp34);
              byte_8b = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp24);
              ra000_ffff_tmp35 = simd_and(sequence_ea_a0_adv, byte_8b);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp27, basis_bits.bit_4);
              ra000_ffff_tmp37 = simd_or(basis_bits.bit_5, ra000_ffff_tmp10);
              byte_range_a3_a7 = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(sequence_ea_a0_adv, byte_range_a3_a7);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp38);
              byte_a2 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp31);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp30, ra000_ffff_tmp25);
              carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(82), sequence_ea_a2_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_a2_adv, byte_range_80_81);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp39);
              byte_range_b4_bf = simd_and(ra000_ffff_tmp18, r800_ffff_tmp1);
              ra000_ffff_tmp40 = simd_and(sequence_ea_a2_adv, byte_range_b4_bf);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp40);
              ra000_ffff_tmp41 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp41);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp42 = simd_andc(ra000_ffff_tmp30, basis_bits.bit_4);
              ra000_ffff_tmp43 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
              byte_range_80_84 = simd_andc(ra000_ffff_tmp42, ra000_ffff_tmp43);
              carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(83), sequence_ea_a3_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ea_a3_adv, byte_range_80_84);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(basis_bits.bit_3, ra000_ffff_tmp25);
              byte_range_a0_b1 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ea_a3_adv, byte_range_a0_b1);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp46);
              byte_a4 = simd_and(ra000_ffff_tmp27, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp47 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp19);
              byte_range_a6_ad = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp47);
              carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(84), sequence_ea_a4_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp6);
              byte_a5 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp49);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp50 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp51 = simd_not(r800_ffff_tmp1);
              ra000_ffff_tmp52 = simd_and(basis_bits.bit_5, ra000_ffff_tmp10);
              ra000_ffff_tmp53 = simd_or(basis_bits.bit_4, ra000_ffff_tmp52);
              ra000_ffff_tmp54 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp51), simd_andc(ra000_ffff_tmp53, basis_bits.bit_3));
              byte_range_87_93 = simd_and(ra000_ffff_tmp50, ra000_ffff_tmp54);
              carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(85), sequence_ea_a5_adv));
              ra000_ffff_tmp55 = simd_and(sequence_ea_a5_adv, byte_range_87_93);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp55);
              byte_a6 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp33);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              byte_range_80_83 = simd_andc(ra000_ffff_tmp30, r800_ffff_tmp1);
              carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(86), sequence_ea_a6_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ea_a6_adv, byte_range_80_83);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_or(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_b3_bf = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp57);
              ra000_ffff_tmp58 = simd_and(sequence_ea_a6_adv, byte_range_b3_bf);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_a7 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp59);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_80 = simd_andc(ra000_ffff_tmp30, ra000_ffff_tmp28);
              carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(87), sequence_ea_a7_adv));
              ra000_ffff_tmp60 = simd_and(sequence_ea_a7_adv, byte_80);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_and(sequence_ea_a7_adv, byte_a5);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp62);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp63 = simd_not(ra000_ffff_tmp53);
              ra000_ffff_tmp64 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp65 = simd_and(basis_bits.bit_4, ra000_ffff_tmp64);
              ra000_ffff_tmp66 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp63), simd_andc(ra000_ffff_tmp65, basis_bits.bit_3));
              byte_range_a9_b6 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp66);
              carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(88), sequence_ea_a8_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ea_a8_adv, byte_range_a9_b6);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp67);
              byte_a9 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp7);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_83 = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp41);
              carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(89), sequence_ea_a9_adv));
              ra000_ffff_tmp68 = simd_and(sequence_ea_a9_adv, byte_83);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp68);
              ra000_ffff_tmp69 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_6);
              byte_range_8c_8d = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp69);
              ra000_ffff_tmp70 = simd_and(sequence_ea_a9_adv, byte_range_8c_8d);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp18, basis_bits.bit_4);
              ra000_ffff_tmp72 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp73 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp72), simd_andc(ra000_ffff_tmp10, basis_bits.bit_5));
              byte_range_bb_bd = simd_and(ra000_ffff_tmp71, ra000_ffff_tmp73);
              ra000_ffff_tmp74 = simd_and(sequence_ea_a9_adv, byte_range_bb_bd);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp74);
              byte_aa = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              byte_b0 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp28);
              carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(90), sequence_ea_aa_adv));
              ra000_ffff_tmp75 = simd_and(sequence_ea_aa_adv, byte_b0);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp75);
              ra000_ffff_tmp76 = simd_andc(ra000_ffff_tmp18, basis_bits.bit_4);
              ra000_ffff_tmp77 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp77), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_b2_b4 = simd_and(ra000_ffff_tmp76, ra000_ffff_tmp78);
              ra000_ffff_tmp79 = simd_and(sequence_ea_aa_adv, byte_range_b2_b4);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_not(ra000_ffff_tmp64);
              ra000_ffff_tmp81 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp80), simd_andc(ra000_ffff_tmp52, basis_bits.bit_4));
              byte_range_b7_b8 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_and(sequence_ea_aa_adv, byte_range_b7_b8);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp82);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp13, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_and(sequence_ea_aa_adv, byte_range_be_bf);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp84);
              byte_ab = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp24);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp85 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp1);
              byte_81 = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp85);
              carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(91), sequence_ea_ab_adv));
              ra000_ffff_tmp86 = simd_and(sequence_ea_ab_adv, byte_81);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp86);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp27, basis_bits.bit_4);
              byte_range_ab_af = simd_and(ra000_ffff_tmp87, ra000_ffff_tmp37);
              ra000_ffff_tmp88 = simd_and(sequence_ea_ab_adv, byte_range_ab_af);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp88);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp2);
              ra000_ffff_tmp90 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b5_b6 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp90);
              ra000_ffff_tmp91 = simd_and(sequence_ea_ab_adv, byte_range_b5_b6);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp91);
              byte_af = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp14);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp92 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_a3_aa = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp92);
              carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(92), sequence_ea_af_adv));
              ra000_ffff_tmp93 = simd_and(sequence_ea_af_adv, byte_range_a3_aa);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp93);
              byte_range_ac_ad = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp69);
              ra000_ffff_tmp94 = simd_and(sequence_ea_af_adv, byte_range_ac_ad);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp94);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp14);
              ra000_ffff_tmp95 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp95);
              carryQ.cq[93] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(93), ra000_ffff_tmp96));
              sequence_ef_ac = simd_and(ra000_ffff_tmp96, byte_ac);
              byte_ef_adv = ra000_ffff_tmp96;
              ra000_ffff_tmp97 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp97);
              carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(94), sequence_ef_ac_adv));
              ra000_ffff_tmp98 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp98);
              byte_b8 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp62);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              byte_range_80_8f = ra000_ffff_tmp30;
              carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(95), sequence_ef_b8_adv));
              ra000_ffff_tmp99 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp99);
              ra000_ffff_tmp100 = simd_and(basis_bits.bit_4, ra000_ffff_tmp19);
              byte_range_a0_ad = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp100);
              ra000_ffff_tmp101 = simd_and(sequence_ef_b8_adv, byte_range_a0_ad);
              struct_gc_M.cc = simd_or(struct_gc_M.cc, ra000_ffff_tmp101);
            }
            else {
              carryQ.CarryDequeueEnqueue(77, 19);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(12, 84);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(96, 43))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(96), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(97), r10000_10ffff_tmp13));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp13, byte_87);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_bd = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(98), sequence_f0_90_87_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp3);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(99), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp22);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp24 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp24), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_b6_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp26);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(100), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_8d_adv, byte_range_b6_ba);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp28);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            byte_range_81_83 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp2);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(101), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_a8_adv, byte_range_81_83);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            r10000_10ffff_tmp32 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_85_86 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a8_adv, byte_range_85_86);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp33);
            byte_range_8c_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            r10000_10ffff_tmp34 = simd_and(sequence_f0_90_a8_adv, byte_range_8c_8f);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp19);
            byte_range_b8_ba = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp11);
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_a8_adv, byte_range_b8_ba);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp11);
            byte_bf = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_a8_adv, byte_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp38);
            byte_ab = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp20);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp10);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp32);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(102), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_ab_adv, byte_range_a5_a6);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp41);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(103), r10000_10ffff_tmp42));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp42, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp42;
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp11);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(104), sequence_f0_91_80_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_91_80_adv, byte_range_80_82);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp43);
            byte_range_b8_bf = simd_and(r10000_10ffff_tmp14, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_80_adv, byte_range_b8_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp44);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp41);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp45 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp46 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp11);
            byte_range_80_86 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(105), sequence_f0_91_81_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_91_81_adv, byte_range_80_86);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_81_adv, byte_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp49, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp50);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(106), sequence_f0_91_82_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_91_82_adv, byte_range_80_82);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_b0_ba = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_82_adv, byte_range_b0_ba);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp54);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(107), sequence_f0_91_84_adv));
            r10000_10ffff_tmp55 = simd_and(sequence_f0_91_84_adv, byte_range_80_82);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp57 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp58 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp57);
            r10000_10ffff_tmp59 = simd_not(r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp46);
            r10000_10ffff_tmp61 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp59), simd_andc(r10000_10ffff_tmp60, basis_bits.bit_3));
            byte_range_a7_b4 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(sequence_f0_91_84_adv, byte_range_a7_b4);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp63);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp64 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_b3 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp64);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(108), sequence_f0_91_85_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_91_85_adv, byte_b3);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp49);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp66);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(109), sequence_f0_91_86_adv));
            r10000_10ffff_tmp67 = simd_and(sequence_f0_91_86_adv, byte_range_80_82);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_b3_bf = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(sequence_f0_91_86_adv, byte_range_b3_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp69);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(110), sequence_f0_91_87_adv));
            r10000_10ffff_tmp70 = simd_and(sequence_f0_91_87_adv, byte_80);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp70);
            byte_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp71 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp72 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_3));
            byte_range_ac_b7 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp72);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(111), sequence_f0_91_88_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_91_88_adv, byte_range_ac_b7);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp73);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp74 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp52);
            r10000_10ffff_tmp75 = simd_not(r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp37);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp75), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_2));
            byte_range_9f_aa = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp77);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(112), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_91_8b_adv, byte_range_9f_aa);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp79);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(113), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_91_8c_adv, byte_range_81_83);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp80);
            byte_bc = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp79);
            r10000_10ffff_tmp81 = simd_and(sequence_f0_91_8c_adv, byte_bc);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp81);
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp82);
            r10000_10ffff_tmp83 = simd_and(sequence_f0_91_8c_adv, byte_range_be_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp83);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp57);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(114), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_91_8d_adv, byte_range_80_84);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp86 = simd_not(r10000_10ffff_tmp85);
            r10000_10ffff_tmp87 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp86), simd_andc(r10000_10ffff_tmp46, basis_bits.bit_4));
            byte_range_87_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(sequence_f0_91_8d_adv, byte_range_87_88);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp90 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp91 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp90), simd_andc(r10000_10ffff_tmp11, basis_bits.bit_5));
            byte_range_8b_8d = simd_and(r10000_10ffff_tmp89, r10000_10ffff_tmp91);
            r10000_10ffff_tmp92 = simd_and(sequence_f0_91_8d_adv, byte_range_8b_8d);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp92);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            r10000_10ffff_tmp93 = simd_and(sequence_f0_91_8d_adv, byte_97);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_a2_a3 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp94);
            r10000_10ffff_tmp95 = simd_and(sequence_f0_91_8d_adv, byte_range_a2_a3);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp95);
            r10000_10ffff_tmp96 = simd_not(r10000_10ffff_tmp57);
            r10000_10ffff_tmp97 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp96), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_a6_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_and(sequence_f0_91_8d_adv, byte_range_a6_ac);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4);
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp99, r10000_10ffff_tmp57);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_91_8d_adv, byte_range_b0_b4);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp100);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp50);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_b0_bf = r10000_10ffff_tmp14;
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(115), sequence_f0_91_92_adv));
            r10000_10ffff_tmp101 = simd_and(sequence_f0_91_92_adv, byte_range_b0_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp101);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp64);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            byte_range_80_83 = r10000_10ffff_tmp29;
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(116), sequence_f0_91_93_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_91_93_adv, byte_range_80_83);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp102);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp66);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp103 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp25);
            r10000_10ffff_tmp104 = simd_not(r10000_10ffff_tmp103);
            r10000_10ffff_tmp105 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp104), simd_andc(r10000_10ffff_tmp37, basis_bits.bit_3));
            byte_range_af_b5 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp105);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(117), sequence_f0_91_96_adv));
            r10000_10ffff_tmp106 = simd_and(sequence_f0_91_96_adv, byte_range_af_b5);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp106);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_91_96_adv, byte_range_b8_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp107);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(118), sequence_f0_91_97_adv));
            r10000_10ffff_tmp108 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp108);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp28);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(119), sequence_f0_91_98_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_91_98_adv, byte_range_b0_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp16);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp110);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(120), sequence_f0_91_99_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_91_99_adv, byte_80);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp111);
            r10000_10ffff_tmp112 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp49);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp112);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp52, basis_bits.bit_3));
            byte_range_ab_b7 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp113);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(121), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp114 = simd_and(sequence_f0_91_9a_adv, byte_range_ab_b7);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp114);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(122), r10000_10ffff_tmp115));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp115, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp115;
            r10000_10ffff_tmp116 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(123), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp117 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b4);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp117);
            byte_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp79);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp116, r10000_10ffff_tmp46);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(124), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_96_ac_adv, byte_range_b0_b6);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp118);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp119 = simd_not(r10000_10ffff_tmp76);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp121 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp119), simd_andc(r10000_10ffff_tmp120, basis_bits.bit_2));
            byte_range_91_be = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp121);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(125), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp122 = simd_and(sequence_f0_96_bd_adv, byte_range_91_be);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp122);
            r10000_10ffff_tmp123 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp49);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp123);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp124 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp125 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            r10000_10ffff_tmp126 = simd_not(r10000_10ffff_tmp125);
            r10000_10ffff_tmp127 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp126), simd_andc(r10000_10ffff_tmp37, basis_bits.bit_3));
            byte_range_8f_92 = simd_and(r10000_10ffff_tmp124, r10000_10ffff_tmp127);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(126), sequence_f0_96_be_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_96_be_adv, byte_range_8f_92);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp128);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp50);
            carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(127), r10000_10ffff_tmp129));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp129, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp129;
            r10000_10ffff_tmp130 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp15);
            byte_range_9d_9e = simd_and(r10000_10ffff_tmp130, r10000_10ffff_tmp32);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(128), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp131 = simd_and(sequence_f0_9b_b2_adv, byte_range_9d_9e);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp131);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(129), r10000_10ffff_tmp132));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp132, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp132;
            r10000_10ffff_tmp133 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp134 = simd_not(r10000_10ffff_tmp133);
            r10000_10ffff_tmp135 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp134), simd_andc(r10000_10ffff_tmp57, basis_bits.bit_4));
            byte_range_a5_a9 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp135);
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(130), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_9d_85_adv, byte_range_a5_a9);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp136);
            r10000_10ffff_tmp137 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            r10000_10ffff_tmp138 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp126), simd_andc(r10000_10ffff_tmp137, basis_bits.bit_3));
            byte_range_ad_b2 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp138);
            r10000_10ffff_tmp139 = simd_and(sequence_f0_9d_85_adv, byte_range_ad_b2);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp140, r10000_10ffff_tmp23);
            r10000_10ffff_tmp141 = simd_and(sequence_f0_9d_85_adv, byte_range_bb_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp141);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(131), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_9d_86_adv, byte_range_80_82);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp142);
            r10000_10ffff_tmp143 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp144 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp143), simd_andc(r10000_10ffff_tmp57, basis_bits.bit_4));
            byte_range_85_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp144);
            r10000_10ffff_tmp145 = simd_and(sequence_f0_9d_86_adv, byte_range_85_8b);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp145);
            r10000_10ffff_tmp146 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp147 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_aa_ad = simd_and(r10000_10ffff_tmp146, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_and(sequence_f0_9d_86_adv, byte_range_aa_ad);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp148);
            byte_89 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp110);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp149 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp150 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp149), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp150);
            carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(132), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp151);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp123);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_a3 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp64);
            carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(133), r10000_10ffff_tmp152));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp152, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp152;
            r10000_10ffff_tmp153 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            byte_range_90_96 = simd_andc(r10000_10ffff_tmp153, r10000_10ffff_tmp46);
            carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(134), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_9e_a3_adv, byte_range_90_96);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp154);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp64);
            carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(135), r10000_10ffff_tmp155));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp155, byte_a0);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp11);
            carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(136), r10000_10ffff_tmp156));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp156, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(137), r10000_10ffff_tmp157));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp157, byte_range_80_bf);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp158 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            sequence_f3_a0_87 = simd_and(r10000_10ffff_tmp156, byte_87);
            r10000_10ffff_tmp159 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_f3_adv = r10000_10ffff_tmp155;
            sequence_f3_a0_adv = r10000_10ffff_tmp156;
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(138), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f3_a0_87_adv, byte_range_80_af);
            struct_gc_M.cc = simd_or(struct_gc_M.cc, r10000_10ffff_tmp160);
          }
          else {
            carryQ.CarryDequeueEnqueue(96, 43);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 139);
        }
        carryQ.CarryQ_Adjust(139);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<139, 0> carryQ;
  };

  struct Property_gc_N {
  Property_gc_N() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_N & struct_gc_N) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, byte_range_30_39, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_b2_b3, byte_c2_adv, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, byte_b9, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, byte_range_bc_be;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, byte_range_d8_db;
		BitBlock byte_d9, r600_6ff_tmp1, r600_6ff_tmp2, byte_range_a0_a9, byte_d9_adv;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, byte_db, byte_range_b0_b9, byte_db_adv;
		BitBlock r600_6ff_tmp5, r80_7ff_tmp20, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_df, r7c0_7ff_tmp1, byte_range_80_89, byte_df_adv, r7c0_7ff_tmp2;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, byte_e0, r800_fff_tmp1;
		BitBlock r800_fff_tmp2, r800_fff_tmp3, byte_a5, r800_fff_tmp4, sequence_e0_a5;
		BitBlock byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6, byte_range_a6_af;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock byte_a7, sequence_e0_a7, sequence_e0_a7_adv, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, byte_range_b4_b9;
		BitBlock r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16, byte_a9;
		BitBlock sequence_e0_a9, sequence_e0_a9_adv, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock byte_ab, sequence_e0_ab, sequence_e0_ab_adv, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, byte_ad, sequence_e0_ad;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp22, r800_fff_tmp23, byte_range_b2_b7;
		BitBlock r800_fff_tmp24, r800_fff_tmp25, byte_af, sequence_e0_af;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock byte_range_a6_b2, sequence_e0_af_adv, r800_fff_tmp30, r800_fff_tmp31;
		BitBlock byte_b1, sequence_e0_b1, sequence_e0_b1_adv, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, byte_range_b8_be, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, byte_b3, sequence_e0_b3, sequence_e0_b3_adv;
		BitBlock r800_fff_tmp37, byte_b5, sequence_e0_b5, r800_fff_tmp38;
		BitBlock byte_range_a6_b5, sequence_e0_b5_adv, r800_fff_tmp39, byte_b7;
		BitBlock sequence_e0_b7, sequence_e0_b7_adv, r800_fff_tmp40, sequence_e0_b9;
		BitBlock r800_fff_tmp41, r800_fff_tmp42, byte_range_90_99, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp43, byte_bb, sequence_e0_bb, sequence_e0_bb_adv;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp46, byte_range_a0_b3, sequence_e0_bc_adv, r800_fff_tmp47;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_81, r1000_1fff_tmp3, sequence_e1_81;
		BitBlock byte_e1_adv, sequence_e1_81_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, byte_82, sequence_e1_82, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, sequence_e1_82_adv, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_8d, sequence_e1_8d;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock byte_range_a9_bc, sequence_e1_8d_adv, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21, byte_9b;
		BitBlock sequence_e1_9b, r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock byte_range_ae_b0, sequence_e1_9b_adv, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, byte_9f, sequence_e1_9f, r1000_1fff_tmp27;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, byte_a0, sequence_e1_a0, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, sequence_e1_a5, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, byte_range_86_8f, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, sequence_e1_a7, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, byte_range_90_9a, sequence_e1_a7_adv;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, byte_aa, sequence_e1_aa;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, byte_ae, sequence_e1_ae, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp45, sequence_e1_b1, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp46, r1000_1fff_tmp47, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, byte_b0, sequence_e2_81_adv, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, sequence_e2_82;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_85;
		BitBlock sequence_e2_85, byte_range_90_bf, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, byte_range_80_82;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, byte_range_85_89, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, r2000_2fff_tmp23, byte_91, sequence_e2_91;
		BitBlock byte_range_a0_bf, sequence_e2_91_adv, r2000_2fff_tmp24, byte_92;
		BitBlock sequence_e2_92, r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock byte_range_80_9b, sequence_e2_92_adv, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, byte_93, sequence_e2_93, r2000_2fff_tmp30;
		BitBlock byte_range_aa_bf, sequence_e2_93_adv, r2000_2fff_tmp31;
		BitBlock r2000_2fff_tmp32, byte_9d, sequence_e2_9d, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, byte_range_b6_bf, sequence_e2_9d_adv;
		BitBlock r2000_2fff_tmp35, r2000_2fff_tmp36, byte_9e, sequence_e2_9e;
		BitBlock r2000_2fff_tmp37, byte_range_80_93, sequence_e2_9e_adv;
		BitBlock r2000_2fff_tmp38, sequence_e2_b3, byte_bd, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp39, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock byte_80, r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv;
		BitBlock r3000_4dff_tmp5, byte_87, sequence_e3_80_adv, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock byte_range_a1_a9, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, byte_range_b8_ba;
		BitBlock r3000_4dff_tmp15, r3000_4dff_tmp16, sequence_e3_86, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock byte_range_92_95, sequence_e3_86_adv, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, byte_88, sequence_e3_88, sequence_e3_88_adv;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, r3000_4dff_tmp25, byte_89;
		BitBlock sequence_e3_89, byte_range_88_8f, sequence_e3_89_adv;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, byte_range_91_9f;
		BitBlock r3000_4dff_tmp28, r3000_4dff_tmp29, byte_8a, sequence_e3_8a;
		BitBlock sequence_e3_8a_adv, r3000_4dff_tmp30, byte_range_b1_bf;
		BitBlock r3000_4dff_tmp31, r800_ffff_tmp11, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_98, ra000_ffff_tmp7;
		BitBlock sequence_ea_98, byte_ea_adv, ra000_ffff_tmp8, sequence_ea_98_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, sequence_ea_9b;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, sequence_ea_a0, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_range_b0_b5, sequence_ea_a0_adv;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, byte_a3, sequence_ea_a3;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp20, byte_a4, sequence_ea_a4;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, sequence_ea_a4_adv;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, sequence_ea_a9;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, sequence_ea_af, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp32, byte_ef, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock sequence_ef_bc, byte_ef_adv, sequence_ef_bc_adv, ra000_ffff_tmp35;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, byte_84, r10000_10ffff_tmp12, sequence_f0_90_84;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_range_87_b3, sequence_f0_90_84_adv, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, sequence_f0_90_85;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, byte_range_80_b8, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock sequence_f0_90_86, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock byte_range_8a_8b, sequence_f0_90_86_adv, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, byte_8b, sequence_f0_90_8b, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock byte_range_a1_bb, sequence_f0_90_8b_adv, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, byte_8c, sequence_f0_90_8c, r10000_10ffff_tmp40;
		BitBlock byte_range_a0_a3, sequence_f0_90_8c_adv, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, sequence_f0_90_8d, r10000_10ffff_tmp43;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, byte_8f, sequence_f0_90_8f;
		BitBlock r10000_10ffff_tmp48, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock byte_range_91_95, sequence_f0_90_8f_adv, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, sequence_f0_90_92, sequence_f0_90_92_adv;
		BitBlock r10000_10ffff_tmp53, byte_a1, sequence_f0_90_a1, byte_range_98_9f;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, byte_range_b9_bf, r10000_10ffff_tmp57, byte_a2;
		BitBlock sequence_f0_90_a2, byte_range_a7_af, sequence_f0_90_a2_adv;
		BitBlock r10000_10ffff_tmp58, sequence_f0_90_a4, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, r10000_10ffff_tmp61, byte_range_96_9b;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock sequence_f0_90_a9, byte_range_80_87, sequence_f0_90_a9_adv;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock byte_range_bd_be, r10000_10ffff_tmp67, sequence_f0_90_aa;
		BitBlock r10000_10ffff_tmp68, byte_range_9d_9f, sequence_f0_90_aa_adv;
		BitBlock r10000_10ffff_tmp69, sequence_f0_90_ab, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, byte_range_ab_af, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp72, sequence_f0_90_ad, sequence_f0_90_ad_adv;
		BitBlock r10000_10ffff_tmp73, byte_range_b8_bf, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, sequence_f0_90_ae, byte_range_a9_af;
		BitBlock sequence_f0_90_ae_adv, r10000_10ffff_tmp76, sequence_f0_90_b9;
		BitBlock r10000_10ffff_tmp77, byte_range_a0_be, sequence_f0_90_b9_adv;
		BitBlock r10000_10ffff_tmp78, sequence_f0_91, r10000_10ffff_tmp79;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, r10000_10ffff_tmp80;
		BitBlock r10000_10ffff_tmp81, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock byte_range_92_af, sequence_f0_91_81_adv, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, byte_83, sequence_f0_91_83;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp86, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp87, sequence_f0_91_84_adv, r10000_10ffff_tmp88;
		BitBlock r10000_10ffff_tmp89, sequence_f0_91_87, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, byte_range_a1_b4;
		BitBlock r10000_10ffff_tmp95, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp96, sequence_f0_91_93, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp97, byte_99, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp98, sequence_f0_91_9b;
		BitBlock sequence_f0_91_9b_adv, r10000_10ffff_tmp99, sequence_f0_91_a3;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, byte_range_a0_b2;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp102, sequence_f0_92;
		BitBlock r10000_10ffff_tmp103, sequence_f0_92_90, sequence_f0_92_adv;
		BitBlock byte_range_80_bf, sequence_f0_92_90_adv, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, sequence_f0_92_91, r10000_10ffff_tmp106;
		BitBlock r10000_10ffff_tmp107, byte_range_80_ae, sequence_f0_92_91_adv;
		BitBlock r10000_10ffff_tmp108, byte_96, sequence_f0_96, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, sequence_f0_96_a9, sequence_f0_96_adv;
		BitBlock sequence_f0_96_a9_adv, r10000_10ffff_tmp111, sequence_f0_96_ad;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp112, r10000_10ffff_tmp113;
		BitBlock r10000_10ffff_tmp114, r10000_10ffff_tmp115, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, byte_range_9b_a1, r10000_10ffff_tmp118;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock sequence_f0_9d_8d, sequence_f0_9d_adv, r10000_10ffff_tmp121;
		BitBlock byte_range_a0_b1, sequence_f0_9d_8d_adv, r10000_10ffff_tmp122;
		BitBlock sequence_f0_9d_9f, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock r10000_10ffff_tmp125, byte_range_8e_bf, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp126, sequence_f0_9e, r10000_10ffff_tmp127;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, byte_range_87_8f;
		BitBlock sequence_f0_9e_a3_adv, r10000_10ffff_tmp128, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp129, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock r10000_10ffff_tmp130, byte_range_80_8c, sequence_f0_9f_84_adv;
		BitBlock r10000_10ffff_tmp131;




        struct_gc_N.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        byte_range_30_39 = simd_andc(tmp3, tmp5);
        struct_gc_N.cc = simd_or(struct_gc_N.cc, byte_range_30_39);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 102))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp2);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_6, r80_7ff_tmp3);
            byte_range_b2_b3 = simd_and(r80_7ff_tmp7, r80_7ff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp9 = simd_and(byte_c2_adv, byte_range_b2_b3);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp10, r80_7ff_tmp11);
            byte_b9 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(byte_c2_adv, byte_b9);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp7, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bc_be = simd_andc(r80_7ff_tmp15, r80_7ff_tmp16);
            r80_7ff_tmp17 = simd_and(byte_c2_adv, byte_range_bc_be);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp19 = simd_and(byte_range_c0_ff, r80_7ff_tmp18);
            byte_range_d8_db = simd_and(r80_7ff_tmp19, r80_7ff_tmp10);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(1, 2))) {
              byte_d9 = simd_and(r80_7ff_tmp19, r80_7ff_tmp12);
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_range_a0_a9 = simd_andc(r600_6ff_tmp2, tmp5);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(1), byte_d9_adv));
              r600_6ff_tmp3 = simd_and(byte_d9_adv, byte_range_a0_a9);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, r600_6ff_tmp3);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp10, r80_7ff_tmp16);
              byte_db = simd_and(r80_7ff_tmp19, r600_6ff_tmp4);
              byte_range_b0_b9 = simd_andc(r80_7ff_tmp7, tmp5);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(2), byte_db_adv));
              r600_6ff_tmp5 = simd_and(byte_db_adv, byte_range_b0_b9);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, r600_6ff_tmp5);
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp14, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp19, r80_7ff_tmp20);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(3, 1))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp14, r80_7ff_tmp16);
              byte_df = simd_and(r80_7ff_tmp19, r780_7ff_tmp1);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(3, 1))) {
                r7c0_7ff_tmp1 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                byte_range_80_89 = simd_andc(r7c0_7ff_tmp1, tmp5);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(3), byte_df_adv));
                r7c0_7ff_tmp2 = simd_and(byte_df_adv, byte_range_80_89);
                struct_gc_N.cc = simd_or(struct_gc_N.cc, r7c0_7ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 56))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(4), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(5, 44))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(5, 27))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(5, 14))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(5), r800_fff_tmp4));
                  sequence_e0_a5 = simd_and(r800_fff_tmp4, byte_a5);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_or(basis_bits.bit_4, r800_fff_tmp5);
                  byte_range_a6_af = simd_and(r800_fff_tmp1, r800_fff_tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(6), sequence_e0_a5_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a5_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp9);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(7), sequence_e0_a7_adv));
                  r800_fff_tmp10 = simd_and(sequence_e0_a7_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(r800_ffff_tmp5, tmp2);
                  r800_fff_tmp12 = simd_not(tmp4);
                  r800_fff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp12), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r800_fff_tmp11, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_and(sequence_e0_a7_adv, byte_range_b4_b9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp15, r800_fff_tmp2);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(8), sequence_e0_a9_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_a9_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp15, r800_fff_tmp8);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp18);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(9), sequence_e0_ab_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_ab_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp21 = simd_and(r800_fff_tmp20, r800_fff_tmp2);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(10), sequence_e0_ad_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_ad_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp11, basis_bits.bit_4);
                  byte_range_b2_b7 = simd_and(r800_fff_tmp23, tmp4);
                  r800_fff_tmp24 = simd_and(sequence_e0_ad_adv, byte_range_b2_b7);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(r800_fff_tmp20, r800_fff_tmp8);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp25);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp26 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp27 = simd_or(r800_ffff_tmp1, r800_fff_tmp8);
                  r800_fff_tmp28 = simd_not(r800_fff_tmp27);
                  r800_fff_tmp29 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp28), simd_andc(r800_fff_tmp6, basis_bits.bit_3));
                  byte_range_a6_b2 = simd_and(r800_fff_tmp26, r800_fff_tmp29);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(11), sequence_e0_af_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_af_adv, byte_range_a6_b2);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp11, r800_fff_tmp31);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(12), sequence_e0_b1_adv));
                  r800_fff_tmp32 = simd_and(sequence_e0_b1_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_fff_tmp11, basis_bits.bit_4);
                  r800_fff_tmp34 = simd_and(basis_bits.bit_5, r800_fff_tmp8);
                  byte_range_b8_be = simd_andc(r800_fff_tmp33, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_b1_adv, byte_range_b8_be);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  byte_b3 = simd_and(r800_fff_tmp11, r800_fff_tmp36);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(13), sequence_e0_b3_adv));
                  r800_fff_tmp37 = simd_and(sequence_e0_b3_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp37);
                  byte_b5 = simd_and(r800_fff_tmp11, r800_fff_tmp3);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp38 = simd_xor(basis_bits.bit_3, r800_fff_tmp6);
                  byte_range_a6_b5 = simd_and(r800_fff_tmp26, r800_fff_tmp38);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(14), sequence_e0_b5_adv));
                  r800_fff_tmp39 = simd_and(sequence_e0_b5_adv, byte_range_a6_b5);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp39);
                  byte_b7 = simd_and(r800_fff_tmp11, r800_fff_tmp9);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(15), sequence_e0_b7_adv));
                  r800_fff_tmp40 = simd_and(sequence_e0_b7_adv, byte_range_a6_af);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp40);
                  byte_b9 = simd_and(r800_fff_tmp11, r800_fff_tmp16);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp41 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp42 = simd_and(r800_ffff_tmp5, r800_fff_tmp41);
                  byte_range_90_99 = simd_andc(r800_fff_tmp42, tmp5);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(16), sequence_e0_b9_adv));
                  r800_fff_tmp43 = simd_and(sequence_e0_b9_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp43);
                  byte_bb = simd_and(r800_fff_tmp11, r800_fff_tmp18);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(17), sequence_e0_bb_adv));
                  r800_fff_tmp44 = simd_and(sequence_e0_bb_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_andc(r800_fff_tmp20, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp11, r800_fff_tmp45);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp46 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_a0_b3 = simd_andc(r800_fff_tmp26, r800_fff_tmp46);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(18), sequence_e0_bc_adv));
                  r800_fff_tmp47 = simd_and(sequence_e0_bc_adv, byte_range_a0_b3);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r800_fff_tmp47);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 14);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(19, 13))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), r1000_1fff_tmp3));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp3, byte_81);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp2, tmp5);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(20), sequence_e1_81_adv));
                  r1000_1fff_tmp4 = simd_and(sequence_e1_81_adv, byte_range_80_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp4);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp6);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp7);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp8, tmp5);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(21), sequence_e1_82_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_82_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp10, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp10, r800_ffff_tmp3);
                  r1000_1fff_tmp14 = simd_not(r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_4, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp14), simd_andc(r1000_1fff_tmp16, basis_bits.bit_3));
                  byte_range_a9_bc = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp17);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(22), sequence_e1_8d_adv));
                  r1000_1fff_tmp18 = simd_and(sequence_e1_8d_adv, byte_range_a9_bc);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp20 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  byte_9b = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp21);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp22 = simd_not(r800_1fff_tmp1);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp10, basis_bits.bit_6);
                  r1000_1fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp22), simd_andc(r1000_1fff_tmp23, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp24);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(23), sequence_e1_9b_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_9b_adv, byte_range_ae_b0);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp20);
                  byte_9f = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp26);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp27 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a9 = simd_andc(r1000_1fff_tmp27, tmp5);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(24), sequence_e1_9f_adv));
                  r1000_1fff_tmp28 = simd_and(sequence_e1_9f_adv, byte_range_a0_a9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_range_b0_b9 = simd_andc(r1000_1fff_tmp29, tmp5);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_9f_adv, byte_range_b0_b9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp30);
                  byte_a0 = simd_andc(r1000_1fff_tmp27, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(25), sequence_e1_a0_adv));
                  r1000_1fff_tmp31 = simd_and(sequence_e1_a0_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp32);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp34 = simd_or(basis_bits.bit_4, r1000_1fff_tmp33);
                  byte_range_86_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(26), sequence_e1_a5_adv));
                  r1000_1fff_tmp35 = simd_and(sequence_e1_a5_adv, byte_range_86_8f);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp20);
                  byte_a7 = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp36);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp37 = simd_or(basis_bits.bit_5, r1000_1fff_tmp20);
                  r1000_1fff_tmp38 = simd_and(basis_bits.bit_4, r1000_1fff_tmp37);
                  byte_range_90_9a = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp38);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(27), sequence_e1_a7_adv));
                  r1000_1fff_tmp39 = simd_and(sequence_e1_a7_adv, byte_range_90_9a);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp5);
                  byte_aa = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp40);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(28), sequence_e1_aa_adv));
                  r1000_1fff_tmp41 = simd_and(sequence_e1_aa_adv, byte_range_80_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(sequence_e1_aa_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp42);
                  byte_ad = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp11);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(29), sequence_e1_ad_adv));
                  r1000_1fff_tmp43 = simd_and(sequence_e1_ad_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp43);
                  r1000_1fff_tmp44 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp5);
                  byte_ae = simd_and(r1000_1fff_tmp27, r1000_1fff_tmp44);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(30), sequence_e1_ae_adv));
                  r1000_1fff_tmp45 = simd_and(sequence_e1_ae_adv, byte_range_b0_b9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp45);
                  byte_b1 = simd_and(r1000_1fff_tmp29, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(31), sequence_e1_b1_adv));
                  r1000_1fff_tmp46 = simd_and(sequence_e1_b1_adv, byte_range_80_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp46);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_b1_adv, byte_range_90_99);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r1000_1fff_tmp47);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 13);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 27);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(32, 17))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(32, 11))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(32), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, tmp2);
                  r2000_2fff_tmp7 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(33), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_b0);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_not(tmp4);
                  r2000_2fff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp9), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, byte_range_b4_b9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_range_80_89 = simd_andc(r2000_2fff_tmp2, tmp5);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(34), sequence_e2_82_adv));
                  r2000_2fff_tmp12 = simd_and(sequence_e2_82_adv, byte_range_80_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp13);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(35), sequence_e2_85_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_85_adv, byte_range_90_bf);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp2, r800_ffff_tmp1);
                  r2000_2fff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp17);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(36), sequence_e2_86_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_86_adv, byte_range_80_82);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp20 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp9), simd_andc(r2000_2fff_tmp19, basis_bits.bit_4));
                  byte_range_85_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_86_adv, byte_range_85_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp23 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp22);
                  byte_91 = simd_and(r2000_2fff_tmp23, r2000_2fff_tmp4);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(37), sequence_e2_91_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp24);
                  byte_92 = simd_and(r2000_2fff_tmp23, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp25 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp26 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_3, r2000_2fff_tmp26);
                  byte_range_80_9b = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp27);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(38), sequence_e2_92_adv));
                  r2000_2fff_tmp28 = simd_and(sequence_e2_92_adv, byte_range_80_9b);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_andc(r2000_2fff_tmp17, r800_ffff_tmp1);
                  byte_93 = simd_and(r2000_2fff_tmp23, r2000_2fff_tmp29);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp30 = simd_or(basis_bits.bit_3, tmp5);
                  byte_range_aa_bf = simd_and(byte_range_a0_bf, r2000_2fff_tmp30);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(39), sequence_e2_93_adv));
                  r2000_2fff_tmp31 = simd_and(sequence_e2_93_adv, byte_range_aa_bf);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp26, r2000_2fff_tmp3);
                  byte_9d = simd_and(r2000_2fff_tmp23, r2000_2fff_tmp32);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp34 = simd_or(basis_bits.bit_4, r2000_2fff_tmp33);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp34);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(40), sequence_e2_9d_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_9d_adv, byte_range_b6_bf);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp26, r2000_4dff_tmp1);
                  byte_9e = simd_and(r2000_2fff_tmp23, r2000_2fff_tmp36);
                  sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
                  r2000_2fff_tmp37 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_80_93 = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp37);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(41), sequence_e2_9e_adv));
                  r2000_2fff_tmp38 = simd_and(sequence_e2_9e_adv, byte_range_80_93);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp38);
                  byte_b3 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp29);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  byte_bd = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp32);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(42), sequence_e2_b3_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_b3_adv, byte_bd);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r2000_2fff_tmp39);
                }
                else {
                  carryQ.CarryDequeueEnqueue(32, 11);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(43, 6))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(43), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(44), sequence_e3_80_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_80_adv, byte_87);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp8 = simd_not(tmp4);
                  r3000_4dff_tmp9 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp8), simd_andc(r3000_4dff_tmp9, basis_bits.bit_4));
                  byte_range_a1_a9 = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(sequence_e3_80_adv, byte_range_a1_a9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp5, tmp2);
                  r3000_4dff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp14 = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  byte_range_b8_ba = simd_andc(r3000_4dff_tmp14, r2000_4dff_tmp3);
                  r3000_4dff_tmp15 = simd_and(sequence_e3_80_adv, byte_range_b8_ba);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp16);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_andc(r3000_4dff_tmp18, basis_bits.bit_4);
                  r3000_4dff_tmp20 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_92_95 = simd_and(r3000_4dff_tmp19, r3000_4dff_tmp20);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(45), sequence_e3_86_adv));
                  r3000_4dff_tmp21 = simd_and(sequence_e3_86_adv, byte_range_92_95);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp13, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp22);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  byte_range_a0_a9 = simd_andc(r3000_4dff_tmp7, tmp5);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(46), sequence_e3_88_adv));
                  r3000_4dff_tmp23 = simd_and(sequence_e3_88_adv, byte_range_a0_a9);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp25 = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp24);
                  byte_89 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  byte_range_88_8f = simd_and(r3000_4dff_tmp2, basis_bits.bit_4);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(47), sequence_e3_89_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_89_adv, byte_range_88_8f);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_4, r3000_4dff_tmp9);
                  byte_range_91_9f = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp27);
                  r3000_4dff_tmp28 = simd_and(sequence_e3_89_adv, byte_range_91_9f);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp28);
                  r3000_4dff_tmp29 = simd_and(r3000_4dff_tmp13, r2000_4dff_tmp1);
                  byte_8a = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp29);
                  sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
                  byte_range_80_89 = simd_andc(r3000_4dff_tmp2, tmp5);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(48), sequence_e3_8a_adv));
                  r3000_4dff_tmp30 = simd_and(sequence_e3_8a_adv, byte_range_80_89);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp30);
                  byte_range_b1_bf = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp27);
                  r3000_4dff_tmp31 = simd_and(sequence_e3_8a_adv, byte_range_b1_bf);
                  struct_gc_N.cc = simd_or(struct_gc_N.cc, r3000_4dff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(43, 6);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(32, 17);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 44);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, tmp4);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(49, 11))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(49), ra000_ffff_tmp7));
              sequence_ea_98 = simd_and(ra000_ffff_tmp7, byte_98);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              byte_range_a0_a9 = simd_andc(ra000_ffff_tmp8, tmp5);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(50), sequence_ea_98_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_98_adv, byte_range_a0_a9);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp11);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_4, ra000_ffff_tmp12);
              byte_range_a6_af = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp13);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(51), sequence_ea_9b_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_9b_adv, byte_range_a6_af);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp15);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp5, tmp2);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp16, basis_bits.bit_4);
              byte_range_b0_b5 = simd_andc(ra000_ffff_tmp17, ra000_ffff_tmp12);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(52), sequence_ea_a0_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_a0_adv, byte_range_b0_b5);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp19);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp5, tmp5);
              carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(53), sequence_ea_a3_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a3_adv, byte_range_90_99);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp20);
              byte_a4 = simd_and(ra000_ffff_tmp8, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp22 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp21);
              byte_range_80_89 = simd_andc(ra000_ffff_tmp22, tmp5);
              carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(54), sequence_ea_a4_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_a4_adv, byte_range_80_89);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_a7 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp24);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(55), sequence_ea_a7_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_a7_adv, byte_range_90_99);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp25);
              byte_range_b0_b9 = simd_andc(ra000_ffff_tmp16, tmp5);
              ra000_ffff_tmp26 = simd_and(sequence_ea_a7_adv, byte_range_b0_b9);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp27);
              byte_a9 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp28);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(56), sequence_ea_a9_adv));
              ra000_ffff_tmp29 = simd_and(sequence_ea_a9_adv, byte_range_90_99);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp10);
              byte_af = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp31);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(57), sequence_ea_af_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ea_af_adv, byte_range_b0_b9);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp32);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp31);
              ra000_ffff_tmp33 = simd_andc(ra000_ffff_tmp30, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp33);
              carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(58), ra000_ffff_tmp34));
              sequence_ef_bc = simd_and(ra000_ffff_tmp34, byte_bc);
              byte_ef_adv = ra000_ffff_tmp34;
              carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(59), sequence_ef_bc_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ef_bc_adv, byte_range_90_99);
              struct_gc_N.cc = simd_or(struct_gc_N.cc, ra000_ffff_tmp35);
            }
            else {
              carryQ.CarryDequeueEnqueue(49, 11);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 56);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(60, 42))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(60), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(61), r10000_10ffff_tmp12));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp12, byte_84);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_not(r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp14), simd_andc(r10000_10ffff_tmp18, basis_bits.bit_2));
            byte_range_87_b3 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(62), sequence_f0_90_84_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_84_adv, byte_range_87_b3);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp21);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp22);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp25);
            byte_range_80_b8 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp26);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(63), sequence_f0_90_85_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_85_adv, byte_range_80_b8);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp28);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp29);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, basis_bits.bit_6);
            byte_range_8a_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp31);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(64), sequence_f0_90_86_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_86_adv, byte_range_8a_8b);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp15);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp33);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp36 = simd_not(r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp36), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            byte_range_a1_bb = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp37);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(65), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_8b_adv, byte_range_a1_bb);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp39);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp1);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(66), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_90_8c_adv, byte_range_a0_a3);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp21);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp42);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp43);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(67), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_90_8d_adv, byte_81);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp28);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_90_8d_adv, byte_8a);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp15);
            byte_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp47);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp48 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            r10000_10ffff_tmp49 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp50 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp49), simd_andc(r10000_10ffff_tmp2, basis_bits.bit_5));
            byte_range_91_95 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp50);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(68), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_90_8f_adv, byte_range_91_95);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp52);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp40, tmp5);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(69), sequence_f0_90_92_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_90_92_adv, byte_range_a0_a9);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp53);
            byte_a1 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp43);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            byte_range_98_9f = simd_and(r10000_10ffff_tmp6, basis_bits.bit_4);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(70), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_90_a1_adv, byte_range_98_9f);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp4, tmp2);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp55, basis_bits.bit_4);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp23);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_90_a1_adv, byte_range_b9_bf);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp57);
            byte_a2 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp52);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            byte_range_a7_af = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp17);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(71), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_90_a2_adv, byte_range_a7_af);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp58);
            byte_a4 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp11);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            r10000_10ffff_tmp59 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp61 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp59), simd_andc(r10000_10ffff_tmp60, basis_bits.bit_4));
            byte_range_96_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp61);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(72), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_90_a4_adv, byte_range_96_9b);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp21);
            byte_a9 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp63);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_80_87 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(73), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp64 = simd_and(sequence_f0_90_a9_adv, byte_range_80_87);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp64);
            r10000_10ffff_tmp65 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp35);
            r10000_10ffff_tmp66 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bd_be = simd_and(r10000_10ffff_tmp65, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(sequence_f0_90_a9_adv, byte_range_bd_be);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp67);
            byte_aa = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp45);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            r10000_10ffff_tmp68 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp35);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp68, r10000_10ffff_tmp2);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(74), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_aa_adv, byte_range_9d_9f);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp69);
            byte_ab = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp33);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp40, basis_bits.bit_4);
            r10000_10ffff_tmp71 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp15);
            byte_range_ab_af = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp71);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(75), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp72 = simd_and(sequence_f0_90_ab_adv, byte_range_ab_af);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp72);
            byte_ad = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp42);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(76), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_ad_adv, byte_range_98_9f);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp73);
            byte_range_b8_bf = r10000_10ffff_tmp56;
            r10000_10ffff_tmp74 = simd_and(sequence_f0_90_ad_adv, byte_range_b8_bf);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp28);
            byte_ae = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp75);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            byte_range_a9_af = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp23);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(77), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp76 = simd_and(sequence_f0_90_ae_adv, byte_range_a9_af);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp76);
            byte_b9 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp63);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            r10000_10ffff_tmp77 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp47);
            byte_range_a0_be = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp77);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(78), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_be);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp78);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp43);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(79), r10000_10ffff_tmp79));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp79, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp79;
            r10000_10ffff_tmp80 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp81 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp82 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp80), simd_andc(r10000_10ffff_tmp82, basis_bits.bit_2));
            byte_range_92_af = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp83);
            carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(80), sequence_f0_91_81_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_91_81_adv, byte_range_92_af);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp85);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            byte_range_b0_b9 = simd_andc(r10000_10ffff_tmp55, tmp5);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(81), sequence_f0_91_83_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_91_83_adv, byte_range_b0_b9);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp86);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp87 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp60);
            byte_range_b6_bf = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp87);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(82), sequence_f0_91_84_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_91_84_adv, byte_range_b6_bf);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp89);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp6, tmp5);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(83), sequence_f0_91_87_adv));
            r10000_10ffff_tmp90 = simd_and(sequence_f0_91_87_adv, byte_range_90_99);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp92 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp91);
            r10000_10ffff_tmp93 = simd_not(r10000_10ffff_tmp92);
            r10000_10ffff_tmp94 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp93), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            byte_range_a1_b4 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp94);
            r10000_10ffff_tmp95 = simd_and(sequence_f0_91_87_adv, byte_range_a1_b4);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp95);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(84), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_91_8b_adv, byte_range_b0_b9);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp96);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp85);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(85), sequence_f0_91_93_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_91_93_adv, byte_range_90_99);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp97);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp63);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(86), sequence_f0_91_99_adv));
            r10000_10ffff_tmp98 = simd_and(sequence_f0_91_99_adv, byte_range_90_99);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp98);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp33);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp9, tmp5);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(87), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp99 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp99);
            byte_a3 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp85);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp100 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp15);
            r10000_10ffff_tmp101 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp100);
            byte_range_a0_b2 = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp101);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(88), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_91_a3_adv, byte_range_a0_b2);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp102);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(89), r10000_10ffff_tmp103));
            sequence_f0_92_90 = simd_and(r10000_10ffff_tmp103, byte_90);
            sequence_f0_92_adv = r10000_10ffff_tmp103;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(90), sequence_f0_92_90_adv));
            r10000_10ffff_tmp104 = simd_and(sequence_f0_92_90_adv, byte_range_80_bf);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp106 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp47);
            r10000_10ffff_tmp107 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp106);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp107);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(91), sequence_f0_92_91_adv));
            r10000_10ffff_tmp108 = simd_and(sequence_f0_92_91_adv, byte_range_80_ae);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp108);
            byte_96 = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp29);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            r10000_10ffff_tmp109 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(92), r10000_10ffff_tmp110));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp110, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp110;
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(93), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_96_a9_adv, byte_range_a0_a9);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp111);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(94), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp112 = simd_and(sequence_f0_96_ad_adv, byte_range_90_99);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp112);
            r10000_10ffff_tmp113 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp81);
            r10000_10ffff_tmp114 = simd_not(r10000_10ffff_tmp113);
            r10000_10ffff_tmp115 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp71);
            r10000_10ffff_tmp116 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp115);
            r10000_10ffff_tmp117 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp114), simd_andc(r10000_10ffff_tmp116, basis_bits.bit_2));
            byte_range_9b_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp117);
            r10000_10ffff_tmp118 = simd_and(sequence_f0_96_ad_adv, byte_range_9b_a1);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp118);
            byte_9d = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp42);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp119 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(95), r10000_10ffff_tmp120));
            sequence_f0_9d_8d = simd_and(r10000_10ffff_tmp120, byte_8d);
            sequence_f0_9d_adv = r10000_10ffff_tmp120;
            r10000_10ffff_tmp121 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            byte_range_a0_b1 = simd_andc(r10000_10ffff_tmp121, r10000_10ffff_tmp82);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(96), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp122 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_b1);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp122);
            byte_9f = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp47);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp123 = simd_and(r10000_10ffff_tmp35, basis_bits.bit_6);
            r10000_10ffff_tmp124 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp123);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp124);
            byte_range_8e_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp125);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(97), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp126 = simd_and(sequence_f0_9d_9f_adv, byte_range_8e_bf);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp126);
            byte_9e = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp75);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(98), r10000_10ffff_tmp127));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp127, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp127;
            byte_range_87_8f = simd_and(r10000_10ffff_tmp119, r10000_10ffff_tmp17);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(99), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_9e_a3_adv, byte_range_87_8f);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp128);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(100), r10000_10ffff_tmp129));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp129, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp129;
            r10000_10ffff_tmp130 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp91);
            byte_range_80_8c = simd_andc(r10000_10ffff_tmp119, r10000_10ffff_tmp130);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(101), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp131 = simd_and(sequence_f0_9f_84_adv, byte_range_80_8c);
            struct_gc_N.cc = simd_or(struct_gc_N.cc, r10000_10ffff_tmp131);
          }
          else {
            carryQ.CarryDequeueEnqueue(60, 42);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 102);
        }
        carryQ.CarryQ_Adjust(102);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<102, 0> carryQ;
  };

  struct Property_gc_Lm {
  Property_gc_Lm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Lm & struct_gc_Lm) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_ca, r100_2ff_tmp4;
		BitBlock r100_2ff_tmp5, byte_range_b0_bf, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, r100_2ff_tmp9, byte_cb, r100_2ff_tmp10, byte_ca_adv;
		BitBlock r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3, byte_range_80_81;
		BitBlock byte_cb_adv, r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6;
		BitBlock r2b0_2ff_tmp7, r2b0_2ff_tmp8, r2b0_2ff_tmp9, byte_range_86_91;
		BitBlock r2b0_2ff_tmp10, r2b0_2ff_tmp11, r2b0_2ff_tmp12, r2b0_2ff_tmp13;
		BitBlock r2b0_2ff_tmp14, r2b0_2ff_tmp15, byte_range_a0_a4, r2b0_2ff_tmp16;
		BitBlock r2b0_2ff_tmp17, r2b0_2ff_tmp18, byte_ac, r2b0_2ff_tmp19;
		BitBlock r2b0_2ff_tmp20, byte_ae, r2b0_2ff_tmp21, r100_3ff_tmp2, r100_3ff_tmp3;
		BitBlock r100_3ff_tmp4, byte_cd, r100_3ff_tmp5, r100_3ff_tmp6, r100_3ff_tmp7;
		BitBlock r100_3ff_tmp8, r100_3ff_tmp9, byte_range_ce_cf, r100_3ff_tmp10;
		BitBlock r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3, byte_b4, byte_cd_adv;
		BitBlock r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7, byte_ba;
		BitBlock r370_3ff_tmp8, r80_7ff_tmp4, r80_7ff_tmp5, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, byte_range_80_8f;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, r500_58f_tmp1;
		BitBlock r500_58f_tmp2, byte_d4, r500_58f_tmp3, r500_58f_tmp4, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r500_58f_tmp7, byte_d5, r500_58f_tmp8, r500_58f_tmp9;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, r530_58f_tmp3, byte_99, byte_d5_adv;
		BitBlock r530_58f_tmp4, r80_7ff_tmp6, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock r600_6ff_tmp2, byte_d9, r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5;
		BitBlock r600_6ff_tmp6, byte_80, byte_d9_adv, r600_6ff_tmp7, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, byte_db, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, r600_6ff_tmp13, r600_6ff_tmp14, byte_range_a5_a6;
		BitBlock byte_db_adv, r600_6ff_tmp15, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock byte_range_de_df, r780_7ff_tmp1, r780_7ff_tmp2, byte_df;
		BitBlock r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4;
		BitBlock r7c0_7ff_tmp5, byte_range_b4_b5, byte_df_adv, r7c0_7ff_tmp6;
		BitBlock r7c0_7ff_tmp7, r7c0_7ff_tmp8, r7c0_7ff_tmp9, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, byte_9a;
		BitBlock sequence_e0_a0_adv, r800_fff_tmp8, byte_a4, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, byte_a8, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_a5, sequence_e0_a5, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, byte_b1, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp17, r800_fff_tmp18, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, byte_86;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24;
		BitBlock byte_bb, sequence_e0_bb, sequence_e0_bb_adv, r800_fff_tmp25;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, byte_83;
		BitBlock r1000_1fff_tmp5, sequence_e1_83, byte_e1_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_bc;
		BitBlock sequence_e1_83_adv, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_9f, sequence_e1_9f;
		BitBlock r1000_1fff_tmp14, byte_97, sequence_e1_9f_adv, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, byte_a1, sequence_e1_a1, sequence_e1_a1_adv;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_aa, sequence_e1_aa, byte_a7;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp21, sequence_e1_b1;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, byte_range_b8_bd;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp24, sequence_e1_b4;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, byte_range_ac_bf;
		BitBlock sequence_e1_b4_adv, r1000_1fff_tmp27, r1000_1fff_tmp28, byte_b5;
		BitBlock sequence_e1_b5, r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, byte_range_80_aa, sequence_e1_b5_adv;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, byte_b8, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, byte_b6, sequence_e1_b6, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, byte_range_9b_bf, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp39, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81;
		BitBlock r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, sequence_e2_81_adv, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, byte_bf, r2000_2fff_tmp12;
		BitBlock byte_82, sequence_e2_82, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_range_90_9c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp17, sequence_e2_b1;
		BitBlock r2000_2fff_tmp18, byte_range_bc_bd, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, sequence_e2_b5, r2000_2fff_tmp21;
		BitBlock byte_af, sequence_e2_b5_adv, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, sequence_e2_b8, sequence_e2_b8_adv;
		BitBlock r2000_2fff_tmp25, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, byte_85, sequence_e3_80_adv, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, byte_range_b1_b5, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16, sequence_e3_82;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, r3000_4dff_tmp21, byte_range_9d_9e;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp22, sequence_e3_83;
		BitBlock r3000_4dff_tmp23, byte_range_bc_be, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp24, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock sequence_ea_80, byte_ea_adv, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_95, sequence_ea_80_adv;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, sequence_ea_93_adv, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_98, sequence_ea_98, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, byte_8c, sequence_ea_98_adv, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, sequence_ea_99, ra000_ffff_tmp25;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp26, sequence_ea_9a;
		BitBlock ra000_ffff_tmp27, byte_range_9c_9d, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp28, byte_9c, sequence_ea_9c, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, byte_range_97_9f, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, byte_9d, sequence_ea_9d, byte_b0;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp33, ra000_ffff_tmp34, byte_9e;
		BitBlock sequence_ea_9e, byte_88, sequence_ea_9e_adv, ra000_ffff_tmp35;
		BitBlock sequence_ea_9f, ra000_ffff_tmp36, byte_range_b8_b9;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, sequence_ea_a7, byte_8f, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, byte_a6, ra000_ffff_tmp42;
		BitBlock byte_a9, sequence_ea_a9, sequence_ea_a9_adv, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, byte_ab, sequence_ea_ab, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, byte_range_b3_b4, ra000_ffff_tmp49, byte_ad;
		BitBlock sequence_ea_ad, byte_range_9c_9f, sequence_ea_ad_adv;
		BitBlock ra000_ffff_tmp50, byte_ef, byte_bd, ra000_ffff_tmp51, sequence_ef_bd;
		BitBlock byte_ef_adv, sequence_ef_bd_adv, ra000_ffff_tmp52, byte_be;
		BitBlock sequence_ef_be, ra000_ffff_tmp53, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp54, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_96, r10000_10ffff_tmp10, sequence_f0_96;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, sequence_f0_96_ad;
		BitBlock byte_f0_adv, sequence_f0_96_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_range_80_83, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock sequence_f0_96_be, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, byte_range_93_9f, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp24;




        struct_gc_Lm.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 55))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 9))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 3))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp1, r100_2ff_tmp2);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r100_2ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(0), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_b0_bf);
                r100_2ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp1, r100_2ff_tmp8);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp9);
                r100_2ff_tmp10 = simd_or(r100_2ff_tmp7, byte_cb);
                if ((bitblock::any(r100_2ff_tmp10) || carryQ.CarryTest(1, 1))) {
                  byte_ca_adv = r100_2ff_tmp6;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_andc(r100_2ff_tmp4, r80_7ff_tmp1);
                  r2b0_2ff_tmp3 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                  byte_range_80_81 = simd_andc(r2b0_2ff_tmp2, r2b0_2ff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(1), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_80_81);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp4);
                  r2b0_2ff_tmp5 = simd_andc(r100_2ff_tmp4, basis_bits.bit_2);
                  r2b0_2ff_tmp6 = simd_not(r2b0_2ff_tmp3);
                  r2b0_2ff_tmp7 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp8 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp6), simd_andc(r2b0_2ff_tmp8, basis_bits.bit_3));
                  byte_range_86_91 = simd_and(r2b0_2ff_tmp5, r2b0_2ff_tmp9);
                  r2b0_2ff_tmp10 = simd_and(byte_cb_adv, byte_range_86_91);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp10);
                  r2b0_2ff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r2b0_2ff_tmp12 = simd_and(r100_2ff_tmp4, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_andc(r2b0_2ff_tmp12, basis_bits.bit_4);
                  r2b0_2ff_tmp14 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                  r2b0_2ff_tmp15 = simd_and(basis_bits.bit_5, r2b0_2ff_tmp14);
                  byte_range_a0_a4 = simd_andc(r2b0_2ff_tmp13, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp16 = simd_and(byte_cb_adv, byte_range_a0_a4);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp16);
                  r2b0_2ff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp18 = simd_andc(r2b0_2ff_tmp17, r2b0_2ff_tmp14);
                  byte_ac = simd_and(r2b0_2ff_tmp12, r2b0_2ff_tmp18);
                  r2b0_2ff_tmp19 = simd_and(byte_cb_adv, byte_ac);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp19);
                  r2b0_2ff_tmp20 = simd_and(r2b0_2ff_tmp17, r100_2ff_tmp2);
                  byte_ae = simd_and(r2b0_2ff_tmp12, r2b0_2ff_tmp20);
                  r2b0_2ff_tmp21 = simd_and(byte_cb_adv, byte_ae);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2b0_2ff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp5, r100_3ff_tmp6);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(2), r100_3ff_tmp7));
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp7, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if (bitblock::any(r100_3ff_tmp10)) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                byte_b4 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                byte_cd_adv = r100_3ff_tmp7;
                r370_3ff_tmp4 = simd_and(byte_cd_adv, byte_b4);
                struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp7 = simd_and(r370_3ff_tmp5, r370_3ff_tmp6);
                byte_ba = simd_and(byte_range_b0_bf, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(byte_cd_adv, byte_ba);
                struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r370_3ff_tmp8);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(3, 3))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp5, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_80_8f);
              r400_5ff_tmp8 = simd_or(byte_range_d4_d5, r400_5ff_tmp7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(4, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp5, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(4), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp5, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp7);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(5, 1))) {
                  r530_58f_tmp1 = simd_and(r400_5ff_tmp5, r80_7ff_tmp4);
                  r530_58f_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp3 = simd_and(r530_58f_tmp2, r500_58f_tmp6);
                  byte_99 = simd_and(r530_58f_tmp1, r530_58f_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(5), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_99);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 3);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(6, 2))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_andc(r600_6ff_tmp3, r80_7ff_tmp1);
              r600_6ff_tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_or(r80_7ff_tmp3, r600_6ff_tmp5);
              byte_80 = simd_andc(r600_6ff_tmp4, r600_6ff_tmp6);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(6), byte_d9_adv));
              r600_6ff_tmp7 = simd_and(byte_d9_adv, byte_80);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r600_6ff_tmp7);
              r600_6ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp9 = simd_and(r80_7ff_tmp6, r600_6ff_tmp8);
              byte_db = simd_and(r80_7ff_tmp5, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp11 = simd_and(r600_6ff_tmp3, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r600_6ff_tmp13 = simd_and(r600_6ff_tmp11, r600_6ff_tmp12);
              r600_6ff_tmp14 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_a5_a6 = simd_and(r600_6ff_tmp13, r600_6ff_tmp14);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(7), byte_db_adv));
              r600_6ff_tmp15 = simd_and(byte_db_adv, byte_range_a5_a6);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r600_6ff_tmp15);
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 2);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(8, 1))) {
              r780_7ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(8, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r7c0_7ff_tmp3 = simd_and(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r7c0_7ff_tmp5 = simd_andc(r7c0_7ff_tmp4, basis_bits.bit_6);
                byte_range_b4_b5 = simd_and(r7c0_7ff_tmp3, r7c0_7ff_tmp5);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(8), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, byte_range_b4_b5);
                struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r7c0_7ff_tmp6);
                r7c0_7ff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r7c0_7ff_tmp8 = simd_and(r80_7ff_tmp6, r7c0_7ff_tmp7);
                byte_ba = simd_and(r7c0_7ff_tmp3, r7c0_7ff_tmp8);
                r7c0_7ff_tmp9 = simd_and(byte_df_adv, byte_ba);
                struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r7c0_7ff_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 9);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(9, 42))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(9), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(10, 24))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(10, 14))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(10, 5))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(10), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp7 = simd_and(r800_fff_tmp5, r800_fff_tmp6);
                  byte_9a = simd_and(r800_fff_tmp4, r800_fff_tmp7);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(11), sequence_e0_a0_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a0_adv, byte_9a);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp8);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  r800_fff_tmp9 = simd_and(sequence_e0_a0_adv, byte_a4);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_andc(r800_fff_tmp5, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(sequence_e0_a0_adv, byte_a8);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp13 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp15 = simd_and(r800_ffff_tmp5, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp15, r800_fff_tmp16);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(12), sequence_e0_a5_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_a5_adv, byte_b1);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp5, r800_fff_tmp12);
                  byte_b9 = simd_and(r800_fff_tmp15, r800_fff_tmp18);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp20 = simd_andc(r800_ffff_tmp5, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_and(r800_ffff_tmp2, r800_fff_tmp6);
                  byte_86 = simd_and(r800_fff_tmp20, r800_fff_tmp21);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(13), sequence_e0_b9_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_b9_adv, byte_86);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp24 = simd_and(r800_fff_tmp5, r800_fff_tmp23);
                  byte_bb = simd_and(r800_fff_tmp15, r800_fff_tmp24);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(14), sequence_e0_bb_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_bb_adv, byte_86);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r800_fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(10, 5);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(15, 9))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(15), r1000_1fff_tmp5));
                  sequence_e1_83 = simd_and(r1000_1fff_tmp5, byte_83);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_andc(r1000_1fff_tmp8, r800_ffff_tmp3);
                  byte_bc = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(16), sequence_e1_83_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_83_adv, byte_bc);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp3);
                  byte_9f = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp3);
                  byte_97 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp14);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(17), sequence_e1_9f_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_9f_adv, byte_97);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a1 = simd_and(r1000_1fff_tmp16, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(18), sequence_e1_a1_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_a1_adv, byte_83);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  byte_aa = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp20);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  byte_a7 = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp14);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(19), sequence_e1_aa_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_aa_adv, byte_a7);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp21);
                  byte_b1 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp7, basis_bits.bit_4);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_b8_bd = simd_andc(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(20), sequence_e1_b1_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b1_adv, byte_range_b8_bd);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp24);
                  byte_b4 = simd_and(r1000_1fff_tmp7, r800_ffff_tmp4);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  r1000_1fff_tmp25 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp26 = simd_or(basis_bits.bit_3, r1000_1fff_tmp8);
                  byte_range_ac_bf = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(21), sequence_e1_b4_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_b5 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp28);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp29 = simd_or(basis_bits.bit_5, r1000_1fff_tmp3);
                  r1000_1fff_tmp30 = simd_and(basis_bits.bit_4, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_or(basis_bits.bit_3, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(basis_bits.bit_2, r1000_1fff_tmp31);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp32);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(22), sequence_e1_b5_adv));
                  r1000_1fff_tmp33 = simd_and(sequence_e1_b5_adv, byte_range_80_aa);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_andc(r1000_1fff_tmp18, r800_ffff_tmp3);
                  byte_b8 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(sequence_e1_b5_adv, byte_b8);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp19);
                  byte_b6 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp36);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp37 = simd_and(basis_bits.bit_3, r1000_1fff_tmp30);
                  r1000_1fff_tmp38 = simd_or(basis_bits.bit_2, r1000_1fff_tmp37);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp38);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(23), sequence_e1_b6_adv));
                  r1000_1fff_tmp39 = simd_and(sequence_e1_b6_adv, byte_range_9b_bf);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r1000_1fff_tmp39);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 14);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(24, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(24, 6))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(24), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(25), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_b1);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp10);
                  byte_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(sequence_e2_81_adv, byte_bf);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp12);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp13);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp16 = simd_and(basis_bits.bit_4, r2000_2fff_tmp15);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp14, r2000_2fff_tmp16);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(26), sequence_e2_82_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp17);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp18 = simd_andc(r2000_2fff_tmp9, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp18);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(27), sequence_e2_b1_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_b1_adv, byte_range_bc_bd);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b5 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp20);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp21 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_af = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp11);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(28), sequence_e2_b5_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_b5_adv, byte_af);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp24 = simd_andc(r2000_2fff_tmp23, r800_ffff_tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp24);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(29), sequence_e2_b8_adv));
                  r2000_2fff_tmp25 = simd_and(sequence_e2_b8_adv, byte_af);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r2000_2fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(24, 6);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(30, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(30), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp5);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(31), sequence_e3_80_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_85);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_andc(r3000_4dff_tmp9, basis_bits.bit_4);
                  r3000_4dff_tmp11 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp11), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_b1_b5 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(sequence_e3_80_adv, byte_range_b1_b5);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r3000_4dff_tmp13);
                  r3000_4dff_tmp14 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp15 = simd_and(r3000_4dff_tmp14, r2000_4dff_tmp3);
                  byte_bb = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(sequence_e3_80_adv, byte_bb);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r3000_4dff_tmp16);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp19);
                  r3000_4dff_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_9d_9e = simd_and(r3000_4dff_tmp20, r3000_4dff_tmp21);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(32), sequence_e3_82_adv));
                  r3000_4dff_tmp22 = simd_and(sequence_e3_82_adv, byte_range_9d_9e);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r3000_4dff_tmp22);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp4);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp23 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp19);
                  byte_range_bc_be = simd_andc(r3000_4dff_tmp23, r2000_4dff_tmp3);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(33), sequence_e3_83_adv));
                  r3000_4dff_tmp24 = simd_and(sequence_e3_83_adv, byte_range_bc_be);
                  struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r3000_4dff_tmp24);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 24);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(34, 17))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(34), ra000_ffff_tmp7));
              sequence_ea_80 = simd_and(ra000_ffff_tmp7, byte_80);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_95 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp11);
              carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(35), sequence_ea_80_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_80_adv, byte_95);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp14);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp16, basis_bits.bit_4);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_b8_bd = simd_andc(ra000_ffff_tmp17, ra000_ffff_tmp18);
              carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(36), sequence_ea_93_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_93_adv, byte_range_b8_bd);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp20);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp21, r800_ffff_tmp3);
              byte_8c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(37), sequence_ea_98_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_98_adv, byte_8c);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_99 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp24);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp21, ra000_ffff_tmp13);
              byte_bf = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp25);
              carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(38), sequence_ea_99_adv));
              ra000_ffff_tmp26 = simd_and(sequence_ea_99_adv, byte_bf);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp26);
              byte_9a = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp27 = simd_andc(ra000_ffff_tmp21, basis_bits.bit_6);
              byte_range_9c_9d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp27);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(39), sequence_ea_9a_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_9a_adv, byte_range_9c_9d);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp28);
              byte_9c = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp22);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp29 = simd_and(basis_bits.bit_5, ra000_ffff_tmp13);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_4, ra000_ffff_tmp29);
              byte_range_97_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp30);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(40), sequence_ea_9c_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_9c_adv, byte_range_97_9f);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(ra000_ffff_tmp21, ra000_ffff_tmp10);
              byte_9d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp32);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              byte_b0 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp6);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(41), sequence_ea_9d_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ea_9d_adv, byte_b0);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp21, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp34);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              byte_88 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp20);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(42), sequence_ea_9e_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_9e_adv, byte_88);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp35);
              byte_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp25);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_b8_b9 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp36);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(43), sequence_ea_9f_adv));
              ra000_ffff_tmp37 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp39 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp13);
              byte_a7 = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp39);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(44), sequence_ea_a7_adv));
              ra000_ffff_tmp40 = simd_and(sequence_ea_a7_adv, byte_8f);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp40);
              ra000_ffff_tmp41 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp41);
              ra000_ffff_tmp42 = simd_and(sequence_ea_a7_adv, byte_a6);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp42);
              byte_a9 = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp24);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(45), sequence_ea_a9_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_a9_adv, byte_b0);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp13);
              byte_ab = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp44);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(46), sequence_ea_ab_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_ab_adv, byte_9d);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_andc(ra000_ffff_tmp16, basis_bits.bit_4);
              ra000_ffff_tmp47 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp48 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp47), simd_andc(ra000_ffff_tmp13, basis_bits.bit_5));
              byte_range_b3_b4 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(sequence_ea_ab_adv, byte_range_b3_b4);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp49);
              byte_ad = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp32);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp21);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(47), sequence_ea_ad_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ea_ad_adv, byte_range_9c_9f);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp50);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp25);
              byte_bd = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp32);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(48), ra000_ffff_tmp51));
              sequence_ef_bd = simd_and(ra000_ffff_tmp51, byte_bd);
              byte_ef_adv = ra000_ffff_tmp51;
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(49), sequence_ef_bd_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ef_bd_adv, byte_b0);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp52);
              byte_be = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp34);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp53 = simd_and(ra000_ffff_tmp21, basis_bits.bit_6);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp53);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(50), sequence_ef_be_adv));
              ra000_ffff_tmp54 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, ra000_ffff_tmp54);
            }
            else {
              carryQ.CarryDequeueEnqueue(34, 17);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(9, 42);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(51, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(51), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_ad = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(52), r10000_10ffff_tmp15));
            sequence_f0_96_ad = simd_and(r10000_10ffff_tmp15, byte_ad);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp15;
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp16);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp1);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(53), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_96_ad_adv, byte_range_80_83);
            struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp8);
            byte_be = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp22);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp23);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(54), sequence_f0_96_be_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_96_be_adv, byte_range_93_9f);
            struct_gc_Lm.cc = simd_or(struct_gc_Lm.cc, r10000_10ffff_tmp24);
          }
          else {
            carryQ.CarryDequeueEnqueue(51, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 55);
        }
        carryQ.CarryQ_Adjust(55);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<55, 0> carryQ;
  };

  struct Property_gc_Ll {
  Property_gc_Ll() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Ll & struct_gc_Ll) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock byte_range_9f_b6, byte_c3_adv, r80_7ff_tmp21, byte_range_b8_bf;
		BitBlock r80_7ff_tmp22, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, r100_2ff_tmp5, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp6, r100_2ff_tmp7, r100_2ff_tmp8, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, r100_17f_tmp1, byte_c4, r100_17f_tmp2, byte_81;
		BitBlock byte_c4_adv, r100_17f_tmp3, byte_83, r100_17f_tmp4, byte_85;
		BitBlock r100_17f_tmp5, r100_17f_tmp6, byte_87, r100_17f_tmp7, byte_89;
		BitBlock r100_17f_tmp8, r100_17f_tmp9, byte_8b, r100_17f_tmp10, r100_17f_tmp11;
		BitBlock byte_8d, r100_17f_tmp12, byte_8f, r100_17f_tmp13, r100_17f_tmp14;
		BitBlock r100_17f_tmp15, byte_91, r100_17f_tmp16, byte_93, r100_17f_tmp17;
		BitBlock byte_95, r100_17f_tmp18, byte_97, r100_17f_tmp19, byte_99;
		BitBlock r100_17f_tmp20, byte_9b, r100_17f_tmp21, byte_9d, r100_17f_tmp22;
		BitBlock byte_9f, r100_17f_tmp23, r100_17f_tmp24, r100_17f_tmp25, byte_a1;
		BitBlock r100_17f_tmp26, byte_a3, r100_17f_tmp27, byte_a5, r100_17f_tmp28;
		BitBlock byte_a7, r100_17f_tmp29, byte_a9, r100_17f_tmp30, byte_ab;
		BitBlock r100_17f_tmp31, byte_ad, r100_17f_tmp32, byte_af, r100_17f_tmp33;
		BitBlock byte_b1, r100_17f_tmp34, byte_b3, r100_17f_tmp35, r100_17f_tmp36;
		BitBlock r100_17f_tmp37, byte_range_b7_b8, r100_17f_tmp38, r100_17f_tmp39;
		BitBlock byte_ba, r100_17f_tmp40, r100_17f_tmp41, byte_bc, r100_17f_tmp42;
		BitBlock r100_17f_tmp43, byte_be, r100_17f_tmp44, byte_c5, byte_80;
		BitBlock byte_c5_adv, r100_17f_tmp45, byte_82, r100_17f_tmp46, byte_84;
		BitBlock r100_17f_tmp47, r100_17f_tmp48, byte_86, r100_17f_tmp49;
		BitBlock r100_17f_tmp50, byte_range_88_89, r100_17f_tmp51, r100_17f_tmp52;
		BitBlock r100_17f_tmp53, r100_17f_tmp54, r100_17f_tmp55, r100_17f_tmp56;
		BitBlock r100_17f_tmp57, r100_17f_tmp58, r100_17f_tmp59, r100_17f_tmp60;
		BitBlock r100_17f_tmp61, r100_17f_tmp62, r100_17f_tmp63, r100_17f_tmp64;
		BitBlock r100_17f_tmp65, r100_17f_tmp66, r100_17f_tmp67, r100_17f_tmp68;
		BitBlock r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71, r100_17f_tmp72;
		BitBlock r100_17f_tmp73, byte_b7, r100_17f_tmp74, r100_17f_tmp75;
		BitBlock r100_17f_tmp76, r100_17f_tmp77, byte_range_be_bf, r100_17f_tmp78;
		BitBlock r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4;
		BitBlock r180_24f_tmp1, byte_c6, byte_c6_adv, r180_24f_tmp2, r180_24f_tmp3;
		BitBlock r180_24f_tmp4, r180_24f_tmp5, byte_88, r180_24f_tmp6, r180_24f_tmp7;
		BitBlock byte_range_8c_8d, r180_24f_tmp8, r180_24f_tmp9, r180_24f_tmp10;
		BitBlock byte_92, r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13;
		BitBlock byte_range_99_9b, r180_24f_tmp14, r180_24f_tmp15, byte_9e;
		BitBlock r180_24f_tmp16, r180_24f_tmp17, r180_24f_tmp18, r180_24f_tmp19;
		BitBlock r180_24f_tmp20, r180_24f_tmp21, r180_24f_tmp22, byte_a8;
		BitBlock r180_24f_tmp23, r180_24f_tmp24, byte_range_aa_ab, r180_24f_tmp25;
		BitBlock r180_24f_tmp26, r180_24f_tmp27, byte_b0, r180_24f_tmp28;
		BitBlock r180_24f_tmp29, byte_b4, r180_24f_tmp30, byte_b6, r180_24f_tmp31;
		BitBlock r180_24f_tmp32, r180_24f_tmp33, byte_range_b9_ba, r180_24f_tmp34;
		BitBlock r180_24f_tmp35, byte_range_bd_bf, r180_24f_tmp36, r180_24f_tmp37;
		BitBlock byte_c7, byte_c7_adv, r180_24f_tmp38, r180_24f_tmp39, r180_24f_tmp40;
		BitBlock byte_8c, r180_24f_tmp41, byte_8e, r180_24f_tmp42, byte_90;
		BitBlock r180_24f_tmp43, r180_24f_tmp44, byte_94, r180_24f_tmp45, byte_96;
		BitBlock r180_24f_tmp46, byte_98, r180_24f_tmp47, r180_24f_tmp48, byte_9a;
		BitBlock r180_24f_tmp49, byte_range_9c_9d, r180_24f_tmp50, r180_24f_tmp51;
		BitBlock r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54, r180_24f_tmp55;
		BitBlock r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58, r180_24f_tmp59;
		BitBlock r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62, byte_range_af_b0;
		BitBlock r180_24f_tmp63, r180_24f_tmp64, r180_24f_tmp65, byte_b9;
		BitBlock r180_24f_tmp66, byte_bb, r180_24f_tmp67, byte_bd, r180_24f_tmp68;
		BitBlock byte_bf, r180_24f_tmp69, byte_c8, byte_c8_adv, r180_24f_tmp70;
		BitBlock r180_24f_tmp71, r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74;
		BitBlock r180_24f_tmp75, r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78;
		BitBlock r180_24f_tmp79, r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82;
		BitBlock r180_24f_tmp83, r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86;
		BitBlock r180_24f_tmp87, r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90;
		BitBlock r180_24f_tmp91, r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94;
		BitBlock r180_24f_tmp95, r180_24f_tmp96, r180_24f_tmp97, byte_range_b3_b9;
		BitBlock r180_24f_tmp98, r180_24f_tmp99, r180_24f_tmp100, byte_c9_adv;
		BitBlock r180_24f_tmp101, r180_24f_tmp102, r180_24f_tmp103, r180_24f_tmp104;
		BitBlock r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107, byte_range_90_bf;
		BitBlock r100_2ff_tmp9, r100_2ff_tmp10, byte_ca, byte_range_80_af;
		BitBlock r100_2ff_tmp11, r100_2ff_tmp12, r100_2ff_tmp13, r250_2af_tmp1;
		BitBlock r250_2af_tmp2, r250_2af_tmp3, byte_range_80_93, byte_ca_adv;
		BitBlock r250_2af_tmp4, r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7;
		BitBlock r250_2af_tmp8, r250_2af_tmp9, byte_range_95_af, r250_2af_tmp10;
		BitBlock r100_3ff_tmp2, byte_cd, byte_range_b0_bf, r100_3ff_tmp3;
		BitBlock r100_3ff_tmp4, r100_3ff_tmp5, byte_range_ce_cf, r100_3ff_tmp6;
		BitBlock r370_3ff_tmp1, byte_cd_adv, r370_3ff_tmp2, r370_3ff_tmp3;
		BitBlock r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7;
		BitBlock r370_3ff_tmp8, byte_range_bb_bd, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock byte_ce, r370_3ff_tmp11, r370_3ff_tmp12, byte_ce_adv, r370_3ff_tmp13;
		BitBlock r370_3ff_tmp14, r370_3ff_tmp15, byte_range_ac_bf, r370_3ff_tmp16;
		BitBlock byte_cf, r370_3ff_tmp17, r370_3ff_tmp18, byte_range_80_8e;
		BitBlock byte_cf_adv, r370_3ff_tmp19, r370_3ff_tmp20, byte_range_90_91;
		BitBlock r370_3ff_tmp21, r370_3ff_tmp22, byte_range_95_97, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35;
		BitBlock r370_3ff_tmp36, r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39;
		BitBlock r370_3ff_tmp40, r370_3ff_tmp41, byte_range_af_b3, r370_3ff_tmp42;
		BitBlock r370_3ff_tmp43, r370_3ff_tmp44, byte_b8, r370_3ff_tmp45;
		BitBlock r370_3ff_tmp46, r370_3ff_tmp47, byte_range_bb_bc, r370_3ff_tmp48;
		BitBlock r80_7ff_tmp23, r80_7ff_tmp24, byte_range_d0_d7, byte_range_d0_d3;
		BitBlock byte_d0, byte_d0_adv, r400_4ff_tmp1, r400_4ff_tmp2, byte_d1;
		BitBlock byte_range_80_9f, byte_d1_adv, r400_4ff_tmp3, r400_4ff_tmp4;
		BitBlock r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7, r400_4ff_tmp8;
		BitBlock r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11, r400_4ff_tmp12;
		BitBlock r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15, r400_4ff_tmp16;
		BitBlock r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19, r400_4ff_tmp20;
		BitBlock r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23, r400_4ff_tmp24;
		BitBlock r400_4ff_tmp25, r400_4ff_tmp26, byte_d2, r400_4ff_tmp27, byte_d2_adv;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, r400_4ff_tmp39;
		BitBlock r400_4ff_tmp40, r400_4ff_tmp41, r400_4ff_tmp42, r400_4ff_tmp43;
		BitBlock r400_4ff_tmp44, r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47;
		BitBlock r400_4ff_tmp48, r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51;
		BitBlock r400_4ff_tmp52, r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55;
		BitBlock r400_4ff_tmp56, byte_d3, byte_d3_adv, r400_4ff_tmp57, r400_4ff_tmp58;
		BitBlock r400_4ff_tmp59, r400_4ff_tmp60, r400_4ff_tmp61, r400_4ff_tmp62;
		BitBlock r400_4ff_tmp63, r400_4ff_tmp64, byte_8a, r400_4ff_tmp65;
		BitBlock r400_4ff_tmp66, r400_4ff_tmp67, r400_4ff_tmp68, byte_range_8e_8f;
		BitBlock r400_4ff_tmp69, r400_4ff_tmp70, r400_4ff_tmp71, r400_4ff_tmp72;
		BitBlock r400_4ff_tmp73, r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76;
		BitBlock r400_4ff_tmp77, r400_4ff_tmp78, r400_4ff_tmp79, r400_4ff_tmp80;
		BitBlock r400_4ff_tmp81, r400_4ff_tmp82, r400_4ff_tmp83, r400_4ff_tmp84;
		BitBlock r400_4ff_tmp85, r400_4ff_tmp86, r400_4ff_tmp87, r400_4ff_tmp88;
		BitBlock r400_4ff_tmp89, r400_4ff_tmp90, r400_4ff_tmp91, r400_4ff_tmp92;
		BitBlock r400_4ff_tmp93, r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2;
		BitBlock byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1;
		BitBlock byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_52f_tmp1, byte_d4_adv;
		BitBlock r500_52f_tmp2, r500_52f_tmp3, r500_52f_tmp4, r500_52f_tmp5;
		BitBlock r500_52f_tmp6, r500_52f_tmp7, r500_52f_tmp8, r500_52f_tmp9;
		BitBlock r500_52f_tmp10, r500_52f_tmp11, r500_52f_tmp12, r500_52f_tmp13;
		BitBlock r500_52f_tmp14, r500_52f_tmp15, r500_52f_tmp16, r500_52f_tmp17;
		BitBlock r500_52f_tmp18, r500_52f_tmp19, r500_52f_tmp20, r500_52f_tmp21;
		BitBlock r500_52f_tmp22, r500_52f_tmp23, r500_52f_tmp24, r500_52f_tmp25;
		BitBlock r500_52f_tmp26, r500_52f_tmp27, r500_52f_tmp28, r500_52f_tmp29;
		BitBlock r500_52f_tmp30, r500_52f_tmp31, r500_52f_tmp32, r500_52f_tmp33;
		BitBlock r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1;
		BitBlock r530_58f_tmp2, byte_range_a1_bf, byte_d5_adv, r530_58f_tmp3;
		BitBlock byte_range_80_87, byte_d6_adv, r530_58f_tmp4, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock sequence_e1_b4, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, byte_range_80_ab, sequence_e1_b4_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, sequence_e1_b5, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_ab_b7;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, byte_range_b9_bf, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, sequence_e1_b6, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, byte_range_80_9a, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, r1000_1fff_tmp22, sequence_e1_b8;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, sequence_e1_b8_adv;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, r1000_1fff_tmp47, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, r1000_1fff_tmp50, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, r1000_1fff_tmp53, r1000_1fff_tmp54;
		BitBlock r1000_1fff_tmp55, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, r1000_1fff_tmp59, r1000_1fff_tmp60;
		BitBlock r1000_1fff_tmp61, r1000_1fff_tmp62, r1000_1fff_tmp63;
		BitBlock r1000_1fff_tmp64, r1000_1fff_tmp65, sequence_e1_b9;
		BitBlock sequence_e1_b9_adv, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, r1000_1fff_tmp82;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, r1000_1fff_tmp94;
		BitBlock r1000_1fff_tmp95, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock r1000_1fff_tmp98, sequence_e1_ba, sequence_e1_ba_adv;
		BitBlock r1000_1fff_tmp99, r1000_1fff_tmp100, r1000_1fff_tmp101;
		BitBlock r1000_1fff_tmp102, r1000_1fff_tmp103, r1000_1fff_tmp104;
		BitBlock r1000_1fff_tmp105, r1000_1fff_tmp106, r1000_1fff_tmp107;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, r1000_1fff_tmp112, byte_range_95_9d;
		BitBlock r1000_1fff_tmp113, r1000_1fff_tmp114, r1000_1fff_tmp115;
		BitBlock r1000_1fff_tmp116, r1000_1fff_tmp117, r1000_1fff_tmp118;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, r1000_1fff_tmp123, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, r1000_1fff_tmp126, r1000_1fff_tmp127;
		BitBlock r1000_1fff_tmp128, r1000_1fff_tmp129, r1000_1fff_tmp130;
		BitBlock sequence_e1_bb, sequence_e1_bb_adv, r1000_1fff_tmp131;
		BitBlock r1000_1fff_tmp132, r1000_1fff_tmp133, r1000_1fff_tmp134;
		BitBlock r1000_1fff_tmp135, r1000_1fff_tmp136, r1000_1fff_tmp137;
		BitBlock r1000_1fff_tmp138, r1000_1fff_tmp139, r1000_1fff_tmp140;
		BitBlock r1000_1fff_tmp141, r1000_1fff_tmp142, r1000_1fff_tmp143;
		BitBlock r1000_1fff_tmp144, r1000_1fff_tmp145, r1000_1fff_tmp146;
		BitBlock r1000_1fff_tmp147, r1000_1fff_tmp148, r1000_1fff_tmp149;
		BitBlock r1000_1fff_tmp150, r1000_1fff_tmp151, r1000_1fff_tmp152;
		BitBlock r1000_1fff_tmp153, r1000_1fff_tmp154, r1000_1fff_tmp155;
		BitBlock r1000_1fff_tmp156, r1000_1fff_tmp157, r1000_1fff_tmp158;
		BitBlock r1000_1fff_tmp159, r1000_1fff_tmp160, r1000_1fff_tmp161;
		BitBlock r1000_1fff_tmp162, r1000_1fff_tmp163, sequence_e1_bc;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp164, r1000_1fff_tmp165;
		BitBlock byte_range_90_95, r1000_1fff_tmp166, byte_range_a0_a7;
		BitBlock r1000_1fff_tmp167, byte_range_b0_b7, r1000_1fff_tmp168;
		BitBlock sequence_e1_bd, byte_range_80_85, sequence_e1_bd_adv;
		BitBlock r1000_1fff_tmp169, byte_range_90_97, r1000_1fff_tmp170;
		BitBlock r1000_1fff_tmp171, r1000_1fff_tmp172, byte_range_b0_bd;
		BitBlock r1000_1fff_tmp173, r1000_1fff_tmp174, sequence_e1_be;
		BitBlock sequence_e1_be_adv, r1000_1fff_tmp175, r1000_1fff_tmp176;
		BitBlock r1000_1fff_tmp177, byte_range_b0_b4, r1000_1fff_tmp178;
		BitBlock r1000_1fff_tmp179, byte_range_b6_b7, r1000_1fff_tmp180;
		BitBlock r1000_1fff_tmp181, sequence_e1_bf, r1000_1fff_tmp182;
		BitBlock r1000_1fff_tmp183, byte_range_82_84, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp184, byte_range_86_87, r1000_1fff_tmp185;
		BitBlock byte_range_90_93, r1000_1fff_tmp186, byte_range_96_97;
		BitBlock r1000_1fff_tmp187, r1000_1fff_tmp188, byte_range_b2_b4;
		BitBlock r1000_1fff_tmp189, r1000_1fff_tmp190, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock sequence_e2_84, byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, r2000_2fff_tmp23, byte_range_bc_bd;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, sequence_e2_85, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock byte_range_86_89, sequence_e2_85_adv, r2000_2fff_tmp30;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33, sequence_e2_86;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp34, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock sequence_e2_b1, r2000_2fff_tmp37, r2000_2fff_tmp38, byte_range_80_9e;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp39, r2000_2fff_tmp40;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, byte_range_a5_a6;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45, byte_aa;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, byte_ac, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, byte_range_b3_b4, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, r2000_2fff_tmp55, byte_range_b6_bb;
		BitBlock r2000_2fff_tmp56, byte_b2, sequence_e2_b2, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock r2000_2fff_tmp78, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, r2000_2fff_tmp83;
		BitBlock r2000_2fff_tmp84, r2000_2fff_tmp85, r2000_2fff_tmp86;
		BitBlock r2000_2fff_tmp87, r2000_2fff_tmp88, r2000_2fff_tmp89;
		BitBlock r2000_2fff_tmp90, r2000_2fff_tmp91, sequence_e2_b3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp92, r2000_2fff_tmp93;
		BitBlock r2000_2fff_tmp94, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, byte_range_a3_a4, r2000_2fff_tmp110;
		BitBlock r2000_2fff_tmp111, byte_ae, r2000_2fff_tmp112, r2000_2fff_tmp113;
		BitBlock sequence_e2_b4, r2000_2fff_tmp114, r2000_2fff_tmp115;
		BitBlock r2000_2fff_tmp116, byte_range_80_a5, sequence_e2_b4_adv;
		BitBlock r2000_2fff_tmp117, r2000_2fff_tmp118, r2000_2fff_tmp119;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock sequence_ea_99, byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, sequence_ea_99_adv, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, ra000_ffff_tmp42, sequence_ea_9a;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, ra000_ffff_tmp49, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, byte_9c, sequence_ea_9c, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, ra000_ffff_tmp66;
		BitBlock ra000_ffff_tmp67, byte_range_af_b1, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, ra000_ffff_tmp77, sequence_ea_9d;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock byte_range_b1_b8, ra000_ffff_tmp104, ra000_ffff_tmp105;
		BitBlock ra000_ffff_tmp106, ra000_ffff_tmp107, ra000_ffff_tmp108;
		BitBlock sequence_ea_9e, sequence_ea_9e_adv, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, ra000_ffff_tmp115;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock byte_range_93_95, ra000_ffff_tmp119, ra000_ffff_tmp120;
		BitBlock ra000_ffff_tmp121, ra000_ffff_tmp122, ra000_ffff_tmp123;
		BitBlock ra000_ffff_tmp124, ra000_ffff_tmp125, ra000_ffff_tmp126;
		BitBlock ra000_ffff_tmp127, ra000_ffff_tmp128, ra000_ffff_tmp129;
		BitBlock sequence_ea_9f, sequence_ea_9f_adv, ra000_ffff_tmp130, sequence_ea_ac;
		BitBlock sequence_ea_ac_adv, ra000_ffff_tmp131, sequence_ea_ad;
		BitBlock ra000_ffff_tmp132, ra000_ffff_tmp133, sequence_ea_ad_adv;
		BitBlock ra000_ffff_tmp134, ra000_ffff_tmp135, byte_range_a4_a5;
		BitBlock ra000_ffff_tmp136, byte_ef, ra000_ffff_tmp137, sequence_ef_ac;
		BitBlock byte_ef_adv, ra000_ffff_tmp138, ra000_ffff_tmp139, byte_range_80_86;
		BitBlock sequence_ef_ac_adv, ra000_ffff_tmp140, byte_range_93_97;
		BitBlock ra000_ffff_tmp141, sequence_ef_bd, byte_range_81_9a;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp142, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, r10000_10ffff_tmp4, sequence_f0_90;
		BitBlock r10000_10ffff_tmp5, sequence_f0_90_90, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock byte_range_a8_bf, sequence_f0_90_90_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, sequence_f0_90_91;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_91_adv, r10000_10ffff_tmp12;
		BitBlock sequence_f0_91, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, sequence_f0_91_a3, sequence_f0_91_adv;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, sequence_f0_9d, r10000_10ffff_tmp19;
		BitBlock sequence_f0_9d_90, sequence_f0_9d_adv, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_range_9a_b3;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp26, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, byte_range_8e_94;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, byte_range_96_a7, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock byte_range_82_9b, sequence_f0_9d_92_adv, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock byte_range_b6_b9, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, sequence_f0_9d_93, byte_range_80_83;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp54, byte_range_85_8f;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, byte_range_aa_bf;
		BitBlock r10000_10ffff_tmp57, r10000_10ffff_tmp58, r10000_10ffff_tmp59;
		BitBlock sequence_f0_9d_94, sequence_f0_9d_94_adv, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, byte_range_9e_b7, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, sequence_f0_9d_95, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock byte_range_92_ab, sequence_f0_9d_95_adv, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, sequence_f0_9d_96, r10000_10ffff_tmp73;
		BitBlock byte_range_86_9f, sequence_f0_9d_96_adv, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, byte_range_ba_bf, r10000_10ffff_tmp76;
		BitBlock r10000_10ffff_tmp77, sequence_f0_9d_97, sequence_f0_9d_97_adv;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, byte_range_ae_bf;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, sequence_f0_9d_98;
		BitBlock sequence_f0_9d_98_adv, r10000_10ffff_tmp82, byte_range_a2_bb;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, sequence_f0_9d_99;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, byte_range_96_af;
		BitBlock sequence_f0_9d_99_adv, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock sequence_f0_9d_9a, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock byte_range_8a_a5, sequence_f0_9d_9a_adv, r10000_10ffff_tmp91;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp92, byte_range_82_9a;
		BitBlock sequence_f0_9d_9b_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock r10000_10ffff_tmp95, r10000_10ffff_tmp96, r10000_10ffff_tmp97;
		BitBlock byte_range_9c_a1, r10000_10ffff_tmp98, byte_range_bc_bf;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, sequence_f0_9d_9c;
		BitBlock r10000_10ffff_tmp101, byte_range_80_94, sequence_f0_9d_9c_adv;
		BitBlock r10000_10ffff_tmp102, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock byte_range_96_9b, r10000_10ffff_tmp105, byte_range_b6_bf;
		BitBlock r10000_10ffff_tmp106, sequence_f0_9d_9d, r10000_10ffff_tmp107;
		BitBlock r10000_10ffff_tmp108, sequence_f0_9d_9d_adv, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, sequence_f0_9d_9e, r10000_10ffff_tmp114;
		BitBlock r10000_10ffff_tmp115, byte_range_80_88, sequence_f0_9d_9e_adv;
		BitBlock r10000_10ffff_tmp116, r10000_10ffff_tmp117, byte_range_8a_8f;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock sequence_f0_9d_9f, byte_range_80_82, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, byte_range_84_89;
		BitBlock r10000_10ffff_tmp123, r10000_10ffff_tmp124;




        struct_gc_Ll.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, byte_range_61_7a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 76))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 19))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp7);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp14 = simd_or(basis_bits.bit_4, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_and(basis_bits.bit_3, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_not(r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp17, tmp3);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_3, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp16), simd_andc(r80_7ff_tmp19, basis_bits.bit_2));
            byte_range_9f_b6 = simd_and(r80_7ff_tmp5, r80_7ff_tmp20);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp21 = simd_and(byte_c3_adv, byte_range_9f_b6);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r80_7ff_tmp21);
            byte_range_b8_bf = simd_and(r80_7ff_tmp7, basis_bits.bit_4);
            r80_7ff_tmp22 = simd_and(byte_c3_adv, byte_range_b8_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r80_7ff_tmp22);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 10))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 7))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(r80_7ff_tmp9, tmp7);
                    byte_81 = simd_and(byte_range_80_8f, r100_17f_tmp2);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp3 = simd_and(byte_c4_adv, byte_81);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp3);
                    byte_83 = simd_and(byte_range_80_8f, r80_7ff_tmp12);
                    r100_17f_tmp4 = simd_and(byte_c4_adv, byte_83);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp4);
                    byte_85 = simd_and(byte_range_80_8f, r80_7ff_tmp10);
                    r100_17f_tmp5 = simd_and(byte_c4_adv, byte_85);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp5);
                    r100_17f_tmp6 = simd_and(r80_7ff_tmp8, tmp3);
                    byte_87 = simd_and(byte_range_80_8f, r100_17f_tmp6);
                    r100_17f_tmp7 = simd_and(byte_c4_adv, byte_87);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp7);
                    byte_89 = simd_and(byte_range_80_8f, r100_2ff_tmp5);
                    r100_17f_tmp8 = simd_and(byte_c4_adv, byte_89);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp8);
                    r100_17f_tmp9 = simd_and(r100_2ff_tmp4, tmp3);
                    byte_8b = simd_and(byte_range_80_8f, r100_17f_tmp9);
                    r100_17f_tmp10 = simd_and(byte_c4_adv, byte_8b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp10);
                    r100_17f_tmp11 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    byte_8d = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp12 = simd_and(byte_c4_adv, byte_8d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp12);
                    byte_8f = simd_and(byte_range_80_8f, r80_7ff_tmp18);
                    r100_17f_tmp13 = simd_and(byte_c4_adv, byte_8f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp13);
                    r100_17f_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r100_17f_tmp15 = simd_and(r80_7ff_tmp5, r100_17f_tmp14);
                    byte_91 = simd_and(r100_17f_tmp15, r100_17f_tmp2);
                    r100_17f_tmp16 = simd_and(byte_c4_adv, byte_91);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp16);
                    byte_93 = simd_and(r100_17f_tmp15, r80_7ff_tmp12);
                    r100_17f_tmp17 = simd_and(byte_c4_adv, byte_93);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp17);
                    byte_95 = simd_and(r100_17f_tmp15, r80_7ff_tmp10);
                    r100_17f_tmp18 = simd_and(byte_c4_adv, byte_95);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp18);
                    byte_97 = simd_and(r100_17f_tmp15, r100_17f_tmp6);
                    r100_17f_tmp19 = simd_and(byte_c4_adv, byte_97);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp19);
                    byte_99 = simd_and(r100_17f_tmp15, r100_2ff_tmp5);
                    r100_17f_tmp20 = simd_and(byte_c4_adv, byte_99);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp20);
                    byte_9b = simd_and(r100_17f_tmp15, r100_17f_tmp9);
                    r100_17f_tmp21 = simd_and(byte_c4_adv, byte_9b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp21);
                    byte_9d = simd_and(r100_17f_tmp15, r100_17f_tmp11);
                    r100_17f_tmp22 = simd_and(byte_c4_adv, byte_9d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp22);
                    byte_9f = simd_and(r100_17f_tmp15, r80_7ff_tmp18);
                    r100_17f_tmp23 = simd_and(byte_c4_adv, byte_9f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp23);
                    r100_17f_tmp24 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp25 = simd_and(r80_7ff_tmp5, r100_17f_tmp24);
                    byte_a1 = simd_and(r100_17f_tmp25, r100_17f_tmp2);
                    r100_17f_tmp26 = simd_and(byte_c4_adv, byte_a1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp26);
                    byte_a3 = simd_and(r100_17f_tmp25, r80_7ff_tmp12);
                    r100_17f_tmp27 = simd_and(byte_c4_adv, byte_a3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp27);
                    byte_a5 = simd_and(r100_17f_tmp25, r80_7ff_tmp10);
                    r100_17f_tmp28 = simd_and(byte_c4_adv, byte_a5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp28);
                    byte_a7 = simd_and(r100_17f_tmp25, r100_17f_tmp6);
                    r100_17f_tmp29 = simd_and(byte_c4_adv, byte_a7);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp29);
                    byte_a9 = simd_and(r100_17f_tmp25, r100_2ff_tmp5);
                    r100_17f_tmp30 = simd_and(byte_c4_adv, byte_a9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp30);
                    byte_ab = simd_and(r100_17f_tmp25, r100_17f_tmp9);
                    r100_17f_tmp31 = simd_and(byte_c4_adv, byte_ab);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp31);
                    byte_ad = simd_and(r100_17f_tmp25, r100_17f_tmp11);
                    r100_17f_tmp32 = simd_and(byte_c4_adv, byte_ad);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp32);
                    byte_af = simd_and(r100_17f_tmp25, r80_7ff_tmp18);
                    r100_17f_tmp33 = simd_and(byte_c4_adv, byte_af);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp33);
                    byte_b1 = simd_and(r80_7ff_tmp7, r100_17f_tmp2);
                    r100_17f_tmp34 = simd_and(byte_c4_adv, byte_b1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp34);
                    byte_b3 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r100_17f_tmp35 = simd_and(byte_c4_adv, byte_b3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp35);
                    r100_17f_tmp36 = simd_and(byte_c4_adv, byte_b5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp36);
                    r100_17f_tmp37 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp13, basis_bits.bit_4));
                    byte_range_b7_b8 = simd_and(r80_7ff_tmp7, r100_17f_tmp37);
                    r100_17f_tmp38 = simd_and(byte_c4_adv, byte_range_b7_b8);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp38);
                    r100_17f_tmp39 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    byte_ba = simd_and(r80_7ff_tmp7, r100_17f_tmp39);
                    r100_17f_tmp40 = simd_and(byte_c4_adv, byte_ba);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp40);
                    r100_17f_tmp41 = simd_andc(r80_7ff_tmp17, tmp8);
                    byte_bc = simd_and(r80_7ff_tmp7, r100_17f_tmp41);
                    r100_17f_tmp42 = simd_and(byte_c4_adv, byte_bc);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp42);
                    r100_17f_tmp43 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    byte_be = simd_and(r80_7ff_tmp7, r100_17f_tmp43);
                    r100_17f_tmp44 = simd_and(byte_c4_adv, byte_be);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp44);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                    byte_80 = simd_andc(byte_range_80_8f, tmp9);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp45 = simd_and(byte_c5_adv, byte_80);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp45);
                    byte_82 = simd_and(byte_range_80_8f, r80_7ff_tmp4);
                    r100_17f_tmp46 = simd_and(byte_c5_adv, byte_82);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp46);
                    byte_84 = simd_and(byte_range_80_8f, r100_17f_tmp1);
                    r100_17f_tmp47 = simd_and(byte_c5_adv, byte_84);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp47);
                    r100_17f_tmp48 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_86 = simd_and(byte_range_80_8f, r100_17f_tmp48);
                    r100_17f_tmp49 = simd_and(byte_c5_adv, byte_86);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp49);
                    r100_17f_tmp50 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    byte_range_88_89 = simd_and(byte_range_80_8f, r100_17f_tmp50);
                    r100_17f_tmp51 = simd_and(byte_c5_adv, byte_range_88_89);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp51);
                    r100_17f_tmp52 = simd_and(byte_c5_adv, byte_8b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp52);
                    r100_17f_tmp53 = simd_and(byte_c5_adv, byte_8d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp53);
                    r100_17f_tmp54 = simd_and(byte_c5_adv, byte_8f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp54);
                    r100_17f_tmp55 = simd_and(byte_c5_adv, byte_91);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp55);
                    r100_17f_tmp56 = simd_and(byte_c5_adv, byte_93);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp56);
                    r100_17f_tmp57 = simd_and(byte_c5_adv, byte_95);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp57);
                    r100_17f_tmp58 = simd_and(byte_c5_adv, byte_97);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp58);
                    r100_17f_tmp59 = simd_and(byte_c5_adv, byte_99);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp59);
                    r100_17f_tmp60 = simd_and(byte_c5_adv, byte_9b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp60);
                    r100_17f_tmp61 = simd_and(byte_c5_adv, byte_9d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp61);
                    r100_17f_tmp62 = simd_and(byte_c5_adv, byte_9f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp62);
                    r100_17f_tmp63 = simd_and(byte_c5_adv, byte_a1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp63);
                    r100_17f_tmp64 = simd_and(byte_c5_adv, byte_a3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp64);
                    r100_17f_tmp65 = simd_and(byte_c5_adv, byte_a5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp65);
                    r100_17f_tmp66 = simd_and(byte_c5_adv, byte_a7);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp66);
                    r100_17f_tmp67 = simd_and(byte_c5_adv, byte_a9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp67);
                    r100_17f_tmp68 = simd_and(byte_c5_adv, byte_ab);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp68);
                    r100_17f_tmp69 = simd_and(byte_c5_adv, byte_ad);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp69);
                    r100_17f_tmp70 = simd_and(byte_c5_adv, byte_af);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp70);
                    r100_17f_tmp71 = simd_and(byte_c5_adv, byte_b1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp71);
                    r100_17f_tmp72 = simd_and(byte_c5_adv, byte_b3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp72);
                    r100_17f_tmp73 = simd_and(byte_c5_adv, byte_b5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp73);
                    byte_b7 = simd_and(r80_7ff_tmp7, r100_17f_tmp6);
                    r100_17f_tmp74 = simd_and(byte_c5_adv, byte_b7);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp74);
                    r100_17f_tmp75 = simd_and(byte_c5_adv, byte_ba);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp75);
                    r100_17f_tmp76 = simd_and(byte_c5_adv, byte_bc);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp76);
                    r100_17f_tmp77 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                    byte_range_be_bf = simd_and(r80_7ff_tmp7, r100_17f_tmp77);
                    r100_17f_tmp78 = simd_and(byte_c5_adv, byte_range_be_bf);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r100_17f_tmp78);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    byte_80 = simd_andc(byte_range_80_8f, tmp9);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp2 = simd_and(byte_c6_adv, byte_80);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp2);
                    byte_83 = simd_and(byte_range_80_8f, r80_7ff_tmp12);
                    r180_24f_tmp3 = simd_and(byte_c6_adv, byte_83);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp3);
                    byte_85 = simd_and(byte_range_80_8f, r80_7ff_tmp10);
                    r180_24f_tmp4 = simd_and(byte_c6_adv, byte_85);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp4);
                    r180_24f_tmp5 = simd_andc(r100_2ff_tmp4, tmp8);
                    byte_88 = simd_and(byte_range_80_8f, r180_24f_tmp5);
                    r180_24f_tmp6 = simd_and(byte_c6_adv, byte_88);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp6);
                    r180_24f_tmp7 = simd_andc(r80_7ff_tmp17, basis_bits.bit_6);
                    byte_range_8c_8d = simd_and(byte_range_80_8f, r180_24f_tmp7);
                    r180_24f_tmp8 = simd_and(byte_c6_adv, byte_range_8c_8d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp8);
                    r180_24f_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r180_24f_tmp10 = simd_and(r80_7ff_tmp5, r180_24f_tmp9);
                    byte_92 = simd_and(r180_24f_tmp10, r80_7ff_tmp4);
                    r180_24f_tmp11 = simd_and(byte_c6_adv, byte_92);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp11);
                    byte_95 = simd_and(r180_24f_tmp10, r80_7ff_tmp10);
                    r180_24f_tmp12 = simd_and(byte_c6_adv, byte_95);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp12);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp10, r100_2ff_tmp4);
                    byte_range_99_9b = simd_and(r180_24f_tmp13, tmp8);
                    r180_24f_tmp14 = simd_and(byte_c6_adv, byte_range_99_9b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp14);
                    r180_24f_tmp15 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    byte_9e = simd_and(r180_24f_tmp10, r180_24f_tmp15);
                    r180_24f_tmp16 = simd_and(byte_c6_adv, byte_9e);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp16);
                    r180_24f_tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp18 = simd_and(r80_7ff_tmp5, r180_24f_tmp17);
                    r180_24f_tmp19 = simd_andc(r80_7ff_tmp9, tmp7);
                    byte_a1 = simd_and(r180_24f_tmp18, r180_24f_tmp19);
                    r180_24f_tmp20 = simd_and(byte_c6_adv, byte_a1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp20);
                    byte_a3 = simd_and(r180_24f_tmp18, r80_7ff_tmp12);
                    r180_24f_tmp21 = simd_and(byte_c6_adv, byte_a3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp21);
                    byte_a5 = simd_and(r180_24f_tmp18, r80_7ff_tmp10);
                    r180_24f_tmp22 = simd_and(byte_c6_adv, byte_a5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp22);
                    byte_a8 = simd_and(r180_24f_tmp18, r180_24f_tmp5);
                    r180_24f_tmp23 = simd_and(byte_c6_adv, byte_a8);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp23);
                    r180_24f_tmp24 = simd_and(r100_2ff_tmp4, basis_bits.bit_6);
                    byte_range_aa_ab = simd_and(r180_24f_tmp18, r180_24f_tmp24);
                    r180_24f_tmp25 = simd_and(byte_c6_adv, byte_range_aa_ab);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp25);
                    r180_24f_tmp26 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    byte_ad = simd_and(r180_24f_tmp18, r180_24f_tmp26);
                    r180_24f_tmp27 = simd_and(byte_c6_adv, byte_ad);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp27);
                    byte_b0 = simd_andc(r80_7ff_tmp7, tmp9);
                    r180_24f_tmp28 = simd_and(byte_c6_adv, byte_b0);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp28);
                    r180_24f_tmp29 = simd_andc(r80_7ff_tmp8, tmp8);
                    byte_b4 = simd_and(r80_7ff_tmp7, r180_24f_tmp29);
                    r180_24f_tmp30 = simd_and(byte_c6_adv, byte_b4);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp30);
                    byte_b6 = simd_and(r80_7ff_tmp7, r180_24f_tmp1);
                    r180_24f_tmp31 = simd_and(byte_c6_adv, byte_b6);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp31);
                    r180_24f_tmp32 = simd_and(r80_7ff_tmp7, r100_2ff_tmp4);
                    r180_24f_tmp33 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    byte_range_b9_ba = simd_and(r180_24f_tmp32, r180_24f_tmp33);
                    r180_24f_tmp34 = simd_and(byte_c6_adv, byte_range_b9_ba);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp34);
                    r180_24f_tmp35 = simd_and(r80_7ff_tmp7, r80_7ff_tmp17);
                    byte_range_bd_bf = simd_and(r180_24f_tmp35, tmp8);
                    r180_24f_tmp36 = simd_and(byte_c6_adv, byte_range_bd_bf);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp36);
                    r180_24f_tmp37 = simd_and(r80_7ff_tmp8, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp37);
                    byte_86 = simd_and(byte_range_80_8f, r180_24f_tmp1);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp38 = simd_and(byte_c7_adv, byte_86);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp38);
                    byte_89 = simd_and(byte_range_80_8f, r100_2ff_tmp5);
                    r180_24f_tmp39 = simd_and(byte_c7_adv, byte_89);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp39);
                    r180_24f_tmp40 = simd_andc(r80_7ff_tmp17, tmp8);
                    byte_8c = simd_and(byte_range_80_8f, r180_24f_tmp40);
                    r180_24f_tmp41 = simd_and(byte_c7_adv, byte_8c);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp41);
                    byte_8e = simd_and(byte_range_80_8f, r180_24f_tmp15);
                    r180_24f_tmp42 = simd_and(byte_c7_adv, byte_8e);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp42);
                    byte_90 = simd_andc(r180_24f_tmp10, tmp9);
                    r180_24f_tmp43 = simd_and(byte_c7_adv, byte_90);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp43);
                    r180_24f_tmp44 = simd_and(byte_c7_adv, byte_92);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp44);
                    byte_94 = simd_and(r180_24f_tmp10, r180_24f_tmp29);
                    r180_24f_tmp45 = simd_and(byte_c7_adv, byte_94);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp45);
                    byte_96 = simd_and(r180_24f_tmp10, r180_24f_tmp1);
                    r180_24f_tmp46 = simd_and(byte_c7_adv, byte_96);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp46);
                    byte_98 = simd_and(r180_24f_tmp10, r180_24f_tmp5);
                    r180_24f_tmp47 = simd_and(byte_c7_adv, byte_98);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp47);
                    r180_24f_tmp48 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    byte_9a = simd_and(r180_24f_tmp10, r180_24f_tmp48);
                    r180_24f_tmp49 = simd_and(byte_c7_adv, byte_9a);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp49);
                    byte_range_9c_9d = simd_and(r180_24f_tmp10, r180_24f_tmp7);
                    r180_24f_tmp50 = simd_and(byte_c7_adv, byte_range_9c_9d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp50);
                    byte_9f = simd_and(r180_24f_tmp10, r80_7ff_tmp18);
                    r180_24f_tmp51 = simd_and(byte_c7_adv, byte_9f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp51);
                    r180_24f_tmp52 = simd_and(byte_c7_adv, byte_a1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp52);
                    r180_24f_tmp53 = simd_and(byte_c7_adv, byte_a3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp53);
                    r180_24f_tmp54 = simd_and(byte_c7_adv, byte_a5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp54);
                    byte_a7 = simd_and(r180_24f_tmp18, r180_24f_tmp37);
                    r180_24f_tmp55 = simd_and(byte_c7_adv, byte_a7);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp55);
                    byte_a9 = simd_and(r180_24f_tmp18, r100_2ff_tmp5);
                    r180_24f_tmp56 = simd_and(byte_c7_adv, byte_a9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp56);
                    r180_24f_tmp57 = simd_and(r100_2ff_tmp4, tmp3);
                    byte_ab = simd_and(r180_24f_tmp18, r180_24f_tmp57);
                    r180_24f_tmp58 = simd_and(byte_c7_adv, byte_ab);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp58);
                    r180_24f_tmp59 = simd_and(byte_c7_adv, byte_ad);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp59);
                    r180_24f_tmp60 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                    r180_24f_tmp61 = simd_not(tmp9);
                    r180_24f_tmp62 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp61), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                    byte_range_af_b0 = simd_and(r180_24f_tmp60, r180_24f_tmp62);
                    r180_24f_tmp63 = simd_and(byte_c7_adv, byte_range_af_b0);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp63);
                    byte_b3 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r180_24f_tmp64 = simd_and(byte_c7_adv, byte_b3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp64);
                    r180_24f_tmp65 = simd_and(byte_c7_adv, byte_b5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp65);
                    byte_b9 = simd_and(r80_7ff_tmp7, r100_2ff_tmp5);
                    r180_24f_tmp66 = simd_and(byte_c7_adv, byte_b9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp66);
                    byte_bb = simd_and(r80_7ff_tmp7, r180_24f_tmp57);
                    r180_24f_tmp67 = simd_and(byte_c7_adv, byte_bb);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp67);
                    byte_bd = simd_and(r80_7ff_tmp7, r180_24f_tmp26);
                    r180_24f_tmp68 = simd_and(byte_c7_adv, byte_bd);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp68);
                    byte_bf = simd_and(r80_7ff_tmp7, r80_7ff_tmp18);
                    r180_24f_tmp69 = simd_and(byte_c7_adv, byte_bf);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp69);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp5);
                    byte_81 = simd_and(byte_range_80_8f, r180_24f_tmp19);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp70 = simd_and(byte_c8_adv, byte_81);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp70);
                    r180_24f_tmp71 = simd_and(byte_c8_adv, byte_83);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp71);
                    r180_24f_tmp72 = simd_and(byte_c8_adv, byte_85);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp72);
                    byte_87 = simd_and(byte_range_80_8f, r180_24f_tmp37);
                    r180_24f_tmp73 = simd_and(byte_c8_adv, byte_87);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp73);
                    r180_24f_tmp74 = simd_and(byte_c8_adv, byte_89);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp74);
                    byte_8b = simd_and(byte_range_80_8f, r180_24f_tmp57);
                    r180_24f_tmp75 = simd_and(byte_c8_adv, byte_8b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp75);
                    byte_8d = simd_and(byte_range_80_8f, r180_24f_tmp26);
                    r180_24f_tmp76 = simd_and(byte_c8_adv, byte_8d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp76);
                    byte_8f = simd_and(byte_range_80_8f, r80_7ff_tmp18);
                    r180_24f_tmp77 = simd_and(byte_c8_adv, byte_8f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp77);
                    byte_91 = simd_and(r180_24f_tmp10, r180_24f_tmp19);
                    r180_24f_tmp78 = simd_and(byte_c8_adv, byte_91);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp78);
                    byte_93 = simd_and(r180_24f_tmp10, r80_7ff_tmp12);
                    r180_24f_tmp79 = simd_and(byte_c8_adv, byte_93);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp79);
                    r180_24f_tmp80 = simd_and(byte_c8_adv, byte_95);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp80);
                    byte_97 = simd_and(r180_24f_tmp10, r180_24f_tmp37);
                    r180_24f_tmp81 = simd_and(byte_c8_adv, byte_97);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp81);
                    byte_99 = simd_and(r180_24f_tmp10, r100_2ff_tmp5);
                    r180_24f_tmp82 = simd_and(byte_c8_adv, byte_99);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp82);
                    byte_9b = simd_and(r180_24f_tmp10, r180_24f_tmp57);
                    r180_24f_tmp83 = simd_and(byte_c8_adv, byte_9b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp83);
                    byte_9d = simd_and(r180_24f_tmp10, r180_24f_tmp26);
                    r180_24f_tmp84 = simd_and(byte_c8_adv, byte_9d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp84);
                    r180_24f_tmp85 = simd_and(byte_c8_adv, byte_9f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp85);
                    r180_24f_tmp86 = simd_and(byte_c8_adv, byte_a1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp86);
                    r180_24f_tmp87 = simd_and(byte_c8_adv, byte_a3);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp87);
                    r180_24f_tmp88 = simd_and(byte_c8_adv, byte_a5);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp88);
                    r180_24f_tmp89 = simd_and(byte_c8_adv, byte_a7);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp89);
                    r180_24f_tmp90 = simd_and(byte_c8_adv, byte_a9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp90);
                    r180_24f_tmp91 = simd_and(byte_c8_adv, byte_ab);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp91);
                    r180_24f_tmp92 = simd_and(byte_c8_adv, byte_ad);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp92);
                    byte_af = simd_and(r180_24f_tmp18, r80_7ff_tmp18);
                    r180_24f_tmp93 = simd_and(byte_c8_adv, byte_af);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp93);
                    byte_b1 = simd_and(r80_7ff_tmp7, r180_24f_tmp19);
                    r180_24f_tmp94 = simd_and(byte_c8_adv, byte_b1);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp94);
                    r180_24f_tmp95 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                    r180_24f_tmp96 = simd_not(r180_24f_tmp95);
                    r180_24f_tmp97 = simd_or(simd_and(basis_bits.bit_4, r180_24f_tmp96), simd_andc(tmp4, basis_bits.bit_4));
                    byte_range_b3_b9 = simd_and(r80_7ff_tmp7, r180_24f_tmp97);
                    r180_24f_tmp98 = simd_and(byte_c8_adv, byte_range_b3_b9);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp98);
                    byte_bc = simd_and(r80_7ff_tmp7, r180_24f_tmp40);
                    r180_24f_tmp99 = simd_and(byte_c8_adv, byte_bc);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp99);
                    r180_24f_tmp100 = simd_and(byte_c8_adv, byte_bf);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp100);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp101 = simd_and(byte_c9_adv, byte_80);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp101);
                    byte_82 = simd_and(byte_range_80_8f, r80_7ff_tmp4);
                    r180_24f_tmp102 = simd_and(byte_c9_adv, byte_82);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp102);
                    r180_24f_tmp103 = simd_and(byte_c9_adv, byte_87);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp103);
                    r180_24f_tmp104 = simd_and(byte_c9_adv, byte_89);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp104);
                    r180_24f_tmp105 = simd_and(byte_c9_adv, byte_8b);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp105);
                    r180_24f_tmp106 = simd_and(byte_c9_adv, byte_8d);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp106);
                    r180_24f_tmp107 = simd_and(byte_c9_adv, byte_8f);
                    struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r180_24f_tmp107);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(8), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp9, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r250_2af_tmp1);
                  r250_2af_tmp2 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                  r250_2af_tmp3 = simd_and(basis_bits.bit_3, tmp7);
                  byte_range_80_93 = simd_andc(r250_2af_tmp2, r250_2af_tmp3);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp4 = simd_and(byte_ca_adv, byte_range_80_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r250_2af_tmp4);
                  r250_2af_tmp5 = simd_not(basis_bits.bit_3);
                  r250_2af_tmp6 = simd_and(basis_bits.bit_5, tmp8);
                  r250_2af_tmp7 = simd_or(basis_bits.bit_4, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_and(basis_bits.bit_3, r250_2af_tmp7);
                  r250_2af_tmp9 = simd_or(simd_and(basis_bits.bit_2, r250_2af_tmp5), simd_andc(r250_2af_tmp8, basis_bits.bit_2));
                  byte_range_95_af = simd_and(r80_7ff_tmp5, r250_2af_tmp9);
                  r250_2af_tmp10 = simd_and(byte_ca_adv, byte_range_95_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r250_2af_tmp10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 7);
              }
              r100_3ff_tmp2 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              byte_range_b0_bf = r80_7ff_tmp7;
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(9), r100_3ff_tmp3));
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp3, byte_range_b0_bf);
              r100_3ff_tmp5 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_or(r100_3ff_tmp4, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(10, 2))) {
                r370_3ff_tmp1 = simd_andc(r80_7ff_tmp9, tmp7);
                byte_b1 = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp3;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_b1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp2);
                byte_b3 = simd_and(byte_range_b0_bf, r80_7ff_tmp12);
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_b3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp8, tmp3);
                byte_b7 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_and(byte_cd_adv, byte_b7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp7 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp8 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp7), simd_andc(tmp3, basis_bits.bit_5));
                byte_range_bb_bd = simd_and(r370_3ff_tmp6, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(byte_cd_adv, byte_range_bb_bd);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r370_3ff_tmp12 = simd_and(r80_7ff_tmp5, r370_3ff_tmp11);
                byte_90 = simd_andc(r370_3ff_tmp12, tmp9);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(10), byte_ce_adv));
                r370_3ff_tmp13 = simd_and(byte_ce_adv, byte_90);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp15 = simd_or(basis_bits.bit_3, r80_7ff_tmp17);
                byte_range_ac_bf = simd_and(r370_3ff_tmp14, r370_3ff_tmp15);
                r370_3ff_tmp16 = simd_and(byte_ce_adv, byte_range_ac_bf);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp16);
                byte_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp18);
                r370_3ff_tmp17 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp18 = simd_and(basis_bits.bit_4, r80_7ff_tmp13);
                byte_range_80_8e = simd_andc(r370_3ff_tmp17, r370_3ff_tmp18);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(11), byte_cf_adv));
                r370_3ff_tmp19 = simd_and(byte_cf_adv, byte_range_80_8e);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp19);
                r370_3ff_tmp20 = simd_or(tmp7, basis_bits.bit_6);
                byte_range_90_91 = simd_andc(r370_3ff_tmp12, r370_3ff_tmp20);
                r370_3ff_tmp21 = simd_and(byte_cf_adv, byte_range_90_91);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp21);
                r370_3ff_tmp22 = simd_and(r370_3ff_tmp12, r80_7ff_tmp8);
                byte_range_95_97 = simd_and(r370_3ff_tmp22, tmp8);
                r370_3ff_tmp23 = simd_and(byte_cf_adv, byte_range_95_97);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp23);
                r370_3ff_tmp24 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp25 = simd_and(r370_3ff_tmp24, r80_7ff_tmp9);
                byte_99 = simd_and(r370_3ff_tmp12, r370_3ff_tmp25);
                r370_3ff_tmp26 = simd_and(byte_cf_adv, byte_99);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp26);
                r370_3ff_tmp27 = simd_and(r370_3ff_tmp24, tmp3);
                byte_9b = simd_and(r370_3ff_tmp12, r370_3ff_tmp27);
                r370_3ff_tmp28 = simd_and(byte_cf_adv, byte_9b);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp28);
                byte_9d = simd_and(r370_3ff_tmp12, r100_3ff_tmp2);
                r370_3ff_tmp29 = simd_and(byte_cf_adv, byte_9d);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp29);
                byte_9f = simd_and(r370_3ff_tmp12, r80_7ff_tmp18);
                r370_3ff_tmp30 = simd_and(byte_cf_adv, byte_9f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp30);
                r370_3ff_tmp31 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp32 = simd_and(r80_7ff_tmp5, r370_3ff_tmp31);
                byte_a1 = simd_and(r370_3ff_tmp32, r370_3ff_tmp1);
                r370_3ff_tmp33 = simd_and(byte_cf_adv, byte_a1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp33);
                byte_a3 = simd_and(r370_3ff_tmp32, r80_7ff_tmp12);
                r370_3ff_tmp34 = simd_and(byte_cf_adv, byte_a3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp34);
                byte_a5 = simd_and(r370_3ff_tmp32, r80_7ff_tmp10);
                r370_3ff_tmp35 = simd_and(byte_cf_adv, byte_a5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp35);
                byte_a7 = simd_and(r370_3ff_tmp32, r370_3ff_tmp4);
                r370_3ff_tmp36 = simd_and(byte_cf_adv, byte_a7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp36);
                byte_a9 = simd_and(r370_3ff_tmp32, r370_3ff_tmp25);
                r370_3ff_tmp37 = simd_and(byte_cf_adv, byte_a9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp37);
                byte_ab = simd_and(r370_3ff_tmp32, r370_3ff_tmp27);
                r370_3ff_tmp38 = simd_and(byte_cf_adv, byte_ab);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp38);
                byte_ad = simd_and(r370_3ff_tmp32, r100_3ff_tmp2);
                r370_3ff_tmp39 = simd_and(byte_cf_adv, byte_ad);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp39);
                r370_3ff_tmp40 = simd_not(tmp7);
                r370_3ff_tmp41 = simd_or(simd_and(basis_bits.bit_3, r370_3ff_tmp40), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                byte_range_af_b3 = simd_and(r370_3ff_tmp14, r370_3ff_tmp41);
                r370_3ff_tmp42 = simd_and(byte_cf_adv, byte_range_af_b3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp42);
                r370_3ff_tmp43 = simd_and(byte_cf_adv, byte_b5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp43);
                r370_3ff_tmp44 = simd_andc(r370_3ff_tmp24, tmp8);
                byte_b8 = simd_and(byte_range_b0_bf, r370_3ff_tmp44);
                r370_3ff_tmp45 = simd_and(byte_cf_adv, byte_b8);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp45);
                r370_3ff_tmp46 = simd_not(tmp8);
                r370_3ff_tmp47 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp46), simd_andc(tmp3, basis_bits.bit_5));
                byte_range_bb_bc = simd_and(r370_3ff_tmp6, r370_3ff_tmp47);
                r370_3ff_tmp48 = simd_and(byte_cf_adv, byte_range_bb_bc);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r370_3ff_tmp48);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 10);
            }
            r80_7ff_tmp23 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp24 = simd_and(byte_range_c0_ff, r80_7ff_tmp23);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp24, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(12, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp24, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(12, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp24, tmp9);
                byte_range_b0_bf = r80_7ff_tmp7;
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(12), byte_d0_adv));
                r400_4ff_tmp1 = simd_and(byte_d0_adv, byte_range_b0_bf);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r80_7ff_tmp9, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp24, r400_4ff_tmp2);
                byte_range_80_9f = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(13), byte_d1_adv));
                r400_4ff_tmp3 = simd_and(byte_d1_adv, byte_range_80_9f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp3);
                r400_4ff_tmp4 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp5 = simd_and(r80_7ff_tmp5, r400_4ff_tmp4);
                byte_a1 = simd_and(r400_4ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp6 = simd_and(byte_d1_adv, byte_a1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp6);
                byte_a3 = simd_and(r400_4ff_tmp5, r80_7ff_tmp12);
                r400_4ff_tmp7 = simd_and(byte_d1_adv, byte_a3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp7);
                byte_a5 = simd_and(r400_4ff_tmp5, r80_7ff_tmp10);
                r400_4ff_tmp8 = simd_and(byte_d1_adv, byte_a5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp8);
                r400_4ff_tmp9 = simd_and(r80_7ff_tmp8, tmp3);
                byte_a7 = simd_and(r400_4ff_tmp5, r400_4ff_tmp9);
                r400_4ff_tmp10 = simd_and(byte_d1_adv, byte_a7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp10);
                r400_4ff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp12 = simd_and(r400_4ff_tmp11, r80_7ff_tmp9);
                byte_a9 = simd_and(r400_4ff_tmp5, r400_4ff_tmp12);
                r400_4ff_tmp13 = simd_and(byte_d1_adv, byte_a9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp13);
                r400_4ff_tmp14 = simd_and(r400_4ff_tmp11, tmp3);
                byte_ab = simd_and(r400_4ff_tmp5, r400_4ff_tmp14);
                r400_4ff_tmp15 = simd_and(byte_d1_adv, byte_ab);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp15);
                r400_4ff_tmp16 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                byte_ad = simd_and(r400_4ff_tmp5, r400_4ff_tmp16);
                r400_4ff_tmp17 = simd_and(byte_d1_adv, byte_ad);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp17);
                byte_af = simd_and(r400_4ff_tmp5, r80_7ff_tmp18);
                r400_4ff_tmp18 = simd_and(byte_d1_adv, byte_af);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp18);
                byte_b1 = simd_and(byte_range_b0_bf, r400_4ff_tmp2);
                r400_4ff_tmp19 = simd_and(byte_d1_adv, byte_b1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp19);
                byte_b3 = simd_and(byte_range_b0_bf, r80_7ff_tmp12);
                r400_4ff_tmp20 = simd_and(byte_d1_adv, byte_b3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp20);
                r400_4ff_tmp21 = simd_and(byte_d1_adv, byte_b5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp21);
                byte_b7 = simd_and(byte_range_b0_bf, r400_4ff_tmp9);
                r400_4ff_tmp22 = simd_and(byte_d1_adv, byte_b7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp22);
                byte_b9 = simd_and(byte_range_b0_bf, r400_4ff_tmp12);
                r400_4ff_tmp23 = simd_and(byte_d1_adv, byte_b9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp23);
                byte_bb = simd_and(byte_range_b0_bf, r400_4ff_tmp14);
                r400_4ff_tmp24 = simd_and(byte_d1_adv, byte_bb);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp24);
                byte_bd = simd_and(byte_range_b0_bf, r400_4ff_tmp16);
                r400_4ff_tmp25 = simd_and(byte_d1_adv, byte_bd);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp25);
                byte_bf = simd_and(byte_range_b0_bf, r80_7ff_tmp18);
                r400_4ff_tmp26 = simd_and(byte_d1_adv, byte_bf);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp26);
                byte_d2 = simd_and(r80_7ff_tmp24, r80_7ff_tmp4);
                r400_4ff_tmp27 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_81 = simd_and(r400_4ff_tmp27, r400_4ff_tmp2);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(14), byte_d2_adv));
                r400_4ff_tmp28 = simd_and(byte_d2_adv, byte_81);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp28);
                byte_8b = simd_and(r400_4ff_tmp27, r400_4ff_tmp14);
                r400_4ff_tmp29 = simd_and(byte_d2_adv, byte_8b);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp29);
                byte_8d = simd_and(r400_4ff_tmp27, r400_4ff_tmp16);
                r400_4ff_tmp30 = simd_and(byte_d2_adv, byte_8d);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp30);
                byte_8f = simd_and(r400_4ff_tmp27, r80_7ff_tmp18);
                r400_4ff_tmp31 = simd_and(byte_d2_adv, byte_8f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp31);
                r400_4ff_tmp32 = simd_and(r80_7ff_tmp5, r80_7ff_tmp23);
                byte_91 = simd_and(r400_4ff_tmp32, r400_4ff_tmp2);
                r400_4ff_tmp33 = simd_and(byte_d2_adv, byte_91);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp33);
                byte_93 = simd_and(r400_4ff_tmp32, r80_7ff_tmp12);
                r400_4ff_tmp34 = simd_and(byte_d2_adv, byte_93);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp34);
                byte_95 = simd_and(r400_4ff_tmp32, r80_7ff_tmp10);
                r400_4ff_tmp35 = simd_and(byte_d2_adv, byte_95);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp35);
                byte_97 = simd_and(r400_4ff_tmp32, r400_4ff_tmp9);
                r400_4ff_tmp36 = simd_and(byte_d2_adv, byte_97);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp36);
                byte_99 = simd_and(r400_4ff_tmp32, r400_4ff_tmp12);
                r400_4ff_tmp37 = simd_and(byte_d2_adv, byte_99);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp37);
                byte_9b = simd_and(r400_4ff_tmp32, r400_4ff_tmp14);
                r400_4ff_tmp38 = simd_and(byte_d2_adv, byte_9b);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp38);
                byte_9d = simd_and(r400_4ff_tmp32, r400_4ff_tmp16);
                r400_4ff_tmp39 = simd_and(byte_d2_adv, byte_9d);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp39);
                byte_9f = simd_and(r400_4ff_tmp32, r80_7ff_tmp18);
                r400_4ff_tmp40 = simd_and(byte_d2_adv, byte_9f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp40);
                r400_4ff_tmp41 = simd_and(byte_d2_adv, byte_a1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp41);
                r400_4ff_tmp42 = simd_and(byte_d2_adv, byte_a3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp42);
                r400_4ff_tmp43 = simd_and(byte_d2_adv, byte_a5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp43);
                r400_4ff_tmp44 = simd_and(byte_d2_adv, byte_a7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp44);
                r400_4ff_tmp45 = simd_and(byte_d2_adv, byte_a9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp45);
                r400_4ff_tmp46 = simd_and(byte_d2_adv, byte_ab);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp46);
                r400_4ff_tmp47 = simd_and(byte_d2_adv, byte_ad);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp47);
                r400_4ff_tmp48 = simd_and(byte_d2_adv, byte_af);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp48);
                r400_4ff_tmp49 = simd_and(byte_d2_adv, byte_b1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp49);
                r400_4ff_tmp50 = simd_and(byte_d2_adv, byte_b3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp50);
                r400_4ff_tmp51 = simd_and(byte_d2_adv, byte_b5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp51);
                r400_4ff_tmp52 = simd_and(byte_d2_adv, byte_b7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp52);
                r400_4ff_tmp53 = simd_and(byte_d2_adv, byte_b9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp53);
                r400_4ff_tmp54 = simd_and(byte_d2_adv, byte_bb);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp54);
                r400_4ff_tmp55 = simd_and(byte_d2_adv, byte_bd);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp55);
                r400_4ff_tmp56 = simd_and(byte_d2_adv, byte_bf);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp56);
                byte_d3 = simd_and(r80_7ff_tmp24, r80_7ff_tmp12);
                byte_82 = simd_and(r400_4ff_tmp27, r80_7ff_tmp4);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(15), byte_d3_adv));
                r400_4ff_tmp57 = simd_and(byte_d3_adv, byte_82);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp57);
                r400_4ff_tmp58 = simd_andc(r80_7ff_tmp8, tmp8);
                byte_84 = simd_and(r400_4ff_tmp27, r400_4ff_tmp58);
                r400_4ff_tmp59 = simd_and(byte_d3_adv, byte_84);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp59);
                r400_4ff_tmp60 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                byte_86 = simd_and(r400_4ff_tmp27, r400_4ff_tmp60);
                r400_4ff_tmp61 = simd_and(byte_d3_adv, byte_86);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp61);
                r400_4ff_tmp62 = simd_andc(r400_4ff_tmp11, tmp8);
                byte_88 = simd_and(r400_4ff_tmp27, r400_4ff_tmp62);
                r400_4ff_tmp63 = simd_and(byte_d3_adv, byte_88);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp63);
                r400_4ff_tmp64 = simd_and(r400_4ff_tmp11, r80_7ff_tmp3);
                byte_8a = simd_and(r400_4ff_tmp27, r400_4ff_tmp64);
                r400_4ff_tmp65 = simd_and(byte_d3_adv, byte_8a);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp65);
                r400_4ff_tmp66 = simd_andc(r80_7ff_tmp17, tmp8);
                byte_8c = simd_and(r400_4ff_tmp27, r400_4ff_tmp66);
                r400_4ff_tmp67 = simd_and(byte_d3_adv, byte_8c);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp67);
                r400_4ff_tmp68 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                byte_range_8e_8f = simd_and(r400_4ff_tmp27, r400_4ff_tmp68);
                r400_4ff_tmp69 = simd_and(byte_d3_adv, byte_range_8e_8f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp69);
                r400_4ff_tmp70 = simd_and(byte_d3_adv, byte_91);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp70);
                r400_4ff_tmp71 = simd_and(byte_d3_adv, byte_93);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp71);
                r400_4ff_tmp72 = simd_and(byte_d3_adv, byte_95);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp72);
                r400_4ff_tmp73 = simd_and(byte_d3_adv, byte_97);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp73);
                r400_4ff_tmp74 = simd_and(byte_d3_adv, byte_99);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp74);
                r400_4ff_tmp75 = simd_and(byte_d3_adv, byte_9b);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp75);
                r400_4ff_tmp76 = simd_and(byte_d3_adv, byte_9d);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp76);
                r400_4ff_tmp77 = simd_and(byte_d3_adv, byte_9f);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp77);
                r400_4ff_tmp78 = simd_and(byte_d3_adv, byte_a1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp78);
                r400_4ff_tmp79 = simd_and(byte_d3_adv, byte_a3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp79);
                r400_4ff_tmp80 = simd_and(byte_d3_adv, byte_a5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp80);
                r400_4ff_tmp81 = simd_and(byte_d3_adv, byte_a7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp81);
                r400_4ff_tmp82 = simd_and(byte_d3_adv, byte_a9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp82);
                r400_4ff_tmp83 = simd_and(byte_d3_adv, byte_ab);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp83);
                r400_4ff_tmp84 = simd_and(byte_d3_adv, byte_ad);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp84);
                r400_4ff_tmp85 = simd_and(byte_d3_adv, byte_af);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp85);
                r400_4ff_tmp86 = simd_and(byte_d3_adv, byte_b1);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp86);
                r400_4ff_tmp87 = simd_and(byte_d3_adv, byte_b3);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp87);
                r400_4ff_tmp88 = simd_and(byte_d3_adv, byte_b5);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp88);
                r400_4ff_tmp89 = simd_and(byte_d3_adv, byte_b7);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp89);
                r400_4ff_tmp90 = simd_and(byte_d3_adv, byte_b9);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp90);
                r400_4ff_tmp91 = simd_and(byte_d3_adv, byte_bb);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp91);
                r400_4ff_tmp92 = simd_and(byte_d3_adv, byte_bd);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp92);
                r400_4ff_tmp93 = simd_and(byte_d3_adv, byte_bf);
                struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r400_4ff_tmp93);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 4);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp24, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp24, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(16), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(17, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp24, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(17), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  r500_52f_tmp1 = simd_andc(r80_7ff_tmp9, tmp7);
                  byte_81 = simd_and(byte_range_80_8f, r500_52f_tmp1);
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp2 = simd_and(byte_d4_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp2);
                  byte_83 = simd_and(byte_range_80_8f, r80_7ff_tmp12);
                  r500_52f_tmp3 = simd_and(byte_d4_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp3);
                  byte_85 = simd_and(byte_range_80_8f, r80_7ff_tmp10);
                  r500_52f_tmp4 = simd_and(byte_d4_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp4);
                  r500_52f_tmp5 = simd_and(r80_7ff_tmp8, tmp3);
                  byte_87 = simd_and(byte_range_80_8f, r500_52f_tmp5);
                  r500_52f_tmp6 = simd_and(byte_d4_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp6);
                  r500_52f_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r500_52f_tmp8 = simd_and(r500_52f_tmp7, r80_7ff_tmp9);
                  byte_89 = simd_and(byte_range_80_8f, r500_52f_tmp8);
                  r500_52f_tmp9 = simd_and(byte_d4_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp9);
                  r500_52f_tmp10 = simd_and(r500_52f_tmp7, tmp3);
                  byte_8b = simd_and(byte_range_80_8f, r500_52f_tmp10);
                  r500_52f_tmp11 = simd_and(byte_d4_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp11);
                  r500_52f_tmp12 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                  byte_8d = simd_and(byte_range_80_8f, r500_52f_tmp12);
                  r500_52f_tmp13 = simd_and(byte_d4_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp13);
                  byte_8f = simd_and(byte_range_80_8f, r80_7ff_tmp18);
                  r500_52f_tmp14 = simd_and(byte_d4_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp14);
                  r500_52f_tmp15 = simd_and(r80_7ff_tmp5, r80_7ff_tmp23);
                  byte_91 = simd_and(r500_52f_tmp15, r500_52f_tmp1);
                  r500_52f_tmp16 = simd_and(byte_d4_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp16);
                  byte_93 = simd_and(r500_52f_tmp15, r80_7ff_tmp12);
                  r500_52f_tmp17 = simd_and(byte_d4_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp17);
                  byte_95 = simd_and(r500_52f_tmp15, r80_7ff_tmp10);
                  r500_52f_tmp18 = simd_and(byte_d4_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp18);
                  byte_97 = simd_and(r500_52f_tmp15, r500_52f_tmp5);
                  r500_52f_tmp19 = simd_and(byte_d4_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp19);
                  byte_99 = simd_and(r500_52f_tmp15, r500_52f_tmp8);
                  r500_52f_tmp20 = simd_and(byte_d4_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp20);
                  byte_9b = simd_and(r500_52f_tmp15, r500_52f_tmp10);
                  r500_52f_tmp21 = simd_and(byte_d4_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp21);
                  byte_9d = simd_and(r500_52f_tmp15, r500_52f_tmp12);
                  r500_52f_tmp22 = simd_and(byte_d4_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp22);
                  byte_9f = simd_and(r500_52f_tmp15, r80_7ff_tmp18);
                  r500_52f_tmp23 = simd_and(byte_d4_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp23);
                  r500_52f_tmp24 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r500_52f_tmp25 = simd_and(r80_7ff_tmp5, r500_52f_tmp24);
                  byte_a1 = simd_and(r500_52f_tmp25, r500_52f_tmp1);
                  r500_52f_tmp26 = simd_and(byte_d4_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp26);
                  byte_a3 = simd_and(r500_52f_tmp25, r80_7ff_tmp12);
                  r500_52f_tmp27 = simd_and(byte_d4_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp27);
                  byte_a5 = simd_and(r500_52f_tmp25, r80_7ff_tmp10);
                  r500_52f_tmp28 = simd_and(byte_d4_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp28);
                  byte_a7 = simd_and(r500_52f_tmp25, r500_52f_tmp5);
                  r500_52f_tmp29 = simd_and(byte_d4_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp29);
                  byte_a9 = simd_and(r500_52f_tmp25, r500_52f_tmp8);
                  r500_52f_tmp30 = simd_and(byte_d4_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp30);
                  byte_ab = simd_and(r500_52f_tmp25, r500_52f_tmp10);
                  r500_52f_tmp31 = simd_and(byte_d4_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp31);
                  byte_ad = simd_and(r500_52f_tmp25, r500_52f_tmp12);
                  r500_52f_tmp32 = simd_and(byte_d4_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp32);
                  byte_af = simd_and(r500_52f_tmp25, r80_7ff_tmp18);
                  r500_52f_tmp33 = simd_and(byte_d4_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r500_52f_tmp33);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp24, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(18, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_3, tmp9);
                  byte_range_a1_bf = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(18), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r530_58f_tmp3);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp4 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 19);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(19, 34))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(19), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(20, 21))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(20, 12))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(20, 12))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_b4 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(20), r1000_1fff_tmp3));
                  sequence_e1_b4 = simd_and(r1000_1fff_tmp3, byte_b4);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_3, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, r1000_1fff_tmp5);
                  byte_range_80_ab = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp6);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(21), sequence_e1_b4_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_b4_adv, byte_range_80_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp10 = simd_not(basis_bits.bit_4);
                  r1000_1fff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp10), simd_andc(tmp5, basis_bits.bit_3));
                  byte_range_ab_b7 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp11);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(22), sequence_e1_b5_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_b5_adv, byte_range_ab_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp14 = simd_or(basis_bits.bit_5, tmp8);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_b5_adv, byte_range_b9_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp16);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp17);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp18 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_3, tmp5);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(23), sequence_e1_b6_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_b6_adv, byte_range_80_9a);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp22 = simd_andc(r1000_1fff_tmp21, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp22);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  r1000_1fff_tmp23 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp24 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp23);
                  byte_81 = simd_and(r1000_1fff_tmp24, r800_1fff_tmp2);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(24), sequence_e1_b8_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_b8_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b8_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp27);
                  byte_85 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp8);
                  r1000_1fff_tmp28 = simd_and(sequence_e1_b8_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp1, tmp3);
                  byte_87 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_b8_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp21, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_b8_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp21, tmp3);
                  byte_8b = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_b8_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(r1000_1fff_tmp4, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(sequence_e1_b8_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp36);
                  r1000_1fff_tmp37 = simd_and(r1000_1fff_tmp4, tmp3);
                  byte_8f = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(sequence_e1_b8_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp40 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp39);
                  byte_91 = simd_and(r1000_1fff_tmp40, r800_1fff_tmp2);
                  r1000_1fff_tmp41 = simd_and(sequence_e1_b8_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp41);
                  byte_93 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp26);
                  r1000_1fff_tmp42 = simd_and(sequence_e1_b8_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp42);
                  byte_95 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp8);
                  r1000_1fff_tmp43 = simd_and(sequence_e1_b8_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp43);
                  byte_97 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp29);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_b8_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp44);
                  byte_99 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp31);
                  r1000_1fff_tmp45 = simd_and(sequence_e1_b8_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp45);
                  byte_9b = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp33);
                  r1000_1fff_tmp46 = simd_and(sequence_e1_b8_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp46);
                  byte_9d = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp35);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_b8_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp47);
                  byte_9f = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp37);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_b8_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a1 = simd_and(r1000_1fff_tmp49, r800_1fff_tmp2);
                  r1000_1fff_tmp50 = simd_and(sequence_e1_b8_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp50);
                  byte_a3 = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp26);
                  r1000_1fff_tmp51 = simd_and(sequence_e1_b8_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp51);
                  byte_a5 = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp8);
                  r1000_1fff_tmp52 = simd_and(sequence_e1_b8_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp52);
                  byte_a7 = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp29);
                  r1000_1fff_tmp53 = simd_and(sequence_e1_b8_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp53);
                  byte_a9 = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp31);
                  r1000_1fff_tmp54 = simd_and(sequence_e1_b8_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp54);
                  byte_ab = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp33);
                  r1000_1fff_tmp55 = simd_and(sequence_e1_b8_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp55);
                  byte_ad = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp35);
                  r1000_1fff_tmp56 = simd_and(sequence_e1_b8_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp56);
                  byte_af = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp37);
                  r1000_1fff_tmp57 = simd_and(sequence_e1_b8_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp57);
                  byte_b1 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  r1000_1fff_tmp58 = simd_and(sequence_e1_b8_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp58);
                  byte_b3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  r1000_1fff_tmp59 = simd_and(sequence_e1_b8_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp59);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_b8_adv, byte_b5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp60);
                  byte_b7 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp29);
                  r1000_1fff_tmp61 = simd_and(sequence_e1_b8_adv, byte_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp61);
                  byte_b9 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp31);
                  r1000_1fff_tmp62 = simd_and(sequence_e1_b8_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp62);
                  byte_bb = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp33);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_b8_adv, byte_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp63);
                  byte_bd = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_b8_adv, byte_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp64);
                  byte_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp37);
                  r1000_1fff_tmp65 = simd_and(sequence_e1_b8_adv, byte_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp65);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(25), sequence_e1_b9_adv));
                  r1000_1fff_tmp66 = simd_and(sequence_e1_b9_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_b9_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp67);
                  r1000_1fff_tmp68 = simd_and(sequence_e1_b9_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_and(sequence_e1_b9_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_b9_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(sequence_e1_b9_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp71);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_b9_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_and(sequence_e1_b9_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_b9_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(sequence_e1_b9_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp75);
                  r1000_1fff_tmp76 = simd_and(sequence_e1_b9_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp76);
                  r1000_1fff_tmp77 = simd_and(sequence_e1_b9_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(sequence_e1_b9_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp78);
                  r1000_1fff_tmp79 = simd_and(sequence_e1_b9_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_and(sequence_e1_b9_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(sequence_e1_b9_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp81);
                  r1000_1fff_tmp82 = simd_and(sequence_e1_b9_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp82);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_b9_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp83);
                  r1000_1fff_tmp84 = simd_and(sequence_e1_b9_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(sequence_e1_b9_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp85);
                  r1000_1fff_tmp86 = simd_and(sequence_e1_b9_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp86);
                  r1000_1fff_tmp87 = simd_and(sequence_e1_b9_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_b9_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(sequence_e1_b9_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_b9_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_and(sequence_e1_b9_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_and(sequence_e1_b9_adv, byte_b5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp92);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_b9_adv, byte_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(sequence_e1_b9_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_and(sequence_e1_b9_adv, byte_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp95);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_b9_adv, byte_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp96);
                  r1000_1fff_tmp97 = simd_and(sequence_e1_b9_adv, byte_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp16);
                  byte_ba = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp98);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(26), sequence_e1_ba_adv));
                  r1000_1fff_tmp99 = simd_and(sequence_e1_ba_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_ba_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp100);
                  r1000_1fff_tmp101 = simd_and(sequence_e1_ba_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(sequence_e1_ba_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_and(sequence_e1_ba_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp103);
                  r1000_1fff_tmp104 = simd_and(sequence_e1_ba_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ba_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp105);
                  r1000_1fff_tmp106 = simd_and(sequence_e1_ba_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp106);
                  r1000_1fff_tmp107 = simd_and(sequence_e1_ba_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp107);
                  r1000_1fff_tmp108 = simd_and(sequence_e1_ba_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp108);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp110 = simd_not(r1000_1fff_tmp109);
                  r1000_1fff_tmp111 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp112 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp110), simd_andc(r1000_1fff_tmp111, basis_bits.bit_4));
                  byte_range_95_9d = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp112);
                  r1000_1fff_tmp113 = simd_and(sequence_e1_ba_adv, byte_range_95_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp113);
                  r1000_1fff_tmp114 = simd_and(sequence_e1_ba_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp114);
                  r1000_1fff_tmp115 = simd_and(sequence_e1_ba_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp115);
                  r1000_1fff_tmp116 = simd_and(sequence_e1_ba_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp116);
                  r1000_1fff_tmp117 = simd_and(sequence_e1_ba_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp117);
                  r1000_1fff_tmp118 = simd_and(sequence_e1_ba_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp118);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_ba_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp119);
                  r1000_1fff_tmp120 = simd_and(sequence_e1_ba_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp120);
                  r1000_1fff_tmp121 = simd_and(sequence_e1_ba_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp121);
                  r1000_1fff_tmp122 = simd_and(sequence_e1_ba_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp122);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_ba_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp123);
                  r1000_1fff_tmp124 = simd_and(sequence_e1_ba_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_and(sequence_e1_ba_adv, byte_b5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp125);
                  r1000_1fff_tmp126 = simd_and(sequence_e1_ba_adv, byte_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp126);
                  r1000_1fff_tmp127 = simd_and(sequence_e1_ba_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp127);
                  r1000_1fff_tmp128 = simd_and(sequence_e1_ba_adv, byte_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_ba_adv, byte_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp129);
                  r1000_1fff_tmp130 = simd_and(sequence_e1_ba_adv, byte_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp130);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(27), sequence_e1_bb_adv));
                  r1000_1fff_tmp131 = simd_and(sequence_e1_bb_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp131);
                  r1000_1fff_tmp132 = simd_and(sequence_e1_bb_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp132);
                  r1000_1fff_tmp133 = simd_and(sequence_e1_bb_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp133);
                  r1000_1fff_tmp134 = simd_and(sequence_e1_bb_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp134);
                  r1000_1fff_tmp135 = simd_and(sequence_e1_bb_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp135);
                  r1000_1fff_tmp136 = simd_and(sequence_e1_bb_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp136);
                  r1000_1fff_tmp137 = simd_and(sequence_e1_bb_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp137);
                  r1000_1fff_tmp138 = simd_and(sequence_e1_bb_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_and(sequence_e1_bb_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_bb_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp140);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_bb_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp141);
                  r1000_1fff_tmp142 = simd_and(sequence_e1_bb_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp142);
                  r1000_1fff_tmp143 = simd_and(sequence_e1_bb_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp143);
                  r1000_1fff_tmp144 = simd_and(sequence_e1_bb_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp144);
                  r1000_1fff_tmp145 = simd_and(sequence_e1_bb_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp145);
                  r1000_1fff_tmp146 = simd_and(sequence_e1_bb_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp146);
                  r1000_1fff_tmp147 = simd_and(sequence_e1_bb_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp147);
                  r1000_1fff_tmp148 = simd_and(sequence_e1_bb_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp148);
                  r1000_1fff_tmp149 = simd_and(sequence_e1_bb_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp149);
                  r1000_1fff_tmp150 = simd_and(sequence_e1_bb_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp150);
                  r1000_1fff_tmp151 = simd_and(sequence_e1_bb_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp151);
                  r1000_1fff_tmp152 = simd_and(sequence_e1_bb_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp152);
                  r1000_1fff_tmp153 = simd_and(sequence_e1_bb_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp153);
                  r1000_1fff_tmp154 = simd_and(sequence_e1_bb_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp154);
                  r1000_1fff_tmp155 = simd_and(sequence_e1_bb_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp155);
                  r1000_1fff_tmp156 = simd_and(sequence_e1_bb_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp156);
                  r1000_1fff_tmp157 = simd_and(sequence_e1_bb_adv, byte_b5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp157);
                  r1000_1fff_tmp158 = simd_and(sequence_e1_bb_adv, byte_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp158);
                  r1000_1fff_tmp159 = simd_and(sequence_e1_bb_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp159);
                  r1000_1fff_tmp160 = simd_and(sequence_e1_bb_adv, byte_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp160);
                  r1000_1fff_tmp161 = simd_and(sequence_e1_bb_adv, byte_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp161);
                  r1000_1fff_tmp162 = simd_and(sequence_e1_bb_adv, byte_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp162);
                  r1000_1fff_tmp163 = simd_andc(r1000_1fff_tmp4, tmp8);
                  byte_bc = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp163);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_87 = simd_andc(r1000_1fff_tmp24, basis_bits.bit_4);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(28), sequence_e1_bc_adv));
                  r1000_1fff_tmp164 = simd_and(sequence_e1_bc_adv, byte_range_80_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp164);
                  r1000_1fff_tmp165 = simd_andc(r1000_1fff_tmp40, basis_bits.bit_4);
                  byte_range_90_95 = simd_andc(r1000_1fff_tmp165, r1000_1fff_tmp109);
                  r1000_1fff_tmp166 = simd_and(sequence_e1_bc_adv, byte_range_90_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp166);
                  byte_range_a0_a7 = simd_andc(r1000_1fff_tmp49, basis_bits.bit_4);
                  r1000_1fff_tmp167 = simd_and(sequence_e1_bc_adv, byte_range_a0_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp167);
                  byte_range_b0_b7 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp168 = simd_and(sequence_e1_bc_adv, byte_range_b0_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp168);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  byte_range_80_85 = simd_andc(byte_range_80_87, r1000_1fff_tmp109);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(29), sequence_e1_bd_adv));
                  r1000_1fff_tmp169 = simd_and(sequence_e1_bd_adv, byte_range_80_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp169);
                  byte_range_90_97 = r1000_1fff_tmp165;
                  r1000_1fff_tmp170 = simd_and(sequence_e1_bd_adv, byte_range_90_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp170);
                  r1000_1fff_tmp171 = simd_and(sequence_e1_bd_adv, byte_range_a0_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp171);
                  r1000_1fff_tmp172 = simd_and(basis_bits.bit_4, r1000_1fff_tmp109);
                  byte_range_b0_bd = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp172);
                  r1000_1fff_tmp173 = simd_and(sequence_e1_bd_adv, byte_range_b0_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp173);
                  r1000_1fff_tmp174 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp16);
                  byte_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp174);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(30), sequence_e1_be_adv));
                  r1000_1fff_tmp175 = simd_and(sequence_e1_be_adv, byte_range_80_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp175);
                  r1000_1fff_tmp176 = simd_and(sequence_e1_be_adv, byte_range_90_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp176);
                  r1000_1fff_tmp177 = simd_and(sequence_e1_be_adv, byte_range_a0_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp177);
                  byte_range_b0_b4 = simd_andc(byte_range_b0_b7, r1000_1fff_tmp111);
                  r1000_1fff_tmp178 = simd_and(sequence_e1_be_adv, byte_range_b0_b4);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp178);
                  r1000_1fff_tmp179 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp179);
                  r1000_1fff_tmp180 = simd_and(sequence_e1_be_adv, byte_range_b6_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp180);
                  r1000_1fff_tmp181 = simd_and(sequence_e1_be_adv, byte_be);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp181);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp182 = simd_not(tmp8);
                  r1000_1fff_tmp183 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp182), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(byte_range_80_87, r1000_1fff_tmp183);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(31), sequence_e1_bf_adv));
                  r1000_1fff_tmp184 = simd_and(sequence_e1_bf_adv, byte_range_82_84);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp184);
                  byte_range_86_87 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp179);
                  r1000_1fff_tmp185 = simd_and(sequence_e1_bf_adv, byte_range_86_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp185);
                  byte_range_90_93 = simd_andc(r1000_1fff_tmp40, tmp7);
                  r1000_1fff_tmp186 = simd_and(sequence_e1_bf_adv, byte_range_90_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp186);
                  byte_range_96_97 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp179);
                  r1000_1fff_tmp187 = simd_and(sequence_e1_bf_adv, byte_range_96_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp187);
                  r1000_1fff_tmp188 = simd_and(sequence_e1_bf_adv, byte_range_a0_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp188);
                  byte_range_b2_b4 = simd_and(byte_range_b0_b7, r1000_1fff_tmp183);
                  r1000_1fff_tmp189 = simd_and(sequence_e1_bf_adv, byte_range_b2_b4);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp189);
                  r1000_1fff_tmp190 = simd_and(sequence_e1_bf_adv, byte_range_b6_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r1000_1fff_tmp190);
                }
                else {
                  carryQ.CarryDequeueEnqueue(20, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(20, 12);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(32, 9))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(32, 9))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(32), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp4, r2000_4dff_tmp1);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(33), sequence_e2_84_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_84_adv, byte_8a);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp7, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(sequence_e2_84_adv, byte_range_8e_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_andc(tmp3, tmp7);
                  byte_93 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_84_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp7, tmp3);
                  byte_af = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(sequence_e2_84_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp17);
                  byte_b4 = simd_and(r2000_2fff_tmp18, r800_ffff_tmp2);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_84_adv, byte_b4);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp20);
                  byte_b9 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_84_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_andc(r2000_2fff_tmp7, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_84_adv, byte_range_bc_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp20);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp25);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp26 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp27 = simd_not(r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp29 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp27), simd_andc(r2000_2fff_tmp28, basis_bits.bit_4));
                  byte_range_86_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp29);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(34), sequence_e2_85_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_85_adv, byte_range_86_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp1);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(sequence_e2_85_adv, byte_8e);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp32);
                  r2000_2fff_tmp33 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp33);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(35), sequence_e2_86_adv));
                  r2000_2fff_tmp34 = simd_and(sequence_e2_86_adv, byte_84);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp34);
                  byte_b0 = simd_andc(r2000_2fff_tmp18, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  byte_range_b0_bf = r2000_2fff_tmp18;
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(36), sequence_e2_b0_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_andc(r2000_2fff_tmp20, tmp7);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp36);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp37 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp38 = simd_and(basis_bits.bit_3, r2000_2fff_tmp15);
                  byte_range_80_9e = simd_andc(r2000_2fff_tmp37, r2000_2fff_tmp38);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(37), sequence_e2_b1_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_b1_adv, byte_range_80_9e);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp39);
                  byte_a1 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp36);
                  r2000_2fff_tmp40 = simd_and(sequence_e2_b1_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(r2000_2fff_tmp14, r800_ffff_tmp1);
                  r2000_2fff_tmp42 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_a5_a6 = simd_and(r2000_2fff_tmp41, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_b1_adv, byte_range_a5_a6);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_andc(r2000_2fff_tmp4, tmp8);
                  byte_a8 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(sequence_e2_b1_adv, byte_a8);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp45);
                  byte_aa = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp5);
                  r2000_2fff_tmp46 = simd_and(sequence_e2_b1_adv, byte_aa);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_andc(r2000_2fff_tmp7, tmp8);
                  byte_ac = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_and(sequence_e2_b1_adv, byte_ac);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_b1_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  r2000_2fff_tmp51 = simd_not(tmp8);
                  r2000_2fff_tmp52 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp51), simd_andc(tmp3, basis_bits.bit_5));
                  byte_range_b3_b4 = simd_and(r2000_2fff_tmp50, r2000_2fff_tmp52);
                  r2000_2fff_tmp53 = simd_and(sequence_e2_b1_adv, byte_range_b3_b4);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_not(basis_bits.bit_5);
                  r2000_2fff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp54), simd_andc(r2000_2fff_tmp28, basis_bits.bit_4));
                  byte_range_b6_bb = simd_and(byte_range_b0_bf, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(sequence_e2_b1_adv, byte_range_b6_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp56);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp36);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(38), sequence_e2_b2_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b2_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp57);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b2_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp58);
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b2_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp59);
                  r2000_2fff_tmp60 = simd_and(r800_ffff_tmp1, tmp3);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp60);
                  r2000_2fff_tmp61 = simd_and(sequence_e2_b2_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp61);
                  byte_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp21);
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b2_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp62);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp4, tmp3);
                  byte_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp63);
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b2_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp64);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp20);
                  byte_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp65);
                  r2000_2fff_tmp66 = simd_and(sequence_e2_b2_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp66);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  r2000_2fff_tmp67 = simd_and(sequence_e2_b2_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp67);
                  byte_91 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp36);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b2_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp68);
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b2_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp69);
                  byte_95 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp25);
                  r2000_2fff_tmp70 = simd_and(sequence_e2_b2_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp70);
                  byte_97 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp60);
                  r2000_2fff_tmp71 = simd_and(sequence_e2_b2_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp71);
                  byte_99 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp21);
                  r2000_2fff_tmp72 = simd_and(sequence_e2_b2_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp72);
                  byte_9b = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp63);
                  r2000_2fff_tmp73 = simd_and(sequence_e2_b2_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp73);
                  byte_9d = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp65);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_b2_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp74);
                  byte_9f = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp15);
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b2_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp75);
                  r2000_2fff_tmp76 = simd_and(sequence_e2_b2_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp76);
                  byte_a3 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp12);
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b2_adv, byte_a3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp77);
                  byte_a5 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp25);
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b2_adv, byte_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp78);
                  byte_a7 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp60);
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b2_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp79);
                  byte_a9 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp21);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b2_adv, byte_a9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp80);
                  byte_ab = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp63);
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b2_adv, byte_ab);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp81);
                  byte_ad = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp65);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b2_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp82);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b2_adv, byte_af);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp83);
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b2_adv, byte_b1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp84);
                  byte_b3 = simd_and(byte_range_b0_bf, r2000_2fff_tmp12);
                  r2000_2fff_tmp85 = simd_and(sequence_e2_b2_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp85);
                  byte_b5 = simd_and(byte_range_b0_bf, r2000_2fff_tmp25);
                  r2000_2fff_tmp86 = simd_and(sequence_e2_b2_adv, byte_b5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp86);
                  byte_b7 = simd_and(byte_range_b0_bf, r2000_2fff_tmp60);
                  r2000_2fff_tmp87 = simd_and(sequence_e2_b2_adv, byte_b7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp87);
                  r2000_2fff_tmp88 = simd_and(sequence_e2_b2_adv, byte_b9);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp88);
                  byte_bb = simd_and(byte_range_b0_bf, r2000_2fff_tmp63);
                  r2000_2fff_tmp89 = simd_and(sequence_e2_b2_adv, byte_bb);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp89);
                  byte_bd = simd_and(byte_range_b0_bf, r2000_2fff_tmp65);
                  r2000_2fff_tmp90 = simd_and(sequence_e2_b2_adv, byte_bd);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp90);
                  byte_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp15);
                  r2000_2fff_tmp91 = simd_and(sequence_e2_b2_adv, byte_bf);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp91);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(39), sequence_e2_b3_adv));
                  r2000_2fff_tmp92 = simd_and(sequence_e2_b3_adv, byte_81);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp92);
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b3_adv, byte_83);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp93);
                  r2000_2fff_tmp94 = simd_and(sequence_e2_b3_adv, byte_85);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp94);
                  r2000_2fff_tmp95 = simd_and(sequence_e2_b3_adv, byte_87);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp95);
                  r2000_2fff_tmp96 = simd_and(sequence_e2_b3_adv, byte_89);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp96);
                  r2000_2fff_tmp97 = simd_and(sequence_e2_b3_adv, byte_8b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp97);
                  r2000_2fff_tmp98 = simd_and(sequence_e2_b3_adv, byte_8d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp98);
                  r2000_2fff_tmp99 = simd_and(sequence_e2_b3_adv, byte_8f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp99);
                  r2000_2fff_tmp100 = simd_and(sequence_e2_b3_adv, byte_91);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp100);
                  r2000_2fff_tmp101 = simd_and(sequence_e2_b3_adv, byte_93);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp101);
                  r2000_2fff_tmp102 = simd_and(sequence_e2_b3_adv, byte_95);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp102);
                  r2000_2fff_tmp103 = simd_and(sequence_e2_b3_adv, byte_97);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp103);
                  r2000_2fff_tmp104 = simd_and(sequence_e2_b3_adv, byte_99);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp104);
                  r2000_2fff_tmp105 = simd_and(sequence_e2_b3_adv, byte_9b);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp105);
                  r2000_2fff_tmp106 = simd_and(sequence_e2_b3_adv, byte_9d);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp106);
                  r2000_2fff_tmp107 = simd_and(sequence_e2_b3_adv, byte_9f);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp107);
                  r2000_2fff_tmp108 = simd_and(sequence_e2_b3_adv, byte_a1);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp108);
                  r2000_2fff_tmp109 = simd_andc(r2000_2fff_tmp14, basis_bits.bit_4);
                  byte_range_a3_a4 = simd_and(r2000_2fff_tmp109, r2000_2fff_tmp52);
                  r2000_2fff_tmp110 = simd_and(sequence_e2_b3_adv, byte_range_a3_a4);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp110);
                  r2000_2fff_tmp111 = simd_and(sequence_e2_b3_adv, byte_ac);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp111);
                  byte_ae = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp31);
                  r2000_2fff_tmp112 = simd_and(sequence_e2_b3_adv, byte_ae);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp112);
                  r2000_2fff_tmp113 = simd_and(sequence_e2_b3_adv, byte_b3);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp113);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp114 = simd_or(basis_bits.bit_4, r2000_2fff_tmp28);
                  r2000_2fff_tmp115 = simd_or(basis_bits.bit_3, r2000_2fff_tmp114);
                  r2000_2fff_tmp116 = simd_and(basis_bits.bit_2, r2000_2fff_tmp115);
                  byte_range_80_a5 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp116);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(40), sequence_e2_b4_adv));
                  r2000_2fff_tmp117 = simd_and(sequence_e2_b4_adv, byte_range_80_a5);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp117);
                  r2000_2fff_tmp118 = simd_and(sequence_e2_b4_adv, byte_a7);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp118);
                  r2000_2fff_tmp119 = simd_and(sequence_e2_b4_adv, byte_ad);
                  struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r2000_2fff_tmp119);
                }
                else {
                  carryQ.CarryDequeueEnqueue(32, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(32, 9);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(20, 21);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(41, 12))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp10 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp6, tmp7);
              byte_81 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(42), sequence_ea_99_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_99_adv, byte_81);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(tmp3, tmp7);
              byte_83 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, byte_83);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp6);
              byte_85 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(sequence_ea_99_adv, byte_85);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp1, tmp3);
              byte_87 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ea_99_adv, byte_87);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp18);
              byte_89 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp7);
              ra000_ffff_tmp19 = simd_and(sequence_ea_99_adv, byte_89);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(ra000_ffff_tmp1, tmp3);
              byte_8b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(sequence_ea_99_adv, byte_8b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp6);
              byte_8d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ea_99_adv, byte_8d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp22, tmp3);
              byte_8f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp25);
              ra000_ffff_tmp26 = simd_and(sequence_ea_99_adv, byte_8f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp26);
              byte_91 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp11);
              ra000_ffff_tmp27 = simd_and(sequence_ea_99_adv, byte_91);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp27);
              byte_93 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp13);
              ra000_ffff_tmp28 = simd_and(sequence_ea_99_adv, byte_93);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp28);
              byte_95 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp15);
              ra000_ffff_tmp29 = simd_and(sequence_ea_99_adv, byte_95);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp29);
              byte_97 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              ra000_ffff_tmp30 = simd_and(sequence_ea_99_adv, byte_97);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp30);
              ra000_ffff_tmp31 = simd_and(sequence_ea_99_adv, byte_99);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp31);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp20);
              ra000_ffff_tmp32 = simd_and(sequence_ea_99_adv, byte_9b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp32);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp33 = simd_and(sequence_ea_99_adv, byte_9d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp33);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              ra000_ffff_tmp34 = simd_and(sequence_ea_99_adv, byte_9f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp11);
              ra000_ffff_tmp36 = simd_and(sequence_ea_99_adv, byte_a1);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp36);
              byte_a3 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp13);
              ra000_ffff_tmp37 = simd_and(sequence_ea_99_adv, byte_a3);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp37);
              byte_a5 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp15);
              ra000_ffff_tmp38 = simd_and(sequence_ea_99_adv, byte_a5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp38);
              byte_a7 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp17);
              ra000_ffff_tmp39 = simd_and(sequence_ea_99_adv, byte_a7);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp39);
              byte_a9 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp7);
              ra000_ffff_tmp40 = simd_and(sequence_ea_99_adv, byte_a9);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp40);
              byte_ab = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp20);
              ra000_ffff_tmp41 = simd_and(sequence_ea_99_adv, byte_ab);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp41);
              byte_ad = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp23);
              ra000_ffff_tmp42 = simd_and(sequence_ea_99_adv, byte_ad);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp42);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(43), sequence_ea_9a_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_9a_adv, byte_81);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(sequence_ea_9a_adv, byte_83);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(sequence_ea_9a_adv, byte_85);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ea_9a_adv, byte_87);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(sequence_ea_9a_adv, byte_89);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(sequence_ea_9a_adv, byte_8b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(sequence_ea_9a_adv, byte_8d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp49);
              ra000_ffff_tmp50 = simd_and(sequence_ea_9a_adv, byte_8f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(sequence_ea_9a_adv, byte_91);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_and(sequence_ea_9a_adv, byte_93);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(sequence_ea_9a_adv, byte_95);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ea_9a_adv, byte_97);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp54);
              ra000_ffff_tmp55 = simd_and(sequence_ea_9a_adv, byte_99);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_and(sequence_ea_9a_adv, byte_9b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp22, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp57);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(44), sequence_ea_9c_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_9c_adv, byte_a3);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(sequence_ea_9c_adv, byte_a5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(sequence_ea_9c_adv, byte_a7);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_and(sequence_ea_9c_adv, byte_a9);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_and(sequence_ea_9c_adv, byte_ab);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp62);
              ra000_ffff_tmp63 = simd_and(sequence_ea_9c_adv, byte_ad);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp63);
              ra000_ffff_tmp64 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp65 = simd_or(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp66 = simd_not(ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp66), simd_andc(ra000_ffff_tmp25, basis_bits.bit_3));
              byte_range_af_b1 = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_and(sequence_ea_9c_adv, byte_range_af_b1);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp68);
              ra000_ffff_tmp69 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp70 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp69);
              byte_b3 = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp13);
              ra000_ffff_tmp71 = simd_and(sequence_ea_9c_adv, byte_b3);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp71);
              byte_b5 = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp15);
              ra000_ffff_tmp72 = simd_and(sequence_ea_9c_adv, byte_b5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp72);
              byte_b7 = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp17);
              ra000_ffff_tmp73 = simd_and(sequence_ea_9c_adv, byte_b7);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp73);
              byte_b9 = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp7);
              ra000_ffff_tmp74 = simd_and(sequence_ea_9c_adv, byte_b9);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp74);
              byte_bb = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp20);
              ra000_ffff_tmp75 = simd_and(sequence_ea_9c_adv, byte_bb);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp75);
              byte_bd = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp23);
              ra000_ffff_tmp76 = simd_and(sequence_ea_9c_adv, byte_bd);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp76);
              byte_bf = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp25);
              ra000_ffff_tmp77 = simd_and(sequence_ea_9c_adv, byte_bf);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp77);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(45), sequence_ea_9d_adv));
              ra000_ffff_tmp78 = simd_and(sequence_ea_9d_adv, byte_81);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp78);
              ra000_ffff_tmp79 = simd_and(sequence_ea_9d_adv, byte_83);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_and(sequence_ea_9d_adv, byte_85);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp80);
              ra000_ffff_tmp81 = simd_and(sequence_ea_9d_adv, byte_87);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_and(sequence_ea_9d_adv, byte_89);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp82);
              ra000_ffff_tmp83 = simd_and(sequence_ea_9d_adv, byte_8b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_and(sequence_ea_9d_adv, byte_8d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp84);
              ra000_ffff_tmp85 = simd_and(sequence_ea_9d_adv, byte_8f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp85);
              ra000_ffff_tmp86 = simd_and(sequence_ea_9d_adv, byte_91);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp86);
              ra000_ffff_tmp87 = simd_and(sequence_ea_9d_adv, byte_93);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(sequence_ea_9d_adv, byte_95);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp88);
              ra000_ffff_tmp89 = simd_and(sequence_ea_9d_adv, byte_97);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(sequence_ea_9d_adv, byte_99);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp90);
              ra000_ffff_tmp91 = simd_and(sequence_ea_9d_adv, byte_9b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp91);
              ra000_ffff_tmp92 = simd_and(sequence_ea_9d_adv, byte_9d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp92);
              ra000_ffff_tmp93 = simd_and(sequence_ea_9d_adv, byte_9f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp93);
              ra000_ffff_tmp94 = simd_and(sequence_ea_9d_adv, byte_a1);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp94);
              ra000_ffff_tmp95 = simd_and(sequence_ea_9d_adv, byte_a3);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp95);
              ra000_ffff_tmp96 = simd_and(sequence_ea_9d_adv, byte_a5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp96);
              ra000_ffff_tmp97 = simd_and(sequence_ea_9d_adv, byte_a7);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp97);
              ra000_ffff_tmp98 = simd_and(sequence_ea_9d_adv, byte_a9);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp98);
              ra000_ffff_tmp99 = simd_and(sequence_ea_9d_adv, byte_ab);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp99);
              ra000_ffff_tmp100 = simd_and(sequence_ea_9d_adv, byte_ad);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp100);
              byte_af = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp25);
              ra000_ffff_tmp101 = simd_and(sequence_ea_9d_adv, byte_af);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp101);
              ra000_ffff_tmp102 = simd_or(basis_bits.bit_5, tmp8);
              ra000_ffff_tmp103 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp102);
              byte_range_b1_b8 = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp103);
              ra000_ffff_tmp104 = simd_and(sequence_ea_9d_adv, byte_range_b1_b8);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp104);
              byte_ba = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp3);
              ra000_ffff_tmp105 = simd_and(sequence_ea_9d_adv, byte_ba);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp105);
              byte_bc = simd_and(ra000_ffff_tmp70, ra000_ffff_tmp57);
              ra000_ffff_tmp106 = simd_and(sequence_ea_9d_adv, byte_bc);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp106);
              ra000_ffff_tmp107 = simd_and(sequence_ea_9d_adv, byte_bf);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp107);
              ra000_ffff_tmp108 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp108);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(46), sequence_ea_9e_adv));
              ra000_ffff_tmp109 = simd_and(sequence_ea_9e_adv, byte_81);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp109);
              ra000_ffff_tmp110 = simd_and(sequence_ea_9e_adv, byte_83);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp110);
              ra000_ffff_tmp111 = simd_and(sequence_ea_9e_adv, byte_85);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp111);
              ra000_ffff_tmp112 = simd_and(sequence_ea_9e_adv, byte_87);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp112);
              byte_8c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp57);
              ra000_ffff_tmp113 = simd_and(sequence_ea_9e_adv, byte_8c);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp113);
              byte_8e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp108);
              ra000_ffff_tmp114 = simd_and(sequence_ea_9e_adv, byte_8e);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp114);
              ra000_ffff_tmp115 = simd_and(sequence_ea_9e_adv, byte_91);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp115);
              ra000_ffff_tmp116 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp117 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp118 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp117), simd_andc(tmp3, basis_bits.bit_5));
              byte_range_93_95 = simd_and(ra000_ffff_tmp116, ra000_ffff_tmp118);
              ra000_ffff_tmp119 = simd_and(sequence_ea_9e_adv, byte_range_93_95);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(sequence_ea_9e_adv, byte_97);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp120);
              ra000_ffff_tmp121 = simd_and(sequence_ea_9e_adv, byte_99);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp121);
              ra000_ffff_tmp122 = simd_and(sequence_ea_9e_adv, byte_9b);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp122);
              ra000_ffff_tmp123 = simd_and(sequence_ea_9e_adv, byte_9d);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp123);
              ra000_ffff_tmp124 = simd_and(sequence_ea_9e_adv, byte_9f);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp124);
              ra000_ffff_tmp125 = simd_and(sequence_ea_9e_adv, byte_a1);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp125);
              ra000_ffff_tmp126 = simd_and(sequence_ea_9e_adv, byte_a3);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp126);
              ra000_ffff_tmp127 = simd_and(sequence_ea_9e_adv, byte_a5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp127);
              ra000_ffff_tmp128 = simd_and(sequence_ea_9e_adv, byte_a7);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp128);
              ra000_ffff_tmp129 = simd_and(sequence_ea_9e_adv, byte_a9);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp129);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(47), sequence_ea_9f_adv));
              ra000_ffff_tmp130 = simd_and(sequence_ea_9f_adv, byte_ba);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp130);
              byte_ac = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp57);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_b0_bf = ra000_ffff_tmp70;
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(48), sequence_ea_ac_adv));
              ra000_ffff_tmp131 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp131);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp132 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp133 = simd_and(basis_bits.bit_3, tmp5);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp132, ra000_ffff_tmp133);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(49), sequence_ea_ad_adv));
              ra000_ffff_tmp134 = simd_and(sequence_ea_ad_adv, byte_range_80_9a);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp134);
              ra000_ffff_tmp135 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_a4_a5 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp135);
              ra000_ffff_tmp136 = simd_and(sequence_ea_ad_adv, byte_range_a4_a5);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp136);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp25);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(50), ra000_ffff_tmp137));
              sequence_ef_ac = simd_and(ra000_ffff_tmp137, byte_ac);
              byte_ef_adv = ra000_ffff_tmp137;
              ra000_ffff_tmp138 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_4);
              ra000_ffff_tmp139 = simd_and(basis_bits.bit_5, tmp3);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp138, ra000_ffff_tmp139);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(51), sequence_ef_ac_adv));
              ra000_ffff_tmp140 = simd_and(sequence_ef_ac_adv, byte_range_80_86);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp140);
              byte_range_93_97 = simd_and(ra000_ffff_tmp116, tmp4);
              ra000_ffff_tmp141 = simd_and(sequence_ef_ac_adv, byte_range_93_97);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp141);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp132, tmp10);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(52), sequence_ef_bd_adv));
              ra000_ffff_tmp142 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, ra000_ffff_tmp142);
            }
            else {
              carryQ.CarryDequeueEnqueue(41, 12);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(19, 34);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(53, 23))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(53), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(54), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp7);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(55), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(56), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp12);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_andc(tmp3, tmp7);
            byte_a3 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(57), r10000_10ffff_tmp15));
            sequence_f0_91_a3 = simd_and(r10000_10ffff_tmp15, byte_a3);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(58), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp9);
            byte_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp18);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(59), r10000_10ffff_tmp19));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp19, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp19;
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_3, tmp7);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_2));
            byte_range_9a_b3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp25);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(60), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_9d_90_adv, byte_range_9a_b3);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp26);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_not(r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp17, basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp29), simd_andc(r10000_10ffff_tmp30, basis_bits.bit_3));
            byte_range_8e_94 = simd_and(byte_range_80_9f, r10000_10ffff_tmp31);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(61), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_9d_91_adv, byte_range_8e_94);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_not(r10000_10ffff_tmp7);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp35 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp33), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_2));
            byte_range_96_a7 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_9d_91_adv, byte_range_96_a7);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp39, tmp7);
            byte_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp40);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp41 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp42 = simd_or(tmp7, basis_bits.bit_6);
            r10000_10ffff_tmp43 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp41), simd_andc(r10000_10ffff_tmp42, basis_bits.bit_3));
            byte_range_82_9b = simd_and(byte_range_80_9f, r10000_10ffff_tmp43);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(62), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_9d_92_adv, byte_range_82_9b);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp46 = simd_not(r10000_10ffff_tmp22);
            r10000_10ffff_tmp47 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp46), simd_andc(r10000_10ffff_tmp34, basis_bits.bit_4));
            byte_range_b6_b9 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_and(sequence_f0_9d_92_adv, byte_range_b6_b9);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp49, tmp3);
            byte_bb = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_and(sequence_f0_9d_92_adv, byte_bb);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp17);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp52, tmp8);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_9d_92_adv, byte_range_bd_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp53);
            byte_93 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp14);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            byte_range_80_83 = simd_andc(byte_range_80_8f, tmp7);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(63), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_9d_93_adv, byte_range_80_83);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp54);
            byte_range_85_8f = simd_and(byte_range_80_8f, r10000_10ffff_tmp28);
            r10000_10ffff_tmp55 = simd_and(sequence_f0_9d_93_adv, byte_range_85_8f);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp23);
            byte_range_aa_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_9d_93_adv, byte_range_aa_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp59 = simd_andc(r10000_10ffff_tmp58, tmp8);
            byte_94 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp59);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(64), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_9d_94_adv, byte_range_80_83);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp62 = simd_not(r10000_10ffff_tmp61);
            r10000_10ffff_tmp63 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp30);
            r10000_10ffff_tmp64 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp62), simd_andc(r10000_10ffff_tmp63, basis_bits.bit_2));
            byte_range_9e_b7 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp64);
            r10000_10ffff_tmp65 = simd_and(sequence_f0_9d_94_adv, byte_range_9e_b7);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp9);
            byte_95 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp66);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp67 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp68 = simd_not(r10000_10ffff_tmp67);
            r10000_10ffff_tmp69 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp42);
            r10000_10ffff_tmp70 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp68), simd_andc(r10000_10ffff_tmp69, basis_bits.bit_2));
            byte_range_92_ab = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp70);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(65), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_9d_95_adv, byte_range_92_ab);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp39);
            byte_96 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp72);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            r10000_10ffff_tmp73 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp35);
            byte_range_86_9f = simd_and(byte_range_80_9f, r10000_10ffff_tmp73);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(66), sequence_f0_9d_96_adv));
            r10000_10ffff_tmp74 = simd_and(sequence_f0_9d_96_adv, byte_range_86_9f);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp45, basis_bits.bit_4);
            byte_range_ba_bf = simd_and(r10000_10ffff_tmp75, r10000_10ffff_tmp22);
            r10000_10ffff_tmp76 = simd_and(sequence_f0_9d_96_adv, byte_range_ba_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp76);
            r10000_10ffff_tmp77 = simd_and(r10000_10ffff_tmp58, tmp3);
            byte_97 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp77);
            sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
            byte_range_80_93 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp20);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(67), sequence_f0_9d_97_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_9d_97_adv, byte_range_80_93);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp30);
            byte_range_ae_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(sequence_f0_9d_97_adv, byte_range_ae_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp49, tmp8);
            byte_98 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp81);
            sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
            byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(68), sequence_f0_9d_98_adv));
            r10000_10ffff_tmp82 = simd_and(sequence_f0_9d_98_adv, byte_range_80_87);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp82);
            byte_range_a2_bb = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp43);
            r10000_10ffff_tmp83 = simd_and(sequence_f0_9d_98_adv, byte_range_a2_bb);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp9);
            byte_99 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp84);
            sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
            r10000_10ffff_tmp85 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp86 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp85), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_2));
            byte_range_96_af = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp86);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(69), sequence_f0_9d_99_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9d_99_adv, byte_range_96_af);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp39);
            byte_9a = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp88);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp89 = simd_not(r10000_10ffff_tmp73);
            r10000_10ffff_tmp90 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp89), simd_andc(r10000_10ffff_tmp56, basis_bits.bit_2));
            byte_range_8a_a5 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp90);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(70), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp91 = simd_and(sequence_f0_9d_9a_adv, byte_range_8a_a5);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp91);
            byte_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp50);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            r10000_10ffff_tmp92 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(r10000_10ffff_tmp42, basis_bits.bit_3));
            byte_range_82_9a = simd_and(byte_range_80_9f, r10000_10ffff_tmp92);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(71), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_9b_adv, byte_range_82_9a);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp42);
            r10000_10ffff_tmp95 = simd_not(r10000_10ffff_tmp94);
            r10000_10ffff_tmp96 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp97 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp95), simd_andc(r10000_10ffff_tmp96, basis_bits.bit_2));
            byte_range_9c_a1 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_and(sequence_f0_9d_9b_adv, byte_range_9c_a1);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp98);
            byte_range_bc_bf = r10000_10ffff_tmp52;
            r10000_10ffff_tmp99 = simd_and(sequence_f0_9d_9b_adv, byte_range_bc_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_andc(r10000_10ffff_tmp17, tmp8);
            byte_9c = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp100);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            r10000_10ffff_tmp101 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            byte_range_80_94 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp101);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(72), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_9d_9c_adv, byte_range_80_94);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp104 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp103), simd_andc(r10000_10ffff_tmp34, basis_bits.bit_4));
            byte_range_96_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_9d_9c_adv, byte_range_96_9b);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp105);
            byte_range_b6_bf = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp35);
            r10000_10ffff_tmp106 = simd_and(sequence_f0_9d_9c_adv, byte_range_b6_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp106);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp107 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp108 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp107);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp108);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(73), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9d_9d_adv, byte_range_80_8e);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_andc(r10000_10ffff_tmp3, basis_bits.bit_4);
            byte_range_90_95 = simd_andc(r10000_10ffff_tmp110, r10000_10ffff_tmp34);
            r10000_10ffff_tmp111 = simd_and(sequence_f0_9d_9d_adv, byte_range_90_95);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp111);
            byte_range_b0_bf = r10000_10ffff_tmp45;
            r10000_10ffff_tmp112 = simd_and(sequence_f0_9d_9d_adv, byte_range_b0_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp112);
            r10000_10ffff_tmp113 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp39);
            byte_9e = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp113);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp114 = simd_or(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp115 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp114);
            byte_range_80_88 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp115);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(74), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_9d_9e_adv, byte_range_80_88);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(byte_range_80_8f, basis_bits.bit_4);
            byte_range_8a_8f = simd_and(r10000_10ffff_tmp117, r10000_10ffff_tmp22);
            r10000_10ffff_tmp118 = simd_and(sequence_f0_9d_9e_adv, byte_range_8a_8f);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp118);
            r10000_10ffff_tmp119 = simd_and(sequence_f0_9d_9e_adv, byte_range_aa_bf);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(r10000_10ffff_tmp17, tmp3);
            byte_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp120);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(byte_range_80_83, tmp3);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(75), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp121 = simd_and(sequence_f0_9d_9f_adv, byte_range_80_82);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp121);
            r10000_10ffff_tmp122 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp46), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_84_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp122);
            r10000_10ffff_tmp123 = simd_and(sequence_f0_9d_9f_adv, byte_range_84_89);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp123);
            byte_8b = simd_and(byte_range_80_8f, r10000_10ffff_tmp50);
            r10000_10ffff_tmp124 = simd_and(sequence_f0_9d_9f_adv, byte_8b);
            struct_gc_Ll.cc = simd_or(struct_gc_Ll.cc, r10000_10ffff_tmp124);
          }
          else {
            carryQ.CarryDequeueEnqueue(53, 23);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 76);
        }
        carryQ.CarryQ_Adjust(76);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<76, 0> carryQ;
  };

  struct Property_gc_Lo {
  Property_gc_Lo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Lo & struct_gc_Lo) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_aa;
		BitBlock byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, byte_ba;
		BitBlock r80_7ff_tmp14, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp7, r100_2ff_tmp8, r100_2ff_tmp9;
		BitBlock r100_24f_tmp1, r100_24f_tmp2, byte_range_c6_c8, r100_24f_tmp3;
		BitBlock r180_24f_tmp1, r180_24f_tmp2, byte_c6, r180_24f_tmp3, r180_24f_tmp4;
		BitBlock byte_bb, byte_c6_adv, r180_24f_tmp5, r180_24f_tmp6, byte_c7;
		BitBlock byte_range_80_83, byte_c7_adv, r180_24f_tmp7, byte_range_90_bf;
		BitBlock r100_2ff_tmp10, byte_ca, byte_range_80_af, r100_2ff_tmp11;
		BitBlock r100_2ff_tmp12, r100_2ff_tmp13, r250_2af_tmp1, r250_2af_tmp2;
		BitBlock r250_2af_tmp3, r250_2af_tmp4, byte_94, byte_ca_adv, r250_2af_tmp5;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, byte_range_d0_d7, r400_5ff_tmp1;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r400_5ff_tmp6, byte_d7, r400_5ff_tmp7, r590_5ff_tmp1, r590_5ff_tmp2;
		BitBlock r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5, byte_range_90_aa;
		BitBlock byte_d7_adv, r590_5ff_tmp6, r590_5ff_tmp7, byte_range_b0_b2;
		BitBlock r590_5ff_tmp8, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2;
		BitBlock byte_d8, byte_range_a0_bf, byte_d8_adv, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock r600_6ff_tmp5, byte_d9, r600_6ff_tmp6, r600_6ff_tmp7, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, byte_range_81_8a;
		BitBlock byte_d9_adv, r600_6ff_tmp12, r600_6ff_tmp13, r600_6ff_tmp14;
		BitBlock byte_range_ae_af, r600_6ff_tmp15, r600_6ff_tmp16, byte_range_b1_bf;
		BitBlock r600_6ff_tmp17, byte_da, byte_range_80_bf, byte_da_adv;
		BitBlock r600_6ff_tmp18, r600_6ff_tmp19, byte_db, r600_6ff_tmp20;
		BitBlock r600_6ff_tmp21, byte_range_80_93, byte_db_adv, r600_6ff_tmp22;
		BitBlock r600_6ff_tmp23, r600_6ff_tmp24, r600_6ff_tmp25, byte_95;
		BitBlock r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28, r600_6ff_tmp29;
		BitBlock r600_6ff_tmp30, r600_6ff_tmp31, r600_6ff_tmp32, byte_range_ba_bc;
		BitBlock r600_6ff_tmp33, r600_6ff_tmp34, byte_bf, r600_6ff_tmp35;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock r700_77f_tmp2, byte_dc, r700_77f_tmp3, r700_77f_tmp4, byte_dd;
		BitBlock r700_77f_tmp5, r700_77f_tmp6, r700_77f_tmp7, r700_74f_tmp1;
		BitBlock r700_74f_tmp2, byte_90, byte_dc_adv, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock r700_74f_tmp5, r700_74f_tmp6, r700_74f_tmp7, byte_range_92_af;
		BitBlock r700_74f_tmp8, r700_74f_tmp9, byte_range_8d_8f, byte_dd_adv;
		BitBlock r700_74f_tmp10, r700_77f_tmp8, r750_77f_tmp1, r80_7ff_tmp19;
		BitBlock byte_range_de_df, r780_7ff_tmp1, byte_de, r780_7bf_tmp1;
		BitBlock r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4, byte_range_80_a5;
		BitBlock byte_de_adv, r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7, byte_b1;
		BitBlock r780_7bf_tmp8, r780_7ff_tmp2, r780_7ff_tmp3, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8, byte_range_8a_aa;
		BitBlock byte_df_adv, r7c0_7ff_tmp9, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, byte_range_80_95, sequence_e0_a0_adv, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, byte_a1, sequence_e0_a1, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, byte_range_80_98, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp20;
		BitBlock byte_a4, sequence_e0_a4, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock byte_range_84_b9, sequence_e0_a4_adv, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31, byte_bd;
		BitBlock r800_fff_tmp32, r800_fff_tmp33, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, sequence_e0_a5_adv, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39, byte_range_98_a1;
		BitBlock r800_fff_tmp40, r800_fff_tmp41, byte_range_b2_bf, r800_fff_tmp42;
		BitBlock r800_fff_tmp43, byte_a6, sequence_e0_a6, r800_fff_tmp44;
		BitBlock r800_fff_tmp45, byte_80, sequence_e0_a6_adv, r800_fff_tmp46;
		BitBlock r800_fff_tmp47, r800_fff_tmp48, byte_range_85_8c, r800_fff_tmp49;
		BitBlock r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52, byte_range_8f_90;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock byte_range_93_a8, r800_fff_tmp57, r800_fff_tmp58, byte_range_aa_b0;
		BitBlock r800_fff_tmp59, byte_b2, r800_fff_tmp60, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, byte_range_b6_b9, r800_fff_tmp63, r800_fff_tmp64;
		BitBlock r800_fff_tmp65, byte_a7, sequence_e0_a7, r800_fff_tmp66, byte_8e;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp67, r800_fff_tmp68, byte_range_9c_9d;
		BitBlock r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71, byte_range_9f_a1;
		BitBlock r800_fff_tmp72, byte_range_b0_b1, r800_fff_tmp73, r800_fff_tmp74;
		BitBlock r800_fff_tmp75, byte_a8, sequence_e0_a8, r800_fff_tmp76;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, byte_range_85_8a, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp79, r800_fff_tmp80, r800_fff_tmp81, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, byte_range_b2_b3, r800_fff_tmp84, r800_fff_tmp85;
		BitBlock r800_fff_tmp86, byte_range_b5_b6, r800_fff_tmp87, r800_fff_tmp88;
		BitBlock byte_range_b8_b9, r800_fff_tmp89, r800_fff_tmp90, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp91, r800_fff_tmp92, byte_range_99_9c;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp93, byte_9e, r800_fff_tmp94;
		BitBlock r800_fff_tmp95, r800_fff_tmp96, r800_fff_tmp97, byte_range_b2_b4;
		BitBlock r800_fff_tmp98, r800_fff_tmp99, sequence_e0_aa, r800_fff_tmp100;
		BitBlock r800_fff_tmp101, byte_range_85_8d, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, r800_fff_tmp104, byte_range_8f_91;
		BitBlock r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107, r800_fff_tmp108;
		BitBlock r800_fff_tmp109, byte_range_b5_b9, r800_fff_tmp110, r800_fff_tmp111;
		BitBlock r800_fff_tmp112, byte_ab, sequence_e0_ab, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp113, byte_range_a0_a1, r800_fff_tmp114, r800_fff_tmp115;
		BitBlock byte_ac, sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp116;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119, r800_fff_tmp120;
		BitBlock r800_fff_tmp121, r800_fff_tmp122, byte_ad, sequence_e0_ad;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp123, r800_fff_tmp124, r800_fff_tmp125;
		BitBlock byte_ae, sequence_e0_ae, r800_fff_tmp126, byte_83, sequence_e0_ae_adv;
		BitBlock r800_fff_tmp127, r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130;
		BitBlock byte_range_8e_90, r800_fff_tmp131, r800_fff_tmp132, r800_fff_tmp133;
		BitBlock byte_range_92_95, r800_fff_tmp134, r800_fff_tmp135, byte_range_99_9a;
		BitBlock r800_fff_tmp136, byte_9c, r800_fff_tmp137, byte_range_9e_9f;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, byte_range_a3_a4;
		BitBlock r800_fff_tmp141, r800_fff_tmp142, byte_range_a8_aa, r800_fff_tmp143;
		BitBlock r800_fff_tmp144, r800_fff_tmp145, byte_range_ae_b9, r800_fff_tmp146;
		BitBlock byte_af, sequence_e0_af, sequence_e0_af_adv, r800_fff_tmp147, byte_b0;
		BitBlock sequence_e0_b0, sequence_e0_b0_adv, r800_fff_tmp148, r800_fff_tmp149;
		BitBlock r800_fff_tmp150, r800_fff_tmp151, byte_range_92_a8, r800_fff_tmp152;
		BitBlock r800_fff_tmp153, byte_range_aa_b9, r800_fff_tmp154, r800_fff_tmp155;
		BitBlock sequence_e0_b1, byte_range_98_99, sequence_e0_b1_adv, r800_fff_tmp156;
		BitBlock r800_fff_tmp157, sequence_e0_b2, sequence_e0_b2_adv, r800_fff_tmp158;
		BitBlock r800_fff_tmp159, r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162;
		BitBlock byte_range_aa_b3, r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165;
		BitBlock byte_b3, sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp166;
		BitBlock r800_fff_tmp167, r800_fff_tmp168, byte_range_b1_b2, r800_fff_tmp169;
		BitBlock byte_b4, sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp170;
		BitBlock r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, byte_range_92_ba, r800_fff_tmp176, r800_fff_tmp177;
		BitBlock byte_b5, sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp178;
		BitBlock r800_fff_tmp179, r800_fff_tmp180, byte_range_ba_bf, r800_fff_tmp181;
		BitBlock byte_b6, sequence_e0_b6, r800_fff_tmp182, r800_fff_tmp183;
		BitBlock r800_fff_tmp184, r800_fff_tmp185, r800_fff_tmp186, byte_range_85_96;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp187, r800_fff_tmp188, r800_fff_tmp189;
		BitBlock byte_range_9a_b1, r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192;
		BitBlock byte_range_b3_bb, r800_fff_tmp193, r800_fff_tmp194, byte_b7;
		BitBlock sequence_e0_b7, r800_fff_tmp195, byte_range_80_86, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp196, byte_b8, sequence_e0_b8, r800_fff_tmp197;
		BitBlock r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200, byte_range_81_b0;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp201, r800_fff_tmp202, byte_b9;
		BitBlock sequence_e0_b9, byte_range_80_85, sequence_e0_b9_adv, r800_fff_tmp203;
		BitBlock sequence_e0_ba, r800_fff_tmp204, byte_range_81_82, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp205, byte_84, r800_fff_tmp206, r800_fff_tmp207;
		BitBlock r800_fff_tmp208, byte_range_87_88, r800_fff_tmp209, byte_8a;
		BitBlock r800_fff_tmp210, byte_8d, r800_fff_tmp211, byte_range_94_97;
		BitBlock r800_fff_tmp212, byte_range_99_9f, r800_fff_tmp213, r800_fff_tmp214;
		BitBlock byte_range_a1_a3, r800_fff_tmp215, r800_fff_tmp216, r800_fff_tmp217;
		BitBlock r800_fff_tmp218, byte_range_aa_ab, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, byte_range_ad_b0, r800_fff_tmp222, r800_fff_tmp223;
		BitBlock r800_fff_tmp224, sequence_e0_bb, byte_range_80_84, sequence_e0_bb_adv;
		BitBlock r800_fff_tmp225, byte_range_9c_9f, r800_fff_tmp226, byte_bc;
		BitBlock sequence_e0_bc, sequence_e0_bc_adv, r800_fff_tmp227, sequence_e0_bd;
		BitBlock byte_range_80_87, sequence_e0_bd_adv, r800_fff_tmp228;
		BitBlock r800_fff_tmp229, r800_fff_tmp230, r800_fff_tmp231, byte_range_89_ac;
		BitBlock r800_fff_tmp232, byte_be, sequence_e0_be, r800_fff_tmp233;
		BitBlock byte_range_88_8c, sequence_e0_be_adv, r800_fff_tmp234, r800_1fff_tmp2;
		BitBlock r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_range_80_aa, sequence_e1_80_adv, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, byte_81, sequence_e1_81;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_range_90_95, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock byte_range_9a_9d, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock byte_range_a5_a6, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock byte_range_ae_b0, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, byte_range_b5_bf, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, r1000_1fff_tmp37, byte_82, sequence_e1_82;
		BitBlock byte_range_80_81, sequence_e1_82_adv, r1000_1fff_tmp38;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, r1000_1fff_tmp41, sequence_e1_83;
		BitBlock r1000_1fff_tmp42, r1000_1fff_tmp43, r1000_1fff_tmp44;
		BitBlock byte_range_90_ba, sequence_e1_83_adv, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, byte_range_bd_bf, r1000_1fff_tmp47;
		BitBlock r1000_1fff_tmp48, r1000_1fff_tmp49, r1000_1fff_tmp50;
		BitBlock byte_range_84_88, byte_e1_byte_range_84_88, r1000_1fff_tmp51;
		BitBlock byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp52, r1000_1fff_tmp53;
		BitBlock r1000_1fff_tmp54, byte_89, sequence_e1_89, r1000_1fff_tmp55;
		BitBlock byte_range_80_88, sequence_e1_89_adv, r1000_1fff_tmp56;
		BitBlock r1000_1fff_tmp57, byte_range_8a_8d, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock byte_range_90_96, r1000_1fff_tmp62, r1000_1fff_tmp63, byte_98;
		BitBlock r1000_1fff_tmp64, r1000_1fff_tmp65, r1000_1fff_tmp66;
		BitBlock r1000_1fff_tmp67, r1000_1fff_tmp68, sequence_e1_8a;
		BitBlock sequence_e1_8a_adv, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock byte_range_90_b0, r1000_1fff_tmp74, r1000_1fff_tmp75;
		BitBlock r1000_1fff_tmp76, byte_range_b2_b5, r1000_1fff_tmp77;
		BitBlock r1000_1fff_tmp78, byte_range_b8_be, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, byte_8b, sequence_e1_8b, sequence_e1_8b_adv;
		BitBlock r1000_1fff_tmp81, r1000_1fff_tmp82, byte_range_82_85;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, byte_range_88_96;
		BitBlock r1000_1fff_tmp88, r1000_1fff_tmp89, byte_range_98_bf;
		BitBlock r1000_1fff_tmp90, r1000_1fff_tmp91, byte_8c, sequence_e1_8c;
		BitBlock byte_range_80_90, sequence_e1_8c_adv, r1000_1fff_tmp92;
		BitBlock r1000_1fff_tmp93, r1000_1fff_tmp94, r1000_1fff_tmp95, sequence_e1_8d;
		BitBlock byte_range_80_9a, sequence_e1_8d_adv, r1000_1fff_tmp96;
		BitBlock sequence_e1_8e, sequence_e1_8e_adv, r1000_1fff_tmp97;
		BitBlock r1000_1fff_tmp98, byte_8f, sequence_e1_8f, r1000_1fff_tmp99;
		BitBlock r1000_1fff_tmp100, byte_range_80_b4, sequence_e1_8f_adv;
		BitBlock r1000_1fff_tmp101, sequence_e1_90, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, byte_range_81_bf, sequence_e1_90_adv;
		BitBlock r1000_1fff_tmp104, r1000_1fff_tmp105, byte_range_91_98;
		BitBlock byte_e1_byte_range_91_98, r1000_1fff_tmp106;
		BitBlock byte_e1_byte_range_91_98_sfx, byte_99, sequence_e1_99;
		BitBlock r1000_1fff_tmp107, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock byte_range_80_ac, sequence_e1_99_adv, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, byte_range_af_bf, r1000_1fff_tmp112, byte_9a;
		BitBlock sequence_e1_9a, r1000_1fff_tmp113, r1000_1fff_tmp114;
		BitBlock byte_range_81_9a, sequence_e1_9a_adv, r1000_1fff_tmp115;
		BitBlock r1000_1fff_tmp116, byte_9b, sequence_e1_9b, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp117, byte_range_b1_b8, r1000_1fff_tmp118;
		BitBlock sequence_e1_9c, r1000_1fff_tmp119, byte_range_80_8c;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, byte_range_8e_91, r1000_1fff_tmp123;
		BitBlock r1000_1fff_tmp124, byte_range_a0_b1, r1000_1fff_tmp125, byte_9d;
		BitBlock sequence_e1_9d, byte_range_80_91, sequence_e1_9d_adv;
		BitBlock r1000_1fff_tmp126, r1000_1fff_tmp127, byte_range_a0_ac;
		BitBlock r1000_1fff_tmp128, r1000_1fff_tmp129, sequence_e1_9e;
		BitBlock r1000_1fff_tmp130, r1000_1fff_tmp131, byte_range_80_b3;
		BitBlock sequence_e1_9e_adv, r1000_1fff_tmp132, byte_9f, sequence_e1_9f;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp133, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp134, sequence_e1_a1;
		BitBlock r1000_1fff_tmp135, byte_range_80_82, sequence_e1_a1_adv;
		BitBlock r1000_1fff_tmp136, r1000_1fff_tmp137, r1000_1fff_tmp138;
		BitBlock r1000_1fff_tmp139, byte_range_84_b7, r1000_1fff_tmp140;
		BitBlock sequence_e1_a2, r1000_1fff_tmp141, r1000_1fff_tmp142;
		BitBlock byte_range_80_a8, sequence_e1_a2_adv, r1000_1fff_tmp143;
		BitBlock r1000_1fff_tmp144, byte_range_b0_bf, r1000_1fff_tmp145, byte_a3;
		BitBlock sequence_e1_a3, r1000_1fff_tmp146, r1000_1fff_tmp147;
		BitBlock r1000_1fff_tmp148, byte_range_80_b5, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp149, sequence_e1_a4, r1000_1fff_tmp150;
		BitBlock byte_range_80_9e, sequence_e1_a4_adv, r1000_1fff_tmp151;
		BitBlock r1000_1fff_tmp152, sequence_e1_a5, r1000_1fff_tmp153;
		BitBlock r1000_1fff_tmp154, r1000_1fff_tmp155, byte_range_90_ad;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp156, r1000_1fff_tmp157;
		BitBlock byte_range_b0_b4, r1000_1fff_tmp158, r1000_1fff_tmp159;
		BitBlock sequence_e1_a6, r1000_1fff_tmp160, r1000_1fff_tmp161;
		BitBlock byte_range_80_ab, sequence_e1_a6_adv, r1000_1fff_tmp162;
		BitBlock r1000_1fff_tmp163, sequence_e1_a7, r1000_1fff_tmp164;
		BitBlock byte_range_81_87, sequence_e1_a7_adv, r1000_1fff_tmp165;
		BitBlock sequence_e1_a8, r1000_1fff_tmp166, byte_range_80_96;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp167, r1000_1fff_tmp168;
		BitBlock sequence_e1_a9, byte_range_80_94, sequence_e1_a9_adv;
		BitBlock r1000_1fff_tmp169, sequence_e1_ac, r1000_1fff_tmp170;
		BitBlock r1000_1fff_tmp171, r1000_1fff_tmp172, byte_range_85_b3;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp173, sequence_e1_ad;
		BitBlock r1000_1fff_tmp174, r1000_1fff_tmp175, byte_range_85_8b;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp176, sequence_e1_ae;
		BitBlock r1000_1fff_tmp177, r1000_1fff_tmp178, r1000_1fff_tmp179;
		BitBlock r1000_1fff_tmp180, byte_range_83_a0, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp181, r1000_1fff_tmp182, r1000_1fff_tmp183;
		BitBlock r1000_1fff_tmp184, r1000_1fff_tmp185, sequence_e1_af;
		BitBlock r1000_1fff_tmp186, r1000_1fff_tmp187, sequence_e1_af_adv;
		BitBlock r1000_1fff_tmp188, sequence_e1_b0, r1000_1fff_tmp189;
		BitBlock byte_range_80_a3, sequence_e1_b0_adv, r1000_1fff_tmp190;
		BitBlock sequence_e1_b1, r1000_1fff_tmp191, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp192, r1000_1fff_tmp193, r1000_1fff_tmp194;
		BitBlock r1000_1fff_tmp195, byte_range_9a_b7, r1000_1fff_tmp196;
		BitBlock sequence_e1_b3, r1000_1fff_tmp197, r1000_1fff_tmp198;
		BitBlock byte_range_a9_ac, sequence_e1_b3_adv, r1000_1fff_tmp199;
		BitBlock byte_range_ae_b1, r1000_1fff_tmp200, r1000_1fff_tmp201;
		BitBlock r1000_1fff_tmp202, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_b5_b8;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp10, sequence_e2_b4;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, sequence_e2_b5, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock byte_range_80_a7, sequence_e2_b5_adv, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, sequence_e2_b6, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_range_a0_a6, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, byte_range_a8_ae, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, byte_range_b0_b6, r2000_2fff_tmp30;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33, sequence_e2_b7;
		BitBlock r2000_2fff_tmp34, sequence_e2_b7_adv, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, byte_range_88_8e, r2000_2fff_tmp37;
		BitBlock r2000_2fff_tmp38, r2000_2fff_tmp39, r2000_2fff_tmp40;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, byte_range_98_9e;
		BitBlock r2000_2fff_tmp43, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock byte_86, sequence_e3_80_adv, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, sequence_e3_81, r3000_4dff_tmp14;
		BitBlock r3000_4dff_tmp15, sequence_e3_81_adv, r3000_4dff_tmp16;
		BitBlock sequence_e3_82, r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, sequence_e3_82_adv, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, r3000_4dff_tmp23, r3000_4dff_tmp24;
		BitBlock r3000_4dff_tmp25, r3000_4dff_tmp26, byte_range_a1_bf;
		BitBlock r3000_4dff_tmp27, sequence_e3_83, r3000_4dff_tmp28, r3000_4dff_tmp29;
		BitBlock r3000_4dff_tmp30, r3000_4dff_tmp31, byte_range_80_ba;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp32, r3000_4dff_tmp33;
		BitBlock sequence_e3_84, r3000_4dff_tmp34, r3000_4dff_tmp35, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, r3000_4dff_tmp39;
		BitBlock r3000_4dff_tmp40, byte_range_85_ad, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp41, r3000_4dff_tmp42, r3000_4dff_tmp43;
		BitBlock r3000_4dff_tmp44, r3000_4dff_tmp45, byte_85, sequence_e3_85;
		BitBlock sequence_e3_85_adv, r3000_4dff_tmp46, r3000_4dff_tmp47;
		BitBlock sequence_e3_86, r3000_4dff_tmp48, byte_range_80_8e;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp49, r3000_4dff_tmp50;
		BitBlock byte_range_a0_ba, r3000_4dff_tmp51, r3000_4dff_tmp52, byte_87;
		BitBlock sequence_e3_87, sequence_e3_87_adv, r3000_4dff_tmp53;
		BitBlock byte_e3_byte_range_90_bf, r3000_4dff_tmp54;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp55, r3000_4dff_tmp56;
		BitBlock r3000_4dff_tmp57, r3000_4dff_tmp58, byte_e4_byte_range_80_b5;
		BitBlock r3000_4dff_tmp59, byte_e4_byte_range_80_b5_sfx, sequence_e4_b6;
		BitBlock byte_e4_adv, sequence_e4_b6_adv, r3000_4dff_tmp60, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_b8_bf, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, byte_range_e5_e9;
		BitBlock r800_ffff_tmp18, byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12;
		BitBlock r4e00_9fff_tmp13, r4e00_9fff_tmp14, byte_range_80_be;
		BitBlock r4e00_9fff_tmp15, byte_e9_byte_range_80_be, r4e00_9fff_tmp16;
		BitBlock byte_e9_byte_range_80_be_sfx, r4e00_9fff_tmp17, sequence_e9_bf;
		BitBlock byte_e9_adv, r4e00_9fff_tmp18, r4e00_9fff_tmp19, r4e00_9fff_tmp20;
		BitBlock sequence_e9_bf_adv, r4e00_9fff_tmp21, r800_ffff_tmp19;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_80, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, sequence_ea_80_adv;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, byte_range_96_bf;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_81_91, byte_ea_byte_range_81_91;
		BitBlock ra000_ffff_tmp20, byte_ea_byte_range_81_91_sfx, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, byte_92, sequence_ea_92;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, sequence_ea_92_adv;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp29, ra000_ffff_tmp30, byte_range_90_b7;
		BitBlock sequence_ea_93_adv, ra000_ffff_tmp31, byte_ea_byte_range_94_97;
		BitBlock ra000_ffff_tmp32, byte_ea_byte_range_94_97_sfx, ra000_ffff_tmp33;
		BitBlock sequence_ea_98, ra000_ffff_tmp34, byte_range_80_8b;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp35, byte_range_90_9f;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41, sequence_ea_99;
		BitBlock ra000_ffff_tmp42, sequence_ea_99_adv, ra000_ffff_tmp43;
		BitBlock sequence_ea_9a, sequence_ea_9a_adv, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, sequence_ea_9b, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp48, ra000_ffff_tmp49;
		BitBlock sequence_ea_9f, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, byte_range_bb_bf, ra000_ffff_tmp55, sequence_ea_a0;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, byte_range_83_85;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock ra000_ffff_tmp63, byte_range_87_8a, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, byte_range_8c_a2;
		BitBlock ra000_ffff_tmp70, ra000_ffff_tmp71, sequence_ea_a1, ra000_ffff_tmp72;
		BitBlock ra000_ffff_tmp73, sequence_ea_a1_adv, ra000_ffff_tmp74;
		BitBlock sequence_ea_a2, ra000_ffff_tmp75, ra000_ffff_tmp76, ra000_ffff_tmp77;
		BitBlock byte_range_82_b3, sequence_ea_a2_adv, ra000_ffff_tmp78;
		BitBlock sequence_ea_a3, ra000_ffff_tmp79, byte_range_b2_b7;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp80, ra000_ffff_tmp81;
		BitBlock sequence_ea_a4, ra000_ffff_tmp82, ra000_ffff_tmp83, ra000_ffff_tmp84;
		BitBlock ra000_ffff_tmp85, byte_range_8a_a5, sequence_ea_a4_adv;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88, sequence_ea_a5;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp89, ra000_ffff_tmp90;
		BitBlock ra000_ffff_tmp91, byte_range_a0_bc, ra000_ffff_tmp92;
		BitBlock ra000_ffff_tmp93, sequence_ea_a6, ra000_ffff_tmp94, ra000_ffff_tmp95;
		BitBlock ra000_ffff_tmp96, ra000_ffff_tmp97, byte_range_84_b2;
		BitBlock sequence_ea_a6_adv, ra000_ffff_tmp98, sequence_ea_a7;
		BitBlock ra000_ffff_tmp99, byte_range_a0_a4, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp100, ra000_ffff_tmp101, byte_range_a7_af;
		BitBlock ra000_ffff_tmp102, ra000_ffff_tmp103, ra000_ffff_tmp104;
		BitBlock ra000_ffff_tmp105, byte_range_ba_be, ra000_ffff_tmp106;
		BitBlock sequence_ea_a8, ra000_ffff_tmp107, ra000_ffff_tmp108;
		BitBlock ra000_ffff_tmp109, ra000_ffff_tmp110, sequence_ea_a8_adv;
		BitBlock ra000_ffff_tmp111, sequence_ea_a9, ra000_ffff_tmp112;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp113, ra000_ffff_tmp114;
		BitBlock byte_range_84_8b, ra000_ffff_tmp115, byte_range_a0_af;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock byte_range_b1_b6, ra000_ffff_tmp119, ra000_ffff_tmp120;
		BitBlock ra000_ffff_tmp121, byte_range_be_bf, ra000_ffff_tmp122;
		BitBlock sequence_ea_aa, sequence_ea_aa_adv, ra000_ffff_tmp123;
		BitBlock ra000_ffff_tmp124, ra000_ffff_tmp125, ra000_ffff_tmp126;
		BitBlock ra000_ffff_tmp127, ra000_ffff_tmp128, byte_range_b9_bd;
		BitBlock ra000_ffff_tmp129, sequence_ea_ab, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp130, ra000_ffff_tmp131, ra000_ffff_tmp132;
		BitBlock ra000_ffff_tmp133, ra000_ffff_tmp134, byte_range_9b_9c;
		BitBlock ra000_ffff_tmp135, ra000_ffff_tmp136, byte_range_a0_aa;
		BitBlock ra000_ffff_tmp137, ra000_ffff_tmp138, ra000_ffff_tmp139;
		BitBlock sequence_ea_ac, byte_range_81_86, sequence_ea_ac_adv;
		BitBlock ra000_ffff_tmp140, ra000_ffff_tmp141, byte_range_89_8e;
		BitBlock ra000_ffff_tmp142, ra000_ffff_tmp143, byte_range_91_96;
		BitBlock ra000_ffff_tmp144, ra000_ffff_tmp145, ra000_ffff_tmp146;
		BitBlock ra000_ffff_tmp147, ra000_ffff_tmp148, sequence_ea_af;
		BitBlock ra000_ffff_tmp149, byte_range_80_a2, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp150, byte_ea_byte_range_b0_bf, ra000_ffff_tmp151;
		BitBlock byte_ea_byte_range_b0_bf_sfx, byte_range_eb_ec, ra000_ffff_tmp152;
		BitBlock byte_range_eb_ec_sfx, ra000_ffff_tmp153, byte_range_eb_ec_sfx_sfx;
		BitBlock ra000_ffff_tmp154, byte_ed, ra000_ffff_tmp155, ra000_ffff_tmp156;
		BitBlock byte_range_80_9d, ra000_ffff_tmp157, byte_ed_byte_range_80_9d;
		BitBlock ra000_ffff_tmp158, byte_ed_byte_range_80_9d_sfx, sequence_ed_9e;
		BitBlock byte_ed_adv, ra000_ffff_tmp159, sequence_ed_9e_adv, ra000_ffff_tmp160;
		BitBlock ra000_ffff_tmp161, sequence_ed_9f, sequence_ed_9f_adv;
		BitBlock ra000_ffff_tmp162, ra000_ffff_tmp163, ra000_ffff_tmp164;
		BitBlock ra000_ffff_tmp165, ra000_ffff_tmp166, byte_range_8b_bb;
		BitBlock ra000_ffff_tmp167, byte_ef, ra000_ffff_tmp168, ra000_ffff_tmp169;
		BitBlock byte_range_a4_a8, ra000_ffff_tmp170, byte_ef_byte_range_a4_a8;
		BitBlock ra000_ffff_tmp171, byte_ef_byte_range_a4_a8_sfx, sequence_ef_a9;
		BitBlock byte_ef_adv, ra000_ffff_tmp172, ra000_ffff_tmp173, byte_range_80_ad;
		BitBlock sequence_ef_a9_adv, ra000_ffff_tmp174, ra000_ffff_tmp175;
		BitBlock sequence_ef_aa, sequence_ef_aa_adv, ra000_ffff_tmp176, sequence_ef_ab;
		BitBlock ra000_ffff_tmp177, byte_range_80_99, sequence_ef_ab_adv;
		BitBlock ra000_ffff_tmp178, sequence_ef_ac, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp179, ra000_ffff_tmp180, ra000_ffff_tmp181;
		BitBlock ra000_ffff_tmp182, byte_range_9f_a8, ra000_ffff_tmp183;
		BitBlock ra000_ffff_tmp184, ra000_ffff_tmp185, byte_range_aa_b6;
		BitBlock ra000_ffff_tmp186, byte_range_b8_bc, ra000_ffff_tmp187;
		BitBlock ra000_ffff_tmp188, sequence_ef_ad, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp189, byte_range_83_84, ra000_ffff_tmp190;
		BitBlock ra000_ffff_tmp191, byte_range_86_bf, ra000_ffff_tmp192;
		BitBlock sequence_ef_ae, ra000_ffff_tmp193, ra000_ffff_tmp194;
		BitBlock byte_range_80_b1, sequence_ef_ae_adv, ra000_ffff_tmp195;
		BitBlock sequence_ef_af, ra000_ffff_tmp196, byte_range_93_bf;
		BitBlock sequence_ef_af_adv, ra000_ffff_tmp197, byte_range_b0_b3;
		BitBlock byte_ef_byte_range_b0_b3, ra000_ffff_tmp198;
		BitBlock byte_ef_byte_range_b0_b3_sfx, sequence_ef_b4, ra000_ffff_tmp199;
		BitBlock byte_range_80_bd, sequence_ef_b4_adv, ra000_ffff_tmp200;
		BitBlock sequence_ef_b5, sequence_ef_b5_adv, ra000_ffff_tmp201, sequence_ef_b6;
		BitBlock sequence_ef_b6_adv, ra000_ffff_tmp202, ra000_ffff_tmp203;
		BitBlock byte_range_92_bf, ra000_ffff_tmp204, sequence_ef_b7;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp205, byte_range_b0_bb;
		BitBlock ra000_ffff_tmp206, sequence_ef_b9, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp207, byte_range_b6_bf, ra000_ffff_tmp208;
		BitBlock sequence_ef_ba, sequence_ef_ba_adv, ra000_ffff_tmp209, sequence_ef_bb;
		BitBlock ra000_ffff_tmp210, byte_range_80_bc, sequence_ef_bb_adv;
		BitBlock ra000_ffff_tmp211, sequence_ef_bd, byte_range_a6_af;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp212, ra000_ffff_tmp213;
		BitBlock ra000_ffff_tmp214, sequence_ef_be, sequence_ef_be_adv;
		BitBlock ra000_ffff_tmp215, byte_range_a0_be, ra000_ffff_tmp216;
		BitBlock sequence_ef_bf, byte_range_82_87, sequence_ef_bf_adv;
		BitBlock ra000_ffff_tmp217, ra000_ffff_tmp218, byte_range_8a_8f;
		BitBlock ra000_ffff_tmp219, byte_range_92_97, ra000_ffff_tmp220;
		BitBlock ra000_ffff_tmp221, byte_range_9a_9c, ra000_ffff_tmp222;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_80, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp11, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_range_8d_a6, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, byte_range_a8_ba, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, byte_range_bc_bd;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, sequence_f0_90_81;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_range_80_8d;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp37, byte_range_90_9d;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock sequence_f0_90_82, sequence_f0_90_82_adv, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, sequence_f0_90_83;
		BitBlock r10000_10ffff_tmp44, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock sequence_f0_90_83_adv, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, sequence_f0_90_8a, r10000_10ffff_tmp50;
		BitBlock r10000_10ffff_tmp51, byte_range_80_9c, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp55, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, sequence_f0_90_8c;
		BitBlock byte_range_80_9f, sequence_f0_90_8c_adv, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, sequence_f0_90_8d;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, byte_range_82_89, r10000_10ffff_tmp64;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, byte_range_90_b5, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, sequence_f0_90_8e, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, sequence_f0_90_8e_adv, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, sequence_f0_90_8f, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp75, byte_range_88_8f, r10000_10ffff_tmp76, byte_91;
		BitBlock sequence_f0_90_91, sequence_f0_90_91_adv, r10000_10ffff_tmp77;
		BitBlock sequence_f0_90_92, sequence_f0_90_92_adv, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, sequence_f0_90_94;
		BitBlock r10000_10ffff_tmp81, r10000_10ffff_tmp82, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, r10000_10ffff_tmp85;
		BitBlock sequence_f0_90_95, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock sequence_f0_90_95_adv, r10000_10ffff_tmp88, byte_range_98_9b;
		BitBlock sequence_f0_90_byte_range_98_9b, r10000_10ffff_tmp89;
		BitBlock sequence_f0_90_byte_range_98_9b_sfx, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, byte_range_80_b6;
		BitBlock sequence_f0_90_9c_adv, r10000_10ffff_tmp92, sequence_f0_90_9d;
		BitBlock sequence_f0_90_9d_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock byte_range_a0_a7, r10000_10ffff_tmp95, sequence_f0_90_a0;
		BitBlock r10000_10ffff_tmp96, sequence_f0_90_a0_adv, r10000_10ffff_tmp97;
		BitBlock r10000_10ffff_tmp98, byte_88, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock byte_range_8a_b5, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, byte_range_b7_b8;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock sequence_f0_90_a1, sequence_f0_90_a1_adv, r10000_10ffff_tmp110;
		BitBlock byte_range_a0_b6, r10000_10ffff_tmp111, sequence_f0_90_a2;
		BitBlock r10000_10ffff_tmp112, sequence_f0_90_a2_adv, r10000_10ffff_tmp113;
		BitBlock sequence_f0_90_a4, sequence_f0_90_a4_adv, r10000_10ffff_tmp114;
		BitBlock r10000_10ffff_tmp115, byte_range_a0_b9, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_a6, r10000_10ffff_tmp118;
		BitBlock r10000_10ffff_tmp119, sequence_f0_90_a6_adv, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, sequence_f0_90_a8, sequence_f0_90_a8_adv;
		BitBlock r10000_10ffff_tmp122, byte_range_90_93, r10000_10ffff_tmp123;
		BitBlock r10000_10ffff_tmp124, byte_range_95_97, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, byte_range_99_b3;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, sequence_f0_90_a9;
		BitBlock sequence_f0_90_a9_adv, r10000_10ffff_tmp133, sequence_f0_90_aa;
		BitBlock sequence_f0_90_aa_adv, r10000_10ffff_tmp134, sequence_f0_90_ab;
		BitBlock sequence_f0_90_ab_adv, r10000_10ffff_tmp135, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, byte_range_89_a4;
		BitBlock r10000_10ffff_tmp142, sequence_f0_90_ac, r10000_10ffff_tmp143;
		BitBlock sequence_f0_90_ac_adv, r10000_10ffff_tmp144, sequence_f0_90_ad;
		BitBlock sequence_f0_90_ad_adv, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, r10000_10ffff_tmp148, sequence_f0_90_ae;
		BitBlock r10000_10ffff_tmp149, r10000_10ffff_tmp150, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp151, sequence_f0_90_b0, sequence_f0_90_b0_adv;
		BitBlock r10000_10ffff_tmp152, sequence_f0_90_b1, sequence_f0_90_b1_adv;
		BitBlock r10000_10ffff_tmp153, sequence_f0_91, r10000_10ffff_tmp154;
		BitBlock sequence_f0_91_80, sequence_f0_91_adv, r10000_10ffff_tmp155;
		BitBlock r10000_10ffff_tmp156, r10000_10ffff_tmp157, byte_range_83_b7;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp158, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp159, r10000_10ffff_tmp160, byte_range_83_af;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp161, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, byte_range_90_a8;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp164, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp165, byte_range_83_a6, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp166, sequence_f0_91_85, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, byte_range_90_b2, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp169, r10000_10ffff_tmp170, sequence_f0_91_86;
		BitBlock r10000_10ffff_tmp171, byte_range_83_b2, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp174, byte_range_81_84, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp175, r10000_10ffff_tmp176, sequence_f0_91_88;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp177, r10000_10ffff_tmp178;
		BitBlock r10000_10ffff_tmp179, r10000_10ffff_tmp180, byte_range_93_ab;
		BitBlock r10000_10ffff_tmp181, sequence_f0_91_8a, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp182, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp183, sequence_f0_91_8c, r10000_10ffff_tmp184;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp185, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, r10000_10ffff_tmp189;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, r10000_10ffff_tmp192;
		BitBlock r10000_10ffff_tmp193, r10000_10ffff_tmp194, r10000_10ffff_tmp195;
		BitBlock r10000_10ffff_tmp196, r10000_10ffff_tmp197, r10000_10ffff_tmp198;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp199, r10000_10ffff_tmp200;
		BitBlock r10000_10ffff_tmp201, byte_range_9d_a1, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp202, sequence_f0_91_92, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp203, sequence_f0_91_93, r10000_10ffff_tmp204;
		BitBlock byte_range_84_85, sequence_f0_91_93_adv, r10000_10ffff_tmp205;
		BitBlock r10000_10ffff_tmp206, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp207, r10000_10ffff_tmp208, byte_range_80_ae;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp209, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp210, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp211, sequence_f0_91_9a;
		BitBlock r10000_10ffff_tmp212, r10000_10ffff_tmp213, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp214, sequence_f0_91_a3, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp215, sequence_f0_91_ab, r10000_10ffff_tmp216;
		BitBlock byte_range_80_b8, sequence_f0_91_ab_adv, r10000_10ffff_tmp217;
		BitBlock sequence_f0_92, r10000_10ffff_tmp218, sequence_f0_92_byte_range_80_8d;
		BitBlock r10000_10ffff_tmp219, sequence_f0_92_byte_range_80_8d_sfx;
		BitBlock sequence_f0_92_8e, sequence_f0_92_adv, sequence_f0_92_8e_adv;
		BitBlock r10000_10ffff_tmp220, sequence_f0_93, r10000_10ffff_tmp221;
		BitBlock sequence_f0_93_byte_range_80_8f, r10000_10ffff_tmp222;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, sequence_f0_93_90;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90_adv, r10000_10ffff_tmp223;
		BitBlock sequence_f0_96, r10000_10ffff_tmp224, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp225, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_a8, sequence_f0_96_adv, sequence_f0_96_a8_adv;
		BitBlock r10000_10ffff_tmp226, sequence_f0_96_a9, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp227, sequence_f0_96_ab, r10000_10ffff_tmp228;
		BitBlock r10000_10ffff_tmp229, r10000_10ffff_tmp230, sequence_f0_96_ab_adv;
		BitBlock r10000_10ffff_tmp231, sequence_f0_96_ac, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp232, sequence_f0_96_ad, r10000_10ffff_tmp233;
		BitBlock r10000_10ffff_tmp234, byte_range_a3_b7, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp235, r10000_10ffff_tmp236, r10000_10ffff_tmp237;
		BitBlock sequence_f0_96_ae, sequence_f0_96_ae_adv, r10000_10ffff_tmp238;
		BitBlock sequence_f0_96_bc, sequence_f0_96_bc_adv, r10000_10ffff_tmp239;
		BitBlock sequence_f0_96_bd, r10000_10ffff_tmp240, sequence_f0_96_bd_adv;
		BitBlock r10000_10ffff_tmp241, r10000_10ffff_tmp242, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp243, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp244, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp245, sequence_f0_9b_b1;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp246, r10000_10ffff_tmp247;
		BitBlock byte_range_b0_bc, r10000_10ffff_tmp248, sequence_f0_9b_b2;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp249, byte_range_90_99;
		BitBlock r10000_10ffff_tmp250, sequence_f0_9e, r10000_10ffff_tmp251;
		BitBlock byte_range_a0_a2, r10000_10ffff_tmp252;
		BitBlock sequence_f0_9e_byte_range_a0_a2, r10000_10ffff_tmp253;
		BitBlock sequence_f0_9e_byte_range_a0_a2_sfx, sequence_f0_9e_a3;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_a3_adv, r10000_10ffff_tmp254;
		BitBlock sequence_f0_9e_b8, sequence_f0_9e_b8_adv, r10000_10ffff_tmp255;
		BitBlock byte_range_85_9f, r10000_10ffff_tmp256, r10000_10ffff_tmp257;
		BitBlock byte_range_a1_a2, r10000_10ffff_tmp258, r10000_10ffff_tmp259;
		BitBlock r10000_10ffff_tmp260, r10000_10ffff_tmp261, r10000_10ffff_tmp262;
		BitBlock byte_range_a9_b2, r10000_10ffff_tmp263, byte_range_b4_b7;
		BitBlock r10000_10ffff_tmp264, r10000_10ffff_tmp265, r10000_10ffff_tmp266;
		BitBlock sequence_f0_9e_b9, sequence_f0_9e_b9_adv, r10000_10ffff_tmp267;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, r10000_10ffff_tmp270;
		BitBlock r10000_10ffff_tmp271, r10000_10ffff_tmp272, byte_range_91_92;
		BitBlock r10000_10ffff_tmp273, r10000_10ffff_tmp274, byte_97;
		BitBlock r10000_10ffff_tmp275, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock r10000_10ffff_tmp278, r10000_10ffff_tmp279, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, r10000_10ffff_tmp283;
		BitBlock byte_range_a7_aa, r10000_10ffff_tmp284, r10000_10ffff_tmp285;
		BitBlock byte_range_ac_b2, r10000_10ffff_tmp286, r10000_10ffff_tmp287;
		BitBlock r10000_10ffff_tmp288, byte_range_b9_bc, r10000_10ffff_tmp289;
		BitBlock r10000_10ffff_tmp290, sequence_f0_9e_ba, byte_range_80_89;
		BitBlock sequence_f0_9e_ba_adv, r10000_10ffff_tmp291, r10000_10ffff_tmp292;
		BitBlock r10000_10ffff_tmp293, byte_range_8b_9b, r10000_10ffff_tmp294;
		BitBlock r10000_10ffff_tmp295, byte_range_a5_a9, r10000_10ffff_tmp296;
		BitBlock byte_range_ab_bb, r10000_10ffff_tmp297, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp298;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp299;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa;
		BitBlock r10000_10ffff_tmp300, sequence_f0_aa_byte_range_80_9a;
		BitBlock r10000_10ffff_tmp301, sequence_f0_aa_byte_range_80_9a_sfx;
		BitBlock sequence_f0_aa_9b, sequence_f0_aa_adv, sequence_f0_aa_9b_adv;
		BitBlock r10000_10ffff_tmp302, r10000_10ffff_tmp303, r10000_10ffff_tmp304;
		BitBlock byte_range_9c_bf, sequence_f0_aa_byte_range_9c_bf;
		BitBlock r10000_10ffff_tmp305, sequence_f0_aa_byte_range_9c_bf_sfx;
		BitBlock sequence_f0_ab, byte_range_80_9b, r10000_10ffff_tmp306;
		BitBlock sequence_f0_ab_byte_range_80_9b, r10000_10ffff_tmp307;
		BitBlock sequence_f0_ab_byte_range_80_9b_sfx, sequence_f0_ab_9c;
		BitBlock sequence_f0_ab_adv, r10000_10ffff_tmp308, r10000_10ffff_tmp309;
		BitBlock sequence_f0_ab_9c_adv, r10000_10ffff_tmp310, r10000_10ffff_tmp311;
		BitBlock byte_range_9d_9f, sequence_f0_ab_byte_range_9d_9f;
		BitBlock r10000_10ffff_tmp312, sequence_f0_ab_byte_range_9d_9f_sfx;
		BitBlock sequence_f0_ab_a0, sequence_f0_ab_a0_adv, r10000_10ffff_tmp313;
		BitBlock sequence_f0_af, r10000_10ffff_tmp314, sequence_f0_af_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp315, sequence_f0_af_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp316;




        struct_gc_Lo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 257))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 15))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp9, r80_7ff_tmp4);
            byte_aa = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_aa);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp6, r80_7ff_tmp12);
            byte_ba = simd_and(r80_7ff_tmp13, r80_7ff_tmp10);
            r80_7ff_tmp14 = simd_and(byte_c2_adv, byte_ba);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r80_7ff_tmp14);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 4))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 4))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(r80_7ff_tmp9, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(1), r100_2ff_tmp7));
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp7, byte_range_80_8f);
                r100_2ff_tmp9 = simd_or(byte_range_c4_c8, r100_2ff_tmp8);
                if ((bitblock::any(r100_2ff_tmp9) || carryQ.CarryTest(2, 2))) {
                  r100_24f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp2 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(r100_24f_tmp1, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  r100_24f_tmp3 = simd_or(byte_range_c6_c8, r100_2ff_tmp8);
                  if ((bitblock::any(r100_24f_tmp3) || carryQ.CarryTest(2, 2))) {
                    r180_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                    r180_24f_tmp2 = simd_and(r180_24f_tmp1, r80_7ff_tmp4);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp2);
                    r180_24f_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp4 = simd_and(r80_7ff_tmp9, r180_24f_tmp3);
                    byte_bb = simd_and(r80_7ff_tmp13, r180_24f_tmp4);
                    carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(2), byte_c6_adv));
                    r180_24f_tmp5 = simd_and(byte_c6_adv, byte_bb);
                    struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r180_24f_tmp5);
                    r180_24f_tmp6 = simd_and(r180_24f_tmp1, r180_24f_tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp6);
                    byte_range_80_83 = simd_andc(byte_range_80_8f, r80_7ff_tmp3);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(3), byte_c7_adv));
                    r180_24f_tmp7 = simd_and(byte_c7_adv, byte_range_80_83);
                    struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r180_24f_tmp7);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(2, 2);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp6, r80_7ff_tmp1);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp7, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp6, r80_7ff_tmp12);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(4), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp10, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  r250_2af_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r250_2af_tmp2 = simd_and(r80_7ff_tmp6, r250_2af_tmp1);
                  r250_2af_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r250_2af_tmp4 = simd_andc(r250_2af_tmp3, r100_2ff_tmp1);
                  byte_94 = simd_and(r250_2af_tmp2, r250_2af_tmp4);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp5 = simd_and(byte_ca_adv, byte_94);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r250_2af_tmp5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp16 = simd_and(byte_range_c0_ff, r80_7ff_tmp15);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp16, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(5, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_and(r400_5ff_tmp1, r80_7ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp16, r400_5ff_tmp2);
              byte_range_90_bf = simd_and(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(5), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp1, r400_5ff_tmp5);
              byte_d7 = simd_and(r80_7ff_tmp16, r400_5ff_tmp6);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp4, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(6, 1))) {
                r590_5ff_tmp1 = simd_or(basis_bits.bit_5, r400_5ff_tmp5);
                r590_5ff_tmp2 = simd_and(basis_bits.bit_4, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_or(basis_bits.bit_3, r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_not(r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp4), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                byte_range_90_aa = simd_and(r80_7ff_tmp6, r590_5ff_tmp5);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(6), byte_d7_adv));
                r590_5ff_tmp6 = simd_and(byte_d7_adv, byte_range_90_aa);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r590_5ff_tmp6);
                r590_5ff_tmp7 = simd_andc(r80_7ff_tmp13, r80_7ff_tmp3);
                byte_range_b0_b2 = simd_andc(r590_5ff_tmp7, r400_5ff_tmp5);
                r590_5ff_tmp8 = simd_and(byte_d7_adv, byte_range_b0_b2);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r590_5ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 2);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp16, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(7, 4))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp9, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp16, r600_6ff_tmp2);
              byte_range_a0_bf = simd_and(r80_7ff_tmp6, basis_bits.bit_2);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(7), byte_d8_adv));
              r600_6ff_tmp3 = simd_and(byte_d8_adv, byte_range_a0_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp3);
              r600_6ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp5 = simd_and(r80_7ff_tmp9, r600_6ff_tmp4);
              byte_d9 = simd_and(r80_7ff_tmp16, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp8 = simd_or(basis_bits.bit_5, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_not(r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp9), simd_andc(r600_6ff_tmp10, basis_bits.bit_4));
              byte_range_81_8a = simd_and(r600_6ff_tmp6, r600_6ff_tmp11);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(8), byte_d9_adv));
              r600_6ff_tmp12 = simd_and(byte_d9_adv, byte_range_81_8a);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp14 = simd_and(r600_6ff_tmp13, basis_bits.bit_6);
              byte_range_ae_af = simd_and(r80_7ff_tmp8, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(byte_d9_adv, byte_range_ae_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_or(basis_bits.bit_4, r600_6ff_tmp10);
              byte_range_b1_bf = simd_and(r80_7ff_tmp13, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_and(byte_d9_adv, byte_range_b1_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp17);
              byte_da = simd_and(r80_7ff_tmp16, r80_7ff_tmp10);
              byte_range_80_bf = r80_7ff_tmp6;
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(9), byte_da_adv));
              r600_6ff_tmp18 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_and(r80_7ff_tmp9, r600_6ff_tmp7);
              byte_db = simd_and(r80_7ff_tmp16, r600_6ff_tmp19);
              r600_6ff_tmp20 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp21 = simd_and(basis_bits.bit_3, r80_7ff_tmp3);
              byte_range_80_93 = simd_andc(r600_6ff_tmp20, r600_6ff_tmp21);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(10), byte_db_adv));
              r600_6ff_tmp22 = simd_and(byte_db_adv, byte_range_80_93);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp22);
              r600_6ff_tmp23 = simd_and(byte_range_80_bf, r80_7ff_tmp15);
              r600_6ff_tmp24 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r600_6ff_tmp25 = simd_and(r600_6ff_tmp24, r600_6ff_tmp4);
              byte_95 = simd_and(r600_6ff_tmp23, r600_6ff_tmp25);
              r600_6ff_tmp26 = simd_and(byte_db_adv, byte_95);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp26);
              r600_6ff_tmp27 = simd_and(byte_range_80_bf, r80_7ff_tmp7);
              r600_6ff_tmp28 = simd_and(byte_db_adv, byte_range_ae_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp28);
              r600_6ff_tmp29 = simd_and(byte_range_80_bf, r80_7ff_tmp12);
              r600_6ff_tmp30 = simd_and(r600_6ff_tmp29, basis_bits.bit_4);
              r600_6ff_tmp31 = simd_not(r600_6ff_tmp1);
              r600_6ff_tmp32 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp31), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_ba_bc = simd_and(r600_6ff_tmp30, r600_6ff_tmp32);
              r600_6ff_tmp33 = simd_and(byte_db_adv, byte_range_ba_bc);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp33);
              r600_6ff_tmp34 = simd_and(r600_6ff_tmp13, r600_6ff_tmp7);
              byte_bf = simd_and(r600_6ff_tmp29, r600_6ff_tmp34);
              r600_6ff_tmp35 = simd_and(byte_db_adv, byte_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r600_6ff_tmp35);
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 4);
            }
            r80_7ff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp18 = simd_andc(r80_7ff_tmp17, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp16, r80_7ff_tmp18);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(11, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp17, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp16, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp17, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp16, r700_77f_tmp4);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(11), r700_77f_tmp5));
              r700_77f_tmp6 = simd_and(r700_77f_tmp5, byte_range_80_8f);
              r700_77f_tmp7 = simd_or(byte_dc, r700_77f_tmp6);
              if ((bitblock::any(r700_77f_tmp7) || carryQ.CarryTest(12, 1))) {
                r700_74f_tmp1 = simd_and(r80_7ff_tmp6, r80_7ff_tmp15);
                r700_74f_tmp2 = simd_or(r80_7ff_tmp3, r700_77f_tmp1);
                byte_90 = simd_andc(r700_74f_tmp1, r700_74f_tmp2);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(12), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_90);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_not(basis_bits.bit_3);
                r700_74f_tmp5 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r700_74f_tmp6 = simd_and(basis_bits.bit_3, r700_74f_tmp5);
                r700_74f_tmp7 = simd_or(simd_and(basis_bits.bit_2, r700_74f_tmp4), simd_andc(r700_74f_tmp6, basis_bits.bit_2));
                byte_range_92_af = simd_and(r80_7ff_tmp6, r700_74f_tmp7);
                r700_74f_tmp8 = simd_and(byte_dc_adv, byte_range_92_af);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r700_74f_tmp8);
                r700_74f_tmp9 = simd_and(byte_range_80_8f, r80_7ff_tmp17);
                byte_range_8d_8f = simd_and(r700_74f_tmp9, r700_77f_tmp1);
                byte_dd_adv = r700_77f_tmp5;
                r700_74f_tmp10 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r700_74f_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp6, r80_7ff_tmp1);
              r700_77f_tmp8 = simd_and(r700_77f_tmp5, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp8)) {
                byte_dd_adv = r700_77f_tmp5;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 2);
            }
            r80_7ff_tmp19 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp16, r80_7ff_tmp19);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(13, 2))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp17, r80_7ff_tmp4);
              byte_de = simd_and(r80_7ff_tmp16, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(13, 1))) {
                r780_7bf_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_3, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_2, r780_7bf_tmp3);
                byte_range_80_a5 = simd_andc(r80_7ff_tmp6, r780_7bf_tmp4);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(13), byte_de_adv));
                r780_7bf_tmp5 = simd_and(byte_de_adv, byte_range_80_a5);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r780_7bf_tmp5);
                r780_7bf_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r780_7bf_tmp7 = simd_andc(r780_7bf_tmp6, r80_7ff_tmp3);
                byte_b1 = simd_and(r80_7ff_tmp13, r780_7bf_tmp7);
                r780_7bf_tmp8 = simd_and(byte_de_adv, byte_b1);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r780_7bf_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 1);
              }
              r780_7ff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp3 = simd_and(r80_7ff_tmp17, r780_7ff_tmp2);
              byte_df = simd_and(r80_7ff_tmp16, r780_7ff_tmp3);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(14, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_5, r780_7ff_tmp2);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_not(r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp6 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp5);
                r7c0_7ff_tmp7 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp6);
                r7c0_7ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r7c0_7ff_tmp4), simd_andc(r7c0_7ff_tmp7, basis_bits.bit_2));
                byte_range_8a_aa = simd_and(r80_7ff_tmp6, r7c0_7ff_tmp8);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(14), byte_df_adv));
                r7c0_7ff_tmp9 = simd_and(byte_df_adv, byte_range_8a_aa);
                struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r7c0_7ff_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 15);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(15, 147))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(15), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(16, 88))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(16, 70))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(16, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(16), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_4, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  byte_range_80_95 = simd_andc(r800_fff_tmp3, r800_fff_tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(17), sequence_e0_a0_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a0_adv, byte_range_80_95);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp9 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp9);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_4, r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_3, r800_fff_tmp11);
                  byte_range_80_98 = simd_andc(r800_fff_tmp3, r800_fff_tmp12);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(18), sequence_e0_a1_adv));
                  r800_fff_tmp13 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp15 = simd_andc(r800_fff_tmp14, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp15);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp16 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp18 = simd_or(r800_ffff_tmp1, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_3, r800_fff_tmp18);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp16, r800_fff_tmp19);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(19), sequence_e0_a2_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp20);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp21 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp22 = simd_and(basis_bits.bit_4, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_3, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_not(r800_fff_tmp23);
                  r800_fff_tmp25 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp24), simd_andc(r800_fff_tmp25, basis_bits.bit_2));
                  byte_range_84_b9 = simd_and(r800_ffff_tmp5, r800_fff_tmp26);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(20), sequence_e0_a4_adv));
                  r800_fff_tmp27 = simd_and(sequence_e0_a4_adv, byte_range_84_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp27);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp29 = simd_and(r800_ffff_tmp5, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp31 = simd_and(r800_fff_tmp30, r800_fff_tmp8);
                  byte_bd = simd_and(r800_fff_tmp29, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_and(sequence_e0_a4_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp33);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp34 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp35 = simd_and(r800_ffff_tmp5, r800_fff_tmp34);
                  byte_90 = simd_andc(r800_fff_tmp35, r800_1fff_tmp1);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(21), sequence_e0_a5_adv));
                  r800_fff_tmp36 = simd_and(sequence_e0_a5_adv, byte_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp38 = simd_not(r800_fff_tmp37);
                  r800_fff_tmp39 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp38), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  byte_range_98_a1 = simd_and(r800_ffff_tmp5, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_a5_adv, byte_range_98_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_or(basis_bits.bit_4, r800_fff_tmp21);
                  byte_range_b2_bf = simd_and(r800_fff_tmp29, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(sequence_e0_a5_adv, byte_range_b2_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(r800_ffff_tmp2, r800_fff_tmp14);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp43);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp44 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp45 = simd_andc(r800_ffff_tmp5, r800_fff_tmp44);
                  byte_80 = simd_andc(r800_fff_tmp45, r800_1fff_tmp1);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(22), sequence_e0_a6_adv));
                  r800_fff_tmp46 = simd_and(sequence_e0_a6_adv, byte_80);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp48 = simd_xor(basis_bits.bit_4, r800_fff_tmp47);
                  byte_range_85_8c = simd_and(r800_fff_tmp45, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_a6_adv, byte_range_85_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp51 = simd_and(r800_fff_tmp30, r800_fff_tmp17);
                  r800_fff_tmp52 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp50), simd_andc(r800_fff_tmp51, basis_bits.bit_3));
                  byte_range_8f_90 = simd_and(r800_fff_tmp3, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(sequence_e0_a6_adv, byte_range_8f_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_or(basis_bits.bit_3, r800_fff_tmp11);
                  r800_fff_tmp55 = simd_not(r800_fff_tmp54);
                  r800_fff_tmp56 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp55), simd_andc(r800_fff_tmp19, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_a6_adv, byte_range_93_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp50), simd_andc(r800_fff_tmp22, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp16, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(sequence_e0_a6_adv, byte_range_aa_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp59);
                  byte_b2 = simd_and(r800_fff_tmp29, r800_fff_tmp15);
                  r800_fff_tmp60 = simd_and(sequence_e0_a6_adv, byte_b2);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_not(r800_fff_tmp21);
                  r800_fff_tmp62 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp61), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  byte_range_b6_b9 = simd_and(r800_fff_tmp29, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_and(sequence_e0_a6_adv, byte_range_b6_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp63);
                  r800_fff_tmp64 = simd_and(sequence_e0_a6_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_and(r800_ffff_tmp2, r800_fff_tmp17);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp65);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp66 = simd_and(r800_fff_tmp30, r800_fff_tmp14);
                  byte_8e = simd_and(r800_fff_tmp45, r800_fff_tmp66);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(23), sequence_e0_a7_adv));
                  r800_fff_tmp67 = simd_and(sequence_e0_a7_adv, byte_8e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_andc(r800_fff_tmp30, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp35, r800_fff_tmp68);
                  r800_fff_tmp69 = simd_and(sequence_e0_a7_adv, byte_range_9c_9d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(basis_bits.bit_3, r800_fff_tmp51);
                  r800_fff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp38), simd_andc(r800_fff_tmp70, basis_bits.bit_2));
                  byte_range_9f_a1 = simd_and(r800_ffff_tmp5, r800_fff_tmp71);
                  r800_fff_tmp72 = simd_and(sequence_e0_a7_adv, byte_range_9f_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp72);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp29, r800_4dff_tmp1);
                  r800_fff_tmp73 = simd_and(sequence_e0_a7_adv, byte_range_b0_b1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp73);
                  r800_fff_tmp74 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp75 = simd_andc(r800_fff_tmp74, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp75);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp76 = simd_or(basis_bits.bit_5, r800_fff_tmp17);
                  r800_fff_tmp77 = simd_not(r800_fff_tmp76);
                  r800_fff_tmp78 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp77), simd_andc(r800_fff_tmp47, basis_bits.bit_4));
                  byte_range_85_8a = simd_and(r800_fff_tmp45, r800_fff_tmp78);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(24), sequence_e0_a8_adv));
                  r800_fff_tmp79 = simd_and(sequence_e0_a8_adv, byte_range_85_8a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp79);
                  r800_fff_tmp80 = simd_and(sequence_e0_a8_adv, byte_range_8f_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(sequence_e0_a8_adv, byte_range_93_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_and(sequence_e0_a8_adv, byte_range_aa_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp82);
                  r800_fff_tmp83 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp29, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_a8_adv, byte_range_b2_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_and(r800_fff_tmp29, r800_ffff_tmp2);
                  r800_fff_tmp86 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b5_b6 = simd_and(r800_fff_tmp85, r800_fff_tmp86);
                  r800_fff_tmp87 = simd_and(sequence_e0_a8_adv, byte_range_b5_b6);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp87);
                  r800_fff_tmp88 = simd_andc(r800_fff_tmp74, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r800_fff_tmp29, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_a8_adv, byte_range_b8_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp89);
                  r800_fff_tmp90 = simd_and(r800_fff_tmp74, r800_fff_tmp8);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp90);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp91 = simd_and(r800_fff_tmp35, basis_bits.bit_4);
                  r800_fff_tmp92 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_99_9c = simd_and(r800_fff_tmp91, r800_fff_tmp92);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(25), sequence_e0_a9_adv));
                  r800_fff_tmp93 = simd_and(sequence_e0_a9_adv, byte_range_99_9c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp93);
                  byte_9e = simd_and(r800_fff_tmp35, r800_fff_tmp66);
                  r800_fff_tmp94 = simd_and(sequence_e0_a9_adv, byte_9e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp94);
                  r800_fff_tmp95 = simd_andc(r800_fff_tmp29, basis_bits.bit_4);
                  r800_fff_tmp96 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp97 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp96), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_b2_b4 = simd_and(r800_fff_tmp95, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_and(sequence_e0_a9_adv, byte_range_b2_b4);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp98);
                  r800_fff_tmp99 = simd_and(r800_fff_tmp74, r800_fff_tmp14);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp99);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp100 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp101 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp100), simd_andc(r800_fff_tmp47, basis_bits.bit_4));
                  byte_range_85_8d = simd_and(r800_fff_tmp45, r800_fff_tmp101);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(26), sequence_e0_aa_adv));
                  r800_fff_tmp102 = simd_and(sequence_e0_aa_adv, byte_range_85_8d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp104 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp103), simd_andc(r800_fff_tmp51, basis_bits.bit_3));
                  byte_range_8f_91 = simd_and(r800_fff_tmp3, r800_fff_tmp104);
                  r800_fff_tmp105 = simd_and(sequence_e0_aa_adv, byte_range_8f_91);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(sequence_e0_aa_adv, byte_range_93_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(sequence_e0_aa_adv, byte_range_aa_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp107);
                  r800_fff_tmp108 = simd_and(sequence_e0_aa_adv, byte_range_b2_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp61), simd_andc(r800_fff_tmp47, basis_bits.bit_4));
                  byte_range_b5_b9 = simd_and(r800_fff_tmp29, r800_fff_tmp109);
                  r800_fff_tmp110 = simd_and(sequence_e0_aa_adv, byte_range_b5_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_and(sequence_e0_aa_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(r800_fff_tmp74, r800_fff_tmp17);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp112);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(27), sequence_e0_ab_adv));
                  r800_fff_tmp113 = simd_and(sequence_e0_ab_adv, byte_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp113);
                  byte_range_a0_a1 = simd_andc(r800_fff_tmp1, r800_4dff_tmp1);
                  r800_fff_tmp114 = simd_and(sequence_e0_ab_adv, byte_range_a0_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp114);
                  r800_fff_tmp115 = simd_andc(r800_fff_tmp30, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp115);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(28), sequence_e0_ac_adv));
                  r800_fff_tmp116 = simd_and(sequence_e0_ac_adv, byte_range_85_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp116);
                  r800_fff_tmp117 = simd_and(sequence_e0_ac_adv, byte_range_8f_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(sequence_e0_ac_adv, byte_range_93_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_ac_adv, byte_range_aa_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_ac_adv, byte_range_b2_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp120);
                  r800_fff_tmp121 = simd_and(sequence_e0_ac_adv, byte_range_b5_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_and(sequence_e0_ac_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp122);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp31);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(29), sequence_e0_ad_adv));
                  r800_fff_tmp123 = simd_and(sequence_e0_ad_adv, byte_range_9c_9d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp123);
                  r800_fff_tmp124 = simd_and(sequence_e0_ad_adv, byte_range_9f_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp124);
                  byte_b1 = simd_and(r800_fff_tmp29, r800_fff_tmp9);
                  r800_fff_tmp125 = simd_and(sequence_e0_ad_adv, byte_b1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp125);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp66);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp126 = simd_andc(r800_fff_tmp17, r800_ffff_tmp1);
                  byte_83 = simd_and(r800_fff_tmp45, r800_fff_tmp126);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(30), sequence_e0_ae_adv));
                  r800_fff_tmp127 = simd_and(sequence_e0_ae_adv, byte_83);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp127);
                  r800_fff_tmp128 = simd_and(sequence_e0_ae_adv, byte_range_85_8a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp30, basis_bits.bit_6);
                  r800_fff_tmp130 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp50), simd_andc(r800_fff_tmp129, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp3, r800_fff_tmp130);
                  r800_fff_tmp131 = simd_and(sequence_e0_ae_adv, byte_range_8e_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp131);
                  r800_fff_tmp132 = simd_andc(r800_fff_tmp35, basis_bits.bit_4);
                  r800_fff_tmp133 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_92_95 = simd_and(r800_fff_tmp132, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_and(sequence_e0_ae_adv, byte_range_92_95);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp35, r800_fff_tmp74);
                  byte_range_99_9a = simd_and(r800_fff_tmp135, r800_fff_tmp86);
                  r800_fff_tmp136 = simd_and(sequence_e0_ae_adv, byte_range_99_9a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp136);
                  byte_9c = simd_and(r800_fff_tmp35, r800_fff_tmp115);
                  r800_fff_tmp137 = simd_and(sequence_e0_ae_adv, byte_9c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp137);
                  byte_range_9e_9f = simd_and(r800_fff_tmp35, r800_fff_tmp129);
                  r800_fff_tmp138 = simd_and(sequence_e0_ae_adv, byte_range_9e_9f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp138);
                  r800_fff_tmp139 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp140 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp96), simd_andc(r800_fff_tmp17, basis_bits.bit_5));
                  byte_range_a3_a4 = simd_and(r800_fff_tmp139, r800_fff_tmp140);
                  r800_fff_tmp141 = simd_and(sequence_e0_ae_adv, byte_range_a3_a4);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_and(r800_fff_tmp1, r800_fff_tmp74);
                  byte_range_a8_aa = simd_andc(r800_fff_tmp142, r800_fff_tmp17);
                  r800_fff_tmp143 = simd_and(sequence_e0_ae_adv, byte_range_a8_aa);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp143);
                  r800_fff_tmp144 = simd_not(r800_fff_tmp22);
                  r800_fff_tmp145 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp144), simd_andc(r800_fff_tmp129, basis_bits.bit_3));
                  byte_range_ae_b9 = simd_and(r800_fff_tmp16, r800_fff_tmp145);
                  r800_fff_tmp146 = simd_and(sequence_e0_ae_adv, byte_range_ae_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp146);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp51);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(31), sequence_e0_af_adv));
                  r800_fff_tmp147 = simd_and(sequence_e0_af_adv, byte_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp147);
                  byte_b0 = simd_andc(r800_fff_tmp29, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(32), sequence_e0_b0_adv));
                  r800_fff_tmp148 = simd_and(sequence_e0_b0_adv, byte_range_85_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp148);
                  r800_fff_tmp149 = simd_and(sequence_e0_b0_adv, byte_range_8e_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp149);
                  r800_fff_tmp150 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp151 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp55), simd_andc(r800_fff_tmp150, basis_bits.bit_2));
                  byte_range_92_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(sequence_e0_b0_adv, byte_range_92_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp152);
                  r800_fff_tmp153 = simd_xor(basis_bits.bit_3, r800_fff_tmp22);
                  byte_range_aa_b9 = simd_and(r800_fff_tmp16, r800_fff_tmp153);
                  r800_fff_tmp154 = simd_and(sequence_e0_b0_adv, byte_range_aa_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp154);
                  r800_fff_tmp155 = simd_and(sequence_e0_b0_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp155);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  byte_range_98_99 = simd_and(r800_fff_tmp35, r800_fff_tmp88);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(33), sequence_e0_b1_adv));
                  r800_fff_tmp156 = simd_and(sequence_e0_b1_adv, byte_range_98_99);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp156);
                  r800_fff_tmp157 = simd_and(sequence_e0_b1_adv, byte_range_a0_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp157);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(34), sequence_e0_b2_adv));
                  r800_fff_tmp158 = simd_and(sequence_e0_b2_adv, byte_range_85_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp158);
                  r800_fff_tmp159 = simd_and(sequence_e0_b2_adv, byte_range_8e_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp159);
                  r800_fff_tmp160 = simd_and(sequence_e0_b2_adv, byte_range_92_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp160);
                  r800_fff_tmp161 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp162 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp161), simd_andc(r800_fff_tmp22, basis_bits.bit_3));
                  byte_range_aa_b3 = simd_and(r800_fff_tmp16, r800_fff_tmp162);
                  r800_fff_tmp163 = simd_and(sequence_e0_b2_adv, byte_range_aa_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp163);
                  r800_fff_tmp164 = simd_and(sequence_e0_b2_adv, byte_range_b5_b9);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp164);
                  r800_fff_tmp165 = simd_and(sequence_e0_b2_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp165);
                  byte_b3 = simd_and(r800_fff_tmp29, r800_fff_tmp126);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(35), sequence_e0_b3_adv));
                  r800_fff_tmp166 = simd_and(sequence_e0_b3_adv, byte_9e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp166);
                  r800_fff_tmp167 = simd_and(sequence_e0_b3_adv, byte_range_a0_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp167);
                  r800_fff_tmp168 = simd_andc(r800_fff_tmp29, r800_ffff_tmp1);
                  byte_range_b1_b2 = simd_and(r800_fff_tmp168, r800_fff_tmp86);
                  r800_fff_tmp169 = simd_and(sequence_e0_b3_adv, byte_range_b1_b2);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp169);
                  byte_b4 = simd_and(r800_fff_tmp29, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(36), sequence_e0_b4_adv));
                  r800_fff_tmp170 = simd_and(sequence_e0_b4_adv, byte_range_85_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp170);
                  r800_fff_tmp171 = simd_and(sequence_e0_b4_adv, byte_range_8e_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp171);
                  r800_fff_tmp172 = simd_and(basis_bits.bit_4, r800_fff_tmp76);
                  r800_fff_tmp173 = simd_and(basis_bits.bit_3, r800_fff_tmp172);
                  r800_fff_tmp174 = simd_not(r800_fff_tmp173);
                  r800_fff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp174), simd_andc(r800_fff_tmp150, basis_bits.bit_2));
                  byte_range_92_ba = simd_and(r800_ffff_tmp5, r800_fff_tmp175);
                  r800_fff_tmp176 = simd_and(sequence_e0_b4_adv, byte_range_92_ba);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp176);
                  r800_fff_tmp177 = simd_and(sequence_e0_b4_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp177);
                  byte_b5 = simd_and(r800_fff_tmp29, r800_fff_tmp33);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(37), sequence_e0_b5_adv));
                  r800_fff_tmp178 = simd_and(sequence_e0_b5_adv, byte_8e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp178);
                  r800_fff_tmp179 = simd_and(sequence_e0_b5_adv, byte_range_a0_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp179);
                  r800_fff_tmp180 = simd_and(r800_fff_tmp29, basis_bits.bit_4);
                  byte_range_ba_bf = simd_and(r800_fff_tmp180, r800_fff_tmp21);
                  r800_fff_tmp181 = simd_and(sequence_e0_b5_adv, byte_range_ba_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp181);
                  byte_b6 = simd_and(r800_fff_tmp29, r800_fff_tmp43);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp182 = simd_and(basis_bits.bit_5, r800_fff_tmp17);
                  r800_fff_tmp183 = simd_or(basis_bits.bit_4, r800_fff_tmp182);
                  r800_fff_tmp184 = simd_not(r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(basis_bits.bit_4, r800_fff_tmp47);
                  r800_fff_tmp186 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp184), simd_andc(r800_fff_tmp185, basis_bits.bit_3));
                  byte_range_85_96 = simd_and(r800_fff_tmp3, r800_fff_tmp186);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(38), sequence_e0_b6_adv));
                  r800_fff_tmp187 = simd_and(sequence_e0_b6_adv, byte_range_85_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp187);
                  r800_fff_tmp188 = simd_not(r800_fff_tmp150);
                  r800_fff_tmp189 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp188), simd_andc(r800_fff_tmp23, basis_bits.bit_2));
                  byte_range_9a_b1 = simd_and(r800_ffff_tmp5, r800_fff_tmp189);
                  r800_fff_tmp190 = simd_and(sequence_e0_b6_adv, byte_range_9a_b1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp190);
                  r800_fff_tmp191 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp192 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp191), simd_andc(r800_fff_tmp76, basis_bits.bit_4));
                  byte_range_b3_bb = simd_and(r800_fff_tmp29, r800_fff_tmp192);
                  r800_fff_tmp193 = simd_and(sequence_e0_b6_adv, byte_range_b3_bb);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp193);
                  r800_fff_tmp194 = simd_and(sequence_e0_b6_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp194);
                  byte_b7 = simd_and(r800_fff_tmp29, r800_fff_tmp65);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp195 = simd_andc(r800_fff_tmp45, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r800_fff_tmp195, r800_fff_tmp182);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(39), sequence_e0_b7_adv));
                  r800_fff_tmp196 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp196);
                  byte_b8 = simd_and(r800_fff_tmp29, r800_fff_tmp75);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp197 = simd_and(basis_bits.bit_3, r800_1fff_tmp1);
                  r800_fff_tmp198 = simd_not(r800_fff_tmp197);
                  r800_fff_tmp199 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r800_fff_tmp200 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp198), simd_andc(r800_fff_tmp199, basis_bits.bit_2));
                  byte_range_81_b0 = simd_and(r800_ffff_tmp5, r800_fff_tmp200);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(40), sequence_e0_b8_adv));
                  r800_fff_tmp201 = simd_and(sequence_e0_b8_adv, byte_range_81_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp201);
                  r800_fff_tmp202 = simd_and(sequence_e0_b8_adv, byte_range_b2_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp202);
                  byte_b9 = simd_and(r800_fff_tmp29, r800_fff_tmp90);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  byte_range_80_85 = simd_andc(r800_fff_tmp195, r800_fff_tmp4);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(41), sequence_e0_b9_adv));
                  r800_fff_tmp203 = simd_and(sequence_e0_b9_adv, byte_range_80_85);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp203);
                  byte_ba = simd_and(r800_fff_tmp29, r800_fff_tmp99);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp204 = simd_andc(r800_fff_tmp45, r800_ffff_tmp1);
                  byte_range_81_82 = simd_and(r800_fff_tmp204, r800_fff_tmp86);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(42), sequence_e0_ba_adv));
                  r800_fff_tmp205 = simd_and(sequence_e0_ba_adv, byte_range_81_82);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp205);
                  byte_84 = simd_and(r800_fff_tmp45, r800_ffff_tmp4);
                  r800_fff_tmp206 = simd_and(sequence_e0_ba_adv, byte_84);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp206);
                  r800_fff_tmp207 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp208 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp207), simd_andc(r800_fff_tmp182, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp45, r800_fff_tmp208);
                  r800_fff_tmp209 = simd_and(sequence_e0_ba_adv, byte_range_87_88);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp209);
                  byte_8a = simd_and(r800_fff_tmp45, r800_fff_tmp99);
                  r800_fff_tmp210 = simd_and(sequence_e0_ba_adv, byte_8a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp210);
                  byte_8d = simd_and(r800_fff_tmp45, r800_fff_tmp31);
                  r800_fff_tmp211 = simd_and(sequence_e0_ba_adv, byte_8d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp211);
                  byte_range_94_97 = simd_and(r800_fff_tmp35, r800_ffff_tmp2);
                  r800_fff_tmp212 = simd_and(sequence_e0_ba_adv, byte_range_94_97);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp212);
                  byte_range_99_9f = simd_and(r800_fff_tmp91, r800_fff_tmp10);
                  r800_fff_tmp213 = simd_and(sequence_e0_ba_adv, byte_range_99_9f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp213);
                  r800_fff_tmp214 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  byte_range_a1_a3 = simd_and(r800_fff_tmp214, r800_ffff_tmp3);
                  r800_fff_tmp215 = simd_and(sequence_e0_ba_adv, byte_range_a1_a3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp215);
                  r800_fff_tmp216 = simd_and(sequence_e0_ba_adv, byte_a5);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp216);
                  r800_fff_tmp217 = simd_and(sequence_e0_ba_adv, byte_a7);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp217);
                  r800_fff_tmp218 = simd_and(r800_fff_tmp74, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r800_fff_tmp1, r800_fff_tmp218);
                  r800_fff_tmp219 = simd_and(sequence_e0_ba_adv, byte_range_aa_ab);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp219);
                  r800_fff_tmp220 = simd_and(r800_fff_tmp30, r800_ffff_tmp3);
                  r800_fff_tmp221 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp50), simd_andc(r800_fff_tmp220, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(r800_fff_tmp16, r800_fff_tmp221);
                  r800_fff_tmp222 = simd_and(sequence_e0_ba_adv, byte_range_ad_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp222);
                  r800_fff_tmp223 = simd_and(sequence_e0_ba_adv, byte_range_b2_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp223);
                  r800_fff_tmp224 = simd_and(sequence_e0_ba_adv, byte_bd);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp224);
                  byte_bb = simd_and(r800_fff_tmp29, r800_fff_tmp112);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  byte_range_80_84 = simd_andc(r800_fff_tmp195, r800_fff_tmp47);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(43), sequence_e0_bb_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_bb_adv, byte_range_80_84);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp225);
                  byte_range_9c_9f = simd_and(r800_fff_tmp35, r800_fff_tmp30);
                  r800_fff_tmp226 = simd_and(sequence_e0_bb_adv, byte_range_9c_9f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp226);
                  byte_bc = simd_and(r800_fff_tmp29, r800_fff_tmp115);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(44), sequence_e0_bc_adv));
                  r800_fff_tmp227 = simd_and(sequence_e0_bc_adv, byte_80);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp227);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_range_80_87 = r800_fff_tmp195;
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(45), sequence_e0_bd_adv));
                  r800_fff_tmp228 = simd_and(sequence_e0_bd_adv, byte_range_80_87);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp228);
                  r800_fff_tmp229 = simd_or(basis_bits.bit_3, r800_fff_tmp220);
                  r800_fff_tmp230 = simd_not(r800_fff_tmp229);
                  r800_fff_tmp231 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp230), simd_andc(r800_fff_tmp54, basis_bits.bit_2));
                  byte_range_89_ac = simd_and(r800_ffff_tmp5, r800_fff_tmp231);
                  r800_fff_tmp232 = simd_and(sequence_e0_bd_adv, byte_range_89_ac);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp232);
                  byte_be = simd_and(r800_fff_tmp29, r800_fff_tmp66);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp233 = simd_and(r800_fff_tmp45, basis_bits.bit_4);
                  byte_range_88_8c = simd_andc(r800_fff_tmp233, r800_fff_tmp47);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(46), sequence_e0_be_adv));
                  r800_fff_tmp234 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r800_fff_tmp234);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 31);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(47, 39))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(47), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_5, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_4, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_3, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_2, r1000_1fff_tmp7);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp8);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(48), sequence_e1_80_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_80_adv, byte_range_80_aa);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp4);
                  byte_bf = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_80_adv, byte_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp14);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_andc(r1000_1fff_tmp16, basis_bits.bit_4);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_90_95 = simd_andc(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(49), sequence_e1_81_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_81_adv, byte_range_90_95);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp16, basis_bits.bit_4);
                  r1000_1fff_tmp21 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9d = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_81_adv, byte_range_9a_9d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a1 = simd_and(r1000_1fff_tmp23, r800_1fff_tmp3);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_81_adv, byte_a1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp23, r800_ffff_tmp2);
                  r1000_1fff_tmp26 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_a5_a6 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_81_adv, byte_range_a5_a6);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp29 = simd_not(r800_1fff_tmp1);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp12, basis_bits.bit_6);
                  r1000_1fff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp29), simd_andc(r1000_1fff_tmp30, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r1000_1fff_tmp28, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_81_adv, byte_range_ae_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp34 = simd_or(basis_bits.bit_4, r1000_1fff_tmp33);
                  byte_range_b5_bf = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(sequence_e1_81_adv, byte_range_b5_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp37 = simd_andc(r1000_1fff_tmp36, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp37);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(50), sequence_e1_82_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_82_adv, byte_range_80_81);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp36);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_and(sequence_e1_82_adv, byte_8e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp40);
                  r1000_1fff_tmp41 = simd_andc(r1000_1fff_tmp4, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp41);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp42 = simd_and(basis_bits.bit_3, r1000_1fff_tmp6);
                  r1000_1fff_tmp43 = simd_not(r1000_1fff_tmp42);
                  r1000_1fff_tmp44 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp43), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ba = simd_and(r800_ffff_tmp5, r1000_1fff_tmp44);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(51), sequence_e1_83_adv));
                  r1000_1fff_tmp45 = simd_and(sequence_e1_83_adv, byte_range_90_ba);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp45);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp12);
                  byte_range_bd_bf = simd_and(r1000_1fff_tmp46, r800_ffff_tmp3);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_83_adv, byte_range_bd_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp47);
                  r1000_1fff_tmp48 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp49 = simd_not(r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp49), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp50);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(52), r1000_1fff_tmp51));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp51, byte_range_80_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp52 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp53, r800_1fff_tmp2);
                  byte_89 = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp54);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp55 = simd_and(basis_bits.bit_4, r1000_1fff_tmp48);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp52, r1000_1fff_tmp55);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(53), sequence_e1_89_adv));
                  r1000_1fff_tmp56 = simd_and(sequence_e1_89_adv, byte_range_80_88);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp56);
                  r1000_1fff_tmp57 = simd_and(r1000_1fff_tmp52, basis_bits.bit_4);
                  byte_range_8a_8d = simd_and(r1000_1fff_tmp57, r1000_1fff_tmp21);
                  r1000_1fff_tmp58 = simd_and(sequence_e1_89_adv, byte_range_8a_8d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp58);
                  r1000_1fff_tmp59 = simd_and(byte_range_80_bf, r1000_1fff_tmp15);
                  r1000_1fff_tmp60 = simd_andc(r1000_1fff_tmp59, basis_bits.bit_4);
                  r1000_1fff_tmp61 = simd_and(basis_bits.bit_5, r1000_1fff_tmp4);
                  byte_range_90_96 = simd_andc(r1000_1fff_tmp60, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(sequence_e1_89_adv, byte_range_90_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_andc(r1000_1fff_tmp53, r800_ffff_tmp3);
                  byte_98 = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_89_adv, byte_98);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(r1000_1fff_tmp59, basis_bits.bit_4);
                  r1000_1fff_tmp66 = simd_and(sequence_e1_89_adv, byte_range_9a_9d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp66);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_89_adv, byte_range_a0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp67);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp53, r1000_1fff_tmp36);
                  byte_8a = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp68);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(54), sequence_e1_8a_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_8a_adv, byte_range_80_88);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_8a_adv, byte_range_8a_8d);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp72 = simd_not(r1000_1fff_tmp71);
                  r1000_1fff_tmp73 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp72), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(byte_range_80_bf, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_8a_adv, byte_range_90_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(byte_range_80_bf, r1000_1fff_tmp10);
                  r1000_1fff_tmp76 = simd_andc(r1000_1fff_tmp75, basis_bits.bit_4);
                  byte_range_b2_b5 = simd_and(r1000_1fff_tmp76, r1000_1fff_tmp21);
                  r1000_1fff_tmp77 = simd_and(sequence_e1_8a_adv, byte_range_b2_b5);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(r1000_1fff_tmp75, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r1000_1fff_tmp78, r1000_1fff_tmp61);
                  r1000_1fff_tmp79 = simd_and(sequence_e1_8a_adv, byte_range_b8_be);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_and(r1000_1fff_tmp53, r1000_1fff_tmp4);
                  byte_8b = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp80);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(55), sequence_e1_8b_adv));
                  r1000_1fff_tmp81 = simd_and(sequence_e1_8b_adv, byte_80);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp81);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp52, basis_bits.bit_4);
                  byte_range_82_85 = simd_and(r1000_1fff_tmp82, r1000_1fff_tmp21);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_8b_adv, byte_range_82_85);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp83);
                  r1000_1fff_tmp84 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp85 = simd_or(basis_bits.bit_4, r1000_1fff_tmp61);
                  r1000_1fff_tmp86 = simd_not(r1000_1fff_tmp85);
                  r1000_1fff_tmp87 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp86), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
                  byte_range_88_96 = simd_and(r1000_1fff_tmp84, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_8b_adv, byte_range_88_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_or(basis_bits.bit_2, r800_ffff_tmp6);
                  byte_range_98_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_8b_adv, byte_range_98_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_andc(r1000_1fff_tmp12, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp91);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp71);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(56), sequence_e1_8c_adv));
                  r1000_1fff_tmp92 = simd_and(sequence_e1_8c_adv, byte_range_80_90);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp92);
                  byte_range_92_95 = simd_and(r1000_1fff_tmp60, r1000_1fff_tmp21);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_8c_adv, byte_range_92_95);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(sequence_e1_8c_adv, byte_range_98_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_and(r1000_1fff_tmp12, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp95);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp42);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(57), sequence_e1_8d_adv));
                  r1000_1fff_tmp96 = simd_and(sequence_e1_8d_adv, byte_range_80_9a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp96);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp52;
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(58), sequence_e1_8e_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_8e_adv, byte_range_80_8f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_and(sequence_e1_8e_adv, byte_range_a0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp98);
                  byte_8f = simd_and(byte_range_80_8f, r1000_1fff_tmp13);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp99 = simd_and(basis_bits.bit_3, r1000_1fff_tmp34);
                  r1000_1fff_tmp100 = simd_and(basis_bits.bit_2, r1000_1fff_tmp99);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp100);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(59), sequence_e1_8f_adv));
                  r1000_1fff_tmp101 = simd_and(sequence_e1_8f_adv, byte_range_80_b4);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp101);
                  byte_90 = simd_andc(r1000_1fff_tmp59, r800_1fff_tmp1);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp102 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp103 = simd_or(basis_bits.bit_2, r1000_1fff_tmp102);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp103);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(60), sequence_e1_90_adv));
                  r1000_1fff_tmp104 = simd_and(sequence_e1_90_adv, byte_range_81_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp48);
                  byte_range_91_98 = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp105);
                  byte_e1_byte_range_91_98 = simd_and(byte_e1_adv, byte_range_91_98);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_91_98, carryQ.get_carry_in(61), r1000_1fff_tmp106));
                  byte_e1_byte_range_91_98_sfx = simd_and(r1000_1fff_tmp106, byte_range_80_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e1_byte_range_91_98_sfx);
                  byte_99 = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp54);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp107 = simd_and(r1000_1fff_tmp12, r800_ffff_tmp3);
                  r1000_1fff_tmp108 = simd_or(basis_bits.bit_3, r1000_1fff_tmp107);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_2, r1000_1fff_tmp108);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp109);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(62), sequence_e1_99_adv));
                  r1000_1fff_tmp110 = simd_and(sequence_e1_99_adv, byte_range_80_ac);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp110);
                  r1000_1fff_tmp111 = simd_or(basis_bits.bit_3, r1000_1fff_tmp13);
                  byte_range_af_bf = simd_and(byte_range_a0_bf, r1000_1fff_tmp111);
                  r1000_1fff_tmp112 = simd_and(sequence_e1_99_adv, byte_range_af_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp112);
                  byte_9a = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp68);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp113 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp114 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp113), simd_andc(r800_1fff_tmp1, basis_bits.bit_3));
                  byte_range_81_9a = simd_and(r1000_1fff_tmp84, r1000_1fff_tmp114);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(63), sequence_e1_9a_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_9a_adv, byte_range_81_9a);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp115);
                  r1000_1fff_tmp116 = simd_and(sequence_e1_9a_adv, byte_range_a0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp116);
                  byte_9b = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp80);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(64), sequence_e1_9b_adv));
                  r1000_1fff_tmp117 = simd_and(sequence_e1_9b_adv, byte_range_80_aa);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp117);
                  byte_range_b1_b8 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp105);
                  r1000_1fff_tmp118 = simd_and(sequence_e1_9b_adv, byte_range_b1_b8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp118);
                  byte_9c = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp91);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp119 = simd_and(basis_bits.bit_4, r1000_1fff_tmp33);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp119);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(65), sequence_e1_9c_adv));
                  r1000_1fff_tmp120 = simd_and(sequence_e1_9c_adv, byte_range_80_8c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp120);
                  r1000_1fff_tmp121 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp122 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp121), simd_andc(r1000_1fff_tmp30, basis_bits.bit_3));
                  byte_range_8e_91 = simd_and(r1000_1fff_tmp84, r1000_1fff_tmp122);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_9c_adv, byte_range_8e_91);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp123);
                  r1000_1fff_tmp124 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  byte_range_a0_b1 = simd_andc(byte_range_a0_bf, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_and(sequence_e1_9c_adv, byte_range_a0_b1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp125);
                  byte_9d = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp95);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  byte_range_80_91 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp124);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(66), sequence_e1_9d_adv));
                  r1000_1fff_tmp126 = simd_and(sequence_e1_9d_adv, byte_range_80_91);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp126);
                  r1000_1fff_tmp127 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_range_a0_ac = simd_andc(r1000_1fff_tmp127, r1000_1fff_tmp119);
                  r1000_1fff_tmp128 = simd_and(sequence_e1_9d_adv, byte_range_a0_ac);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_9d_adv, byte_range_ae_b0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp129);
                  byte_9e = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp39);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp130 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp131 = simd_and(basis_bits.bit_2, r1000_1fff_tmp130);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp131);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(67), sequence_e1_9e_adv));
                  r1000_1fff_tmp132 = simd_and(sequence_e1_9e_adv, byte_range_80_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp132);
                  byte_9f = simd_and(r1000_1fff_tmp59, r1000_1fff_tmp13);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(68), sequence_e1_9f_adv));
                  r1000_1fff_tmp133 = simd_and(sequence_e1_9f_adv, byte_9c);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp133);
                  byte_a0 = simd_andc(r1000_1fff_tmp127, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(69), sequence_e1_a0_adv));
                  r1000_1fff_tmp134 = simd_and(sequence_e1_a0_adv, byte_range_a0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp134);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  r1000_1fff_tmp135 = simd_andc(byte_range_80_8f, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r1000_1fff_tmp135, r1000_1fff_tmp4);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(70), sequence_e1_a1_adv));
                  r1000_1fff_tmp136 = simd_and(sequence_e1_a1_adv, byte_range_80_82);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp136);
                  r1000_1fff_tmp137 = simd_not(r800_ffff_tmp6);
                  r1000_1fff_tmp138 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp137), simd_andc(r1000_1fff_tmp138, basis_bits.bit_2));
                  byte_range_84_b7 = simd_and(byte_range_80_bf, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_a1_adv, byte_range_84_b7);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp140);
                  byte_a2 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp37);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp141 = simd_or(basis_bits.bit_3, r1000_1fff_tmp55);
                  r1000_1fff_tmp142 = simd_and(basis_bits.bit_2, r1000_1fff_tmp141);
                  byte_range_80_a8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp142);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(71), sequence_e1_a2_adv));
                  r1000_1fff_tmp143 = simd_and(sequence_e1_a2_adv, byte_range_80_a8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp143);
                  byte_aa = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp68);
                  r1000_1fff_tmp144 = simd_and(sequence_e1_a2_adv, byte_aa);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp144);
                  byte_range_b0_bf = r1000_1fff_tmp75;
                  r1000_1fff_tmp145 = simd_and(sequence_e1_a2_adv, byte_range_b0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp145);
                  byte_a3 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp41);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp146 = simd_or(basis_bits.bit_4, r1000_1fff_tmp18);
                  r1000_1fff_tmp147 = simd_and(basis_bits.bit_3, r1000_1fff_tmp146);
                  r1000_1fff_tmp148 = simd_and(basis_bits.bit_2, r1000_1fff_tmp147);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp148);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(72), sequence_e1_a3_adv));
                  r1000_1fff_tmp149 = simd_and(sequence_e1_a3_adv, byte_range_80_b5);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp149);
                  byte_a4 = simd_and(r1000_1fff_tmp127, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp150 = simd_and(basis_bits.bit_3, r1000_1fff_tmp13);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp150);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(73), sequence_e1_a4_adv));
                  r1000_1fff_tmp151 = simd_and(sequence_e1_a4_adv, byte_range_80_9e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp151);
                  r1000_1fff_tmp152 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp152);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp153 = simd_or(basis_bits.bit_3, r1000_1fff_tmp30);
                  r1000_1fff_tmp154 = simd_not(r1000_1fff_tmp153);
                  r1000_1fff_tmp155 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp154), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp155);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(74), sequence_e1_a5_adv));
                  r1000_1fff_tmp156 = simd_and(sequence_e1_a5_adv, byte_range_90_ad);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp156);
                  r1000_1fff_tmp157 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  byte_range_b0_b4 = simd_andc(r1000_1fff_tmp157, r1000_1fff_tmp33);
                  r1000_1fff_tmp158 = simd_and(sequence_e1_a5_adv, byte_range_b0_b4);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp158);
                  r1000_1fff_tmp159 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp36);
                  byte_a6 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp159);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp160 = simd_or(basis_bits.bit_3, r1000_1fff_tmp12);
                  r1000_1fff_tmp161 = simd_and(basis_bits.bit_2, r1000_1fff_tmp160);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp161);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(75), sequence_e1_a6_adv));
                  r1000_1fff_tmp162 = simd_and(sequence_e1_a6_adv, byte_range_80_ab);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp162);
                  r1000_1fff_tmp163 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp4);
                  byte_a7 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp163);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp164 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_81_87 = simd_and(r1000_1fff_tmp164, r1000_1fff_tmp48);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(76), sequence_e1_a7_adv));
                  r1000_1fff_tmp165 = simd_and(sequence_e1_a7_adv, byte_range_81_87);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp165);
                  byte_a8 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp63);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp166 = simd_and(basis_bits.bit_3, r1000_1fff_tmp85);
                  byte_range_80_96 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp166);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(77), sequence_e1_a8_adv));
                  r1000_1fff_tmp167 = simd_and(sequence_e1_a8_adv, byte_range_80_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp167);
                  r1000_1fff_tmp168 = simd_and(sequence_e1_a8_adv, byte_range_a0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp168);
                  byte_a9 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp54);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_94 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp99);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(78), sequence_e1_a9_adv));
                  r1000_1fff_tmp169 = simd_and(sequence_e1_a9_adv, byte_range_80_94);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp169);
                  byte_ac = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp91);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp170 = simd_not(r1000_1fff_tmp130);
                  r1000_1fff_tmp171 = simd_or(basis_bits.bit_3, r1000_1fff_tmp34);
                  r1000_1fff_tmp172 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp170), simd_andc(r1000_1fff_tmp171, basis_bits.bit_2));
                  byte_range_85_b3 = simd_and(byte_range_80_bf, r1000_1fff_tmp172);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(79), sequence_e1_ac_adv));
                  r1000_1fff_tmp173 = simd_and(sequence_e1_ac_adv, byte_range_85_b3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp173);
                  byte_ad = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp95);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp174 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp175 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp174), simd_andc(r1000_1fff_tmp33, basis_bits.bit_4));
                  byte_range_85_8b = simd_and(byte_range_80_8f, r1000_1fff_tmp175);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(80), sequence_e1_ad_adv));
                  r1000_1fff_tmp176 = simd_and(sequence_e1_ad_adv, byte_range_85_8b);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp176);
                  byte_ae = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp39);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp177 = simd_not(r1000_1fff_tmp102);
                  r1000_1fff_tmp178 = simd_or(r800_ffff_tmp1, r1000_1fff_tmp4);
                  r1000_1fff_tmp179 = simd_or(basis_bits.bit_3, r1000_1fff_tmp178);
                  r1000_1fff_tmp180 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp177), simd_andc(r1000_1fff_tmp179, basis_bits.bit_2));
                  byte_range_83_a0 = simd_and(byte_range_80_bf, r1000_1fff_tmp180);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(81), sequence_e1_ae_adv));
                  r1000_1fff_tmp181 = simd_and(sequence_e1_ae_adv, byte_range_83_a0);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp181);
                  byte_range_ae_af = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp30);
                  r1000_1fff_tmp182 = simd_and(sequence_e1_ae_adv, byte_range_ae_af);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp182);
                  r1000_1fff_tmp183 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                  r1000_1fff_tmp184 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bf = simd_and(r1000_1fff_tmp183, r1000_1fff_tmp184);
                  r1000_1fff_tmp185 = simd_and(sequence_e1_ae_adv, byte_range_ba_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp185);
                  byte_af = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp13);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp186 = simd_or(basis_bits.bit_3, r1000_1fff_tmp146);
                  r1000_1fff_tmp187 = simd_and(basis_bits.bit_2, r1000_1fff_tmp186);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp187);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(82), sequence_e1_af_adv));
                  r1000_1fff_tmp188 = simd_and(sequence_e1_af_adv, byte_range_80_a5);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp188);
                  byte_b0 = simd_andc(byte_range_b0_bf, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp189 = simd_and(basis_bits.bit_2, r1000_1fff_tmp138);
                  byte_range_80_a3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp189);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(83), sequence_e1_b0_adv));
                  r1000_1fff_tmp190 = simd_and(sequence_e1_b0_adv, byte_range_80_a3);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp190);
                  byte_b1 = simd_and(byte_range_b0_bf, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp191 = simd_and(byte_range_80_8f, r1000_1fff_tmp12);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp191, r800_ffff_tmp3);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(84), sequence_e1_b1_adv));
                  r1000_1fff_tmp192 = simd_and(sequence_e1_b1_adv, byte_range_8d_8f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp192);
                  r1000_1fff_tmp193 = simd_and(basis_bits.bit_4, r1000_1fff_tmp184);
                  r1000_1fff_tmp194 = simd_and(basis_bits.bit_3, r1000_1fff_tmp193);
                  r1000_1fff_tmp195 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp137), simd_andc(r1000_1fff_tmp194, basis_bits.bit_2));
                  byte_range_9a_b7 = simd_and(byte_range_80_bf, r1000_1fff_tmp195);
                  r1000_1fff_tmp196 = simd_and(sequence_e1_b1_adv, byte_range_9a_b7);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp196);
                  byte_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp41);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp197 = simd_and(r1000_1fff_tmp127, basis_bits.bit_4);
                  r1000_1fff_tmp198 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp197, r1000_1fff_tmp198);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(85), sequence_e1_b3_adv));
                  r1000_1fff_tmp199 = simd_and(sequence_e1_b3_adv, byte_range_a9_ac);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp199);
                  byte_range_ae_b1 = simd_and(byte_range_a0_bf, r1000_1fff_tmp122);
                  r1000_1fff_tmp200 = simd_and(sequence_e1_b3_adv, byte_range_ae_b1);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp200);
                  r1000_1fff_tmp201 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp201, r1000_1fff_tmp26);
                  r1000_1fff_tmp202 = simd_and(sequence_e1_b3_adv, byte_range_b5_b6);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r1000_1fff_tmp202);
                }
                else {
                  carryQ.CarryDequeueEnqueue(47, 39);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 70);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(86, 18))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(86, 6))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(86), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp7 = simd_not(r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp7), simd_andc(r2000_2fff_tmp8, basis_bits.bit_4));
                  byte_range_b5_b8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp9);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(87), sequence_e2_84_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_84_adv, byte_range_b5_b8);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp10);
                  byte_b4 = simd_and(r2000_2fff_tmp5, r800_ffff_tmp4);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  byte_range_b0_bf = r2000_2fff_tmp5;
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(88), sequence_e2_b4_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp12);
                  byte_b5 = simd_and(byte_range_b0_bf, r2000_2fff_tmp13);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp14 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_2, r2000_2fff_tmp14);
                  byte_range_80_a7 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp15);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(89), sequence_e2_b5_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_b5_adv, byte_range_80_a7);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_b6 = simd_and(byte_range_b0_bf, r2000_2fff_tmp17);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp18 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp20 = simd_and(basis_bits.bit_5, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_or(basis_bits.bit_4, r2000_2fff_tmp20);
                  r2000_2fff_tmp22 = simd_and(basis_bits.bit_3, r2000_2fff_tmp21);
                  byte_range_80_96 = simd_andc(r2000_2fff_tmp18, r2000_2fff_tmp22);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(90), sequence_e2_b6_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b6_adv, byte_range_80_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp25 = simd_andc(r2000_2fff_tmp24, basis_bits.bit_4);
                  byte_range_a0_a6 = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp20);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_b6_adv, byte_range_a0_a6);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(r2000_2fff_tmp24, basis_bits.bit_4);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp27, r2000_2fff_tmp20);
                  r2000_2fff_tmp28 = simd_and(sequence_e2_b6_adv, byte_range_a8_ae);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  byte_range_b0_b6 = simd_andc(r2000_2fff_tmp29, r2000_2fff_tmp20);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_b6_adv, byte_range_b0_b6);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r2000_2fff_tmp31, r2000_2fff_tmp20);
                  r2000_2fff_tmp32 = simd_and(sequence_e2_b6_adv, byte_range_b8_be);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp32);
                  r2000_2fff_tmp33 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp19);
                  byte_b7 = simd_and(byte_range_b0_bf, r2000_2fff_tmp33);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp34 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r2000_2fff_tmp34, r2000_2fff_tmp20);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(91), sequence_e2_b7_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_b7_adv, byte_range_80_86);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_88_8e = simd_andc(r2000_2fff_tmp36, r2000_2fff_tmp20);
                  r2000_2fff_tmp37 = simd_and(sequence_e2_b7_adv, byte_range_88_8e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp39 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_andc(r2000_2fff_tmp39, basis_bits.bit_4);
                  byte_range_90_96 = simd_andc(r2000_2fff_tmp40, r2000_2fff_tmp20);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_b7_adv, byte_range_90_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp39, basis_bits.bit_4);
                  byte_range_98_9e = simd_andc(r2000_2fff_tmp42, r2000_2fff_tmp20);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_b7_adv, byte_range_98_9e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r2000_2fff_tmp43);
                }
                else {
                  carryQ.CarryDequeueEnqueue(86, 6);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(92, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(92), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(93), sequence_e3_80_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_80_adv, byte_86);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp8 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp10 = simd_andc(r3000_4dff_tmp9, r800_ffff_tmp3);
                  byte_bc = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(sequence_e3_80_adv, byte_bc);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp13 = simd_andc(r3000_4dff_tmp12, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp13);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp14 = simd_or(basis_bits.bit_3, r3000_4dff_tmp3);
                  r3000_4dff_tmp15 = simd_or(basis_bits.bit_2, r3000_4dff_tmp14);
                  byte_range_81_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp15);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(94), sequence_e3_81_adv));
                  r3000_4dff_tmp16 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp16);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp17 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp18 = simd_and(basis_bits.bit_5, r2000_4dff_tmp3);
                  r3000_4dff_tmp19 = simd_or(basis_bits.bit_4, r3000_4dff_tmp18);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_3, r3000_4dff_tmp19);
                  byte_range_80_96 = simd_andc(r3000_4dff_tmp17, r3000_4dff_tmp20);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(95), sequence_e3_82_adv));
                  r3000_4dff_tmp21 = simd_and(sequence_e3_82_adv, byte_range_80_96);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp23 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp22);
                  r3000_4dff_tmp24 = simd_and(r3000_4dff_tmp9, r2000_4dff_tmp3);
                  byte_9f = simd_and(r3000_4dff_tmp23, r3000_4dff_tmp24);
                  r3000_4dff_tmp25 = simd_and(sequence_e3_82_adv, byte_9f);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp25);
                  r3000_4dff_tmp26 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  byte_range_a1_bf = simd_and(r3000_4dff_tmp26, r3000_4dff_tmp14);
                  r3000_4dff_tmp27 = simd_and(sequence_e3_82_adv, byte_range_a1_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp27);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp4);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp28 = simd_or(basis_bits.bit_5, r2000_4dff_tmp3);
                  r3000_4dff_tmp29 = simd_and(basis_bits.bit_4, r3000_4dff_tmp28);
                  r3000_4dff_tmp30 = simd_and(basis_bits.bit_3, r3000_4dff_tmp29);
                  r3000_4dff_tmp31 = simd_and(basis_bits.bit_2, r3000_4dff_tmp30);
                  byte_range_80_ba = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp31);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(96), sequence_e3_83_adv));
                  r3000_4dff_tmp32 = simd_and(sequence_e3_83_adv, byte_range_80_ba);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp32);
                  byte_bf = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp24);
                  r3000_4dff_tmp33 = simd_and(sequence_e3_83_adv, byte_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp33);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp34 = simd_and(r3000_4dff_tmp9, basis_bits.bit_6);
                  r3000_4dff_tmp35 = simd_or(basis_bits.bit_3, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_not(r3000_4dff_tmp35);
                  r3000_4dff_tmp37 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp38 = simd_or(basis_bits.bit_4, r3000_4dff_tmp37);
                  r3000_4dff_tmp39 = simd_or(basis_bits.bit_3, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp36), simd_andc(r3000_4dff_tmp39, basis_bits.bit_2));
                  byte_range_85_ad = simd_and(r800_ffff_tmp5, r3000_4dff_tmp40);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(97), sequence_e3_84_adv));
                  r3000_4dff_tmp41 = simd_and(sequence_e3_84_adv, byte_range_85_ad);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp41);
                  r3000_4dff_tmp42 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp43 = simd_or(basis_bits.bit_4, r3000_4dff_tmp42);
                  byte_range_b1_bf = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp43);
                  r3000_4dff_tmp44 = simd_and(sequence_e3_84_adv, byte_range_b1_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp44);
                  r3000_4dff_tmp45 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp12);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp45);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(98), sequence_e3_85_adv));
                  r3000_4dff_tmp46 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp46);
                  r3000_4dff_tmp47 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp48 = simd_and(basis_bits.bit_4, r3000_4dff_tmp18);
                  byte_range_80_8e = simd_andc(r3000_4dff_tmp47, r3000_4dff_tmp48);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(99), sequence_e3_86_adv));
                  r3000_4dff_tmp49 = simd_and(sequence_e3_86_adv, byte_range_80_8e);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp49);
                  r3000_4dff_tmp50 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_a0_ba = simd_andc(r3000_4dff_tmp50, r3000_4dff_tmp30);
                  r3000_4dff_tmp51 = simd_and(sequence_e3_86_adv, byte_range_a0_ba);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp51);
                  r3000_4dff_tmp52 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp47, r3000_4dff_tmp52);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp7);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(100), sequence_e3_87_adv));
                  r3000_4dff_tmp53 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp53);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(101), r3000_4dff_tmp54));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp54, byte_range_80_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp55 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp56 = simd_or(basis_bits.bit_4, r3000_4dff_tmp55);
                  r3000_4dff_tmp57 = simd_and(basis_bits.bit_3, r3000_4dff_tmp56);
                  r3000_4dff_tmp58 = simd_and(basis_bits.bit_2, r3000_4dff_tmp57);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp58);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp8, byte_range_80_b5);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(102), r3000_4dff_tmp59));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp59, byte_range_80_bf);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp5);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp8, byte_b6);
                  byte_e4_adv = r800_ffff_tmp8;
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(103), sequence_e4_b6_adv));
                  r3000_4dff_tmp60 = simd_and(sequence_e4_b6_adv, byte_range_80_b5);
                  struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r3000_4dff_tmp60);
                }
                else {
                  carryQ.CarryDequeueEnqueue(92, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(86, 18);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 88);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(104, 6))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp13;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[104] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(104), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[105] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(105), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[106] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(106), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r4e00_9fff_tmp12 = simd_and(r4e00_9fff_tmp10, r4e00_9fff_tmp11);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_3, r4e00_9fff_tmp12);
              r4e00_9fff_tmp14 = simd_and(basis_bits.bit_2, r4e00_9fff_tmp13);
              byte_range_80_be = simd_andc(byte_range_80_bf, r4e00_9fff_tmp14);
              carryQ.cq[107] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(107), r4e00_9fff_tmp15));
              byte_e9_byte_range_80_be = simd_and(r4e00_9fff_tmp15, byte_range_80_be);
              carryQ.cq[108] = carryout2carry(pablo_blk_Advance(byte_e9_byte_range_80_be, carryQ.get_carry_in(108), r4e00_9fff_tmp16));
              byte_e9_byte_range_80_be_sfx = simd_and(r4e00_9fff_tmp16, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_e9_byte_range_80_be_sfx);
              r4e00_9fff_tmp17 = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              byte_bf = simd_and(r4e00_9fff_tmp17, r4e00_9fff_tmp12);
              sequence_e9_bf = simd_and(r4e00_9fff_tmp15, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp15;
              r4e00_9fff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp19 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp18);
              r4e00_9fff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp19, r4e00_9fff_tmp20);
              carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(109), sequence_e9_bf_adv));
              r4e00_9fff_tmp21 = simd_and(sequence_e9_bf_adv, byte_range_80_8c);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r4e00_9fff_tmp21);
            }
            else {
              carryQ.CarryDequeueEnqueue(104, 6);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(110, 52))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[110] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(110), ra000_ffff_tmp7));
              sequence_ea_80 = simd_and(ra000_ffff_tmp7, byte_80);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_4, r800_ffff_tmp16);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              byte_range_80_94 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp10);
              carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(111), sequence_ea_80_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_80_adv, byte_range_80_94);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_4, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_3, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_2, ra000_ffff_tmp14);
              byte_range_96_bf = simd_and(r800_ffff_tmp5, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(sequence_ea_80_adv, byte_range_96_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp18 = simd_not(ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp18), simd_andc(ra000_ffff_tmp6, basis_bits.bit_3));
              byte_range_81_91 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp19);
              byte_ea_byte_range_81_91 = simd_and(byte_ea_adv, byte_range_81_91);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[112] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_81_91, carryQ.get_carry_in(112), ra000_ffff_tmp20));
              byte_ea_byte_range_81_91_sfx = simd_and(ra000_ffff_tmp20, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ea_byte_range_81_91_sfx);
              ra000_ffff_tmp21 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp22 = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              ra000_ffff_tmp23 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp23);
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp24 = simd_andc(byte_range_80_bf, ra000_ffff_tmp4);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp25);
              carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(113), sequence_ea_92_adv));
              ra000_ffff_tmp26 = simd_and(sequence_ea_92_adv, byte_range_80_8c);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp28 = simd_andc(ra000_ffff_tmp27, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp28);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp29 = simd_not(r800_ffff_tmp6);
              ra000_ffff_tmp30 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp29), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_b7 = simd_and(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(114), sequence_ea_93_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_93_adv, byte_range_90_b7);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp31);
              byte_range_94_97 = simd_and(ra000_ffff_tmp22, r800_ffff_tmp2);
              byte_ea_byte_range_94_97 = simd_and(byte_ea_adv, byte_range_94_97);
              carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_94_97, carryQ.get_carry_in(115), ra000_ffff_tmp32));
              byte_ea_byte_range_94_97_sfx = simd_and(ra000_ffff_tmp32, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ea_byte_range_94_97_sfx);
              ra000_ffff_tmp33 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp33);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_80_8b = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp34);
              carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(116), sequence_ea_98_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_98_adv, byte_range_80_8b);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp35);
              byte_range_90_9f = ra000_ffff_tmp22;
              ra000_ffff_tmp36 = simd_and(sequence_ea_98_adv, byte_range_90_9f);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_aa_ab = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_and(sequence_ea_98_adv, byte_range_aa_ab);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp40);
              byte_99 = simd_and(byte_range_90_9f, ra000_ffff_tmp41);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp34, ra000_ffff_tmp2);
              byte_ae = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp42);
              carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(117), sequence_ea_99_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_99_adv, byte_ae);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp43);
              byte_9a = simd_and(byte_range_90_9f, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(118), sequence_ea_9a_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ea_9a_adv, byte_range_a0_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp27);
              byte_9b = simd_and(byte_range_90_9f, ra000_ffff_tmp45);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp46 = simd_or(basis_bits.bit_3, ra000_ffff_tmp13);
              ra000_ffff_tmp47 = simd_and(basis_bits.bit_2, ra000_ffff_tmp46);
              byte_range_80_a5 = simd_andc(byte_range_80_bf, ra000_ffff_tmp47);
              carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(119), sequence_ea_9b_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ea_9b_adv, byte_range_80_a5);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp34, ra000_ffff_tmp27);
              byte_9f = simd_and(byte_range_90_9f, ra000_ffff_tmp49);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp50 = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              ra000_ffff_tmp51 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp27);
              byte_b7 = simd_and(ra000_ffff_tmp50, ra000_ffff_tmp51);
              carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(120), sequence_ea_9f_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ea_9f_adv, byte_b7);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(ra000_ffff_tmp50, basis_bits.bit_4);
              ra000_ffff_tmp54 = simd_or(basis_bits.bit_5, ra000_ffff_tmp27);
              byte_range_bb_bf = simd_and(ra000_ffff_tmp53, ra000_ffff_tmp54);
              ra000_ffff_tmp55 = simd_and(sequence_ea_9f_adv, byte_range_bb_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp55);
              byte_a0 = simd_andc(ra000_ffff_tmp37, ra000_ffff_tmp6);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp17);
              carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(121), sequence_ea_a0_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ea_a0_adv, byte_range_80_81);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp24, basis_bits.bit_4);
              ra000_ffff_tmp58 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp58), simd_andc(ra000_ffff_tmp27, basis_bits.bit_5));
              byte_range_83_85 = simd_and(ra000_ffff_tmp57, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(sequence_ea_a0_adv, byte_range_83_85);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_not(ra000_ffff_tmp54);
              ra000_ffff_tmp62 = simd_and(basis_bits.bit_5, ra000_ffff_tmp27);
              ra000_ffff_tmp63 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp61), simd_andc(ra000_ffff_tmp62, basis_bits.bit_4));
              byte_range_87_8a = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp63);
              ra000_ffff_tmp64 = simd_and(sequence_ea_a0_adv, byte_range_87_8a);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp64);
              ra000_ffff_tmp65 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp27);
              ra000_ffff_tmp66 = simd_or(basis_bits.bit_3, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_not(ra000_ffff_tmp66);
              ra000_ffff_tmp68 = simd_or(basis_bits.bit_3, ra000_ffff_tmp34);
              ra000_ffff_tmp69 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp67), simd_andc(ra000_ffff_tmp68, basis_bits.bit_2));
              byte_range_8c_a2 = simd_and(byte_range_80_bf, ra000_ffff_tmp69);
              ra000_ffff_tmp70 = simd_and(sequence_ea_a0_adv, byte_range_8c_a2);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_andc(ra000_ffff_tmp40, r800_ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp71);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp72 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp73 = simd_and(basis_bits.bit_2, ra000_ffff_tmp72);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp73);
              carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(122), sequence_ea_a1_adv));
              ra000_ffff_tmp74 = simd_and(sequence_ea_a1_adv, byte_range_80_b3);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp74);
              byte_a2 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp23);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp75 = simd_not(ra000_ffff_tmp72);
              ra000_ffff_tmp76 = simd_or(basis_bits.bit_3, ra000_ffff_tmp17);
              ra000_ffff_tmp77 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp75), simd_andc(ra000_ffff_tmp76, basis_bits.bit_2));
              byte_range_82_b3 = simd_and(byte_range_80_bf, ra000_ffff_tmp77);
              carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(123), sequence_ea_a2_adv));
              ra000_ffff_tmp78 = simd_and(sequence_ea_a2_adv, byte_range_82_b3);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp78);
              byte_a3 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp28);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp79 = simd_andc(ra000_ffff_tmp50, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp79, r800_ffff_tmp14);
              carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(124), sequence_ea_a3_adv));
              ra000_ffff_tmp80 = simd_and(sequence_ea_a3_adv, byte_range_b2_b7);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp80);
              byte_bb = simd_and(ra000_ffff_tmp50, ra000_ffff_tmp45);
              ra000_ffff_tmp81 = simd_and(sequence_ea_a3_adv, byte_bb);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp81);
              byte_a4 = simd_and(ra000_ffff_tmp37, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp82 = simd_not(ra000_ffff_tmp46);
              ra000_ffff_tmp83 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              ra000_ffff_tmp84 = simd_or(basis_bits.bit_3, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp82), simd_andc(ra000_ffff_tmp84, basis_bits.bit_2));
              byte_range_8a_a5 = simd_and(byte_range_80_bf, ra000_ffff_tmp85);
              carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(125), sequence_ea_a4_adv));
              ra000_ffff_tmp86 = simd_and(sequence_ea_a4_adv, byte_range_8a_a5);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp86);
              byte_range_b0_bf = ra000_ffff_tmp50;
              ra000_ffff_tmp87 = simd_and(sequence_ea_a4_adv, byte_range_b0_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp40);
              byte_a5 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp88);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp57, ra000_ffff_tmp62);
              carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(126), sequence_ea_a5_adv));
              ra000_ffff_tmp89 = simd_and(sequence_ea_a5_adv, byte_range_80_86);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(ra000_ffff_tmp34, r800_ffff_tmp3);
              ra000_ffff_tmp91 = simd_and(basis_bits.bit_3, ra000_ffff_tmp90);
              byte_range_a0_bc = simd_andc(byte_range_a0_bf, ra000_ffff_tmp91);
              ra000_ffff_tmp92 = simd_and(sequence_ea_a5_adv, byte_range_a0_bc);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp92);
              ra000_ffff_tmp93 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp93);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp94 = simd_and(basis_bits.bit_3, ra000_ffff_tmp65);
              ra000_ffff_tmp95 = simd_not(ra000_ffff_tmp94);
              ra000_ffff_tmp96 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp97 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp95), simd_andc(ra000_ffff_tmp96, basis_bits.bit_2));
              byte_range_84_b2 = simd_and(byte_range_80_bf, ra000_ffff_tmp97);
              carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(127), sequence_ea_a6_adv));
              ra000_ffff_tmp98 = simd_and(sequence_ea_a6_adv, byte_range_84_b2);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp98);
              byte_a7 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp51);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp99 = simd_andc(ra000_ffff_tmp37, basis_bits.bit_4);
              byte_range_a0_a4 = simd_andc(ra000_ffff_tmp99, r800_ffff_tmp16);
              carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(128), sequence_ea_a7_adv));
              ra000_ffff_tmp100 = simd_and(sequence_ea_a7_adv, byte_range_a0_a4);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp100);
              ra000_ffff_tmp101 = simd_or(basis_bits.bit_4, ra000_ffff_tmp62);
              byte_range_a7_af = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp101);
              ra000_ffff_tmp102 = simd_and(sequence_ea_a7_adv, byte_range_a7_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp102);
              ra000_ffff_tmp103 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
              ra000_ffff_tmp104 = simd_not(ra000_ffff_tmp27);
              ra000_ffff_tmp105 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp104), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_ba_be = simd_and(ra000_ffff_tmp103, ra000_ffff_tmp105);
              ra000_ffff_tmp106 = simd_and(sequence_ea_a7_adv, byte_range_ba_be);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp106);
              byte_a8 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp33);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp107 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp108 = simd_and(basis_bits.bit_4, ra000_ffff_tmp107);
              ra000_ffff_tmp109 = simd_or(basis_bits.bit_3, ra000_ffff_tmp108);
              ra000_ffff_tmp110 = simd_and(basis_bits.bit_2, ra000_ffff_tmp109);
              byte_range_80_a8 = simd_andc(byte_range_80_bf, ra000_ffff_tmp110);
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(129), sequence_ea_a8_adv));
              ra000_ffff_tmp111 = simd_and(sequence_ea_a8_adv, byte_range_80_a8);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp111);
              byte_a9 = simd_and(ra000_ffff_tmp37, ra000_ffff_tmp41);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp112 = simd_andc(ra000_ffff_tmp24, r800_ffff_tmp1);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp112, ra000_ffff_tmp27);
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(130), sequence_ea_a9_adv));
              ra000_ffff_tmp113 = simd_and(sequence_ea_a9_adv, byte_range_80_82);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp113);
              ra000_ffff_tmp114 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_84_8b = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp114);
              ra000_ffff_tmp115 = simd_and(sequence_ea_a9_adv, byte_range_84_8b);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp115);
              byte_range_a0_af = ra000_ffff_tmp37;
              ra000_ffff_tmp116 = simd_and(sequence_ea_a9_adv, byte_range_a0_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp116);
              ra000_ffff_tmp117 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
              ra000_ffff_tmp118 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp104), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              byte_range_b1_b6 = simd_and(ra000_ffff_tmp117, ra000_ffff_tmp118);
              ra000_ffff_tmp119 = simd_and(sequence_ea_a9_adv, byte_range_b1_b6);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp119);
              byte_ba = simd_and(byte_range_b0_bf, ra000_ffff_tmp3);
              ra000_ffff_tmp120 = simd_and(sequence_ea_a9_adv, byte_ba);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp120);
              ra000_ffff_tmp121 = simd_and(ra000_ffff_tmp34, basis_bits.bit_6);
              byte_range_be_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp121);
              ra000_ffff_tmp122 = simd_and(sequence_ea_a9_adv, byte_range_be_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp122);
              byte_aa = simd_and(byte_range_a0_af, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              byte_range_80_af = simd_andc(byte_range_80_bf, r800_ffff_tmp11);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(131), sequence_ea_aa_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ea_aa_adv, byte_range_80_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp123);
              byte_b1 = simd_and(byte_range_b0_bf, ra000_ffff_tmp71);
              ra000_ffff_tmp124 = simd_and(sequence_ea_aa_adv, byte_b1);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp124);
              ra000_ffff_tmp125 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
              ra000_ffff_tmp126 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b5_b6 = simd_and(ra000_ffff_tmp125, ra000_ffff_tmp126);
              ra000_ffff_tmp127 = simd_and(sequence_ea_aa_adv, byte_range_b5_b6);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp127);
              ra000_ffff_tmp128 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp58), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              byte_range_b9_bd = simd_and(ra000_ffff_tmp103, ra000_ffff_tmp128);
              ra000_ffff_tmp129 = simd_and(sequence_ea_aa_adv, byte_range_b9_bd);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp129);
              byte_ab = simd_and(byte_range_a0_af, ra000_ffff_tmp45);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(132), sequence_ea_ab_adv));
              ra000_ffff_tmp130 = simd_and(sequence_ea_ab_adv, byte_80);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp130);
              byte_82 = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp23);
              ra000_ffff_tmp131 = simd_and(sequence_ea_ab_adv, byte_82);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp131);
              ra000_ffff_tmp132 = simd_and(byte_range_90_9f, basis_bits.bit_4);
              ra000_ffff_tmp133 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp134 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp133), simd_andc(ra000_ffff_tmp27, basis_bits.bit_5));
              byte_range_9b_9c = simd_and(ra000_ffff_tmp132, ra000_ffff_tmp134);
              ra000_ffff_tmp135 = simd_and(sequence_ea_ab_adv, byte_range_9b_9c);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp135);
              ra000_ffff_tmp136 = simd_and(basis_bits.bit_4, ra000_ffff_tmp54);
              byte_range_a0_aa = simd_andc(byte_range_a0_af, ra000_ffff_tmp136);
              ra000_ffff_tmp137 = simd_and(sequence_ea_ab_adv, byte_range_a0_aa);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp137);
              byte_b2 = simd_and(byte_range_b0_bf, ra000_ffff_tmp23);
              ra000_ffff_tmp138 = simd_and(sequence_ea_ab_adv, byte_b2);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp138);
              ra000_ffff_tmp139 = simd_andc(ra000_ffff_tmp34, r800_ffff_tmp3);
              byte_ac = simd_and(byte_range_a0_af, ra000_ffff_tmp139);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_81_86 = simd_and(ra000_ffff_tmp57, ra000_ffff_tmp118);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(133), sequence_ea_ac_adv));
              ra000_ffff_tmp140 = simd_and(sequence_ea_ac_adv, byte_range_81_86);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp140);
              ra000_ffff_tmp141 = simd_and(ra000_ffff_tmp24, basis_bits.bit_4);
              byte_range_89_8e = simd_and(ra000_ffff_tmp141, ra000_ffff_tmp118);
              ra000_ffff_tmp142 = simd_and(sequence_ea_ac_adv, byte_range_89_8e);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp142);
              ra000_ffff_tmp143 = simd_andc(byte_range_90_9f, basis_bits.bit_4);
              byte_range_91_96 = simd_and(ra000_ffff_tmp143, ra000_ffff_tmp118);
              ra000_ffff_tmp144 = simd_and(sequence_ea_ac_adv, byte_range_91_96);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp144);
              ra000_ffff_tmp145 = simd_andc(byte_range_a0_af, basis_bits.bit_4);
              byte_range_a0_a6 = simd_andc(ra000_ffff_tmp145, ra000_ffff_tmp62);
              ra000_ffff_tmp146 = simd_and(sequence_ea_ac_adv, byte_range_a0_a6);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp146);
              ra000_ffff_tmp147 = simd_and(byte_range_a0_af, basis_bits.bit_4);
              byte_range_a8_ae = simd_andc(ra000_ffff_tmp147, ra000_ffff_tmp62);
              ra000_ffff_tmp148 = simd_and(sequence_ea_ac_adv, byte_range_a8_ae);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp148);
              byte_af = simd_and(byte_range_a0_af, ra000_ffff_tmp49);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp149 = simd_and(basis_bits.bit_2, ra000_ffff_tmp66);
              byte_range_80_a2 = simd_andc(byte_range_80_bf, ra000_ffff_tmp149);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(134), sequence_ea_af_adv));
              ra000_ffff_tmp150 = simd_and(sequence_ea_af_adv, byte_range_80_a2);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp150);
              byte_ea_byte_range_b0_bf = simd_and(byte_ea_adv, byte_range_b0_bf);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_b0_bf, carryQ.get_carry_in(135), ra000_ffff_tmp151));
              byte_ea_byte_range_b0_bf_sfx = simd_and(ra000_ffff_tmp151, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ea_byte_range_b0_bf_sfx);
              byte_range_eb_ec = simd_and(r800_ffff_tmp19, ra000_ffff_tmp134);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(136), ra000_ffff_tmp152));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp152, byte_range_80_bf);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(137), ra000_ffff_tmp153));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp153, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_range_eb_ec_sfx_sfx);
              ra000_ffff_tmp154 = simd_and(ra000_ffff_tmp34, ra000_ffff_tmp40);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp154);
              ra000_ffff_tmp155 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp156 = simd_and(basis_bits.bit_3, ra000_ffff_tmp121);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp155, ra000_ffff_tmp156);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(138), ra000_ffff_tmp157));
              byte_ed_byte_range_80_9d = simd_and(ra000_ffff_tmp157, byte_range_80_9d);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_80_9d, carryQ.get_carry_in(139), ra000_ffff_tmp158));
              byte_ed_byte_range_80_9d_sfx = simd_and(ra000_ffff_tmp158, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ed_byte_range_80_9d_sfx);
              byte_9e = simd_and(byte_range_90_9f, ra000_ffff_tmp42);
              sequence_ed_9e = simd_and(ra000_ffff_tmp157, byte_9e);
              byte_ed_adv = ra000_ffff_tmp157;
              ra000_ffff_tmp159 = simd_and(basis_bits.bit_2, ra000_ffff_tmp96);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp159);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(140), sequence_ed_9e_adv));
              ra000_ffff_tmp160 = simd_and(sequence_ed_9e_adv, byte_range_80_a3);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp160);
              ra000_ffff_tmp161 = simd_and(sequence_ed_9e_adv, byte_range_b0_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp161);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(141), sequence_ed_9f_adv));
              ra000_ffff_tmp162 = simd_and(sequence_ed_9f_adv, byte_range_80_86);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp162);
              ra000_ffff_tmp163 = simd_and(basis_bits.bit_3, ra000_ffff_tmp34);
              ra000_ffff_tmp164 = simd_not(ra000_ffff_tmp163);
              ra000_ffff_tmp165 = simd_or(basis_bits.bit_3, ra000_ffff_tmp136);
              ra000_ffff_tmp166 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp164), simd_andc(ra000_ffff_tmp165, basis_bits.bit_2));
              byte_range_8b_bb = simd_and(byte_range_80_bf, ra000_ffff_tmp166);
              ra000_ffff_tmp167 = simd_and(sequence_ed_9f_adv, byte_range_8b_bb);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp167);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp49);
              ra000_ffff_tmp168 = simd_not(ra000_ffff_tmp107);
              ra000_ffff_tmp169 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp168), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(byte_range_a0_af, ra000_ffff_tmp169);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(142), ra000_ffff_tmp170));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp170, byte_range_a4_a8);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(143), ra000_ffff_tmp171));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp171, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ef_byte_range_a4_a8_sfx);
              sequence_ef_a9 = simd_and(ra000_ffff_tmp170, byte_a9);
              byte_ef_adv = ra000_ffff_tmp170;
              ra000_ffff_tmp172 = simd_or(basis_bits.bit_3, ra000_ffff_tmp121);
              ra000_ffff_tmp173 = simd_and(basis_bits.bit_2, ra000_ffff_tmp172);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp173);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(144), sequence_ef_a9_adv));
              ra000_ffff_tmp174 = simd_and(sequence_ef_a9_adv, byte_range_80_ad);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp174);
              ra000_ffff_tmp175 = simd_and(sequence_ef_a9_adv, byte_range_b0_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp175);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(145), sequence_ef_aa_adv));
              ra000_ffff_tmp176 = simd_and(sequence_ef_aa_adv, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp176);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp177 = simd_and(basis_bits.bit_3, ra000_ffff_tmp83);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp155, ra000_ffff_tmp177);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(146), sequence_ef_ab_adv));
              ra000_ffff_tmp178 = simd_and(sequence_ef_ab_adv, byte_range_80_99);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp178);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              byte_9d = simd_and(byte_range_90_9f, ra000_ffff_tmp154);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(147), sequence_ef_ac_adv));
              ra000_ffff_tmp179 = simd_and(sequence_ef_ac_adv, byte_9d);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp179);
              ra000_ffff_tmp180 = simd_not(ra000_ffff_tmp109);
              ra000_ffff_tmp181 = simd_and(basis_bits.bit_3, ra000_ffff_tmp49);
              ra000_ffff_tmp182 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp180), simd_andc(ra000_ffff_tmp181, basis_bits.bit_2));
              byte_range_9f_a8 = simd_and(byte_range_80_bf, ra000_ffff_tmp182);
              ra000_ffff_tmp183 = simd_and(sequence_ef_ac_adv, byte_range_9f_a8);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp183);
              ra000_ffff_tmp184 = simd_not(ra000_ffff_tmp101);
              ra000_ffff_tmp185 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp184), simd_andc(ra000_ffff_tmp83, basis_bits.bit_3));
              byte_range_aa_b6 = simd_and(byte_range_a0_bf, ra000_ffff_tmp185);
              ra000_ffff_tmp186 = simd_and(sequence_ef_ac_adv, byte_range_aa_b6);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp186);
              byte_range_b8_bc = simd_andc(ra000_ffff_tmp103, r800_ffff_tmp16);
              ra000_ffff_tmp187 = simd_and(sequence_ef_ac_adv, byte_range_b8_bc);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp187);
              byte_be = simd_and(byte_range_b0_bf, ra000_ffff_tmp42);
              ra000_ffff_tmp188 = simd_and(sequence_ef_ac_adv, byte_be);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp188);
              byte_ad = simd_and(byte_range_a0_af, ra000_ffff_tmp154);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(148), sequence_ef_ad_adv));
              ra000_ffff_tmp189 = simd_and(sequence_ef_ad_adv, byte_range_80_81);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp189);
              byte_range_83_84 = simd_and(ra000_ffff_tmp57, ra000_ffff_tmp134);
              ra000_ffff_tmp190 = simd_and(sequence_ef_ad_adv, byte_range_83_84);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp190);
              ra000_ffff_tmp191 = simd_or(basis_bits.bit_2, ra000_ffff_tmp46);
              byte_range_86_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp191);
              ra000_ffff_tmp192 = simd_and(sequence_ef_ad_adv, byte_range_86_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp192);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp193 = simd_and(basis_bits.bit_3, ra000_ffff_tmp17);
              ra000_ffff_tmp194 = simd_and(basis_bits.bit_2, ra000_ffff_tmp193);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp194);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(149), sequence_ef_ae_adv));
              ra000_ffff_tmp195 = simd_and(sequence_ef_ae_adv, byte_range_80_b1);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp195);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp196 = simd_or(basis_bits.bit_2, ra000_ffff_tmp94);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp196);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(150), sequence_ef_af_adv));
              ra000_ffff_tmp197 = simd_and(sequence_ef_af_adv, byte_range_93_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp197);
              byte_range_b0_b3 = simd_andc(byte_range_b0_bf, r800_ffff_tmp1);
              byte_ef_byte_range_b0_b3 = simd_and(byte_ef_adv, byte_range_b0_b3);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_b0_b3, carryQ.get_carry_in(151), ra000_ffff_tmp198));
              byte_ef_byte_range_b0_b3_sfx = simd_and(ra000_ffff_tmp198, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_ef_byte_range_b0_b3_sfx);
              byte_b4 = simd_and(byte_range_b0_bf, r800_ffff_tmp4);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp199 = simd_and(basis_bits.bit_2, ra000_ffff_tmp156);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp199);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(152), sequence_ef_b4_adv));
              ra000_ffff_tmp200 = simd_and(sequence_ef_b4_adv, byte_range_80_bd);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp200);
              byte_b5 = simd_and(byte_range_b0_bf, ra000_ffff_tmp88);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(153), sequence_ef_b5_adv));
              ra000_ffff_tmp201 = simd_and(sequence_ef_b5_adv, byte_range_90_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp201);
              byte_b6 = simd_and(byte_range_b0_bf, ra000_ffff_tmp93);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp24;
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(154), sequence_ef_b6_adv));
              ra000_ffff_tmp202 = simd_and(sequence_ef_b6_adv, byte_range_80_8f);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp202);
              ra000_ffff_tmp203 = simd_or(basis_bits.bit_2, ra000_ffff_tmp193);
              byte_range_92_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp203);
              ra000_ffff_tmp204 = simd_and(sequence_ef_b6_adv, byte_range_92_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp204);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(155), sequence_ef_b7_adv));
              ra000_ffff_tmp205 = simd_and(sequence_ef_b7_adv, byte_range_80_87);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp205);
              byte_range_b0_bb = simd_andc(byte_range_b0_bf, ra000_ffff_tmp34);
              ra000_ffff_tmp206 = simd_and(sequence_ef_b7_adv, byte_range_b0_bb);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp206);
              byte_b9 = simd_and(byte_range_b0_bf, ra000_ffff_tmp41);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_range_b0_b4 = simd_andc(ra000_ffff_tmp117, r800_ffff_tmp16);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(156), sequence_ef_b9_adv));
              ra000_ffff_tmp207 = simd_and(sequence_ef_b9_adv, byte_range_b0_b4);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp207);
              byte_range_b6_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp13);
              ra000_ffff_tmp208 = simd_and(sequence_ef_b9_adv, byte_range_b6_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp208);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(157), sequence_ef_ba_adv));
              ra000_ffff_tmp209 = simd_and(sequence_ef_ba_adv, byte_range_80_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp209);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp210 = simd_and(basis_bits.bit_2, ra000_ffff_tmp91);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp210);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(158), sequence_ef_bb_adv));
              ra000_ffff_tmp211 = simd_and(sequence_ef_bb_adv, byte_range_80_bc);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp211);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp154);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_a6_af = simd_and(byte_range_a0_af, ra000_ffff_tmp13);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(159), sequence_ef_bd_adv));
              ra000_ffff_tmp212 = simd_and(sequence_ef_bd_adv, byte_range_a6_af);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp212);
              ra000_ffff_tmp213 = simd_or(basis_bits.bit_4, ra000_ffff_tmp107);
              byte_range_b1_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp213);
              ra000_ffff_tmp214 = simd_and(sequence_ef_bd_adv, byte_range_b1_bf);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp214);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(160), sequence_ef_be_adv));
              ra000_ffff_tmp215 = simd_and(sequence_ef_be_adv, byte_range_80_9d);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp215);
              byte_range_a0_be = simd_andc(byte_range_a0_bf, ra000_ffff_tmp181);
              ra000_ffff_tmp216 = simd_and(sequence_ef_be_adv, byte_range_a0_be);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp216);
              byte_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp49);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp14);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(161), sequence_ef_bf_adv));
              ra000_ffff_tmp217 = simd_and(sequence_ef_bf_adv, byte_range_82_87);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp217);
              ra000_ffff_tmp218 = simd_and(byte_range_80_8f, basis_bits.bit_4);
              byte_range_8a_8f = simd_and(ra000_ffff_tmp218, r800_ffff_tmp14);
              ra000_ffff_tmp219 = simd_and(sequence_ef_bf_adv, byte_range_8a_8f);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp219);
              byte_range_92_97 = simd_and(ra000_ffff_tmp143, r800_ffff_tmp14);
              ra000_ffff_tmp220 = simd_and(sequence_ef_bf_adv, byte_range_92_97);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp220);
              ra000_ffff_tmp221 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp133), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_9a_9c = simd_and(ra000_ffff_tmp132, ra000_ffff_tmp221);
              ra000_ffff_tmp222 = simd_and(sequence_ef_bf_adv, byte_range_9a_9c);
              struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, ra000_ffff_tmp222);
            }
            else {
              carryQ.CarryDequeueEnqueue(110, 52);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(15, 147);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(162, 95))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[162] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(162), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(163), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_80_8b = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(164), sequence_f0_90_80_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_80_adv, byte_range_80_8b);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp12);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_not(r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp17), simd_andc(r10000_10ffff_tmp19, basis_bits.bit_2));
            byte_range_8d_a6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_80_adv, byte_range_8d_a6);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp13);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp25), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            byte_range_a8_ba = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_80_adv, byte_range_a8_ba);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_bc_bd = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_80_adv, byte_range_bc_bd);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            byte_bf = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_80_adv, byte_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp33, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp34);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp35);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp36);
            carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(165), sequence_f0_90_81_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_90_81_adv, byte_range_80_8d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp37);
            byte_range_90_9d = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_81_adv, byte_range_90_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp39, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp40);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(166), sequence_f0_90_82_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp43);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp44 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp45 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp46 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp45);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp46);
            carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(167), sequence_f0_90_83_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp49 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp39);
            byte_8a = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp49);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp50 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            byte_range_80_9c = simd_andc(r10000_10ffff_tmp50, r10000_10ffff_tmp51);
            carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(168), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_8a_adv, byte_range_80_9c);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp52);
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_90_8a_adv, byte_range_a0_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp13);
            byte_8b = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp54);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp55 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp50, r10000_10ffff_tmp55);
            carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(169), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp57);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            byte_range_80_9f = r10000_10ffff_tmp50;
            carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(170), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_90_8c_adv, byte_range_80_9f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp58);
            byte_range_b0_bf = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp59 = simd_and(sequence_f0_90_8c_adv, byte_range_b0_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp33);
            byte_8d = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp60);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(171), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_90_8d_adv, byte_80);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp63 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp62);
            byte_range_82_89 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_and(sequence_f0_90_8d_adv, byte_range_82_89);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp64);
            r10000_10ffff_tmp65 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp35);
            r10000_10ffff_tmp66 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp65);
            r10000_10ffff_tmp67 = simd_not(r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp67), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_8d_adv, byte_range_90_b5);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp39);
            byte_8e = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp70);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp71 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_6);
            r10000_10ffff_tmp72 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp71);
            byte_range_80_9d = simd_andc(byte_range_80_9f, r10000_10ffff_tmp72);
            carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(172), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_8e_adv, byte_range_80_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(sequence_f0_90_8e_adv, byte_range_a0_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp74);
            byte_8f = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp31);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp42, r10000_10ffff_tmp1);
            carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(173), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp75 = simd_and(sequence_f0_90_8f_adv, byte_range_80_83);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp75);
            byte_range_88_8f = simd_and(r10000_10ffff_tmp42, basis_bits.bit_4);
            r10000_10ffff_tmp76 = simd_and(sequence_f0_90_8f_adv, byte_range_88_8f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp76);
            byte_91 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp34);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(174), sequence_f0_90_91_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_90_91_adv, byte_range_90_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp77);
            byte_92 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp40);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(175), sequence_f0_90_92_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_92_adv, byte_range_80_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp80 = simd_andc(r10000_10ffff_tmp79, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp80);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp81 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp82 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp81);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp82);
            carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(176), sequence_f0_90_94_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_90_94_adv, byte_range_80_a7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(sequence_f0_90_94_adv, byte_range_b0_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp79, r10000_10ffff_tmp33);
            byte_95 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp85);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp86 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp87 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp86);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp87);
            carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(177), sequence_f0_90_95_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_90_95_adv, byte_range_80_a3);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp88);
            byte_range_98_9b = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp48);
            sequence_f0_90_byte_range_98_9b = simd_and(sequence_f0_90_adv, byte_range_98_9b);
            carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_98_9b, carryQ.get_carry_in(178), r10000_10ffff_tmp89));
            sequence_f0_90_byte_range_98_9b_sfx = simd_and(r10000_10ffff_tmp89, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_90_byte_range_98_9b_sfx);
            byte_9c = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp57);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp90 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp91 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp90);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp91);
            carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(179), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_90_9c_adv, byte_range_80_b6);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp92);
            byte_9d = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp60);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_80_95 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp66);
            carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(180), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_90_9d_adv, byte_range_80_95);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp94, basis_bits.bit_4);
            r10000_10ffff_tmp95 = simd_and(sequence_f0_90_9d_adv, byte_range_a0_a7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp95);
            byte_a0 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp3);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp96 = simd_andc(r10000_10ffff_tmp42, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp96, r10000_10ffff_tmp35);
            carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(181), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_90_a0_adv, byte_range_80_85);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_and(sequence_f0_90_a0_adv, byte_88);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp62);
            r10000_10ffff_tmp101 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp100);
            r10000_10ffff_tmp102 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp67), simd_andc(r10000_10ffff_tmp101, basis_bits.bit_2));
            byte_range_8a_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(sequence_f0_90_a0_adv, byte_range_8a_b5);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp105 = simd_not(r10000_10ffff_tmp104);
            r10000_10ffff_tmp106 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp105), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp106);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_90_a0_adv, byte_range_b7_b8);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp107);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp57);
            r10000_10ffff_tmp108 = simd_and(sequence_f0_90_a0_adv, byte_bc);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp108);
            r10000_10ffff_tmp109 = simd_and(sequence_f0_90_a0_adv, byte_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp109);
            byte_a1 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp34);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(182), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp110 = simd_and(sequence_f0_90_a1_adv, byte_range_80_95);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp110);
            byte_range_a0_b6 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp90);
            r10000_10ffff_tmp111 = simd_and(sequence_f0_90_a1_adv, byte_range_a0_b6);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp111);
            byte_a2 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp40);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp31);
            byte_range_80_9e = simd_andc(byte_range_80_9f, r10000_10ffff_tmp112);
            carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(183), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp113 = simd_and(sequence_f0_90_a2_adv, byte_range_80_9e);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp113);
            byte_a4 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp80);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(184), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp114 = simd_and(sequence_f0_90_a4_adv, byte_range_80_95);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp114);
            r10000_10ffff_tmp115 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp100);
            byte_range_a0_b9 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp115);
            r10000_10ffff_tmp116 = simd_and(sequence_f0_90_a4_adv, byte_range_a0_b9);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(r10000_10ffff_tmp79, r10000_10ffff_tmp39);
            byte_a6 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp117);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp119 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp118);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp119);
            carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(185), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp120 = simd_and(sequence_f0_90_a6_adv, byte_range_80_b7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp120);
            byte_range_be_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp71);
            r10000_10ffff_tmp121 = simd_and(sequence_f0_90_a6_adv, byte_range_be_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp121);
            byte_a8 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp98);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(186), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp122 = simd_and(sequence_f0_90_a8_adv, byte_80);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp122);
            byte_range_90_93 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp1);
            r10000_10ffff_tmp123 = simd_and(sequence_f0_90_a8_adv, byte_range_90_93);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp79);
            byte_range_95_97 = simd_and(r10000_10ffff_tmp124, r10000_10ffff_tmp2);
            r10000_10ffff_tmp125 = simd_and(sequence_f0_90_a8_adv, byte_range_95_97);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp127 = simd_not(r10000_10ffff_tmp126);
            r10000_10ffff_tmp128 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp104);
            r10000_10ffff_tmp129 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp127), simd_andc(r10000_10ffff_tmp129, basis_bits.bit_2));
            byte_range_99_b3 = simd_and(byte_range_80_bf, r10000_10ffff_tmp130);
            r10000_10ffff_tmp131 = simd_and(sequence_f0_90_a8_adv, byte_range_99_b3);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp131);
            r10000_10ffff_tmp132 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp33);
            byte_a9 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp132);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp51);
            carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(187), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bc);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp133);
            byte_aa = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp49);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(188), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_90_aa_adv, byte_range_80_9c);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp134);
            byte_ab = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp54);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp96;
            carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(189), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_90_ab_adv, byte_range_80_87);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp135);
            r10000_10ffff_tmp136 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp137 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp136);
            r10000_10ffff_tmp138 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_not(r10000_10ffff_tmp138);
            r10000_10ffff_tmp140 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp128);
            r10000_10ffff_tmp141 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp139), simd_andc(r10000_10ffff_tmp140, basis_bits.bit_2));
            byte_range_89_a4 = simd_and(byte_range_80_bf, r10000_10ffff_tmp141);
            r10000_10ffff_tmp142 = simd_and(sequence_f0_90_ab_adv, byte_range_89_a4);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp142);
            byte_ac = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp57);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp143 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp66);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp143);
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(190), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_90_ac_adv, byte_range_80_b5);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp144);
            byte_ad = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp60);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(191), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp145 = simd_and(sequence_f0_90_ad_adv, byte_range_80_95);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp145);
            r10000_10ffff_tmp146 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp13);
            r10000_10ffff_tmp147 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp146);
            byte_range_a0_b2 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_and(sequence_f0_90_ad_adv, byte_range_a0_b2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp148);
            byte_ae = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp70);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp149 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp150 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp149);
            byte_range_80_91 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp150);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(192), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_90_ae_adv, byte_range_80_91);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp151);
            byte_b0 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp3);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(193), sequence_f0_90_b0_adv));
            r10000_10ffff_tmp152 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp152);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp34);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp42, r10000_10ffff_tmp128);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(194), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp153 = simd_and(sequence_f0_90_b1_adv, byte_range_80_88);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp153);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(195), r10000_10ffff_tmp154));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp154, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp154;
            r10000_10ffff_tmp155 = simd_not(r10000_10ffff_tmp118);
            r10000_10ffff_tmp156 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp146);
            r10000_10ffff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_83_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp157);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(196), sequence_f0_91_80_adv));
            r10000_10ffff_tmp158 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp158);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp159 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp160 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp159), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_83_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp160);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(197), sequence_f0_91_82_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp161);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp162 = simd_not(r10000_10ffff_tmp140);
            r10000_10ffff_tmp163 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp162), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp163);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(198), sequence_f0_91_83_adv));
            r10000_10ffff_tmp164 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp164);
            byte_84 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp80);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp165 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp17), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_83_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp165);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(199), sequence_f0_91_84_adv));
            r10000_10ffff_tmp166 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp166);
            byte_85 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp85);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp167 = simd_not(r10000_10ffff_tmp147);
            r10000_10ffff_tmp168 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp167), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp168);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(200), sequence_f0_91_85_adv));
            r10000_10ffff_tmp169 = simd_and(sequence_f0_91_85_adv, byte_range_90_b2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp169);
            byte_b6 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp117);
            r10000_10ffff_tmp170 = simd_and(sequence_f0_91_85_adv, byte_b6);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp170);
            byte_86 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp117);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp171 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp167), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_83_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp171);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(201), sequence_f0_91_86_adv));
            r10000_10ffff_tmp172 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp172);
            r10000_10ffff_tmp173 = simd_and(r10000_10ffff_tmp79, r10000_10ffff_tmp13);
            byte_87 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp173);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp174 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_81_84 = simd_and(byte_range_80_87, r10000_10ffff_tmp174);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(202), sequence_f0_91_87_adv));
            r10000_10ffff_tmp175 = simd_and(sequence_f0_91_87_adv, byte_range_81_84);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp175);
            byte_9a = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp49);
            r10000_10ffff_tmp176 = simd_and(sequence_f0_91_87_adv, byte_9a);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp176);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(203), sequence_f0_91_88_adv));
            r10000_10ffff_tmp177 = simd_and(sequence_f0_91_88_adv, byte_range_80_91);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp177);
            r10000_10ffff_tmp178 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp179 = simd_not(r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp179), simd_andc(r10000_10ffff_tmp147, basis_bits.bit_2));
            byte_range_93_ab = simd_and(byte_range_80_bf, r10000_10ffff_tmp180);
            r10000_10ffff_tmp181 = simd_and(sequence_f0_91_88_adv, byte_range_93_ab);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp181);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(204), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp182);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(205), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp183 = simd_and(sequence_f0_91_8b_adv, byte_range_80_9e);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp183);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp184 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp136);
            byte_range_85_8c = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp184);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(206), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_91_8c_adv, byte_range_85_8c);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp185);
            r10000_10ffff_tmp186 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp187 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp186), simd_andc(r10000_10ffff_tmp31, basis_bits.bit_3));
            byte_range_8f_90 = simd_and(byte_range_80_9f, r10000_10ffff_tmp187);
            r10000_10ffff_tmp188 = simd_and(sequence_f0_91_8c_adv, byte_range_8f_90);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp188);
            r10000_10ffff_tmp189 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp162), simd_andc(r10000_10ffff_tmp147, basis_bits.bit_2));
            byte_range_93_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp189);
            r10000_10ffff_tmp190 = simd_and(sequence_f0_91_8c_adv, byte_range_93_a8);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp190);
            r10000_10ffff_tmp191 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp186), simd_andc(r10000_10ffff_tmp100, basis_bits.bit_3));
            byte_range_aa_b0 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp191);
            r10000_10ffff_tmp192 = simd_and(sequence_f0_91_8c_adv, byte_range_aa_b0);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp192);
            r10000_10ffff_tmp193 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_b2_b3 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp193);
            r10000_10ffff_tmp194 = simd_and(sequence_f0_91_8c_adv, byte_range_b2_b3);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp194);
            r10000_10ffff_tmp195 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp196 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp195), simd_andc(r10000_10ffff_tmp136, basis_bits.bit_4));
            byte_range_b5_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp196);
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_8c_adv, byte_range_b5_b9);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp197);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp60);
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_8c_adv, byte_bd);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp198);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp199 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp149);
            r10000_10ffff_tmp200 = simd_not(r10000_10ffff_tmp199);
            r10000_10ffff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp200), simd_andc(r10000_10ffff_tmp51, basis_bits.bit_2));
            byte_range_9d_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp201);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(207), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp202 = simd_and(sequence_f0_91_8d_adv, byte_range_9d_a1);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp202);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(208), sequence_f0_91_92_adv));
            r10000_10ffff_tmp203 = simd_and(sequence_f0_91_92_adv, byte_range_80_af);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp203);
            byte_93 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp43);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp204 = simd_andc(r10000_10ffff_tmp79, basis_bits.bit_6);
            byte_range_84_85 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp204);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(209), sequence_f0_91_93_adv));
            r10000_10ffff_tmp205 = simd_and(sequence_f0_91_93_adv, byte_range_84_85);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp205);
            r10000_10ffff_tmp206 = simd_and(sequence_f0_91_93_adv, byte_87);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp206);
            byte_96 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp117);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp207 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp31);
            r10000_10ffff_tmp208 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp207);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp208);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(210), sequence_f0_91_96_adv));
            r10000_10ffff_tmp209 = simd_and(sequence_f0_91_96_adv, byte_range_80_ae);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp209);
            byte_98 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp98);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(211), sequence_f0_91_98_adv));
            r10000_10ffff_tmp210 = simd_and(sequence_f0_91_98_adv, byte_range_80_af);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp210);
            byte_99 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp132);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(212), sequence_f0_91_99_adv));
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_99_adv, byte_84);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp211);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp212 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp213 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp212);
            byte_range_80_aa = simd_andc(byte_range_80_bf, r10000_10ffff_tmp213);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(213), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp214 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp214);
            byte_a3 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp43);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(214), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_a3_adv, byte_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp215);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp216 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp129);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp216);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(215), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp217);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(216), r10000_10ffff_tmp218));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp218, byte_range_80_8d);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(217), r10000_10ffff_tmp219));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp219, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp218, byte_8e);
            sequence_f0_92_adv = r10000_10ffff_tmp218;
            byte_range_80_98 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp129);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(218), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp220 = simd_and(sequence_f0_92_8e_adv, byte_range_80_98);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp220);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp42;
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(219), r10000_10ffff_tmp221));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp221, byte_range_80_8f);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(220), r10000_10ffff_tmp222));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp222, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp221, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp221;
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(221), sequence_f0_93_90_adv));
            r10000_10ffff_tmp223 = simd_and(sequence_f0_93_90_adv, byte_range_80_ae);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp223);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(222), r10000_10ffff_tmp224));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp224, byte_range_a0_a7);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(223), r10000_10ffff_tmp225));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp225, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp224, byte_a8);
            sequence_f0_96_adv = r10000_10ffff_tmp224;
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(224), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp226 = simd_and(sequence_f0_96_a8_adv, byte_range_80_b8);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp226);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(225), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_96_a9_adv, byte_range_80_9e);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp227);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp228 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp71);
            r10000_10ffff_tmp229 = simd_not(r10000_10ffff_tmp228);
            r10000_10ffff_tmp230 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp229), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp230);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(226), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp231 = simd_and(sequence_f0_96_ab_adv, byte_range_90_ad);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp231);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(227), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp232 = simd_and(sequence_f0_96_ac_adv, byte_range_80_af);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp232);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            r10000_10ffff_tmp233 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp234 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp233), simd_andc(r10000_10ffff_tmp146, basis_bits.bit_3));
            byte_range_a3_b7 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp234);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(228), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp235 = simd_and(sequence_f0_96_ad_adv, byte_range_a3_b7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp235);
            r10000_10ffff_tmp236 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp11);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp236, r10000_10ffff_tmp2);
            r10000_10ffff_tmp237 = simd_and(sequence_f0_96_ad_adv, byte_range_bd_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp237);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(229), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp238 = simd_and(sequence_f0_96_ae_adv, byte_range_80_8f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp238);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(230), sequence_f0_96_bc_adv));
            r10000_10ffff_tmp239 = simd_and(sequence_f0_96_bc_adv, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp239);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp240 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp240, r10000_10ffff_tmp136);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(231), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp241 = simd_and(sequence_f0_96_bd_adv, byte_range_80_84);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp241);
            r10000_10ffff_tmp242 = simd_and(sequence_f0_96_bd_adv, byte_90);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp242);
            byte_9b = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp54);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(232), r10000_10ffff_tmp243));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp243, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp243;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp149);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(233), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp244 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp244);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(234), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp245 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp245);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(235), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp246 = simd_and(sequence_f0_9b_b1_adv, byte_range_80_aa);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp246);
            r10000_10ffff_tmp247 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp136);
            byte_range_b0_bc = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp247);
            r10000_10ffff_tmp248 = simd_and(sequence_f0_9b_b1_adv, byte_range_b0_bc);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp248);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp40);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(236), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp249 = simd_and(sequence_f0_9b_b2_adv, byte_range_80_88);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp249);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp100);
            r10000_10ffff_tmp250 = simd_and(sequence_f0_9b_b2_adv, byte_range_90_99);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp250);
            byte_9e = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp70);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp251 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp1);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp251, r10000_10ffff_tmp13);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(237), r10000_10ffff_tmp252));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp252, byte_range_a0_a2);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(238), r10000_10ffff_tmp253));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp253, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp252, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp252;
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(239), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp254 = simd_and(sequence_f0_9e_a3_adv, byte_range_80_84);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp254);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp98);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(240), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp255 = simd_and(sequence_f0_9e_b8_adv, byte_range_80_83);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp255);
            byte_range_85_9f = simd_and(byte_range_80_9f, r10000_10ffff_tmp138);
            r10000_10ffff_tmp256 = simd_and(sequence_f0_9e_b8_adv, byte_range_85_9f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp256);
            r10000_10ffff_tmp257 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a1_a2 = simd_and(r10000_10ffff_tmp251, r10000_10ffff_tmp257);
            r10000_10ffff_tmp258 = simd_and(sequence_f0_9e_b8_adv, byte_range_a1_a2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp258);
            r10000_10ffff_tmp259 = simd_and(sequence_f0_9e_b8_adv, byte_a4);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp259);
            byte_a7 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp173);
            r10000_10ffff_tmp260 = simd_and(sequence_f0_9e_b8_adv, byte_a7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp260);
            r10000_10ffff_tmp261 = simd_not(r10000_10ffff_tmp146);
            r10000_10ffff_tmp262 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp261), simd_andc(r10000_10ffff_tmp128, basis_bits.bit_3));
            byte_range_a9_b2 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp262);
            r10000_10ffff_tmp263 = simd_and(sequence_f0_9e_b8_adv, byte_range_a9_b2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp263);
            byte_range_b4_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp79);
            r10000_10ffff_tmp264 = simd_and(sequence_f0_9e_b8_adv, byte_range_b4_b7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp264);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp132);
            r10000_10ffff_tmp265 = simd_and(sequence_f0_9e_b8_adv, byte_b9);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp265);
            byte_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp54);
            r10000_10ffff_tmp266 = simd_and(sequence_f0_9e_b8_adv, byte_bb);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp266);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(241), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp267 = simd_and(sequence_f0_9e_b9_adv, byte_82);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp267);
            r10000_10ffff_tmp268 = simd_and(sequence_f0_9e_b9_adv, byte_87);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp268);
            byte_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp132);
            r10000_10ffff_tmp269 = simd_and(sequence_f0_9e_b9_adv, byte_89);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp269);
            r10000_10ffff_tmp270 = simd_and(sequence_f0_9e_b9_adv, byte_8b);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp270);
            r10000_10ffff_tmp271 = simd_and(byte_range_80_8f, r10000_10ffff_tmp11);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp271, r10000_10ffff_tmp2);
            r10000_10ffff_tmp272 = simd_and(sequence_f0_9e_b9_adv, byte_range_8d_8f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp272);
            byte_range_91_92 = simd_and(byte_range_90_93, r10000_10ffff_tmp257);
            r10000_10ffff_tmp273 = simd_and(sequence_f0_9e_b9_adv, byte_range_91_92);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp273);
            r10000_10ffff_tmp274 = simd_and(sequence_f0_9e_b9_adv, byte_94);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp274);
            byte_97 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp173);
            r10000_10ffff_tmp275 = simd_and(sequence_f0_9e_b9_adv, byte_97);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp275);
            r10000_10ffff_tmp276 = simd_and(sequence_f0_9e_b9_adv, byte_99);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp276);
            r10000_10ffff_tmp277 = simd_and(sequence_f0_9e_b9_adv, byte_9b);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp277);
            r10000_10ffff_tmp278 = simd_and(sequence_f0_9e_b9_adv, byte_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp278);
            byte_9f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp31);
            r10000_10ffff_tmp279 = simd_and(sequence_f0_9e_b9_adv, byte_9f);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp279);
            r10000_10ffff_tmp280 = simd_and(sequence_f0_9e_b9_adv, byte_range_a1_a2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp280);
            r10000_10ffff_tmp281 = simd_and(sequence_f0_9e_b9_adv, byte_a4);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp281);
            r10000_10ffff_tmp282 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp283 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp282), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4));
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp283);
            r10000_10ffff_tmp284 = simd_and(sequence_f0_9e_b9_adv, byte_range_a7_aa);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp284);
            r10000_10ffff_tmp285 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp261), simd_andc(r10000_10ffff_tmp11, basis_bits.bit_3));
            byte_range_ac_b2 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp285);
            r10000_10ffff_tmp286 = simd_and(sequence_f0_9e_b9_adv, byte_range_ac_b2);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp286);
            r10000_10ffff_tmp287 = simd_and(sequence_f0_9e_b9_adv, byte_range_b4_b7);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp287);
            r10000_10ffff_tmp288 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_b9_bc = simd_and(r10000_10ffff_tmp288, r10000_10ffff_tmp174);
            r10000_10ffff_tmp289 = simd_and(sequence_f0_9e_b9_adv, byte_range_b9_bc);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp289);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp70);
            r10000_10ffff_tmp290 = simd_and(sequence_f0_9e_b9_adv, byte_be);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp290);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp49);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            byte_range_80_89 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp100);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(242), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9e_ba_adv, byte_range_80_89);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp291);
            r10000_10ffff_tmp292 = simd_not(r10000_10ffff_tmp11);
            r10000_10ffff_tmp293 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp292), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_3));
            byte_range_8b_9b = simd_and(byte_range_80_9f, r10000_10ffff_tmp293);
            r10000_10ffff_tmp294 = simd_and(sequence_f0_9e_ba_adv, byte_range_8b_9b);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp294);
            byte_range_a1_a3 = simd_and(r10000_10ffff_tmp251, r10000_10ffff_tmp2);
            r10000_10ffff_tmp295 = simd_and(sequence_f0_9e_ba_adv, byte_range_a1_a3);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp295);
            byte_range_a5_a9 = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp196);
            r10000_10ffff_tmp296 = simd_and(sequence_f0_9e_ba_adv, byte_range_a5_a9);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp296);
            byte_range_ab_bb = simd_and(byte_range_a0_bf, r10000_10ffff_tmp293);
            r10000_10ffff_tmp297 = simd_and(sequence_f0_9e_ba_adv, byte_range_ab_bb);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp297);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp94, r10000_10ffff_tmp100);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(243), r10000_10ffff_tmp298));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp298, byte_range_80_bf);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(244), r10000_10ffff_tmp299));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp299, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            byte_range_80_9a = simd_andc(byte_range_80_9f, r10000_10ffff_tmp45);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(245), r10000_10ffff_tmp300));
            sequence_f0_aa_byte_range_80_9a = simd_and(r10000_10ffff_tmp300, byte_range_80_9a);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_80_9a, carryQ.get_carry_in(246), r10000_10ffff_tmp301));
            sequence_f0_aa_byte_range_80_9a_sfx = simd_and(r10000_10ffff_tmp301, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_aa_byte_range_80_9a_sfx);
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp300, byte_9b);
            sequence_f0_aa_adv = r10000_10ffff_tmp300;
            byte_range_80_96 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp90);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(247), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp302 = simd_and(sequence_f0_aa_9b_adv, byte_range_80_96);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp302);
            r10000_10ffff_tmp303 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp304 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp303);
            byte_range_9c_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp304);
            sequence_f0_aa_byte_range_9c_bf = simd_and(sequence_f0_aa_adv, byte_range_9c_bf);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_9c_bf, carryQ.get_carry_in(248), r10000_10ffff_tmp305));
            sequence_f0_aa_byte_range_9c_bf_sfx = simd_and(r10000_10ffff_tmp305, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_aa_byte_range_9c_bf_sfx);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            byte_range_80_9b = simd_andc(byte_range_80_9f, r10000_10ffff_tmp303);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(249), r10000_10ffff_tmp306));
            sequence_f0_ab_byte_range_80_9b = simd_and(r10000_10ffff_tmp306, byte_range_80_9b);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_80_9b, carryQ.get_carry_in(250), r10000_10ffff_tmp307));
            sequence_f0_ab_byte_range_80_9b_sfx = simd_and(r10000_10ffff_tmp307, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_ab_byte_range_80_9b_sfx);
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp306, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp306;
            r10000_10ffff_tmp308 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp137);
            r10000_10ffff_tmp309 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp308);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp309);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(251), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp310 = simd_and(sequence_f0_ab_9c_adv, byte_range_80_b4);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp310);
            r10000_10ffff_tmp311 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp11);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp311, r10000_10ffff_tmp2);
            sequence_f0_ab_byte_range_9d_9f = simd_and(sequence_f0_ab_adv, byte_range_9d_9f);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_9d_9f, carryQ.get_carry_in(252), r10000_10ffff_tmp312));
            sequence_f0_ab_byte_range_9d_9f_sfx = simd_and(r10000_10ffff_tmp312, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_ab_byte_range_9d_9f_sfx);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(253), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp313 = simd_and(sequence_f0_ab_a0_adv, byte_range_80_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp313);
            byte_af = simd_and(r10000_10ffff_tmp94, r10000_10ffff_tmp31);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(254), r10000_10ffff_tmp314));
            sequence_f0_af_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp314, byte_range_a0_a7);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a0_a7, carryQ.get_carry_in(255), r10000_10ffff_tmp315));
            sequence_f0_af_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp315, byte_range_80_bf);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, sequence_f0_af_byte_range_a0_a7_sfx);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp314, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp314;
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(256), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp316 = simd_and(sequence_f0_af_a8_adv, byte_range_80_9d);
            struct_gc_Lo.cc = simd_or(struct_gc_Lo.cc, r10000_10ffff_tmp316);
          }
          else {
            carryQ.CarryDequeueEnqueue(162, 95);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 257);
        }
        carryQ.CarryQ_Adjust(257);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<257, 0> carryQ;
  };

  struct Property_gc_Nd {
  Property_gc_Nd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Nd & struct_gc_Nd) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, byte_range_30_39, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d9;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, byte_range_a0_a9;
		BitBlock byte_d9_adv, r600_6ff_tmp6, r600_6ff_tmp7, r600_6ff_tmp8, byte_db;
		BitBlock r600_6ff_tmp9, byte_range_b0_b9, byte_db_adv, r600_6ff_tmp10;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3;
		BitBlock byte_range_80_89, byte_df_adv, r7c0_7ff_tmp4, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3;
		BitBlock byte_a5, r800_fff_tmp4, sequence_e0_a5, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, byte_range_a6_af, sequence_e0_a5_adv, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, byte_a7, sequence_e0_a7;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock byte_a9, sequence_e0_a9, sequence_e0_a9_adv, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, byte_ab, sequence_e0_ab, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock byte_af, sequence_e0_af, sequence_e0_af_adv, r800_fff_tmp20;
		BitBlock r800_fff_tmp21, r800_fff_tmp22, byte_b1, sequence_e0_b1;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp23, r800_fff_tmp24, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp25, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp26, byte_b7;
		BitBlock sequence_e0_b7, sequence_e0_b7_adv, r800_fff_tmp27, byte_b9;
		BitBlock sequence_e0_b9, r800_fff_tmp28, r800_fff_tmp29, byte_range_90_99;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp30, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp31, r800_fff_tmp32, byte_bc;
		BitBlock sequence_e0_bc, sequence_e0_bc_adv, r800_fff_tmp33, r800_1fff_tmp2;
		BitBlock r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_81;
		BitBlock r1000_1fff_tmp3, sequence_e1_81, byte_e1_adv, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_82;
		BitBlock sequence_e1_82, r1000_1fff_tmp7, r1000_1fff_tmp8, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock byte_9f, sequence_e1_9f, r1000_1fff_tmp13, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp14, byte_a0, sequence_e1_a0, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, sequence_e1_a5, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_range_86_8f, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, sequence_e1_a7;
		BitBlock sequence_e1_a7_adv, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_aa, sequence_e1_aa, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26, sequence_e1_ad;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp27, r1000_1fff_tmp28, byte_ae;
		BitBlock sequence_e1_ae, r1000_1fff_tmp29, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp30, sequence_e1_b1, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r800_ffff_tmp11, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, byte_98;
		BitBlock ra000_ffff_tmp7, sequence_ea_98, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_a3, sequence_ea_a3, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp12, byte_a4, sequence_ea_a4, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, sequence_ea_a4_adv, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, sequence_ea_a7, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, sequence_ea_a9;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, sequence_ea_af, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp25, byte_ef, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock sequence_ef_bc, byte_ef_adv, sequence_ef_bc_adv, ra000_ffff_tmp28;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_92, r10000_10ffff_tmp10;
		BitBlock sequence_f0_90_92, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_92_adv, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_91, sequence_f0_91;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, sequence_f0_91_81_adv, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_83, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp23, sequence_f0_91_83_adv, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, byte_84, sequence_f0_91_84;
		BitBlock byte_range_b6_bf, sequence_f0_91_84_adv, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, byte_87, sequence_f0_91_87;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_8b, sequence_f0_91_8b;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp32, byte_93;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, byte_99, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp35, byte_9b;
		BitBlock sequence_f0_91_9b, sequence_f0_91_9b_adv, r10000_10ffff_tmp36;
		BitBlock sequence_f0_91_a3, sequence_f0_91_a3_adv, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, byte_96, sequence_f0_96, r10000_10ffff_tmp39;
		BitBlock sequence_f0_96_a9, sequence_f0_96_adv, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock sequence_f0_96_ad, sequence_f0_96_ad_adv, r10000_10ffff_tmp43;
		BitBlock byte_9d, sequence_f0_9d, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock sequence_f0_9d_9f, sequence_f0_9d_adv, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, byte_range_8e_bf;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp49;




        struct_gc_Nd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        byte_range_30_39 = simd_andc(tmp3, tmp5);
        struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, byte_range_30_39);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 56))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(0, 2))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp2, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp5 = simd_and(r600_6ff_tmp3, r600_6ff_tmp4);
              byte_range_a0_a9 = simd_andc(r600_6ff_tmp5, tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(0), byte_d9_adv));
              r600_6ff_tmp6 = simd_and(byte_d9_adv, byte_range_a0_a9);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp8 = simd_and(r80_7ff_tmp3, r600_6ff_tmp7);
              byte_db = simd_and(r80_7ff_tmp2, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_and(r600_6ff_tmp3, tmp2);
              byte_range_b0_b9 = simd_andc(r600_6ff_tmp9, tmp5);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(1), byte_db_adv));
              r600_6ff_tmp10 = simd_and(byte_db_adv, byte_range_b0_b9);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r600_6ff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(2, 1))) {
              r780_7ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp4, r780_7ff_tmp1);
              byte_df = simd_and(r80_7ff_tmp2, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(2, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                r7c0_7ff_tmp3 = simd_andc(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                byte_range_80_89 = simd_andc(r7c0_7ff_tmp3, tmp5);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(2), byte_df_adv));
                r7c0_7ff_tmp4 = simd_and(byte_df_adv, byte_range_80_89);
                struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r7c0_7ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 35))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 25))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 25))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(4, 14))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(4), r800_fff_tmp4));
                  sequence_e0_a5 = simd_and(r800_fff_tmp4, byte_a5);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_or(basis_bits.bit_4, r800_fff_tmp5);
                  byte_range_a6_af = simd_and(r800_fff_tmp1, r800_fff_tmp6);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(5), sequence_e0_a5_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a5_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp9);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(6), sequence_e0_a7_adv));
                  r800_fff_tmp10 = simd_and(sequence_e0_a7_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp11, r800_fff_tmp2);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(7), sequence_e0_a9_adv));
                  r800_fff_tmp13 = simd_and(sequence_e0_a9_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_and(r800_fff_tmp11, r800_fff_tmp8);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp14);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(8), sequence_e0_ab_adv));
                  r800_fff_tmp15 = simd_and(sequence_e0_ab_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp17 = simd_and(r800_fff_tmp16, r800_fff_tmp2);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(9), sequence_e0_ad_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_ad_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp16, r800_fff_tmp8);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp19);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(10), sequence_e0_af_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_af_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(r800_ffff_tmp5, tmp2);
                  r800_fff_tmp22 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp21, r800_fff_tmp22);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(11), sequence_e0_b1_adv));
                  r800_fff_tmp23 = simd_and(sequence_e0_b1_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  byte_b3 = simd_and(r800_fff_tmp21, r800_fff_tmp24);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(12), sequence_e0_b3_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_b3_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp25);
                  byte_b5 = simd_and(r800_fff_tmp21, r800_fff_tmp3);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(13), sequence_e0_b5_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_b5_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp26);
                  byte_b7 = simd_and(r800_fff_tmp21, r800_fff_tmp9);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(14), sequence_e0_b7_adv));
                  r800_fff_tmp27 = simd_and(sequence_e0_b7_adv, byte_range_a6_af);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp27);
                  byte_b9 = simd_and(r800_fff_tmp21, r800_fff_tmp12);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp28 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp29 = simd_and(r800_ffff_tmp5, r800_fff_tmp28);
                  byte_range_90_99 = simd_andc(r800_fff_tmp29, tmp5);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(15), sequence_e0_b9_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_b9_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp30);
                  byte_bb = simd_and(r800_fff_tmp21, r800_fff_tmp14);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(16), sequence_e0_bb_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_bb_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_andc(r800_fff_tmp16, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp21, r800_fff_tmp32);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  byte_range_a0_a9 = simd_andc(r800_fff_tmp1, tmp5);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(17), sequence_e0_bc_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_bc_adv, byte_range_a0_a9);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r800_fff_tmp33);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 14);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(18, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r1000_1fff_tmp3));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp3, byte_81);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp2, tmp5);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(19), sequence_e1_81_adv));
                  r1000_1fff_tmp4 = simd_and(sequence_e1_81_adv, byte_range_80_89);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp4);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp6);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp7);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp8, tmp5);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(20), sequence_e1_82_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_82_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp11);
                  byte_9f = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp12);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a9 = simd_andc(r1000_1fff_tmp13, tmp5);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(21), sequence_e1_9f_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_9f_adv, byte_range_a0_a9);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp14);
                  byte_a0 = simd_andc(r1000_1fff_tmp13, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(22), sequence_e1_a0_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_a0_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp18 = simd_or(basis_bits.bit_4, r1000_1fff_tmp17);
                  byte_range_86_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp18);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(23), sequence_e1_a5_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_a5_adv, byte_range_86_8f);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp11);
                  byte_a7 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp20);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(24), sequence_e1_a7_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_a7_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp5);
                  byte_aa = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp23);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(25), sequence_e1_aa_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_aa_adv, byte_range_80_89);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_aa_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp10, r800_1fff_tmp2);
                  byte_ad = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp26);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(26), sequence_e1_ad_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_ad_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp5);
                  byte_ae = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp28);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_range_b0_b9 = simd_andc(r1000_1fff_tmp29, tmp5);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(27), sequence_e1_ae_adv));
                  r1000_1fff_tmp30 = simd_and(sequence_e1_ae_adv, byte_range_b0_b9);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp30);
                  byte_b1 = simd_and(r1000_1fff_tmp29, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(28), sequence_e1_b1_adv));
                  r1000_1fff_tmp31 = simd_and(sequence_e1_b1_adv, byte_range_80_89);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_b1_adv, byte_range_90_99);
                  struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r1000_1fff_tmp32);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 25);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 25);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, tmp4);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(29, 9))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(29), ra000_ffff_tmp7));
              sequence_ea_98 = simd_and(ra000_ffff_tmp7, byte_98);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              byte_range_a0_a9 = simd_andc(ra000_ffff_tmp8, tmp5);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(30), sequence_ea_98_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_98_adv, byte_range_a0_a9);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp11);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp5, tmp5);
              carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(31), sequence_ea_a3_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_a3_adv, byte_range_90_99);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp12);
              byte_a4 = simd_and(ra000_ffff_tmp8, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp14 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp13);
              byte_range_80_89 = simd_andc(ra000_ffff_tmp14, tmp5);
              carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(32), sequence_ea_a4_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_a4_adv, byte_range_80_89);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_a7 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp16);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(33), sequence_ea_a7_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_a7_adv, byte_range_90_99);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp5, tmp2);
              byte_range_b0_b9 = simd_andc(ra000_ffff_tmp18, tmp5);
              ra000_ffff_tmp19 = simd_and(sequence_ea_a7_adv, byte_range_b0_b9);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp20);
              byte_a9 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp21);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(34), sequence_ea_a9_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_a9_adv, byte_range_90_99);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp10);
              byte_af = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp24);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(35), sequence_ea_af_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_af_adv, byte_range_b0_b9);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp25);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_andc(ra000_ffff_tmp23, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp26);
              carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(36), ra000_ffff_tmp27));
              sequence_ef_bc = simd_and(ra000_ffff_tmp27, byte_bc);
              byte_ef_adv = ra000_ffff_tmp27;
              carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(37), sequence_ef_bc_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ef_bc_adv, byte_range_90_99);
              struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, ra000_ffff_tmp28);
            }
            else {
              carryQ.CarryDequeueEnqueue(29, 9);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 35);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(38, 18))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(38), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(39), r10000_10ffff_tmp10));
            sequence_f0_90_92 = simd_and(r10000_10ffff_tmp10, byte_92);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp11, tmp5);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(40), sequence_f0_90_92_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_92_adv, byte_range_a0_a9);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp12);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp14);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp15);
            byte_81 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp14);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(41), r10000_10ffff_tmp17));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp17, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp17;
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp18);
            byte_range_a6_af = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp19);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(42), sequence_f0_91_81_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_81_adv, byte_range_a6_af);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp22);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp4, tmp2);
            byte_range_b0_b9 = simd_andc(r10000_10ffff_tmp23, tmp5);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(43), sequence_f0_91_83_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_91_83_adv, byte_range_b0_b9);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp26 = simd_andc(r10000_10ffff_tmp25, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp26);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            byte_range_b6_bf = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp19);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(44), sequence_f0_91_84_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_91_84_adv, byte_range_b6_bf);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp21);
            byte_87 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp28);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp6, tmp5);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(45), sequence_f0_91_87_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_91_87_adv, byte_range_90_99);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp21);
            byte_8b = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp31);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(46), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_91_8b_adv, byte_range_b0_b9);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp32);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp22);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(47), sequence_f0_91_93_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_91_93_adv, byte_range_90_99);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp13);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp34);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(48), sequence_f0_91_99_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_91_99_adv, byte_range_90_99);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp35);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp31);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp16, tmp5);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(49), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp36);
            byte_a3 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp22);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(50), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_91_a3_adv, byte_range_a0_a9);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_a9 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp34);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(51), r10000_10ffff_tmp39));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp39, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp39;
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(52), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_96_a9_adv, byte_range_a0_a9);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp13);
            byte_ad = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp42);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(53), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_96_ad_adv, byte_range_90_99);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp43);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp42);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp21);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp44);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(54), r10000_10ffff_tmp45));
            sequence_f0_9d_9f = simd_and(r10000_10ffff_tmp45, byte_9f);
            sequence_f0_9d_adv = r10000_10ffff_tmp45;
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp41, basis_bits.bit_6);
            r10000_10ffff_tmp47 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp47);
            byte_range_8e_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp48);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(55), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_9d_9f_adv, byte_range_8e_bf);
            struct_gc_Nd.cc = simd_or(struct_gc_Nd.cc, r10000_10ffff_tmp49);
          }
          else {
            carryQ.CarryDequeueEnqueue(38, 18);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 56);
        }
        carryQ.CarryQ_Adjust(56);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<56, 0> carryQ;
  };

  struct Property_gc_P {
  Property_gc_P() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_P & struct_gc_P) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40, tmp41;
		BitBlock tmp42, tmp43, tmp44, tmp45, tmp46, tmp47, tmp48, tmp49;
		BitBlock cc_range_21_7d_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, byte_a1, byte_c2_adv, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock r80_7ff_tmp9, byte_a7, r80_7ff_tmp10, byte_ab, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, byte_range_b6_b7, r80_7ff_tmp14;
		BitBlock byte_bb, r80_7ff_tmp15, byte_bf, r80_7ff_tmp16, byte_range_c4_cf;
		BitBlock byte_cd, byte_range_b0_bf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_range_ce_cf, r100_3ff_tmp4, r370_3ff_tmp1;
		BitBlock byte_be, byte_cd_adv, r370_3ff_tmp2, byte_ce, r370_3ff_tmp3, byte_87;
		BitBlock byte_ce_adv, r370_3ff_tmp4, r80_7ff_tmp17, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock byte_range_80_8f, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock byte_d5, r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock r530_58f_tmp3, byte_range_9a_9f, byte_d5_adv, r530_58f_tmp4;
		BitBlock r530_58f_tmp5, r530_58f_tmp6, byte_range_89_8a, byte_d6_adv;
		BitBlock r530_58f_tmp7, byte_range_90_bf, r400_5ff_tmp6, byte_d7;
		BitBlock r400_5ff_tmp7, r590_5ff_tmp1, r590_5ff_tmp2, byte_80, byte_d7_adv;
		BitBlock r590_5ff_tmp3, r590_5ff_tmp4, byte_83, r590_5ff_tmp5, byte_86;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, r590_5ff_tmp8, r590_5ff_tmp9;
		BitBlock byte_range_b3_b4, r590_5ff_tmp10, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock byte_d8, r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4, byte_d8_adv;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, byte_range_8c_8d, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, byte_9b, r600_6ff_tmp9, r600_6ff_tmp10;
		BitBlock byte_range_9e_9f, r600_6ff_tmp11, r600_6ff_tmp12, byte_d9;
		BitBlock r600_6ff_tmp13, r600_6ff_tmp14, byte_range_aa_ad, byte_d9_adv;
		BitBlock r600_6ff_tmp15, byte_db, r600_6ff_tmp16, byte_94, byte_db_adv;
		BitBlock r600_6ff_tmp17, r80_7ff_tmp18, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock byte_dc, byte_dd, r700_77f_tmp2, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, byte_range_80_8d, byte_dc_adv;
		BitBlock r700_74f_tmp3, r80_7ff_tmp19, byte_range_de_df, byte_df;
		BitBlock r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4;
		BitBlock byte_range_b7_b9, byte_df_adv, r7c0_7ff_tmp5, byte_range_e0_ef;
		BitBlock byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2, byte_e4;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, byte_range_b0_be, sequence_e0_a0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, sequence_e0_a1, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, byte_9e, sequence_e0_a1_adv, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, byte_a5, sequence_e0_a5, r800_fff_tmp13;
		BitBlock byte_range_a4_a5, sequence_e0_a5_adv, r800_fff_tmp14, byte_b0;
		BitBlock r800_fff_tmp15, sequence_e0_ab, sequence_e0_ab_adv, r800_fff_tmp16;
		BitBlock r800_fff_tmp17, byte_b7, sequence_e0_b7, byte_b4, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp18, r800_fff_tmp19, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp20, byte_8f, sequence_e0_b9_adv, r800_fff_tmp21;
		BitBlock byte_range_9a_9b, r800_fff_tmp22, r800_fff_tmp23, byte_bc;
		BitBlock sequence_e0_bc, r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, byte_range_84_92, sequence_e0_bc_adv, r800_fff_tmp28;
		BitBlock r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31, byte_range_ba_bd;
		BitBlock r800_fff_tmp32, sequence_e0_be, byte_85, sequence_e0_be_adv;
		BitBlock r800_fff_tmp33, sequence_e0_bf, r800_fff_tmp34, byte_range_90_94;
		BitBlock sequence_e0_bf_adv, r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock byte_range_99_9a, r800_fff_tmp38, r800_1fff_tmp1, byte_e1;
		BitBlock r1000_1fff_tmp1, byte_81, r1000_1fff_tmp2, sequence_e1_81;
		BitBlock byte_e1_adv, r1000_1fff_tmp3, r1000_1fff_tmp4, byte_range_8a_8f;
		BitBlock sequence_e1_81_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, sequence_e1_83;
		BitBlock r1000_1fff_tmp7, sequence_e1_83_adv, r1000_1fff_tmp8, byte_8d;
		BitBlock sequence_e1_8d, r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock byte_range_a0_a8, sequence_e1_8d_adv, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_90, sequence_e1_90, sequence_e1_90_adv;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, byte_99, sequence_e1_99;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, byte_range_ad_ae;
		BitBlock sequence_e1_99_adv, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_9a, sequence_e1_9a, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, byte_range_9b_9c;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp24, sequence_e1_9b;
		BitBlock r1000_1fff_tmp25, byte_range_ab_ad, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, byte_9c, sequence_e1_9c;
		BitBlock r1000_1fff_tmp28, byte_range_b5_b6, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp29, byte_9f, sequence_e1_9f, r1000_1fff_tmp30;
		BitBlock byte_range_94_96, sequence_e1_9f_adv, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, byte_range_98_9a, r1000_1fff_tmp33, sequence_e1_a0;
		BitBlock r1000_1fff_tmp34, byte_range_80_8a, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, sequence_e1_a5, r1000_1fff_tmp37;
		BitBlock byte_range_84_85, sequence_e1_a5_adv, r1000_1fff_tmp38;
		BitBlock r1000_1fff_tmp39, byte_a8, sequence_e1_a8, r1000_1fff_tmp40;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp41, byte_aa, sequence_e1_aa;
		BitBlock r1000_1fff_tmp42, r1000_1fff_tmp43, byte_range_a0_a6;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock byte_range_a8_ad, r1000_1fff_tmp46, byte_ad, sequence_e1_ad;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, byte_range_9a_a0;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp52, byte_af, sequence_e1_af;
		BitBlock byte_range_bc_bf, sequence_e1_af_adv, r1000_1fff_tmp53;
		BitBlock sequence_e1_b0, r1000_1fff_tmp54, byte_range_bb_bf;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp55, byte_b1, sequence_e1_b1;
		BitBlock byte_range_be_bf, sequence_e1_b1_adv, r1000_1fff_tmp56, byte_b3;
		BitBlock sequence_e1_b3, byte_range_80_87, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp57, byte_93, r1000_1fff_tmp58, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock byte_range_90_a7, sequence_e2_80_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, sequence_e2_81, byte_range_80_83;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock byte_range_85_91, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock byte_range_93_9e, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, byte_range_bd_be, r2000_2fff_tmp22, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp23, byte_range_8d_8e;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp24, r2000_2fff_tmp25, byte_8c;
		BitBlock sequence_e2_8c, byte_range_88_8b, sequence_e2_8c_adv;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock byte_range_a9_aa, r2000_2fff_tmp29, byte_9d, sequence_e2_9d;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, byte_range_a8_b5;
		BitBlock sequence_e2_9d_adv, r2000_2fff_tmp35, sequence_e2_9f;
		BitBlock r2000_2fff_tmp36, byte_range_85_86, sequence_e2_9f_adv;
		BitBlock r2000_2fff_tmp37, byte_range_a6_af, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, byte_a6, sequence_e2_a6, r2000_2fff_tmp40;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, byte_range_83_98, sequence_e2_a6_adv;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, sequence_e2_a7, byte_range_98_9b;
		BitBlock sequence_e2_a7_adv, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock byte_range_bc_bd, r2000_2fff_tmp49, r2000_2fff_tmp50, sequence_e2_b3;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, byte_range_b9_bc;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, byte_b5, sequence_e2_b5;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp57, r2000_2fff_tmp58, byte_b8;
		BitBlock sequence_e2_b8, r2000_2fff_tmp59, r2000_2fff_tmp60, byte_range_80_ae;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, sequence_e2_b9, byte_range_80_82;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp64, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp3, byte_range_81_83, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock byte_range_88_91, r3000_4dff_tmp8, r3000_4dff_tmp9, byte_range_94_9f;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12, byte_bd;
		BitBlock r3000_4dff_tmp13, sequence_e3_82, r3000_4dff_tmp14;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp15, sequence_e3_83;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp16, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, byte_ea;
		BitBlock ra000_ffff_tmp3, ra000_ffff_tmp4, ra000_ffff_tmp5, sequence_ea_93;
		BitBlock byte_ea_adv, ra000_ffff_tmp6, ra000_ffff_tmp7, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, byte_98, sequence_ea_98;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_8d_8f;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock sequence_ea_99, sequence_ea_99_adv, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, sequence_ea_9b, ra000_ffff_tmp17;
		BitBlock byte_range_b2_b7, sequence_ea_9b_adv, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, sequence_ea_a1, byte_range_b4_b7;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp21, byte_a3, sequence_ea_a3;
		BitBlock byte_range_8e_8f, sequence_ea_a3_adv, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, byte_range_b8_ba, ra000_ffff_tmp24, byte_a4;
		BitBlock sequence_ea_a4, byte_range_ae_af, sequence_ea_a4_adv;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, sequence_ea_a5;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock sequence_ea_a7, ra000_ffff_tmp29, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, byte_range_81_8d, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, byte_a9, sequence_ea_a9;
		BitBlock byte_range_9c_9f, sequence_ea_a9_adv, ra000_ffff_tmp35;
		BitBlock sequence_ea_ab, sequence_ea_ab_adv, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, byte_range_b0_b1, ra000_ffff_tmp38, sequence_ea_af;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp39, byte_ef, ra000_ffff_tmp40;
		BitBlock sequence_ef_b4, byte_ef_adv, sequence_ef_b4_adv, ra000_ffff_tmp41;
		BitBlock sequence_ef_b8, ra000_ffff_tmp42, byte_range_90_99;
		BitBlock sequence_ef_b8_adv, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock sequence_ef_b9, ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock byte_range_80_92, sequence_ef_b9_adv, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock ra000_ffff_tmp52, byte_range_94_a1, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, byte_range_aa_ab;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, sequence_ef_bc, ra000_ffff_tmp58;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp59, byte_range_85_8a;
		BitBlock ra000_ffff_tmp60, byte_range_8c_8f, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, byte_range_9f_a0;
		BitBlock ra000_ffff_tmp67, ra000_ffff_tmp68, byte_range_bb_bd;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, sequence_ef_bd;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp71, ra000_ffff_tmp72;
		BitBlock ra000_ffff_tmp73, ra000_ffff_tmp74, ra000_ffff_tmp75;
		BitBlock ra000_ffff_tmp76, byte_range_9f_a5, ra000_ffff_tmp77;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, sequence_f0_90, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_84, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90_84, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp8, sequence_f0_90_84_adv, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8e, sequence_f0_90_8e;
		BitBlock sequence_f0_90_8e_adv, r10000_10ffff_tmp12, sequence_f0_90_8f;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_95, sequence_f0_90_95, r10000_10ffff_tmp15;
		BitBlock sequence_f0_90_95_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock sequence_f0_90_a1, r10000_10ffff_tmp18, byte_97;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp19, sequence_f0_90_a4;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, sequence_f0_90_a9;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_range_90_98;
		BitBlock sequence_f0_90_a9_adv, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock byte_range_b0_b6, sequence_f0_90_ab_adv, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_ac, sequence_f0_90_ac, r10000_10ffff_tmp32;
		BitBlock byte_range_b9_bf, sequence_f0_90_ac_adv, r10000_10ffff_tmp33, byte_ae;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock byte_range_99_9c, sequence_f0_90_ae_adv, r10000_10ffff_tmp36, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp37, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, byte_range_87_8d, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_range_bb_bc;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp49, byte_range_80_81, sequence_f0_91_83_adv;
		BitBlock r10000_10ffff_tmp50, sequence_f0_91_85, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, byte_range_b4_b5;
		BitBlock r10000_10ffff_tmp53, sequence_f0_91_87, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, byte_range_85_88, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock byte_88, sequence_f0_91_88, byte_range_b8_bd, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp59, sequence_f0_91_93, r10000_10ffff_tmp60;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp61, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock byte_range_81_89, sequence_f0_91_97_adv, r10000_10ffff_tmp65;
		BitBlock sequence_f0_91_99, sequence_f0_91_99_adv, r10000_10ffff_tmp66;
		BitBlock byte_92, sequence_f0_92, r10000_10ffff_tmp67, sequence_f0_92_91;
		BitBlock sequence_f0_92_adv, byte_range_b0_b4, sequence_f0_92_91_adv;
		BitBlock r10000_10ffff_tmp68, byte_96, sequence_f0_96, r10000_10ffff_tmp69;
		BitBlock sequence_f0_96_a9, sequence_f0_96_adv, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp70, sequence_f0_96_ab, sequence_f0_96_ab_adv;
		BitBlock r10000_10ffff_tmp71, sequence_f0_96_ac, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, byte_range_b7_bb, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp74, sequence_f0_96_ad, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp75, sequence_f0_9b, byte_b2, r10000_10ffff_tmp76;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp77;




        struct_gc_P.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(tmp3, tmp4);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_and(tmp5, tmp6);
        tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(basis_bits.bit_5, tmp8);
        tmp10 = simd_not(tmp9);
        tmp11 = simd_and(basis_bits.bit_5, tmp6);
        tmp12 = simd_or(simd_and(basis_bits.bit_4, tmp10), simd_andc(tmp11, basis_bits.bit_4));
        tmp13 = simd_and(tmp3, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_and(tmp3, tmp15);
        tmp17 = simd_or(tmp14, tmp16);
        tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp19 = simd_andc(tmp18, tmp1);
        tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp21 = simd_and(tmp20, basis_bits.bit_6);
        tmp22 = simd_and(tmp19, tmp21);
        tmp23 = simd_or(tmp17, tmp22);
        tmp24 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp25 = simd_or(tmp4, tmp6);
        tmp26 = simd_or(tmp24, tmp25);
        tmp27 = simd_not(tmp26);
        tmp28 = simd_and(tmp15, tmp8);
        tmp29 = simd_and(tmp18, tmp28);
        tmp30 = simd_or(simd_and(basis_bits.bit_1, tmp27), simd_andc(tmp29, basis_bits.bit_1));
        tmp31 = simd_andc(tmp30, basis_bits.bit_0);
        tmp32 = simd_or(tmp23, tmp31);
        tmp33 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp34 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp35 = simd_and(tmp33, tmp34);
        tmp36 = simd_and(tmp35, basis_bits.bit_4);
        tmp37 = simd_not(basis_bits.bit_6);
        tmp38 = simd_or(simd_and(basis_bits.bit_5, tmp37), simd_andc(tmp8, basis_bits.bit_5));
        tmp39 = simd_and(tmp36, tmp38);
        tmp40 = simd_or(tmp32, tmp39);
        tmp41 = simd_and(tmp35, tmp28);
        tmp42 = simd_or(tmp40, tmp41);
        tmp43 = simd_and(tmp33, tmp18);
        tmp44 = simd_and(tmp20, tmp8);
        tmp45 = simd_and(tmp43, tmp44);
        tmp46 = simd_or(tmp42, tmp45);
        tmp47 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp48 = simd_and(tmp15, tmp47);
        tmp49 = simd_and(tmp43, tmp48);
        cc_range_21_7d_1 = simd_or(tmp46, tmp49);
        struct_gc_P.cc = simd_or(struct_gc_P.cc, cc_range_21_7d_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 110))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 13))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp24);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp4);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(tmp47, tmp4);
            byte_a1 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a1);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp7);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, tmp8);
            byte_a7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_and(byte_c2_adv, byte_a7);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp10);
            byte_ab = simd_and(r80_7ff_tmp5, tmp44);
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_ab);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp4, tmp18);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
            byte_range_b6_b7 = simd_and(r80_7ff_tmp12, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_and(byte_c2_adv, byte_range_b6_b7);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp14);
            byte_bb = simd_and(r80_7ff_tmp12, tmp44);
            r80_7ff_tmp15 = simd_and(byte_c2_adv, byte_bb);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp15);
            byte_bf = simd_and(r80_7ff_tmp12, tmp28);
            r80_7ff_tmp16 = simd_and(byte_c2_adv, byte_bf);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r80_7ff_tmp16);
            byte_range_c4_cf = simd_and(r80_7ff_tmp1, tmp4);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 2))) {
              byte_cd = simd_and(r80_7ff_tmp1, tmp48);
              byte_range_b0_bf = r80_7ff_tmp12;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(1), r100_3ff_tmp1));
              r100_3ff_tmp2 = simd_and(r100_3ff_tmp1, byte_range_b0_bf);
              r100_3ff_tmp3 = simd_and(tmp15, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp1, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_or(r100_3ff_tmp2, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp4) || carryQ.CarryTest(2, 1))) {
                r370_3ff_tmp1 = simd_and(tmp15, r80_7ff_tmp2);
                byte_be = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp1;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_be);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r370_3ff_tmp2);
                byte_ce = simd_and(r80_7ff_tmp1, r370_3ff_tmp1);
                r370_3ff_tmp3 = simd_andc(r80_7ff_tmp4, tmp24);
                byte_87 = simd_and(r370_3ff_tmp3, r80_7ff_tmp9);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(2), byte_ce_adv));
                r370_3ff_tmp4 = simd_and(byte_ce_adv, byte_87);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r370_3ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp17 = simd_and(byte_range_c0_ff, tmp34);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp17, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(3, 4))) {
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp17, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp17, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, tmp24);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(4, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp17, r500_58f_tmp1);
                byte_range_b0_bf = r80_7ff_tmp12;
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(4), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_and(r80_7ff_tmp8, tmp47);
                byte_d5 = simd_and(r80_7ff_tmp17, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(5, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp4, tmp34);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, basis_bits.bit_4);
                  r530_58f_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r530_58f_tmp2, r530_58f_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(5), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_9a_9f);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r530_58f_tmp4);
                  r530_58f_tmp5 = simd_and(byte_range_80_8f, tmp20);
                  r530_58f_tmp6 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_89_8a = simd_and(r530_58f_tmp5, r530_58f_tmp6);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp7 = simd_and(byte_d6_adv, byte_range_89_8a);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r530_58f_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp4, tmp24);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              byte_d7 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(6, 1))) {
                r590_5ff_tmp1 = simd_and(tmp15, r80_7ff_tmp2);
                byte_be = simd_and(r80_7ff_tmp12, r590_5ff_tmp1);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp2 = simd_and(byte_d6_adv, byte_be);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r590_5ff_tmp2);
                byte_80 = simd_andc(byte_range_80_8f, tmp25);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(6), byte_d7_adv));
                r590_5ff_tmp3 = simd_and(byte_d7_adv, byte_80);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r590_5ff_tmp3);
                r590_5ff_tmp4 = simd_andc(tmp8, tmp4);
                byte_83 = simd_and(byte_range_80_8f, r590_5ff_tmp4);
                r590_5ff_tmp5 = simd_and(byte_d7_adv, byte_83);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r590_5ff_tmp5);
                byte_86 = simd_and(byte_range_80_8f, r400_5ff_tmp2);
                r590_5ff_tmp6 = simd_and(byte_d7_adv, byte_86);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r590_5ff_tmp6);
                r590_5ff_tmp7 = simd_andc(r80_7ff_tmp12, basis_bits.bit_4);
                r590_5ff_tmp8 = simd_not(tmp6);
                r590_5ff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r590_5ff_tmp8), simd_andc(tmp8, basis_bits.bit_5));
                byte_range_b3_b4 = simd_and(r590_5ff_tmp7, r590_5ff_tmp9);
                r590_5ff_tmp10 = simd_and(byte_d7_adv, byte_range_b3_b4);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r590_5ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 4);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp17, tmp20);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(7, 3))) {
              r600_6ff_tmp1 = simd_andc(tmp20, tmp6);
              byte_d8 = simd_and(r80_7ff_tmp17, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp4, tmp24);
              r600_6ff_tmp3 = simd_and(r600_6ff_tmp2, tmp20);
              r600_6ff_tmp4 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_89_8a = simd_and(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(7), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_range_89_8a);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_andc(tmp15, basis_bits.bit_6);
              byte_range_8c_8d = simd_and(r600_6ff_tmp2, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_range_8c_8d);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp7);
              r600_6ff_tmp8 = simd_and(r80_7ff_tmp4, tmp34);
              byte_9b = simd_and(r600_6ff_tmp8, tmp44);
              r600_6ff_tmp9 = simd_and(byte_d8_adv, byte_9b);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_and(tmp15, basis_bits.bit_6);
              byte_range_9e_9f = simd_and(r600_6ff_tmp8, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_and(byte_d8_adv, byte_range_9e_9f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(tmp20, tmp47);
              byte_d9 = simd_and(r80_7ff_tmp17, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r80_7ff_tmp5, basis_bits.bit_4);
              r600_6ff_tmp14 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_ad = simd_and(r600_6ff_tmp13, r600_6ff_tmp14);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(8), byte_d9_adv));
              r600_6ff_tmp15 = simd_and(byte_d9_adv, byte_range_aa_ad);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp15);
              byte_db = simd_and(r80_7ff_tmp17, tmp44);
              r600_6ff_tmp16 = simd_andc(r80_7ff_tmp8, tmp6);
              byte_94 = simd_and(r600_6ff_tmp8, r600_6ff_tmp16);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(9), byte_db_adv));
              r600_6ff_tmp17 = simd_and(byte_db_adv, byte_94);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, r600_6ff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 3);
            }
            r80_7ff_tmp18 = simd_andc(tmp15, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp17, r80_7ff_tmp18);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(10, 2))) {
              r700_77f_tmp1 = simd_andc(tmp15, tmp6);
              byte_dc = simd_and(r80_7ff_tmp17, r700_77f_tmp1);
              byte_dd = simd_and(r80_7ff_tmp17, tmp48);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, tmp24);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(10), r700_77f_tmp2));
              r700_77f_tmp3 = simd_and(r700_77f_tmp2, byte_range_80_8f);
              r700_77f_tmp4 = simd_or(byte_dc, r700_77f_tmp3);
              if ((bitblock::any(r700_77f_tmp4) || carryQ.CarryTest(11, 1))) {
                r700_74f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r700_74f_tmp2 = simd_and(basis_bits.bit_4, r700_74f_tmp1);
                byte_range_80_8d = simd_andc(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(11), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_range_80_8d);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r700_74f_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
            r80_7ff_tmp19 = simd_and(tmp15, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp17, r80_7ff_tmp19);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(12, 1))) {
              byte_df = simd_and(r80_7ff_tmp17, tmp28);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(12, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_and(basis_bits.bit_5, tmp8);
                r7c0_7ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp3, basis_bits.bit_4));
                byte_range_b7_b9 = simd_and(r80_7ff_tmp12, r7c0_7ff_tmp4);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(12), byte_df_adv));
                r7c0_7ff_tmp5 = simd_and(byte_df_adv, byte_range_b7_b9);
                struct_gc_P.cc = simd_or(struct_gc_P.cc, r7c0_7ff_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 13);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(13, 66))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(13), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(14, 46))) {
              r800_4dff_tmp1 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(14, 29))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp25);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(14, 10))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, tmp2);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp25);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(14), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp3, tmp18);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, tmp8);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_4, r800_fff_tmp4);
                  byte_range_b0_be = simd_andc(r800_fff_tmp3, r800_fff_tmp5);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(15), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_andc(tmp47, tmp4);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp7);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp8 = simd_and(r800_ffff_tmp3, tmp34);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp10 = simd_and(tmp15, r800_fff_tmp9);
                  byte_9e = simd_and(r800_fff_tmp8, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(16), sequence_e0_a1_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_a1_adv, byte_9e);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(r800_ffff_tmp1, tmp47);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp13 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(17), sequence_e0_a5_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_a5_adv, byte_range_a4_a5);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp14);
                  byte_b0 = simd_andc(r800_fff_tmp3, tmp25);
                  r800_fff_tmp15 = simd_and(sequence_e0_a5_adv, byte_b0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp15);
                  byte_ab = simd_and(r800_fff_tmp1, tmp44);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(18), sequence_e0_ab_adv));
                  r800_fff_tmp16 = simd_and(sequence_e0_ab_adv, byte_b0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(r800_ffff_tmp1, tmp8);
                  byte_b7 = simd_and(r800_fff_tmp3, r800_fff_tmp17);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_b4 = simd_and(r800_fff_tmp3, r800_ffff_tmp2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(19), sequence_e0_b7_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_b7_adv, byte_b4);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(tmp20, tmp47);
                  byte_b9 = simd_and(r800_fff_tmp3, r800_fff_tmp19);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp20 = simd_andc(r800_ffff_tmp3, tmp24);
                  byte_8f = simd_and(r800_fff_tmp20, tmp28);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(20), sequence_e0_b9_adv));
                  r800_fff_tmp21 = simd_and(sequence_e0_b9_adv, byte_8f);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp21);
                  byte_range_9a_9b = simd_and(r800_fff_tmp8, tmp21);
                  r800_fff_tmp22 = simd_and(sequence_e0_b9_adv, byte_range_9a_9b);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(tmp15, tmp6);
                  byte_bc = simd_and(r800_fff_tmp3, r800_fff_tmp23);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp24 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp25 = simd_or(tmp4, tmp8);
                  r800_fff_tmp26 = simd_not(r800_fff_tmp25);
                  r800_fff_tmp27 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp26), simd_andc(tmp4, basis_bits.bit_3));
                  byte_range_84_92 = simd_and(r800_fff_tmp24, r800_fff_tmp27);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(21), sequence_e0_bc_adv));
                  r800_fff_tmp28 = simd_and(sequence_e0_bc_adv, byte_range_84_92);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp28);
                  byte_94 = simd_and(r800_fff_tmp8, r800_ffff_tmp2);
                  r800_fff_tmp29 = simd_and(sequence_e0_bc_adv, byte_94);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(r800_fff_tmp3, basis_bits.bit_4);
                  r800_fff_tmp31 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bd = simd_and(r800_fff_tmp30, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_and(sequence_e0_bc_adv, byte_range_ba_bd);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp32);
                  byte_be = simd_and(r800_fff_tmp3, r800_fff_tmp10);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  byte_85 = simd_and(r800_fff_tmp20, r800_fff_tmp12);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(22), sequence_e0_be_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_be_adv, byte_85);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp33);
                  byte_bf = simd_and(r800_fff_tmp3, tmp28);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp34 = simd_andc(r800_fff_tmp8, basis_bits.bit_4);
                  byte_range_90_94 = simd_andc(r800_fff_tmp34, tmp11);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(23), sequence_e0_bf_adv));
                  r800_fff_tmp35 = simd_and(sequence_e0_bf_adv, byte_range_90_94);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp8, tmp20);
                  r800_fff_tmp37 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r800_fff_tmp36, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(sequence_e0_bf_adv, byte_range_99_9a);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r800_fff_tmp38);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 10);
                }
                r800_1fff_tmp1 = simd_andc(tmp47, tmp4);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(24, 19))) {
                  r1000_1fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp24);
                  byte_81 = simd_and(r1000_1fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(24), r1000_1fff_tmp2));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp2, byte_81);
                  byte_e1_adv = r1000_1fff_tmp2;
                  r1000_1fff_tmp3 = simd_and(r1000_1fff_tmp1, basis_bits.bit_4);
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8f = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(25), sequence_e1_81_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_81_adv, byte_range_8a_8f);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_andc(tmp8, tmp4);
                  byte_83 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp6);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp3, tmp18);
                  byte_bb = simd_and(r1000_1fff_tmp7, tmp44);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(26), sequence_e1_83_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_83_adv, byte_bb);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp8);
                  byte_8d = simd_and(r1000_1fff_tmp1, tmp48);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp3, tmp2);
                  r1000_1fff_tmp10 = simd_or(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_4, r1000_1fff_tmp10);
                  byte_range_a0_a8 = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp11);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(27), sequence_e1_8d_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_8d_adv, byte_range_a0_a8);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp3, tmp34);
                  byte_90 = simd_andc(r1000_1fff_tmp13, tmp25);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  byte_80 = simd_andc(r1000_1fff_tmp1, tmp25);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(28), sequence_e1_90_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_90_adv, byte_80);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(tmp20, tmp47);
                  byte_99 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp15);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp9, tmp15);
                  r1000_1fff_tmp17 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_ad_ae = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp17);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(29), sequence_e1_99_adv));
                  r1000_1fff_tmp18 = simd_and(sequence_e1_99_adv, byte_range_ad_ae);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp20 = simd_and(tmp20, r1000_1fff_tmp19);
                  byte_9a = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp20);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp13, basis_bits.bit_4);
                  r1000_1fff_tmp22 = simd_not(tmp6);
                  r1000_1fff_tmp23 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp22), simd_andc(tmp8, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp23);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(30), sequence_e1_9a_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_9a_adv, byte_range_9b_9c);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp24);
                  byte_9b = simd_and(r1000_1fff_tmp13, tmp44);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp9, basis_bits.bit_4);
                  byte_range_ab_ad = simd_and(r1000_1fff_tmp25, tmp38);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(31), sequence_e1_9b_adv));
                  r1000_1fff_tmp26 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_andc(tmp15, tmp6);
                  byte_9c = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp27);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp7, r800_ffff_tmp1);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp28, r1000_1fff_tmp17);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(32), sequence_e1_9c_adv));
                  r1000_1fff_tmp29 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp29);
                  byte_9f = simd_and(r1000_1fff_tmp13, tmp28);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp13, r800_ffff_tmp1);
                  byte_range_94_96 = simd_andc(r1000_1fff_tmp30, tmp8);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(33), sequence_e1_9f_adv));
                  r1000_1fff_tmp31 = simd_and(sequence_e1_9f_adv, byte_range_94_96);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(r1000_1fff_tmp13, tmp20);
                  byte_range_98_9a = simd_andc(r1000_1fff_tmp32, tmp8);
                  r1000_1fff_tmp33 = simd_and(sequence_e1_9f_adv, byte_range_98_9a);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp33);
                  byte_a0 = simd_andc(r1000_1fff_tmp9, tmp25);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_4, tmp9);
                  byte_range_80_8a = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp34);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(34), sequence_e1_a0_adv));
                  r1000_1fff_tmp35 = simd_and(sequence_e1_a0_adv, byte_range_80_8a);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r800_ffff_tmp1, tmp47);
                  byte_a5 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp36);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp37 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_84_85 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp37);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(35), sequence_e1_a5_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(tmp20, tmp6);
                  byte_a8 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp39);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp40 = simd_and(tmp15, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp40);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(36), sequence_e1_a8_adv));
                  r1000_1fff_tmp41 = simd_and(sequence_e1_a8_adv, byte_range_9e_9f);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp41);
                  byte_aa = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp20);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp42 = simd_andc(r1000_1fff_tmp9, basis_bits.bit_4);
                  r1000_1fff_tmp43 = simd_and(basis_bits.bit_5, tmp8);
                  byte_range_a0_a6 = simd_andc(r1000_1fff_tmp42, r1000_1fff_tmp43);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(37), sequence_e1_aa_adv));
                  r1000_1fff_tmp44 = simd_and(sequence_e1_aa_adv, byte_range_a0_a6);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_a8_ad = simd_andc(r1000_1fff_tmp25, r1000_1fff_tmp45);
                  r1000_1fff_tmp46 = simd_and(sequence_e1_aa_adv, byte_range_a8_ad);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp46);
                  byte_ad = simd_and(r1000_1fff_tmp9, tmp48);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp47 = simd_or(basis_bits.bit_3, tmp25);
                  r1000_1fff_tmp48 = simd_not(r1000_1fff_tmp47);
                  r1000_1fff_tmp49 = simd_and(basis_bits.bit_4, r1000_1fff_tmp4);
                  r1000_1fff_tmp50 = simd_and(basis_bits.bit_3, r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp48), simd_andc(r1000_1fff_tmp50, basis_bits.bit_2));
                  byte_range_9a_a0 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp51);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(38), sequence_e1_ad_adv));
                  r1000_1fff_tmp52 = simd_and(sequence_e1_ad_adv, byte_range_9a_a0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp52);
                  byte_af = simd_and(r1000_1fff_tmp9, tmp28);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp7, tmp15);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(39), sequence_e1_af_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_af_adv, byte_range_bc_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp53);
                  byte_b0 = simd_andc(r1000_1fff_tmp7, tmp25);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp7, basis_bits.bit_4);
                  byte_range_bb_bf = simd_and(r1000_1fff_tmp54, tmp9);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(40), sequence_e1_b0_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp55);
                  byte_b1 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp1);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp40);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(41), sequence_e1_b1_adv));
                  r1000_1fff_tmp56 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp56);
                  byte_b3 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp6);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_80_87 = simd_andc(r1000_1fff_tmp1, basis_bits.bit_4);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(42), sequence_e1_b3_adv));
                  r1000_1fff_tmp57 = simd_and(sequence_e1_b3_adv, byte_range_80_87);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp57);
                  byte_93 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp6);
                  r1000_1fff_tmp58 = simd_and(sequence_e1_b3_adv, byte_93);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r1000_1fff_tmp58);
                }
                else {
                  carryQ.CarryDequeueEnqueue(24, 19);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 29);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(43, 17))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp4);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(43, 13))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp24);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp25);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(43), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp4 = simd_not(r2000_2fff_tmp3);
                  r2000_2fff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp4), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_a7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp5);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(44), sequence_e2_80_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_80_adv, byte_range_90_a7);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp6);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp3, tmp18);
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_b0_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_andc(tmp47, tmp4);
                  byte_81 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp8);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  byte_range_80_83 = simd_andc(r2000_2fff_tmp1, tmp4);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(45), sequence_e2_81_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_81_adv, byte_range_80_83);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp11 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_4, tmp11);
                  r2000_2fff_tmp13 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp11), simd_andc(r2000_2fff_tmp12, basis_bits.bit_3));
                  byte_range_85_91 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_81_adv, byte_range_85_91);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp3, tmp34);
                  r2000_2fff_tmp16 = simd_and(basis_bits.bit_5, tmp8);
                  r2000_2fff_tmp17 = simd_not(r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp17), simd_andc(tmp9, basis_bits.bit_4));
                  byte_range_93_9e = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_81_adv, byte_range_93_9e);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(byte_range_b0_bf, tmp15);
                  r2000_2fff_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_81_adv, byte_range_bd_be);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp22);
                  byte_82 = simd_and(r2000_2fff_tmp1, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp1, tmp15);
                  byte_range_8d_8e = simd_and(r2000_2fff_tmp23, r2000_2fff_tmp21);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(46), sequence_e2_82_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_82_adv, byte_range_8d_8e);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_andc(tmp15, tmp6);
                  byte_8c = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp25);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_range_88_8b = simd_and(r2000_2fff_tmp1, tmp20);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(47), sequence_e2_8c_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_8c_adv, byte_range_88_8b);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp3, tmp2);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp27, tmp20);
                  byte_range_a9_aa = simd_and(r2000_2fff_tmp28, r2000_2fff_tmp21);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_8c_adv, byte_range_a9_aa);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp29);
                  byte_9d = simd_and(r2000_2fff_tmp15, tmp48);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp30 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_or(basis_bits.bit_4, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_not(r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp33), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
                  byte_range_a8_b5 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp34);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(48), sequence_e2_9d_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_9d_adv, byte_range_a8_b5);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp35);
                  byte_9f = simd_and(r2000_2fff_tmp15, tmp28);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp1, r800_ffff_tmp1);
                  byte_range_85_86 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp21);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(49), sequence_e2_9f_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_9f_adv, byte_range_85_86);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp37);
                  byte_range_a6_af = simd_and(r2000_2fff_tmp27, r2000_2fff_tmp32);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_9f_adv, byte_range_a6_af);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp27, r2000_2fff_tmp39);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  r2000_2fff_tmp40 = simd_or(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp41 = simd_and(basis_bits.bit_4, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_not(r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_or(tmp4, tmp8);
                  r2000_2fff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp42), simd_andc(r2000_2fff_tmp43, basis_bits.bit_3));
                  byte_range_83_98 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp44);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(50), sequence_e2_a6_adv));
                  r2000_2fff_tmp45 = simd_and(sequence_e2_a6_adv, byte_range_83_98);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp45);
                  r2000_2fff_tmp46 = simd_and(r800_ffff_tmp1, tmp8);
                  byte_a7 = simd_and(r2000_2fff_tmp27, r2000_2fff_tmp46);
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  byte_range_98_9b = simd_and(r2000_2fff_tmp15, tmp20);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(51), sequence_e2_a7_adv));
                  r2000_2fff_tmp47 = simd_and(sequence_e2_a7_adv, byte_range_98_9b);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_andc(tmp15, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(byte_range_b0_bf, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_a7_adv, byte_range_bc_bd);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_andc(tmp8, tmp4);
                  byte_b3 = simd_and(byte_range_b0_bf, r2000_2fff_tmp50);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp51 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                  r2000_2fff_tmp52 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_b9_bc = simd_and(r2000_2fff_tmp51, r2000_2fff_tmp52);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(52), sequence_e2_b3_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_b3_adv, byte_range_b9_bc);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_and(tmp15, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp54);
                  r2000_2fff_tmp55 = simd_and(sequence_e2_b3_adv, byte_range_be_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(r800_ffff_tmp1, tmp47);
                  byte_b5 = simd_and(byte_range_b0_bf, r2000_2fff_tmp56);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_b0 = simd_andc(byte_range_b0_bf, tmp25);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(53), sequence_e2_b5_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b5_adv, byte_b0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_andc(tmp20, tmp6);
                  byte_b8 = simd_and(byte_range_b0_bf, r2000_2fff_tmp58);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp59 = simd_or(basis_bits.bit_3, tmp28);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_2, r2000_2fff_tmp59);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp60);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(54), sequence_e2_b8_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_b8_adv, byte_range_80_ae);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp61);
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b8_adv, byte_range_b0_bf);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp62);
                  r2000_2fff_tmp63 = simd_and(tmp20, tmp47);
                  byte_b9 = simd_and(byte_range_b0_bf, r2000_2fff_tmp63);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  byte_range_80_82 = simd_andc(byte_range_80_83, tmp8);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(55), sequence_e2_b9_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b9_adv, byte_range_80_82);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r2000_2fff_tmp64);
                }
                else {
                  carryQ.CarryDequeueEnqueue(43, 13);
                }
                r2000_4dff_tmp3 = simd_andc(tmp8, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(56, 4))) {
                  r3000_4dff_tmp1 = simd_andc(r800_ffff_tmp3, tmp24);
                  byte_80 = simd_andc(r3000_4dff_tmp1, tmp25);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(56), r3000_4dff_tmp2));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp2, byte_80);
                  byte_e3_adv = r3000_4dff_tmp2;
                  r3000_4dff_tmp3 = simd_andc(r3000_4dff_tmp1, tmp4);
                  byte_range_81_83 = simd_and(r3000_4dff_tmp3, tmp6);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(57), sequence_e3_80_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e3_80_adv, byte_range_81_83);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp4);
                  r3000_4dff_tmp5 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp6 = simd_not(r800_4dff_tmp1);
                  r3000_4dff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r3000_4dff_tmp6), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
                  byte_range_88_91 = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_88_91);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp3, tmp34);
                  byte_range_94_9f = simd_and(r3000_4dff_tmp9, tmp4);
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, byte_range_94_9f);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp3, tmp18);
                  byte_b0 = simd_andc(r3000_4dff_tmp11, tmp25);
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, byte_b0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp12);
                  byte_bd = simd_and(r3000_4dff_tmp11, tmp48);
                  r3000_4dff_tmp13 = simd_and(sequence_e3_80_adv, byte_bd);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp13);
                  byte_82 = simd_and(r3000_4dff_tmp1, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp3, tmp2);
                  byte_a0 = simd_andc(r3000_4dff_tmp14, tmp25);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(58), sequence_e3_82_adv));
                  r3000_4dff_tmp15 = simd_and(sequence_e3_82_adv, byte_a0);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp15);
                  byte_83 = simd_and(r3000_4dff_tmp1, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  byte_bb = simd_and(r3000_4dff_tmp11, tmp44);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(59), sequence_e3_83_adv));
                  r3000_4dff_tmp16 = simd_and(sequence_e3_83_adv, byte_bb);
                  struct_gc_P.cc = simd_or(struct_gc_P.cc, r3000_4dff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(56, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(43, 17);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 46);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(60, 19))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp20, ra000_ffff_tmp1);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp3, tmp34);
              ra000_ffff_tmp4 = simd_andc(tmp8, tmp4);
              byte_93 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp4);
              carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(60), ra000_ffff_tmp5));
              sequence_ea_93 = simd_and(ra000_ffff_tmp5, byte_93);
              byte_ea_adv = ra000_ffff_tmp5;
              ra000_ffff_tmp6 = simd_and(r800_ffff_tmp3, tmp18);
              ra000_ffff_tmp7 = simd_and(tmp15, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(61), sequence_ea_93_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ea_93_adv, byte_range_be_bf);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_andc(tmp20, tmp6);
              byte_98 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp9);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp10 = simd_andc(r800_ffff_tmp3, tmp24);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp10, tmp15);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp11, tmp6);
              carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(62), sequence_ea_98_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_98_adv, byte_range_8d_8f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(tmp20, tmp47);
              byte_99 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp13);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              byte_b3 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp4);
              carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(63), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, byte_b3);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(tmp15, ra000_ffff_tmp1);
              byte_be = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(sequence_ea_99_adv, byte_be);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp16);
              byte_9b = simd_and(ra000_ffff_tmp3, tmp44);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp6, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp17, r800_ffff_tmp10);
              carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(64), sequence_ea_9b_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9b_adv, byte_range_b2_b7);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp3, tmp2);
              ra000_ffff_tmp20 = simd_andc(tmp47, tmp4);
              byte_a1 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp20);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              byte_range_b4_b7 = simd_and(ra000_ffff_tmp6, r800_ffff_tmp1);
              carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(65), sequence_ea_a1_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a1_adv, byte_range_b4_b7);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp21);
              byte_a3 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp4);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp7);
              carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(66), sequence_ea_a3_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_a3_adv, byte_range_8e_8f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp6, tmp20);
              byte_range_b8_ba = simd_andc(ra000_ffff_tmp23, tmp8);
              ra000_ffff_tmp24 = simd_and(sequence_ea_a3_adv, byte_range_b8_ba);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp24);
              byte_a4 = simd_and(ra000_ffff_tmp19, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              byte_range_ae_af = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp7);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(67), sequence_ea_a4_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_a4_adv, byte_range_ae_af);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp25);
              ra000_ffff_tmp26 = simd_and(r800_ffff_tmp1, tmp47);
              byte_a5 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp26);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_9f = simd_and(ra000_ffff_tmp3, tmp28);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(68), sequence_ea_a5_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ea_a5_adv, byte_9f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(r800_ffff_tmp1, tmp8);
              byte_a7 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp28);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp30 = simd_not(ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp30), simd_andc(ra000_ffff_tmp31, basis_bits.bit_4));
              byte_range_81_8d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp32);
              carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(69), sequence_ea_a7_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ea_a7_adv, byte_range_81_8d);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp33);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp7);
              ra000_ffff_tmp34 = simd_and(sequence_ea_a7_adv, byte_range_9e_9f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp34);
              byte_a9 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp13);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp3, tmp15);
              carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(70), sequence_ea_a9_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_a9_adv, byte_range_9c_9f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp35);
              byte_ab = simd_and(ra000_ffff_tmp19, tmp44);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(71), sequence_ea_ab_adv));
              ra000_ffff_tmp36 = simd_and(sequence_ea_ab_adv, byte_range_9e_9f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(sequence_ea_ab_adv, byte_range_b0_b1);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp38);
              byte_af = simd_and(ra000_ffff_tmp19, tmp28);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(72), sequence_ea_af_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_af_adv, byte_ab);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp39);
              byte_ef = simd_and(byte_range_e0_ef, tmp28);
              byte_b4 = simd_and(ra000_ffff_tmp6, r800_ffff_tmp2);
              carryQ.cq[73] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(73), ra000_ffff_tmp40));
              sequence_ef_b4 = simd_and(ra000_ffff_tmp40, byte_b4);
              byte_ef_adv = ra000_ffff_tmp40;
              carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(74), sequence_ef_b4_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ef_b4_adv, byte_range_be_bf);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp41);
              byte_b8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_4, r800_ffff_tmp10);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp3, ra000_ffff_tmp42);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(75), sequence_ef_b8_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ef_b8_adv, byte_range_90_99);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp43);
              byte_range_b0_bf = ra000_ffff_tmp6;
              ra000_ffff_tmp44 = simd_and(sequence_ef_b8_adv, byte_range_b0_bf);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp44);
              byte_b9 = simd_and(byte_range_b0_bf, ra000_ffff_tmp13);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp45 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp46 = simd_or(tmp4, tmp8);
              ra000_ffff_tmp47 = simd_and(basis_bits.bit_3, ra000_ffff_tmp46);
              byte_range_80_92 = simd_andc(ra000_ffff_tmp45, ra000_ffff_tmp47);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(76), sequence_ef_b9_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ef_b9_adv, byte_range_80_92);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_or(basis_bits.bit_3, ra000_ffff_tmp37);
              ra000_ffff_tmp50 = simd_not(ra000_ffff_tmp49);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_3, tmp4);
              ra000_ffff_tmp52 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp50), simd_andc(ra000_ffff_tmp51, basis_bits.bit_2));
              byte_range_94_a1 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(sequence_ef_b9_adv, byte_range_94_a1);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ef_b9_adv, byte_a3);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp54);
              byte_a8 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp9);
              ra000_ffff_tmp55 = simd_and(sequence_ef_b9_adv, byte_a8);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp55);
              byte_range_aa_ab = simd_and(ra000_ffff_tmp19, tmp21);
              ra000_ffff_tmp56 = simd_and(sequence_ef_b9_adv, byte_range_aa_ab);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_andc(tmp15, tmp6);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp57);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp10, tmp4);
              byte_range_81_83 = simd_and(ra000_ffff_tmp58, tmp6);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(77), sequence_ef_bc_adv));
              ra000_ffff_tmp59 = simd_and(sequence_ef_bc_adv, byte_range_81_83);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp59);
              byte_range_85_8a = simd_and(ra000_ffff_tmp10, tmp12);
              ra000_ffff_tmp60 = simd_and(sequence_ef_bc_adv, byte_range_85_8a);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp60);
              byte_range_8c_8f = ra000_ffff_tmp11;
              ra000_ffff_tmp61 = simd_and(sequence_ef_bc_adv, byte_range_8c_8f);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp61);
              byte_range_9a_9b = simd_and(ra000_ffff_tmp3, tmp21);
              ra000_ffff_tmp62 = simd_and(sequence_ef_bc_adv, byte_range_9a_9b);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp62);
              ra000_ffff_tmp63 = simd_or(basis_bits.bit_3, tmp25);
              ra000_ffff_tmp64 = simd_not(ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(basis_bits.bit_3, tmp28);
              ra000_ffff_tmp66 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp64), simd_andc(ra000_ffff_tmp65, basis_bits.bit_2));
              byte_range_9f_a0 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp66);
              ra000_ffff_tmp67 = simd_and(sequence_ef_bc_adv, byte_range_9f_a0);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
              byte_range_bb_bd = simd_and(ra000_ffff_tmp68, tmp38);
              ra000_ffff_tmp69 = simd_and(sequence_ef_bc_adv, byte_range_bb_bd);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp69);
              byte_bf = simd_and(byte_range_b0_bf, tmp28);
              ra000_ffff_tmp70 = simd_and(sequence_ef_bc_adv, byte_bf);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp70);
              byte_bd = simd_and(byte_range_b0_bf, tmp48);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(78), sequence_ef_bd_adv));
              ra000_ffff_tmp71 = simd_and(sequence_ef_bd_adv, byte_9b);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp71);
              byte_9d = simd_and(ra000_ffff_tmp3, tmp48);
              ra000_ffff_tmp72 = simd_and(sequence_ef_bd_adv, byte_9d);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp72);
              ra000_ffff_tmp73 = simd_or(basis_bits.bit_4, ra000_ffff_tmp29);
              ra000_ffff_tmp74 = simd_or(basis_bits.bit_3, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_not(ra000_ffff_tmp74);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp75), simd_andc(ra000_ffff_tmp65, basis_bits.bit_2));
              byte_range_9f_a5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp76);
              ra000_ffff_tmp77 = simd_and(sequence_ef_bd_adv, byte_range_9f_a5);
              struct_gc_P.cc = simd_or(struct_gc_P.cc, ra000_ffff_tmp77);
            }
            else {
              carryQ.CarryDequeueEnqueue(60, 19);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(13, 66);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp18);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(79, 31))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp25);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp34);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp25);
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(79), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            r10000_10ffff_tmp4 = simd_andc(r10000_10ffff_tmp1, tmp24);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp6 = simd_andc(r10000_10ffff_tmp5, tmp6);
            byte_84 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp6);
            carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(80), r10000_10ffff_tmp7));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp7, byte_84);
            byte_f0_adv = r10000_10ffff_tmp3;
            sequence_f0_90_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp4, tmp4);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp8, tmp8);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(81), sequence_f0_90_84_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_90_84_adv, byte_range_80_82);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp9);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp11 = simd_and(tmp15, r10000_10ffff_tmp10);
            byte_8e = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            byte_9f = simd_and(r10000_10ffff_tmp2, tmp28);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(82), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_8e_adv, byte_9f);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp12);
            byte_8f = simd_and(r10000_10ffff_tmp4, tmp28);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(83), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_8f_adv, byte_90);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp5, tmp47);
            byte_95 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp14);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp1, tmp2);
            byte_af = simd_and(r10000_10ffff_tmp15, tmp28);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(84), sequence_f0_90_95_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_95_adv, byte_af);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(tmp47, tmp4);
            byte_a1 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp5, tmp8);
            byte_97 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp18);
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(85), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_a1_adv, byte_97);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp19);
            byte_a4 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp6);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(86), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_a4_adv, byte_9f);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp1, tmp18);
            byte_bf = simd_and(r10000_10ffff_tmp21, tmp28);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_a4_adv, byte_bf);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(tmp20, tmp47);
            byte_a9 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp23);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp24);
            byte_range_90_98 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp25);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(87), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_a9_adv, byte_range_90_98);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_a9_adv, byte_bf);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp27);
            byte_ab = simd_and(r10000_10ffff_tmp15, tmp44);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_5, tmp8);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(88), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_ab_adv, byte_range_b0_b6);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_andc(tmp15, tmp6);
            byte_ac = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp31);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp24);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(89), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_ac_adv, byte_range_b9_bf);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp33);
            byte_ae = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp11);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp2, basis_bits.bit_4);
            r10000_10ffff_tmp35 = simd_xor(basis_bits.bit_5, tmp6);
            byte_range_99_9c = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(90), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_ae_adv, byte_range_99_9c);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp36);
            byte_91 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp17);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_81 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(91), r10000_10ffff_tmp37));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp37, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp37;
            r10000_10ffff_tmp38 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp39 = simd_not(r10000_10ffff_tmp38);
            r10000_10ffff_tmp40 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp39), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_87_8d = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp40);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(92), sequence_f0_91_81_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_91_81_adv, byte_range_87_8d);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_andc(r10000_10ffff_tmp10, tmp4);
            byte_82 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp42);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp43 = simd_not(tmp6);
            r10000_10ffff_tmp44 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp43), simd_andc(tmp8, basis_bits.bit_5));
            byte_range_bb_bc = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp44);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(93), sequence_f0_91_82_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_91_82_adv, byte_range_bb_bc);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(tmp15, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(sequence_f0_91_82_adv, byte_range_be_bf);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_andc(tmp8, tmp4);
            byte_83 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp48);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp49 = simd_or(tmp4, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp49);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(94), sequence_f0_91_83_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp50);
            byte_85 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp14);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_80_83 = r10000_10ffff_tmp8;
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(95), sequence_f0_91_85_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_91_85_adv, byte_range_80_83);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp5, basis_bits.bit_6);
            byte_range_b4_b5 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_85_adv, byte_range_b4_b5);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp53);
            byte_87 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp18);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp54 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp54), simd_andc(tmp11, basis_bits.bit_4));
            byte_range_85_88 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp55);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(96), sequence_f0_91_87_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_91_87_adv, byte_range_85_88);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp56);
            byte_8d = simd_and(r10000_10ffff_tmp4, tmp48);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_91_87_adv, byte_8d);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_andc(tmp20, tmp6);
            byte_88 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp58);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            byte_range_b8_bd = simd_andc(r10000_10ffff_tmp32, r10000_10ffff_tmp38);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(97), sequence_f0_91_88_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_91_88_adv, byte_range_b8_bd);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp59);
            byte_93 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp48);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp10);
            byte_86 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp60);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(98), sequence_f0_91_93_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_91_93_adv, byte_86);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp61);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp63 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp63), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_4));
            byte_range_81_89 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp64);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(99), sequence_f0_91_97_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_91_97_adv, byte_range_81_89);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp65);
            byte_99 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp23);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_81_83 = simd_and(byte_range_80_83, tmp6);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(100), sequence_f0_91_99_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_91_99_adv, byte_range_81_83);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp66);
            byte_92 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp42);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(101), r10000_10ffff_tmp67));
            sequence_f0_92_91 = simd_and(r10000_10ffff_tmp67, byte_91);
            sequence_f0_92_adv = r10000_10ffff_tmp67;
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp28, tmp11);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(102), sequence_f0_92_91_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b4);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp68);
            byte_96 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp60);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(103), r10000_10ffff_tmp69));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp69, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp69;
            byte_range_ae_af = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp46);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(104), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp70 = simd_and(sequence_f0_96_a9_adv, byte_range_ae_af);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp70);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            byte_b5 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp14);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(105), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_96_ab_adv, byte_b5);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp71);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            r10000_10ffff_tmp72 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp72), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_b7_bb = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp73);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(106), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp74 = simd_and(sequence_f0_96_ac_adv, byte_range_b7_bb);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp74);
            byte_ad = simd_and(r10000_10ffff_tmp15, tmp48);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(107), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp75 = simd_and(sequence_f0_96_ad_adv, byte_84);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp75);
            byte_9b = simd_and(r10000_10ffff_tmp2, tmp44);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp42);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(108), r10000_10ffff_tmp76));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp76, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp76;
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(109), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9b_b2_adv, byte_9f);
            struct_gc_P.cc = simd_or(struct_gc_P.cc, r10000_10ffff_tmp77);
          }
          else {
            carryQ.CarryDequeueEnqueue(79, 31);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 110);
        }
        carryQ.CarryQ_Adjust(110);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<110, 0> carryQ;
  };

  struct Property_gc_No {
  Property_gc_No() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_No & struct_gc_No) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, byte_range_b2_b3;
		BitBlock byte_c2_adv, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock r80_7ff_tmp13, byte_b9, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, byte_range_bc_be, r80_7ff_tmp18, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3;
		BitBlock byte_a7, r800_fff_tmp4, sequence_e0_a7, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock byte_range_b4_b9, sequence_e0_a7_adv, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp14, byte_range_b2_b7, sequence_e0_ad_adv, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, byte_af, sequence_e0_af, r800_fff_tmp17;
		BitBlock byte_range_b0_b2, sequence_e0_af_adv, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock byte_b1, sequence_e0_b1, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock byte_range_b8_be, sequence_e0_b1_adv, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock byte_b5, sequence_e0_b5, r800_fff_tmp24, byte_range_b0_b5;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp25, r800_fff_tmp26, byte_bc;
		BitBlock sequence_e0_bc, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, byte_range_aa_b3, sequence_e0_bc_adv, r800_fff_tmp31;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, byte_8d;
		BitBlock r1000_1fff_tmp5, sequence_e1_8d, byte_e1_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, byte_range_a9_bc, sequence_e1_8d_adv;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, byte_9f, sequence_e1_9f;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_range_b0_b9, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23, sequence_e1_a7;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26, byte_9a;
		BitBlock sequence_e1_a7_adv, r1000_1fff_tmp27, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock byte_b0, sequence_e2_81_adv, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp14, byte_range_80_89;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp15, r2000_2fff_tmp16, byte_85;
		BitBlock sequence_e2_85, r2000_2fff_tmp17, byte_range_90_9f;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp18, r2000_2fff_tmp19, byte_86;
		BitBlock sequence_e2_86, r2000_2fff_tmp20, r2000_2fff_tmp21, byte_89;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp22, byte_91, sequence_e2_91;
		BitBlock byte_range_a0_bf, sequence_e2_91_adv, r2000_2fff_tmp23, byte_92;
		BitBlock sequence_e2_92, r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock byte_range_80_9b, sequence_e2_92_adv, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, r2000_2fff_tmp29, byte_93, sequence_e2_93;
		BitBlock r2000_2fff_tmp30, byte_range_aa_bf, sequence_e2_93_adv;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, byte_9d, sequence_e2_9d;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, byte_range_b6_bf;
		BitBlock sequence_e2_9d_adv, r2000_2fff_tmp35, r2000_2fff_tmp36, byte_9e;
		BitBlock sequence_e2_9e, r2000_2fff_tmp37, byte_range_80_93;
		BitBlock sequence_e2_9e_adv, r2000_2fff_tmp38, byte_b3, sequence_e2_b3;
		BitBlock byte_bd, sequence_e2_b3_adv, r2000_2fff_tmp39, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_86;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, byte_range_92_95, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11, byte_88;
		BitBlock sequence_e3_88, r3000_4dff_tmp12, r3000_4dff_tmp13, r3000_4dff_tmp14;
		BitBlock byte_range_a0_a9, sequence_e3_88_adv, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, sequence_e3_89, byte_range_88_8f;
		BitBlock sequence_e3_89_adv, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, byte_range_91_9f, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, byte_8a, sequence_e3_8a, sequence_e3_8a_adv;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, r3000_4dff_tmp25;
		BitBlock byte_range_b1_bf, r3000_4dff_tmp26, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_a0, ra000_ffff_tmp6;
		BitBlock sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, sequence_ea_a0_adv;
		BitBlock ra000_ffff_tmp11, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_84;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_84, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, byte_range_87_b3;
		BitBlock sequence_f0_90_84_adv, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, sequence_f0_90_85, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_range_b5_b8, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock sequence_f0_90_86, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock byte_range_8a_8b, sequence_f0_90_86_adv, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, byte_8b, sequence_f0_90_8b, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock byte_range_a1_bb, sequence_f0_90_8b_adv, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, byte_8c, sequence_f0_90_8c, r10000_10ffff_tmp41;
		BitBlock byte_range_a0_a3, sequence_f0_90_8c_adv, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, byte_a1, sequence_f0_90_a1, byte_range_98_9f;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock byte_range_b9_bf, r10000_10ffff_tmp46, r10000_10ffff_tmp47, byte_a2;
		BitBlock sequence_f0_90_a2, byte_range_a7_af, sequence_f0_90_a2_adv;
		BitBlock r10000_10ffff_tmp48, byte_a4, sequence_f0_90_a4, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, byte_range_96_9b;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp52, r10000_10ffff_tmp53;
		BitBlock byte_a9, sequence_f0_90_a9, byte_range_80_87, sequence_f0_90_a9_adv;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock byte_range_bd_be, r10000_10ffff_tmp57, r10000_10ffff_tmp58, byte_aa;
		BitBlock sequence_f0_90_aa, r10000_10ffff_tmp59, byte_range_9d_9f;
		BitBlock sequence_f0_90_aa_adv, r10000_10ffff_tmp60, byte_ab;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock byte_range_ab_af, sequence_f0_90_ab_adv, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, sequence_f0_90_ad, sequence_f0_90_ad_adv;
		BitBlock r10000_10ffff_tmp65, byte_range_b8_bf, r10000_10ffff_tmp66;
		BitBlock r10000_10ffff_tmp67, byte_ae, sequence_f0_90_ae, byte_range_a9_af;
		BitBlock sequence_f0_90_ae_adv, r10000_10ffff_tmp68, sequence_f0_90_b9;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, byte_range_a0_be;
		BitBlock sequence_f0_90_b9_adv, r10000_10ffff_tmp71, sequence_f0_91;
		BitBlock r10000_10ffff_tmp72, sequence_f0_91_81, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock byte_range_92_a5, sequence_f0_91_81_adv, r10000_10ffff_tmp79;
		BitBlock r10000_10ffff_tmp80, byte_87, sequence_f0_91_87, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, byte_range_a1_b4;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp84, r10000_10ffff_tmp85;
		BitBlock byte_a3, sequence_f0_91_a3, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock byte_range_aa_b2, sequence_f0_91_a3_adv, r10000_10ffff_tmp91, byte_96;
		BitBlock sequence_f0_96, r10000_10ffff_tmp92, sequence_f0_96_ad;
		BitBlock sequence_f0_96_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock r10000_10ffff_tmp95, r10000_10ffff_tmp96, r10000_10ffff_tmp97;
		BitBlock byte_range_9b_a1, sequence_f0_96_ad_adv, r10000_10ffff_tmp98;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp99, sequence_f0_9d_8d;
		BitBlock sequence_f0_9d_adv, byte_range_a0_b1, sequence_f0_9d_8d_adv;
		BitBlock r10000_10ffff_tmp100, sequence_f0_9e, r10000_10ffff_tmp101;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, byte_range_87_8f;
		BitBlock sequence_f0_9e_a3_adv, r10000_10ffff_tmp102, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp103, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock r10000_10ffff_tmp104, byte_range_80_8c, sequence_f0_9f_84_adv;
		BitBlock r10000_10ffff_tmp105;




        struct_gc_No.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 59))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_6, r80_7ff_tmp3);
            byte_range_b2_b3 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp10 = simd_and(byte_c2_adv, byte_range_b2_b3);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp11, r80_7ff_tmp12);
            byte_b9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_and(byte_c2_adv, byte_b9);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r80_7ff_tmp14);
            r80_7ff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp8, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bc_be = simd_andc(r80_7ff_tmp16, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_and(byte_c2_adv, byte_range_bc_be);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r80_7ff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 30))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 27))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 11))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(2, 7))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(2), r800_fff_tmp4));
                  sequence_e0_a7 = simd_and(r800_fff_tmp4, byte_a7);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_not(r800_fff_tmp7);
                  r800_fff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp8), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r800_fff_tmp6, r800_fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(3), sequence_e0_a7_adv));
                  r800_fff_tmp10 = simd_and(sequence_e0_a7_adv, byte_range_b4_b9);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp11, r800_fff_tmp12);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp14 = simd_andc(r800_fff_tmp6, basis_bits.bit_4);
                  byte_range_b2_b7 = simd_and(r800_fff_tmp14, r800_fff_tmp7);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(4), sequence_e0_ad_adv));
                  r800_fff_tmp15 = simd_and(sequence_e0_ad_adv, byte_range_b2_b7);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp11, r800_fff_tmp2);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp17 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_range_b0_b2 = simd_andc(r800_fff_tmp17, r800_fff_tmp2);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(5), sequence_e0_af_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_af_adv, byte_range_b0_b2);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp6, r800_fff_tmp19);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp20 = simd_and(r800_fff_tmp6, basis_bits.bit_4);
                  r800_fff_tmp21 = simd_and(basis_bits.bit_5, r800_fff_tmp2);
                  byte_range_b8_be = simd_andc(r800_fff_tmp20, r800_fff_tmp21);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(6), sequence_e0_b1_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_b1_adv, byte_range_b8_be);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_b5 = simd_and(r800_fff_tmp6, r800_fff_tmp23);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_b0_b5 = simd_andc(r800_fff_tmp14, r800_fff_tmp24);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(7), sequence_e0_b5_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_b5_adv, byte_range_b0_b5);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp11, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp6, r800_fff_tmp26);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp27 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp28 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_4, r800_fff_tmp7);
                  r800_fff_tmp30 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp28), simd_andc(r800_fff_tmp29, basis_bits.bit_3));
                  byte_range_aa_b3 = simd_and(r800_fff_tmp27, r800_fff_tmp30);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(8), sequence_e0_bc_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_bc_adv, byte_range_aa_b3);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r800_fff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 7);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(9, 4))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(9), r1000_1fff_tmp5));
                  sequence_e1_8d = simd_and(r1000_1fff_tmp5, byte_8d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp3, r800_ffff_tmp3);
                  r1000_1fff_tmp8 = simd_not(r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp8), simd_andc(r1000_1fff_tmp10, basis_bits.bit_3));
                  byte_range_a9_bc = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp11);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(10), sequence_e1_8d_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_8d_adv, byte_range_a9_bc);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp15);
                  byte_9f = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp18 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_and(basis_bits.bit_4, r1000_1fff_tmp19);
                  byte_range_b0_b9 = simd_andc(r1000_1fff_tmp18, r1000_1fff_tmp20);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(11), sequence_e1_9f_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_9f_adv, byte_range_b0_b9);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp23 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp15);
                  byte_a7 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp24 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp25 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp25);
                  byte_9a = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp26);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(12), sequence_e1_a7_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_a7_adv, byte_9a);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r1000_1fff_tmp27);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(13, 16))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(13, 11))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(13), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(14), sequence_e2_81_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_81_adv, byte_b0);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp11), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b9 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_81_adv, byte_range_b4_b9);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp13);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_4, r2000_2fff_tmp10);
                  byte_range_80_89 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(15), sequence_e2_82_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_82_adv, byte_range_80_89);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  byte_range_90_9f = simd_and(r800_ffff_tmp5, r2000_2fff_tmp17);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(16), sequence_e2_85_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_85_adv, byte_range_90_9f);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp19);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp3);
                  byte_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp21);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(17), sequence_e2_86_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_86_adv, byte_89);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp22);
                  byte_91 = simd_and(byte_range_90_9f, r2000_2fff_tmp4);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(18), sequence_e2_91_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp23);
                  byte_92 = simd_and(byte_range_90_9f, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp24 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp26 = simd_and(basis_bits.bit_3, r2000_2fff_tmp25);
                  byte_range_80_9b = simd_andc(r2000_2fff_tmp24, r2000_2fff_tmp26);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(19), sequence_e2_92_adv));
                  r2000_2fff_tmp27 = simd_and(sequence_e2_92_adv, byte_range_80_9b);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp29 = simd_andc(r2000_2fff_tmp28, r800_ffff_tmp1);
                  byte_93 = simd_and(byte_range_90_9f, r2000_2fff_tmp29);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp30 = simd_or(basis_bits.bit_3, r2000_2fff_tmp14);
                  byte_range_aa_bf = simd_and(byte_range_a0_bf, r2000_2fff_tmp30);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(20), sequence_e2_93_adv));
                  r2000_2fff_tmp31 = simd_and(sequence_e2_93_adv, byte_range_aa_bf);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp3);
                  byte_9d = simd_and(byte_range_90_9f, r2000_2fff_tmp32);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp34 = simd_or(basis_bits.bit_4, r2000_2fff_tmp33);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp34);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(21), sequence_e2_9d_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_9d_adv, byte_range_b6_bf);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp25, r2000_4dff_tmp1);
                  byte_9e = simd_and(byte_range_90_9f, r2000_2fff_tmp36);
                  sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
                  r2000_2fff_tmp37 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_80_93 = simd_andc(r2000_2fff_tmp24, r2000_2fff_tmp37);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(22), sequence_e2_9e_adv));
                  r2000_2fff_tmp38 = simd_and(sequence_e2_9e_adv, byte_range_80_93);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp38);
                  byte_b3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp29);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  byte_bd = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp32);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(23), sequence_e2_b3_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_b3_adv, byte_bd);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r2000_2fff_tmp39);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 11);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(24, 5))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(24), r3000_4dff_tmp4));
                  sequence_e3_86 = simd_and(r3000_4dff_tmp4, byte_86);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_andc(r3000_4dff_tmp6, basis_bits.bit_4);
                  r3000_4dff_tmp8 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_92_95 = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp8);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(25), sequence_e3_86_adv));
                  r3000_4dff_tmp9 = simd_and(sequence_e3_86_adv, byte_range_92_95);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp11 = simd_andc(r3000_4dff_tmp10, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp11);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp13 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp14 = simd_and(basis_bits.bit_4, r3000_4dff_tmp13);
                  byte_range_a0_a9 = simd_andc(r3000_4dff_tmp12, r3000_4dff_tmp14);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(26), sequence_e3_88_adv));
                  r3000_4dff_tmp15 = simd_and(sequence_e3_88_adv, byte_range_a0_a9);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp17 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp16);
                  byte_89 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp17);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  byte_range_88_8f = simd_and(r3000_4dff_tmp2, basis_bits.bit_4);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(27), sequence_e3_89_adv));
                  r3000_4dff_tmp18 = simd_and(sequence_e3_89_adv, byte_range_88_8f);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp18);
                  r3000_4dff_tmp19 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp20 = simd_or(basis_bits.bit_4, r3000_4dff_tmp19);
                  byte_range_91_9f = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp20);
                  r3000_4dff_tmp21 = simd_and(sequence_e3_89_adv, byte_range_91_9f);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_and(r3000_4dff_tmp10, r2000_4dff_tmp1);
                  byte_8a = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp22);
                  sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
                  byte_range_80_89 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp14);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(28), sequence_e3_8a_adv));
                  r3000_4dff_tmp23 = simd_and(sequence_e3_8a_adv, byte_range_80_89);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp25 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp24);
                  byte_range_b1_bf = simd_and(r3000_4dff_tmp25, r3000_4dff_tmp20);
                  r3000_4dff_tmp26 = simd_and(sequence_e3_8a_adv, byte_range_b1_bf);
                  struct_gc_No.cc = simd_or(struct_gc_No.cc, r3000_4dff_tmp26);
                }
                else {
                  carryQ.CarryDequeueEnqueue(24, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 16);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 27);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(29, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(29), ra000_ffff_tmp6));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp6, byte_a0);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp8, basis_bits.bit_4);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_b0_b5 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp10);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(30), sequence_ea_a0_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a0_adv, byte_range_b0_b5);
              struct_gc_No.cc = simd_or(struct_gc_No.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(29, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 30);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(31, 28))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(31), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(32), r10000_10ffff_tmp12));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp12, byte_84);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_not(r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp14), simd_andc(r10000_10ffff_tmp18, basis_bits.bit_2));
            byte_range_87_b3 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(33), sequence_f0_90_84_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_84_adv, byte_range_87_b3);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp21);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp22);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp25 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp25), simd_andc(r10000_10ffff_tmp26, basis_bits.bit_4));
            byte_range_b5_b8 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp27);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(34), sequence_f0_90_85_adv));
            r10000_10ffff_tmp28 = simd_and(sequence_f0_90_85_adv, byte_range_b5_b8);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp29);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp30);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp31 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp31, basis_bits.bit_6);
            byte_range_8a_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp32);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(35), sequence_f0_90_86_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_86_adv, byte_range_8a_8b);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp15);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp34);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp37 = simd_not(r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp37), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            byte_range_a1_bb = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp38);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(36), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_8b_adv, byte_range_a1_bb);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp36, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp40);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp1);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(37), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_8c_adv, byte_range_a0_a3);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp43);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            byte_range_98_9f = simd_and(r10000_10ffff_tmp6, basis_bits.bit_4);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(38), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_90_a1_adv, byte_range_98_9f);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp23, basis_bits.bit_4);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp24);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_90_a1_adv, byte_range_b9_bf);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp47);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            byte_range_a7_af = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp17);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(39), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_90_a2_adv, byte_range_a7_af);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp48);
            byte_a4 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp11);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            r10000_10ffff_tmp49 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp51 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp49), simd_andc(r10000_10ffff_tmp50, basis_bits.bit_4));
            byte_range_96_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp51);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(40), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_a4_adv, byte_range_96_9b);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp21);
            byte_a9 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp53);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_80_87 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(41), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_90_a9_adv, byte_range_80_87);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp36);
            r10000_10ffff_tmp56 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bd_be = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_90_a9_adv, byte_range_bd_be);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp29);
            byte_aa = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp58);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            r10000_10ffff_tmp59 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp36);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp2);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(42), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_90_aa_adv, byte_range_9d_9f);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp60);
            byte_ab = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp34);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp41, basis_bits.bit_4);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp15);
            byte_range_ab_af = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp62);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(43), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp63 = simd_and(sequence_f0_90_ab_adv, byte_range_ab_af);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp21);
            byte_ad = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp64);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(44), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_ad_adv, byte_range_98_9f);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp65);
            byte_range_b8_bf = r10000_10ffff_tmp45;
            r10000_10ffff_tmp66 = simd_and(sequence_f0_90_ad_adv, byte_range_b8_bf);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp29);
            byte_ae = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp67);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            byte_range_a9_af = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp24);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(45), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_90_ae_adv, byte_range_a9_af);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp68);
            byte_b9 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp53);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp15);
            r10000_10ffff_tmp70 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp69);
            byte_range_a0_be = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp70);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(46), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_be);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp71);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp43);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp43);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(47), r10000_10ffff_tmp72));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp72, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp72;
            r10000_10ffff_tmp73 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp50);
            r10000_10ffff_tmp74 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_not(r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp77 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp78 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp75), simd_andc(r10000_10ffff_tmp77, basis_bits.bit_2));
            byte_range_92_a5 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp78);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(48), sequence_f0_91_81_adv));
            r10000_10ffff_tmp79 = simd_and(sequence_f0_91_81_adv, byte_range_92_a5);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp80);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp81 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp26);
            r10000_10ffff_tmp82 = simd_not(r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp82), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            byte_range_a1_b4 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp83);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(49), sequence_f0_91_87_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_91_87_adv, byte_range_a1_b4);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_a3 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp85);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp86 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp15);
            r10000_10ffff_tmp87 = simd_not(r10000_10ffff_tmp86);
            r10000_10ffff_tmp88 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp89 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp88);
            r10000_10ffff_tmp90 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp87), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_3));
            byte_range_aa_b2 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp90);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(50), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp91 = simd_and(sequence_f0_91_a3_adv, byte_range_aa_b2);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp91);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp30);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(51), r10000_10ffff_tmp92));
            sequence_f0_96_ad = simd_and(r10000_10ffff_tmp92, byte_ad);
            sequence_f0_96_adv = r10000_10ffff_tmp92;
            r10000_10ffff_tmp93 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp94 = simd_not(r10000_10ffff_tmp93);
            r10000_10ffff_tmp95 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp62);
            r10000_10ffff_tmp96 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp95);
            r10000_10ffff_tmp97 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp94), simd_andc(r10000_10ffff_tmp96, basis_bits.bit_2));
            byte_range_9b_a1 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp97);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(52), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp98 = simd_and(sequence_f0_96_ad_adv, byte_range_9b_a1);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp98);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp64);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp64);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(53), r10000_10ffff_tmp99));
            sequence_f0_9d_8d = simd_and(r10000_10ffff_tmp99, byte_8d);
            sequence_f0_9d_adv = r10000_10ffff_tmp99;
            byte_range_a0_b1 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp77);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(54), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_b1);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp100);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp67);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(55), r10000_10ffff_tmp101));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp101, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp101;
            byte_range_87_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(56), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_9e_a3_adv, byte_range_87_8f);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp102);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp69);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(57), r10000_10ffff_tmp103));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp103, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp103;
            r10000_10ffff_tmp104 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp26);
            byte_range_80_8c = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp104);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(58), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp105 = simd_and(sequence_f0_9f_84_adv, byte_range_80_8c);
            struct_gc_No.cc = simd_or(struct_gc_No.cc, r10000_10ffff_tmp105);
          }
          else {
            carryQ.CarryDequeueEnqueue(31, 28);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 59);
        }
        carryQ.CarryQ_Adjust(59);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<59, 0> carryQ;
  };

  struct Property_gc_Ps {
  Property_gc_Ps() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Ps & struct_gc_Ps) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_28_7b_1;
		BitBlock byte_range_c0_ff, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e4, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, byte_range_80_b7, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3;
		BitBlock byte_bc, r800_fff_tmp4, sequence_e0_bc, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, byte_ba, sequence_e0_bc_adv, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_9a;
		BitBlock r1000_1fff_tmp4, sequence_e1_9a, byte_e1_adv, byte_9b;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp5, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, sequence_e2_80_adv, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, byte_9e, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_81, sequence_e2_81, r2000_2fff_tmp13, byte_85;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, byte_bd, r2000_2fff_tmp17, byte_82, sequence_e2_82;
		BitBlock byte_8d, sequence_e2_82_adv, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock byte_8c, sequence_e2_8c, byte_88, sequence_e2_8c_adv;
		BitBlock r2000_2fff_tmp20, byte_8a, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, byte_a9, r2000_2fff_tmp24, byte_9d, sequence_e2_9d;
		BitBlock byte_a8, sequence_e2_9d_adv, r2000_2fff_tmp25, byte_aa;
		BitBlock r2000_2fff_tmp26, byte_ac, r2000_2fff_tmp27, byte_ae;
		BitBlock r2000_2fff_tmp28, byte_b0, r2000_2fff_tmp29, byte_b2;
		BitBlock r2000_2fff_tmp30, byte_b4, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock byte_9f, sequence_e2_9f, sequence_e2_9f_adv, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, byte_a6, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39, sequence_e2_a6;
		BitBlock r2000_2fff_tmp40, byte_83, sequence_e2_a6_adv, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, byte_87, r2000_2fff_tmp44;
		BitBlock byte_89, r2000_2fff_tmp45, byte_8b, r2000_2fff_tmp46;
		BitBlock r2000_2fff_tmp47, byte_8f, r2000_2fff_tmp48, byte_91;
		BitBlock r2000_2fff_tmp49, byte_93, r2000_2fff_tmp50, byte_95;
		BitBlock r2000_2fff_tmp51, byte_97, r2000_2fff_tmp52, byte_a7, sequence_e2_a7;
		BitBlock byte_98, sequence_e2_a7_adv, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, byte_b8, sequence_e2_b8, byte_a2;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp56, byte_a4, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, byte_b9, sequence_e2_b9;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp60, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11, byte_8e;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, byte_90, r3000_4dff_tmp14;
		BitBlock byte_94, r3000_4dff_tmp15, r3000_4dff_tmp16, byte_96;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, r3000_4dff_tmp21, r3000_4dff_tmp22, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock byte_ef, ra000_ffff_tmp3, ra000_ffff_tmp4, sequence_ef_b4;
		BitBlock byte_ef_adv, byte_bf, sequence_ef_b4_adv, ra000_ffff_tmp5;
		BitBlock sequence_ef_b8, ra000_ffff_tmp6, ra000_ffff_tmp7, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, byte_b5;
		BitBlock ra000_ffff_tmp11, byte_b7, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_bb, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, sequence_ef_b9, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, byte_99, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock sequence_ef_bd, sequence_ef_bd_adv, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37;




        struct_gc_Ps.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp4, tmp11);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_28_7b_1 = simd_or(tmp14, tmp17);
        struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, cc_range_28_7b_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 24))) {
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 24))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, tmp5);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
            r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp7));
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, byte_range_80_b7);
            r800_ffff_tmp9 = simd_or(byte_range_e0_e3, r800_ffff_tmp8);
            if ((bitblock::any(r800_ffff_tmp9) || carryQ.CarryTest(1, 17))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, tmp5);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp4, tmp15);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, tmp5);
                  byte_bc = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_bc = simd_and(r800_fff_tmp4, byte_bc);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp6 = simd_and(tmp4, r800_fff_tmp5);
                  byte_ba = simd_and(r800_fff_tmp1, r800_fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_bc_adv, byte_ba);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(sequence_e0_bc_adv, byte_bc);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r800_fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(3, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp4, tmp9);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_and(tmp4, r1000_1fff_tmp2);
                  byte_9a = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r1000_1fff_tmp4));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp4, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_9b = simd_and(r1000_1fff_tmp1, tmp12);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(4), sequence_e1_9a_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_9a_adv, byte_9b);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp8);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(5, 13))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(5, 11))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp4, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, tmp5);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp4, tmp9);
                  r2000_2fff_tmp6 = simd_and(tmp4, r2000_4dff_tmp1);
                  byte_9a = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(6), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_9a);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  byte_9e = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(sequence_e2_80_adv, byte_9e);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp12 = simd_andc(r2000_2fff_tmp11, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp11);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp13);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(7), sequence_e2_81_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_81_adv, byte_85);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp4, tmp15);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp11);
                  byte_bd = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_81_adv, byte_bd);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp17);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(8), sequence_e2_82_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_82_adv, byte_8d);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(r2000_2fff_tmp8, tmp5);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp19);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_88 = simd_and(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(9), sequence_e2_8c_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_8c_adv, byte_88);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp20);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_8c_adv, byte_8a);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp4, tmp2);
                  r2000_2fff_tmp23 = simd_and(tmp4, r2000_2fff_tmp11);
                  byte_a9 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_8c_adv, byte_a9);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp24);
                  byte_9d = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp16);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  byte_a8 = simd_and(r2000_2fff_tmp22, tmp6);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(10), sequence_e2_9d_adv));
                  r2000_2fff_tmp25 = simd_and(sequence_e2_9d_adv, byte_a8);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp25);
                  byte_aa = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp6);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_9d_adv, byte_aa);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp26);
                  byte_ac = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp19);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_9d_adv, byte_ac);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp27);
                  byte_ae = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp9);
                  r2000_2fff_tmp28 = simd_and(sequence_e2_9d_adv, byte_ae);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp28);
                  byte_b0 = simd_andc(r2000_2fff_tmp15, r2000_2fff_tmp3);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_9d_adv, byte_b0);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp29);
                  byte_b2 = simd_and(r2000_2fff_tmp15, r2000_4dff_tmp2);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_9d_adv, byte_b2);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp30);
                  byte_b4 = simd_and(r2000_2fff_tmp15, r800_ffff_tmp3);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_9d_adv, byte_b4);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp8, tmp11);
                  byte_9f = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp32);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(11), sequence_e2_9f_adv));
                  r2000_2fff_tmp33 = simd_and(sequence_e2_9f_adv, byte_85);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp34);
                  r2000_2fff_tmp35 = simd_and(sequence_e2_9f_adv, byte_a6);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(sequence_e2_9f_adv, byte_a8);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp36);
                  r2000_2fff_tmp37 = simd_and(sequence_e2_9f_adv, byte_aa);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_9f_adv, byte_ac);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(sequence_e2_9f_adv, byte_ae);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp39);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  r2000_2fff_tmp40 = simd_andc(tmp11, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp40);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(12), sequence_e2_a6_adv));
                  r2000_2fff_tmp41 = simd_and(sequence_e2_a6_adv, byte_83);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(sequence_e2_a6_adv, byte_85);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(r800_ffff_tmp2, tmp11);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(sequence_e2_a6_adv, byte_87);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp44);
                  byte_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp23);
                  r2000_2fff_tmp45 = simd_and(sequence_e2_a6_adv, byte_89);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp45);
                  byte_8b = simd_and(r2000_2fff_tmp2, tmp12);
                  r2000_2fff_tmp46 = simd_and(sequence_e2_a6_adv, byte_8b);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_and(sequence_e2_a6_adv, byte_8d);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp47);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp32);
                  r2000_2fff_tmp48 = simd_and(sequence_e2_a6_adv, byte_8f);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp48);
                  byte_91 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp12);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_a6_adv, byte_91);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp49);
                  byte_93 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp40);
                  r2000_2fff_tmp50 = simd_and(sequence_e2_a6_adv, byte_93);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp50);
                  byte_95 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp13);
                  r2000_2fff_tmp51 = simd_and(sequence_e2_a6_adv, byte_95);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp51);
                  byte_97 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp43);
                  r2000_2fff_tmp52 = simd_and(sequence_e2_a6_adv, byte_97);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp52);
                  byte_a7 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp43);
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  byte_98 = simd_and(r2000_2fff_tmp5, tmp6);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(13), sequence_e2_a7_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_a7_adv, byte_98);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_and(sequence_e2_a7_adv, byte_9a);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp54);
                  byte_bc = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp19);
                  r2000_2fff_tmp55 = simd_and(sequence_e2_a7_adv, byte_bc);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp55);
                  byte_b8 = simd_and(r2000_2fff_tmp15, tmp6);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_a2 = simd_and(r2000_2fff_tmp22, r2000_4dff_tmp2);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(14), sequence_e2_b8_adv));
                  r2000_2fff_tmp56 = simd_and(sequence_e2_b8_adv, byte_a2);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp56);
                  byte_a4 = simd_and(r2000_2fff_tmp22, r800_ffff_tmp3);
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b8_adv, byte_a4);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b8_adv, byte_a6);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp58);
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b8_adv, byte_a8);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp59);
                  byte_b9 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp23);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(15), sequence_e2_b9_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b9_adv, byte_82);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r2000_2fff_tmp60);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 11);
                }
                r2000_4dff_tmp3 = simd_andc(tmp11, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp8);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(16, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp4, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, tmp5);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(16), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  byte_88 = simd_and(r3000_4dff_tmp2, tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(17), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_88);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp5);
                  r3000_4dff_tmp6 = simd_and(tmp4, r2000_4dff_tmp1);
                  byte_8a = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_8a);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp9 = simd_andc(r3000_4dff_tmp8, tmp5);
                  byte_8c = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, byte_8c);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(r3000_4dff_tmp8, r2000_4dff_tmp1);
                  byte_8e = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, byte_8e);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(r800_ffff_tmp4, tmp9);
                  byte_90 = simd_andc(r3000_4dff_tmp13, r3000_4dff_tmp3);
                  r3000_4dff_tmp14 = simd_and(sequence_e3_80_adv, byte_90);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp14);
                  byte_94 = simd_and(r3000_4dff_tmp13, r800_ffff_tmp3);
                  r3000_4dff_tmp15 = simd_and(sequence_e3_80_adv, byte_94);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_96 = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_and(sequence_e3_80_adv, byte_96);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp17);
                  byte_98 = simd_and(r3000_4dff_tmp13, tmp6);
                  r3000_4dff_tmp18 = simd_and(sequence_e3_80_adv, byte_98);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp18);
                  byte_9a = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp6);
                  r3000_4dff_tmp19 = simd_and(sequence_e3_80_adv, byte_9a);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp19);
                  r3000_4dff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp21 = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp20);
                  byte_9d = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_and(sequence_e3_80_adv, byte_9d);
                  struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, r3000_4dff_tmp22);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 13);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 17);
            }
            r800_ffff_tmp10 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp11);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(18, 6))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp11);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp4, tmp15);
              byte_b4 = simd_and(ra000_ffff_tmp3, r800_ffff_tmp3);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(18), ra000_ffff_tmp4));
              sequence_ef_b4 = simd_and(ra000_ffff_tmp4, byte_b4);
              byte_ef_adv = ra000_ffff_tmp4;
              byte_bf = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp2);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(19), sequence_ef_b4_adv));
              ra000_ffff_tmp5 = simd_and(sequence_ef_b4_adv, byte_bf);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp5);
              byte_b8 = simd_and(ra000_ffff_tmp3, tmp6);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp6 = simd_and(r800_ffff_tmp4, tmp9);
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp2, tmp11);
              byte_97 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(20), sequence_ef_b8_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ef_b8_adv, byte_97);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp10 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp9);
              byte_b5 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(sequence_ef_b8_adv, byte_b5);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp11);
              byte_b7 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp7);
              ra000_ffff_tmp12 = simd_and(sequence_ef_b8_adv, byte_b7);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(tmp4, ra000_ffff_tmp9);
              byte_b9 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(sequence_ef_b8_adv, byte_b9);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp14);
              byte_bb = simd_and(ra000_ffff_tmp3, tmp12);
              ra000_ffff_tmp15 = simd_and(sequence_ef_b8_adv, byte_bb);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_bd = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(sequence_ef_b8_adv, byte_bd);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ef_b8_adv, byte_bf);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp18);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp20 = simd_andc(r800_ffff_tmp4, ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp9, r800_ffff_tmp1);
              byte_81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(21), sequence_ef_b9_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ef_b9_adv, byte_81);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_andc(tmp11, r800_ffff_tmp1);
              byte_83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ef_b9_adv, byte_83);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp24);
              byte_87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp7);
              ra000_ffff_tmp25 = simd_and(sequence_ef_b9_adv, byte_87);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp25);
              byte_99 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp13);
              ra000_ffff_tmp26 = simd_and(sequence_ef_b9_adv, byte_99);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp26);
              byte_9b = simd_and(ra000_ffff_tmp6, tmp12);
              ra000_ffff_tmp27 = simd_and(sequence_ef_b9_adv, byte_9b);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp27);
              byte_9d = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp16);
              ra000_ffff_tmp28 = simd_and(sequence_ef_b9_adv, byte_9d);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_andc(ra000_ffff_tmp1, tmp5);
              byte_bc = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp29);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_88 = simd_and(ra000_ffff_tmp20, tmp6);
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(22), sequence_ef_bc_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ef_bc_adv, byte_88);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp30);
              ra000_ffff_tmp31 = simd_and(sequence_ef_bc_adv, byte_bb);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp31);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(23), sequence_ef_bd_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ef_bd_adv, byte_9b);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp32);
              byte_9f = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              ra000_ffff_tmp33 = simd_and(sequence_ef_bd_adv, byte_9f);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(r800_ffff_tmp4, tmp2);
              ra000_ffff_tmp35 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp35, r800_ffff_tmp1);
              byte_a2 = simd_and(ra000_ffff_tmp34, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(sequence_ef_bd_adv, byte_a2);
              struct_gc_Ps.cc = simd_or(struct_gc_Ps.cc, ra000_ffff_tmp37);
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 24);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 24);
        }
        carryQ.CarryQ_Adjust(24);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<24, 0> carryQ;
  };

  struct Property_gc_C {
  Property_gc_C() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_C & struct_gc_C) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock cc_range_0_7f_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2;
		BitBlock r80_7ff_tmp6, byte_range_80_9f, byte_c2_adv, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_ad;
		BitBlock r80_7ff_tmp12, byte_range_c4_cf, byte_cd, byte_range_b0_bf;
		BitBlock r100_3ff_tmp1, r100_3ff_tmp2, r100_3ff_tmp3, byte_range_ce_cf;
		BitBlock r100_3ff_tmp4, r370_3ff_tmp1, r370_3ff_tmp2, byte_range_b8_b9;
		BitBlock byte_cd_adv, r370_3ff_tmp3, r370_3ff_tmp4, byte_ce, r370_3ff_tmp5;
		BitBlock byte_range_80_83, byte_ce_adv, r370_3ff_tmp6, r370_3ff_tmp7, byte_8b;
		BitBlock r370_3ff_tmp8, byte_8d, r370_3ff_tmp9, byte_a2, r370_3ff_tmp10;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, byte_range_d0_d7, r400_5ff_tmp1;
		BitBlock r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3, byte_d6;
		BitBlock byte_range_80_8f, r400_5ff_tmp4, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock r500_58f_tmp5, byte_d5, r500_58f_tmp6, r500_58f_tmp7, r530_58f_tmp1;
		BitBlock byte_b0, byte_d4_adv, r530_58f_tmp2, r530_58f_tmp3, r530_58f_tmp4;
		BitBlock r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7, byte_range_97_98;
		BitBlock byte_d5_adv, r530_58f_tmp8, byte_a0, r530_58f_tmp9, r530_58f_tmp10;
		BitBlock r530_58f_tmp11, byte_88, byte_d6_adv, r530_58f_tmp12, r530_58f_tmp13;
		BitBlock r530_58f_tmp14, r530_58f_tmp15, byte_range_8b_8c, r530_58f_tmp16;
		BitBlock byte_range_90_bf, r400_5ff_tmp7, r400_5ff_tmp8, byte_d7;
		BitBlock r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, byte_90;
		BitBlock r590_5ff_tmp4, byte_range_88_8f, byte_d7_adv, r590_5ff_tmp5;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, byte_range_ab_af, r590_5ff_tmp8;
		BitBlock r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11, byte_range_b5_bf;
		BitBlock r590_5ff_tmp12, r80_7ff_tmp15, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock r600_6ff_tmp2, byte_d8, r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5;
		BitBlock byte_range_80_85, byte_d8_adv, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, byte_range_9c_9d, r600_6ff_tmp9, r600_6ff_tmp10;
		BitBlock byte_db, byte_9d, byte_db_adv, r600_6ff_tmp11, r80_7ff_tmp16;
		BitBlock byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc, byte_dd;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, r700_77f_tmp5, r700_74f_tmp1;
		BitBlock byte_range_8e_8f, byte_dc_adv, r700_74f_tmp2, r700_74f_tmp3;
		BitBlock r700_74f_tmp4, r700_74f_tmp5, byte_dd_adv, r700_74f_tmp6;
		BitBlock r80_7ff_tmp17, byte_range_de_df, r780_7ff_tmp1, byte_de;
		BitBlock r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, byte_range_b2_bf;
		BitBlock byte_de_adv, r780_7bf_tmp4, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, byte_range_bb_bf, byte_df_adv, r7c0_7ff_tmp4;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, byte_e0, r800_fff_tmp1;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock byte_range_ae_af, sequence_e0_a0_adv, r800_fff_tmp4, r800_fff_tmp5;
		BitBlock byte_bf, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, byte_a1;
		BitBlock sequence_e0_a1, r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14;
		BitBlock byte_range_9f_bf, r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17;
		BitBlock sequence_e0_a2, sequence_e0_a2_adv, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, byte_range_b3_bf, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp23, r800_fff_tmp24;
		BitBlock byte_range_80_a3, sequence_e0_a3_adv, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock byte_a6, sequence_e0_a6, r800_fff_tmp27, r800_fff_tmp28, byte_84;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31;
		BitBlock byte_range_8d_8e, r800_fff_tmp32, r800_fff_tmp33, byte_range_91_92;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36, byte_a9;
		BitBlock r800_fff_tmp37, byte_b1, r800_fff_tmp38, r800_fff_tmp39;
		BitBlock r800_fff_tmp40, r800_fff_tmp41, byte_range_b3_b5, r800_fff_tmp42;
		BitBlock r800_fff_tmp43, byte_range_ba_bb, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock byte_a7, sequence_e0_a7, r800_fff_tmp46, byte_range_85_86;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp47, r800_fff_tmp48, byte_range_89_8a;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, byte_range_8f_96, r800_fff_tmp54, byte_range_98_9b;
		BitBlock r800_fff_tmp55, r800_fff_tmp56, byte_9e, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, byte_range_a4_a5, r800_fff_tmp59, byte_range_bc_bf;
		BitBlock r800_fff_tmp60, r800_fff_tmp61, byte_a8, sequence_e0_a8, byte_80;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64;
		BitBlock r800_fff_tmp65, byte_range_8b_8e, r800_fff_tmp66, r800_fff_tmp67;
		BitBlock r800_fff_tmp68, r800_fff_tmp69, byte_b4, r800_fff_tmp70, byte_b7;
		BitBlock r800_fff_tmp71, r800_fff_tmp72, r800_fff_tmp73, byte_bd;
		BitBlock r800_fff_tmp74, sequence_e0_a9, r800_fff_tmp75, byte_range_83_86;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp76, r800_fff_tmp77, r800_fff_tmp78;
		BitBlock r800_fff_tmp79, byte_range_8e_90, r800_fff_tmp80, r800_fff_tmp81;
		BitBlock r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84, byte_range_92_98;
		BitBlock r800_fff_tmp85, r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, byte_range_9f_a5;
		BitBlock r800_fff_tmp92, byte_range_b6_bf, r800_fff_tmp93, r800_fff_tmp94;
		BitBlock byte_aa, sequence_e0_aa, sequence_e0_aa_adv, r800_fff_tmp95;
		BitBlock r800_fff_tmp96, byte_8e, r800_fff_tmp97, byte_92, r800_fff_tmp98;
		BitBlock r800_fff_tmp99, r800_fff_tmp100, r800_fff_tmp101, r800_fff_tmp102;
		BitBlock r800_fff_tmp103, byte_ab, sequence_e0_ab, byte_86, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp104, byte_8a, r800_fff_tmp105, r800_fff_tmp106;
		BitBlock r800_fff_tmp107, byte_range_91_9f, r800_fff_tmp108, r800_fff_tmp109;
		BitBlock r800_fff_tmp110, r800_fff_tmp111, r800_fff_tmp112, byte_ac;
		BitBlock sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp113, r800_fff_tmp114;
		BitBlock r800_fff_tmp115, r800_fff_tmp116, r800_fff_tmp117, r800_fff_tmp118;
		BitBlock r800_fff_tmp119, r800_fff_tmp120, sequence_e0_ad, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123, r800_fff_tmp124;
		BitBlock byte_range_8e_95, r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127;
		BitBlock r800_fff_tmp128, byte_range_b8_bf, r800_fff_tmp129, byte_ae;
		BitBlock sequence_e0_ae, byte_range_80_81, sequence_e0_ae_adv, r800_fff_tmp130;
		BitBlock r800_fff_tmp131, byte_range_8b_8d, r800_fff_tmp132, byte_91;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, byte_range_96_98, r800_fff_tmp135;
		BitBlock byte_9b, r800_fff_tmp136, r800_fff_tmp137, r800_fff_tmp138;
		BitBlock byte_range_a0_a2, r800_fff_tmp139, r800_fff_tmp140, byte_range_a5_a7;
		BitBlock r800_fff_tmp141, r800_fff_tmp142, byte_range_ab_ad, r800_fff_tmp143;
		BitBlock r800_fff_tmp144, byte_range_ba_bd, r800_fff_tmp145, byte_af;
		BitBlock sequence_e0_af, byte_range_83_85, sequence_e0_af_adv, r800_fff_tmp146;
		BitBlock byte_89, r800_fff_tmp147, r800_fff_tmp148, r800_fff_tmp149;
		BitBlock r800_fff_tmp150, r800_fff_tmp151, byte_range_91_96, r800_fff_tmp152;
		BitBlock r800_fff_tmp153, byte_range_98_a5, r800_fff_tmp154, r800_fff_tmp155;
		BitBlock sequence_e0_b0, sequence_e0_b0_adv, r800_fff_tmp156, r800_fff_tmp157;
		BitBlock r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160, r800_fff_tmp161;
		BitBlock byte_range_ba_bc, r800_fff_tmp162, sequence_e0_b1, r800_fff_tmp163;
		BitBlock byte_85, sequence_e0_b1_adv, r800_fff_tmp164, r800_fff_tmp165;
		BitBlock r800_fff_tmp166, r800_fff_tmp167, r800_fff_tmp168, r800_fff_tmp169;
		BitBlock byte_range_8e_94, r800_fff_tmp170, byte_97, r800_fff_tmp171;
		BitBlock r800_fff_tmp172, byte_range_9a_9f, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock byte_range_b0_b7, r800_fff_tmp175, byte_b2, sequence_e0_b2;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp176, r800_fff_tmp177, r800_fff_tmp178;
		BitBlock r800_fff_tmp179, r800_fff_tmp180, r800_fff_tmp181, r800_fff_tmp182;
		BitBlock byte_b3, sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp183;
		BitBlock r800_fff_tmp184, r800_fff_tmp185, r800_fff_tmp186, r800_fff_tmp187;
		BitBlock byte_range_97_9d, r800_fff_tmp188, byte_9f, r800_fff_tmp189;
		BitBlock r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192, sequence_e0_b4;
		BitBlock sequence_e0_b4_adv, r800_fff_tmp193, r800_fff_tmp194, r800_fff_tmp195;
		BitBlock r800_fff_tmp196, r800_fff_tmp197, byte_range_bb_bc, r800_fff_tmp198;
		BitBlock byte_b5, sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp199;
		BitBlock r800_fff_tmp200, r800_fff_tmp201, byte_range_98_9f, r800_fff_tmp202;
		BitBlock r800_fff_tmp203, byte_range_b6_b8, r800_fff_tmp204, byte_b6;
		BitBlock sequence_e0_b6, sequence_e0_b6_adv, r800_fff_tmp205, r800_fff_tmp206;
		BitBlock r800_fff_tmp207, r800_fff_tmp208, byte_range_97_99, r800_fff_tmp209;
		BitBlock r800_fff_tmp210, byte_bc, r800_fff_tmp211, byte_range_be_bf;
		BitBlock r800_fff_tmp212, sequence_e0_b7, byte_range_87_89, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp213, r800_fff_tmp214, byte_95, r800_fff_tmp215;
		BitBlock r800_fff_tmp216, r800_fff_tmp217, byte_range_a0_a5, r800_fff_tmp218;
		BitBlock byte_range_b0_b1, r800_fff_tmp219, r800_fff_tmp220, byte_b8;
		BitBlock sequence_e0_b8, sequence_e0_b8_adv, r800_fff_tmp221, byte_range_bb_be;
		BitBlock r800_fff_tmp222, byte_b9, sequence_e0_b9, r800_fff_tmp223;
		BitBlock r800_fff_tmp224, byte_range_9c_bf, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp225, byte_ba, sequence_e0_ba, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp226, byte_83, r800_fff_tmp227, r800_fff_tmp228;
		BitBlock r800_fff_tmp229, r800_fff_tmp230, r800_fff_tmp231, r800_fff_tmp232;
		BitBlock byte_range_8e_93, r800_fff_tmp233, byte_98, r800_fff_tmp234;
		BitBlock r800_fff_tmp235, byte_a4, r800_fff_tmp236, r800_fff_tmp237;
		BitBlock r800_fff_tmp238, byte_range_a8_a9, r800_fff_tmp239, r800_fff_tmp240;
		BitBlock r800_fff_tmp241, r800_fff_tmp242, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp243, byte_87, r800_fff_tmp244;
		BitBlock r800_fff_tmp245, byte_range_9a_9b, r800_fff_tmp246, byte_range_a0_bf;
		BitBlock r800_fff_tmp247, sequence_e0_bd, sequence_e0_bd_adv, r800_fff_tmp248;
		BitBlock r800_fff_tmp249, r800_fff_tmp250, byte_range_ad_b0, r800_fff_tmp251;
		BitBlock byte_be, sequence_e0_be, sequence_e0_be_adv, r800_fff_tmp252;
		BitBlock r800_fff_tmp253, sequence_e0_bf, sequence_e0_bf_adv, r800_fff_tmp254;
		BitBlock r800_fff_tmp255, r800_fff_tmp256, r800_fff_tmp257, byte_range_9b_bf;
		BitBlock r800_fff_tmp258, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4;
		BitBlock sequence_e1_83, byte_e1_adv, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock sequence_e1_83_adv, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_88_8c, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14, sequence_e1_89;
		BitBlock sequence_e1_89_adv, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_99, r1000_1fff_tmp21, byte_range_9e_9f;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, sequence_e1_8a;
		BitBlock sequence_e1_8a_adv, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock byte_range_b6_b7, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, sequence_e1_8b, byte_81, sequence_e1_8b_adv;
		BitBlock r1000_1fff_tmp32, byte_range_86_87, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, byte_8c, sequence_e1_8c;
		BitBlock sequence_e1_8c_adv, r1000_1fff_tmp36, byte_range_96_97;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, sequence_e1_8d, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, r1000_1fff_tmp41, byte_range_9b_9c;
		BitBlock sequence_e1_8d_adv, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock byte_range_bd_bf, r1000_1fff_tmp44, r1000_1fff_tmp45, sequence_e1_8e;
		BitBlock r1000_1fff_tmp46, sequence_e1_8e_adv, r1000_1fff_tmp47, byte_8f;
		BitBlock sequence_e1_8f, r1000_1fff_tmp48, sequence_e1_8f_adv;
		BitBlock r1000_1fff_tmp49, byte_9a, sequence_e1_9a, r1000_1fff_tmp50;
		BitBlock byte_range_9d_9f, sequence_e1_9a_adv, r1000_1fff_tmp51;
		BitBlock sequence_e1_9b, r1000_1fff_tmp52, r1000_1fff_tmp53, byte_range_b9_bf;
		BitBlock sequence_e1_9b_adv, r1000_1fff_tmp54, byte_9c, sequence_e1_9c;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp55, byte_range_95_9f;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock byte_range_b7_bf, r1000_1fff_tmp59, sequence_e1_9d, byte_range_94_9f;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, byte_range_b4_bf;
		BitBlock r1000_1fff_tmp64, sequence_e1_9f, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, byte_range_aa_af;
		BitBlock r1000_1fff_tmp67, byte_range_ba_bf, r1000_1fff_tmp68, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock sequence_e1_a1, sequence_e1_a1_adv, r1000_1fff_tmp71;
		BitBlock r1000_1fff_tmp72, sequence_e1_a2, r1000_1fff_tmp73;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp74, sequence_e1_a3;
		BitBlock r1000_1fff_tmp75, r1000_1fff_tmp76, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp77, sequence_e1_a4, sequence_e1_a4_adv;
		BitBlock r1000_1fff_tmp78, byte_range_ac_af, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, byte_a5, sequence_e1_a5;
		BitBlock r1000_1fff_tmp82, byte_range_81_83, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85, sequence_e1_a6;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp86, sequence_e1_a7;
		BitBlock byte_range_8a_8f, sequence_e1_a7_adv, r1000_1fff_tmp87;
		BitBlock r1000_1fff_tmp88, r1000_1fff_tmp89, byte_range_9b_9d;
		BitBlock r1000_1fff_tmp90, r1000_1fff_tmp91, sequence_e1_a8, r1000_1fff_tmp92;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp93, sequence_e1_a9;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp94, r1000_1fff_tmp95;
		BitBlock byte_range_bd_be, r1000_1fff_tmp96, sequence_e1_aa;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp97, r1000_1fff_tmp98;
		BitBlock r1000_1fff_tmp99, r1000_1fff_tmp100, sequence_e1_ab, byte_range_80_bf;
		BitBlock sequence_e1_ab_adv, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock sequence_e1_ad, r1000_1fff_tmp103, byte_range_8c_8f;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp104, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, r1000_1fff_tmp107, sequence_e1_af;
		BitBlock r1000_1fff_tmp108, byte_range_b4_bb, sequence_e1_af_adv;
		BitBlock r1000_1fff_tmp109, sequence_e1_b0, r1000_1fff_tmp110;
		BitBlock byte_range_b8_ba, sequence_e1_b0_adv, r1000_1fff_tmp111;
		BitBlock sequence_e1_b1, r1000_1fff_tmp112, r1000_1fff_tmp113;
		BitBlock byte_range_8a_8c, sequence_e1_b1_adv, r1000_1fff_tmp114;
		BitBlock sequence_e1_b2, sequence_e1_b2_adv, r1000_1fff_tmp115, sequence_e1_b3;
		BitBlock sequence_e1_b3_adv, r1000_1fff_tmp116, r1000_1fff_tmp117;
		BitBlock r1000_1fff_tmp118, r1000_1fff_tmp119, sequence_e1_b7;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, byte_range_b6_bb;
		BitBlock sequence_e1_b7_adv, r1000_1fff_tmp122, sequence_e1_bc;
		BitBlock r1000_1fff_tmp123, sequence_e1_bc_adv, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, sequence_e1_bd, sequence_e1_bd_adv;
		BitBlock r1000_1fff_tmp126, r1000_1fff_tmp127, r1000_1fff_tmp128;
		BitBlock r1000_1fff_tmp129, r1000_1fff_tmp130, r1000_1fff_tmp131;
		BitBlock r1000_1fff_tmp132, sequence_e1_be, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp133, sequence_e1_bf, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp134, r1000_1fff_tmp135, byte_range_94_95;
		BitBlock r1000_1fff_tmp136, r1000_1fff_tmp137, r1000_1fff_tmp138;
		BitBlock r1000_1fff_tmp139, r1000_1fff_tmp140, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, byte_range_8b_8f, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, byte_range_aa_ae, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, sequence_e2_81, byte_range_a0_af;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock byte_range_b2_b3, r2000_2fff_tmp17, byte_82, sequence_e2_82;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25, sequence_e2_83;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, byte_range_b1_bf, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, sequence_e2_86, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp33, sequence_e2_8f;
		BitBlock r2000_2fff_tmp34, sequence_e2_8f_adv, r2000_2fff_tmp35;
		BitBlock sequence_e2_90, r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, byte_range_a7_bf, sequence_e2_90_adv;
		BitBlock r2000_2fff_tmp40, sequence_e2_91, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, byte_range_8b_9f, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp44, r2000_2fff_tmp45, sequence_e2_ad, r2000_2fff_tmp46;
		BitBlock byte_range_b4_b5, sequence_e2_ad_adv, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, sequence_e2_ae, r2000_2fff_tmp49;
		BitBlock sequence_e2_ae_adv, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, sequence_e2_af, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, sequence_e2_af_adv, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, byte_range_92_bf;
		BitBlock r2000_2fff_tmp59, sequence_e2_b0, sequence_e2_b0_adv;
		BitBlock r2000_2fff_tmp60, sequence_e2_b1, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp61, sequence_e2_b3, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock byte_range_b4_b8, sequence_e2_b3_adv, r2000_2fff_tmp64;
		BitBlock sequence_e2_b4, sequence_e2_b4_adv, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, byte_range_a8_ac;
		BitBlock r2000_2fff_tmp68, r2000_2fff_tmp69, r2000_2fff_tmp70, sequence_e2_b5;
		BitBlock byte_range_a8_ae, sequence_e2_b5_adv, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, byte_range_b1_be;
		BitBlock r2000_2fff_tmp74, sequence_e2_b6, byte_range_97_9f;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, sequence_e2_b7, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, r2000_2fff_tmp83;
		BitBlock r2000_2fff_tmp84, sequence_e2_b9, r2000_2fff_tmp85, r2000_2fff_tmp86;
		BitBlock r2000_2fff_tmp87, byte_range_83_bf, sequence_e2_b9_adv;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, sequence_e2_ba;
		BitBlock sequence_e2_ba_adv, r2000_2fff_tmp90, r2000_2fff_tmp91;
		BitBlock sequence_e2_bb, sequence_e2_bb_adv, r2000_2fff_tmp92, sequence_e2_bf;
		BitBlock r2000_2fff_tmp93, r2000_2fff_tmp94, r2000_2fff_tmp95;
		BitBlock r2000_2fff_tmp96, r2000_2fff_tmp97, byte_range_96_af;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock sequence_e3_81, byte_e3_adv, r3000_4dff_tmp6, sequence_e3_81_adv;
		BitBlock r3000_4dff_tmp7, sequence_e3_82, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, sequence_e3_82_adv, r3000_4dff_tmp14;
		BitBlock sequence_e3_84, r3000_4dff_tmp15, r3000_4dff_tmp16, byte_range_80_84;
		BitBlock sequence_e3_84_adv, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, r3000_4dff_tmp21;
		BitBlock byte_range_ae_b0, r3000_4dff_tmp22, r3000_4dff_tmp23, sequence_e3_86;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp24, r3000_4dff_tmp25;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, r3000_4dff_tmp28;
		BitBlock r3000_4dff_tmp29, sequence_e3_87, r3000_4dff_tmp30, byte_range_a4_af;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp31, r3000_4dff_tmp32;
		BitBlock r3000_4dff_tmp33, sequence_e3_88, sequence_e3_88_adv;
		BitBlock r3000_4dff_tmp34, r3000_4dff_tmp35, sequence_e3_8b;
		BitBlock sequence_e3_8b_adv, r3000_4dff_tmp36, sequence_e4_b6, byte_e4_adv;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, sequence_e4_b6_adv;
		BitBlock r3000_4dff_tmp39, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, byte_range_e5_e9;
		BitBlock r800_ffff_tmp17, r4e00_9fff_tmp1, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock byte_e9, r4e00_9fff_tmp4, sequence_e9_bf, byte_e9_adv;
		BitBlock r4e00_9fff_tmp5, r4e00_9fff_tmp6, r4e00_9fff_tmp7, byte_range_8d_bf;
		BitBlock sequence_e9_bf_adv, r4e00_9fff_tmp8, r800_ffff_tmp18;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_92, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, byte_range_8d_8f;
		BitBlock sequence_ea_92_adv, ra000_ffff_tmp11, ra000_ffff_tmp12, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp13, ra000_ffff_tmp14, byte_range_87_8f;
		BitBlock sequence_ea_93_adv, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock sequence_ea_98, ra000_ffff_tmp17, ra000_ffff_tmp18, byte_range_ac_bf;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp19, sequence_ea_9a;
		BitBlock ra000_ffff_tmp20, sequence_ea_9a_adv, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, sequence_ea_9b, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp23, sequence_ea_9e, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, ra000_ffff_tmp29, sequence_ea_9f;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, byte_range_80_b6;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock sequence_ea_a0, sequence_ea_a0_adv, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37, sequence_ea_a1;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp38, sequence_ea_a3;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock byte_range_85_8d, sequence_ea_a3_adv, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, sequence_ea_a5, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock byte_range_94_9e, sequence_ea_a5_adv, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock byte_range_9a_9d, ra000_ffff_tmp54, ra000_ffff_tmp55, sequence_ea_a8;
		BitBlock sequence_ea_a8_adv, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock sequence_ea_a9, sequence_ea_a9_adv, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, sequence_ea_ab, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, byte_range_83_9a;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, sequence_ea_ac, sequence_ea_ac_adv;
		BitBlock ra000_ffff_tmp70, ra000_ffff_tmp71, ra000_ffff_tmp72;
		BitBlock ra000_ffff_tmp73, byte_range_87_88, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, byte_range_8f_90;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, sequence_ea_ad, byte_range_a0_a3;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock ra000_ffff_tmp84, byte_range_a6_bf, ra000_ffff_tmp85, sequence_ea_ae;
		BitBlock sequence_ea_ae_adv, ra000_ffff_tmp86, ra000_ffff_tmp87;
		BitBlock sequence_ea_af, sequence_ea_af_adv, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91, byte_ed;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, sequence_ed_9e, byte_ed_adv;
		BitBlock sequence_ed_9e_adv, ra000_ffff_tmp94, sequence_ed_9f;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock byte_range_87_8a, sequence_ed_9f_adv, ra000_ffff_tmp98;
		BitBlock ra000_ffff_tmp99, byte_ed_byte_range_a0_bf, ra000_ffff_tmp100;
		BitBlock byte_ed_byte_range_a0_bf_sfx, byte_ee, ra000_ffff_tmp101;
		BitBlock byte_ee_byte_range_80_bf, ra000_ffff_tmp102;
		BitBlock byte_ee_byte_range_80_bf_sfx, byte_ef, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, ra000_ffff_tmp105, byte_ef_byte_range_80_a3;
		BitBlock ra000_ffff_tmp106, byte_ef_byte_range_80_a3_sfx, sequence_ef_a9;
		BitBlock byte_ef_adv, sequence_ef_a9_adv, ra000_ffff_tmp107, sequence_ef_ab;
		BitBlock ra000_ffff_tmp108, ra000_ffff_tmp109, ra000_ffff_tmp110;
		BitBlock byte_range_9a_bf, sequence_ef_ab_adv, ra000_ffff_tmp111;
		BitBlock sequence_ef_ac, ra000_ffff_tmp112, ra000_ffff_tmp113;
		BitBlock ra000_ffff_tmp114, byte_range_87_92, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp115, ra000_ffff_tmp116, byte_range_98_9c;
		BitBlock ra000_ffff_tmp117, ra000_ffff_tmp118, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, sequence_ef_ad, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp121, ra000_ffff_tmp122, sequence_ef_af;
		BitBlock ra000_ffff_tmp123, ra000_ffff_tmp124, byte_range_82_92;
		BitBlock sequence_ef_af_adv, ra000_ffff_tmp125, sequence_ef_b5;
		BitBlock sequence_ef_b5_adv, ra000_ffff_tmp126, ra000_ffff_tmp127;
		BitBlock sequence_ef_b6, byte_range_90_91, sequence_ef_b6_adv;
		BitBlock ra000_ffff_tmp128, sequence_ef_b7, ra000_ffff_tmp129;
		BitBlock ra000_ffff_tmp130, ra000_ffff_tmp131, byte_range_88_af;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp132, ra000_ffff_tmp133;
		BitBlock sequence_ef_b8, sequence_ef_b8_adv, ra000_ffff_tmp134;
		BitBlock ra000_ffff_tmp135, sequence_ef_b9, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp136, ra000_ffff_tmp137, ra000_ffff_tmp138;
		BitBlock ra000_ffff_tmp139, sequence_ef_bb, ra000_ffff_tmp140;
		BitBlock sequence_ef_bb_adv, ra000_ffff_tmp141, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp142, sequence_ef_be;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp143, sequence_ef_bf;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp144, ra000_ffff_tmp145;
		BitBlock byte_range_88_89, ra000_ffff_tmp146, ra000_ffff_tmp147;
		BitBlock byte_range_98_99, ra000_ffff_tmp148, ra000_ffff_tmp149;
		BitBlock ra000_ffff_tmp150, ra000_ffff_tmp151, ra000_ffff_tmp152;
		BitBlock ra000_ffff_tmp153, byte_range_af_bb, ra000_ffff_tmp154;
		BitBlock ra000_ffff_tmp155, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_80, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp11, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, sequence_f0_90_81;
		BitBlock r10000_10ffff_tmp26, sequence_f0_90_81_adv, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, byte_range_9e_bf;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, sequence_f0_90_83;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, sequence_f0_90_83_adv;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, sequence_f0_90_84;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, sequence_f0_90_84_adv;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, byte_range_b4_b6;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, sequence_f0_90_86;
		BitBlock r10000_10ffff_tmp42, sequence_f0_90_86_adv, r10000_10ffff_tmp43;
		BitBlock byte_range_9c_9f, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, byte_range_a1_bf, r10000_10ffff_tmp47;
		BitBlock sequence_f0_90_87, sequence_f0_90_87_adv, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock sequence_f0_90_byte_range_88_89, r10000_10ffff_tmp51;
		BitBlock sequence_f0_90_byte_range_88_89_sfx, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, sequence_f0_90_8a;
		BitBlock r10000_10ffff_tmp55, sequence_f0_90_8a_adv, r10000_10ffff_tmp56;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, sequence_f0_90_8c, r10000_10ffff_tmp62;
		BitBlock sequence_f0_90_8c_adv, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp65, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock sequence_f0_90_8e, sequence_f0_90_8e_adv, r10000_10ffff_tmp69;
		BitBlock sequence_f0_90_8f, byte_range_84_87, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, byte_range_96_bf;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, sequence_f0_90_92;
		BitBlock sequence_f0_90_92_adv, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock byte_range_aa_bf, r10000_10ffff_tmp82, sequence_f0_90_93;
		BitBlock sequence_f0_90_93_adv, r10000_10ffff_tmp83, byte_94;
		BitBlock sequence_f0_90_94, byte_range_a8_af, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock byte_range_a4_ae, sequence_f0_90_95_adv, r10000_10ffff_tmp89;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock sequence_f0_90_byte_range_96_97, r10000_10ffff_tmp92;
		BitBlock sequence_f0_90_byte_range_96_97_sfx, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp93, sequence_f0_90_9c_adv, r10000_10ffff_tmp94;
		BitBlock sequence_f0_90_9d, byte_range_96_9f, sequence_f0_90_9d_adv;
		BitBlock r10000_10ffff_tmp95, r10000_10ffff_tmp96, byte_range_a8_bf;
		BitBlock r10000_10ffff_tmp97, sequence_f0_90_byte_range_9e_9f;
		BitBlock r10000_10ffff_tmp98, sequence_f0_90_byte_range_9e_9f_sfx;
		BitBlock sequence_f0_90_a0, sequence_f0_90_a0_adv, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, byte_range_b9_bb, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock sequence_f0_90_a1, byte_96, sequence_f0_90_a1_adv;
		BitBlock r10000_10ffff_tmp108, sequence_f0_90_a2, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock byte_range_9f_a6, sequence_f0_90_a2_adv, r10000_10ffff_tmp113;
		BitBlock r10000_10ffff_tmp114, sequence_f0_90_a3, sequence_f0_90_a3_adv;
		BitBlock r10000_10ffff_tmp115, sequence_f0_90_a4, byte_range_9c_9e;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp116, r10000_10ffff_tmp117;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, byte_range_ba_be;
		BitBlock r10000_10ffff_tmp120, sequence_f0_90_a5, sequence_f0_90_a5_adv;
		BitBlock r10000_10ffff_tmp121, sequence_f0_90_a6, byte_range_b8_bd;
		BitBlock sequence_f0_90_a6_adv, r10000_10ffff_tmp122, sequence_f0_90_a7;
		BitBlock sequence_f0_90_a7_adv, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_a8, sequence_f0_90_a8_adv, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, byte_range_87_8b;
		BitBlock r10000_10ffff_tmp128, r10000_10ffff_tmp129, r10000_10ffff_tmp130;
		BitBlock byte_range_b4_b7, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock sequence_f0_90_a9, sequence_f0_90_a9_adv, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, byte_range_99_9f, r10000_10ffff_tmp135;
		BitBlock sequence_f0_90_aa, sequence_f0_90_aa_adv, r10000_10ffff_tmp136;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp137, r10000_10ffff_tmp138;
		BitBlock byte_range_a7_aa, sequence_f0_90_ab_adv, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, sequence_f0_90_ac, r10000_10ffff_tmp141;
		BitBlock r10000_10ffff_tmp142, sequence_f0_90_ac_adv, r10000_10ffff_tmp143;
		BitBlock sequence_f0_90_ad, sequence_f0_90_ad_adv, r10000_10ffff_tmp144;
		BitBlock r10000_10ffff_tmp145, byte_range_b3_b7, r10000_10ffff_tmp146;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp147, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp148, r10000_10ffff_tmp149, r10000_10ffff_tmp150;
		BitBlock r10000_10ffff_tmp151, r10000_10ffff_tmp152, r10000_10ffff_tmp153;
		BitBlock r10000_10ffff_tmp154, byte_range_9d_a8, r10000_10ffff_tmp155;
		BitBlock r10000_10ffff_tmp156, sequence_f0_90_af, sequence_f0_90_af_adv;
		BitBlock r10000_10ffff_tmp157, sequence_f0_90_b1, r10000_10ffff_tmp158;
		BitBlock byte_range_89_bf, sequence_f0_90_b1_adv, r10000_10ffff_tmp159;
		BitBlock byte_range_b2_b8, sequence_f0_90_byte_range_b2_b8;
		BitBlock r10000_10ffff_tmp160, sequence_f0_90_byte_range_b2_b8_sfx;
		BitBlock sequence_f0_90_b9, sequence_f0_90_b9_adv, r10000_10ffff_tmp161;
		BitBlock r10000_10ffff_tmp162, sequence_f0_90_byte_range_ba_bf;
		BitBlock r10000_10ffff_tmp163, sequence_f0_90_byte_range_ba_bf_sfx;
		BitBlock sequence_f0_91, r10000_10ffff_tmp164, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp165, r10000_10ffff_tmp166;
		BitBlock r10000_10ffff_tmp167, byte_range_8e_91, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, byte_range_b0_be;
		BitBlock r10000_10ffff_tmp170, sequence_f0_91_82, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp171, sequence_f0_91_83, r10000_10ffff_tmp172;
		BitBlock byte_range_82_8f, sequence_f0_91_83_adv, r10000_10ffff_tmp173;
		BitBlock byte_range_a9_af, r10000_10ffff_tmp174, r10000_10ffff_tmp175;
		BitBlock sequence_f0_91_84, sequence_f0_91_84_adv, r10000_10ffff_tmp176;
		BitBlock sequence_f0_91_85, byte_range_84_8f, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp177, r10000_10ffff_tmp178, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp179, byte_range_89_8c, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp180, r10000_10ffff_tmp181, r10000_10ffff_tmp182;
		BitBlock r10000_10ffff_tmp183, r10000_10ffff_tmp184, r10000_10ffff_tmp185;
		BitBlock byte_range_9b_a0, r10000_10ffff_tmp186, r10000_10ffff_tmp187;
		BitBlock r10000_10ffff_tmp188, r10000_10ffff_tmp189, sequence_f0_91_88;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp190, r10000_10ffff_tmp191;
		BitBlock sequence_f0_91_89, sequence_f0_91_89_adv, r10000_10ffff_tmp192;
		BitBlock sequence_f0_91_8a, byte_range_80_af, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp193, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp194, r10000_10ffff_tmp195, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp196, r10000_10ffff_tmp197;
		BitBlock r10000_10ffff_tmp198, r10000_10ffff_tmp199, r10000_10ffff_tmp200;
		BitBlock r10000_10ffff_tmp201, r10000_10ffff_tmp202, r10000_10ffff_tmp203;
		BitBlock r10000_10ffff_tmp204, r10000_10ffff_tmp205, r10000_10ffff_tmp206;
		BitBlock sequence_f0_91_8d, sequence_f0_91_8d_adv, r10000_10ffff_tmp207;
		BitBlock r10000_10ffff_tmp208, r10000_10ffff_tmp209, r10000_10ffff_tmp210;
		BitBlock r10000_10ffff_tmp211, byte_range_8e_96, r10000_10ffff_tmp212;
		BitBlock r10000_10ffff_tmp213, r10000_10ffff_tmp214, r10000_10ffff_tmp215;
		BitBlock r10000_10ffff_tmp216, byte_range_ad_af, r10000_10ffff_tmp217;
		BitBlock r10000_10ffff_tmp218, sequence_f0_91_byte_range_8e_91;
		BitBlock r10000_10ffff_tmp219, sequence_f0_91_byte_range_8e_91_sfx;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp220;
		BitBlock r10000_10ffff_tmp221, r10000_10ffff_tmp222, r10000_10ffff_tmp223;
		BitBlock sequence_f0_91_byte_range_94_95, r10000_10ffff_tmp224;
		BitBlock sequence_f0_91_byte_range_94_95_sfx, sequence_f0_91_96;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp225, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp226, byte_range_8a_bf, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp227, sequence_f0_91_99, byte_range_85_8f;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp228, r10000_10ffff_tmp229;
		BitBlock sequence_f0_91_9a, sequence_f0_91_9a_adv, r10000_10ffff_tmp230;
		BitBlock sequence_f0_91_9b, sequence_f0_91_9b_adv, r10000_10ffff_tmp231;
		BitBlock r10000_10ffff_tmp232, r10000_10ffff_tmp233, r10000_10ffff_tmp234;
		BitBlock r10000_10ffff_tmp235, byte_range_9c_a1;
		BitBlock sequence_f0_91_byte_range_9c_a1, r10000_10ffff_tmp236;
		BitBlock sequence_f0_91_byte_range_9c_a1_sfx, sequence_f0_91_a2;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp237, sequence_f0_91_a3;
		BitBlock r10000_10ffff_tmp238, byte_range_b3_be, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp239, r10000_10ffff_tmp240, byte_range_a4_aa;
		BitBlock sequence_f0_91_byte_range_a4_aa, r10000_10ffff_tmp241;
		BitBlock sequence_f0_91_byte_range_a4_aa_sfx, sequence_f0_91_ab;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp242, r10000_10ffff_tmp243;
		BitBlock sequence_f0_91_byte_range_ac_bf, r10000_10ffff_tmp244;
		BitBlock sequence_f0_91_byte_range_ac_bf_sfx, sequence_f0_92;
		BitBlock r10000_10ffff_tmp245, sequence_f0_92_8e, sequence_f0_92_adv;
		BitBlock r10000_10ffff_tmp246, r10000_10ffff_tmp247, byte_range_99_bf;
		BitBlock sequence_f0_92_8e_adv, r10000_10ffff_tmp248, sequence_f0_92_8f;
		BitBlock sequence_f0_92_8f_adv, r10000_10ffff_tmp249, sequence_f0_92_91;
		BitBlock sequence_f0_92_91_adv, r10000_10ffff_tmp250, r10000_10ffff_tmp251;
		BitBlock r10000_10ffff_tmp252, r10000_10ffff_tmp253;
		BitBlock sequence_f0_92_byte_range_92_bf, r10000_10ffff_tmp254;
		BitBlock sequence_f0_92_byte_range_92_bf_sfx, sequence_f0_93;
		BitBlock r10000_10ffff_tmp255, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock r10000_10ffff_tmp256, byte_range_af_bf, sequence_f0_93_90_adv;
		BitBlock r10000_10ffff_tmp257, r10000_10ffff_tmp258, r10000_10ffff_tmp259;
		BitBlock byte_range_91_bf, sequence_f0_93_byte_range_91_bf;
		BitBlock r10000_10ffff_tmp260, sequence_f0_93_byte_range_91_bf_sfx;
		BitBlock byte_f0_byte_range_94_95, r10000_10ffff_tmp261;
		BitBlock byte_f0_byte_range_94_95_sfx, r10000_10ffff_tmp262;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, sequence_f0_96;
		BitBlock r10000_10ffff_tmp263, sequence_f0_96_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp264, sequence_f0_96_byte_range_80_9f_sfx;
		BitBlock sequence_f0_96_a8, sequence_f0_96_adv, sequence_f0_96_a8_adv;
		BitBlock r10000_10ffff_tmp265, sequence_f0_96_a9, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp266, r10000_10ffff_tmp267, byte_range_aa_ad;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, sequence_f0_96_aa;
		BitBlock sequence_f0_96_aa_adv, r10000_10ffff_tmp270, sequence_f0_96_ab;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp271, r10000_10ffff_tmp272;
		BitBlock r10000_10ffff_tmp273, sequence_f0_96_ad, byte_range_86_8f;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp274, r10000_10ffff_tmp275;
		BitBlock r10000_10ffff_tmp276, byte_range_b8_bc, r10000_10ffff_tmp277;
		BitBlock sequence_f0_96_ae, sequence_f0_96_ae_adv, r10000_10ffff_tmp278;
		BitBlock r10000_10ffff_tmp279, r10000_10ffff_tmp280;
		BitBlock sequence_f0_96_byte_range_af_bb, r10000_10ffff_tmp281;
		BitBlock sequence_f0_96_byte_range_af_bb_sfx, sequence_f0_96_bd;
		BitBlock sequence_f0_96_bd_adv, r10000_10ffff_tmp282, r10000_10ffff_tmp283;
		BitBlock sequence_f0_96_be, byte_range_80_8e, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp284, r10000_10ffff_tmp285, sequence_f0_96_bf;
		BitBlock sequence_f0_96_bf_adv, r10000_10ffff_tmp286, byte_range_97_9a;
		BitBlock byte_f0_byte_range_97_9a, r10000_10ffff_tmp287;
		BitBlock byte_f0_byte_range_97_9a_sfx, r10000_10ffff_tmp288;
		BitBlock byte_f0_byte_range_97_9a_sfx_sfx, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp289, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock r10000_10ffff_tmp290, byte_range_82_bf, sequence_f0_9b_80_adv;
		BitBlock r10000_10ffff_tmp291, r10000_10ffff_tmp292, r10000_10ffff_tmp293;
		BitBlock byte_range_81_af, sequence_f0_9b_byte_range_81_af;
		BitBlock r10000_10ffff_tmp294, sequence_f0_9b_byte_range_81_af_sfx;
		BitBlock sequence_f0_9b_b1, sequence_f0_9b_b1_adv, r10000_10ffff_tmp295;
		BitBlock r10000_10ffff_tmp296, sequence_f0_9b_b2, byte_range_89_8f;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp297, r10000_10ffff_tmp298;
		BitBlock r10000_10ffff_tmp299, r10000_10ffff_tmp300;
		BitBlock sequence_f0_9b_byte_range_b3_bf, r10000_10ffff_tmp301;
		BitBlock sequence_f0_9b_byte_range_b3_bf_sfx, sequence_f0_9c;
		BitBlock r10000_10ffff_tmp302, sequence_f0_9c_byte_range_80_bf;
		BitBlock r10000_10ffff_tmp303, sequence_f0_9c_byte_range_80_bf_sfx;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp304, sequence_f0_9d_83;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83_adv, r10000_10ffff_tmp305;
		BitBlock sequence_f0_9d_84, r10000_10ffff_tmp306, byte_range_a7_a8;
		BitBlock sequence_f0_9d_84_adv, r10000_10ffff_tmp307, sequence_f0_9d_85;
		BitBlock r10000_10ffff_tmp308, byte_range_b3_ba, sequence_f0_9d_85_adv;
		BitBlock r10000_10ffff_tmp309, sequence_f0_9d_87, sequence_f0_9d_87_adv;
		BitBlock r10000_10ffff_tmp310, sequence_f0_9d_89, r10000_10ffff_tmp311;
		BitBlock r10000_10ffff_tmp312, byte_range_86_bf, sequence_f0_9d_89_adv;
		BitBlock r10000_10ffff_tmp313, byte_range_8a_8b;
		BitBlock sequence_f0_9d_byte_range_8a_8b, r10000_10ffff_tmp314;
		BitBlock sequence_f0_9d_byte_range_8a_8b_sfx, sequence_f0_9d_8d;
		BitBlock sequence_f0_9d_8d_adv, r10000_10ffff_tmp315, r10000_10ffff_tmp316;
		BitBlock sequence_f0_9d_byte_range_8e_8f, r10000_10ffff_tmp317;
		BitBlock sequence_f0_9d_byte_range_8e_8f_sfx, sequence_f0_9d_91;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp318, sequence_f0_9d_92;
		BitBlock sequence_f0_9d_92_adv, r10000_10ffff_tmp319, byte_range_a0_a1;
		BitBlock r10000_10ffff_tmp320, r10000_10ffff_tmp321, r10000_10ffff_tmp322;
		BitBlock r10000_10ffff_tmp323, byte_range_a3_a4, r10000_10ffff_tmp324;
		BitBlock r10000_10ffff_tmp325, r10000_10ffff_tmp326, r10000_10ffff_tmp327;
		BitBlock r10000_10ffff_tmp328, sequence_f0_9d_93, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp329, sequence_f0_9d_94, sequence_f0_9d_94_adv;
		BitBlock r10000_10ffff_tmp330, r10000_10ffff_tmp331, r10000_10ffff_tmp332;
		BitBlock r10000_10ffff_tmp333, r10000_10ffff_tmp334, r10000_10ffff_tmp335;
		BitBlock sequence_f0_9d_95, sequence_f0_9d_95_adv, r10000_10ffff_tmp336;
		BitBlock r10000_10ffff_tmp337, r10000_10ffff_tmp338, r10000_10ffff_tmp339;
		BitBlock r10000_10ffff_tmp340, sequence_f0_9d_9a, byte_range_a6_a7;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp341, sequence_f0_9d_9f;
		BitBlock r10000_10ffff_tmp342, byte_range_8c_8d, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp343, sequence_f0_9d_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp344, sequence_f0_9d_byte_range_a0_bf_sfx;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp345, sequence_f0_9e_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp346, sequence_f0_9e_byte_range_80_9f_sfx;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp347, r10000_10ffff_tmp348, r10000_10ffff_tmp349;
		BitBlock byte_range_97_bf, r10000_10ffff_tmp350, r10000_10ffff_tmp351;
		BitBlock r10000_10ffff_tmp352, byte_range_a4_b7;
		BitBlock sequence_f0_9e_byte_range_a4_b7, r10000_10ffff_tmp353;
		BitBlock sequence_f0_9e_byte_range_a4_b7_sfx, sequence_f0_9e_b8;
		BitBlock sequence_f0_9e_b8_adv, r10000_10ffff_tmp354, r10000_10ffff_tmp355;
		BitBlock r10000_10ffff_tmp356, r10000_10ffff_tmp357, byte_range_a5_a6;
		BitBlock r10000_10ffff_tmp358, r10000_10ffff_tmp359, r10000_10ffff_tmp360;
		BitBlock r10000_10ffff_tmp361, r10000_10ffff_tmp362, r10000_10ffff_tmp363;
		BitBlock sequence_f0_9e_b9, sequence_f0_9e_b9_adv, r10000_10ffff_tmp364;
		BitBlock r10000_10ffff_tmp365, r10000_10ffff_tmp366, r10000_10ffff_tmp367;
		BitBlock r10000_10ffff_tmp368, r10000_10ffff_tmp369, r10000_10ffff_tmp370;
		BitBlock r10000_10ffff_tmp371, r10000_10ffff_tmp372, byte_range_95_96;
		BitBlock r10000_10ffff_tmp373, r10000_10ffff_tmp374, r10000_10ffff_tmp375;
		BitBlock r10000_10ffff_tmp376, r10000_10ffff_tmp377, r10000_10ffff_tmp378;
		BitBlock r10000_10ffff_tmp379, r10000_10ffff_tmp380, r10000_10ffff_tmp381;
		BitBlock r10000_10ffff_tmp382, r10000_10ffff_tmp383, r10000_10ffff_tmp384;
		BitBlock r10000_10ffff_tmp385, sequence_f0_9e_ba, sequence_f0_9e_ba_adv;
		BitBlock r10000_10ffff_tmp386, r10000_10ffff_tmp387, byte_range_9c_a0;
		BitBlock r10000_10ffff_tmp388, r10000_10ffff_tmp389, r10000_10ffff_tmp390;
		BitBlock r10000_10ffff_tmp391, sequence_f0_9e_bb, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp392, r10000_10ffff_tmp393;
		BitBlock sequence_f0_9e_byte_range_bc_bf, r10000_10ffff_tmp394;
		BitBlock sequence_f0_9e_byte_range_bc_bf_sfx, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp395, sequence_f0_9f_80, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_80_adv, r10000_10ffff_tmp396, sequence_f0_9f_82;
		BitBlock sequence_f0_9f_82_adv, r10000_10ffff_tmp397, r10000_10ffff_tmp398;
		BitBlock r10000_10ffff_tmp399, byte_range_af_b0, r10000_10ffff_tmp400;
		BitBlock sequence_f0_9f_83, sequence_f0_9f_83_adv, r10000_10ffff_tmp401;
		BitBlock r10000_10ffff_tmp402, r10000_10ffff_tmp403, sequence_f0_9f_84;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp404, r10000_10ffff_tmp405;
		BitBlock sequence_f0_9f_85, sequence_f0_9f_85_adv, r10000_10ffff_tmp406;
		BitBlock sequence_f0_9f_86, r10000_10ffff_tmp407, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp408, sequence_f0_9f_87, r10000_10ffff_tmp409;
		BitBlock byte_range_80_a5, sequence_f0_9f_87_adv, r10000_10ffff_tmp410;
		BitBlock sequence_f0_9f_88, byte_range_83_8f, sequence_f0_9f_88_adv;
		BitBlock r10000_10ffff_tmp411, r10000_10ffff_tmp412, sequence_f0_9f_89;
		BitBlock sequence_f0_9f_89_adv, r10000_10ffff_tmp413, r10000_10ffff_tmp414;
		BitBlock sequence_f0_9f_byte_range_8a_8b, r10000_10ffff_tmp415;
		BitBlock sequence_f0_9f_byte_range_8a_8b_sfx, sequence_f0_9f_8c;
		BitBlock sequence_f0_9f_8c_adv, r10000_10ffff_tmp416, sequence_f0_9f_8d;
		BitBlock sequence_f0_9f_8d_adv, r10000_10ffff_tmp417, sequence_f0_9f_8f;
		BitBlock r10000_10ffff_tmp418, r10000_10ffff_tmp419, byte_range_8f_93;
		BitBlock sequence_f0_9f_8f_adv, r10000_10ffff_tmp420, r10000_10ffff_tmp421;
		BitBlock sequence_f0_9f_93, sequence_f0_9f_93_adv, r10000_10ffff_tmp422;
		BitBlock sequence_f0_9f_95, sequence_f0_9f_95_adv, r10000_10ffff_tmp423;
		BitBlock r10000_10ffff_tmp424, sequence_f0_9f_96, sequence_f0_9f_96_adv;
		BitBlock r10000_10ffff_tmp425, sequence_f0_9f_99, byte_range_83_84;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp426, sequence_f0_9f_9b;
		BitBlock byte_range_90_9f, sequence_f0_9f_9b_adv, r10000_10ffff_tmp427;
		BitBlock r10000_10ffff_tmp428, r10000_10ffff_tmp429, sequence_f0_9f_9d;
		BitBlock sequence_f0_9f_9d_adv, r10000_10ffff_tmp430, sequence_f0_9f_9f;
		BitBlock r10000_10ffff_tmp431, r10000_10ffff_tmp432, byte_range_95_bf;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp433, sequence_f0_9f_a0;
		BitBlock sequence_f0_9f_a0_adv, r10000_10ffff_tmp434, sequence_f0_9f_a1;
		BitBlock sequence_f0_9f_a1_adv, r10000_10ffff_tmp435, r10000_10ffff_tmp436;
		BitBlock r10000_10ffff_tmp437, sequence_f0_9f_a2, sequence_f0_9f_a2_adv;
		BitBlock r10000_10ffff_tmp438, r10000_10ffff_tmp439, byte_range_ae_bf;
		BitBlock r10000_10ffff_tmp440, r10000_10ffff_tmp441, r10000_10ffff_tmp442;
		BitBlock byte_range_a3_bf, sequence_f0_9f_byte_range_a3_bf;
		BitBlock r10000_10ffff_tmp443, sequence_f0_9f_byte_range_a3_bf_sfx;
		BitBlock sequence_f0_aa, r10000_10ffff_tmp444, sequence_f0_aa_9b;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b_adv, r10000_10ffff_tmp445;
		BitBlock sequence_f0_ab, r10000_10ffff_tmp446, sequence_f0_ab_9c;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_9c_adv, r10000_10ffff_tmp447;
		BitBlock sequence_f0_ab_a0, sequence_f0_ab_a0_adv, r10000_10ffff_tmp448;
		BitBlock sequence_f0_ab_byte_range_a1_bf, r10000_10ffff_tmp449;
		BitBlock sequence_f0_ab_byte_range_a1_bf_sfx, byte_range_ac_ae;
		BitBlock byte_f0_byte_range_ac_ae, r10000_10ffff_tmp450;
		BitBlock byte_f0_byte_range_ac_ae_sfx, r10000_10ffff_tmp451;
		BitBlock byte_f0_byte_range_ac_ae_sfx_sfx, sequence_f0_af;
		BitBlock r10000_10ffff_tmp452, sequence_f0_af_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp453, sequence_f0_af_byte_range_80_9f_sfx;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp454, byte_range_a9_bf;
		BitBlock sequence_f0_af_byte_range_a9_bf, r10000_10ffff_tmp455;
		BitBlock sequence_f0_af_byte_range_a9_bf_sfx, byte_f0_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp456, byte_f0_byte_range_b0_bf_sfx;
		BitBlock r10000_10ffff_tmp457, byte_f0_byte_range_b0_bf_sfx_sfx;
		BitBlock r10000_10ffff_tmp458, byte_range_f1_f2, r10000_10ffff_tmp459;
		BitBlock byte_range_f1_f2_sfx, r10000_10ffff_tmp460, byte_range_f1_f2_sfx_sfx;
		BitBlock r10000_10ffff_tmp461, byte_range_f1_f2_sfx_sfx_sfx, byte_f3;
		BitBlock r10000_10ffff_tmp462, byte_f3_byte_range_80_9f, r10000_10ffff_tmp463;
		BitBlock byte_f3_byte_range_80_9f_sfx, r10000_10ffff_tmp464;
		BitBlock byte_f3_byte_range_80_9f_sfx_sfx, sequence_f3_a0;
		BitBlock r10000_10ffff_tmp465, sequence_f3_a0_byte_range_80_83;
		BitBlock r10000_10ffff_tmp466, sequence_f3_a0_byte_range_80_83_sfx;
		BitBlock sequence_f3_a0_87, byte_f3_adv, sequence_f3_a0_adv;
		BitBlock sequence_f3_a0_87_adv, r10000_10ffff_tmp467, r10000_10ffff_tmp468;
		BitBlock byte_range_88_bf, sequence_f3_a0_byte_range_88_bf;
		BitBlock r10000_10ffff_tmp469, sequence_f3_a0_byte_range_88_bf_sfx;
		BitBlock byte_f3_byte_range_a1_bf, r10000_10ffff_tmp470;
		BitBlock byte_f3_byte_range_a1_bf_sfx, r10000_10ffff_tmp471;
		BitBlock byte_f3_byte_range_a1_bf_sfx_sfx, byte_f4, r10000_10ffff_tmp472;
		BitBlock byte_f4_byte_range_80_8f, r10000_10ffff_tmp473;
		BitBlock byte_f4_byte_range_80_8f_sfx, r10000_10ffff_tmp474;
		BitBlock byte_f4_byte_range_80_8f_sfx_sfx;




        struct_gc_C.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(tmp1, basis_bits.bit_2);
        tmp3 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp5 = simd_and(tmp3, tmp4);
        tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp8 = simd_and(tmp6, tmp7);
        tmp9 = simd_and(tmp5, tmp8);
        tmp10 = simd_andc(tmp2, tmp9);
        cc_range_0_7f_1 = simd_not(tmp10);
        struct_gc_C.cc = simd_or(struct_gc_C.cc, cc_range_0_7f_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 339))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 13))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            byte_range_80_9f = simd_andc(r80_7ff_tmp6, basis_bits.bit_2);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_range_80_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r80_7ff_tmp7);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp11 = simd_and(tmp6, r80_7ff_tmp10);
            byte_ad = simd_and(r80_7ff_tmp9, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ad);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r80_7ff_tmp12);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 2))) {
              byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp11);
              byte_range_b0_bf = simd_and(r80_7ff_tmp6, tmp4);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(1), r100_3ff_tmp1));
              r100_3ff_tmp2 = simd_and(r100_3ff_tmp1, byte_range_b0_bf);
              r100_3ff_tmp3 = simd_and(tmp6, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_or(r100_3ff_tmp2, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp4) || carryQ.CarryTest(2, 1))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp2 = simd_andc(r370_3ff_tmp1, basis_bits.bit_6);
                byte_range_b8_b9 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                byte_cd_adv = r100_3ff_tmp1;
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_range_b8_b9);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(tmp6, r80_7ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                byte_range_80_83 = simd_andc(r370_3ff_tmp5, r80_7ff_tmp3);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(2), byte_ce_adv));
                r370_3ff_tmp6 = simd_and(byte_ce_adv, byte_range_80_83);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_and(r370_3ff_tmp1, tmp7);
                byte_8b = simd_and(r370_3ff_tmp5, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(byte_ce_adv, byte_8b);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r370_3ff_tmp8);
                byte_8d = simd_and(r370_3ff_tmp5, r80_7ff_tmp11);
                r370_3ff_tmp9 = simd_and(byte_ce_adv, byte_8d);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r370_3ff_tmp9);
                byte_a2 = simd_and(r80_7ff_tmp9, r80_7ff_tmp5);
                r370_3ff_tmp10 = simd_and(byte_ce_adv, byte_a2);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r370_3ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, r80_7ff_tmp13);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp14, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(3, 4))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp14, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r80_7ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp14, r400_5ff_tmp3);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp4));
              r400_5ff_tmp5 = simd_and(r400_5ff_tmp4, byte_range_80_8f);
              r400_5ff_tmp6 = simd_or(byte_range_d4_d5, r400_5ff_tmp5);
              if ((bitblock::any(r400_5ff_tmp6) || carryQ.CarryTest(4, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp14, r500_58f_tmp2);
                byte_range_b0_bf = simd_and(r80_7ff_tmp6, tmp4);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(4), r500_58f_tmp3));
                r500_58f_tmp4 = simd_and(r500_58f_tmp3, byte_range_b0_bf);
                r500_58f_tmp5 = simd_and(r400_5ff_tmp1, r80_7ff_tmp10);
                byte_d5 = simd_and(r80_7ff_tmp14, r500_58f_tmp5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp7 = simd_or(r500_58f_tmp6, r400_5ff_tmp5);
                if ((bitblock::any(r500_58f_tmp7) || carryQ.CarryTest(5, 1))) {
                  r530_58f_tmp1 = simd_or(r80_7ff_tmp3, r500_58f_tmp1);
                  byte_b0 = simd_andc(byte_range_b0_bf, r530_58f_tmp1);
                  byte_d4_adv = r500_58f_tmp3;
                  r530_58f_tmp2 = simd_and(byte_d4_adv, byte_b0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r530_58f_tmp2);
                  r530_58f_tmp3 = simd_and(r80_7ff_tmp6, r80_7ff_tmp13);
                  r530_58f_tmp4 = simd_or(basis_bits.bit_5, r500_58f_tmp1);
                  r530_58f_tmp5 = simd_not(r530_58f_tmp4);
                  r530_58f_tmp6 = simd_and(basis_bits.bit_5, tmp7);
                  r530_58f_tmp7 = simd_or(simd_and(basis_bits.bit_4, r530_58f_tmp5), simd_andc(r530_58f_tmp6, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r530_58f_tmp3, r530_58f_tmp7);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(5), byte_d5_adv));
                  r530_58f_tmp8 = simd_and(byte_d5_adv, byte_range_97_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r530_58f_tmp8);
                  byte_a0 = simd_andc(r80_7ff_tmp9, r530_58f_tmp1);
                  r530_58f_tmp9 = simd_and(byte_d5_adv, byte_a0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r530_58f_tmp9);
                  r530_58f_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp11 = simd_andc(r530_58f_tmp10, r500_58f_tmp1);
                  byte_88 = simd_and(byte_range_80_8f, r530_58f_tmp11);
                  byte_d6_adv = r400_5ff_tmp4;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_88);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r530_58f_tmp12);
                  r530_58f_tmp13 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r530_58f_tmp14 = simd_not(r500_58f_tmp1);
                  r530_58f_tmp15 = simd_or(simd_and(basis_bits.bit_5, r530_58f_tmp14), simd_andc(tmp7, basis_bits.bit_5));
                  byte_range_8b_8c = simd_and(r530_58f_tmp13, r530_58f_tmp15);
                  r530_58f_tmp16 = simd_and(byte_d6_adv, byte_range_8b_8c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r530_58f_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp6, r80_7ff_tmp1);
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp4, byte_range_90_bf);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, tmp7);
              byte_d7 = simd_and(r80_7ff_tmp14, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp7, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(6, 1))) {
                r590_5ff_tmp1 = simd_and(r80_7ff_tmp6, r80_7ff_tmp13);
                r590_5ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp3 = simd_or(r80_7ff_tmp3, r590_5ff_tmp2);
                byte_90 = simd_andc(r590_5ff_tmp1, r590_5ff_tmp3);
                byte_d6_adv = r400_5ff_tmp4;
                r590_5ff_tmp4 = simd_and(byte_d6_adv, byte_90);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r590_5ff_tmp4);
                byte_range_88_8f = simd_and(byte_range_80_8f, basis_bits.bit_4);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(6), byte_d7_adv));
                r590_5ff_tmp5 = simd_and(byte_d7_adv, byte_range_88_8f);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r590_5ff_tmp5);
                r590_5ff_tmp6 = simd_and(r80_7ff_tmp9, basis_bits.bit_4);
                r590_5ff_tmp7 = simd_or(basis_bits.bit_5, tmp7);
                byte_range_ab_af = simd_and(r590_5ff_tmp6, r590_5ff_tmp7);
                r590_5ff_tmp8 = simd_and(byte_d7_adv, byte_range_ab_af);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_and(r80_7ff_tmp6, tmp4);
                r590_5ff_tmp10 = simd_and(basis_bits.bit_5, r590_5ff_tmp2);
                r590_5ff_tmp11 = simd_or(basis_bits.bit_4, r590_5ff_tmp10);
                byte_range_b5_bf = simd_and(r590_5ff_tmp9, r590_5ff_tmp11);
                r590_5ff_tmp12 = simd_and(byte_d7_adv, byte_range_b5_bf);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r590_5ff_tmp12);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 4);
            }
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp15);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(7, 2))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp15, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp14, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp4 = simd_andc(r600_6ff_tmp3, basis_bits.bit_4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_80_85 = simd_andc(r600_6ff_tmp4, r600_6ff_tmp5);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(7), byte_d8_adv));
              r600_6ff_tmp6 = simd_and(byte_d8_adv, byte_range_80_85);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(r80_7ff_tmp6, r80_7ff_tmp13);
              r600_6ff_tmp8 = simd_andc(tmp6, basis_bits.bit_6);
              byte_range_9c_9d = simd_and(r600_6ff_tmp7, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_and(byte_d8_adv, byte_range_9c_9d);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp15, tmp7);
              byte_db = simd_and(r80_7ff_tmp14, r600_6ff_tmp10);
              byte_9d = simd_and(r600_6ff_tmp7, r80_7ff_tmp11);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(8), byte_db_adv));
              r600_6ff_tmp11 = simd_and(byte_db_adv, byte_9d);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, r600_6ff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 2);
            }
            r80_7ff_tmp16 = simd_andc(tmp6, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp14, r80_7ff_tmp16);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(9, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(tmp6, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp14, r700_77f_tmp2);
              byte_dd = simd_and(r80_7ff_tmp14, r80_7ff_tmp11);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(9), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(10, 1))) {
                r700_74f_tmp1 = simd_and(tmp6, basis_bits.bit_6);
                byte_range_8e_8f = simd_and(byte_range_80_8f, r700_74f_tmp1);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(10), byte_dc_adv));
                r700_74f_tmp2 = simd_and(byte_dc_adv, byte_range_8e_8f);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r700_74f_tmp2);
                r700_74f_tmp3 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                r700_74f_tmp4 = simd_not(r700_77f_tmp1);
                r700_74f_tmp5 = simd_or(simd_and(basis_bits.bit_5, r700_74f_tmp4), simd_andc(tmp7, basis_bits.bit_5));
                byte_range_8b_8c = simd_and(r700_74f_tmp3, r700_74f_tmp5);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp6 = simd_and(byte_dd_adv, byte_range_8b_8c);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r700_74f_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 2);
            }
            r80_7ff_tmp17 = simd_and(tmp6, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp14, r80_7ff_tmp17);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(11, 2))) {
              r780_7ff_tmp1 = simd_and(tmp6, r80_7ff_tmp4);
              byte_de = simd_and(r80_7ff_tmp14, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(11, 1))) {
                r780_7bf_tmp1 = simd_and(r80_7ff_tmp6, tmp4);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_4, r780_7bf_tmp2);
                byte_range_b2_bf = simd_and(r780_7bf_tmp1, r780_7bf_tmp3);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(11), byte_de_adv));
                r780_7bf_tmp4 = simd_and(byte_de_adv, byte_range_b2_bf);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r780_7bf_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
              byte_df = simd_and(r80_7ff_tmp14, tmp8);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(12, 1))) {
                r7c0_7ff_tmp1 = simd_and(r80_7ff_tmp6, tmp4);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, basis_bits.bit_4);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_5, tmp7);
                byte_range_bb_bf = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp3);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(12), byte_df_adv));
                r7c0_7ff_tmp4 = simd_and(byte_df_adv, byte_range_bb_bf);
                struct_gc_C.cc = simd_or(struct_gc_C.cc, r7c0_7ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 13);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(13, 144))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(13), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(14, 99))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(14, 67))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(14, 30))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(14), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(tmp6, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(15), sequence_e0_a0_adv));
                  r800_fff_tmp4 = simd_and(sequence_e0_a0_adv, byte_range_ae_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp4);
                  r800_fff_tmp5 = simd_and(r800_ffff_tmp5, tmp4);
                  byte_bf = simd_and(r800_fff_tmp5, tmp8);
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp10 = simd_and(r800_ffff_tmp5, r800_fff_tmp9);
                  r800_fff_tmp11 = simd_andc(tmp6, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp10, r800_fff_tmp11);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(16), sequence_e0_a1_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_a1_adv, byte_range_9c_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(basis_bits.bit_3, tmp8);
                  r800_fff_tmp14 = simd_or(basis_bits.bit_2, r800_fff_tmp13);
                  byte_range_9f_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(sequence_e0_a1_adv, byte_range_9f_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp17 = simd_andc(r800_fff_tmp16, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(17), sequence_e0_a2_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_a2_adv, byte_range_80_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_5, tmp7);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_4, r800_fff_tmp19);
                  byte_range_b3_bf = simd_and(r800_fff_tmp5, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(sequence_e0_a2_adv, byte_range_b3_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_andc(tmp7, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp22);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp23 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_2, r800_fff_tmp23);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp5, r800_fff_tmp24);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(18), sequence_e0_a3_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_a3_adv, byte_range_80_a3);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_and(r800_ffff_tmp2, r800_fff_tmp16);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp28 = simd_andc(r800_ffff_tmp5, r800_fff_tmp27);
                  byte_84 = simd_and(r800_fff_tmp28, r800_ffff_tmp4);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(19), sequence_e0_a6_adv));
                  r800_fff_tmp29 = simd_and(sequence_e0_a6_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(r800_fff_tmp28, tmp6);
                  r800_fff_tmp31 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_8d_8e = simd_and(r800_fff_tmp30, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_and(sequence_e0_a6_adv, byte_range_8d_8e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_andc(r800_fff_tmp10, r800_ffff_tmp1);
                  byte_range_91_92 = simd_and(r800_fff_tmp33, r800_fff_tmp31);
                  r800_fff_tmp34 = simd_and(sequence_e0_a6_adv, byte_range_91_92);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp35, r800_fff_tmp7);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_a6_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp37);
                  byte_b1 = simd_and(r800_fff_tmp5, r800_fff_tmp8);
                  r800_fff_tmp38 = simd_and(sequence_e0_a6_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_andc(r800_fff_tmp5, basis_bits.bit_4);
                  r800_fff_tmp40 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp41 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp40), simd_andc(tmp7, basis_bits.bit_5));
                  byte_range_b3_b5 = simd_and(r800_fff_tmp39, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(sequence_e0_a6_adv, byte_range_b3_b5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(r800_fff_tmp35, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r800_fff_tmp5, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(sequence_e0_a6_adv, byte_range_ba_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(r800_ffff_tmp2, tmp7);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp45);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp46 = simd_and(r800_fff_tmp28, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r800_fff_tmp46, r800_fff_tmp31);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(20), sequence_e0_a7_adv));
                  r800_fff_tmp47 = simd_and(sequence_e0_a7_adv, byte_range_85_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(r800_fff_tmp28, r800_fff_tmp35);
                  byte_range_89_8a = simd_and(r800_fff_tmp48, r800_fff_tmp31);
                  r800_fff_tmp49 = simd_and(sequence_e0_a7_adv, byte_range_89_8a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_and(basis_bits.bit_5, tmp7);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_4, r800_fff_tmp50);
                  r800_fff_tmp52 = simd_not(r800_fff_tmp51);
                  r800_fff_tmp53 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp52), simd_andc(tmp8, basis_bits.bit_3));
                  byte_range_8f_96 = simd_and(byte_range_80_9f, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_a7_adv, byte_range_8f_96);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp54);
                  byte_range_98_9b = simd_and(r800_fff_tmp10, r800_fff_tmp35);
                  r800_fff_tmp55 = simd_and(sequence_e0_a7_adv, byte_range_98_9b);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(tmp6, r800_fff_tmp16);
                  byte_9e = simd_and(r800_fff_tmp10, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_a7_adv, byte_9e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(sequence_e0_a7_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp59);
                  byte_range_bc_bf = simd_and(r800_fff_tmp5, tmp6);
                  r800_fff_tmp60 = simd_and(sequence_e0_a7_adv, byte_range_bc_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_andc(r800_fff_tmp35, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp61);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  byte_80 = simd_andc(r800_fff_tmp28, r800_1fff_tmp1);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(21), sequence_e0_a8_adv));
                  r800_fff_tmp62 = simd_and(sequence_e0_a8_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_and(sequence_e0_a8_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp63);
                  r800_fff_tmp64 = simd_and(r800_fff_tmp28, basis_bits.bit_4);
                  r800_fff_tmp65 = simd_xor(basis_bits.bit_5, tmp7);
                  byte_range_8b_8e = simd_and(r800_fff_tmp64, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_and(sequence_e0_a8_adv, byte_range_8b_8e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(sequence_e0_a8_adv, byte_range_91_92);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(sequence_e0_a8_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp68);
                  r800_fff_tmp69 = simd_and(sequence_e0_a8_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp69);
                  byte_b4 = simd_and(r800_fff_tmp5, r800_ffff_tmp4);
                  r800_fff_tmp70 = simd_and(sequence_e0_a8_adv, byte_b4);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp70);
                  byte_b7 = simd_and(r800_fff_tmp5, r800_fff_tmp45);
                  r800_fff_tmp71 = simd_and(sequence_e0_a8_adv, byte_b7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp71);
                  r800_fff_tmp72 = simd_and(sequence_e0_a8_adv, byte_range_ba_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(tmp6, r800_fff_tmp7);
                  byte_bd = simd_and(r800_fff_tmp5, r800_fff_tmp73);
                  r800_fff_tmp74 = simd_and(sequence_e0_a8_adv, byte_bd);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp74);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp75 = simd_andc(r800_fff_tmp28, basis_bits.bit_4);
                  byte_range_83_86 = simd_and(r800_fff_tmp75, r800_fff_tmp65);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(22), sequence_e0_a9_adv));
                  r800_fff_tmp76 = simd_and(sequence_e0_a9_adv, byte_range_83_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(sequence_e0_a9_adv, byte_range_89_8a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp77);
                  r800_fff_tmp78 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp79 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp78), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(byte_range_80_9f, r800_fff_tmp79);
                  r800_fff_tmp80 = simd_and(sequence_e0_a9_adv, byte_range_8e_90);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp82 = simd_not(r800_fff_tmp81);
                  r800_fff_tmp83 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp84 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp82), simd_andc(r800_fff_tmp83, basis_bits.bit_4));
                  byte_range_92_98 = simd_and(r800_fff_tmp10, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_and(sequence_e0_a9_adv, byte_range_92_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp85);
                  byte_9d = simd_and(r800_fff_tmp10, r800_fff_tmp73);
                  r800_fff_tmp86 = simd_and(sequence_e0_a9_adv, byte_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp86);
                  r800_fff_tmp87 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp88 = simd_or(basis_bits.bit_4, r800_fff_tmp87);
                  r800_fff_tmp89 = simd_or(basis_bits.bit_3, r800_fff_tmp88);
                  r800_fff_tmp90 = simd_not(r800_fff_tmp89);
                  r800_fff_tmp91 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp90), simd_andc(r800_fff_tmp13, basis_bits.bit_2));
                  byte_range_9f_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp91);
                  r800_fff_tmp92 = simd_and(sequence_e0_a9_adv, byte_range_9f_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp92);
                  byte_range_b6_bf = simd_and(r800_fff_tmp5, r800_fff_tmp88);
                  r800_fff_tmp93 = simd_and(sequence_e0_a9_adv, byte_range_b6_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp93);
                  r800_fff_tmp94 = simd_and(r800_fff_tmp35, r800_fff_tmp16);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp94);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(23), sequence_e0_aa_adv));
                  r800_fff_tmp95 = simd_and(sequence_e0_aa_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp95);
                  r800_fff_tmp96 = simd_and(sequence_e0_aa_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp96);
                  byte_8e = simd_and(r800_fff_tmp28, r800_fff_tmp56);
                  r800_fff_tmp97 = simd_and(sequence_e0_aa_adv, byte_8e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp97);
                  byte_92 = simd_and(r800_fff_tmp10, r800_fff_tmp17);
                  r800_fff_tmp98 = simd_and(sequence_e0_aa_adv, byte_92);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp98);
                  r800_fff_tmp99 = simd_and(sequence_e0_aa_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(sequence_e0_aa_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp100);
                  r800_fff_tmp101 = simd_and(sequence_e0_aa_adv, byte_b4);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp101);
                  r800_fff_tmp102 = simd_and(sequence_e0_aa_adv, byte_range_ba_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_and(r800_fff_tmp35, tmp7);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp103);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  byte_86 = simd_and(r800_fff_tmp28, r800_fff_tmp26);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(24), sequence_e0_ab_adv));
                  r800_fff_tmp104 = simd_and(sequence_e0_ab_adv, byte_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp104);
                  byte_8a = simd_and(r800_fff_tmp28, r800_fff_tmp94);
                  r800_fff_tmp105 = simd_and(sequence_e0_ab_adv, byte_8a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp105);
                  byte_range_8e_8f = simd_and(r800_fff_tmp28, r800_fff_tmp3);
                  r800_fff_tmp106 = simd_and(sequence_e0_ab_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_or(basis_bits.bit_4, r800_fff_tmp81);
                  byte_range_91_9f = simd_and(r800_fff_tmp10, r800_fff_tmp107);
                  r800_fff_tmp108 = simd_and(sequence_e0_ab_adv, byte_range_91_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(sequence_e0_ab_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp109);
                  r800_fff_tmp110 = simd_or(basis_bits.bit_4, r800_fff_tmp83);
                  byte_range_b2_bf = simd_and(r800_fff_tmp5, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_and(sequence_e0_ab_adv, byte_range_b2_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_andc(tmp6, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp112);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(25), sequence_e0_ac_adv));
                  r800_fff_tmp113 = simd_and(sequence_e0_ac_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp113);
                  r800_fff_tmp114 = simd_and(sequence_e0_ac_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp114);
                  r800_fff_tmp115 = simd_and(sequence_e0_ac_adv, byte_range_8d_8e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_and(sequence_e0_ac_adv, byte_range_91_92);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp116);
                  r800_fff_tmp117 = simd_and(sequence_e0_ac_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(sequence_e0_ac_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_ac_adv, byte_b4);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_ac_adv, byte_range_ba_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp120);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp73);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(26), sequence_e0_ad_adv));
                  r800_fff_tmp121 = simd_and(sequence_e0_ad_adv, byte_range_85_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_and(sequence_e0_ad_adv, byte_range_89_8a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp122);
                  r800_fff_tmp123 = simd_not(r800_fff_tmp88);
                  r800_fff_tmp124 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp123), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  byte_range_8e_95 = simd_and(byte_range_80_9f, r800_fff_tmp124);
                  r800_fff_tmp125 = simd_and(sequence_e0_ad_adv, byte_range_8e_95);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp125);
                  r800_fff_tmp126 = simd_and(sequence_e0_ad_adv, byte_range_98_9b);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp126);
                  r800_fff_tmp127 = simd_and(sequence_e0_ad_adv, byte_9e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp127);
                  r800_fff_tmp128 = simd_and(sequence_e0_ad_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp128);
                  byte_range_b8_bf = simd_and(r800_fff_tmp5, basis_bits.bit_4);
                  r800_fff_tmp129 = simd_and(sequence_e0_ad_adv, byte_range_b8_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp129);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp56);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  byte_range_80_81 = simd_andc(r800_fff_tmp28, r800_4dff_tmp1);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(27), sequence_e0_ae_adv));
                  r800_fff_tmp130 = simd_and(sequence_e0_ae_adv, byte_range_80_81);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp130);
                  r800_fff_tmp131 = simd_and(sequence_e0_ae_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp131);
                  byte_range_8b_8d = simd_and(r800_fff_tmp64, r800_fff_tmp41);
                  r800_fff_tmp132 = simd_and(sequence_e0_ae_adv, byte_range_8b_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp132);
                  byte_91 = simd_and(r800_fff_tmp10, r800_fff_tmp8);
                  r800_fff_tmp133 = simd_and(sequence_e0_ae_adv, byte_91);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp82), simd_andc(r800_fff_tmp87, basis_bits.bit_4));
                  byte_range_96_98 = simd_and(r800_fff_tmp10, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(sequence_e0_ae_adv, byte_range_96_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp135);
                  byte_9b = simd_and(r800_fff_tmp10, r800_fff_tmp103);
                  r800_fff_tmp136 = simd_and(sequence_e0_ae_adv, byte_9b);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_and(sequence_e0_ae_adv, byte_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp137);
                  r800_fff_tmp138 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  byte_range_a0_a2 = simd_andc(r800_fff_tmp138, tmp7);
                  r800_fff_tmp139 = simd_and(sequence_e0_ae_adv, byte_range_a0_a2);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp139);
                  r800_fff_tmp140 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  byte_range_a5_a7 = simd_and(r800_fff_tmp140, r800_ffff_tmp3);
                  r800_fff_tmp141 = simd_and(sequence_e0_ae_adv, byte_range_a5_a7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_ab_ad = simd_and(r800_fff_tmp142, r800_fff_tmp41);
                  r800_fff_tmp143 = simd_and(sequence_e0_ae_adv, byte_range_ab_ad);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp143);
                  r800_fff_tmp144 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bd = simd_and(byte_range_b8_bf, r800_fff_tmp144);
                  r800_fff_tmp145 = simd_and(sequence_e0_ae_adv, byte_range_ba_bd);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp145);
                  byte_af = simd_and(r800_fff_tmp1, tmp8);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_range_83_85 = simd_and(r800_fff_tmp75, r800_fff_tmp41);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(28), sequence_e0_af_adv));
                  r800_fff_tmp146 = simd_and(sequence_e0_af_adv, byte_range_83_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp146);
                  byte_89 = simd_and(r800_fff_tmp28, r800_fff_tmp36);
                  r800_fff_tmp147 = simd_and(sequence_e0_af_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp147);
                  r800_fff_tmp148 = simd_and(sequence_e0_af_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp148);
                  r800_fff_tmp149 = simd_andc(r800_fff_tmp10, basis_bits.bit_4);
                  r800_fff_tmp150 = simd_not(tmp7);
                  r800_fff_tmp151 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp150), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_91_96 = simd_and(r800_fff_tmp149, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(sequence_e0_af_adv, byte_range_91_96);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp152);
                  r800_fff_tmp153 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp90), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  byte_range_98_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp153);
                  r800_fff_tmp154 = simd_and(sequence_e0_af_adv, byte_range_98_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp154);
                  byte_range_bb_bf = simd_and(byte_range_b8_bf, r800_fff_tmp19);
                  r800_fff_tmp155 = simd_and(sequence_e0_af_adv, byte_range_bb_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp155);
                  byte_b0 = simd_andc(r800_fff_tmp5, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(29), sequence_e0_b0_adv));
                  r800_fff_tmp156 = simd_and(sequence_e0_b0_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp156);
                  byte_8d = simd_and(r800_fff_tmp28, r800_fff_tmp73);
                  r800_fff_tmp157 = simd_and(sequence_e0_b0_adv, byte_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp157);
                  r800_fff_tmp158 = simd_and(sequence_e0_b0_adv, byte_91);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp158);
                  r800_fff_tmp159 = simd_and(sequence_e0_b0_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp159);
                  r800_fff_tmp160 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp161 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp160), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(byte_range_b8_bf, r800_fff_tmp161);
                  r800_fff_tmp162 = simd_and(sequence_e0_b0_adv, byte_range_ba_bc);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp162);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp163 = simd_and(r800_ffff_tmp2, r800_fff_tmp7);
                  byte_85 = simd_and(r800_fff_tmp28, r800_fff_tmp163);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(30), sequence_e0_b1_adv));
                  r800_fff_tmp164 = simd_and(sequence_e0_b1_adv, byte_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp164);
                  r800_fff_tmp165 = simd_and(sequence_e0_b1_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp165);
                  r800_fff_tmp166 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp167 = simd_or(basis_bits.bit_4, r800_fff_tmp166);
                  r800_fff_tmp168 = simd_not(r800_fff_tmp167);
                  r800_fff_tmp169 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp168), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  byte_range_8e_94 = simd_and(byte_range_80_9f, r800_fff_tmp169);
                  r800_fff_tmp170 = simd_and(sequence_e0_b1_adv, byte_range_8e_94);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp170);
                  byte_97 = simd_and(r800_fff_tmp10, r800_fff_tmp45);
                  r800_fff_tmp171 = simd_and(sequence_e0_b1_adv, byte_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp171);
                  r800_fff_tmp172 = simd_and(r800_fff_tmp10, basis_bits.bit_4);
                  byte_range_9a_9f = simd_and(r800_fff_tmp172, r800_fff_tmp83);
                  r800_fff_tmp173 = simd_and(sequence_e0_b1_adv, byte_range_9a_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp173);
                  r800_fff_tmp174 = simd_and(sequence_e0_b1_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp174);
                  byte_range_b0_b7 = r800_fff_tmp39;
                  r800_fff_tmp175 = simd_and(sequence_e0_b1_adv, byte_range_b0_b7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp175);
                  byte_b2 = simd_and(r800_fff_tmp5, r800_fff_tmp17);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(31), sequence_e0_b2_adv));
                  r800_fff_tmp176 = simd_and(sequence_e0_b2_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp176);
                  r800_fff_tmp177 = simd_and(sequence_e0_b2_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp177);
                  r800_fff_tmp178 = simd_and(sequence_e0_b2_adv, byte_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp178);
                  r800_fff_tmp179 = simd_and(sequence_e0_b2_adv, byte_91);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp179);
                  r800_fff_tmp180 = simd_and(sequence_e0_b2_adv, byte_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp180);
                  r800_fff_tmp181 = simd_and(sequence_e0_b2_adv, byte_b4);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp181);
                  r800_fff_tmp182 = simd_and(sequence_e0_b2_adv, byte_range_ba_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp182);
                  byte_b3 = simd_and(r800_fff_tmp5, r800_fff_tmp22);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(32), sequence_e0_b3_adv));
                  r800_fff_tmp183 = simd_and(sequence_e0_b3_adv, byte_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp183);
                  r800_fff_tmp184 = simd_and(sequence_e0_b3_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp184);
                  r800_fff_tmp185 = simd_and(sequence_e0_b3_adv, byte_range_8e_94);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp185);
                  r800_fff_tmp186 = simd_not(r800_fff_tmp87);
                  r800_fff_tmp187 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp186), simd_andc(r800_fff_tmp50, basis_bits.bit_4));
                  byte_range_97_9d = simd_and(r800_fff_tmp10, r800_fff_tmp187);
                  r800_fff_tmp188 = simd_and(sequence_e0_b3_adv, byte_range_97_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp188);
                  byte_9f = simd_and(r800_fff_tmp10, tmp8);
                  r800_fff_tmp189 = simd_and(sequence_e0_b3_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp189);
                  r800_fff_tmp190 = simd_and(sequence_e0_b3_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp190);
                  r800_fff_tmp191 = simd_and(sequence_e0_b3_adv, byte_b0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp191);
                  r800_fff_tmp192 = simd_and(sequence_e0_b3_adv, byte_range_b3_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp192);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(33), sequence_e0_b4_adv));
                  r800_fff_tmp193 = simd_and(sequence_e0_b4_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp193);
                  r800_fff_tmp194 = simd_and(sequence_e0_b4_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp194);
                  r800_fff_tmp195 = simd_and(sequence_e0_b4_adv, byte_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp195);
                  r800_fff_tmp196 = simd_and(sequence_e0_b4_adv, byte_91);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp196);
                  r800_fff_tmp197 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp160), simd_andc(tmp7, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(byte_range_b8_bf, r800_fff_tmp197);
                  r800_fff_tmp198 = simd_and(sequence_e0_b4_adv, byte_range_bb_bc);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp198);
                  byte_b5 = simd_and(r800_fff_tmp5, r800_fff_tmp163);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(34), sequence_e0_b5_adv));
                  r800_fff_tmp199 = simd_and(sequence_e0_b5_adv, byte_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp199);
                  r800_fff_tmp200 = simd_and(sequence_e0_b5_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp200);
                  r800_fff_tmp201 = simd_and(sequence_e0_b5_adv, byte_range_8f_96);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp201);
                  byte_range_98_9f = r800_fff_tmp172;
                  r800_fff_tmp202 = simd_and(sequence_e0_b5_adv, byte_range_98_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp202);
                  r800_fff_tmp203 = simd_and(sequence_e0_b5_adv, byte_range_a4_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp203);
                  byte_range_b6_b8 = simd_and(r800_fff_tmp5, r800_fff_tmp134);
                  r800_fff_tmp204 = simd_and(sequence_e0_b5_adv, byte_range_b6_b8);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp204);
                  byte_b6 = simd_and(r800_fff_tmp5, r800_fff_tmp26);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(35), sequence_e0_b6_adv));
                  r800_fff_tmp205 = simd_and(sequence_e0_b6_adv, byte_range_80_81);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp205);
                  r800_fff_tmp206 = simd_and(sequence_e0_b6_adv, byte_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp206);
                  r800_fff_tmp207 = simd_not(r800_fff_tmp83);
                  r800_fff_tmp208 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp207), simd_andc(r800_fff_tmp50, basis_bits.bit_4));
                  byte_range_97_99 = simd_and(r800_fff_tmp10, r800_fff_tmp208);
                  r800_fff_tmp209 = simd_and(sequence_e0_b6_adv, byte_range_97_99);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp209);
                  r800_fff_tmp210 = simd_and(sequence_e0_b6_adv, byte_b2);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp210);
                  byte_bc = simd_and(r800_fff_tmp5, r800_fff_tmp112);
                  r800_fff_tmp211 = simd_and(sequence_e0_b6_adv, byte_bc);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp211);
                  byte_range_be_bf = simd_and(r800_fff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp212 = simd_and(sequence_e0_b6_adv, byte_range_be_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp212);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_range_87_89 = simd_and(r800_fff_tmp28, r800_fff_tmp208);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(36), sequence_e0_b7_adv));
                  r800_fff_tmp213 = simd_and(sequence_e0_b7_adv, byte_range_87_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp213);
                  r800_fff_tmp214 = simd_and(sequence_e0_b7_adv, byte_range_8b_8e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp214);
                  byte_95 = simd_and(r800_fff_tmp10, r800_fff_tmp163);
                  r800_fff_tmp215 = simd_and(sequence_e0_b7_adv, byte_95);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp215);
                  r800_fff_tmp216 = simd_and(sequence_e0_b7_adv, byte_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp216);
                  r800_fff_tmp217 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_a0_a5 = simd_andc(r800_fff_tmp217, r800_fff_tmp87);
                  r800_fff_tmp218 = simd_and(sequence_e0_b7_adv, byte_range_a0_a5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp218);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp5, r800_4dff_tmp1);
                  r800_fff_tmp219 = simd_and(sequence_e0_b7_adv, byte_range_b0_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp219);
                  byte_range_b5_bf = simd_and(r800_fff_tmp5, r800_fff_tmp167);
                  r800_fff_tmp220 = simd_and(sequence_e0_b7_adv, byte_range_b5_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp220);
                  byte_b8 = simd_and(r800_fff_tmp5, r800_fff_tmp61);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(37), sequence_e0_b8_adv));
                  r800_fff_tmp221 = simd_and(sequence_e0_b8_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp221);
                  byte_range_bb_be = simd_and(byte_range_b8_bf, r800_fff_tmp65);
                  r800_fff_tmp222 = simd_and(sequence_e0_b8_adv, byte_range_bb_be);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp222);
                  byte_b9 = simd_and(r800_fff_tmp5, r800_fff_tmp36);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp223 = simd_and(basis_bits.bit_3, tmp6);
                  r800_fff_tmp224 = simd_or(basis_bits.bit_2, r800_fff_tmp223);
                  byte_range_9c_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp224);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(38), sequence_e0_b9_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_b9_adv, byte_range_9c_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp225);
                  byte_ba = simd_and(r800_fff_tmp5, r800_fff_tmp94);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(39), sequence_e0_ba_adv));
                  r800_fff_tmp226 = simd_and(sequence_e0_ba_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp226);
                  byte_83 = simd_and(r800_fff_tmp28, r800_fff_tmp22);
                  r800_fff_tmp227 = simd_and(sequence_e0_ba_adv, byte_83);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp227);
                  r800_fff_tmp228 = simd_and(sequence_e0_ba_adv, byte_range_85_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp228);
                  r800_fff_tmp229 = simd_and(sequence_e0_ba_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp229);
                  byte_range_8b_8c = simd_and(r800_fff_tmp64, r800_fff_tmp197);
                  r800_fff_tmp230 = simd_and(sequence_e0_ba_adv, byte_range_8b_8c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp230);
                  r800_fff_tmp231 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp232 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp231), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  byte_range_8e_93 = simd_and(byte_range_80_9f, r800_fff_tmp232);
                  r800_fff_tmp233 = simd_and(sequence_e0_ba_adv, byte_range_8e_93);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp233);
                  byte_98 = simd_and(r800_fff_tmp10, r800_fff_tmp61);
                  r800_fff_tmp234 = simd_and(sequence_e0_ba_adv, byte_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp234);
                  r800_fff_tmp235 = simd_and(sequence_e0_ba_adv, byte_a0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp235);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  r800_fff_tmp236 = simd_and(sequence_e0_ba_adv, byte_a4);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp236);
                  r800_fff_tmp237 = simd_and(sequence_e0_ba_adv, byte_a6);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp237);
                  r800_fff_tmp238 = simd_andc(r800_fff_tmp35, basis_bits.bit_6);
                  byte_range_a8_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp238);
                  r800_fff_tmp239 = simd_and(sequence_e0_ba_adv, byte_range_a8_a9);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp239);
                  r800_fff_tmp240 = simd_and(sequence_e0_ba_adv, byte_ac);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp240);
                  r800_fff_tmp241 = simd_and(sequence_e0_ba_adv, byte_ba);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp241);
                  r800_fff_tmp242 = simd_and(sequence_e0_ba_adv, byte_range_be_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp242);
                  byte_bb = simd_and(r800_fff_tmp5, r800_fff_tmp103);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(40), sequence_e0_bb_adv));
                  r800_fff_tmp243 = simd_and(sequence_e0_bb_adv, byte_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp243);
                  byte_87 = simd_and(r800_fff_tmp28, r800_fff_tmp45);
                  r800_fff_tmp244 = simd_and(sequence_e0_bb_adv, byte_87);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp244);
                  r800_fff_tmp245 = simd_and(sequence_e0_bb_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp245);
                  byte_range_9a_9b = simd_and(r800_fff_tmp10, r800_fff_tmp43);
                  r800_fff_tmp246 = simd_and(sequence_e0_bb_adv, byte_range_9a_9b);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp246);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp247 = simd_and(sequence_e0_bb_adv, byte_range_a0_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp247);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_88 = simd_and(r800_fff_tmp28, r800_fff_tmp61);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(41), sequence_e0_bd_adv));
                  r800_fff_tmp248 = simd_and(sequence_e0_bd_adv, byte_88);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp248);
                  r800_fff_tmp249 = simd_and(tmp6, r800_ffff_tmp3);
                  r800_fff_tmp250 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp78), simd_andc(r800_fff_tmp249, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(byte_range_a0_bf, r800_fff_tmp250);
                  r800_fff_tmp251 = simd_and(sequence_e0_bd_adv, byte_range_ad_b0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp251);
                  byte_be = simd_and(r800_fff_tmp5, r800_fff_tmp56);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(42), sequence_e0_be_adv));
                  r800_fff_tmp252 = simd_and(sequence_e0_be_adv, byte_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp252);
                  r800_fff_tmp253 = simd_and(sequence_e0_be_adv, byte_bd);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp253);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(43), sequence_e0_bf_adv));
                  r800_fff_tmp254 = simd_and(sequence_e0_bf_adv, byte_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp254);
                  r800_fff_tmp255 = simd_and(basis_bits.bit_4, r800_fff_tmp19);
                  r800_fff_tmp256 = simd_and(basis_bits.bit_3, r800_fff_tmp255);
                  r800_fff_tmp257 = simd_or(basis_bits.bit_2, r800_fff_tmp256);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp257);
                  r800_fff_tmp258 = simd_and(sequence_e0_bf_adv, byte_range_9b_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r800_fff_tmp258);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 30);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(44, 37))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(tmp7, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(44), r1000_1fff_tmp4));
                  sequence_e1_83 = simd_and(r1000_1fff_tmp4, byte_83);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp5);
                  byte_86 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp6);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(45), sequence_e1_83_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_83_adv, byte_86);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_88_8c = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(sequence_e1_83_adv, byte_range_88_8c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(tmp6, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_83_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp13, r800_1fff_tmp2);
                  byte_89 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp14);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(46), sequence_e1_89_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_89_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(sequence_e1_89_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp18 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp2, tmp7);
                  byte_97 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(sequence_e1_89_adv, byte_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp20);
                  byte_99 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp14);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_89_adv, byte_99);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp21);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp11);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_89_adv, byte_range_9e_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp5);
                  byte_8a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp23);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(47), sequence_e1_8a_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_8a_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_8a_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r800_ffff_tmp5, tmp4);
                  byte_b1 = simd_and(r1000_1fff_tmp26, r800_1fff_tmp3);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_8a_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_8a_adv, byte_range_b6_b7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp29);
                  byte_bf = simd_and(r1000_1fff_tmp26, tmp8);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_8a_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp13, tmp7);
                  byte_8b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp31);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(48), sequence_e1_8b_adv));
                  r1000_1fff_tmp32 = simd_and(sequence_e1_8b_adv, byte_81);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp32);
                  byte_range_86_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp28);
                  r1000_1fff_tmp33 = simd_and(sequence_e1_8b_adv, byte_range_86_87);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_8b_adv, byte_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_andc(tmp6, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_91 = simd_and(r1000_1fff_tmp18, r800_1fff_tmp3);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(49), sequence_e1_8c_adv));
                  r1000_1fff_tmp36 = simd_and(sequence_e1_8c_adv, byte_91);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp36);
                  byte_range_96_97 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp28);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_8c_adv, byte_range_96_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(tmp6, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp38);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp18, basis_bits.bit_4);
                  r1000_1fff_tmp40 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp41 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp40), simd_andc(tmp7, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r1000_1fff_tmp39, r1000_1fff_tmp41);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(50), sequence_e1_8d_adv));
                  r1000_1fff_tmp42 = simd_and(sequence_e1_8d_adv, byte_range_9b_9c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp42);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp26, tmp6);
                  byte_range_bd_bf = simd_and(r1000_1fff_tmp43, r800_ffff_tmp3);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_8d_adv, byte_range_bd_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_and(tmp6, r1000_1fff_tmp5);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp45);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp46 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r1000_1fff_tmp39, r1000_1fff_tmp46);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(51), sequence_e1_8e_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_8e_adv, byte_range_9a_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp47);
                  byte_8f = simd_and(r1000_1fff_tmp2, tmp8);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp48 = simd_or(basis_bits.bit_4, r1000_1fff_tmp9);
                  byte_range_b5_bf = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp48);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(52), sequence_e1_8f_adv));
                  r1000_1fff_tmp49 = simd_and(sequence_e1_8f_adv, byte_range_b5_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp49);
                  byte_9a = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp23);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp18, tmp6);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp50, r800_ffff_tmp3);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(53), sequence_e1_9a_adv));
                  r1000_1fff_tmp51 = simd_and(sequence_e1_9a_adv, byte_range_9d_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp51);
                  byte_9b = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp31);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp26, basis_bits.bit_4);
                  r1000_1fff_tmp53 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp53);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(54), sequence_e1_9b_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_9b_adv, byte_range_b9_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp54);
                  byte_9c = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp35);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(55), sequence_e1_9c_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_9c_adv, byte_8d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp55);
                  byte_range_95_9f = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp48);
                  r1000_1fff_tmp56 = simd_and(sequence_e1_9c_adv, byte_range_95_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp56);
                  r1000_1fff_tmp57 = simd_and(basis_bits.bit_5, tmp7);
                  r1000_1fff_tmp58 = simd_or(basis_bits.bit_4, r1000_1fff_tmp57);
                  byte_range_b7_bf = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp58);
                  r1000_1fff_tmp59 = simd_and(sequence_e1_9c_adv, byte_range_b7_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp59);
                  byte_9d = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp38);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  byte_range_94_9f = simd_and(r1000_1fff_tmp18, r800_ffff_tmp1);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(56), sequence_e1_9d_adv));
                  r1000_1fff_tmp60 = simd_and(sequence_e1_9d_adv, byte_range_94_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp38);
                  r1000_1fff_tmp62 = simd_and(sequence_e1_9d_adv, byte_ad);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_9d_adv, byte_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp63);
                  byte_range_b4_bf = simd_and(r1000_1fff_tmp26, r800_ffff_tmp1);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_9d_adv, byte_range_b4_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp64);
                  byte_9f = simd_and(r1000_1fff_tmp18, tmp8);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(57), sequence_e1_9f_adv));
                  r1000_1fff_tmp65 = simd_and(sequence_e1_9f_adv, byte_range_9e_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp65);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp61, basis_bits.bit_4);
                  byte_range_aa_af = simd_and(r1000_1fff_tmp66, r1000_1fff_tmp46);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_9f_adv, byte_range_aa_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp67);
                  byte_range_ba_bf = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp46);
                  r1000_1fff_tmp68 = simd_and(sequence_e1_9f_adv, byte_range_ba_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp68);
                  byte_a0 = simd_andc(r1000_1fff_tmp61, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(58), sequence_e1_a0_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_a0_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_a0_adv, byte_range_9a_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp70);
                  byte_a1 = simd_and(r1000_1fff_tmp61, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  byte_range_b8_bf = r1000_1fff_tmp52;
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(59), sequence_e1_a1_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_a1_adv, byte_range_b8_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp71);
                  r1000_1fff_tmp72 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp72);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp73 = simd_or(basis_bits.bit_5, tmp7);
                  byte_range_ab_af = simd_and(r1000_1fff_tmp66, r1000_1fff_tmp73);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(60), sequence_e1_a2_adv));
                  r1000_1fff_tmp74 = simd_and(sequence_e1_a2_adv, byte_range_ab_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp74);
                  byte_a3 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp3);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp75 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp76 = simd_or(basis_bits.bit_4, r1000_1fff_tmp75);
                  byte_range_b6_bf = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp76);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(61), sequence_e1_a3_adv));
                  r1000_1fff_tmp77 = simd_and(sequence_e1_a3_adv, byte_range_b6_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp77);
                  byte_a4 = simd_and(r1000_1fff_tmp61, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(62), sequence_e1_a4_adv));
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a4_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp78);
                  byte_range_ac_af = simd_and(r1000_1fff_tmp61, tmp6);
                  r1000_1fff_tmp79 = simd_and(sequence_e1_a4_adv, byte_range_ac_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp79);
                  byte_range_bc_bf = r1000_1fff_tmp43;
                  r1000_1fff_tmp80 = simd_and(sequence_e1_a4_adv, byte_range_bc_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp81);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r1000_1fff_tmp82, r800_ffff_tmp3);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(63), sequence_e1_a5_adv));
                  r1000_1fff_tmp83 = simd_and(sequence_e1_a5_adv, byte_range_81_83);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp83);
                  byte_range_ae_af = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp11);
                  r1000_1fff_tmp84 = simd_and(sequence_e1_a5_adv, byte_range_ae_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(sequence_e1_a5_adv, byte_range_b5_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp85);
                  byte_a6 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp6);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(64), sequence_e1_a6_adv));
                  r1000_1fff_tmp86 = simd_and(sequence_e1_a6_adv, byte_range_ac_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp86);
                  byte_a7 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp19);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_8a_8f = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp46);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(65), sequence_e1_a7_adv));
                  r1000_1fff_tmp87 = simd_and(sequence_e1_a7_adv, byte_range_8a_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp89 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp88), simd_andc(tmp7, basis_bits.bit_5));
                  byte_range_9b_9d = simd_and(r1000_1fff_tmp39, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_a7_adv, byte_range_9b_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_andc(r1000_1fff_tmp13, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp91);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp92 = simd_andc(tmp6, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp92);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(66), sequence_e1_a8_adv));
                  r1000_1fff_tmp93 = simd_and(sequence_e1_a8_adv, byte_range_9c_9d);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp93);
                  byte_a9 = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp14);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(67), sequence_e1_a9_adv));
                  r1000_1fff_tmp94 = simd_and(sequence_e1_a9_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(byte_range_bc_bf, r1000_1fff_tmp95);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_a9_adv, byte_range_bd_be);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp96);
                  byte_aa = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp23);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(68), sequence_e1_aa_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_aa_adv, byte_range_8a_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_and(sequence_e1_aa_adv, byte_range_9a_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp98);
                  r1000_1fff_tmp99 = simd_and(sequence_e1_aa_adv, byte_range_ae_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_aa_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp100);
                  byte_ab = simd_and(r1000_1fff_tmp61, r1000_1fff_tmp31);
                  sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(69), sequence_e1_ab_adv));
                  r1000_1fff_tmp101 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp103 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_range_8c_8f = simd_and(r1000_1fff_tmp103, tmp6);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(70), sequence_e1_ad_adv));
                  r1000_1fff_tmp104 = simd_and(sequence_e1_ad_adv, byte_range_8c_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_and(byte_range_80_bf, tmp4);
                  r1000_1fff_tmp106 = simd_and(r1000_1fff_tmp105, tmp6);
                  r1000_1fff_tmp107 = simd_and(sequence_e1_ad_adv, byte_range_bd_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp107);
                  byte_af = simd_and(r1000_1fff_tmp102, tmp8);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp108 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b4_bb = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp108);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(71), sequence_e1_af_adv));
                  r1000_1fff_tmp109 = simd_and(sequence_e1_af_adv, byte_range_b4_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp109);
                  byte_b0 = simd_andc(r1000_1fff_tmp105, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp110 = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp13);
                  byte_range_b8_ba = simd_andc(r1000_1fff_tmp110, tmp7);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(72), sequence_e1_b0_adv));
                  r1000_1fff_tmp111 = simd_and(sequence_e1_b0_adv, byte_range_b8_ba);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp111);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp112 = simd_and(r1000_1fff_tmp103, basis_bits.bit_4);
                  r1000_1fff_tmp113 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp40), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_8a_8c = simd_and(r1000_1fff_tmp112, r1000_1fff_tmp113);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(73), sequence_e1_b1_adv));
                  r1000_1fff_tmp114 = simd_and(sequence_e1_b1_adv, byte_range_8a_8c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp114);
                  byte_b2 = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp72);
                  sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(74), sequence_e1_b2_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp115);
                  byte_b3 = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp3);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_88_8f = r1000_1fff_tmp112;
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(75), sequence_e1_b3_adv));
                  r1000_1fff_tmp116 = simd_and(sequence_e1_b3_adv, byte_range_88_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp116);
                  byte_b7 = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp19);
                  r1000_1fff_tmp117 = simd_and(sequence_e1_b3_adv, byte_b7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp117);
                  r1000_1fff_tmp118 = simd_and(r1000_1fff_tmp105, basis_bits.bit_4);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_b3_adv, byte_range_ba_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp119);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp120 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp121 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp120), simd_andc(r1000_1fff_tmp75, basis_bits.bit_4));
                  byte_range_b6_bb = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp121);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(76), sequence_e1_b7_adv));
                  r1000_1fff_tmp122 = simd_and(sequence_e1_b7_adv, byte_range_b6_bb);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp122);
                  byte_bc = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp35);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp123 = simd_and(byte_range_80_bf, r1000_1fff_tmp17);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(77), sequence_e1_bc_adv));
                  r1000_1fff_tmp124 = simd_and(sequence_e1_bc_adv, byte_range_96_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_and(sequence_e1_bc_adv, byte_range_9e_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp125);
                  byte_bd = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp38);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(78), sequence_e1_bd_adv));
                  r1000_1fff_tmp126 = simd_and(sequence_e1_bd_adv, byte_range_86_87);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp126);
                  r1000_1fff_tmp127 = simd_and(sequence_e1_bd_adv, byte_range_8e_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp127);
                  byte_98 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp91);
                  r1000_1fff_tmp128 = simd_and(sequence_e1_bd_adv, byte_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_bd_adv, byte_9a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp129);
                  r1000_1fff_tmp130 = simd_and(sequence_e1_bd_adv, byte_9c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp130);
                  byte_9e = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp45);
                  r1000_1fff_tmp131 = simd_and(sequence_e1_bd_adv, byte_9e);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp131);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp11);
                  r1000_1fff_tmp132 = simd_and(sequence_e1_bd_adv, byte_range_be_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp132);
                  byte_be = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp45);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_b5 = simd_and(r1000_1fff_tmp105, r1000_1fff_tmp81);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(79), sequence_e1_be_adv));
                  r1000_1fff_tmp133 = simd_and(sequence_e1_be_adv, byte_b5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp133);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_85 = simd_and(r1000_1fff_tmp103, r1000_1fff_tmp81);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(80), sequence_e1_bf_adv));
                  r1000_1fff_tmp134 = simd_and(sequence_e1_bf_adv, byte_85);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp134);
                  r1000_1fff_tmp135 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_94_95 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp135);
                  r1000_1fff_tmp136 = simd_and(sequence_e1_bf_adv, byte_range_94_95);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp136);
                  r1000_1fff_tmp137 = simd_and(sequence_e1_bf_adv, byte_9c);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp137);
                  byte_range_b0_b1 = simd_andc(r1000_1fff_tmp105, r800_4dff_tmp1);
                  r1000_1fff_tmp138 = simd_and(sequence_e1_bf_adv, byte_range_b0_b1);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_and(sequence_e1_bf_adv, byte_b5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_bf_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r1000_1fff_tmp140);
                }
                else {
                  carryQ.CarryDequeueEnqueue(44, 37);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 67);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(81, 32))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(81, 23))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(81), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp6 = simd_or(basis_bits.bit_5, tmp7);
                  byte_range_8b_8f = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(82), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_8b_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp10 = simd_not(tmp7);
                  r2000_2fff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp10), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_aa_ae = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(sequence_e2_80_adv, byte_range_aa_ae);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp14 = simd_andc(r2000_2fff_tmp13, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  byte_range_a0_af = r2000_2fff_tmp8;
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(83), sequence_e2_81_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_81_adv, byte_range_a0_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp5, tmp4);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp16, r800_4dff_tmp2);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_81_adv, byte_range_b2_b3);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp17);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_8f = simd_and(r2000_2fff_tmp2, tmp8);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(84), sequence_e2_82_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_82_adv, byte_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp20, tmp6);
                  byte_range_9d_9f = simd_and(r2000_2fff_tmp21, r800_ffff_tmp3);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_82_adv, byte_range_9d_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(tmp6, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_82_adv, byte_range_be_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_andc(tmp7, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp25);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(85), sequence_e2_83_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_83_adv, byte_range_80_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp28 = simd_or(basis_bits.bit_4, r2000_2fff_tmp27);
                  byte_range_b1_bf = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_83_adv, byte_range_b1_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(byte_range_80_8f, r2000_2fff_tmp30);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp31 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r2000_2fff_tmp32 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8f = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp32);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(86), sequence_e2_86_adv));
                  r2000_2fff_tmp33 = simd_and(sequence_e2_86_adv, byte_range_8a_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp33);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp16, basis_bits.bit_4);
                  byte_range_bb_bf = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp6);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(87), sequence_e2_8f_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_8f_adv, byte_range_bb_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp35);
                  byte_90 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp3);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp36 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp37 = simd_and(basis_bits.bit_5, tmp7);
                  r2000_2fff_tmp38 = simd_or(basis_bits.bit_4, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(basis_bits.bit_3, r2000_2fff_tmp38);
                  byte_range_a7_bf = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp39);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(88), sequence_e2_90_adv));
                  r2000_2fff_tmp40 = simd_and(sequence_e2_90_adv, byte_range_a7_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp40);
                  byte_91 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp14);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  r2000_2fff_tmp41 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp42 = simd_and(basis_bits.bit_4, r2000_2fff_tmp6);
                  r2000_2fff_tmp43 = simd_or(basis_bits.bit_3, r2000_2fff_tmp42);
                  byte_range_8b_9f = simd_and(r2000_2fff_tmp41, r2000_2fff_tmp43);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(89), sequence_e2_91_adv));
                  r2000_2fff_tmp44 = simd_and(sequence_e2_91_adv, byte_range_8b_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(tmp6, r2000_2fff_tmp13);
                  byte_ad = simd_and(byte_range_a0_af, r2000_2fff_tmp45);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp46 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp46);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(90), sequence_e2_ad_adv));
                  r2000_2fff_tmp47 = simd_and(sequence_e2_ad_adv, byte_range_b4_b5);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_and(tmp6, r2000_4dff_tmp1);
                  byte_ae = simd_and(byte_range_a0_af, r2000_2fff_tmp48);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp49 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp49);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(91), sequence_e2_ae_adv));
                  r2000_2fff_tmp50 = simd_and(sequence_e2_ae_adv, byte_range_96_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp52 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp51), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp52);
                  r2000_2fff_tmp53 = simd_and(sequence_e2_ae_adv, byte_range_ba_bc);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp53);
                  byte_af = simd_and(byte_range_a0_af, tmp8);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp54 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp54, r2000_2fff_tmp13);
                  byte_89 = simd_and(byte_range_80_8f, r2000_2fff_tmp55);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(92), sequence_e2_af_adv));
                  r2000_2fff_tmp56 = simd_and(sequence_e2_af_adv, byte_89);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp56);
                  r2000_2fff_tmp57 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r2000_2fff_tmp58 = simd_or(basis_bits.bit_2, r2000_2fff_tmp57);
                  byte_range_92_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp58);
                  r2000_2fff_tmp59 = simd_and(sequence_e2_af_adv, byte_range_92_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp59);
                  byte_b0 = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp3);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(93), sequence_e2_b0_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b0_adv, byte_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp60);
                  byte_b1 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp14);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  byte_9f = simd_and(r2000_2fff_tmp20, tmp8);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(94), sequence_e2_b1_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_b1_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp61);
                  byte_b3 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp25);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp62 = simd_not(r2000_2fff_tmp27);
                  r2000_2fff_tmp63 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp62), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b8 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp63);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(95), sequence_e2_b3_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b3_adv, byte_range_b4_b8);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp64);
                  byte_b4 = simd_and(r2000_2fff_tmp16, r800_ffff_tmp4);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  byte_a6 = simd_and(byte_range_a0_af, r2000_2fff_tmp30);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(96), sequence_e2_b4_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_b4_adv, byte_a6);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp65);
                  r2000_2fff_tmp66 = simd_and(byte_range_a0_af, basis_bits.bit_4);
                  r2000_2fff_tmp67 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_a8_ac = simd_andc(r2000_2fff_tmp66, r2000_2fff_tmp67);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b4_adv, byte_range_a8_ac);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp68);
                  byte_range_ae_af = simd_and(byte_range_a0_af, r2000_2fff_tmp23);
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b4_adv, byte_range_ae_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp13);
                  byte_b5 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp70);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp66, r2000_2fff_tmp37);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(97), sequence_e2_b5_adv));
                  r2000_2fff_tmp71 = simd_and(sequence_e2_b5_adv, byte_range_a8_ae);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp71);
                  r2000_2fff_tmp72 = simd_not(r2000_2fff_tmp37);
                  r2000_2fff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp72), simd_andc(r2000_2fff_tmp27, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp73);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_b5_adv, byte_range_b1_be);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp74);
                  byte_b6 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp30);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  byte_range_97_9f = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp38);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(98), sequence_e2_b6_adv));
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b6_adv, byte_range_97_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp75);
                  r2000_2fff_tmp76 = simd_and(r800_ffff_tmp2, tmp7);
                  byte_a7 = simd_and(byte_range_a0_af, r2000_2fff_tmp76);
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b6_adv, byte_a7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp77);
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b6_adv, byte_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp78);
                  byte_b7 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp76);
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b6_adv, byte_b7);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp79);
                  byte_bf = simd_and(r2000_2fff_tmp16, tmp8);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b6_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp80);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_87 = simd_and(byte_range_80_8f, r2000_2fff_tmp76);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(99), sequence_e2_b7_adv));
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b7_adv, byte_87);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b7_adv, byte_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp82);
                  byte_97 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp76);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b7_adv, byte_97);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp83);
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b7_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp84);
                  byte_b9 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp55);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  r2000_2fff_tmp85 = simd_or(r800_ffff_tmp1, tmp7);
                  r2000_2fff_tmp86 = simd_or(basis_bits.bit_3, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_or(basis_bits.bit_2, r2000_2fff_tmp86);
                  byte_range_83_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp87);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(100), sequence_e2_b9_adv));
                  r2000_2fff_tmp88 = simd_and(sequence_e2_b9_adv, byte_range_83_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp88);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp54, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp89);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  byte_9a = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp89);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(101), sequence_e2_ba_adv));
                  r2000_2fff_tmp90 = simd_and(sequence_e2_ba_adv, byte_9a);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp90);
                  r2000_2fff_tmp91 = simd_and(r2000_2fff_tmp54, tmp7);
                  byte_bb = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp91);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  byte_range_b4_bf = simd_and(r2000_2fff_tmp16, r800_ffff_tmp1);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(102), sequence_e2_bb_adv));
                  r2000_2fff_tmp92 = simd_and(sequence_e2_bb_adv, byte_range_b4_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp92);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  r2000_2fff_tmp93 = simd_not(basis_bits.bit_3);
                  r2000_2fff_tmp94 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp95 = simd_or(basis_bits.bit_4, r2000_2fff_tmp94);
                  r2000_2fff_tmp96 = simd_and(basis_bits.bit_3, r2000_2fff_tmp95);
                  r2000_2fff_tmp97 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp93), simd_andc(r2000_2fff_tmp96, basis_bits.bit_2));
                  byte_range_96_af = simd_and(r800_ffff_tmp5, r2000_2fff_tmp97);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(103), sequence_e2_bf_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_bf_adv, byte_range_96_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp98);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp16, tmp6);
                  r2000_2fff_tmp99 = simd_and(sequence_e2_bf_adv, byte_range_bc_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r2000_2fff_tmp99);
                }
                else {
                  carryQ.CarryDequeueEnqueue(81, 23);
                }
                r2000_4dff_tmp3 = simd_andc(tmp7, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(104, 9))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(104), r3000_4dff_tmp5));
                  sequence_e3_81 = simd_and(r3000_4dff_tmp5, byte_81);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(105), sequence_e3_81_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_81_adv, byte_80);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp7);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp11 = simd_not(r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_and(basis_bits.bit_5, tmp7);
                  r3000_4dff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp11), simd_andc(r3000_4dff_tmp12, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp13);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(106), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_97_98);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp14);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp2, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r3000_4dff_tmp15, r3000_4dff_tmp16);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(107), sequence_e3_84_adv));
                  r3000_4dff_tmp17 = simd_and(sequence_e3_84_adv, byte_range_80_84);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp17);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp19 = simd_not(r3000_4dff_tmp6);
                  r3000_4dff_tmp20 = simd_and(tmp6, basis_bits.bit_6);
                  r3000_4dff_tmp21 = simd_or(simd_and(basis_bits.bit_3, r3000_4dff_tmp19), simd_andc(r3000_4dff_tmp20, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_and(sequence_e3_84_adv, byte_range_ae_b0);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp23);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  byte_8f = simd_and(r3000_4dff_tmp2, tmp8);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(108), sequence_e3_86_adv));
                  r3000_4dff_tmp24 = simd_and(sequence_e3_86_adv, byte_8f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp24);
                  r3000_4dff_tmp25 = simd_and(r800_ffff_tmp5, tmp4);
                  r3000_4dff_tmp26 = simd_and(r3000_4dff_tmp25, basis_bits.bit_4);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_5, tmp7);
                  byte_range_bb_bf = simd_and(r3000_4dff_tmp26, r3000_4dff_tmp27);
                  r3000_4dff_tmp28 = simd_and(sequence_e3_86_adv, byte_range_bb_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp28);
                  r3000_4dff_tmp29 = simd_and(r800_ffff_tmp2, tmp7);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp29);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp30 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a4_af = simd_and(r3000_4dff_tmp30, r800_ffff_tmp1);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(109), sequence_e3_87_adv));
                  r3000_4dff_tmp31 = simd_and(sequence_e3_87_adv, byte_range_a4_af);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp31);
                  r3000_4dff_tmp32 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp33 = simd_andc(r3000_4dff_tmp32, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp33);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  byte_9f = simd_and(r3000_4dff_tmp9, tmp8);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(110), sequence_e3_88_adv));
                  r3000_4dff_tmp34 = simd_and(sequence_e3_88_adv, byte_9f);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp34);
                  r3000_4dff_tmp35 = simd_and(r3000_4dff_tmp32, tmp7);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp35);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  byte_bf = simd_and(r3000_4dff_tmp25, tmp8);
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(111), sequence_e3_8b_adv));
                  r3000_4dff_tmp36 = simd_and(sequence_e3_8b_adv, byte_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp36);
                  byte_b6 = simd_and(r3000_4dff_tmp25, r3000_4dff_tmp23);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp8, byte_b6);
                  byte_e4_adv = r800_ffff_tmp8;
                  r3000_4dff_tmp37 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp38 = simd_or(basis_bits.bit_4, r3000_4dff_tmp37);
                  byte_range_b6_bf = simd_and(r3000_4dff_tmp25, r3000_4dff_tmp38);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(112), sequence_e4_b6_adv));
                  r3000_4dff_tmp39 = simd_and(sequence_e4_b6_adv, byte_range_b6_bf);
                  struct_gc_C.cc = simd_or(struct_gc_C.cc, r3000_4dff_tmp39);
                }
                else {
                  carryQ.CarryDequeueEnqueue(104, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(81, 32);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 99);
            }
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp5, tmp4);
            byte_range_b8_bf = simd_and(r800_ffff_tmp11, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp13 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp14 = simd_not(r800_ffff_tmp13);
            r800_ffff_tmp15 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp16 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp14), simd_andc(r800_ffff_tmp15, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp16);
            r800_ffff_tmp17 = simd_or(r800_ffff_tmp12, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp17) || carryQ.CarryTest(113, 2))) {
              r4e00_9fff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp3 = simd_and(r4e00_9fff_tmp1, r4e00_9fff_tmp2);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp3);
              byte_bf = simd_and(r800_ffff_tmp11, tmp8);
              carryQ.cq[113] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(113), r4e00_9fff_tmp4));
              sequence_e9_bf = simd_and(r4e00_9fff_tmp4, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp4;
              r4e00_9fff_tmp5 = simd_and(tmp6, r800_ffff_tmp3);
              r4e00_9fff_tmp6 = simd_or(basis_bits.bit_3, r4e00_9fff_tmp5);
              r4e00_9fff_tmp7 = simd_or(basis_bits.bit_2, r4e00_9fff_tmp6);
              byte_range_8d_bf = simd_and(r800_ffff_tmp5, r4e00_9fff_tmp7);
              carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(114), sequence_e9_bf_adv));
              r4e00_9fff_tmp8 = simd_and(sequence_e9_bf_adv, byte_range_8d_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, r4e00_9fff_tmp8);
            }
            else {
              carryQ.CarryDequeueEnqueue(113, 2);
            }
            r800_ffff_tmp18 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp18, r800_ffff_tmp13);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(115, 42))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(115), ra000_ffff_tmp7));
              sequence_ea_92 = simd_and(ra000_ffff_tmp7, byte_92);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp9 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, tmp6);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp10, r800_ffff_tmp3);
              carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(116), sequence_ea_92_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_92_adv, byte_range_8d_8f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(tmp7, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp12);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_5, tmp7);
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_4, ra000_ffff_tmp13);
              byte_range_87_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp14);
              carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(117), sequence_ea_93_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_93_adv, byte_range_87_8f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp16);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp18 = simd_or(basis_bits.bit_3, tmp6);
              byte_range_ac_bf = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp18);
              carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(118), sequence_ea_98_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_98_adv, byte_range_ac_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp19);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp20 = simd_and(tmp6, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp20);
              carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(119), sequence_ea_9a_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_9a_adv, byte_9e);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp1, tmp7);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(120), sequence_ea_9b_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9b_adv, byte_range_b8_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp23);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              byte_8f = simd_and(ra000_ffff_tmp9, tmp8);
              carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(121), sequence_ea_9e_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_9e_adv, byte_8f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp26 = simd_and(tmp6, basis_bits.bit_6);
              byte_range_ae_af = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(sequence_ea_9e_adv, byte_range_ae_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_or(basis_bits.bit_4, r800_ffff_tmp13);
              byte_range_b2_bf = simd_and(r800_ffff_tmp11, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(sequence_ea_9e_adv, byte_range_b2_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp29);
              byte_9f = simd_and(ra000_ffff_tmp5, tmp8);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_3, ra000_ffff_tmp14);
              ra000_ffff_tmp31 = simd_and(basis_bits.bit_2, ra000_ffff_tmp30);
              byte_range_80_b6 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp31);
              carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(122), sequence_ea_9f_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ea_9f_adv, byte_range_80_b6);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp25, ra000_ffff_tmp33);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_ac_af = simd_and(ra000_ffff_tmp25, tmp6);
              carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(123), sequence_ea_a0_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ea_a0_adv, byte_range_ac_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp34);
              byte_range_ba_bf = simd_and(byte_range_b8_bf, r800_ffff_tmp13);
              ra000_ffff_tmp35 = simd_and(sequence_ea_a0_adv, byte_range_ba_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp37 = simd_andc(ra000_ffff_tmp36, r800_ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp37);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(124), sequence_ea_a1_adv));
              ra000_ffff_tmp38 = simd_and(sequence_ea_a1_adv, byte_range_b8_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp38);
              byte_a3 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp12);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp40 = simd_not(ra000_ffff_tmp39);
              ra000_ffff_tmp41 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp40), simd_andc(r800_ffff_tmp15, basis_bits.bit_4));
              byte_range_85_8d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp41);
              carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(125), sequence_ea_a3_adv));
              ra000_ffff_tmp42 = simd_and(sequence_ea_a3_adv, byte_range_85_8d);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp42);
              ra000_ffff_tmp43 = simd_and(ra000_ffff_tmp5, basis_bits.bit_4);
              byte_range_9a_9f = simd_and(ra000_ffff_tmp43, r800_ffff_tmp13);
              ra000_ffff_tmp44 = simd_and(sequence_ea_a3_adv, byte_range_9a_9f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp44);
              byte_range_bc_bf = simd_and(r800_ffff_tmp11, tmp6);
              ra000_ffff_tmp45 = simd_and(sequence_ea_a3_adv, byte_range_bc_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp36);
              byte_a5 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp46);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp47 = simd_not(ra000_ffff_tmp13);
              ra000_ffff_tmp48 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp47), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_94_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp48);
              carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(126), sequence_ea_a5_adv));
              ra000_ffff_tmp49 = simd_and(sequence_ea_a5_adv, byte_range_94_9e);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp49);
              byte_range_bd_bf = simd_and(byte_range_bc_bf, r800_ffff_tmp3);
              ra000_ffff_tmp50 = simd_and(sequence_ea_a5_adv, byte_range_bd_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(r800_ffff_tmp2, tmp7);
              byte_a7 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp51);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp20);
              carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(127), sequence_ea_a7_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ea_a7_adv, byte_8e);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_9a_9d = simd_and(ra000_ffff_tmp43, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ea_a7_adv, byte_range_9a_9d);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp54);
              byte_bf = simd_and(r800_ffff_tmp11, tmp8);
              ra000_ffff_tmp55 = simd_and(sequence_ea_a7_adv, byte_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp55);
              byte_a8 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp16);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              byte_range_b7_bf = simd_and(r800_ffff_tmp11, ra000_ffff_tmp14);
              carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(128), sequence_ea_a8_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ea_a8_adv, byte_range_b7_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp36);
              byte_a9 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp57);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp26);
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(129), sequence_ea_a9_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_a9_adv, byte_range_8e_8f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_9a_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(sequence_ea_a9_adv, byte_range_9a_9b);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp60);
              byte_ab = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp22);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp61 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_5, tmp7);
              ra000_ffff_tmp63 = simd_and(basis_bits.bit_4, ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_not(ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_or(r800_ffff_tmp1, tmp7);
              ra000_ffff_tmp66 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp64), simd_andc(ra000_ffff_tmp65, basis_bits.bit_3));
              byte_range_83_9a = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp66);
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(130), sequence_ea_ab_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ea_ab_adv, byte_range_83_9a);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_and(sequence_ea_ab_adv, byte_range_b7_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp68);
              ra000_ffff_tmp69 = simd_andc(tmp6, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp69);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_80 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp33);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(131), sequence_ea_ac_adv));
              ra000_ffff_tmp70 = simd_and(sequence_ea_ac_adv, byte_80);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp72 = simd_not(ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp72), simd_andc(ra000_ffff_tmp13, basis_bits.bit_4));
              byte_range_87_88 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp73);
              ra000_ffff_tmp74 = simd_and(sequence_ea_ac_adv, byte_range_87_88);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp74);
              ra000_ffff_tmp75 = simd_not(ra000_ffff_tmp33);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp75), simd_andc(tmp8, basis_bits.bit_3));
              byte_range_8f_90 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp76);
              ra000_ffff_tmp77 = simd_and(sequence_ea_ac_adv, byte_range_8f_90);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp77);
              byte_range_97_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              ra000_ffff_tmp78 = simd_and(sequence_ea_ac_adv, byte_range_97_9f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp78);
              ra000_ffff_tmp79 = simd_and(sequence_ea_ac_adv, byte_a7);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp79);
              byte_af = simd_and(ra000_ffff_tmp25, tmp8);
              ra000_ffff_tmp80 = simd_and(sequence_ea_ac_adv, byte_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp80);
              ra000_ffff_tmp81 = simd_and(tmp6, ra000_ffff_tmp36);
              byte_ad = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp81);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_a0_a3 = simd_andc(ra000_ffff_tmp25, r800_ffff_tmp1);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(132), sequence_ea_ad_adv));
              ra000_ffff_tmp82 = simd_and(sequence_ea_ad_adv, byte_range_a0_a3);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp82);
              ra000_ffff_tmp83 = simd_or(basis_bits.bit_4, ra000_ffff_tmp39);
              ra000_ffff_tmp84 = simd_or(basis_bits.bit_3, ra000_ffff_tmp83);
              byte_range_a6_bf = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp84);
              ra000_ffff_tmp85 = simd_and(sequence_ea_ad_adv, byte_range_a6_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp85);
              byte_ae = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp20);
              sequence_ea_ae = simd_and(byte_ea_adv, byte_ae);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_ea_ae, carryQ.get_carry_in(133), sequence_ea_ae_adv));
              ra000_ffff_tmp86 = simd_and(sequence_ea_ae_adv, byte_range_80_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp86);
              ra000_ffff_tmp87 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(134), sequence_ea_af_adv));
              ra000_ffff_tmp88 = simd_and(sequence_ea_af_adv, byte_range_ae_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp88);
              ra000_ffff_tmp89 = simd_and(byte_range_80_bf, tmp4);
              ra000_ffff_tmp90 = simd_and(ra000_ffff_tmp89, basis_bits.bit_4);
              ra000_ffff_tmp91 = simd_and(sequence_ea_af_adv, byte_range_ba_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp91);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp81);
              ra000_ffff_tmp92 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(135), ra000_ffff_tmp93));
              sequence_ed_9e = simd_and(ra000_ffff_tmp93, byte_9e);
              byte_ed_adv = ra000_ffff_tmp93;
              byte_range_a4_af = simd_and(ra000_ffff_tmp87, r800_ffff_tmp1);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(136), sequence_ed_9e_adv));
              ra000_ffff_tmp94 = simd_and(sequence_ed_9e_adv, byte_range_a4_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp94);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              ra000_ffff_tmp95 = simd_andc(byte_range_80_bf, ra000_ffff_tmp8);
              ra000_ffff_tmp96 = simd_not(ra000_ffff_tmp62);
              ra000_ffff_tmp97 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp96), simd_andc(ra000_ffff_tmp13, basis_bits.bit_4));
              byte_range_87_8a = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp97);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(137), sequence_ed_9f_adv));
              ra000_ffff_tmp98 = simd_and(sequence_ed_9f_adv, byte_range_87_8a);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp98);
              ra000_ffff_tmp99 = simd_and(sequence_ed_9f_adv, byte_range_bc_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp99);
              byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_ed_byte_range_a0_bf = simd_and(byte_ed_adv, byte_range_a0_bf);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_a0_bf, carryQ.get_carry_in(138), ra000_ffff_tmp100));
              byte_ed_byte_range_a0_bf_sfx = simd_and(ra000_ffff_tmp100, byte_range_80_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_ed_byte_range_a0_bf_sfx);
              byte_ee = simd_and(byte_range_e0_ef, ra000_ffff_tmp20);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(139), ra000_ffff_tmp101));
              byte_ee_byte_range_80_bf = simd_and(ra000_ffff_tmp101, byte_range_80_bf);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(140), ra000_ffff_tmp102));
              byte_ee_byte_range_80_bf_sfx = simd_and(ra000_ffff_tmp102, byte_range_80_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_ee_byte_range_80_bf_sfx);
              byte_ef = simd_and(byte_range_e0_ef, tmp8);
              ra000_ffff_tmp103 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp104 = simd_and(basis_bits.bit_2, ra000_ffff_tmp103);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp104);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(141), ra000_ffff_tmp105));
              byte_ef_byte_range_80_a3 = simd_and(ra000_ffff_tmp105, byte_range_80_a3);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(142), ra000_ffff_tmp106));
              byte_ef_byte_range_80_a3_sfx = simd_and(ra000_ffff_tmp106, byte_range_80_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_ef_byte_range_80_a3_sfx);
              sequence_ef_a9 = simd_and(ra000_ffff_tmp105, byte_a9);
              byte_ef_adv = ra000_ffff_tmp105;
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(143), sequence_ef_a9_adv));
              ra000_ffff_tmp107 = simd_and(sequence_ef_a9_adv, byte_range_ae_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp107);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp108 = simd_and(basis_bits.bit_4, r800_ffff_tmp13);
              ra000_ffff_tmp109 = simd_and(basis_bits.bit_3, ra000_ffff_tmp108);
              ra000_ffff_tmp110 = simd_or(basis_bits.bit_2, ra000_ffff_tmp109);
              byte_range_9a_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp110);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(144), sequence_ef_ab_adv));
              ra000_ffff_tmp111 = simd_and(sequence_ef_ab_adv, byte_range_9a_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp111);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              ra000_ffff_tmp112 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp113 = simd_not(ra000_ffff_tmp65);
              ra000_ffff_tmp114 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp113), simd_andc(ra000_ffff_tmp14, basis_bits.bit_3));
              byte_range_87_92 = simd_and(ra000_ffff_tmp112, ra000_ffff_tmp114);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(145), sequence_ef_ac_adv));
              ra000_ffff_tmp115 = simd_and(sequence_ef_ac_adv, byte_range_87_92);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp115);
              ra000_ffff_tmp116 = simd_and(ra000_ffff_tmp92, basis_bits.bit_4);
              byte_range_98_9c = simd_andc(ra000_ffff_tmp116, r800_ffff_tmp15);
              ra000_ffff_tmp117 = simd_and(sequence_ef_ac_adv, byte_range_98_9c);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp117);
              byte_b7 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp51);
              ra000_ffff_tmp118 = simd_and(sequence_ef_ac_adv, byte_b7);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp118);
              byte_bd = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp81);
              ra000_ffff_tmp119 = simd_and(sequence_ef_ac_adv, byte_bd);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(sequence_ef_ac_adv, byte_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp120);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              byte_82 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp6);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(146), sequence_ef_ad_adv));
              ra000_ffff_tmp121 = simd_and(sequence_ef_ad_adv, byte_82);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp121);
              byte_85 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp46);
              ra000_ffff_tmp122 = simd_and(sequence_ef_ad_adv, byte_85);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp122);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp123 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp124 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp113), simd_andc(ra000_ffff_tmp123, basis_bits.bit_3));
              byte_range_82_92 = simd_and(ra000_ffff_tmp112, ra000_ffff_tmp124);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(147), sequence_ef_af_adv));
              ra000_ffff_tmp125 = simd_and(sequence_ef_af_adv, byte_range_82_92);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp125);
              byte_b5 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp46);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_80_8f = ra000_ffff_tmp95;
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(148), sequence_ef_b5_adv));
              ra000_ffff_tmp126 = simd_and(sequence_ef_b5_adv, byte_range_80_8f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp126);
              ra000_ffff_tmp127 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_b6 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp127);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_90_91 = simd_andc(ra000_ffff_tmp92, ra000_ffff_tmp123);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(149), sequence_ef_b6_adv));
              ra000_ffff_tmp128 = simd_and(sequence_ef_b6_adv, byte_range_90_91);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp128);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              ra000_ffff_tmp129 = simd_not(basis_bits.bit_3);
              ra000_ffff_tmp130 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp131 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp129), simd_andc(ra000_ffff_tmp130, basis_bits.bit_2));
              byte_range_88_af = simd_and(byte_range_80_bf, ra000_ffff_tmp131);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(150), sequence_ef_b7_adv));
              ra000_ffff_tmp132 = simd_and(sequence_ef_b7_adv, byte_range_88_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp132);
              byte_range_be_bf = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp26);
              ra000_ffff_tmp133 = simd_and(sequence_ef_b7_adv, byte_range_be_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp133);
              byte_b8 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp16);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(151), sequence_ef_b8_adv));
              ra000_ffff_tmp134 = simd_and(sequence_ef_b8_adv, byte_range_9a_9f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp134);
              ra000_ffff_tmp135 = simd_and(sequence_ef_b8_adv, byte_range_ae_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp135);
              byte_b9 = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp57);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(152), sequence_ef_b9_adv));
              ra000_ffff_tmp136 = simd_and(sequence_ef_b9_adv, byte_93);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp136);
              ra000_ffff_tmp137 = simd_and(sequence_ef_b9_adv, byte_a7);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp137);
              ra000_ffff_tmp138 = simd_and(sequence_ef_b9_adv, byte_range_ac_af);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp138);
              ra000_ffff_tmp139 = simd_and(sequence_ef_b9_adv, byte_b5);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp139);
              byte_bb = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp22);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp140 = simd_and(ra000_ffff_tmp89, tmp6);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(153), sequence_ef_bb_adv));
              ra000_ffff_tmp141 = simd_and(sequence_ef_bb_adv, byte_range_bd_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp141);
              byte_bc = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp69);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(154), sequence_ef_bc_adv));
              ra000_ffff_tmp142 = simd_and(sequence_ef_bc_adv, byte_80);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp142);
              byte_be = simd_and(ra000_ffff_tmp89, ra000_ffff_tmp20);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(155), sequence_ef_be_adv));
              ra000_ffff_tmp143 = simd_and(sequence_ef_be_adv, byte_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp143);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_80_81 = simd_andc(byte_range_80_8f, ra000_ffff_tmp123);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(156), sequence_ef_bf_adv));
              ra000_ffff_tmp144 = simd_and(sequence_ef_bf_adv, byte_range_80_81);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp144);
              ra000_ffff_tmp145 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_88_89 = simd_and(byte_range_80_8f, ra000_ffff_tmp145);
              ra000_ffff_tmp146 = simd_and(sequence_ef_bf_adv, byte_range_88_89);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp146);
              ra000_ffff_tmp147 = simd_and(sequence_ef_bf_adv, byte_range_90_91);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp147);
              byte_range_98_99 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp145);
              ra000_ffff_tmp148 = simd_and(sequence_ef_bf_adv, byte_range_98_99);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp148);
              ra000_ffff_tmp149 = simd_and(ra000_ffff_tmp92, tmp6);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp149, r800_ffff_tmp3);
              ra000_ffff_tmp150 = simd_and(sequence_ef_bf_adv, byte_range_9d_9f);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp150);
              ra000_ffff_tmp151 = simd_and(sequence_ef_bf_adv, byte_a7);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp151);
              ra000_ffff_tmp152 = simd_not(tmp6);
              ra000_ffff_tmp153 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp152), simd_andc(tmp8, basis_bits.bit_3));
              byte_range_af_bb = simd_and(byte_range_a0_bf, ra000_ffff_tmp153);
              ra000_ffff_tmp154 = simd_and(sequence_ef_bf_adv, byte_range_af_bb);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp154);
              ra000_ffff_tmp155 = simd_and(sequence_ef_bf_adv, byte_range_be_bf);
              struct_gc_C.cc = simd_or(struct_gc_C.cc, ra000_ffff_tmp155);
            }
            else {
              carryQ.CarryDequeueEnqueue(115, 42);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(13, 144);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp4);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(157, 182))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[157] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(157), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(158), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(tmp6, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(159), sequence_f0_90_80_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_80_adv, byte_8c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp12);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp14, tmp7);
            byte_a7 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_80_adv, byte_a7);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp4, tmp4);
            r10000_10ffff_tmp18 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp18, tmp7);
            byte_bb = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_80_adv, byte_bb);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp22 = simd_and(tmp6, r10000_10ffff_tmp21);
            byte_be = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_80_adv, byte_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp25 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp25);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp26 = simd_and(tmp6, basis_bits.bit_6);
            byte_range_8e_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp26);
            carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(160), sequence_f0_90_81_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_81_adv, byte_range_8e_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp26);
            r10000_10ffff_tmp29 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp28);
            byte_range_9e_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_81_adv, byte_range_9e_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_andc(tmp7, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp31);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp17, basis_bits.bit_4);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_5, tmp7);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp33);
            carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(161), sequence_f0_90_83_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_90_83_adv, byte_range_bb_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp35);
            sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
            r10000_10ffff_tmp36 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp37 = simd_xor(basis_bits.bit_5, tmp7);
            byte_range_83_86 = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp37);
            carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(162), sequence_f0_90_84_adv));
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_84_adv, byte_range_83_86);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp14);
            byte_range_b4_b6 = simd_andc(r10000_10ffff_tmp39, tmp7);
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_84_adv, byte_range_b4_b6);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp21);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp41);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp9, tmp6);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp2);
            carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(163), sequence_f0_90_86_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_90_86_adv, byte_range_8d_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp43);
            byte_range_9c_9f = simd_and(r10000_10ffff_tmp6, tmp6);
            r10000_10ffff_tmp44 = simd_and(sequence_f0_90_86_adv, byte_range_9c_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp46 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp3);
            byte_range_a1_bf = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(sequence_f0_90_86_adv, byte_range_a1_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp47);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            byte_range_80_8f = r10000_10ffff_tmp9;
            carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(164), sequence_f0_90_87_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_90_87_adv, byte_range_80_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp48);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp26);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_87_adv, byte_range_be_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp18, basis_bits.bit_6);
            byte_range_88_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp50);
            sequence_f0_90_byte_range_88_89 = simd_and(sequence_f0_90_adv, byte_range_88_89);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(165), r10000_10ffff_tmp51));
            sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10ffff_tmp51, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_90_byte_range_88_89_sfx);
            r10000_10ffff_tmp52 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp53 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            byte_8a = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp54);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp52, tmp6);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp2);
            carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(166), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_90_8a_adv, byte_range_9d_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp56);
            byte_8b = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp19);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp57 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp58 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp57);
            byte_range_91_9f = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp58);
            carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(167), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_90_8b_adv, byte_range_91_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(byte_range_80_bf, tmp4);
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp60, tmp6);
            r10000_10ffff_tmp61 = simd_and(sequence_f0_90_8b_adv, byte_range_bc_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp61);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp62 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_range_a4_af = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp1);
            carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(168), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp63 = simd_and(sequence_f0_90_8c_adv, byte_range_a4_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_and(tmp6, r10000_10ffff_tmp24);
            byte_8d = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp64);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp65 = simd_and(r10000_10ffff_tmp53, basis_bits.bit_4);
            byte_range_8b_8f = simd_and(r10000_10ffff_tmp65, r10000_10ffff_tmp33);
            carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(169), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_90_8d_adv, byte_range_8b_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp60, basis_bits.bit_4);
            r10000_10ffff_tmp68 = simd_and(sequence_f0_90_8d_adv, byte_range_bb_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp68);
            byte_8e = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp22);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            byte_9e = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp22);
            carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(170), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_8e_adv, byte_9e);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp69);
            byte_8f = simd_and(r10000_10ffff_tmp53, tmp8);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_84_87 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp14);
            carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(171), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp70 = simd_and(sequence_f0_90_8f_adv, byte_range_84_87);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp70);
            r10000_10ffff_tmp71 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp72 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp71);
            r10000_10ffff_tmp73 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp72);
            r10000_10ffff_tmp74 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp73);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(sequence_f0_90_8f_adv, byte_range_96_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp75);
            r10000_10ffff_tmp76 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp76);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp26);
            carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(172), sequence_f0_90_92_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_90_92_adv, byte_range_9e_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp79 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp80 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp79);
            r10000_10ffff_tmp81 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp80);
            byte_range_aa_bf = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp81);
            r10000_10ffff_tmp82 = simd_and(sequence_f0_90_92_adv, byte_range_aa_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp82);
            byte_93 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp31);
            sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
            carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(173), sequence_f0_90_93_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_90_93_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp83);
            byte_94 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp35);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            byte_range_a8_af = simd_and(r10000_10ffff_tmp62, basis_bits.bit_4);
            carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(174), sequence_f0_90_94_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_90_94_adv, byte_range_a8_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp24);
            byte_95 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp85);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp86 = simd_and(basis_bits.bit_5, tmp7);
            r10000_10ffff_tmp87 = simd_not(r10000_10ffff_tmp86);
            r10000_10ffff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp87), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_ae = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp88);
            carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(175), sequence_f0_90_95_adv));
            r10000_10ffff_tmp89 = simd_and(sequence_f0_90_95_adv, byte_range_a4_ae);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp89);
            byte_range_b0_bf = r10000_10ffff_tmp60;
            r10000_10ffff_tmp90 = simd_and(sequence_f0_90_95_adv, byte_range_b0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp14, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp91);
            sequence_f0_90_byte_range_96_97 = simd_and(sequence_f0_90_adv, byte_range_96_97);
            carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_96_97, carryQ.get_carry_in(176), r10000_10ffff_tmp92));
            sequence_f0_90_byte_range_96_97_sfx = simd_and(r10000_10ffff_tmp92, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_90_byte_range_96_97_sfx);
            byte_9c = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp11);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp93 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp86);
            byte_range_b7_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp93);
            carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(177), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp94 = simd_and(sequence_f0_90_9c_adv, byte_range_b7_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp94);
            byte_9d = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp64);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_96_9f = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp72);
            carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(178), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp95 = simd_and(sequence_f0_90_9d_adv, byte_range_96_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp95);
            r10000_10ffff_tmp96 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp96);
            r10000_10ffff_tmp97 = simd_and(sequence_f0_90_9d_adv, byte_range_a8_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp97);
            sequence_f0_90_byte_range_9e_9f = simd_and(sequence_f0_90_adv, byte_range_9e_9f);
            carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_9e_9f, carryQ.get_carry_in(179), r10000_10ffff_tmp98));
            sequence_f0_90_byte_range_9e_9f_sfx = simd_and(r10000_10ffff_tmp98, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_90_byte_range_9e_9f_sfx);
            byte_a0 = simd_andc(r10000_10ffff_tmp62, r10000_10ffff_tmp3);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            byte_range_86_87 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp91);
            carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(180), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp99 = simd_and(sequence_f0_90_a0_adv, byte_range_86_87);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp24);
            byte_89 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp100);
            r10000_10ffff_tmp101 = simd_and(sequence_f0_90_a0_adv, byte_89);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp101);
            byte_b6 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp41);
            r10000_10ffff_tmp102 = simd_and(sequence_f0_90_a0_adv, byte_b6);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp18);
            byte_range_b9_bb = simd_and(r10000_10ffff_tmp103, r10000_10ffff_tmp2);
            r10000_10ffff_tmp104 = simd_and(sequence_f0_90_a0_adv, byte_range_b9_bb);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(byte_range_b0_bf, tmp6);
            r10000_10ffff_tmp106 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bd_be = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp106);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_90_a0_adv, byte_range_bd_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp107);
            byte_a1 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp25);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            byte_96 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp41);
            carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(181), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp108 = simd_and(sequence_f0_90_a1_adv, byte_96);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp108);
            byte_a2 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp76);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp109 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp93);
            r10000_10ffff_tmp110 = simd_not(r10000_10ffff_tmp109);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_3, tmp8);
            r10000_10ffff_tmp112 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp110), simd_andc(r10000_10ffff_tmp111, basis_bits.bit_2));
            byte_range_9f_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp112);
            carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(182), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp113 = simd_and(sequence_f0_90_a2_adv, byte_range_9f_a6);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp113);
            r10000_10ffff_tmp114 = simd_and(sequence_f0_90_a2_adv, byte_range_b0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp114);
            byte_a3 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp31);
            sequence_f0_90_a3 = simd_and(sequence_f0_90_adv, byte_a3);
            carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a3, carryQ.get_carry_in(183), sequence_f0_90_a3_adv));
            r10000_10ffff_tmp115 = simd_and(sequence_f0_90_a3_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp115);
            byte_a4 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp35);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            byte_range_9c_9e = simd_andc(r10000_10ffff_tmp55, tmp7);
            carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(184), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_90_a4_adv, byte_range_9c_9e);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp118 = simd_not(tmp7);
            r10000_10ffff_tmp119 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp118), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_ba_be = simd_and(r10000_10ffff_tmp117, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(sequence_f0_90_a4_adv, byte_range_ba_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp120);
            byte_a5 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp85);
            sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
            carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(185), sequence_f0_90_a5_adv));
            r10000_10ffff_tmp121 = simd_and(sequence_f0_90_a5_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp121);
            byte_a6 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp41);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            byte_range_b8_bd = simd_andc(r10000_10ffff_tmp117, r10000_10ffff_tmp71);
            carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(186), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp122 = simd_and(sequence_f0_90_a6_adv, byte_range_b8_bd);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp122);
            sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
            carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(187), sequence_f0_90_a7_adv));
            r10000_10ffff_tmp123 = simd_and(sequence_f0_90_a7_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_andc(r10000_10ffff_tmp18, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp124);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(188), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp125 = simd_and(sequence_f0_90_a8_adv, byte_84);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp127 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp126), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_4));
            byte_range_87_8b = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp127);
            r10000_10ffff_tmp128 = simd_and(sequence_f0_90_a8_adv, byte_range_87_8b);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp128);
            r10000_10ffff_tmp129 = simd_and(sequence_f0_90_a8_adv, byte_94);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp129);
            byte_98 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp124);
            r10000_10ffff_tmp130 = simd_and(sequence_f0_90_a8_adv, byte_98);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp130);
            byte_range_b4_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp14);
            r10000_10ffff_tmp131 = simd_and(sequence_f0_90_a8_adv, byte_range_b4_b7);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp131);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp117, r10000_10ffff_tmp37);
            r10000_10ffff_tmp132 = simd_and(sequence_f0_90_a8_adv, byte_range_bb_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp132);
            byte_a9 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp100);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_88_8f = r10000_10ffff_tmp65;
            carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(189), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_90_a9_adv, byte_range_88_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp133);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp52, basis_bits.bit_4);
            byte_range_99_9f = simd_and(r10000_10ffff_tmp134, r10000_10ffff_tmp57);
            r10000_10ffff_tmp135 = simd_and(sequence_f0_90_a9_adv, byte_range_99_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp135);
            byte_aa = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp54);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_a0_bf = r10000_10ffff_tmp78;
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(190), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_90_aa_adv, byte_range_a0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp136);
            byte_ab = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp19);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp137 = simd_not(r10000_10ffff_tmp33);
            r10000_10ffff_tmp138 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp137), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_4));
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp138);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(191), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp139 = simd_and(sequence_f0_90_ab_adv, byte_range_a7_aa);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_and(sequence_f0_90_ab_adv, byte_range_b7_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp140);
            byte_ac = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp11);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp141 = simd_not(r10000_10ffff_tmp57);
            r10000_10ffff_tmp142 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp141), simd_andc(r10000_10ffff_tmp71, basis_bits.bit_4));
            byte_range_b6_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp142);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(192), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp143 = simd_and(sequence_f0_90_ac_adv, byte_range_b6_b8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp143);
            byte_ad = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp64);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(193), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_90_ad_adv, byte_range_96_97);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp144);
            r10000_10ffff_tmp145 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_b3_b7 = simd_and(r10000_10ffff_tmp145, r10000_10ffff_tmp33);
            r10000_10ffff_tmp146 = simd_and(sequence_f0_90_ad_adv, byte_range_b3_b7);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp146);
            byte_ae = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp22);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp147 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp141), simd_andc(r10000_10ffff_tmp79, basis_bits.bit_4));
            byte_range_92_98 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp147);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(194), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_90_ae_adv, byte_range_92_98);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp148);
            r10000_10ffff_tmp149 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp57);
            r10000_10ffff_tmp150 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp149);
            r10000_10ffff_tmp151 = simd_not(r10000_10ffff_tmp150);
            r10000_10ffff_tmp152 = simd_and(tmp6, r10000_10ffff_tmp2);
            r10000_10ffff_tmp153 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp151), simd_andc(r10000_10ffff_tmp153, basis_bits.bit_2));
            byte_range_9d_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp154);
            r10000_10ffff_tmp155 = simd_and(sequence_f0_90_ae_adv, byte_range_9d_a8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp155);
            r10000_10ffff_tmp156 = simd_and(sequence_f0_90_ae_adv, byte_range_b0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp156);
            byte_af = simd_and(r10000_10ffff_tmp62, tmp8);
            sequence_f0_90_af = simd_and(sequence_f0_90_adv, byte_af);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_af, carryQ.get_carry_in(195), sequence_f0_90_af_adv));
            r10000_10ffff_tmp157 = simd_and(sequence_f0_90_af_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp157);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp25);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp158 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp150);
            byte_range_89_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(196), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp159 = simd_and(sequence_f0_90_b1_adv, byte_range_89_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp159);
            byte_range_b2_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp147);
            sequence_f0_90_byte_range_b2_b8 = simd_and(sequence_f0_90_adv, byte_range_b2_b8);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_b2_b8, carryQ.get_carry_in(197), r10000_10ffff_tmp160));
            sequence_f0_90_byte_range_b2_b8_sfx = simd_and(r10000_10ffff_tmp160, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_90_byte_range_b2_b8_sfx);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp100);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(198), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_90_b9_adv, byte_range_80_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp161);
            byte_bf = simd_and(byte_range_b0_bf, tmp8);
            r10000_10ffff_tmp162 = simd_and(sequence_f0_90_b9_adv, byte_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp162);
            byte_range_ba_bf = simd_and(r10000_10ffff_tmp117, r10000_10ffff_tmp79);
            sequence_f0_90_byte_range_ba_bf = simd_and(sequence_f0_90_adv, byte_range_ba_bf);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_ba_bf, carryQ.get_carry_in(199), r10000_10ffff_tmp163));
            sequence_f0_90_byte_range_ba_bf_sfx = simd_and(r10000_10ffff_tmp163, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_90_byte_range_ba_bf_sfx);
            byte_91 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp25);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(200), r10000_10ffff_tmp164));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp164, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp164;
            r10000_10ffff_tmp165 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp166 = simd_not(r10000_10ffff_tmp165);
            r10000_10ffff_tmp167 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp166), simd_andc(r10000_10ffff_tmp26, basis_bits.bit_3));
            byte_range_8e_91 = simd_and(byte_range_80_9f, r10000_10ffff_tmp167);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(201), sequence_f0_91_81_adv));
            r10000_10ffff_tmp168 = simd_and(sequence_f0_91_81_adv, byte_range_8e_91);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp168);
            r10000_10ffff_tmp169 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp86);
            byte_range_b0_be = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp169);
            r10000_10ffff_tmp170 = simd_and(sequence_f0_91_81_adv, byte_range_b0_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp170);
            byte_82 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp76);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp64);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(202), sequence_f0_91_82_adv));
            r10000_10ffff_tmp171 = simd_and(sequence_f0_91_82_adv, byte_bd);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp171);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp172 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp79);
            byte_range_82_8f = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp172);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(203), sequence_f0_91_83_adv));
            r10000_10ffff_tmp173 = simd_and(sequence_f0_91_83_adv, byte_range_82_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp173);
            byte_range_a9_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp57);
            r10000_10ffff_tmp174 = simd_and(sequence_f0_91_83_adv, byte_range_a9_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp174);
            r10000_10ffff_tmp175 = simd_and(sequence_f0_91_83_adv, byte_range_ba_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp175);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            byte_b5 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp85);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(204), sequence_f0_91_84_adv));
            r10000_10ffff_tmp176 = simd_and(sequence_f0_91_84_adv, byte_b5);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp176);
            byte_85 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp85);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_84_8f = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp1);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(205), sequence_f0_91_85_adv));
            r10000_10ffff_tmp177 = simd_and(sequence_f0_91_85_adv, byte_range_84_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp177);
            r10000_10ffff_tmp178 = simd_and(sequence_f0_91_85_adv, byte_range_b7_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp178);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp179 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_89_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp179);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(206), sequence_f0_91_87_adv));
            r10000_10ffff_tmp180 = simd_and(sequence_f0_91_87_adv, byte_range_89_8c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp180);
            r10000_10ffff_tmp181 = simd_and(sequence_f0_91_87_adv, byte_range_8e_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp181);
            r10000_10ffff_tmp182 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp183 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp33);
            r10000_10ffff_tmp184 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp183);
            r10000_10ffff_tmp185 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp182), simd_andc(r10000_10ffff_tmp184, basis_bits.bit_2));
            byte_range_9b_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp185);
            r10000_10ffff_tmp186 = simd_and(sequence_f0_91_87_adv, byte_range_9b_a0);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp186);
            r10000_10ffff_tmp187 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp188 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp187);
            byte_range_b5_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp188);
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_87_adv, byte_range_b5_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp189);
            byte_88 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp124);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(207), sequence_f0_91_88_adv));
            r10000_10ffff_tmp190 = simd_and(sequence_f0_91_88_adv, byte_92);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp190);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_91_88_adv, byte_range_be_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp191);
            sequence_f0_91_89 = simd_and(sequence_f0_91_adv, byte_89);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_91_89, carryQ.get_carry_in(208), sequence_f0_91_89_adv));
            r10000_10ffff_tmp192 = simd_and(sequence_f0_91_89_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp192);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_80_af = simd_andc(byte_range_80_bf, tmp4);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(209), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp193 = simd_and(sequence_f0_91_8a_adv, byte_range_80_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp193);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            byte_range_ab_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp33);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(210), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp194 = simd_and(sequence_f0_91_8b_adv, byte_range_ab_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp194);
            r10000_10ffff_tmp195 = simd_and(sequence_f0_91_8b_adv, byte_range_ba_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp195);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(211), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_8c_adv, byte_80);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp196);
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_8c_adv, byte_84);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp197);
            r10000_10ffff_tmp198 = simd_and(r10000_10ffff_tmp53, tmp6);
            byte_range_8d_8e = simd_and(r10000_10ffff_tmp198, r10000_10ffff_tmp106);
            r10000_10ffff_tmp199 = simd_and(sequence_f0_91_8c_adv, byte_range_8d_8e);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp199);
            r10000_10ffff_tmp200 = simd_andc(r10000_10ffff_tmp52, r10000_10ffff_tmp1);
            byte_range_91_92 = simd_and(r10000_10ffff_tmp200, r10000_10ffff_tmp106);
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_8c_adv, byte_range_91_92);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp201);
            r10000_10ffff_tmp202 = simd_and(sequence_f0_91_8c_adv, byte_a9);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp202);
            r10000_10ffff_tmp203 = simd_and(sequence_f0_91_8c_adv, byte_b1);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp203);
            byte_b4 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp35);
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_8c_adv, byte_b4);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp204);
            r10000_10ffff_tmp205 = simd_and(r10000_10ffff_tmp18, basis_bits.bit_6);
            byte_range_ba_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp205);
            r10000_10ffff_tmp206 = simd_and(sequence_f0_91_8c_adv, byte_range_ba_bb);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp206);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            byte_range_85_86 = simd_and(byte_range_84_87, r10000_10ffff_tmp106);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(212), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_91_8d_adv, byte_range_85_86);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp207);
            r10000_10ffff_tmp208 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp18);
            byte_range_89_8a = simd_and(r10000_10ffff_tmp208, r10000_10ffff_tmp106);
            r10000_10ffff_tmp209 = simd_and(sequence_f0_91_8d_adv, byte_range_89_8a);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp209);
            r10000_10ffff_tmp210 = simd_not(r10000_10ffff_tmp93);
            r10000_10ffff_tmp211 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp210), simd_andc(r10000_10ffff_tmp26, basis_bits.bit_3));
            byte_range_8e_96 = simd_and(byte_range_80_9f, r10000_10ffff_tmp211);
            r10000_10ffff_tmp212 = simd_and(sequence_f0_91_8d_adv, byte_range_8e_96);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp212);
            byte_range_98_9c = simd_andc(r10000_10ffff_tmp134, r10000_10ffff_tmp187);
            r10000_10ffff_tmp213 = simd_and(sequence_f0_91_8d_adv, byte_range_98_9c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp213);
            r10000_10ffff_tmp214 = simd_andc(r10000_10ffff_tmp14, basis_bits.bit_6);
            byte_range_a4_a5 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp214);
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_8d_adv, byte_range_a4_a5);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp215);
            r10000_10ffff_tmp216 = simd_and(r10000_10ffff_tmp62, tmp6);
            byte_range_ad_af = simd_and(r10000_10ffff_tmp216, r10000_10ffff_tmp2);
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_8d_adv, byte_range_ad_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp217);
            r10000_10ffff_tmp218 = simd_and(sequence_f0_91_8d_adv, byte_range_b5_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp218);
            sequence_f0_91_byte_range_8e_91 = simd_and(sequence_f0_91_adv, byte_range_8e_91);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_8e_91, carryQ.get_carry_in(213), r10000_10ffff_tmp219));
            sequence_f0_91_byte_range_8e_91_sfx = simd_and(r10000_10ffff_tmp219, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_91_byte_range_8e_91_sfx);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(214), sequence_f0_91_93_adv));
            r10000_10ffff_tmp220 = simd_and(sequence_f0_91_93_adv, byte_range_88_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp220);
            r10000_10ffff_tmp221 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp80);
            r10000_10ffff_tmp222 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp221);
            byte_range_9a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp222);
            r10000_10ffff_tmp223 = simd_and(sequence_f0_91_93_adv, byte_range_9a_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp223);
            byte_range_94_95 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp214);
            sequence_f0_91_byte_range_94_95 = simd_and(sequence_f0_91_adv, byte_range_94_95);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_94_95, carryQ.get_carry_in(215), r10000_10ffff_tmp224));
            sequence_f0_91_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp224, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_91_byte_range_94_95_sfx);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            byte_range_b6_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp91);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(216), sequence_f0_91_96_adv));
            r10000_10ffff_tmp225 = simd_and(sequence_f0_91_96_adv, byte_range_b6_b7);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp225);
            byte_97 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp15);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp226 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp81);
            byte_range_8a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp226);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(217), sequence_f0_91_97_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_91_97_adv, byte_range_8a_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp227);
            byte_99 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp100);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_85_8f = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp188);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(218), sequence_f0_91_99_adv));
            r10000_10ffff_tmp228 = simd_and(sequence_f0_91_99_adv, byte_range_85_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp228);
            r10000_10ffff_tmp229 = simd_and(sequence_f0_91_99_adv, byte_range_9a_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp229);
            byte_9a = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp54);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            byte_range_b8_bf = r10000_10ffff_tmp117;
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(219), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_91_9a_adv, byte_range_b8_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp230);
            byte_9b = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp19);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(220), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp231 = simd_and(sequence_f0_91_9b_adv, byte_range_8a_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp231);
            r10000_10ffff_tmp232 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp165);
            r10000_10ffff_tmp233 = simd_not(r10000_10ffff_tmp232);
            r10000_10ffff_tmp234 = simd_and(basis_bits.bit_3, tmp6);
            r10000_10ffff_tmp235 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp233), simd_andc(r10000_10ffff_tmp234, basis_bits.bit_2));
            byte_range_9c_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp235);
            sequence_f0_91_byte_range_9c_a1 = simd_and(sequence_f0_91_adv, byte_range_9c_a1);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_9c_a1, carryQ.get_carry_in(221), r10000_10ffff_tmp236));
            sequence_f0_91_byte_range_9c_a1_sfx = simd_and(r10000_10ffff_tmp236, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_91_byte_range_9c_a1_sfx);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(222), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp237 = simd_and(sequence_f0_91_a2_adv, byte_range_80_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp237);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp238 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp87), simd_andc(r10000_10ffff_tmp33, basis_bits.bit_4));
            byte_range_b3_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp238);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(223), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp239 = simd_and(sequence_f0_91_a3_adv, byte_range_b3_be);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp239);
            r10000_10ffff_tmp240 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp137), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_aa = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp240);
            sequence_f0_91_byte_range_a4_aa = simd_and(sequence_f0_91_adv, byte_range_a4_aa);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_a4_aa, carryQ.get_carry_in(224), r10000_10ffff_tmp241));
            sequence_f0_91_byte_range_a4_aa_sfx = simd_and(r10000_10ffff_tmp241, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_91_byte_range_a4_aa_sfx);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            byte_range_b9_bf = simd_and(byte_range_b8_bf, r10000_10ffff_tmp57);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(225), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp242 = simd_and(sequence_f0_91_ab_adv, byte_range_b9_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp242);
            r10000_10ffff_tmp243 = simd_or(basis_bits.bit_3, tmp6);
            byte_range_ac_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp243);
            sequence_f0_91_byte_range_ac_bf = simd_and(sequence_f0_91_adv, byte_range_ac_bf);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_ac_bf, carryQ.get_carry_in(226), r10000_10ffff_tmp244));
            sequence_f0_91_byte_range_ac_bf_sfx = simd_and(r10000_10ffff_tmp244, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_91_byte_range_ac_bf_sfx);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(227), r10000_10ffff_tmp245));
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp245, byte_8e);
            sequence_f0_92_adv = r10000_10ffff_tmp245;
            r10000_10ffff_tmp246 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp149);
            r10000_10ffff_tmp247 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp246);
            byte_range_99_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp247);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(228), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp248 = simd_and(sequence_f0_92_8e_adv, byte_range_99_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp248);
            sequence_f0_92_8f = simd_and(sequence_f0_92_adv, byte_8f);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8f, carryQ.get_carry_in(229), sequence_f0_92_8f_adv));
            r10000_10ffff_tmp249 = simd_and(sequence_f0_92_8f_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp249);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(230), sequence_f0_92_91_adv));
            r10000_10ffff_tmp250 = simd_and(sequence_f0_92_91_adv, byte_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp250);
            r10000_10ffff_tmp251 = simd_and(sequence_f0_92_91_adv, byte_range_b5_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp251);
            r10000_10ffff_tmp252 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp165);
            r10000_10ffff_tmp253 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp252);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp253);
            sequence_f0_92_byte_range_92_bf = simd_and(sequence_f0_92_adv, byte_range_92_bf);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_92_bf, carryQ.get_carry_in(231), r10000_10ffff_tmp254));
            sequence_f0_92_byte_range_92_bf_sfx = simd_and(r10000_10ffff_tmp254, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_92_byte_range_92_bf_sfx);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(232), r10000_10ffff_tmp255));
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp255, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp255;
            r10000_10ffff_tmp256 = simd_or(basis_bits.bit_3, tmp8);
            byte_range_af_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp256);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(233), sequence_f0_93_90_adv));
            r10000_10ffff_tmp257 = simd_and(sequence_f0_93_90_adv, byte_range_af_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp257);
            r10000_10ffff_tmp258 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp259 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp258);
            byte_range_91_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp259);
            sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(234), r10000_10ffff_tmp260));
            sequence_f0_93_byte_range_91_bf_sfx = simd_and(r10000_10ffff_tmp260, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_93_byte_range_91_bf_sfx);
            byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(235), r10000_10ffff_tmp261));
            byte_f0_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp261, byte_range_80_bf);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(236), r10000_10ffff_tmp262));
            byte_f0_byte_range_94_95_sfx_sfx = simd_and(r10000_10ffff_tmp262, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f0_byte_range_94_95_sfx_sfx);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(237), r10000_10ffff_tmp263));
            sequence_f0_96_byte_range_80_9f = simd_and(r10000_10ffff_tmp263, byte_range_80_9f);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_80_9f, carryQ.get_carry_in(238), r10000_10ffff_tmp264));
            sequence_f0_96_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp264, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_96_byte_range_80_9f_sfx);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp263, byte_a8);
            sequence_f0_96_adv = r10000_10ffff_tmp263;
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(239), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp265 = simd_and(sequence_f0_96_a8_adv, byte_range_b9_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp265);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            byte_9f = simd_and(r10000_10ffff_tmp52, tmp8);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(240), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp266 = simd_and(sequence_f0_96_a9_adv, byte_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp266);
            r10000_10ffff_tmp267 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_aa_ad = simd_and(byte_range_a8_af, r10000_10ffff_tmp267);
            r10000_10ffff_tmp268 = simd_and(sequence_f0_96_a9_adv, byte_range_aa_ad);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp268);
            r10000_10ffff_tmp269 = simd_and(sequence_f0_96_a9_adv, byte_range_b0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp269);
            sequence_f0_96_aa = simd_and(sequence_f0_96_adv, byte_aa);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_96_aa, carryQ.get_carry_in(241), sequence_f0_96_aa_adv));
            r10000_10ffff_tmp270 = simd_and(sequence_f0_96_aa_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp270);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(242), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp271 = simd_and(sequence_f0_96_ab_adv, byte_range_80_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp271);
            byte_range_ae_af = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp26);
            r10000_10ffff_tmp272 = simd_and(sequence_f0_96_ab_adv, byte_range_ae_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp272);
            byte_range_b6_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp72);
            r10000_10ffff_tmp273 = simd_and(sequence_f0_96_ab_adv, byte_range_b6_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp273);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_86_8f = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp72);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(243), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp274 = simd_and(sequence_f0_96_ad_adv, byte_range_86_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp274);
            r10000_10ffff_tmp275 = simd_and(sequence_f0_96_ad_adv, byte_9a);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp275);
            r10000_10ffff_tmp276 = simd_and(sequence_f0_96_ad_adv, byte_a2);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp276);
            byte_range_b8_bc = simd_andc(byte_range_b8_bf, r10000_10ffff_tmp187);
            r10000_10ffff_tmp277 = simd_and(sequence_f0_96_ad_adv, byte_range_b8_bc);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp277);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(244), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp278 = simd_and(sequence_f0_96_ae_adv, byte_range_90_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp278);
            r10000_10ffff_tmp279 = simd_not(tmp6);
            r10000_10ffff_tmp280 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp279), simd_andc(tmp8, basis_bits.bit_3));
            byte_range_af_bb = simd_and(byte_range_a0_bf, r10000_10ffff_tmp280);
            sequence_f0_96_byte_range_af_bb = simd_and(sequence_f0_96_adv, byte_range_af_bb);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_af_bb, carryQ.get_carry_in(245), r10000_10ffff_tmp281));
            sequence_f0_96_byte_range_af_bb_sfx = simd_and(r10000_10ffff_tmp281, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_96_byte_range_af_bb_sfx);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(246), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp282 = simd_and(sequence_f0_96_bd_adv, byte_range_85_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp282);
            r10000_10ffff_tmp283 = simd_and(sequence_f0_96_bd_adv, byte_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp283);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp169);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(247), sequence_f0_96_be_adv));
            r10000_10ffff_tmp284 = simd_and(sequence_f0_96_be_adv, byte_range_80_8e);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp284);
            r10000_10ffff_tmp285 = simd_and(sequence_f0_96_be_adv, byte_range_a0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp285);
            sequence_f0_96_bf = simd_and(sequence_f0_96_adv, byte_bf);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bf, carryQ.get_carry_in(248), sequence_f0_96_bf_adv));
            r10000_10ffff_tmp286 = simd_and(sequence_f0_96_bf_adv, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp286);
            byte_range_97_9a = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp138);
            byte_f0_byte_range_97_9a = simd_and(byte_f0_adv, byte_range_97_9a);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a, carryQ.get_carry_in(249), r10000_10ffff_tmp287));
            byte_f0_byte_range_97_9a_sfx = simd_and(r10000_10ffff_tmp287, byte_range_80_bf);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a_sfx, carryQ.get_carry_in(250), r10000_10ffff_tmp288));
            byte_f0_byte_range_97_9a_sfx_sfx = simd_and(r10000_10ffff_tmp288, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f0_byte_range_97_9a_sfx_sfx);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(251), r10000_10ffff_tmp289));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp289, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp289;
            r10000_10ffff_tmp290 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp232);
            byte_range_82_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp290);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(252), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9b_80_adv, byte_range_82_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp291);
            r10000_10ffff_tmp292 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp293 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp292), simd_andc(r10000_10ffff_tmp46, basis_bits.bit_2));
            byte_range_81_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp293);
            sequence_f0_9b_byte_range_81_af = simd_and(sequence_f0_9b_adv, byte_range_81_af);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_81_af, carryQ.get_carry_in(253), r10000_10ffff_tmp294));
            sequence_f0_9b_byte_range_81_af_sfx = simd_and(r10000_10ffff_tmp294, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9b_byte_range_81_af_sfx);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(254), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp295 = simd_and(sequence_f0_9b_b1_adv, byte_range_ab_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp295);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp105, r10000_10ffff_tmp2);
            r10000_10ffff_tmp296 = simd_and(sequence_f0_9b_b1_adv, byte_range_bd_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp296);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp76);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            byte_range_89_8f = simd_and(byte_range_88_8f, r10000_10ffff_tmp57);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(255), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp297 = simd_and(sequence_f0_9b_b2_adv, byte_range_89_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp297);
            byte_range_9a_9b = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp205);
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9b_b2_adv, byte_range_9a_9b);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp298);
            r10000_10ffff_tmp299 = simd_and(sequence_f0_9b_b2_adv, byte_range_a0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp299);
            r10000_10ffff_tmp300 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp33);
            byte_range_b3_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp300);
            sequence_f0_9b_byte_range_b3_bf = simd_and(sequence_f0_9b_adv, byte_range_b3_bf);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_b3_bf, carryQ.get_carry_in(256), r10000_10ffff_tmp301));
            sequence_f0_9b_byte_range_b3_bf_sfx = simd_and(r10000_10ffff_tmp301, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9b_byte_range_b3_bf_sfx);
            sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(257), r10000_10ffff_tmp302));
            sequence_f0_9c_byte_range_80_bf = simd_and(r10000_10ffff_tmp302, byte_range_80_bf);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_byte_range_80_bf, carryQ.get_carry_in(258), r10000_10ffff_tmp303));
            sequence_f0_9c_byte_range_80_bf_sfx = simd_and(r10000_10ffff_tmp303, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9c_byte_range_80_bf_sfx);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(259), r10000_10ffff_tmp304));
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp304, byte_83);
            sequence_f0_9d_adv = r10000_10ffff_tmp304;
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(260), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp305 = simd_and(sequence_f0_9d_83_adv, byte_range_b6_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp305);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp306 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp141), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_4));
            byte_range_a7_a8 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp306);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(261), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp307 = simd_and(sequence_f0_9d_84_adv, byte_range_a7_a8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp307);
            sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
            r10000_10ffff_tmp308 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp33);
            byte_range_b3_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp308);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(262), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp309 = simd_and(sequence_f0_9d_85_adv, byte_range_b3_ba);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp309);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(263), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp310 = simd_and(sequence_f0_9d_87_adv, byte_range_9e_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp310);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp311 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp72);
            r10000_10ffff_tmp312 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp311);
            byte_range_86_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp312);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(264), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp313 = simd_and(sequence_f0_9d_89_adv, byte_range_86_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp313);
            byte_range_8a_8b = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp205);
            sequence_f0_9d_byte_range_8a_8b = simd_and(sequence_f0_9d_adv, byte_range_8a_8b);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8a_8b, carryQ.get_carry_in(265), r10000_10ffff_tmp314));
            sequence_f0_9d_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp314, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9d_byte_range_8a_8b_sfx);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            byte_range_97_9f = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp93);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(266), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp315 = simd_and(sequence_f0_9d_8d_adv, byte_range_97_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp315);
            byte_range_b2_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp172);
            r10000_10ffff_tmp316 = simd_and(sequence_f0_9d_8d_adv, byte_range_b2_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp316);
            sequence_f0_9d_byte_range_8e_8f = simd_and(sequence_f0_9d_adv, byte_range_8e_8f);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8e_8f, carryQ.get_carry_in(267), r10000_10ffff_tmp317));
            sequence_f0_9d_byte_range_8e_8f_sfx = simd_and(r10000_10ffff_tmp317, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9d_byte_range_8e_8f_sfx);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(268), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp318 = simd_and(sequence_f0_9d_91_adv, byte_95);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp318);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(269), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp319 = simd_and(sequence_f0_9d_92_adv, byte_9d);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp319);
            byte_range_a0_a1 = simd_andc(r10000_10ffff_tmp62, r10000_10ffff_tmp165);
            r10000_10ffff_tmp320 = simd_and(sequence_f0_9d_92_adv, byte_range_a0_a1);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp320);
            r10000_10ffff_tmp321 = simd_andc(r10000_10ffff_tmp62, basis_bits.bit_4);
            r10000_10ffff_tmp322 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp323 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp322), simd_andc(tmp7, basis_bits.bit_5));
            byte_range_a3_a4 = simd_and(r10000_10ffff_tmp321, r10000_10ffff_tmp323);
            r10000_10ffff_tmp324 = simd_and(sequence_f0_9d_92_adv, byte_range_a3_a4);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp324);
            r10000_10ffff_tmp325 = simd_and(sequence_f0_9d_92_adv, byte_range_a7_a8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp325);
            r10000_10ffff_tmp326 = simd_and(sequence_f0_9d_92_adv, byte_ad);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp326);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp54);
            r10000_10ffff_tmp327 = simd_and(sequence_f0_9d_92_adv, byte_ba);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp327);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp328 = simd_and(sequence_f0_9d_92_adv, byte_bc);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp328);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(270), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp329 = simd_and(sequence_f0_9d_93_adv, byte_84);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp329);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(271), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp330 = simd_and(sequence_f0_9d_94_adv, byte_86);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp330);
            byte_range_8b_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp323);
            r10000_10ffff_tmp331 = simd_and(sequence_f0_9d_94_adv, byte_range_8b_8c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp331);
            r10000_10ffff_tmp332 = simd_and(sequence_f0_9d_94_adv, byte_95);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp332);
            r10000_10ffff_tmp333 = simd_and(sequence_f0_9d_94_adv, byte_9d);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp333);
            r10000_10ffff_tmp334 = simd_and(sequence_f0_9d_94_adv, byte_ba);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp334);
            r10000_10ffff_tmp335 = simd_and(sequence_f0_9d_94_adv, byte_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp335);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(272), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9d_95_adv, byte_85);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp336);
            r10000_10ffff_tmp337 = simd_not(r10000_10ffff_tmp79);
            r10000_10ffff_tmp338 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp337), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_4));
            byte_range_87_89 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp338);
            r10000_10ffff_tmp339 = simd_and(sequence_f0_9d_95_adv, byte_range_87_89);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp339);
            r10000_10ffff_tmp340 = simd_and(sequence_f0_9d_95_adv, byte_91);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp340);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            byte_range_a6_a7 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp91);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(273), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp341 = simd_and(sequence_f0_9d_9a_adv, byte_range_a6_a7);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp341);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp342 = simd_andc(tmp6, basis_bits.bit_6);
            byte_range_8c_8d = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp342);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(274), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp343 = simd_and(sequence_f0_9d_9f_adv, byte_range_8c_8d);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp343);
            sequence_f0_9d_byte_range_a0_bf = simd_and(sequence_f0_9d_adv, byte_range_a0_bf);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_a0_bf, carryQ.get_carry_in(275), r10000_10ffff_tmp344));
            sequence_f0_9d_byte_range_a0_bf_sfx = simd_and(r10000_10ffff_tmp344, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9d_byte_range_a0_bf_sfx);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(276), r10000_10ffff_tmp345));
            sequence_f0_9e_byte_range_80_9f = simd_and(r10000_10ffff_tmp345, byte_range_80_9f);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_80_9f, carryQ.get_carry_in(277), r10000_10ffff_tmp346));
            sequence_f0_9e_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp346, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9e_byte_range_80_9f_sfx);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp345, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp345;
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(278), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp347 = simd_and(sequence_f0_9e_a3_adv, byte_range_85_86);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp347);
            r10000_10ffff_tmp348 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp93);
            r10000_10ffff_tmp349 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp348);
            byte_range_97_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp349);
            r10000_10ffff_tmp350 = simd_and(sequence_f0_9e_a3_adv, byte_range_97_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp350);
            r10000_10ffff_tmp351 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp352 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp351), simd_andc(r10000_10ffff_tmp1, basis_bits.bit_3));
            byte_range_a4_b7 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp352);
            sequence_f0_9e_byte_range_a4_b7 = simd_and(sequence_f0_9e_adv, byte_range_a4_b7);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a4_b7, carryQ.get_carry_in(279), r10000_10ffff_tmp353));
            sequence_f0_9e_byte_range_a4_b7_sfx = simd_and(r10000_10ffff_tmp353, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9e_byte_range_a4_b7_sfx);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp124);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(280), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp354 = simd_and(sequence_f0_9e_b8_adv, byte_84);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp354);
            r10000_10ffff_tmp355 = simd_and(sequence_f0_9e_b8_adv, byte_a0);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp355);
            r10000_10ffff_tmp356 = simd_and(sequence_f0_9e_b8_adv, byte_a3);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp356);
            r10000_10ffff_tmp357 = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp14);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp357, r10000_10ffff_tmp106);
            r10000_10ffff_tmp358 = simd_and(sequence_f0_9e_b8_adv, byte_range_a5_a6);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp358);
            r10000_10ffff_tmp359 = simd_and(sequence_f0_9e_b8_adv, byte_a8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp359);
            byte_b3 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp31);
            r10000_10ffff_tmp360 = simd_and(sequence_f0_9e_b8_adv, byte_b3);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp360);
            r10000_10ffff_tmp361 = simd_and(sequence_f0_9e_b8_adv, byte_b8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp361);
            r10000_10ffff_tmp362 = simd_and(sequence_f0_9e_b8_adv, byte_ba);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp362);
            r10000_10ffff_tmp363 = simd_and(sequence_f0_9e_b8_adv, byte_range_bc_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp363);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp165);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(281), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp364 = simd_and(sequence_f0_9e_b9_adv, byte_range_80_81);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp364);
            r10000_10ffff_tmp365 = simd_andc(r10000_10ffff_tmp53, basis_bits.bit_4);
            r10000_10ffff_tmp366 = simd_and(sequence_f0_9e_b9_adv, byte_range_83_86);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp366);
            r10000_10ffff_tmp367 = simd_and(sequence_f0_9e_b9_adv, byte_88);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp367);
            r10000_10ffff_tmp368 = simd_and(sequence_f0_9e_b9_adv, byte_8a);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp368);
            r10000_10ffff_tmp369 = simd_and(sequence_f0_9e_b9_adv, byte_8c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp369);
            r10000_10ffff_tmp370 = simd_and(sequence_f0_9e_b9_adv, byte_90);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp370);
            r10000_10ffff_tmp371 = simd_and(sequence_f0_9e_b9_adv, byte_93);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp371);
            r10000_10ffff_tmp372 = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp14);
            byte_range_95_96 = simd_and(r10000_10ffff_tmp372, r10000_10ffff_tmp106);
            r10000_10ffff_tmp373 = simd_and(sequence_f0_9e_b9_adv, byte_range_95_96);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp373);
            r10000_10ffff_tmp374 = simd_and(sequence_f0_9e_b9_adv, byte_98);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp374);
            r10000_10ffff_tmp375 = simd_and(sequence_f0_9e_b9_adv, byte_9a);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp375);
            r10000_10ffff_tmp376 = simd_and(sequence_f0_9e_b9_adv, byte_9c);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp376);
            r10000_10ffff_tmp377 = simd_and(sequence_f0_9e_b9_adv, byte_9e);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp377);
            r10000_10ffff_tmp378 = simd_and(sequence_f0_9e_b9_adv, byte_a0);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp378);
            r10000_10ffff_tmp379 = simd_and(sequence_f0_9e_b9_adv, byte_a3);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp379);
            r10000_10ffff_tmp380 = simd_and(sequence_f0_9e_b9_adv, byte_range_a5_a6);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp380);
            r10000_10ffff_tmp381 = simd_and(sequence_f0_9e_b9_adv, byte_ab);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp381);
            r10000_10ffff_tmp382 = simd_and(sequence_f0_9e_b9_adv, byte_b3);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp382);
            r10000_10ffff_tmp383 = simd_and(sequence_f0_9e_b9_adv, byte_b8);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp383);
            r10000_10ffff_tmp384 = simd_and(sequence_f0_9e_b9_adv, byte_bd);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp384);
            r10000_10ffff_tmp385 = simd_and(sequence_f0_9e_b9_adv, byte_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp385);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(282), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp386 = simd_and(sequence_f0_9e_ba_adv, byte_8a);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp386);
            r10000_10ffff_tmp387 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp182), simd_andc(r10000_10ffff_tmp234, basis_bits.bit_2));
            byte_range_9c_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp387);
            r10000_10ffff_tmp388 = simd_and(sequence_f0_9e_ba_adv, byte_range_9c_a0);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp388);
            r10000_10ffff_tmp389 = simd_and(sequence_f0_9e_ba_adv, byte_a4);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp389);
            r10000_10ffff_tmp390 = simd_and(sequence_f0_9e_ba_adv, byte_aa);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp390);
            r10000_10ffff_tmp391 = simd_and(sequence_f0_9e_ba_adv, byte_range_bc_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp391);
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(283), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp392 = simd_and(sequence_f0_9e_bb_adv, byte_range_80_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp392);
            r10000_10ffff_tmp393 = simd_and(sequence_f0_9e_bb_adv, byte_range_b2_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp393);
            sequence_f0_9e_byte_range_bc_bf = simd_and(sequence_f0_9e_adv, byte_range_bc_bf);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_bc_bf, carryQ.get_carry_in(284), r10000_10ffff_tmp394));
            sequence_f0_9e_byte_range_bc_bf_sfx = simd_and(r10000_10ffff_tmp394, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9e_byte_range_bc_bf_sfx);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(285), r10000_10ffff_tmp395));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp395, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp395;
            byte_range_ac_af = r10000_10ffff_tmp216;
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(286), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp396 = simd_and(sequence_f0_9f_80_adv, byte_range_ac_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp396);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            byte_range_94_9f = simd_and(r10000_10ffff_tmp52, r10000_10ffff_tmp1);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(287), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp397 = simd_and(sequence_f0_9f_82_adv, byte_range_94_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp397);
            r10000_10ffff_tmp398 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp399 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp398), simd_andc(tmp8, basis_bits.bit_3));
            byte_range_af_b0 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp399);
            r10000_10ffff_tmp400 = simd_and(sequence_f0_9f_82_adv, byte_range_af_b0);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp400);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(288), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp401 = simd_and(sequence_f0_9f_83_adv, byte_80);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp401);
            r10000_10ffff_tmp402 = simd_and(sequence_f0_9f_83_adv, byte_90);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp402);
            r10000_10ffff_tmp403 = simd_and(sequence_f0_9f_83_adv, byte_range_b6_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp403);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(289), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp404 = simd_and(sequence_f0_9f_84_adv, byte_range_8d_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp404);
            r10000_10ffff_tmp405 = simd_and(sequence_f0_9f_84_adv, byte_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp405);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(290), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp406 = simd_and(sequence_f0_9f_85_adv, byte_range_ac_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp406);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            r10000_10ffff_tmp407 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp184);
            byte_range_9b_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp407);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(291), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp408 = simd_and(sequence_f0_9f_86_adv, byte_range_9b_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp408);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            r10000_10ffff_tmp409 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp311);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp409);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(292), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp410 = simd_and(sequence_f0_9f_87_adv, byte_range_80_a5);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp410);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            byte_range_83_8f = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp300);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(293), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp411 = simd_and(sequence_f0_9f_88_adv, byte_range_83_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp411);
            r10000_10ffff_tmp412 = simd_and(sequence_f0_9f_88_adv, byte_range_bb_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp412);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(294), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp413 = simd_and(sequence_f0_9f_89_adv, byte_range_89_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp413);
            r10000_10ffff_tmp414 = simd_and(sequence_f0_9f_89_adv, byte_range_92_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp414);
            sequence_f0_9f_byte_range_8a_8b = simd_and(sequence_f0_9f_adv, byte_range_8a_8b);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_8a_8b, carryQ.get_carry_in(295), r10000_10ffff_tmp415));
            sequence_f0_9f_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp415, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9f_byte_range_8a_8b_sfx);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(296), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp416 = simd_and(sequence_f0_9f_8c_adv, byte_range_ad_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp416);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(297), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp417 = simd_and(sequence_f0_9f_8d_adv, byte_range_be_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp417);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            r10000_10ffff_tmp418 = simd_not(r10000_10ffff_tmp1);
            r10000_10ffff_tmp419 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp418), simd_andc(tmp8, basis_bits.bit_3));
            byte_range_8f_93 = simd_and(byte_range_80_9f, r10000_10ffff_tmp419);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(298), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp420 = simd_and(sequence_f0_9f_8f_adv, byte_range_8f_93);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp420);
            r10000_10ffff_tmp421 = simd_and(sequence_f0_9f_8f_adv, byte_range_b8_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp421);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(299), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp422 = simd_and(sequence_f0_9f_93_adv, byte_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp422);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(300), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp423 = simd_and(sequence_f0_9f_95_adv, byte_range_8b_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp423);
            r10000_10ffff_tmp424 = simd_and(sequence_f0_9f_95_adv, byte_ba);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp424);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(301), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp425 = simd_and(sequence_f0_9f_96_adv, byte_a4);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp425);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            byte_range_83_84 = simd_and(r10000_10ffff_tmp365, r10000_10ffff_tmp323);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(302), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp426 = simd_and(sequence_f0_9f_99_adv, byte_range_83_84);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp426);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_90_9f = r10000_10ffff_tmp52;
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(303), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp427 = simd_and(sequence_f0_9f_9b_adv, byte_range_90_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp427);
            r10000_10ffff_tmp428 = simd_and(sequence_f0_9f_9b_adv, byte_range_ad_af);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp428);
            byte_range_b4_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp1);
            r10000_10ffff_tmp429 = simd_and(sequence_f0_9f_9b_adv, byte_range_b4_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp429);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(304), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp430 = simd_and(sequence_f0_9f_9d_adv, byte_range_b4_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp430);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            r10000_10ffff_tmp431 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp188);
            r10000_10ffff_tmp432 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp431);
            byte_range_95_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp432);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(305), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp433 = simd_and(sequence_f0_9f_9f_adv, byte_range_95_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp433);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            byte_range_8c_8f = r10000_10ffff_tmp198;
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(306), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp434 = simd_and(sequence_f0_9f_a0_adv, byte_range_8c_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp434);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(307), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp435 = simd_and(sequence_f0_9f_a1_adv, byte_range_88_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp435);
            r10000_10ffff_tmp436 = simd_and(byte_range_90_9f, basis_bits.bit_4);
            byte_range_9a_9f = simd_and(r10000_10ffff_tmp436, r10000_10ffff_tmp79);
            r10000_10ffff_tmp437 = simd_and(sequence_f0_9f_a1_adv, byte_range_9a_9f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp437);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(308), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp438 = simd_and(sequence_f0_9f_a2_adv, byte_range_88_8f);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp438);
            r10000_10ffff_tmp439 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp26);
            byte_range_ae_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp439);
            r10000_10ffff_tmp440 = simd_and(sequence_f0_9f_a2_adv, byte_range_ae_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp440);
            r10000_10ffff_tmp441 = simd_or(r10000_10ffff_tmp1, tmp7);
            r10000_10ffff_tmp442 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp441);
            byte_range_a3_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp442);
            sequence_f0_9f_byte_range_a3_bf = simd_and(sequence_f0_9f_adv, byte_range_a3_bf);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_a3_bf, carryQ.get_carry_in(309), r10000_10ffff_tmp443));
            sequence_f0_9f_byte_range_a3_bf_sfx = simd_and(r10000_10ffff_tmp443, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_9f_byte_range_a3_bf_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(310), r10000_10ffff_tmp444));
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp444, byte_9b);
            sequence_f0_aa_adv = r10000_10ffff_tmp444;
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(311), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp445 = simd_and(sequence_f0_aa_9b_adv, byte_range_97_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp445);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(312), r10000_10ffff_tmp446));
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp446, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp446;
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(313), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp447 = simd_and(sequence_f0_ab_9c_adv, byte_range_b5_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp447);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[314] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(314), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp448 = simd_and(sequence_f0_ab_a0_adv, byte_range_9e_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp448);
            sequence_f0_ab_byte_range_a1_bf = simd_and(sequence_f0_ab_adv, byte_range_a1_bf);
            carryQ.cq[315] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_a1_bf, carryQ.get_carry_in(315), r10000_10ffff_tmp449));
            sequence_f0_ab_byte_range_a1_bf_sfx = simd_and(r10000_10ffff_tmp449, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_ab_byte_range_a1_bf_sfx);
            byte_range_ac_ae = simd_andc(byte_range_ac_af, tmp7);
            byte_f0_byte_range_ac_ae = simd_and(byte_f0_adv, byte_range_ac_ae);
            carryQ.cq[316] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae, carryQ.get_carry_in(316), r10000_10ffff_tmp450));
            byte_f0_byte_range_ac_ae_sfx = simd_and(r10000_10ffff_tmp450, byte_range_80_bf);
            carryQ.cq[317] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae_sfx, carryQ.get_carry_in(317), r10000_10ffff_tmp451));
            byte_f0_byte_range_ac_ae_sfx_sfx = simd_and(r10000_10ffff_tmp451, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f0_byte_range_ac_ae_sfx_sfx);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[318] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(318), r10000_10ffff_tmp452));
            sequence_f0_af_byte_range_80_9f = simd_and(r10000_10ffff_tmp452, byte_range_80_9f);
            carryQ.cq[319] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_80_9f, carryQ.get_carry_in(319), r10000_10ffff_tmp453));
            sequence_f0_af_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp453, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_af_byte_range_80_9f_sfx);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp452, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp452;
            carryQ.cq[320] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(320), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp454 = simd_and(sequence_f0_af_a8_adv, byte_range_9e_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp454);
            byte_range_a9_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp150);
            sequence_f0_af_byte_range_a9_bf = simd_and(sequence_f0_af_adv, byte_range_a9_bf);
            carryQ.cq[321] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a9_bf, carryQ.get_carry_in(321), r10000_10ffff_tmp455));
            sequence_f0_af_byte_range_a9_bf_sfx = simd_and(r10000_10ffff_tmp455, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f0_af_byte_range_a9_bf_sfx);
            byte_f0_byte_range_b0_bf = simd_and(byte_f0_adv, byte_range_b0_bf);
            carryQ.cq[322] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf, carryQ.get_carry_in(322), r10000_10ffff_tmp456));
            byte_f0_byte_range_b0_bf_sfx = simd_and(r10000_10ffff_tmp456, byte_range_80_bf);
            carryQ.cq[323] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf_sfx, carryQ.get_carry_in(323), r10000_10ffff_tmp457));
            byte_f0_byte_range_b0_bf_sfx_sfx = simd_and(r10000_10ffff_tmp457, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f0_byte_range_b0_bf_sfx_sfx);
            r10000_10ffff_tmp458 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp1);
            byte_range_f1_f2 = simd_and(r10000_10ffff_tmp458, r10000_10ffff_tmp106);
            carryQ.cq[324] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(324), r10000_10ffff_tmp459));
            byte_range_f1_f2_sfx = simd_and(r10000_10ffff_tmp459, byte_range_80_bf);
            carryQ.cq[325] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(325), r10000_10ffff_tmp460));
            byte_range_f1_f2_sfx_sfx = simd_and(r10000_10ffff_tmp460, byte_range_80_bf);
            carryQ.cq[326] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(326), r10000_10ffff_tmp461));
            byte_range_f1_f2_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp461, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_range_f1_f2_sfx_sfx_sfx);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp31);
            carryQ.cq[327] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(327), r10000_10ffff_tmp462));
            byte_f3_byte_range_80_9f = simd_and(r10000_10ffff_tmp462, byte_range_80_9f);
            carryQ.cq[328] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f, carryQ.get_carry_in(328), r10000_10ffff_tmp463));
            byte_f3_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp463, byte_range_80_bf);
            carryQ.cq[329] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f_sfx, carryQ.get_carry_in(329), r10000_10ffff_tmp464));
            byte_f3_byte_range_80_9f_sfx_sfx = simd_and(r10000_10ffff_tmp464, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f3_byte_range_80_9f_sfx_sfx);
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp462, byte_a0);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp53, r10000_10ffff_tmp1);
            carryQ.cq[330] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(330), r10000_10ffff_tmp465));
            sequence_f3_a0_byte_range_80_83 = simd_and(r10000_10ffff_tmp465, byte_range_80_83);
            carryQ.cq[331] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_80_83, carryQ.get_carry_in(331), r10000_10ffff_tmp466));
            sequence_f3_a0_byte_range_80_83_sfx = simd_and(r10000_10ffff_tmp466, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f3_a0_byte_range_80_83_sfx);
            sequence_f3_a0_87 = simd_and(r10000_10ffff_tmp465, byte_87);
            byte_f3_adv = r10000_10ffff_tmp462;
            sequence_f3_a0_adv = r10000_10ffff_tmp465;
            carryQ.cq[332] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(332), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp467 = simd_and(sequence_f3_a0_87_adv, byte_range_b0_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, r10000_10ffff_tmp467);
            r10000_10ffff_tmp468 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp96);
            byte_range_88_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp468);
            sequence_f3_a0_byte_range_88_bf = simd_and(sequence_f3_a0_adv, byte_range_88_bf);
            carryQ.cq[333] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_88_bf, carryQ.get_carry_in(333), r10000_10ffff_tmp469));
            sequence_f3_a0_byte_range_88_bf_sfx = simd_and(r10000_10ffff_tmp469, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, sequence_f3_a0_byte_range_88_bf_sfx);
            byte_f3_byte_range_a1_bf = simd_and(byte_f3_adv, byte_range_a1_bf);
            carryQ.cq[334] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_bf, carryQ.get_carry_in(334), r10000_10ffff_tmp470));
            byte_f3_byte_range_a1_bf_sfx = simd_and(r10000_10ffff_tmp470, byte_range_80_bf);
            carryQ.cq[335] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_bf_sfx, carryQ.get_carry_in(335), r10000_10ffff_tmp471));
            byte_f3_byte_range_a1_bf_sfx_sfx = simd_and(r10000_10ffff_tmp471, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f3_byte_range_a1_bf_sfx_sfx);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp35);
            carryQ.cq[336] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(336), r10000_10ffff_tmp472));
            byte_f4_byte_range_80_8f = simd_and(r10000_10ffff_tmp472, byte_range_80_8f);
            carryQ.cq[337] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f, carryQ.get_carry_in(337), r10000_10ffff_tmp473));
            byte_f4_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp473, byte_range_80_bf);
            carryQ.cq[338] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f_sfx, carryQ.get_carry_in(338), r10000_10ffff_tmp474));
            byte_f4_byte_range_80_8f_sfx_sfx = simd_and(r10000_10ffff_tmp474, byte_range_80_bf);
            struct_gc_C.cc = simd_or(struct_gc_C.cc, byte_f4_byte_range_80_8f_sfx_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(157, 182);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 339);
        }
        carryQ.CarryQ_Adjust(339);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<339, 0> carryQ;
  };

  struct Property_gc_Po {
  Property_gc_Po() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Po & struct_gc_Po) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40;
		BitBlock cc_range_21_5c_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_c2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, byte_a1, byte_c2_adv, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock byte_a7, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_range_b6_b7;
		BitBlock r80_7ff_tmp12, byte_bf, r80_7ff_tmp13, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_cd, byte_range_b0_bf, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_range_ce_cf, r100_3ff_tmp4, r370_3ff_tmp1;
		BitBlock byte_be, byte_cd_adv, r370_3ff_tmp2, byte_ce, r370_3ff_tmp3, byte_87;
		BitBlock byte_ce_adv, r370_3ff_tmp4, r80_7ff_tmp14, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock byte_range_80_8f, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock byte_d5, r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock r530_58f_tmp3, byte_range_9a_9f, byte_d5_adv, r530_58f_tmp4;
		BitBlock r530_58f_tmp5, byte_89, byte_d6_adv, r530_58f_tmp6, byte_range_90_bf;
		BitBlock r400_5ff_tmp6, byte_d7, r400_5ff_tmp7, byte_80, byte_d7_adv;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, byte_83, r590_5ff_tmp3, byte_86;
		BitBlock r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6, r590_5ff_tmp7;
		BitBlock byte_range_b3_b4, r590_5ff_tmp8, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock byte_d8, r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock byte_range_89_8a, byte_d8_adv, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock byte_range_8c_8d, r600_6ff_tmp7, r600_6ff_tmp8, r600_6ff_tmp9;
		BitBlock byte_9b, r600_6ff_tmp10, byte_range_9e_9f, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, byte_d9, r600_6ff_tmp13, r600_6ff_tmp14;
		BitBlock byte_range_aa_ad, byte_d9_adv, r600_6ff_tmp15, byte_db;
		BitBlock r600_6ff_tmp16, byte_94, byte_db_adv, r600_6ff_tmp17, r80_7ff_tmp15;
		BitBlock byte_range_dc_dd, byte_dc, r700_77f_tmp1, byte_dd, r700_77f_tmp2;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, r700_74f_tmp1, r700_74f_tmp2;
		BitBlock byte_range_80_8d, byte_dc_adv, r700_74f_tmp3, byte_range_de_df;
		BitBlock byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4;
		BitBlock byte_range_b7_b9, byte_df_adv, r7c0_7ff_tmp5, byte_range_e0_ef;
		BitBlock byte_range_e0_e3, r800_ffff_tmp1, byte_e4, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_range_80_b7, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5;
		BitBlock byte_range_b0_be, sequence_e0_a0_adv, r800_fff_tmp6, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, sequence_e0_a1, r800_fff_tmp9, r800_fff_tmp10, byte_9e;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp11, r800_fff_tmp12, byte_a5;
		BitBlock sequence_e0_a5, r800_fff_tmp13, byte_range_a4_a5, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp14, byte_b0, r800_fff_tmp15, r800_fff_tmp16, byte_ab;
		BitBlock sequence_e0_ab, sequence_e0_ab_adv, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock byte_b7, sequence_e0_b7, byte_b4, sequence_e0_b7_adv, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, byte_b9, sequence_e0_b9, r800_fff_tmp21, byte_8f;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp22, byte_range_9a_9b, r800_fff_tmp23;
		BitBlock byte_bc, sequence_e0_bc, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, byte_range_84_92, sequence_e0_bc_adv;
		BitBlock r800_fff_tmp28, r800_fff_tmp29, sequence_e0_be, byte_85;
		BitBlock sequence_e0_be_adv, r800_fff_tmp30, sequence_e0_bf, r800_fff_tmp31;
		BitBlock r800_fff_tmp32, byte_range_90_94, sequence_e0_bf_adv, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, byte_range_99_9a, r800_fff_tmp36;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, byte_81;
		BitBlock r1000_1fff_tmp2, sequence_e1_81, byte_e1_adv, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_range_8a_8f, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, sequence_e1_83, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, byte_bb, sequence_e1_83_adv, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, byte_8d, sequence_e1_8d, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_range_a0_a8;
		BitBlock sequence_e1_8d_adv, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, byte_99, sequence_e1_99, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_range_ad_ae, sequence_e1_99_adv;
		BitBlock r1000_1fff_tmp19, sequence_e1_9b, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, byte_range_ab_ad, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp23, byte_9c, sequence_e1_9c, r1000_1fff_tmp24;
		BitBlock byte_range_b5_b6, sequence_e1_9c_adv, r1000_1fff_tmp25, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp26, byte_range_94_96;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock byte_range_98_9a, r1000_1fff_tmp29, sequence_e1_a0, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, byte_range_80_85, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, byte_range_87_8a;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, sequence_e1_a5, r1000_1fff_tmp39;
		BitBlock byte_range_84_85, sequence_e1_a5_adv, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, byte_a8, sequence_e1_a8, sequence_e1_a8_adv;
		BitBlock r1000_1fff_tmp42, byte_aa, sequence_e1_aa, r1000_1fff_tmp43;
		BitBlock byte_range_a0_a6, sequence_e1_aa_adv, r1000_1fff_tmp44;
		BitBlock byte_range_a8_ad, r1000_1fff_tmp45, byte_ad, sequence_e1_ad;
		BitBlock r1000_1fff_tmp46, r1000_1fff_tmp47, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, r1000_1fff_tmp50, byte_range_9a_a0;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp51, byte_af, sequence_e1_af;
		BitBlock byte_range_bc_bf, sequence_e1_af_adv, r1000_1fff_tmp52;
		BitBlock sequence_e1_b0, r1000_1fff_tmp53, byte_range_bb_bf;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp54, byte_b1, sequence_e1_b1;
		BitBlock byte_range_be_bf, sequence_e1_b1_adv, r1000_1fff_tmp55, byte_b3;
		BitBlock sequence_e1_b3, byte_range_80_87, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp56, byte_93, r1000_1fff_tmp57, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, sequence_e2_80, byte_e2_adv;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_range_96_97;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock byte_range_a0_a7, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, byte_range_b0_b8, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, byte_range_bb_be;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16, sequence_e2_81;
		BitBlock r2000_2fff_tmp17, byte_range_81_83, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock byte_range_87_91, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, byte_range_95_9e, r2000_2fff_tmp30, sequence_e2_b3;
		BitBlock r2000_2fff_tmp31, byte_range_b9_bc, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp32, r2000_2fff_tmp33, r2000_2fff_tmp34, byte_b5;
		BitBlock sequence_e2_b5, sequence_e2_b5_adv, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, byte_b8, sequence_e2_b8, byte_range_80_81;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, byte_range_86_88;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, byte_8b, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, r2000_2fff_tmp45, byte_range_8e_96;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, byte_range_98_99;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock byte_range_aa_ae, r2000_2fff_tmp54, r2000_2fff_tmp55;
		BitBlock r2000_2fff_tmp56, byte_range_b0_b9, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, sequence_e2_b9;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp60, r2000_4dff_tmp2, byte_e3;
		BitBlock r2000_4dff_tmp3, r3000_4dff_tmp1, r3000_4dff_tmp2, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp3, sequence_e3_80_adv, r3000_4dff_tmp4;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, byte_bd;
		BitBlock r3000_4dff_tmp8, sequence_e3_83, r3000_4dff_tmp9, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp10, r800_ffff_tmp8, r800_ffff_tmp9, byte_range_ea_ef;
		BitBlock byte_ea, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock sequence_ea_93, byte_ea_adv, ra000_ffff_tmp4, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_98, sequence_ea_98;
		BitBlock ra000_ffff_tmp7, ra000_ffff_tmp8, byte_range_8d_8f;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, sequence_ea_99, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, sequence_ea_9b, ra000_ffff_tmp16, byte_range_b2_b7;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, sequence_ea_a1, byte_range_b4_b7;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp20, byte_a3, sequence_ea_a3;
		BitBlock byte_range_8e_8f, sequence_ea_a3_adv, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, byte_range_b8_ba, ra000_ffff_tmp23, byte_a4;
		BitBlock sequence_ea_a4, byte_range_ae_af, sequence_ea_a4_adv;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, sequence_ea_a5;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock sequence_ea_a7, ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, byte_range_81_8d, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, byte_a9, sequence_ea_a9;
		BitBlock byte_range_9c_9f, sequence_ea_a9_adv, ra000_ffff_tmp34;
		BitBlock sequence_ea_ab, sequence_ea_ab_adv, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, byte_range_b0_b1, ra000_ffff_tmp37, sequence_ea_af;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp38, byte_ef, ra000_ffff_tmp39;
		BitBlock sequence_ef_b8, byte_ef_adv, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock byte_range_90_96, sequence_ef_b8_adv, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, sequence_ef_b9, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, byte_range_85_86, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp47, ra000_ffff_tmp48, ra000_ffff_tmp49;
		BitBlock byte_range_89_8c, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock byte_range_90_92, ra000_ffff_tmp52, byte_range_94_97;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, byte_range_9f_a1;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, byte_range_aa_ab;
		BitBlock ra000_ffff_tmp60, sequence_ef_bc, ra000_ffff_tmp61;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp62, byte_range_85_87;
		BitBlock ra000_ffff_tmp63, byte_8a, ra000_ffff_tmp64, byte_8c;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock byte_range_9f_a0, ra000_ffff_tmp71, ra000_ffff_tmp72;
		BitBlock ra000_ffff_tmp73, sequence_ef_bd, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock byte_90, r10000_10ffff_tmp3, sequence_f0_90, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, byte_84, r10000_10ffff_tmp6, sequence_f0_90_84;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp7, byte_range_80_82;
		BitBlock sequence_f0_90_84_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock byte_8e, sequence_f0_90_8e, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_8f, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock byte_95, sequence_f0_90_95, r10000_10ffff_tmp14;
		BitBlock sequence_f0_90_95_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock sequence_f0_90_a1, r10000_10ffff_tmp17, byte_97;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp18, sequence_f0_90_a4;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, sequence_f0_90_a9;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, byte_range_90_98;
		BitBlock sequence_f0_90_a9_adv, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, sequence_f0_90_ab, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, byte_range_b0_b6, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp30, byte_ac, sequence_f0_90_ac, r10000_10ffff_tmp31;
		BitBlock byte_range_b9_bf, sequence_f0_90_ac_adv, r10000_10ffff_tmp32, byte_ae;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock byte_range_99_9c, sequence_f0_90_ae_adv, r10000_10ffff_tmp35, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp36, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, byte_range_87_8d, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, byte_82, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, byte_range_bb_bc;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, sequence_f0_91_83, r10000_10ffff_tmp47;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp48, sequence_f0_91_85;
		BitBlock byte_range_80_83, sequence_f0_91_85_adv, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, byte_range_b4_b5, r10000_10ffff_tmp51;
		BitBlock sequence_f0_91_87, r10000_10ffff_tmp52, r10000_10ffff_tmp53;
		BitBlock r10000_10ffff_tmp54, byte_range_85_88, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, byte_88, sequence_f0_91_88, byte_range_b8_bd;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp59, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp60, sequence_f0_91_93_adv, r10000_10ffff_tmp61;
		BitBlock sequence_f0_91_97, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, byte_range_81_89, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp65, sequence_f0_91_99, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp66, byte_92, sequence_f0_92, r10000_10ffff_tmp67;
		BitBlock sequence_f0_92_91, sequence_f0_92_adv, byte_range_b0_b4;
		BitBlock sequence_f0_92_91_adv, r10000_10ffff_tmp68, byte_96, sequence_f0_96;
		BitBlock r10000_10ffff_tmp69, sequence_f0_96_a9, sequence_f0_96_adv;
		BitBlock sequence_f0_96_a9_adv, r10000_10ffff_tmp70, sequence_f0_96_ab;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp71, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp72, r10000_10ffff_tmp73, byte_range_b7_bb;
		BitBlock sequence_f0_96_ac_adv, r10000_10ffff_tmp74, sequence_f0_96_ad;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp75, sequence_f0_9b, byte_b2;
		BitBlock r10000_10ffff_tmp76, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp77;




        struct_gc_Po.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp3 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp4 = simd_andc(tmp3, tmp2);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp7 = simd_andc(tmp5, tmp6);
        tmp8 = simd_andc(tmp4, tmp7);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp10, tmp11);
        tmp13 = simd_and(tmp4, tmp12);
        tmp14 = simd_or(tmp9, tmp13);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_andc(tmp15, tmp1);
        tmp17 = simd_and(tmp4, tmp16);
        tmp18 = simd_or(tmp14, tmp17);
        tmp19 = simd_and(tmp15, basis_bits.bit_6);
        tmp20 = simd_and(tmp4, tmp19);
        tmp21 = simd_or(tmp18, tmp20);
        tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp23 = simd_andc(tmp22, tmp2);
        tmp24 = simd_and(tmp10, basis_bits.bit_6);
        tmp25 = simd_and(tmp23, tmp24);
        tmp26 = simd_or(tmp21, tmp25);
        tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp28 = simd_or(tmp5, tmp1);
        tmp29 = simd_or(tmp27, tmp28);
        tmp30 = simd_not(tmp29);
        tmp31 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp32 = simd_and(tmp15, tmp31);
        tmp33 = simd_and(tmp22, tmp32);
        tmp34 = simd_or(simd_and(basis_bits.bit_1, tmp30), simd_andc(tmp33, basis_bits.bit_1));
        tmp35 = simd_andc(tmp34, basis_bits.bit_0);
        tmp36 = simd_or(tmp26, tmp35);
        tmp37 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp38 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp39 = simd_and(tmp37, tmp38);
        tmp40 = simd_and(tmp39, tmp16);
        cc_range_21_5c_1 = simd_or(tmp36, tmp40);
        struct_gc_Po.cc = simd_or(struct_gc_Po.cc, cc_range_21_5c_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 100))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 13))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp27);
            r80_7ff_tmp2 = simd_andc(tmp11, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp3);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp5);
            byte_a1 = simd_and(r80_7ff_tmp4, r80_7ff_tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a1);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r80_7ff_tmp7);
            r80_7ff_tmp8 = simd_and(tmp6, tmp31);
            byte_a7 = simd_and(r80_7ff_tmp4, r80_7ff_tmp8);
            r80_7ff_tmp9 = simd_and(byte_c2_adv, byte_a7);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp3, tmp22);
            r80_7ff_tmp11 = simd_and(tmp6, basis_bits.bit_6);
            byte_range_b6_b7 = simd_and(r80_7ff_tmp10, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_range_b6_b7);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r80_7ff_tmp12);
            byte_bf = simd_and(r80_7ff_tmp10, tmp32);
            r80_7ff_tmp13 = simd_and(byte_c2_adv, byte_bf);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r80_7ff_tmp13);
            byte_range_c4_cf = simd_and(r80_7ff_tmp1, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 2))) {
              r100_3ff_tmp1 = simd_and(tmp15, r80_7ff_tmp5);
              byte_cd = simd_and(r80_7ff_tmp1, r100_3ff_tmp1);
              byte_range_b0_bf = r80_7ff_tmp10;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(1), r100_3ff_tmp2));
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, byte_range_b0_bf);
              byte_range_ce_cf = simd_and(r80_7ff_tmp1, tmp19);
              r100_3ff_tmp4 = simd_or(r100_3ff_tmp3, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp4) || carryQ.CarryTest(2, 1))) {
                r370_3ff_tmp1 = simd_and(tmp15, tmp11);
                byte_be = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp2;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_be);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r370_3ff_tmp2);
                byte_ce = simd_and(r80_7ff_tmp1, r370_3ff_tmp1);
                r370_3ff_tmp3 = simd_andc(r80_7ff_tmp3, tmp27);
                byte_87 = simd_and(r370_3ff_tmp3, r80_7ff_tmp8);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(2), byte_ce_adv));
                r370_3ff_tmp4 = simd_and(byte_ce_adv, byte_87);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r370_3ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, tmp38);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp14, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(3, 4))) {
              r400_5ff_tmp1 = simd_andc(tmp6, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp14, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(tmp6, tmp11);
              byte_d6 = simd_and(r80_7ff_tmp14, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp3, tmp27);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(4, 2))) {
                r500_58f_tmp1 = simd_andc(tmp6, tmp1);
                byte_d4 = simd_and(r80_7ff_tmp14, r500_58f_tmp1);
                byte_range_b0_bf = r80_7ff_tmp10;
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(4), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_and(tmp6, r80_7ff_tmp5);
                byte_d5 = simd_and(r80_7ff_tmp14, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(5, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp3, tmp38);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, basis_bits.bit_4);
                  r530_58f_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r530_58f_tmp2, r530_58f_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(5), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_9a_9f);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r530_58f_tmp4);
                  r530_58f_tmp5 = simd_and(tmp10, r80_7ff_tmp5);
                  byte_89 = simd_and(byte_range_80_8f, r530_58f_tmp5);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp6 = simd_and(byte_d6_adv, byte_89);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r530_58f_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp3, tmp27);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              byte_d7 = simd_and(r80_7ff_tmp14, r80_7ff_tmp8);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(6, 1))) {
                byte_80 = simd_andc(byte_range_80_8f, tmp28);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(6), byte_d7_adv));
                r590_5ff_tmp1 = simd_and(byte_d7_adv, byte_80);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r590_5ff_tmp1);
                r590_5ff_tmp2 = simd_andc(tmp31, tmp5);
                byte_83 = simd_and(byte_range_80_8f, r590_5ff_tmp2);
                r590_5ff_tmp3 = simd_and(byte_d7_adv, byte_83);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r590_5ff_tmp3);
                byte_86 = simd_and(byte_range_80_8f, r400_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(byte_d7_adv, byte_86);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r590_5ff_tmp4);
                r590_5ff_tmp5 = simd_andc(r80_7ff_tmp10, basis_bits.bit_4);
                r590_5ff_tmp6 = simd_not(tmp1);
                r590_5ff_tmp7 = simd_or(simd_and(basis_bits.bit_5, r590_5ff_tmp6), simd_andc(tmp31, basis_bits.bit_5));
                byte_range_b3_b4 = simd_and(r590_5ff_tmp5, r590_5ff_tmp7);
                r590_5ff_tmp8 = simd_and(byte_d7_adv, byte_range_b3_b4);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r590_5ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 4);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp14, tmp10);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(7, 3))) {
              r600_6ff_tmp1 = simd_andc(tmp10, tmp1);
              byte_d8 = simd_and(r80_7ff_tmp14, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp3, tmp27);
              r600_6ff_tmp3 = simd_and(r600_6ff_tmp2, tmp10);
              r600_6ff_tmp4 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_89_8a = simd_and(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(7), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_range_89_8a);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_andc(tmp15, basis_bits.bit_6);
              byte_range_8c_8d = simd_and(r600_6ff_tmp2, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_range_8c_8d);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp7);
              r600_6ff_tmp8 = simd_and(r80_7ff_tmp3, tmp38);
              r600_6ff_tmp9 = simd_and(tmp10, tmp31);
              byte_9b = simd_and(r600_6ff_tmp8, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_and(byte_d8_adv, byte_9b);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp10);
              byte_range_9e_9f = simd_and(r600_6ff_tmp8, tmp19);
              r600_6ff_tmp11 = simd_and(byte_d8_adv, byte_range_9e_9f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(tmp10, r80_7ff_tmp5);
              byte_d9 = simd_and(r80_7ff_tmp14, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r80_7ff_tmp4, basis_bits.bit_4);
              r600_6ff_tmp14 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_ad = simd_and(r600_6ff_tmp13, r600_6ff_tmp14);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(8), byte_d9_adv));
              r600_6ff_tmp15 = simd_and(byte_d9_adv, byte_range_aa_ad);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp15);
              byte_db = simd_and(r80_7ff_tmp14, r600_6ff_tmp9);
              r600_6ff_tmp16 = simd_andc(tmp6, tmp1);
              byte_94 = simd_and(r600_6ff_tmp8, r600_6ff_tmp16);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(9), byte_db_adv));
              r600_6ff_tmp17 = simd_and(byte_db_adv, byte_94);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r600_6ff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 3);
            }
            r80_7ff_tmp15 = simd_andc(tmp15, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp14, r80_7ff_tmp15);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(10, 2))) {
              byte_dc = simd_and(r80_7ff_tmp14, tmp16);
              r700_77f_tmp1 = simd_and(tmp15, r80_7ff_tmp5);
              byte_dd = simd_and(r80_7ff_tmp14, r700_77f_tmp1);
              byte_range_80_8f = simd_andc(r80_7ff_tmp3, tmp27);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(10), r700_77f_tmp2));
              r700_77f_tmp3 = simd_and(r700_77f_tmp2, byte_range_80_8f);
              r700_77f_tmp4 = simd_or(byte_dc, r700_77f_tmp3);
              if ((bitblock::any(r700_77f_tmp4) || carryQ.CarryTest(11, 1))) {
                r700_74f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r700_74f_tmp2 = simd_and(basis_bits.bit_4, r700_74f_tmp1);
                byte_range_80_8d = simd_andc(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(11), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_range_80_8d);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r700_74f_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
            byte_range_de_df = simd_and(r80_7ff_tmp14, tmp19);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(12, 1))) {
              byte_df = simd_and(r80_7ff_tmp14, tmp32);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(12, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_and(basis_bits.bit_5, tmp31);
                r7c0_7ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp3, basis_bits.bit_4));
                byte_range_b7_b9 = simd_and(r80_7ff_tmp10, r7c0_7ff_tmp4);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(12), byte_df_adv));
                r7c0_7ff_tmp5 = simd_and(byte_df_adv, byte_range_b7_b9);
                struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r7c0_7ff_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 13);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp3);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(13, 56))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(tmp6, tmp1);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp3 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_2, r800_ffff_tmp3);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp4);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(13), r800_ffff_tmp5));
            r800_ffff_tmp6 = simd_and(r800_ffff_tmp5, byte_range_80_b7);
            r800_ffff_tmp7 = simd_or(byte_range_e0_e3, r800_ffff_tmp6);
            if ((bitblock::any(r800_ffff_tmp7) || carryQ.CarryTest(14, 37))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(14, 27))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp28);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(14, 10))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp2, tmp3);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp28);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(14), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, tmp22);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, tmp31);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_4, r800_fff_tmp4);
                  byte_range_b0_be = simd_andc(r800_fff_tmp3, r800_fff_tmp5);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(15), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, tmp5);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp2, tmp38);
                  r800_fff_tmp10 = simd_and(tmp15, tmp11);
                  byte_9e = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(16), sequence_e0_a1_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_a1_adv, byte_9e);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(tmp6, r800_fff_tmp7);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp13 = simd_andc(tmp6, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(17), sequence_e0_a5_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_a5_adv, byte_range_a4_a5);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp14);
                  byte_b0 = simd_andc(r800_fff_tmp3, tmp28);
                  r800_fff_tmp15 = simd_and(sequence_e0_a5_adv, byte_b0);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(tmp10, tmp31);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(18), sequence_e0_ab_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_ab_adv, byte_b0);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(tmp6, tmp31);
                  byte_b7 = simd_and(r800_fff_tmp3, r800_fff_tmp18);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_b4 = simd_and(r800_fff_tmp3, r800_ffff_tmp1);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(19), sequence_e0_b7_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_b7_adv, byte_b4);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(tmp10, r800_fff_tmp7);
                  byte_b9 = simd_and(r800_fff_tmp3, r800_fff_tmp20);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp21 = simd_andc(r800_ffff_tmp2, tmp27);
                  byte_8f = simd_and(r800_fff_tmp21, tmp32);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(20), sequence_e0_b9_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_b9_adv, byte_8f);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp22);
                  byte_range_9a_9b = simd_and(r800_fff_tmp9, tmp24);
                  r800_fff_tmp23 = simd_and(sequence_e0_b9_adv, byte_range_9a_9b);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp23);
                  byte_bc = simd_and(r800_fff_tmp3, tmp16);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp24 = simd_andc(r800_ffff_tmp2, basis_bits.bit_2);
                  r800_fff_tmp25 = simd_or(tmp5, tmp31);
                  r800_fff_tmp26 = simd_not(r800_fff_tmp25);
                  r800_fff_tmp27 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp26), simd_andc(tmp5, basis_bits.bit_3));
                  byte_range_84_92 = simd_and(r800_fff_tmp24, r800_fff_tmp27);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(21), sequence_e0_bc_adv));
                  r800_fff_tmp28 = simd_and(sequence_e0_bc_adv, byte_range_84_92);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp28);
                  byte_94 = simd_and(r800_fff_tmp9, r800_ffff_tmp1);
                  r800_fff_tmp29 = simd_and(sequence_e0_bc_adv, byte_94);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp29);
                  byte_be = simd_and(r800_fff_tmp3, r800_fff_tmp10);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  byte_85 = simd_and(r800_fff_tmp21, r800_fff_tmp12);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(22), sequence_e0_be_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_be_adv, byte_85);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp30);
                  byte_bf = simd_and(r800_fff_tmp3, tmp32);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp31 = simd_andc(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp32 = simd_and(basis_bits.bit_5, tmp1);
                  byte_range_90_94 = simd_andc(r800_fff_tmp31, r800_fff_tmp32);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(23), sequence_e0_bf_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_bf_adv, byte_range_90_94);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(r800_fff_tmp9, tmp10);
                  r800_fff_tmp35 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r800_fff_tmp34, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(sequence_e0_bf_adv, byte_range_99_9a);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r800_fff_tmp36);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 10);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(24, 17))) {
                  r1000_1fff_tmp1 = simd_andc(r800_ffff_tmp2, tmp27);
                  byte_81 = simd_and(r1000_1fff_tmp1, r800_1fff_tmp2);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(24), r1000_1fff_tmp2));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp2, byte_81);
                  byte_e1_adv = r1000_1fff_tmp2;
                  r1000_1fff_tmp3 = simd_and(r1000_1fff_tmp1, basis_bits.bit_4);
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8f = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(25), sequence_e1_81_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_81_adv, byte_range_8a_8f);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_andc(tmp31, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp6);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp2, tmp22);
                  r1000_1fff_tmp8 = simd_and(tmp10, tmp31);
                  byte_bb = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp8);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(26), sequence_e1_83_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_83_adv, byte_bb);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(tmp15, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp10);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp2, tmp3);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_5, tmp1);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_4, r1000_1fff_tmp12);
                  byte_range_a0_a8 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(27), sequence_e1_8d_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_8d_adv, byte_range_a0_a8);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp2, tmp38);
                  r1000_1fff_tmp16 = simd_and(tmp10, r800_1fff_tmp1);
                  byte_99 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp11, tmp15);
                  r1000_1fff_tmp18 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_ad_ae = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(28), sequence_e1_99_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_99_adv, byte_range_ad_ae);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp19);
                  byte_9b = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp8);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp11, basis_bits.bit_4);
                  r1000_1fff_tmp21 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp21), simd_andc(tmp31, basis_bits.bit_5));
                  byte_range_ab_ad = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp22);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(29), sequence_e1_9b_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp23);
                  byte_9c = simd_and(r1000_1fff_tmp15, tmp16);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp7, tmp6);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp18);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(30), sequence_e1_9c_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp25);
                  byte_9f = simd_and(r1000_1fff_tmp15, tmp32);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp15, tmp6);
                  byte_range_94_96 = simd_andc(r1000_1fff_tmp26, tmp31);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(31), sequence_e1_9f_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_9f_adv, byte_range_94_96);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp15, tmp10);
                  byte_range_98_9a = simd_andc(r1000_1fff_tmp28, tmp31);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_9f_adv, byte_range_98_9a);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp29);
                  byte_a0 = simd_andc(r1000_1fff_tmp11, tmp28);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp30 = simd_andc(r1000_1fff_tmp1, basis_bits.bit_4);
                  r1000_1fff_tmp31 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp30, r1000_1fff_tmp31);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(32), sequence_e1_a0_adv));
                  r1000_1fff_tmp32 = simd_and(sequence_e1_a0_adv, byte_range_80_85);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_or(basis_bits.bit_5, tmp31);
                  r1000_1fff_tmp34 = simd_not(r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_5, tmp31);
                  r1000_1fff_tmp36 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp34), simd_andc(r1000_1fff_tmp35, basis_bits.bit_4));
                  byte_range_87_8a = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp36);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_a0_adv, byte_range_87_8a);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(tmp6, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp38);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp39 = simd_andc(tmp6, basis_bits.bit_6);
                  byte_range_84_85 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp39);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(33), sequence_e1_a5_adv));
                  r1000_1fff_tmp40 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp40);
                  r1000_1fff_tmp41 = simd_andc(tmp10, tmp1);
                  byte_a8 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp41);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp15, tmp19);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(34), sequence_e1_a8_adv));
                  r1000_1fff_tmp42 = simd_and(sequence_e1_a8_adv, byte_range_9e_9f);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp42);
                  byte_aa = simd_and(r1000_1fff_tmp11, tmp12);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp43 = simd_andc(r1000_1fff_tmp11, basis_bits.bit_4);
                  byte_range_a0_a6 = simd_andc(r1000_1fff_tmp43, r1000_1fff_tmp35);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(35), sequence_e1_aa_adv));
                  r1000_1fff_tmp44 = simd_and(sequence_e1_aa_adv, byte_range_a0_a6);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp44);
                  byte_range_a8_ad = simd_andc(r1000_1fff_tmp20, r1000_1fff_tmp31);
                  r1000_1fff_tmp45 = simd_and(sequence_e1_aa_adv, byte_range_a8_ad);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp45);
                  byte_ad = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp10);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp46 = simd_or(basis_bits.bit_3, tmp28);
                  r1000_1fff_tmp47 = simd_not(r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_and(basis_bits.bit_4, r1000_1fff_tmp4);
                  r1000_1fff_tmp49 = simd_and(basis_bits.bit_3, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp47), simd_andc(r1000_1fff_tmp49, basis_bits.bit_2));
                  byte_range_9a_a0 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp50);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(36), sequence_e1_ad_adv));
                  r1000_1fff_tmp51 = simd_and(sequence_e1_ad_adv, byte_range_9a_a0);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp51);
                  byte_af = simd_and(r1000_1fff_tmp11, tmp32);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp7, tmp15);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(37), sequence_e1_af_adv));
                  r1000_1fff_tmp52 = simd_and(sequence_e1_af_adv, byte_range_bc_bf);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp52);
                  byte_b0 = simd_andc(r1000_1fff_tmp7, tmp28);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp53 = simd_and(r1000_1fff_tmp7, basis_bits.bit_4);
                  byte_range_bb_bf = simd_and(r1000_1fff_tmp53, r1000_1fff_tmp33);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(38), sequence_e1_b0_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp54);
                  byte_b1 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp7, tmp19);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(39), sequence_e1_b1_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp55);
                  byte_b3 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp6);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_80_87 = r1000_1fff_tmp30;
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(40), sequence_e1_b3_adv));
                  r1000_1fff_tmp56 = simd_and(sequence_e1_b3_adv, byte_range_80_87);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp56);
                  byte_93 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp6);
                  r1000_1fff_tmp57 = simd_and(sequence_e1_b3_adv, byte_93);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r1000_1fff_tmp57);
                }
                else {
                  carryQ.CarryDequeueEnqueue(24, 17);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 27);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp6);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(41, 10))) {
                r2000_4dff_tmp1 = simd_andc(tmp11, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(41, 7))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp2, tmp27);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp28);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(41), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, tmp38);
                  r2000_2fff_tmp4 = simd_and(tmp6, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(42), sequence_e2_80_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_80_adv, byte_range_96_97);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp2, tmp3);
                  byte_range_a0_a7 = simd_andc(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_a0_a7);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp2, tmp22);
                  r2000_2fff_tmp9 = simd_or(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_4, r2000_2fff_tmp9);
                  byte_range_b0_b8 = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_80_adv, byte_range_b0_b8);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp13 = simd_xor(basis_bits.bit_5, tmp31);
                  byte_range_bb_be = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, byte_range_bb_be);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp15, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp16);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp17 = simd_andc(r2000_2fff_tmp1, tmp5);
                  byte_range_81_83 = simd_and(r2000_2fff_tmp17, tmp1);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(43), sequence_e2_81_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_81_adv, byte_range_81_83);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(r800_ffff_tmp2, basis_bits.bit_2);
                  r2000_2fff_tmp20 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_5, tmp31);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_4, r2000_2fff_tmp21);
                  r2000_2fff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp20), simd_andc(r2000_2fff_tmp22, basis_bits.bit_3));
                  byte_range_87_91 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_81_adv, byte_range_87_91);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_andc(tmp31, tmp5);
                  byte_93 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_81_adv, byte_93);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_not(r2000_2fff_tmp21);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp29 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp27), simd_andc(r2000_2fff_tmp28, basis_bits.bit_4));
                  byte_range_95_9e = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_81_adv, byte_range_95_9e);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp30);
                  byte_b3 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp25);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp31 = simd_xor(basis_bits.bit_5, tmp1);
                  byte_range_b9_bc = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp31);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(44), sequence_e2_b3_adv));
                  r2000_2fff_tmp32 = simd_and(sequence_e2_b3_adv, byte_range_b9_bc);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp32);
                  byte_range_be_bf = simd_and(r2000_2fff_tmp8, tmp19);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_b3_adv, byte_range_be_bf);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(tmp6, r2000_2fff_tmp15);
                  byte_b5 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp34);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_b0 = simd_andc(r2000_2fff_tmp8, tmp28);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(45), sequence_e2_b5_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_b5_adv, byte_b0);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_andc(tmp10, tmp1);
                  byte_b8 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp36);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_range_80_81 = simd_andc(r2000_2fff_tmp1, r800_4dff_tmp1);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(46), sequence_e2_b8_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_b8_adv, byte_range_80_81);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_not(r2000_2fff_tmp9);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp40 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp38), simd_andc(r2000_2fff_tmp39, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_b8_adv, byte_range_86_88);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(tmp10, tmp31);
                  byte_8b = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_b8_adv, byte_8b);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp45 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp44), simd_andc(tmp19, basis_bits.bit_3));
                  byte_range_8e_96 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp45);
                  r2000_2fff_tmp46 = simd_and(sequence_e2_b8_adv, byte_range_8e_96);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_andc(tmp10, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_and(sequence_e2_b8_adv, byte_range_98_99);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp48);
                  byte_9b = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp42);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_b8_adv, byte_9b);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp49);
                  byte_range_9e_9f = simd_and(r2000_2fff_tmp3, tmp19);
                  r2000_2fff_tmp50 = simd_and(sequence_e2_b8_adv, byte_range_9e_9f);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp52 = simd_not(tmp31);
                  r2000_2fff_tmp53 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp52), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_aa_ae = simd_and(r2000_2fff_tmp51, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_and(sequence_e2_b8_adv, byte_range_aa_ae);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp54);
                  r2000_2fff_tmp55 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp56 = simd_and(basis_bits.bit_4, r2000_2fff_tmp55);
                  byte_range_b0_b9 = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp56);
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b8_adv, byte_range_b0_b9);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp57);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp8, tmp15);
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b8_adv, byte_range_bc_bf);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp58);
                  r2000_2fff_tmp59 = simd_and(tmp10, r2000_2fff_tmp15);
                  byte_b9 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp59);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(47), sequence_e2_b9_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b9_adv, byte_81);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r2000_2fff_tmp60);
                }
                else {
                  carryQ.CarryDequeueEnqueue(41, 7);
                }
                r2000_4dff_tmp2 = simd_andc(tmp31, tmp5);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp6);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(48, 3))) {
                  r3000_4dff_tmp1 = simd_andc(r800_ffff_tmp2, tmp27);
                  byte_80 = simd_andc(r3000_4dff_tmp1, tmp28);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(48), r3000_4dff_tmp2));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp2, byte_80);
                  byte_e3_adv = r3000_4dff_tmp2;
                  r3000_4dff_tmp3 = simd_andc(r3000_4dff_tmp1, tmp5);
                  byte_range_81_83 = simd_and(r3000_4dff_tmp3, tmp1);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(49), sequence_e3_80_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e3_80_adv, byte_range_81_83);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r3000_4dff_tmp4);
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp2, tmp22);
                  r3000_4dff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp7 = simd_and(tmp15, r3000_4dff_tmp6);
                  byte_bd = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_bd);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r3000_4dff_tmp8);
                  byte_83 = simd_and(r3000_4dff_tmp1, r2000_4dff_tmp2);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp9 = simd_and(tmp10, tmp31);
                  byte_bb = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp9);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(50), sequence_e3_83_adv));
                  r3000_4dff_tmp10 = simd_and(sequence_e3_83_adv, byte_bb);
                  struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r3000_4dff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(48, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(41, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 37);
            }
            r800_ffff_tmp8 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp8, r800_ffff_tmp9);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(51, 18))) {
              byte_ea = simd_and(byte_range_e0_ef, tmp12);
              ra000_ffff_tmp1 = simd_and(r800_ffff_tmp2, tmp38);
              ra000_ffff_tmp2 = simd_andc(tmp31, tmp5);
              byte_93 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(51), ra000_ffff_tmp3));
              sequence_ea_93 = simd_and(ra000_ffff_tmp3, byte_93);
              byte_ea_adv = ra000_ffff_tmp3;
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp2, tmp22);
              byte_range_be_bf = simd_and(ra000_ffff_tmp4, tmp19);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(52), sequence_ea_93_adv));
              ra000_ffff_tmp5 = simd_and(sequence_ea_93_adv, byte_range_be_bf);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp5);
              ra000_ffff_tmp6 = simd_andc(tmp10, tmp1);
              byte_98 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp7 = simd_andc(r800_ffff_tmp2, tmp27);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp7, tmp15);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp8, tmp1);
              carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(53), sequence_ea_98_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_98_adv, byte_range_8d_8f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(tmp10, ra000_ffff_tmp10);
              byte_99 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              byte_b3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp2);
              carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(54), sequence_ea_99_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_99_adv, byte_b3);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(tmp15, tmp11);
              byte_be = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, byte_be);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(tmp10, tmp31);
              byte_9b = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp15);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp16, r800_ffff_tmp9);
              carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(55), sequence_ea_9b_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_9b_adv, byte_range_b2_b7);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp2, tmp3);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp10, tmp5);
              byte_a1 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp19);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              byte_range_b4_b7 = simd_and(ra000_ffff_tmp4, tmp6);
              carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(56), sequence_ea_a1_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a1_adv, byte_range_b4_b7);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp20);
              byte_a3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp2);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp7, tmp19);
              carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(57), sequence_ea_a3_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a3_adv, byte_range_8e_8f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp4, tmp10);
              byte_range_b8_ba = simd_andc(ra000_ffff_tmp22, tmp31);
              ra000_ffff_tmp23 = simd_and(sequence_ea_a3_adv, byte_range_b8_ba);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp23);
              byte_a4 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp1);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              byte_range_ae_af = simd_and(ra000_ffff_tmp18, tmp19);
              carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(58), sequence_ea_a4_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_a4_adv, byte_range_ae_af);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(tmp6, ra000_ffff_tmp10);
              byte_a5 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp25);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_9f = simd_and(ra000_ffff_tmp1, tmp32);
              carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(59), sequence_ea_a5_adv));
              ra000_ffff_tmp26 = simd_and(sequence_ea_a5_adv, byte_9f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(tmp6, tmp31);
              byte_a7 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp27);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp28 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp29 = simd_not(ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp29), simd_andc(ra000_ffff_tmp30, basis_bits.bit_4));
              byte_range_81_8d = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp31);
              carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(60), sequence_ea_a7_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ea_a7_adv, byte_range_81_8d);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp32);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp1, tmp19);
              ra000_ffff_tmp33 = simd_and(sequence_ea_a7_adv, byte_range_9e_9f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp33);
              byte_a9 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp11);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp1, tmp15);
              carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(61), sequence_ea_a9_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ea_a9_adv, byte_range_9c_9f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp34);
              byte_ab = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp15);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(62), sequence_ea_ab_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_ab_adv, byte_range_9e_9f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(sequence_ea_ab_adv, byte_range_b0_b1);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp37);
              byte_af = simd_and(ra000_ffff_tmp18, tmp32);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(63), sequence_ea_af_adv));
              ra000_ffff_tmp38 = simd_and(sequence_ea_af_adv, byte_ab);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp38);
              byte_ef = simd_and(byte_range_e0_ef, tmp32);
              byte_b8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(64), ra000_ffff_tmp39));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp39, byte_b8);
              byte_ef_adv = ra000_ffff_tmp39;
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_4);
              ra000_ffff_tmp41 = simd_and(basis_bits.bit_5, tmp31);
              byte_range_90_96 = simd_andc(ra000_ffff_tmp40, ra000_ffff_tmp41);
              carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(65), sequence_ef_b8_adv));
              ra000_ffff_tmp42 = simd_and(sequence_ef_b8_adv, byte_range_90_96);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp42);
              ra000_ffff_tmp43 = simd_and(sequence_ef_b8_adv, byte_99);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp43);
              byte_b0 = simd_andc(ra000_ffff_tmp4, tmp28);
              ra000_ffff_tmp44 = simd_and(sequence_ef_b8_adv, byte_b0);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp44);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp45 = simd_and(ra000_ffff_tmp7, tmp6);
              ra000_ffff_tmp46 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_85_86 = simd_and(ra000_ffff_tmp45, ra000_ffff_tmp46);
              carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(66), sequence_ef_b9_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ef_b9_adv, byte_range_85_86);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp7, basis_bits.bit_4);
              ra000_ffff_tmp49 = simd_xor(basis_bits.bit_5, tmp1);
              byte_range_89_8c = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp49);
              ra000_ffff_tmp50 = simd_and(sequence_ef_b9_adv, byte_range_89_8c);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_andc(ra000_ffff_tmp1, tmp5);
              byte_range_90_92 = simd_andc(ra000_ffff_tmp51, tmp31);
              ra000_ffff_tmp52 = simd_and(sequence_ef_b9_adv, byte_range_90_92);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp52);
              byte_range_94_97 = simd_and(ra000_ffff_tmp1, tmp6);
              ra000_ffff_tmp53 = simd_and(sequence_ef_b9_adv, byte_range_94_97);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_or(basis_bits.bit_3, ra000_ffff_tmp36);
              ra000_ffff_tmp55 = simd_not(ra000_ffff_tmp54);
              ra000_ffff_tmp56 = simd_and(basis_bits.bit_3, tmp32);
              ra000_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp55), simd_andc(ra000_ffff_tmp56, basis_bits.bit_2));
              byte_range_9f_a1 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp57);
              ra000_ffff_tmp58 = simd_and(sequence_ef_b9_adv, byte_range_9f_a1);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp58);
              byte_a8 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp6);
              ra000_ffff_tmp59 = simd_and(sequence_ef_b9_adv, byte_a8);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp59);
              byte_range_aa_ab = simd_and(ra000_ffff_tmp18, tmp24);
              ra000_ffff_tmp60 = simd_and(sequence_ef_b9_adv, byte_range_aa_ab);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp60);
              byte_bc = simd_and(ra000_ffff_tmp4, tmp16);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp61 = simd_andc(ra000_ffff_tmp7, tmp5);
              byte_range_81_83 = simd_and(ra000_ffff_tmp61, tmp1);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(67), sequence_ef_bc_adv));
              ra000_ffff_tmp62 = simd_and(sequence_ef_bc_adv, byte_range_81_83);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp62);
              byte_range_85_87 = simd_and(ra000_ffff_tmp45, tmp1);
              ra000_ffff_tmp63 = simd_and(sequence_ef_bc_adv, byte_range_85_87);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp63);
              byte_8a = simd_and(ra000_ffff_tmp7, tmp12);
              ra000_ffff_tmp64 = simd_and(sequence_ef_bc_adv, byte_8a);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp64);
              byte_8c = simd_and(ra000_ffff_tmp7, tmp16);
              ra000_ffff_tmp65 = simd_and(sequence_ef_bc_adv, byte_8c);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp65);
              ra000_ffff_tmp66 = simd_and(sequence_ef_bc_adv, byte_range_8e_8f);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp66);
              byte_range_9a_9b = simd_and(ra000_ffff_tmp1, tmp24);
              ra000_ffff_tmp67 = simd_and(sequence_ef_bc_adv, byte_range_9a_9b);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_or(basis_bits.bit_3, tmp28);
              ra000_ffff_tmp69 = simd_not(ra000_ffff_tmp68);
              ra000_ffff_tmp70 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp69), simd_andc(ra000_ffff_tmp56, basis_bits.bit_2));
              byte_range_9f_a0 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_and(sequence_ef_bc_adv, byte_range_9f_a0);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp71);
              ra000_ffff_tmp72 = simd_and(sequence_ef_bc_adv, byte_bc);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp72);
              ra000_ffff_tmp73 = simd_and(tmp15, ra000_ffff_tmp10);
              byte_bd = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp73);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(68), sequence_ef_bd_adv));
              ra000_ffff_tmp74 = simd_and(sequence_ef_bd_adv, byte_a1);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp74);
              ra000_ffff_tmp75 = simd_andc(tmp6, basis_bits.bit_6);
              byte_range_a4_a5 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp75);
              ra000_ffff_tmp76 = simd_and(sequence_ef_bd_adv, byte_range_a4_a5);
              struct_gc_Po.cc = simd_or(struct_gc_Po.cc, ra000_ffff_tmp76);
            }
            else {
              carryQ.CarryDequeueEnqueue(51, 18);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(13, 56);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp22);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(69, 31))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp28);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp38);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp28);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(69), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            r10000_10ffff_tmp4 = simd_andc(r10000_10ffff_tmp1, tmp27);
            r10000_10ffff_tmp5 = simd_andc(tmp6, tmp1);
            byte_84 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(70), r10000_10ffff_tmp6));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp6, byte_84);
            byte_f0_adv = r10000_10ffff_tmp3;
            sequence_f0_90_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_andc(r10000_10ffff_tmp4, tmp5);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp7, tmp31);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(71), sequence_f0_90_84_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_84_adv, byte_range_80_82);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_and(tmp15, tmp11);
            byte_8e = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp9);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            byte_9f = simd_and(r10000_10ffff_tmp2, tmp32);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(72), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_8e_adv, byte_9f);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp10);
            byte_8f = simd_and(r10000_10ffff_tmp4, tmp32);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(73), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_8f_adv, byte_90);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp11);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_and(tmp6, r10000_10ffff_tmp12);
            byte_95 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp13);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp1, tmp3);
            byte_af = simd_and(r10000_10ffff_tmp14, tmp32);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(74), sequence_f0_90_95_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_95_adv, byte_af);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp12, tmp5);
            byte_a1 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            r10000_10ffff_tmp17 = simd_and(tmp6, tmp31);
            byte_97 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp17);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(75), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_a1_adv, byte_97);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp18);
            byte_a4 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp5);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(76), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_a4_adv, byte_9f);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp1, tmp22);
            byte_bf = simd_and(r10000_10ffff_tmp20, tmp32);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_a4_adv, byte_bf);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(tmp10, r10000_10ffff_tmp12);
            byte_a9 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp22);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_90_98 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp24);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(77), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_90_a9_adv, byte_range_90_98);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_a9_adv, byte_bf);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(tmp10, tmp31);
            byte_ab = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp27);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp20, basis_bits.bit_4);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_5, tmp31);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(78), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_ab_adv, byte_range_b0_b6);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp30);
            byte_ac = simd_and(r10000_10ffff_tmp14, tmp16);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp20, basis_bits.bit_4);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp23);
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(79), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_ac_adv, byte_range_b9_bf);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp32);
            byte_ae = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp9);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp2, basis_bits.bit_4);
            r10000_10ffff_tmp34 = simd_xor(basis_bits.bit_5, tmp1);
            byte_range_99_9c = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp34);
            carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(80), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_90_ae_adv, byte_range_99_9c);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp35);
            byte_91 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp16);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_81 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp16);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(81), r10000_10ffff_tmp36));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp36, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp36;
            r10000_10ffff_tmp37 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp38 = simd_not(r10000_10ffff_tmp37);
            r10000_10ffff_tmp39 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp38), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_87_8d = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp39);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(82), sequence_f0_91_81_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_91_81_adv, byte_range_87_8d);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_andc(tmp11, tmp5);
            byte_82 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp41);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp42 = simd_not(tmp1);
            r10000_10ffff_tmp43 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp42), simd_andc(tmp31, basis_bits.bit_5));
            byte_range_bb_bc = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp43);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(83), sequence_f0_91_82_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_82_adv, byte_range_bb_bc);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp44);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp20, tmp19);
            r10000_10ffff_tmp45 = simd_and(sequence_f0_91_82_adv, byte_range_be_bf);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_andc(tmp31, tmp5);
            byte_83 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp46);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp47 = simd_or(tmp5, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp47);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(84), sequence_f0_91_83_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp48);
            byte_85 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp13);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_80_83 = r10000_10ffff_tmp7;
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(85), sequence_f0_91_85_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_91_85_adv, byte_range_80_83);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_andc(tmp6, basis_bits.bit_6);
            byte_range_b4_b5 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_and(sequence_f0_91_85_adv, byte_range_b4_b5);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp51);
            byte_87 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp52 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp53 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp54 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp52), simd_andc(r10000_10ffff_tmp53, basis_bits.bit_4));
            byte_range_85_88 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp54);
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(86), sequence_f0_91_87_adv));
            r10000_10ffff_tmp55 = simd_and(sequence_f0_91_87_adv, byte_range_85_88);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_and(tmp15, r10000_10ffff_tmp12);
            byte_8d = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(sequence_f0_91_87_adv, byte_8d);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_andc(tmp10, tmp1);
            byte_88 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp58);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            byte_range_b8_bd = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp37);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(87), sequence_f0_91_88_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_91_88_adv, byte_range_b8_bd);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp59);
            byte_93 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp46);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp60 = simd_and(tmp6, tmp11);
            byte_86 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp60);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(88), sequence_f0_91_93_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_91_93_adv, byte_86);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp61);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp63 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp63), simd_andc(r10000_10ffff_tmp23, basis_bits.bit_4));
            byte_range_81_89 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp64);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(89), sequence_f0_91_97_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_91_97_adv, byte_range_81_89);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp65);
            byte_99 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp22);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_81_83 = simd_and(byte_range_80_83, tmp1);
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(90), sequence_f0_91_99_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_91_99_adv, byte_range_81_83);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp66);
            byte_92 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp41);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(91), r10000_10ffff_tmp67));
            sequence_f0_92_91 = simd_and(r10000_10ffff_tmp67, byte_91);
            sequence_f0_92_adv = r10000_10ffff_tmp67;
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp53);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(92), sequence_f0_92_91_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b4);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp68);
            byte_96 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp60);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(93), r10000_10ffff_tmp69));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp69, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp69;
            byte_range_ae_af = simd_and(r10000_10ffff_tmp14, tmp19);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(94), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp70 = simd_and(sequence_f0_96_a9_adv, byte_range_ae_af);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp70);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            byte_b5 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp13);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(95), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_96_ab_adv, byte_b5);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp71);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            r10000_10ffff_tmp72 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp72), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_b7_bb = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp73);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(96), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp74 = simd_and(sequence_f0_96_ac_adv, byte_range_b7_bb);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp74);
            byte_ad = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp56);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(97), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp75 = simd_and(sequence_f0_96_ad_adv, byte_84);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp75);
            byte_9b = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp27);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp41);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(98), r10000_10ffff_tmp76));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp76, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp76;
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(99), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9b_b2_adv, byte_9f);
            struct_gc_Po.cc = simd_or(struct_gc_Po.cc, r10000_10ffff_tmp77);
          }
          else {
            carryQ.CarryDequeueEnqueue(69, 31);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 100);
        }
        carryQ.CarryQ_Adjust(100);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<100, 0> carryQ;
  };

  struct Property_gc_Pi {
  Property_gc_Pi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Pi & struct_gc_Pi) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_ab, byte_c2_adv, r80_7ff_tmp12, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e2_e3;
		BitBlock r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_98;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock byte_range_9b_9c, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, byte_9f, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, r2000_2fff_tmp21, byte_b9;
		BitBlock r2000_2fff_tmp22, byte_b8, sequence_e2_b8, byte_82;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp23, byte_84, r2000_2fff_tmp24;
		BitBlock byte_89, r2000_2fff_tmp25, r2000_2fff_tmp26, byte_8c;
		BitBlock r2000_2fff_tmp27, byte_9c, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock byte_a0, r2000_2fff_tmp30;




        struct_gc_Pi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_ab = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ab);
            struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r80_7ff_tmp12);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(2, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(2, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp8 = simd_andc(r2000_2fff_tmp7, r800_ffff_tmp3);
                  byte_98 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp8);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_80_adv, byte_98);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp11 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp13 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(r2000_2fff_tmp12, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, byte_range_9b_9c);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp12);
                  byte_9f = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_80_adv, byte_9f);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp20);
                  byte_b9 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_80_adv, byte_b9);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp22);
                  byte_b8 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp8);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b8_adv, byte_82);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp23);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_b8_adv, byte_84);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp24);
                  byte_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp21);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_b8_adv, byte_89);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_andc(r2000_2fff_tmp15, r800_ffff_tmp3);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_b8_adv, byte_8c);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp27);
                  byte_9c = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(sequence_e2_b8_adv, byte_9c);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r2000_2fff_tmp29, r2000_2fff_tmp3);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_b8_adv, byte_a0);
                  struct_gc_Pi.cc = simd_or(struct_gc_Pi.cc, r2000_2fff_tmp30);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_gc_Z {
  Property_gc_Z() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Z & struct_gc_Z) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_20, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_c2, r80_7ff_tmp5, r80_7ff_tmp6, byte_a0;
		BitBlock byte_c2_adv, r80_7ff_tmp7, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock byte_9a, r1000_1fff_tmp6, sequence_e1_9a, byte_e1_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_80, sequence_e1_9a_adv;
		BitBlock r1000_1fff_tmp9, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_80, byte_e2_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, byte_range_80_8a;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, byte_range_a8_a9, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, byte_af, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_81, sequence_e2_81;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, byte_9f, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp19, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock sequence_e3_80, byte_e3_adv, sequence_e3_80_adv, r3000_4dff_tmp4;




        struct_gc_Z.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_20 = simd_andc(tmp3, tmp6);
        struct_gc_Z.cc = simd_or(struct_gc_Z.cc, byte_20);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 9))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp4);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
            byte_a0 = simd_andc(r80_7ff_tmp6, tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a0);
            struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r80_7ff_tmp7);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 8))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp5);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(2, 7))) {
              r800_4dff_tmp1 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp4);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(2, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp7);
                  byte_80 = simd_andc(r1000_1fff_tmp8, tmp6);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(3), sequence_e1_9a_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_9a_adv, byte_80);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(4, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp4);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(4, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r2000_2fff_tmp3));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp3, byte_80);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_or(basis_bits.bit_5, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, r2000_2fff_tmp5);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(5), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_80_8a);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp3, tmp2);
                  r2000_2fff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp9, basis_bits.bit_6);
                  byte_range_a8_a9 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_80_adv, byte_range_a8_a9);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp4);
                  byte_af = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, byte_af);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp15, tmp4);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp17);
                  byte_9f = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp13);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(6), sequence_e2_81_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_81_adv, byte_9f);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r2000_2fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(7, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp6);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(7), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(8), sequence_e3_80_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e3_80_adv, byte_80);
                  struct_gc_Z.cc = simd_or(struct_gc_Z.cc, r3000_4dff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<9, 0> carryQ;
  };

  struct Property_gc_Pe {
  Property_gc_Pe() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Pe & struct_gc_Pe) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_29_7d_1;
		BitBlock byte_range_c0_ff, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, byte_e0, r800_fff_tmp1;
		BitBlock r800_fff_tmp2, byte_bc, r800_fff_tmp3, sequence_e0_bc, byte_e0_adv;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_bb, sequence_e0_bc_adv;
		BitBlock r800_fff_tmp6, byte_bd, r800_fff_tmp7, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_9a;
		BitBlock r1000_1fff_tmp4, sequence_e1_9a, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock byte_9c, sequence_e1_9a_adv, r1000_1fff_tmp6, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_81;
		BitBlock r2000_2fff_tmp4, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock byte_86, sequence_e2_81_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, byte_be, r2000_2fff_tmp9, byte_82, sequence_e2_82;
		BitBlock byte_8e, sequence_e2_82_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock byte_8c, sequence_e2_8c, byte_89, sequence_e2_8c_adv;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14, byte_8b;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, r2000_2fff_tmp17, byte_aa;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, byte_9d, sequence_e2_9d, byte_a9;
		BitBlock sequence_e2_9d_adv, r2000_2fff_tmp20, byte_ab, r2000_2fff_tmp21;
		BitBlock byte_ad, r2000_2fff_tmp22, r2000_2fff_tmp23, byte_af;
		BitBlock r2000_2fff_tmp24, byte_b1, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock byte_b3, r2000_2fff_tmp27, r2000_2fff_tmp28, byte_b5;
		BitBlock r2000_2fff_tmp29, byte_9f, sequence_e2_9f, sequence_e2_9f_adv;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, byte_a7, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, byte_a6, sequence_e2_a6, byte_84;
		BitBlock sequence_e2_a6_adv, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, byte_88, r2000_2fff_tmp40, byte_8a;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, byte_90, r2000_2fff_tmp45, byte_92;
		BitBlock r2000_2fff_tmp46, byte_94, r2000_2fff_tmp47, byte_96;
		BitBlock r2000_2fff_tmp48, byte_98, r2000_2fff_tmp49, sequence_e2_a7, byte_99;
		BitBlock sequence_e2_a7_adv, r2000_2fff_tmp50, byte_9b, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, byte_b8, sequence_e2_b8, byte_a3;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp53, byte_a5, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, r2000_4dff_tmp3, r2000_4dff_tmp4;
		BitBlock byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2;
		BitBlock r3000_4dff_tmp3, byte_80, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, sequence_e3_80_adv, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, byte_8d, r3000_4dff_tmp8, r3000_4dff_tmp9, byte_8f;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12, byte_91;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, byte_95, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, byte_97, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, byte_range_9e_9f;
		BitBlock r3000_4dff_tmp21, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3, byte_b4;
		BitBlock ra000_ffff_tmp4, sequence_ef_b4, byte_ef_adv, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, sequence_ef_b4_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock sequence_ef_b8, ra000_ffff_tmp9, sequence_ef_b8_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_b6, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_ba, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, byte_b9, sequence_ef_b9;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, byte_9e, ra000_ffff_tmp29;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, sequence_ef_bd, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, byte_a0, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36;




        struct_gc_Pe.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp12 = simd_and(tmp11, tmp5);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_29_7d_1 = simd_or(tmp14, tmp17);
        struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, cc_range_29_7d_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 22))) {
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 22))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 15))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, tmp15);
                  r800_fff_tmp2 = simd_andc(tmp11, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp1, r800_fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  sequence_e0_bc = simd_and(r800_fff_tmp3, byte_bc);
                  byte_e0_adv = r800_fff_tmp3;
                  r800_fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp5 = simd_and(tmp4, r800_fff_tmp4);
                  byte_bb = simd_and(r800_fff_tmp1, r800_fff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_bc_adv, byte_bb);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r800_fff_tmp6);
                  byte_bd = simd_and(r800_fff_tmp1, tmp12);
                  r800_fff_tmp7 = simd_and(sequence_e0_bc_adv, byte_bd);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r800_fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
                r800_1fff_tmp2 = simd_andc(tmp5, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(3, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, tmp9);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_and(tmp4, r1000_1fff_tmp2);
                  byte_9a = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r1000_1fff_tmp4));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp4, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_andc(tmp11, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp5);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(4), sequence_e1_9a_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_9a_adv, byte_9c);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(5, 11))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(5, 9))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(tmp5, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), r2000_2fff_tmp4));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp4, byte_81);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(6), sequence_e2_81_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_81_adv, byte_86);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, tmp15);
                  r2000_2fff_tmp8 = simd_and(tmp11, r2000_4dff_tmp1);
                  byte_be = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(sequence_e2_81_adv, byte_be);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp9);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp8);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(7), sequence_e2_82_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_82_adv, byte_8e);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_andc(tmp11, r800_ffff_tmp3);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp11);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_89 = simd_and(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(8), sequence_e2_8c_adv));
                  r2000_2fff_tmp12 = simd_and(sequence_e2_8c_adv, byte_89);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp14 = simd_and(tmp4, r2000_2fff_tmp13);
                  byte_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_and(sequence_e2_8c_adv, byte_8b);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp5, tmp2);
                  r2000_2fff_tmp17 = simd_and(tmp4, r2000_4dff_tmp1);
                  byte_aa = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(sequence_e2_8c_adv, byte_aa);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp5, tmp9);
                  byte_9d = simd_and(r2000_2fff_tmp19, tmp12);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  byte_a9 = simd_and(r2000_2fff_tmp16, tmp6);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(9), sequence_e2_9d_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_9d_adv, byte_a9);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp20);
                  byte_ab = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp14);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_9d_adv, byte_ab);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp21);
                  byte_ad = simd_and(r2000_2fff_tmp16, tmp12);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_9d_adv, byte_ad);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(tmp11, r2000_2fff_tmp13);
                  byte_af = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_9d_adv, byte_af);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp24);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp3);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_9d_adv, byte_b1);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_andc(r2000_2fff_tmp13, r800_ffff_tmp1);
                  byte_b3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_9d_adv, byte_b3);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(r800_ffff_tmp2, tmp5);
                  byte_b5 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_9d_adv, byte_b5);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp29);
                  byte_9f = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp23);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(10), sequence_e2_9f_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_9f_adv, byte_86);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp13);
                  byte_a7 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_and(sequence_e2_9f_adv, byte_a7);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp32);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_9f_adv, byte_a9);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(sequence_e2_9f_adv, byte_ab);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp34);
                  r2000_2fff_tmp35 = simd_and(sequence_e2_9f_adv, byte_ad);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(sequence_e2_9f_adv, byte_af);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp36);
                  byte_a6 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp5);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(11), sequence_e2_a6_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_a6_adv, byte_84);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_a6_adv, byte_86);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_andc(tmp4, r800_ffff_tmp3);
                  byte_88 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp39);
                  r2000_2fff_tmp40 = simd_and(sequence_e2_a6_adv, byte_88);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp40);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_a6_adv, byte_8a);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(sequence_e2_a6_adv, byte_8c);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_a6_adv, byte_8e);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r2000_2fff_tmp19, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(sequence_e2_a6_adv, byte_90);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp45);
                  byte_92 = simd_and(r2000_2fff_tmp19, r2000_4dff_tmp2);
                  r2000_2fff_tmp46 = simd_and(sequence_e2_a6_adv, byte_92);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp46);
                  byte_94 = simd_and(r2000_2fff_tmp19, r800_ffff_tmp4);
                  r2000_2fff_tmp47 = simd_and(sequence_e2_a6_adv, byte_94);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp47);
                  byte_96 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp5);
                  r2000_2fff_tmp48 = simd_and(sequence_e2_a6_adv, byte_96);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp48);
                  byte_98 = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp39);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_a6_adv, byte_98);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp49);
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  byte_99 = simd_and(r2000_2fff_tmp19, tmp6);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(12), sequence_e2_a7_adv));
                  r2000_2fff_tmp50 = simd_and(sequence_e2_a7_adv, byte_99);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp50);
                  byte_9b = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp14);
                  r2000_2fff_tmp51 = simd_and(sequence_e2_a7_adv, byte_9b);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp51);
                  byte_bd = simd_and(r2000_2fff_tmp7, tmp12);
                  r2000_2fff_tmp52 = simd_and(sequence_e2_a7_adv, byte_bd);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp52);
                  byte_b8 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp39);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_a3 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp26);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(13), sequence_e2_b8_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_b8_adv, byte_a3);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp53);
                  byte_a5 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp28);
                  r2000_2fff_tmp54 = simd_and(sequence_e2_b8_adv, byte_a5);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp54);
                  r2000_2fff_tmp55 = simd_and(sequence_e2_b8_adv, byte_a7);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(sequence_e2_b8_adv, byte_a9);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r2000_2fff_tmp56);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 9);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(14, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  byte_89 = simd_and(r3000_4dff_tmp2, tmp6);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_89);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp5);
                  r3000_4dff_tmp6 = simd_and(tmp4, r2000_4dff_tmp3);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_8b);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp7);
                  byte_8d = simd_and(r3000_4dff_tmp2, tmp12);
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_8d);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(tmp11, r2000_4dff_tmp3);
                  byte_8f = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, byte_8f);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp5, tmp9);
                  r3000_4dff_tmp12 = simd_andc(tmp5, r800_ffff_tmp1);
                  byte_91 = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(sequence_e3_80_adv, byte_91);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp13);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp2, tmp5);
                  byte_95 = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp14);
                  r3000_4dff_tmp15 = simd_and(sequence_e3_80_adv, byte_95);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_97 = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_and(sequence_e3_80_adv, byte_97);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp17);
                  byte_99 = simd_and(r3000_4dff_tmp11, tmp6);
                  r3000_4dff_tmp18 = simd_and(sequence_e3_80_adv, byte_99);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp18);
                  byte_9b = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp6);
                  r3000_4dff_tmp19 = simd_and(sequence_e3_80_adv, byte_9b);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp19);
                  r3000_4dff_tmp20 = simd_and(tmp11, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp20);
                  r3000_4dff_tmp21 = simd_and(sequence_e3_80_adv, byte_range_9e_9f);
                  struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, r3000_4dff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 11);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 15);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(16, 6))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp11, ra000_ffff_tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp5, tmp15);
              byte_b4 = simd_and(ra000_ffff_tmp3, r800_ffff_tmp4);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), ra000_ffff_tmp4));
              sequence_ef_b4 = simd_and(ra000_ffff_tmp4, byte_b4);
              byte_ef_adv = ra000_ffff_tmp4;
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp6 = simd_and(tmp11, ra000_ffff_tmp5);
              byte_be = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp6);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(17), sequence_ef_b4_adv));
              ra000_ffff_tmp7 = simd_and(sequence_ef_b4_adv, byte_be);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp8);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, tmp9);
              byte_98 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp8);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(18), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_98);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp5);
              byte_b6 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(sequence_ef_b8_adv, byte_b6);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(sequence_ef_b8_adv, byte_b8);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(tmp4, ra000_ffff_tmp5);
              byte_ba = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(sequence_ef_b8_adv, byte_ba);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(tmp11, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(sequence_ef_b8_adv, byte_bc);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ef_b8_adv, byte_be);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp18);
              byte_b9 = simd_and(ra000_ffff_tmp3, tmp6);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp20 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(ra000_ffff_tmp20, ra000_ffff_tmp21);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(19), sequence_ef_b9_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ef_b9_adv, byte_80);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp1);
              byte_82 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ef_b9_adv, byte_82);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp24);
              byte_84 = simd_and(ra000_ffff_tmp20, r800_ffff_tmp4);
              ra000_ffff_tmp25 = simd_and(sequence_ef_b9_adv, byte_84);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp25);
              byte_88 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp8);
              ra000_ffff_tmp26 = simd_and(sequence_ef_b9_adv, byte_88);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp26);
              byte_9a = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp14);
              ra000_ffff_tmp27 = simd_and(sequence_ef_b9_adv, byte_9a);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp27);
              byte_9c = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp16);
              ra000_ffff_tmp28 = simd_and(sequence_ef_b9_adv, byte_9c);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp28);
              byte_9e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              ra000_ffff_tmp29 = simd_and(sequence_ef_b9_adv, byte_9e);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp29);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_89 = simd_and(ra000_ffff_tmp20, tmp6);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(20), sequence_ef_bc_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ef_bc_adv, byte_89);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp30);
              byte_bd = simd_and(ra000_ffff_tmp3, tmp12);
              ra000_ffff_tmp31 = simd_and(sequence_ef_bc_adv, byte_bd);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp31);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_9d = simd_and(ra000_ffff_tmp9, tmp12);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(21), sequence_ef_bd_adv));
              ra000_ffff_tmp32 = simd_and(sequence_ef_bd_adv, byte_9d);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp5, tmp2);
              byte_a0 = simd_andc(ra000_ffff_tmp33, ra000_ffff_tmp21);
              ra000_ffff_tmp34 = simd_and(sequence_ef_bd_adv, byte_a0);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_and(sequence_ef_bd_adv, byte_a3);
              struct_gc_Pe.cc = simd_or(struct_gc_Pe.cc, ra000_ffff_tmp36);
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 22);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 22);
        }
        carryQ.CarryQ_Adjust(22);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<22, 0> carryQ;
  };

  struct Property_gc_Pd {
  Property_gc_Pd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Pd & struct_gc_Pd) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_2d, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock byte_range_80_8f, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3;
		BitBlock byte_range_b0_bf, r500_58f_tmp4, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock byte_d5, r500_58f_tmp7, r500_58f_tmp8, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock byte_8a, byte_d6_adv, r530_58f_tmp3, byte_range_90_bf, r400_5ff_tmp10;
		BitBlock r400_5ff_tmp11, r400_5ff_tmp12, byte_d7, r400_5ff_tmp13;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, byte_be, r590_5ff_tmp4;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, byte_90, r1000_1fff_tmp4, sequence_e1_90;
		BitBlock byte_e1_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_80;
		BitBlock sequence_e1_90_adv, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_a0;
		BitBlock sequence_e1_a0, r1000_1fff_tmp9, r1000_1fff_tmp10, byte_86;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp11, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_range_90_95;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_b8;
		BitBlock sequence_e2_b8, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_97;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp16, r2000_2fff_tmp17, byte_9a;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, byte_range_ba_bb;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, byte_b9, sequence_e2_b9;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp22, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock byte_9c, sequence_e3_80_adv, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, byte_b0, r3000_4dff_tmp11, byte_82, sequence_e3_82;
		BitBlock r3000_4dff_tmp12, sequence_e3_82_adv, r3000_4dff_tmp13;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, sequence_ef_b8;
		BitBlock byte_ef_adv, ra000_ffff_tmp8, ra000_ffff_tmp9, byte_range_b1_b2;
		BitBlock sequence_ef_b8_adv, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock sequence_ef_b9, ra000_ffff_tmp12, ra000_ffff_tmp13, byte_98;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_a3, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock byte_bc, sequence_ef_bc, ra000_ffff_tmp19, ra000_ffff_tmp20, byte_8d;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp21;




        struct_gc_Pd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        byte_2d = simd_and(tmp3, tmp6);
        struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, byte_2d);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 17))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r400_5ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp7));
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp7, byte_range_80_8f);
              r400_5ff_tmp9 = simd_or(byte_range_d4_d5, r400_5ff_tmp8);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_and(r400_5ff_tmp1, tmp5);
                byte_d5 = simd_and(r80_7ff_tmp2, r500_58f_tmp6);
                r500_58f_tmp7 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp8 = simd_or(r500_58f_tmp7, r400_5ff_tmp8);
                if (bitblock::any(r500_58f_tmp8)) {
                  r530_58f_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, r400_5ff_tmp3);
                  byte_8a = simd_and(byte_range_80_8f, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp7;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_8a);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
              byte_range_90_bf = simd_and(r400_5ff_tmp5, r400_5ff_tmp6);
              r400_5ff_tmp10 = simd_and(r400_5ff_tmp7, byte_range_90_bf);
              r400_5ff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp12 = simd_and(r400_5ff_tmp1, r400_5ff_tmp11);
              byte_d7 = simd_and(r80_7ff_tmp2, r400_5ff_tmp12);
              r400_5ff_tmp13 = simd_or(r400_5ff_tmp10, byte_d7);
              if (bitblock::any(r400_5ff_tmp13)) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp2 = simd_and(r400_5ff_tmp5, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_and(tmp4, r400_5ff_tmp3);
                byte_be = simd_and(r590_5ff_tmp2, r590_5ff_tmp3);
                byte_d6_adv = r400_5ff_tmp7;
                r590_5ff_tmp4 = simd_and(byte_d6_adv, byte_be);
                struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r590_5ff_tmp4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 15))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 10))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(3, 3))) {
                r800_1fff_tmp1 = simd_andc(tmp5, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(3, 3))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r1000_1fff_tmp4));
                  sequence_e1_90 = simd_and(r1000_1fff_tmp4, byte_90);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp6 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp5);
                  byte_80 = simd_andc(r1000_1fff_tmp6, r1000_1fff_tmp3);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(4), sequence_e1_90_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_90_adv, byte_80);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_a0 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp3);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp9);
                  byte_86 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp10);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(5), sequence_e1_a0_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_a0_adv, byte_86);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r1000_1fff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(6, 7))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 4))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_90_95 = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_80_adv, byte_range_90_95);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, r800_ffff_tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp13);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp14);
                  byte_97 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp15);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(8), sequence_e2_b8_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_b8_adv, byte_97);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(r2000_2fff_tmp12, r2000_4dff_tmp1);
                  byte_9a = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(sequence_e2_b8_adv, byte_9a);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp12, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(sequence_e2_b8_adv, byte_range_ba_bb);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp12, tmp5);
                  byte_b9 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp21);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(9), sequence_e2_b9_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_b9_adv, byte_80);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r2000_2fff_tmp22);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 4);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(10, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(10), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_andc(tmp4, r800_ffff_tmp3);
                  byte_9c = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(11), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_9c);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  byte_b0 = simd_andc(r3000_4dff_tmp10, r3000_4dff_tmp3);
                  r3000_4dff_tmp11 = simd_and(sequence_e3_80_adv, byte_b0);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r3000_4dff_tmp11);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_a0 = simd_andc(r3000_4dff_tmp12, r3000_4dff_tmp3);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(12), sequence_e3_82_adv));
                  r3000_4dff_tmp13 = simd_and(sequence_e3_82_adv, byte_a0);
                  struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, r3000_4dff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(10, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 10);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(13, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp4, ra000_ffff_tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(13), ra000_ffff_tmp7));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp7, byte_b8);
              byte_ef_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp4, r800_ffff_tmp1);
              ra000_ffff_tmp9 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b1_b2 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(14), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_range_b1_b2);
              struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp5, tmp5);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp13 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp12);
              byte_98 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp6);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(15), sequence_ef_b9_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_b9_adv, byte_98);
              struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp5, tmp2);
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(sequence_ef_b9_adv, byte_a3);
              struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp18);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp20 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp19);
              byte_8d = simd_and(ra000_ffff_tmp20, tmp6);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(16), sequence_ef_bc_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ef_bc_adv, byte_8d);
              struct_gc_Pd.cc = simd_or(struct_gc_Pd.cc, ra000_ffff_tmp21);
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 15);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 17);
        }
        carryQ.CarryQ_Adjust(17);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<17, 0> carryQ;
  };

  struct Property_gc_Pf {
  Property_gc_Pf() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Pf & struct_gc_Pf) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_bb, byte_c2_adv, r80_7ff_tmp12, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e2_e3;
		BitBlock r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock byte_99, sequence_e2_80_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_9d, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_ba, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, byte_b8, sequence_e2_b8, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, byte_83, sequence_e2_b8_adv, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, byte_85, r2000_2fff_tmp23, byte_8a;
		BitBlock r2000_2fff_tmp24, byte_8d, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, byte_a1, r2000_2fff_tmp29;




        struct_gc_Pf.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_bb = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_bb);
            struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r80_7ff_tmp12);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(2, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(2, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  byte_99 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_80_adv, byte_99);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp8);
                  byte_9d = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_80_adv, byte_9d);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_80_adv, byte_ba);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_andc(r2000_2fff_tmp7, r800_ffff_tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp18);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp20 = simd_andc(r2000_2fff_tmp19, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp20);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
                  r2000_2fff_tmp21 = simd_and(sequence_e2_b8_adv, byte_83);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp8);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b8_adv, byte_85);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp23);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_b8_adv, byte_8a);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp24);
                  byte_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_b8_adv, byte_8d);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_b8_adv, byte_9d);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp28 = simd_andc(r2000_2fff_tmp8, r800_ffff_tmp1);
                  byte_a1 = simd_and(r2000_2fff_tmp27, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(sequence_e2_b8_adv, byte_a1);
                  struct_gc_Pf.cc = simd_or(struct_gc_Pf.cc, r2000_2fff_tmp29);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_gc_Lu {
  Property_gc_Lu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Lu & struct_gc_Lu) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, byte_range_80_96;
		BitBlock byte_c3_adv, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, byte_range_98_9e, r80_7ff_tmp13, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2;
		BitBlock r100_2ff_tmp3, byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5;
		BitBlock r100_2ff_tmp6, byte_c9, byte_range_80_8f, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, r100_2ff_tmp9, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c4_c5, r100_17f_tmp1, byte_c4, byte_80, byte_c4_adv;
		BitBlock r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4, byte_82, r100_17f_tmp5;
		BitBlock byte_84, r100_17f_tmp6, r100_17f_tmp7, byte_86, r100_17f_tmp8;
		BitBlock r100_17f_tmp9, byte_88, r100_17f_tmp10, r100_17f_tmp11, byte_8a;
		BitBlock r100_17f_tmp12, r100_17f_tmp13, r100_17f_tmp14, byte_8c;
		BitBlock r100_17f_tmp15, r100_17f_tmp16, byte_8e, r100_17f_tmp17, byte_90;
		BitBlock r100_17f_tmp18, byte_92, r100_17f_tmp19, byte_94, r100_17f_tmp20;
		BitBlock byte_96, r100_17f_tmp21, byte_98, r100_17f_tmp22, byte_9a;
		BitBlock r100_17f_tmp23, byte_9c, r100_17f_tmp24, byte_9e, r100_17f_tmp25;
		BitBlock r100_17f_tmp26, r100_17f_tmp27, byte_a0, r100_17f_tmp28, byte_a2;
		BitBlock r100_17f_tmp29, byte_a4, r100_17f_tmp30, byte_a6, r100_17f_tmp31;
		BitBlock byte_a8, r100_17f_tmp32, byte_aa, r100_17f_tmp33, byte_ac;
		BitBlock r100_17f_tmp34, byte_ae, r100_17f_tmp35, r100_17f_tmp36;
		BitBlock r100_17f_tmp37, byte_b0, r100_17f_tmp38, byte_b2, r100_17f_tmp39;
		BitBlock byte_b4, r100_17f_tmp40, byte_b6, r100_17f_tmp41, byte_b9;
		BitBlock r100_17f_tmp42, r100_17f_tmp43, byte_bb, r100_17f_tmp44;
		BitBlock r100_17f_tmp45, byte_bd, r100_17f_tmp46, r100_17f_tmp47, byte_bf;
		BitBlock r100_17f_tmp48, r100_17f_tmp49, byte_c5, r100_17f_tmp50, byte_81;
		BitBlock byte_c5_adv, r100_17f_tmp51, byte_83, r100_17f_tmp52, byte_85;
		BitBlock r100_17f_tmp53, r100_17f_tmp54, byte_87, r100_17f_tmp55;
		BitBlock r100_17f_tmp56, r100_17f_tmp57, r100_17f_tmp58, r100_17f_tmp59;
		BitBlock r100_17f_tmp60, r100_17f_tmp61, r100_17f_tmp62, r100_17f_tmp63;
		BitBlock r100_17f_tmp64, r100_17f_tmp65, r100_17f_tmp66, r100_17f_tmp67;
		BitBlock r100_17f_tmp68, r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71;
		BitBlock r100_17f_tmp72, r100_17f_tmp73, r100_17f_tmp74, r100_17f_tmp75;
		BitBlock r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78, r100_17f_tmp79;
		BitBlock byte_range_b8_b9, r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82;
		BitBlock r100_24f_tmp3, r100_24f_tmp4, byte_range_c6_c8, r100_24f_tmp5;
		BitBlock r180_24f_tmp1, r180_24f_tmp2, byte_c6, r180_24f_tmp3, r180_24f_tmp4;
		BitBlock byte_range_81_82, byte_c6_adv, r180_24f_tmp5, r180_24f_tmp6;
		BitBlock r180_24f_tmp7, r180_24f_tmp8, byte_range_86_87, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, byte_range_89_8b, r180_24f_tmp11, r180_24f_tmp12;
		BitBlock r180_24f_tmp13, r180_24f_tmp14, r180_24f_tmp15, r180_24f_tmp16;
		BitBlock byte_range_8e_91, r180_24f_tmp17, r180_24f_tmp18, r180_24f_tmp19;
		BitBlock r180_24f_tmp20, byte_range_93_94, r180_24f_tmp21, byte_range_96_98;
		BitBlock r180_24f_tmp22, r180_24f_tmp23, byte_range_9c_9d, r180_24f_tmp24;
		BitBlock r180_24f_tmp25, r180_24f_tmp26, r180_24f_tmp27, r180_24f_tmp28;
		BitBlock r180_24f_tmp29, byte_range_9f_a0, r180_24f_tmp30, r180_24f_tmp31;
		BitBlock r180_24f_tmp32, r180_24f_tmp33, r180_24f_tmp34, r180_24f_tmp35;
		BitBlock byte_range_a6_a7, r180_24f_tmp36, byte_a9, r180_24f_tmp37;
		BitBlock r180_24f_tmp38, r180_24f_tmp39, byte_range_ae_af, r180_24f_tmp40;
		BitBlock r180_24f_tmp41, r180_24f_tmp42, r180_24f_tmp43, byte_range_b1_b3;
		BitBlock r180_24f_tmp44, r180_24f_tmp45, byte_b5, r180_24f_tmp46;
		BitBlock r180_24f_tmp47, byte_range_b7_b8, r180_24f_tmp48, byte_bc;
		BitBlock r180_24f_tmp49, r180_24f_tmp50, byte_c7, byte_c7_adv, r180_24f_tmp51;
		BitBlock r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54, r180_24f_tmp55;
		BitBlock byte_8d, r180_24f_tmp56, byte_8f, r180_24f_tmp57, r180_24f_tmp58;
		BitBlock byte_91, r180_24f_tmp59, byte_93, r180_24f_tmp60, byte_95;
		BitBlock r180_24f_tmp61, byte_97, r180_24f_tmp62, byte_99, r180_24f_tmp63;
		BitBlock r180_24f_tmp64, byte_9b, r180_24f_tmp65, r180_24f_tmp66;
		BitBlock r180_24f_tmp67, r180_24f_tmp68, r180_24f_tmp69, r180_24f_tmp70;
		BitBlock r180_24f_tmp71, r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74;
		BitBlock r180_24f_tmp75, r180_24f_tmp76, byte_b1, r180_24f_tmp77;
		BitBlock r180_24f_tmp78, byte_range_b6_b8, r180_24f_tmp79, byte_ba;
		BitBlock r180_24f_tmp80, r180_24f_tmp81, byte_be, r180_24f_tmp82, byte_c8;
		BitBlock byte_c8_adv, r180_24f_tmp83, r180_24f_tmp84, r180_24f_tmp85;
		BitBlock r180_24f_tmp86, r180_24f_tmp87, r180_24f_tmp88, r180_24f_tmp89;
		BitBlock r180_24f_tmp90, r180_24f_tmp91, r180_24f_tmp92, r180_24f_tmp93;
		BitBlock r180_24f_tmp94, r180_24f_tmp95, r180_24f_tmp96, r180_24f_tmp97;
		BitBlock r180_24f_tmp98, r180_24f_tmp99, r180_24f_tmp100, r180_24f_tmp101;
		BitBlock r180_24f_tmp102, r180_24f_tmp103, r180_24f_tmp104, r180_24f_tmp105;
		BitBlock r180_24f_tmp106, r180_24f_tmp107, r180_24f_tmp108, r180_24f_tmp109;
		BitBlock byte_range_ba_bb, r180_24f_tmp110, r180_24f_tmp111, byte_range_bd_be;
		BitBlock r180_24f_tmp112, byte_c9_adv, r180_24f_tmp113, r180_24f_tmp114;
		BitBlock r180_24f_tmp115, byte_range_83_86, r180_24f_tmp116, r180_24f_tmp117;
		BitBlock r180_24f_tmp118, r180_24f_tmp119, r180_24f_tmp120, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, byte_cd_adv, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock r370_3ff_tmp10, byte_ce, r370_3ff_tmp11, byte_ce_adv, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, byte_range_88_8a, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, byte_range_8e_8f, r370_3ff_tmp18;
		BitBlock r370_3ff_tmp19, r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22;
		BitBlock r370_3ff_tmp23, byte_range_91_a1, r370_3ff_tmp24, r370_3ff_tmp25;
		BitBlock r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28, byte_range_a3_ab;
		BitBlock r370_3ff_tmp29, byte_cf, byte_cf_adv, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, byte_range_92_94, r370_3ff_tmp34;
		BitBlock r370_3ff_tmp35, r370_3ff_tmp36, r370_3ff_tmp37, r370_3ff_tmp38;
		BitBlock r370_3ff_tmp39, r370_3ff_tmp40, r370_3ff_tmp41, r370_3ff_tmp42;
		BitBlock r370_3ff_tmp43, r370_3ff_tmp44, r370_3ff_tmp45, r370_3ff_tmp46;
		BitBlock r370_3ff_tmp47, r370_3ff_tmp48, r370_3ff_tmp49, r370_3ff_tmp50;
		BitBlock r370_3ff_tmp51, byte_b7, r370_3ff_tmp52, r370_3ff_tmp53;
		BitBlock r370_3ff_tmp54, byte_range_b9_ba, r370_3ff_tmp55, r370_3ff_tmp56;
		BitBlock byte_range_bd_bf, r370_3ff_tmp57, r80_7ff_tmp14, byte_range_d0_d7;
		BitBlock byte_range_d0_d3, byte_d0, r400_4ff_tmp1, byte_range_80_af;
		BitBlock byte_d0_adv, r400_4ff_tmp2, r400_4ff_tmp3, r400_4ff_tmp4, byte_d1;
		BitBlock r400_4ff_tmp5, r400_4ff_tmp6, byte_d1_adv, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, byte_b8;
		BitBlock r400_4ff_tmp31, r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34;
		BitBlock byte_d2, r400_4ff_tmp35, byte_d2_adv, r400_4ff_tmp36, r400_4ff_tmp37;
		BitBlock r400_4ff_tmp38, r400_4ff_tmp39, r400_4ff_tmp40, r400_4ff_tmp41;
		BitBlock r400_4ff_tmp42, r400_4ff_tmp43, r400_4ff_tmp44, r400_4ff_tmp45;
		BitBlock r400_4ff_tmp46, r400_4ff_tmp47, r400_4ff_tmp48, r400_4ff_tmp49;
		BitBlock r400_4ff_tmp50, r400_4ff_tmp51, r400_4ff_tmp52, r400_4ff_tmp53;
		BitBlock r400_4ff_tmp54, r400_4ff_tmp55, r400_4ff_tmp56, r400_4ff_tmp57;
		BitBlock r400_4ff_tmp58, r400_4ff_tmp59, r400_4ff_tmp60, r400_4ff_tmp61;
		BitBlock r400_4ff_tmp62, r400_4ff_tmp63, byte_d3, r400_4ff_tmp64;
		BitBlock byte_range_80_81, byte_d3_adv, r400_4ff_tmp65, r400_4ff_tmp66;
		BitBlock r400_4ff_tmp67, r400_4ff_tmp68, r400_4ff_tmp69, r400_4ff_tmp70;
		BitBlock r400_4ff_tmp71, byte_89, r400_4ff_tmp72, r400_4ff_tmp73, byte_8b;
		BitBlock r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76, r400_4ff_tmp77;
		BitBlock r400_4ff_tmp78, r400_4ff_tmp79, r400_4ff_tmp80, r400_4ff_tmp81;
		BitBlock r400_4ff_tmp82, r400_4ff_tmp83, r400_4ff_tmp84, r400_4ff_tmp85;
		BitBlock r400_4ff_tmp86, r400_4ff_tmp87, r400_4ff_tmp88, r400_4ff_tmp89;
		BitBlock r400_4ff_tmp90, r400_4ff_tmp91, r400_4ff_tmp92, r400_4ff_tmp93;
		BitBlock r400_4ff_tmp94, r400_4ff_tmp95, r400_4ff_tmp96, r400_4ff_tmp97;
		BitBlock r400_4ff_tmp98, r400_4ff_tmp99, r400_4ff_tmp100, r400_5ff_tmp1;
		BitBlock r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3, r400_5ff_tmp4;
		BitBlock byte_d6, r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7, r500_58f_tmp1;
		BitBlock byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_52f_tmp2, r500_52f_tmp3, r500_52f_tmp4;
		BitBlock r500_52f_tmp5, r500_52f_tmp6, r500_52f_tmp7, r500_52f_tmp8;
		BitBlock r500_52f_tmp9, r500_52f_tmp10, r500_52f_tmp11, r500_52f_tmp12;
		BitBlock r500_52f_tmp13, r500_52f_tmp14, r500_52f_tmp15, r500_52f_tmp16;
		BitBlock r500_52f_tmp17, r500_52f_tmp18, r500_52f_tmp19, r500_52f_tmp20;
		BitBlock r500_52f_tmp21, r500_52f_tmp22, r500_52f_tmp23, r500_52f_tmp24;
		BitBlock r500_52f_tmp25, r500_52f_tmp26, r500_52f_tmp27, r500_52f_tmp28;
		BitBlock r500_52f_tmp29, r500_52f_tmp30, r500_52f_tmp31, r500_52f_tmp32;
		BitBlock r500_52f_tmp33, r500_58f_tmp5, r500_58f_tmp6, r500_58f_tmp7, byte_d5;
		BitBlock r500_58f_tmp8, r500_58f_tmp9, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock byte_range_b1_bf, r530_58f_tmp3, byte_d5_adv, r530_58f_tmp4;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, sequence_e1_83, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_80_85, sequence_e1_83_adv, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19, sequence_e1_b8;
		BitBlock sequence_e1_b8_adv, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, r1000_1fff_tmp47, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, r1000_1fff_tmp50, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, r1000_1fff_tmp53, r1000_1fff_tmp54;
		BitBlock r1000_1fff_tmp55, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, r1000_1fff_tmp59, sequence_e1_b9;
		BitBlock sequence_e1_b9_adv, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, r1000_1fff_tmp82;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91, sequence_e1_ba;
		BitBlock sequence_e1_ba_adv, r1000_1fff_tmp92, r1000_1fff_tmp93;
		BitBlock r1000_1fff_tmp94, r1000_1fff_tmp95, r1000_1fff_tmp96;
		BitBlock r1000_1fff_tmp97, r1000_1fff_tmp98, r1000_1fff_tmp99;
		BitBlock r1000_1fff_tmp100, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, r1000_1fff_tmp104, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, r1000_1fff_tmp107, r1000_1fff_tmp108;
		BitBlock r1000_1fff_tmp109, r1000_1fff_tmp110, r1000_1fff_tmp111;
		BitBlock r1000_1fff_tmp112, r1000_1fff_tmp113, r1000_1fff_tmp114;
		BitBlock r1000_1fff_tmp115, r1000_1fff_tmp116, r1000_1fff_tmp117;
		BitBlock r1000_1fff_tmp118, r1000_1fff_tmp119, r1000_1fff_tmp120;
		BitBlock sequence_e1_bb, sequence_e1_bb_adv, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, r1000_1fff_tmp123, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, r1000_1fff_tmp126, r1000_1fff_tmp127;
		BitBlock r1000_1fff_tmp128, r1000_1fff_tmp129, r1000_1fff_tmp130;
		BitBlock r1000_1fff_tmp131, r1000_1fff_tmp132, r1000_1fff_tmp133;
		BitBlock r1000_1fff_tmp134, r1000_1fff_tmp135, r1000_1fff_tmp136;
		BitBlock r1000_1fff_tmp137, r1000_1fff_tmp138, r1000_1fff_tmp139;
		BitBlock r1000_1fff_tmp140, r1000_1fff_tmp141, r1000_1fff_tmp142;
		BitBlock r1000_1fff_tmp143, r1000_1fff_tmp144, r1000_1fff_tmp145;
		BitBlock r1000_1fff_tmp146, r1000_1fff_tmp147, r1000_1fff_tmp148;
		BitBlock r1000_1fff_tmp149, r1000_1fff_tmp150, r1000_1fff_tmp151;
		BitBlock r1000_1fff_tmp152, sequence_e1_bc, byte_range_88_8f;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp153, r1000_1fff_tmp154;
		BitBlock byte_range_98_9d, r1000_1fff_tmp155, byte_range_a8_af;
		BitBlock r1000_1fff_tmp156, byte_range_b8_bf, r1000_1fff_tmp157;
		BitBlock sequence_e1_bd, byte_range_88_8d, sequence_e1_bd_adv;
		BitBlock r1000_1fff_tmp158, r1000_1fff_tmp159, r1000_1fff_tmp160, byte_9d;
		BitBlock r1000_1fff_tmp161, r1000_1fff_tmp162, byte_9f, r1000_1fff_tmp163;
		BitBlock r1000_1fff_tmp164, sequence_e1_be, byte_range_b8_bb;
		BitBlock sequence_e1_be_adv, r1000_1fff_tmp165, sequence_e1_bf;
		BitBlock byte_range_88_8b, sequence_e1_bf_adv, r1000_1fff_tmp166;
		BitBlock byte_range_98_9b, r1000_1fff_tmp167, r1000_1fff_tmp168;
		BitBlock byte_range_a8_ac, r1000_1fff_tmp169, r1000_1fff_tmp170;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_8b_8d, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock byte_range_90_92, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, byte_range_99_9d, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock byte_range_aa_ad, r2000_2fff_tmp30, r2000_2fff_tmp31;
		BitBlock r2000_2fff_tmp32, byte_range_b0_b3, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, byte_range_be_bf;
		BitBlock r2000_2fff_tmp36, sequence_e2_85, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp37, sequence_e2_86, r2000_2fff_tmp38;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp39, sequence_e2_b0;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock byte_range_80_ae, sequence_e2_b0_adv, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, sequence_e2_b1, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_range_a2_a4, r2000_2fff_tmp49, byte_a7;
		BitBlock r2000_2fff_tmp50, r2000_2fff_tmp51, r2000_2fff_tmp52;
		BitBlock r2000_2fff_tmp53, byte_ab, r2000_2fff_tmp54, r2000_2fff_tmp55;
		BitBlock r2000_2fff_tmp56, r2000_2fff_tmp57, r2000_2fff_tmp58;
		BitBlock byte_range_ad_b0, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, sequence_e2_b2;
		BitBlock sequence_e2_b2_adv, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, r2000_2fff_tmp72, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, r2000_2fff_tmp91;
		BitBlock r2000_2fff_tmp92, r2000_2fff_tmp93, r2000_2fff_tmp94;
		BitBlock r2000_2fff_tmp95, r2000_2fff_tmp96, r2000_2fff_tmp97, byte_b3;
		BitBlock sequence_e2_b3, sequence_e2_b3_adv, r2000_2fff_tmp98;
		BitBlock r2000_2fff_tmp99, r2000_2fff_tmp100, r2000_2fff_tmp101;
		BitBlock r2000_2fff_tmp102, r2000_2fff_tmp103, r2000_2fff_tmp104;
		BitBlock r2000_2fff_tmp105, r2000_2fff_tmp106, r2000_2fff_tmp107;
		BitBlock r2000_2fff_tmp108, r2000_2fff_tmp109, r2000_2fff_tmp110;
		BitBlock r2000_2fff_tmp111, r2000_2fff_tmp112, r2000_2fff_tmp113;
		BitBlock r2000_2fff_tmp114, r2000_2fff_tmp115, r2000_2fff_tmp116;
		BitBlock r2000_2fff_tmp117, byte_ad, r2000_2fff_tmp118, r2000_2fff_tmp119;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock sequence_ea_99, byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, sequence_ea_9a, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock ra000_ffff_tmp47, ra000_ffff_tmp48, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, sequence_ea_9c;
		BitBlock sequence_ea_9c_adv, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, ra000_ffff_tmp65;
		BitBlock ra000_ffff_tmp66, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71, sequence_ea_9d;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, sequence_ea_9e, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp102, ra000_ffff_tmp103, ra000_ffff_tmp104;
		BitBlock ra000_ffff_tmp105, ra000_ffff_tmp106, ra000_ffff_tmp107;
		BitBlock ra000_ffff_tmp108, ra000_ffff_tmp109, ra000_ffff_tmp110;
		BitBlock ra000_ffff_tmp111, ra000_ffff_tmp112, ra000_ffff_tmp113;
		BitBlock ra000_ffff_tmp114, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock ra000_ffff_tmp117, ra000_ffff_tmp118, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, ra000_ffff_tmp121, ra000_ffff_tmp122;
		BitBlock ra000_ffff_tmp123, byte_range_b0_b1, ra000_ffff_tmp124;
		BitBlock ra000_ffff_tmp125, byte_ef, ra000_ffff_tmp126, sequence_ef_bc;
		BitBlock byte_ef_adv, ra000_ffff_tmp127, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp128, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_range_80_a7;
		BitBlock sequence_f0_90_90_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, sequence_f0_91, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock sequence_f0_91_a2, sequence_f0_91_adv, sequence_f0_91_a2_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp18, sequence_f0_9d_90;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_80_99;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock byte_range_b4_bf, r10000_10ffff_tmp25, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, byte_range_80_8d, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp30, byte_range_a8_bf, r10000_10ffff_tmp31;
		BitBlock sequence_f0_9d_92, r10000_10ffff_tmp32, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, byte_range_9e_9f, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_range_a5_a6, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_range_a9_ac;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, byte_range_ae_b5, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, sequence_f0_9d_93, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, byte_range_90_a9;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock sequence_f0_9d_94, r10000_10ffff_tmp56, byte_range_84_85;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, byte_range_87_8a;
		BitBlock r10000_10ffff_tmp61, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock byte_range_8d_94, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, byte_range_96_9c, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, byte_range_bb_be;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, sequence_f0_9d_95;
		BitBlock r10000_10ffff_tmp78, byte_range_80_84, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, byte_range_8a_90;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, byte_range_ac_bf;
		BitBlock r10000_10ffff_tmp86, sequence_f0_9d_96, sequence_f0_9d_96_adv;
		BitBlock r10000_10ffff_tmp87, byte_range_a0_b9, r10000_10ffff_tmp88;
		BitBlock r10000_10ffff_tmp89, sequence_f0_9d_97, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock byte_range_94_ad, sequence_f0_9d_97_adv, r10000_10ffff_tmp94;
		BitBlock r10000_10ffff_tmp95, sequence_f0_9d_98, r10000_10ffff_tmp96;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, byte_range_88_a1;
		BitBlock sequence_f0_9d_98_adv, r10000_10ffff_tmp99, byte_range_bc_bf;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, sequence_f0_9d_99;
		BitBlock r10000_10ffff_tmp102, byte_range_80_95, sequence_f0_9d_99_adv;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock sequence_f0_9d_9a, byte_range_80_89, sequence_f0_9d_9a_adv;
		BitBlock r10000_10ffff_tmp106, r10000_10ffff_tmp107, r10000_10ffff_tmp108;
		BitBlock sequence_f0_9d_9b, sequence_f0_9d_9b_adv, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, byte_range_a2_ba, r10000_10ffff_tmp111;
		BitBlock sequence_f0_9d_9c, r10000_10ffff_tmp112, r10000_10ffff_tmp113;
		BitBlock r10000_10ffff_tmp114, r10000_10ffff_tmp115, byte_range_9c_b4;
		BitBlock sequence_f0_9d_9c_adv, r10000_10ffff_tmp116, sequence_f0_9d_9d;
		BitBlock r10000_10ffff_tmp117, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock r10000_10ffff_tmp120, byte_range_96_ae, sequence_f0_9d_9d_adv;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp123, r10000_10ffff_tmp124, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, byte_range_90_a8;
		BitBlock sequence_f0_9d_9e_adv, r10000_10ffff_tmp128, sequence_f0_9d_9f;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp129;




        struct_gc_Lu.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, byte_range_41_5a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 67))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 17))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp7 = simd_or(basis_bits.bit_4, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_and(basis_bits.bit_3, r80_7ff_tmp7);
            byte_range_80_96 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(0), byte_c3_adv));
            r80_7ff_tmp9 = simd_and(byte_c3_adv, byte_range_80_96);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp4, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp11, basis_bits.bit_4);
            byte_range_98_9e = simd_andc(r80_7ff_tmp12, r80_7ff_tmp6);
            r80_7ff_tmp13 = simd_and(byte_c3_adv, byte_range_98_9e);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r80_7ff_tmp13);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 6))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(1), r100_2ff_tmp7));
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp7, byte_range_80_8f);
                r100_2ff_tmp9 = simd_or(byte_range_c4_c8, r100_2ff_tmp8);
                if ((bitblock::any(r100_2ff_tmp9) || carryQ.CarryTest(2, 5))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(2, 2))) {
                    r100_17f_tmp1 = simd_andc(r100_24f_tmp1, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    byte_80 = simd_andc(byte_range_80_8f, tmp9);
                    carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(2), byte_c4_adv));
                    r100_17f_tmp2 = simd_and(byte_c4_adv, byte_80);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp2);
                    r100_17f_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r100_17f_tmp4 = simd_andc(r100_17f_tmp3, tmp7);
                    byte_82 = simd_and(byte_range_80_8f, r100_17f_tmp4);
                    r100_17f_tmp5 = simd_and(byte_c4_adv, byte_82);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp5);
                    byte_84 = simd_and(byte_range_80_8f, r100_17f_tmp1);
                    r100_17f_tmp6 = simd_and(byte_c4_adv, byte_84);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp6);
                    r100_17f_tmp7 = simd_and(r100_24f_tmp1, r100_17f_tmp3);
                    byte_86 = simd_and(byte_range_80_8f, r100_17f_tmp7);
                    r100_17f_tmp8 = simd_and(byte_c4_adv, byte_86);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp8);
                    r100_17f_tmp9 = simd_andc(r100_2ff_tmp4, tmp8);
                    byte_88 = simd_and(byte_range_80_8f, r100_17f_tmp9);
                    r100_17f_tmp10 = simd_and(byte_c4_adv, byte_88);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp10);
                    r100_17f_tmp11 = simd_and(r100_2ff_tmp4, r100_17f_tmp3);
                    byte_8a = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp12 = simd_and(byte_c4_adv, byte_8a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp12);
                    r100_17f_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r100_17f_tmp14 = simd_andc(r100_17f_tmp13, tmp8);
                    byte_8c = simd_and(byte_range_80_8f, r100_17f_tmp14);
                    r100_17f_tmp15 = simd_and(byte_c4_adv, byte_8c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp15);
                    r100_17f_tmp16 = simd_and(r100_17f_tmp13, r100_17f_tmp3);
                    byte_8e = simd_and(byte_range_80_8f, r100_17f_tmp16);
                    r100_17f_tmp17 = simd_and(byte_c4_adv, byte_8e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp17);
                    byte_90 = simd_andc(r80_7ff_tmp11, tmp9);
                    r100_17f_tmp18 = simd_and(byte_c4_adv, byte_90);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp18);
                    byte_92 = simd_and(r80_7ff_tmp11, r100_17f_tmp4);
                    r100_17f_tmp19 = simd_and(byte_c4_adv, byte_92);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp19);
                    byte_94 = simd_and(r80_7ff_tmp11, r100_17f_tmp1);
                    r100_17f_tmp20 = simd_and(byte_c4_adv, byte_94);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp20);
                    byte_96 = simd_and(r80_7ff_tmp11, r100_17f_tmp7);
                    r100_17f_tmp21 = simd_and(byte_c4_adv, byte_96);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp21);
                    byte_98 = simd_and(r80_7ff_tmp11, r100_17f_tmp9);
                    r100_17f_tmp22 = simd_and(byte_c4_adv, byte_98);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp22);
                    byte_9a = simd_and(r80_7ff_tmp11, r100_17f_tmp11);
                    r100_17f_tmp23 = simd_and(byte_c4_adv, byte_9a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp23);
                    byte_9c = simd_and(r80_7ff_tmp11, r100_17f_tmp14);
                    r100_17f_tmp24 = simd_and(byte_c4_adv, byte_9c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp24);
                    byte_9e = simd_and(r80_7ff_tmp11, r100_17f_tmp16);
                    r100_17f_tmp25 = simd_and(byte_c4_adv, byte_9e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp25);
                    r100_17f_tmp26 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp27 = simd_and(r80_7ff_tmp4, r100_17f_tmp26);
                    byte_a0 = simd_andc(r100_17f_tmp27, tmp9);
                    r100_17f_tmp28 = simd_and(byte_c4_adv, byte_a0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp28);
                    byte_a2 = simd_and(r100_17f_tmp27, r100_17f_tmp4);
                    r100_17f_tmp29 = simd_and(byte_c4_adv, byte_a2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp29);
                    byte_a4 = simd_and(r100_17f_tmp27, r100_17f_tmp1);
                    r100_17f_tmp30 = simd_and(byte_c4_adv, byte_a4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp30);
                    byte_a6 = simd_and(r100_17f_tmp27, r100_17f_tmp7);
                    r100_17f_tmp31 = simd_and(byte_c4_adv, byte_a6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp31);
                    byte_a8 = simd_and(r100_17f_tmp27, r100_17f_tmp9);
                    r100_17f_tmp32 = simd_and(byte_c4_adv, byte_a8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp32);
                    byte_aa = simd_and(r100_17f_tmp27, r100_17f_tmp11);
                    r100_17f_tmp33 = simd_and(byte_c4_adv, byte_aa);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp33);
                    byte_ac = simd_and(r100_17f_tmp27, r100_17f_tmp14);
                    r100_17f_tmp34 = simd_and(byte_c4_adv, byte_ac);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp34);
                    byte_ae = simd_and(r100_17f_tmp27, r100_17f_tmp16);
                    r100_17f_tmp35 = simd_and(byte_c4_adv, byte_ae);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp35);
                    r100_17f_tmp36 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp37 = simd_and(r80_7ff_tmp4, r100_17f_tmp36);
                    byte_b0 = simd_andc(r100_17f_tmp37, tmp9);
                    r100_17f_tmp38 = simd_and(byte_c4_adv, byte_b0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp38);
                    byte_b2 = simd_and(r100_17f_tmp37, r100_17f_tmp4);
                    r100_17f_tmp39 = simd_and(byte_c4_adv, byte_b2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp39);
                    byte_b4 = simd_and(r100_17f_tmp37, r100_17f_tmp1);
                    r100_17f_tmp40 = simd_and(byte_c4_adv, byte_b4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp40);
                    byte_b6 = simd_and(r100_17f_tmp37, r100_17f_tmp7);
                    r100_17f_tmp41 = simd_and(byte_c4_adv, byte_b6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp41);
                    byte_b9 = simd_and(r100_17f_tmp37, r100_2ff_tmp6);
                    r100_17f_tmp42 = simd_and(byte_c4_adv, byte_b9);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp42);
                    r100_17f_tmp43 = simd_and(r100_2ff_tmp4, tmp3);
                    byte_bb = simd_and(r100_17f_tmp37, r100_17f_tmp43);
                    r100_17f_tmp44 = simd_and(byte_c4_adv, byte_bb);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp44);
                    r100_17f_tmp45 = simd_and(r100_17f_tmp13, r100_2ff_tmp5);
                    byte_bd = simd_and(r100_17f_tmp37, r100_17f_tmp45);
                    r100_17f_tmp46 = simd_and(byte_c4_adv, byte_bd);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp46);
                    r100_17f_tmp47 = simd_and(r100_17f_tmp13, tmp3);
                    byte_bf = simd_and(r100_17f_tmp37, r100_17f_tmp47);
                    r100_17f_tmp48 = simd_and(byte_c4_adv, byte_bf);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp48);
                    r100_17f_tmp49 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    byte_c5 = simd_and(r80_7ff_tmp2, r100_17f_tmp49);
                    r100_17f_tmp50 = simd_andc(r100_2ff_tmp5, tmp7);
                    byte_81 = simd_and(byte_range_80_8f, r100_17f_tmp50);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(3), byte_c5_adv));
                    r100_17f_tmp51 = simd_and(byte_c5_adv, byte_81);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp51);
                    byte_83 = simd_and(byte_range_80_8f, r80_7ff_tmp3);
                    r100_17f_tmp52 = simd_and(byte_c5_adv, byte_83);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp52);
                    byte_85 = simd_and(byte_range_80_8f, r100_17f_tmp49);
                    r100_17f_tmp53 = simd_and(byte_c5_adv, byte_85);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp53);
                    r100_17f_tmp54 = simd_and(r100_24f_tmp1, tmp3);
                    byte_87 = simd_and(byte_range_80_8f, r100_17f_tmp54);
                    r100_17f_tmp55 = simd_and(byte_c5_adv, byte_87);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp55);
                    r100_17f_tmp56 = simd_and(byte_c5_adv, byte_8a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp56);
                    r100_17f_tmp57 = simd_and(byte_c5_adv, byte_8c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp57);
                    r100_17f_tmp58 = simd_and(byte_c5_adv, byte_8e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp58);
                    r100_17f_tmp59 = simd_and(byte_c5_adv, byte_90);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp59);
                    r100_17f_tmp60 = simd_and(byte_c5_adv, byte_92);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp60);
                    r100_17f_tmp61 = simd_and(byte_c5_adv, byte_94);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp61);
                    r100_17f_tmp62 = simd_and(byte_c5_adv, byte_96);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp62);
                    r100_17f_tmp63 = simd_and(byte_c5_adv, byte_98);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp63);
                    r100_17f_tmp64 = simd_and(byte_c5_adv, byte_9a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp64);
                    r100_17f_tmp65 = simd_and(byte_c5_adv, byte_9c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp65);
                    r100_17f_tmp66 = simd_and(byte_c5_adv, byte_9e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp66);
                    r100_17f_tmp67 = simd_and(byte_c5_adv, byte_a0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp67);
                    r100_17f_tmp68 = simd_and(byte_c5_adv, byte_a2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp68);
                    r100_17f_tmp69 = simd_and(byte_c5_adv, byte_a4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp69);
                    r100_17f_tmp70 = simd_and(byte_c5_adv, byte_a6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp70);
                    r100_17f_tmp71 = simd_and(byte_c5_adv, byte_a8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp71);
                    r100_17f_tmp72 = simd_and(byte_c5_adv, byte_aa);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp72);
                    r100_17f_tmp73 = simd_and(byte_c5_adv, byte_ac);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp73);
                    r100_17f_tmp74 = simd_and(byte_c5_adv, byte_ae);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp74);
                    r100_17f_tmp75 = simd_and(byte_c5_adv, byte_b0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp75);
                    r100_17f_tmp76 = simd_and(byte_c5_adv, byte_b2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp76);
                    r100_17f_tmp77 = simd_and(byte_c5_adv, byte_b4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp77);
                    r100_17f_tmp78 = simd_and(byte_c5_adv, byte_b6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp78);
                    r100_17f_tmp79 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    byte_range_b8_b9 = simd_and(r100_17f_tmp37, r100_17f_tmp79);
                    r100_17f_tmp80 = simd_and(byte_c5_adv, byte_range_b8_b9);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp80);
                    r100_17f_tmp81 = simd_and(byte_c5_adv, byte_bb);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp81);
                    r100_17f_tmp82 = simd_and(byte_c5_adv, byte_bd);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r100_17f_tmp82);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(2, 2);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp8);
                  if ((bitblock::any(r100_24f_tmp5) || carryQ.CarryTest(4, 3))) {
                    r180_24f_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp2 = simd_and(r100_24f_tmp1, r180_24f_tmp1);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp2);
                    r180_24f_tmp3 = simd_andc(byte_range_80_8f, tmp7);
                    r180_24f_tmp4 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    byte_range_81_82 = simd_and(r180_24f_tmp3, r180_24f_tmp4);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(4), byte_c6_adv));
                    r180_24f_tmp5 = simd_and(byte_c6_adv, byte_range_81_82);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp5);
                    r180_24f_tmp6 = simd_andc(r100_24f_tmp1, tmp8);
                    byte_84 = simd_and(byte_range_80_8f, r180_24f_tmp6);
                    r180_24f_tmp7 = simd_and(byte_c6_adv, byte_84);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp7);
                    r180_24f_tmp8 = simd_and(r100_24f_tmp1, basis_bits.bit_6);
                    byte_range_86_87 = simd_and(byte_range_80_8f, r180_24f_tmp8);
                    r180_24f_tmp9 = simd_and(byte_c6_adv, byte_range_86_87);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp9);
                    r180_24f_tmp10 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    byte_range_89_8b = simd_and(r180_24f_tmp10, tmp8);
                    r180_24f_tmp11 = simd_and(byte_c6_adv, byte_range_89_8b);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp11);
                    r180_24f_tmp12 = simd_or(tmp7, basis_bits.bit_6);
                    r180_24f_tmp13 = simd_not(r180_24f_tmp12);
                    r180_24f_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp15 = simd_and(r180_24f_tmp14, basis_bits.bit_6);
                    r180_24f_tmp16 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp13), simd_andc(r180_24f_tmp15, basis_bits.bit_3));
                    byte_range_8e_91 = simd_and(r80_7ff_tmp5, r180_24f_tmp16);
                    r180_24f_tmp17 = simd_and(byte_c6_adv, byte_range_8e_91);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp17);
                    r180_24f_tmp18 = simd_andc(r80_7ff_tmp11, basis_bits.bit_4);
                    r180_24f_tmp19 = simd_not(tmp8);
                    r180_24f_tmp20 = simd_or(simd_and(basis_bits.bit_5, r180_24f_tmp19), simd_andc(tmp3, basis_bits.bit_5));
                    byte_range_93_94 = simd_and(r180_24f_tmp18, r180_24f_tmp20);
                    r180_24f_tmp21 = simd_and(byte_c6_adv, byte_range_93_94);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp21);
                    byte_range_96_98 = simd_and(r80_7ff_tmp11, r100_24f_tmp4);
                    r180_24f_tmp22 = simd_and(byte_c6_adv, byte_range_96_98);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp22);
                    r180_24f_tmp23 = simd_andc(r180_24f_tmp14, basis_bits.bit_6);
                    byte_range_9c_9d = simd_and(r80_7ff_tmp11, r180_24f_tmp23);
                    r180_24f_tmp24 = simd_and(byte_c6_adv, byte_range_9c_9d);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp24);
                    r180_24f_tmp25 = simd_or(basis_bits.bit_3, tmp9);
                    r180_24f_tmp26 = simd_not(r180_24f_tmp25);
                    r180_24f_tmp27 = simd_and(r180_24f_tmp14, tmp3);
                    r180_24f_tmp28 = simd_and(basis_bits.bit_3, r180_24f_tmp27);
                    r180_24f_tmp29 = simd_or(simd_and(basis_bits.bit_2, r180_24f_tmp26), simd_andc(r180_24f_tmp28, basis_bits.bit_2));
                    byte_range_9f_a0 = simd_and(r80_7ff_tmp4, r180_24f_tmp29);
                    r180_24f_tmp30 = simd_and(byte_c6_adv, byte_range_9f_a0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp30);
                    r180_24f_tmp31 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp32 = simd_and(r80_7ff_tmp4, r180_24f_tmp31);
                    r180_24f_tmp33 = simd_andc(r180_24f_tmp1, tmp7);
                    byte_a2 = simd_and(r180_24f_tmp32, r180_24f_tmp33);
                    r180_24f_tmp34 = simd_and(byte_c6_adv, byte_a2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp34);
                    byte_a4 = simd_and(r180_24f_tmp32, r180_24f_tmp6);
                    r180_24f_tmp35 = simd_and(byte_c6_adv, byte_a4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp35);
                    byte_range_a6_a7 = simd_and(r180_24f_tmp32, r180_24f_tmp8);
                    r180_24f_tmp36 = simd_and(byte_c6_adv, byte_range_a6_a7);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp36);
                    byte_a9 = simd_and(r180_24f_tmp32, r100_2ff_tmp6);
                    r180_24f_tmp37 = simd_and(byte_c6_adv, byte_a9);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp37);
                    r180_24f_tmp38 = simd_andc(r180_24f_tmp14, tmp8);
                    byte_ac = simd_and(r180_24f_tmp32, r180_24f_tmp38);
                    r180_24f_tmp39 = simd_and(byte_c6_adv, byte_ac);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp39);
                    byte_range_ae_af = simd_and(r180_24f_tmp32, r180_24f_tmp15);
                    r180_24f_tmp40 = simd_and(byte_c6_adv, byte_range_ae_af);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp40);
                    r180_24f_tmp41 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp42 = simd_and(r80_7ff_tmp4, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_andc(r180_24f_tmp42, tmp7);
                    byte_range_b1_b3 = simd_and(r180_24f_tmp43, tmp8);
                    r180_24f_tmp44 = simd_and(byte_c6_adv, byte_range_b1_b3);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp44);
                    r180_24f_tmp45 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    byte_b5 = simd_and(r180_24f_tmp42, r180_24f_tmp45);
                    r180_24f_tmp46 = simd_and(byte_c6_adv, byte_b5);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp46);
                    r180_24f_tmp47 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp6, basis_bits.bit_4));
                    byte_range_b7_b8 = simd_and(r180_24f_tmp42, r180_24f_tmp47);
                    r180_24f_tmp48 = simd_and(byte_c6_adv, byte_range_b7_b8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp48);
                    byte_bc = simd_and(r180_24f_tmp42, r180_24f_tmp38);
                    r180_24f_tmp49 = simd_and(byte_c6_adv, byte_bc);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp49);
                    r180_24f_tmp50 = simd_and(r100_24f_tmp1, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp50);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(5), byte_c7_adv));
                    r180_24f_tmp51 = simd_and(byte_c7_adv, byte_84);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp51);
                    byte_87 = simd_and(byte_range_80_8f, r180_24f_tmp50);
                    r180_24f_tmp52 = simd_and(byte_c7_adv, byte_87);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp52);
                    r180_24f_tmp53 = simd_and(r100_2ff_tmp4, r180_24f_tmp1);
                    byte_8a = simd_and(byte_range_80_8f, r180_24f_tmp53);
                    r180_24f_tmp54 = simd_and(byte_c7_adv, byte_8a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp54);
                    r180_24f_tmp55 = simd_and(r180_24f_tmp14, r100_2ff_tmp5);
                    byte_8d = simd_and(byte_range_80_8f, r180_24f_tmp55);
                    r180_24f_tmp56 = simd_and(byte_c7_adv, byte_8d);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp56);
                    byte_8f = simd_and(byte_range_80_8f, r180_24f_tmp27);
                    r180_24f_tmp57 = simd_and(byte_c7_adv, byte_8f);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp57);
                    r180_24f_tmp58 = simd_andc(r100_2ff_tmp5, tmp7);
                    byte_91 = simd_and(r80_7ff_tmp11, r180_24f_tmp58);
                    r180_24f_tmp59 = simd_and(byte_c7_adv, byte_91);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp59);
                    byte_93 = simd_and(r80_7ff_tmp11, r80_7ff_tmp3);
                    r180_24f_tmp60 = simd_and(byte_c7_adv, byte_93);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp60);
                    byte_95 = simd_and(r80_7ff_tmp11, r180_24f_tmp45);
                    r180_24f_tmp61 = simd_and(byte_c7_adv, byte_95);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp61);
                    byte_97 = simd_and(r80_7ff_tmp11, r180_24f_tmp50);
                    r180_24f_tmp62 = simd_and(byte_c7_adv, byte_97);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp62);
                    byte_99 = simd_and(r80_7ff_tmp11, r100_2ff_tmp6);
                    r180_24f_tmp63 = simd_and(byte_c7_adv, byte_99);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp63);
                    r180_24f_tmp64 = simd_and(r100_2ff_tmp4, tmp3);
                    byte_9b = simd_and(r80_7ff_tmp11, r180_24f_tmp64);
                    r180_24f_tmp65 = simd_and(byte_c7_adv, byte_9b);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp65);
                    r180_24f_tmp66 = simd_and(r180_24f_tmp14, r180_24f_tmp1);
                    byte_9e = simd_and(r80_7ff_tmp11, r180_24f_tmp66);
                    r180_24f_tmp67 = simd_and(byte_c7_adv, byte_9e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp67);
                    byte_a0 = simd_andc(r180_24f_tmp32, tmp9);
                    r180_24f_tmp68 = simd_and(byte_c7_adv, byte_a0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp68);
                    r180_24f_tmp69 = simd_and(byte_c7_adv, byte_a2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp69);
                    r180_24f_tmp70 = simd_and(byte_c7_adv, byte_a4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp70);
                    byte_a6 = simd_and(r180_24f_tmp32, r180_24f_tmp2);
                    r180_24f_tmp71 = simd_and(byte_c7_adv, byte_a6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp71);
                    r180_24f_tmp72 = simd_andc(r100_2ff_tmp4, tmp8);
                    byte_a8 = simd_and(r180_24f_tmp32, r180_24f_tmp72);
                    r180_24f_tmp73 = simd_and(byte_c7_adv, byte_a8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp73);
                    byte_aa = simd_and(r180_24f_tmp32, r180_24f_tmp53);
                    r180_24f_tmp74 = simd_and(byte_c7_adv, byte_aa);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp74);
                    r180_24f_tmp75 = simd_and(byte_c7_adv, byte_ac);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp75);
                    byte_ae = simd_and(r180_24f_tmp32, r180_24f_tmp66);
                    r180_24f_tmp76 = simd_and(byte_c7_adv, byte_ae);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp76);
                    byte_b1 = simd_and(r180_24f_tmp42, r180_24f_tmp58);
                    r180_24f_tmp77 = simd_and(byte_c7_adv, byte_b1);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp77);
                    byte_b4 = simd_and(r180_24f_tmp42, r180_24f_tmp6);
                    r180_24f_tmp78 = simd_and(byte_c7_adv, byte_b4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp78);
                    byte_range_b6_b8 = simd_and(r180_24f_tmp42, r100_24f_tmp4);
                    r180_24f_tmp79 = simd_and(byte_c7_adv, byte_range_b6_b8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp79);
                    byte_ba = simd_and(r180_24f_tmp42, r180_24f_tmp53);
                    r180_24f_tmp80 = simd_and(byte_c7_adv, byte_ba);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp80);
                    r180_24f_tmp81 = simd_and(byte_c7_adv, byte_bc);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp81);
                    byte_be = simd_and(r180_24f_tmp42, r180_24f_tmp66);
                    r180_24f_tmp82 = simd_and(byte_c7_adv, byte_be);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp82);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp72);
                    byte_80 = simd_andc(byte_range_80_8f, tmp9);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(6), byte_c8_adv));
                    r180_24f_tmp83 = simd_and(byte_c8_adv, byte_80);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp83);
                    byte_82 = simd_and(byte_range_80_8f, r180_24f_tmp33);
                    r180_24f_tmp84 = simd_and(byte_c8_adv, byte_82);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp84);
                    r180_24f_tmp85 = simd_and(byte_c8_adv, byte_84);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp85);
                    byte_86 = simd_and(byte_range_80_8f, r180_24f_tmp2);
                    r180_24f_tmp86 = simd_and(byte_c8_adv, byte_86);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp86);
                    byte_88 = simd_and(byte_range_80_8f, r180_24f_tmp72);
                    r180_24f_tmp87 = simd_and(byte_c8_adv, byte_88);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp87);
                    r180_24f_tmp88 = simd_and(byte_c8_adv, byte_8a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp88);
                    byte_8c = simd_and(byte_range_80_8f, r180_24f_tmp38);
                    r180_24f_tmp89 = simd_and(byte_c8_adv, byte_8c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp89);
                    byte_8e = simd_and(byte_range_80_8f, r180_24f_tmp66);
                    r180_24f_tmp90 = simd_and(byte_c8_adv, byte_8e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp90);
                    byte_90 = simd_andc(r80_7ff_tmp11, tmp9);
                    r180_24f_tmp91 = simd_and(byte_c8_adv, byte_90);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp91);
                    byte_92 = simd_and(r80_7ff_tmp11, r180_24f_tmp33);
                    r180_24f_tmp92 = simd_and(byte_c8_adv, byte_92);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp92);
                    byte_94 = simd_and(r80_7ff_tmp11, r180_24f_tmp6);
                    r180_24f_tmp93 = simd_and(byte_c8_adv, byte_94);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp93);
                    byte_96 = simd_and(r80_7ff_tmp11, r180_24f_tmp2);
                    r180_24f_tmp94 = simd_and(byte_c8_adv, byte_96);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp94);
                    byte_98 = simd_and(r80_7ff_tmp11, r180_24f_tmp72);
                    r180_24f_tmp95 = simd_and(byte_c8_adv, byte_98);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp95);
                    byte_9a = simd_and(r80_7ff_tmp11, r180_24f_tmp53);
                    r180_24f_tmp96 = simd_and(byte_c8_adv, byte_9a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp96);
                    byte_9c = simd_and(r80_7ff_tmp11, r180_24f_tmp38);
                    r180_24f_tmp97 = simd_and(byte_c8_adv, byte_9c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp97);
                    r180_24f_tmp98 = simd_and(byte_c8_adv, byte_9e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp98);
                    r180_24f_tmp99 = simd_and(byte_c8_adv, byte_a0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp99);
                    r180_24f_tmp100 = simd_and(byte_c8_adv, byte_a2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp100);
                    r180_24f_tmp101 = simd_and(byte_c8_adv, byte_a4);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp101);
                    r180_24f_tmp102 = simd_and(byte_c8_adv, byte_a6);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp102);
                    r180_24f_tmp103 = simd_and(byte_c8_adv, byte_a8);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp103);
                    r180_24f_tmp104 = simd_and(byte_c8_adv, byte_aa);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp104);
                    r180_24f_tmp105 = simd_and(byte_c8_adv, byte_ac);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp105);
                    r180_24f_tmp106 = simd_and(byte_c8_adv, byte_ae);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp106);
                    byte_b0 = simd_andc(r180_24f_tmp42, tmp9);
                    r180_24f_tmp107 = simd_and(byte_c8_adv, byte_b0);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp107);
                    byte_b2 = simd_and(r180_24f_tmp42, r180_24f_tmp33);
                    r180_24f_tmp108 = simd_and(byte_c8_adv, byte_b2);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp108);
                    r180_24f_tmp109 = simd_and(r100_2ff_tmp4, basis_bits.bit_6);
                    byte_range_ba_bb = simd_and(r180_24f_tmp42, r180_24f_tmp109);
                    r180_24f_tmp110 = simd_and(byte_c8_adv, byte_range_ba_bb);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp110);
                    r180_24f_tmp111 = simd_and(r180_24f_tmp42, r180_24f_tmp14);
                    byte_range_bd_be = simd_and(r180_24f_tmp111, r180_24f_tmp4);
                    r180_24f_tmp112 = simd_and(byte_c8_adv, byte_range_bd_be);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp112);
                    byte_81 = simd_and(byte_range_80_8f, r180_24f_tmp58);
                    byte_c9_adv = r100_2ff_tmp7;
                    r180_24f_tmp113 = simd_and(byte_c9_adv, byte_81);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp113);
                    r180_24f_tmp114 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                    r180_24f_tmp115 = simd_xor(basis_bits.bit_5, tmp3);
                    byte_range_83_86 = simd_and(r180_24f_tmp114, r180_24f_tmp115);
                    r180_24f_tmp116 = simd_and(byte_c9_adv, byte_range_83_86);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp116);
                    r180_24f_tmp117 = simd_and(byte_c9_adv, byte_88);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp117);
                    r180_24f_tmp118 = simd_and(byte_c9_adv, byte_8a);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp118);
                    r180_24f_tmp119 = simd_and(byte_c9_adv, byte_8c);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp119);
                    r180_24f_tmp120 = simd_and(byte_c9_adv, byte_8e);
                    struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r180_24f_tmp120);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 6);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r80_7ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(8, 2))) {
                byte_b0 = simd_andc(byte_range_b0_bf, tmp9);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_b0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp2, tmp7);
                byte_b2 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(byte_cd_adv, byte_b2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp6 = simd_and(r370_3ff_tmp5, r370_3ff_tmp2);
                byte_b6 = simd_and(byte_range_b0_bf, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_and(byte_cd_adv, byte_b6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(r100_3ff_tmp2, tmp3);
                byte_bf = simd_and(byte_range_b0_bf, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(byte_cd_adv, byte_bf);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r100_3ff_tmp2, r370_3ff_tmp2);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                byte_86 = simd_and(r370_3ff_tmp11, r370_3ff_tmp6);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp12 = simd_and(byte_ce_adv, byte_86);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp12);
                r370_3ff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp14 = simd_and(r370_3ff_tmp11, r370_3ff_tmp13);
                byte_range_88_8a = simd_andc(r370_3ff_tmp14, tmp3);
                r370_3ff_tmp15 = simd_and(byte_ce_adv, byte_range_88_8a);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp15);
                r370_3ff_tmp16 = simd_andc(r100_3ff_tmp2, tmp8);
                byte_8c = simd_and(r370_3ff_tmp11, r370_3ff_tmp16);
                r370_3ff_tmp17 = simd_and(byte_ce_adv, byte_8c);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp17);
                byte_range_8e_8f = simd_and(r370_3ff_tmp11, r100_3ff_tmp8);
                r370_3ff_tmp18 = simd_and(byte_ce_adv, byte_range_8e_8f);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp18);
                r370_3ff_tmp19 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp20 = simd_or(basis_bits.bit_3, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_not(r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_and(basis_bits.bit_3, tmp9);
                r370_3ff_tmp23 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp21), simd_andc(r370_3ff_tmp22, basis_bits.bit_2));
                byte_range_91_a1 = simd_and(r80_7ff_tmp4, r370_3ff_tmp23);
                r370_3ff_tmp24 = simd_and(byte_ce_adv, byte_range_91_a1);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp24);
                r370_3ff_tmp25 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp26 = simd_and(r80_7ff_tmp4, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_not(basis_bits.bit_5);
                r370_3ff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp27), simd_andc(tmp4, basis_bits.bit_4));
                byte_range_a3_ab = simd_and(r370_3ff_tmp26, r370_3ff_tmp28);
                r370_3ff_tmp29 = simd_and(byte_ce_adv, byte_range_a3_ab);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp29);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp8);
                byte_8f = simd_and(r370_3ff_tmp11, r370_3ff_tmp8);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp30 = simd_and(byte_cf_adv, byte_8f);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp30);
                r370_3ff_tmp31 = simd_andc(r80_7ff_tmp11, basis_bits.bit_4);
                r370_3ff_tmp32 = simd_not(tmp8);
                r370_3ff_tmp33 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp32), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                byte_range_92_94 = simd_and(r370_3ff_tmp31, r370_3ff_tmp33);
                r370_3ff_tmp34 = simd_and(byte_cf_adv, byte_range_92_94);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp34);
                r370_3ff_tmp35 = simd_andc(r370_3ff_tmp13, tmp8);
                byte_98 = simd_and(r80_7ff_tmp11, r370_3ff_tmp35);
                r370_3ff_tmp36 = simd_and(byte_cf_adv, byte_98);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp36);
                r370_3ff_tmp37 = simd_and(r370_3ff_tmp13, r370_3ff_tmp2);
                byte_9a = simd_and(r80_7ff_tmp11, r370_3ff_tmp37);
                r370_3ff_tmp38 = simd_and(byte_cf_adv, byte_9a);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp38);
                byte_9c = simd_and(r80_7ff_tmp11, r370_3ff_tmp16);
                r370_3ff_tmp39 = simd_and(byte_cf_adv, byte_9c);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp39);
                byte_9e = simd_and(r80_7ff_tmp11, r370_3ff_tmp10);
                r370_3ff_tmp40 = simd_and(byte_cf_adv, byte_9e);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp40);
                byte_a0 = simd_andc(r370_3ff_tmp26, tmp9);
                r370_3ff_tmp41 = simd_and(byte_cf_adv, byte_a0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp41);
                byte_a2 = simd_and(r370_3ff_tmp26, r370_3ff_tmp3);
                r370_3ff_tmp42 = simd_and(byte_cf_adv, byte_a2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp42);
                r370_3ff_tmp43 = simd_andc(r370_3ff_tmp5, tmp8);
                byte_a4 = simd_and(r370_3ff_tmp26, r370_3ff_tmp43);
                r370_3ff_tmp44 = simd_and(byte_cf_adv, byte_a4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp44);
                byte_a6 = simd_and(r370_3ff_tmp26, r370_3ff_tmp6);
                r370_3ff_tmp45 = simd_and(byte_cf_adv, byte_a6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp45);
                byte_a8 = simd_and(r370_3ff_tmp26, r370_3ff_tmp35);
                r370_3ff_tmp46 = simd_and(byte_cf_adv, byte_a8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp46);
                byte_aa = simd_and(r370_3ff_tmp26, r370_3ff_tmp37);
                r370_3ff_tmp47 = simd_and(byte_cf_adv, byte_aa);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp47);
                byte_ac = simd_and(r370_3ff_tmp26, r370_3ff_tmp16);
                r370_3ff_tmp48 = simd_and(byte_cf_adv, byte_ac);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp48);
                byte_ae = simd_and(r370_3ff_tmp26, r370_3ff_tmp10);
                r370_3ff_tmp49 = simd_and(byte_cf_adv, byte_ae);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp49);
                byte_b4 = simd_and(byte_range_b0_bf, r370_3ff_tmp43);
                r370_3ff_tmp50 = simd_and(byte_cf_adv, byte_b4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp50);
                r370_3ff_tmp51 = simd_and(r370_3ff_tmp5, tmp3);
                byte_b7 = simd_and(byte_range_b0_bf, r370_3ff_tmp51);
                r370_3ff_tmp52 = simd_and(byte_cf_adv, byte_b7);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp52);
                r370_3ff_tmp53 = simd_and(byte_range_b0_bf, r370_3ff_tmp13);
                r370_3ff_tmp54 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                byte_range_b9_ba = simd_and(r370_3ff_tmp53, r370_3ff_tmp54);
                r370_3ff_tmp55 = simd_and(byte_cf_adv, byte_range_b9_ba);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp55);
                r370_3ff_tmp56 = simd_and(byte_range_b0_bf, r100_3ff_tmp2);
                byte_range_bd_bf = simd_and(r370_3ff_tmp56, tmp8);
                r370_3ff_tmp57 = simd_and(byte_cf_adv, byte_range_bd_bf);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r370_3ff_tmp57);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 9);
            }
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, r80_7ff_tmp10);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp14, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp14, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp14, tmp9);
                r400_4ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r400_4ff_tmp1);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(10), byte_d0_adv));
                r400_4ff_tmp2 = simd_and(byte_d0_adv, byte_range_80_af);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp14, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp6 = simd_and(r80_7ff_tmp4, r400_4ff_tmp5);
                byte_a0 = simd_andc(r400_4ff_tmp6, tmp9);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(11), byte_d1_adv));
                r400_4ff_tmp7 = simd_and(byte_d1_adv, byte_a0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp7);
                r400_4ff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp9 = simd_andc(r400_4ff_tmp8, tmp7);
                byte_a2 = simd_and(r400_4ff_tmp6, r400_4ff_tmp9);
                r400_4ff_tmp10 = simd_and(byte_d1_adv, byte_a2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp10);
                r400_4ff_tmp11 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r400_4ff_tmp12 = simd_andc(r400_4ff_tmp11, tmp8);
                byte_a4 = simd_and(r400_4ff_tmp6, r400_4ff_tmp12);
                r400_4ff_tmp13 = simd_and(byte_d1_adv, byte_a4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp13);
                r400_4ff_tmp14 = simd_and(r400_4ff_tmp11, r400_4ff_tmp8);
                byte_a6 = simd_and(r400_4ff_tmp6, r400_4ff_tmp14);
                r400_4ff_tmp15 = simd_and(byte_d1_adv, byte_a6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp15);
                r400_4ff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp17 = simd_andc(r400_4ff_tmp16, tmp8);
                byte_a8 = simd_and(r400_4ff_tmp6, r400_4ff_tmp17);
                r400_4ff_tmp18 = simd_and(byte_d1_adv, byte_a8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp18);
                r400_4ff_tmp19 = simd_and(r400_4ff_tmp16, r400_4ff_tmp8);
                byte_aa = simd_and(r400_4ff_tmp6, r400_4ff_tmp19);
                r400_4ff_tmp20 = simd_and(byte_d1_adv, byte_aa);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp20);
                r400_4ff_tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp22 = simd_andc(r400_4ff_tmp21, tmp8);
                byte_ac = simd_and(r400_4ff_tmp6, r400_4ff_tmp22);
                r400_4ff_tmp23 = simd_and(byte_d1_adv, byte_ac);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp23);
                r400_4ff_tmp24 = simd_and(r400_4ff_tmp21, r400_4ff_tmp8);
                byte_ae = simd_and(r400_4ff_tmp6, r400_4ff_tmp24);
                r400_4ff_tmp25 = simd_and(byte_d1_adv, byte_ae);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp25);
                r400_4ff_tmp26 = simd_and(r80_7ff_tmp4, r400_4ff_tmp1);
                byte_b0 = simd_andc(r400_4ff_tmp26, tmp9);
                r400_4ff_tmp27 = simd_and(byte_d1_adv, byte_b0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp27);
                byte_b2 = simd_and(r400_4ff_tmp26, r400_4ff_tmp9);
                r400_4ff_tmp28 = simd_and(byte_d1_adv, byte_b2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp28);
                byte_b4 = simd_and(r400_4ff_tmp26, r400_4ff_tmp12);
                r400_4ff_tmp29 = simd_and(byte_d1_adv, byte_b4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp29);
                byte_b6 = simd_and(r400_4ff_tmp26, r400_4ff_tmp14);
                r400_4ff_tmp30 = simd_and(byte_d1_adv, byte_b6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp30);
                byte_b8 = simd_and(r400_4ff_tmp26, r400_4ff_tmp17);
                r400_4ff_tmp31 = simd_and(byte_d1_adv, byte_b8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp31);
                byte_ba = simd_and(r400_4ff_tmp26, r400_4ff_tmp19);
                r400_4ff_tmp32 = simd_and(byte_d1_adv, byte_ba);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp32);
                byte_bc = simd_and(r400_4ff_tmp26, r400_4ff_tmp22);
                r400_4ff_tmp33 = simd_and(byte_d1_adv, byte_bc);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp33);
                byte_be = simd_and(r400_4ff_tmp26, r400_4ff_tmp24);
                r400_4ff_tmp34 = simd_and(byte_d1_adv, byte_be);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp34);
                byte_d2 = simd_and(r80_7ff_tmp14, r400_4ff_tmp9);
                r400_4ff_tmp35 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                byte_80 = simd_andc(r400_4ff_tmp35, tmp9);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), byte_d2_adv));
                r400_4ff_tmp36 = simd_and(byte_d2_adv, byte_80);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp36);
                byte_8a = simd_and(r400_4ff_tmp35, r400_4ff_tmp19);
                r400_4ff_tmp37 = simd_and(byte_d2_adv, byte_8a);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp37);
                byte_8c = simd_and(r400_4ff_tmp35, r400_4ff_tmp22);
                r400_4ff_tmp38 = simd_and(byte_d2_adv, byte_8c);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp38);
                byte_8e = simd_and(r400_4ff_tmp35, r400_4ff_tmp24);
                r400_4ff_tmp39 = simd_and(byte_d2_adv, byte_8e);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp39);
                byte_90 = simd_andc(r80_7ff_tmp11, tmp9);
                r400_4ff_tmp40 = simd_and(byte_d2_adv, byte_90);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp40);
                byte_92 = simd_and(r80_7ff_tmp11, r400_4ff_tmp9);
                r400_4ff_tmp41 = simd_and(byte_d2_adv, byte_92);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp41);
                byte_94 = simd_and(r80_7ff_tmp11, r400_4ff_tmp12);
                r400_4ff_tmp42 = simd_and(byte_d2_adv, byte_94);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp42);
                byte_96 = simd_and(r80_7ff_tmp11, r400_4ff_tmp14);
                r400_4ff_tmp43 = simd_and(byte_d2_adv, byte_96);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp43);
                byte_98 = simd_and(r80_7ff_tmp11, r400_4ff_tmp17);
                r400_4ff_tmp44 = simd_and(byte_d2_adv, byte_98);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp44);
                byte_9a = simd_and(r80_7ff_tmp11, r400_4ff_tmp19);
                r400_4ff_tmp45 = simd_and(byte_d2_adv, byte_9a);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp45);
                byte_9c = simd_and(r80_7ff_tmp11, r400_4ff_tmp22);
                r400_4ff_tmp46 = simd_and(byte_d2_adv, byte_9c);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp46);
                byte_9e = simd_and(r80_7ff_tmp11, r400_4ff_tmp24);
                r400_4ff_tmp47 = simd_and(byte_d2_adv, byte_9e);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp47);
                r400_4ff_tmp48 = simd_and(byte_d2_adv, byte_a0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp48);
                r400_4ff_tmp49 = simd_and(byte_d2_adv, byte_a2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp49);
                r400_4ff_tmp50 = simd_and(byte_d2_adv, byte_a4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp50);
                r400_4ff_tmp51 = simd_and(byte_d2_adv, byte_a6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp51);
                r400_4ff_tmp52 = simd_and(byte_d2_adv, byte_a8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp52);
                r400_4ff_tmp53 = simd_and(byte_d2_adv, byte_aa);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp53);
                r400_4ff_tmp54 = simd_and(byte_d2_adv, byte_ac);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp54);
                r400_4ff_tmp55 = simd_and(byte_d2_adv, byte_ae);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp55);
                r400_4ff_tmp56 = simd_and(byte_d2_adv, byte_b0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp56);
                r400_4ff_tmp57 = simd_and(byte_d2_adv, byte_b2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp57);
                r400_4ff_tmp58 = simd_and(byte_d2_adv, byte_b4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp58);
                r400_4ff_tmp59 = simd_and(byte_d2_adv, byte_b6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp59);
                r400_4ff_tmp60 = simd_and(byte_d2_adv, byte_b8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp60);
                r400_4ff_tmp61 = simd_and(byte_d2_adv, byte_ba);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp61);
                r400_4ff_tmp62 = simd_and(byte_d2_adv, byte_bc);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp62);
                r400_4ff_tmp63 = simd_and(byte_d2_adv, byte_be);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp63);
                byte_d3 = simd_and(r80_7ff_tmp14, r80_7ff_tmp3);
                r400_4ff_tmp64 = simd_or(tmp7, basis_bits.bit_6);
                byte_range_80_81 = simd_andc(r400_4ff_tmp35, r400_4ff_tmp64);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), byte_d3_adv));
                r400_4ff_tmp65 = simd_and(byte_d3_adv, byte_range_80_81);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp65);
                byte_83 = simd_and(r400_4ff_tmp35, r80_7ff_tmp3);
                r400_4ff_tmp66 = simd_and(byte_d3_adv, byte_83);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp66);
                r400_4ff_tmp67 = simd_and(r400_4ff_tmp11, r400_4ff_tmp3);
                byte_85 = simd_and(r400_4ff_tmp35, r400_4ff_tmp67);
                r400_4ff_tmp68 = simd_and(byte_d3_adv, byte_85);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp68);
                r400_4ff_tmp69 = simd_and(r400_4ff_tmp11, tmp3);
                byte_87 = simd_and(r400_4ff_tmp35, r400_4ff_tmp69);
                r400_4ff_tmp70 = simd_and(byte_d3_adv, byte_87);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp70);
                r400_4ff_tmp71 = simd_and(r400_4ff_tmp16, r400_4ff_tmp3);
                byte_89 = simd_and(r400_4ff_tmp35, r400_4ff_tmp71);
                r400_4ff_tmp72 = simd_and(byte_d3_adv, byte_89);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp72);
                r400_4ff_tmp73 = simd_and(r400_4ff_tmp16, tmp3);
                byte_8b = simd_and(r400_4ff_tmp35, r400_4ff_tmp73);
                r400_4ff_tmp74 = simd_and(byte_d3_adv, byte_8b);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp74);
                r400_4ff_tmp75 = simd_and(r400_4ff_tmp21, r400_4ff_tmp3);
                byte_8d = simd_and(r400_4ff_tmp35, r400_4ff_tmp75);
                r400_4ff_tmp76 = simd_and(byte_d3_adv, byte_8d);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp76);
                r400_4ff_tmp77 = simd_and(byte_d3_adv, byte_90);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp77);
                r400_4ff_tmp78 = simd_and(byte_d3_adv, byte_92);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp78);
                r400_4ff_tmp79 = simd_and(byte_d3_adv, byte_94);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp79);
                r400_4ff_tmp80 = simd_and(byte_d3_adv, byte_96);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp80);
                r400_4ff_tmp81 = simd_and(byte_d3_adv, byte_98);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp81);
                r400_4ff_tmp82 = simd_and(byte_d3_adv, byte_9a);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp82);
                r400_4ff_tmp83 = simd_and(byte_d3_adv, byte_9c);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp83);
                r400_4ff_tmp84 = simd_and(byte_d3_adv, byte_9e);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp84);
                r400_4ff_tmp85 = simd_and(byte_d3_adv, byte_a0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp85);
                r400_4ff_tmp86 = simd_and(byte_d3_adv, byte_a2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp86);
                r400_4ff_tmp87 = simd_and(byte_d3_adv, byte_a4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp87);
                r400_4ff_tmp88 = simd_and(byte_d3_adv, byte_a6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp88);
                r400_4ff_tmp89 = simd_and(byte_d3_adv, byte_a8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp89);
                r400_4ff_tmp90 = simd_and(byte_d3_adv, byte_aa);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp90);
                r400_4ff_tmp91 = simd_and(byte_d3_adv, byte_ac);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp91);
                r400_4ff_tmp92 = simd_and(byte_d3_adv, byte_ae);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp92);
                r400_4ff_tmp93 = simd_and(byte_d3_adv, byte_b0);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp93);
                r400_4ff_tmp94 = simd_and(byte_d3_adv, byte_b2);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp94);
                r400_4ff_tmp95 = simd_and(byte_d3_adv, byte_b4);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp95);
                r400_4ff_tmp96 = simd_and(byte_d3_adv, byte_b6);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp96);
                r400_4ff_tmp97 = simd_and(byte_d3_adv, byte_b8);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp97);
                r400_4ff_tmp98 = simd_and(byte_d3_adv, byte_ba);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp98);
                r400_4ff_tmp99 = simd_and(byte_d3_adv, byte_bc);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp99);
                r400_4ff_tmp100 = simd_and(byte_d3_adv, byte_be);
                struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r400_4ff_tmp100);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 4);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp14, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp14, r400_5ff_tmp4);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_80_8f);
              r400_5ff_tmp7 = simd_or(byte_range_d4_d5, r400_5ff_tmp6);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r400_5ff_tmp1, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp14, r500_58f_tmp1);
                r500_58f_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r500_58f_tmp2);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp3));
                r500_58f_tmp4 = simd_and(r500_58f_tmp3, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp4)) {
                  byte_80 = simd_andc(byte_range_80_8f, tmp9);
                  byte_d4_adv = r500_58f_tmp3;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp1);
                  r500_52f_tmp2 = simd_andc(r400_5ff_tmp3, tmp7);
                  byte_82 = simd_and(byte_range_80_8f, r500_52f_tmp2);
                  r500_52f_tmp3 = simd_and(byte_d4_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp3);
                  byte_84 = simd_and(byte_range_80_8f, r500_58f_tmp1);
                  r500_52f_tmp4 = simd_and(byte_d4_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp4);
                  byte_86 = simd_and(byte_range_80_8f, r400_5ff_tmp4);
                  r500_52f_tmp5 = simd_and(byte_d4_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp5);
                  r500_52f_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r500_52f_tmp7 = simd_andc(r500_52f_tmp6, tmp8);
                  byte_88 = simd_and(byte_range_80_8f, r500_52f_tmp7);
                  r500_52f_tmp8 = simd_and(byte_d4_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp8);
                  r500_52f_tmp9 = simd_and(r500_52f_tmp6, r400_5ff_tmp3);
                  byte_8a = simd_and(byte_range_80_8f, r500_52f_tmp9);
                  r500_52f_tmp10 = simd_and(byte_d4_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp10);
                  r500_52f_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r500_52f_tmp12 = simd_andc(r500_52f_tmp11, tmp8);
                  byte_8c = simd_and(byte_range_80_8f, r500_52f_tmp12);
                  r500_52f_tmp13 = simd_and(byte_d4_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp13);
                  r500_52f_tmp14 = simd_and(r500_52f_tmp11, r400_5ff_tmp3);
                  byte_8e = simd_and(byte_range_80_8f, r500_52f_tmp14);
                  r500_52f_tmp15 = simd_and(byte_d4_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp15);
                  byte_90 = simd_andc(r80_7ff_tmp11, tmp9);
                  r500_52f_tmp16 = simd_and(byte_d4_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp16);
                  byte_92 = simd_and(r80_7ff_tmp11, r500_52f_tmp2);
                  r500_52f_tmp17 = simd_and(byte_d4_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp17);
                  byte_94 = simd_and(r80_7ff_tmp11, r500_58f_tmp1);
                  r500_52f_tmp18 = simd_and(byte_d4_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp18);
                  byte_96 = simd_and(r80_7ff_tmp11, r400_5ff_tmp4);
                  r500_52f_tmp19 = simd_and(byte_d4_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp19);
                  byte_98 = simd_and(r80_7ff_tmp11, r500_52f_tmp7);
                  r500_52f_tmp20 = simd_and(byte_d4_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp20);
                  byte_9a = simd_and(r80_7ff_tmp11, r500_52f_tmp9);
                  r500_52f_tmp21 = simd_and(byte_d4_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp21);
                  byte_9c = simd_and(r80_7ff_tmp11, r500_52f_tmp12);
                  r500_52f_tmp22 = simd_and(byte_d4_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp22);
                  byte_9e = simd_and(r80_7ff_tmp11, r500_52f_tmp14);
                  r500_52f_tmp23 = simd_and(byte_d4_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp23);
                  r500_52f_tmp24 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r500_52f_tmp25 = simd_and(r80_7ff_tmp4, r500_52f_tmp24);
                  byte_a0 = simd_andc(r500_52f_tmp25, tmp9);
                  r500_52f_tmp26 = simd_and(byte_d4_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp26);
                  byte_a2 = simd_and(r500_52f_tmp25, r500_52f_tmp2);
                  r500_52f_tmp27 = simd_and(byte_d4_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp27);
                  byte_a4 = simd_and(r500_52f_tmp25, r500_58f_tmp1);
                  r500_52f_tmp28 = simd_and(byte_d4_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp28);
                  byte_a6 = simd_and(r500_52f_tmp25, r400_5ff_tmp4);
                  r500_52f_tmp29 = simd_and(byte_d4_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp29);
                  byte_a8 = simd_and(r500_52f_tmp25, r500_52f_tmp7);
                  r500_52f_tmp30 = simd_and(byte_d4_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp30);
                  byte_aa = simd_and(r500_52f_tmp25, r500_52f_tmp9);
                  r500_52f_tmp31 = simd_and(byte_d4_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp31);
                  byte_ac = simd_and(r500_52f_tmp25, r500_52f_tmp12);
                  r500_52f_tmp32 = simd_and(byte_d4_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp32);
                  byte_ae = simd_and(r500_52f_tmp25, r500_52f_tmp14);
                  r500_52f_tmp33 = simd_and(byte_d4_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r500_52f_tmp33);
                }
                byte_range_b0_bf = simd_and(r80_7ff_tmp4, r500_58f_tmp2);
                r500_58f_tmp5 = simd_and(r500_58f_tmp3, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp14, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp6);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp3;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r530_58f_tmp3);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 17);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(17, 28))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(17), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(18, 19))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(18, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(18, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp7);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(19), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_83_adv, byte_range_80_85);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp3);
                  byte_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_83_adv, byte_87);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp13, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_83_adv, byte_8d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp19 = simd_andc(r1000_1fff_tmp18, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp19);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp9);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(21), sequence_e1_b8_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_b8_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_b8_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp21);
                  byte_84 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_b8_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp3);
                  byte_86 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b8_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp24);
                  byte_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp19);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_b8_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp3);
                  byte_8a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b8_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_andc(r1000_1fff_tmp13, tmp8);
                  byte_8c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_b8_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp3);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(sequence_e1_b8_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp33 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp32);
                  byte_90 = simd_andc(r1000_1fff_tmp33, tmp9);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_b8_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp34);
                  byte_92 = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp4);
                  r1000_1fff_tmp35 = simd_and(sequence_e1_b8_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp35);
                  byte_94 = simd_and(r1000_1fff_tmp33, r800_ffff_tmp2);
                  r1000_1fff_tmp36 = simd_and(sequence_e1_b8_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp36);
                  byte_96 = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp23);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_b8_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp37);
                  byte_98 = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp19);
                  r1000_1fff_tmp38 = simd_and(sequence_e1_b8_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp38);
                  byte_9a = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp26);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_b8_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp39);
                  byte_9c = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp28);
                  r1000_1fff_tmp40 = simd_and(sequence_e1_b8_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp40);
                  byte_9e = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp30);
                  r1000_1fff_tmp41 = simd_and(sequence_e1_b8_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp42, tmp9);
                  r1000_1fff_tmp43 = simd_and(sequence_e1_b8_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp43);
                  byte_a2 = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp4);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_b8_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp44);
                  byte_a4 = simd_and(r1000_1fff_tmp42, r800_ffff_tmp2);
                  r1000_1fff_tmp45 = simd_and(sequence_e1_b8_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp45);
                  byte_a6 = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp23);
                  r1000_1fff_tmp46 = simd_and(sequence_e1_b8_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp46);
                  byte_a8 = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp19);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_b8_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp47);
                  byte_aa = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp26);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_b8_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp48);
                  byte_ac = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp28);
                  r1000_1fff_tmp49 = simd_and(sequence_e1_b8_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp49);
                  byte_ae = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp30);
                  r1000_1fff_tmp50 = simd_and(sequence_e1_b8_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp50);
                  byte_b0 = simd_andc(r1000_1fff_tmp17, tmp9);
                  r1000_1fff_tmp51 = simd_and(sequence_e1_b8_adv, byte_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp51);
                  byte_b2 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp4);
                  r1000_1fff_tmp52 = simd_and(sequence_e1_b8_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp52);
                  byte_b4 = simd_and(r1000_1fff_tmp17, r800_ffff_tmp2);
                  r1000_1fff_tmp53 = simd_and(sequence_e1_b8_adv, byte_b4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp53);
                  byte_b6 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp23);
                  r1000_1fff_tmp54 = simd_and(sequence_e1_b8_adv, byte_b6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp54);
                  r1000_1fff_tmp55 = simd_and(sequence_e1_b8_adv, byte_b8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp55);
                  byte_ba = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp26);
                  r1000_1fff_tmp56 = simd_and(sequence_e1_b8_adv, byte_ba);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp56);
                  byte_bc = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp28);
                  r1000_1fff_tmp57 = simd_and(sequence_e1_b8_adv, byte_bc);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp57);
                  byte_be = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp30);
                  r1000_1fff_tmp58 = simd_and(sequence_e1_b8_adv, byte_be);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp58);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp18, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp59);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(22), sequence_e1_b9_adv));
                  r1000_1fff_tmp60 = simd_and(sequence_e1_b9_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(sequence_e1_b9_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(sequence_e1_b9_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_b9_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_b9_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(sequence_e1_b9_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp65);
                  r1000_1fff_tmp66 = simd_and(sequence_e1_b9_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_b9_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp67);
                  r1000_1fff_tmp68 = simd_and(sequence_e1_b9_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_and(sequence_e1_b9_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_b9_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(sequence_e1_b9_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp71);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_b9_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_and(sequence_e1_b9_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_b9_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(sequence_e1_b9_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp75);
                  r1000_1fff_tmp76 = simd_and(sequence_e1_b9_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp76);
                  r1000_1fff_tmp77 = simd_and(sequence_e1_b9_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(sequence_e1_b9_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp78);
                  r1000_1fff_tmp79 = simd_and(sequence_e1_b9_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp79);
                  r1000_1fff_tmp80 = simd_and(sequence_e1_b9_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(sequence_e1_b9_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp81);
                  r1000_1fff_tmp82 = simd_and(sequence_e1_b9_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp82);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_b9_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp83);
                  r1000_1fff_tmp84 = simd_and(sequence_e1_b9_adv, byte_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(sequence_e1_b9_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp85);
                  r1000_1fff_tmp86 = simd_and(sequence_e1_b9_adv, byte_b4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp86);
                  r1000_1fff_tmp87 = simd_and(sequence_e1_b9_adv, byte_b6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp87);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_b9_adv, byte_b8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(sequence_e1_b9_adv, byte_ba);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp89);
                  r1000_1fff_tmp90 = simd_and(sequence_e1_b9_adv, byte_bc);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp90);
                  r1000_1fff_tmp91 = simd_and(sequence_e1_b9_adv, byte_be);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp91);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(23), sequence_e1_ba_adv));
                  r1000_1fff_tmp92 = simd_and(sequence_e1_ba_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp92);
                  r1000_1fff_tmp93 = simd_and(sequence_e1_ba_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(sequence_e1_ba_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_and(sequence_e1_ba_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp95);
                  r1000_1fff_tmp96 = simd_and(sequence_e1_ba_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp96);
                  r1000_1fff_tmp97 = simd_and(sequence_e1_ba_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp97);
                  r1000_1fff_tmp98 = simd_and(sequence_e1_ba_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp98);
                  r1000_1fff_tmp99 = simd_and(sequence_e1_ba_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_ba_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp100);
                  r1000_1fff_tmp101 = simd_and(sequence_e1_ba_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(sequence_e1_ba_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_and(sequence_e1_ba_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp103);
                  r1000_1fff_tmp104 = simd_and(sequence_e1_ba_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp104);
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ba_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp105);
                  r1000_1fff_tmp106 = simd_and(sequence_e1_ba_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp106);
                  r1000_1fff_tmp107 = simd_and(sequence_e1_ba_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp107);
                  r1000_1fff_tmp108 = simd_and(sequence_e1_ba_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp108);
                  r1000_1fff_tmp109 = simd_and(sequence_e1_ba_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp109);
                  r1000_1fff_tmp110 = simd_and(sequence_e1_ba_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp110);
                  r1000_1fff_tmp111 = simd_and(sequence_e1_ba_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp111);
                  r1000_1fff_tmp112 = simd_and(sequence_e1_ba_adv, byte_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp112);
                  r1000_1fff_tmp113 = simd_and(sequence_e1_ba_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp113);
                  r1000_1fff_tmp114 = simd_and(sequence_e1_ba_adv, byte_b4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp114);
                  r1000_1fff_tmp115 = simd_and(sequence_e1_ba_adv, byte_b6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp115);
                  r1000_1fff_tmp116 = simd_and(sequence_e1_ba_adv, byte_b8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp116);
                  r1000_1fff_tmp117 = simd_and(sequence_e1_ba_adv, byte_ba);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp117);
                  r1000_1fff_tmp118 = simd_and(sequence_e1_ba_adv, byte_bc);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp118);
                  r1000_1fff_tmp119 = simd_and(sequence_e1_ba_adv, byte_be);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp119);
                  r1000_1fff_tmp120 = simd_and(r1000_1fff_tmp18, tmp3);
                  byte_bb = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp120);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(24), sequence_e1_bb_adv));
                  r1000_1fff_tmp121 = simd_and(sequence_e1_bb_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp121);
                  r1000_1fff_tmp122 = simd_and(sequence_e1_bb_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp122);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_bb_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp123);
                  r1000_1fff_tmp124 = simd_and(sequence_e1_bb_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp124);
                  r1000_1fff_tmp125 = simd_and(sequence_e1_bb_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp125);
                  r1000_1fff_tmp126 = simd_and(sequence_e1_bb_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp126);
                  r1000_1fff_tmp127 = simd_and(sequence_e1_bb_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp127);
                  r1000_1fff_tmp128 = simd_and(sequence_e1_bb_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_bb_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp129);
                  r1000_1fff_tmp130 = simd_and(sequence_e1_bb_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp130);
                  r1000_1fff_tmp131 = simd_and(sequence_e1_bb_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp131);
                  r1000_1fff_tmp132 = simd_and(sequence_e1_bb_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp132);
                  r1000_1fff_tmp133 = simd_and(sequence_e1_bb_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp133);
                  r1000_1fff_tmp134 = simd_and(sequence_e1_bb_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp134);
                  r1000_1fff_tmp135 = simd_and(sequence_e1_bb_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp135);
                  r1000_1fff_tmp136 = simd_and(sequence_e1_bb_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp136);
                  r1000_1fff_tmp137 = simd_and(sequence_e1_bb_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp137);
                  r1000_1fff_tmp138 = simd_and(sequence_e1_bb_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_and(sequence_e1_bb_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_bb_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp140);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_bb_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp141);
                  r1000_1fff_tmp142 = simd_and(sequence_e1_bb_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp142);
                  r1000_1fff_tmp143 = simd_and(sequence_e1_bb_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp143);
                  r1000_1fff_tmp144 = simd_and(sequence_e1_bb_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp144);
                  r1000_1fff_tmp145 = simd_and(sequence_e1_bb_adv, byte_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp145);
                  r1000_1fff_tmp146 = simd_and(sequence_e1_bb_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp146);
                  r1000_1fff_tmp147 = simd_and(sequence_e1_bb_adv, byte_b4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp147);
                  r1000_1fff_tmp148 = simd_and(sequence_e1_bb_adv, byte_b6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp148);
                  r1000_1fff_tmp149 = simd_and(sequence_e1_bb_adv, byte_b8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp149);
                  r1000_1fff_tmp150 = simd_and(sequence_e1_bb_adv, byte_ba);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp150);
                  r1000_1fff_tmp151 = simd_and(sequence_e1_bb_adv, byte_bc);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp151);
                  r1000_1fff_tmp152 = simd_and(sequence_e1_bb_adv, byte_be);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp152);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_88_8f = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(25), sequence_e1_bc_adv));
                  r1000_1fff_tmp153 = simd_and(sequence_e1_bc_adv, byte_range_88_8f);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp153);
                  r1000_1fff_tmp154 = simd_and(r1000_1fff_tmp33, basis_bits.bit_4);
                  byte_range_98_9d = simd_andc(r1000_1fff_tmp154, r1000_1fff_tmp9);
                  r1000_1fff_tmp155 = simd_and(sequence_e1_bc_adv, byte_range_98_9d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp155);
                  byte_range_a8_af = simd_and(r1000_1fff_tmp42, basis_bits.bit_4);
                  r1000_1fff_tmp156 = simd_and(sequence_e1_bc_adv, byte_range_a8_af);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp156);
                  byte_range_b8_bf = simd_and(r1000_1fff_tmp17, basis_bits.bit_4);
                  r1000_1fff_tmp157 = simd_and(sequence_e1_bc_adv, byte_range_b8_bf);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp157);
                  byte_bd = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp14);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  byte_range_88_8d = simd_andc(byte_range_88_8f, r1000_1fff_tmp9);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(26), sequence_e1_bd_adv));
                  r1000_1fff_tmp158 = simd_and(sequence_e1_bd_adv, byte_range_88_8d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp158);
                  byte_99 = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp59);
                  r1000_1fff_tmp159 = simd_and(sequence_e1_bd_adv, byte_99);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp159);
                  byte_9b = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp120);
                  r1000_1fff_tmp160 = simd_and(sequence_e1_bd_adv, byte_9b);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp160);
                  byte_9d = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp14);
                  r1000_1fff_tmp161 = simd_and(sequence_e1_bd_adv, byte_9d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp161);
                  r1000_1fff_tmp162 = simd_and(r1000_1fff_tmp13, tmp3);
                  byte_9f = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp162);
                  r1000_1fff_tmp163 = simd_and(sequence_e1_bd_adv, byte_9f);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp163);
                  r1000_1fff_tmp164 = simd_and(sequence_e1_bd_adv, byte_range_a8_af);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp164);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_range_b8_bb = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(27), sequence_e1_be_adv));
                  r1000_1fff_tmp165 = simd_and(sequence_e1_be_adv, byte_range_b8_bb);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp165);
                  byte_bf = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp162);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_range_88_8b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp18);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(28), sequence_e1_bf_adv));
                  r1000_1fff_tmp166 = simd_and(sequence_e1_bf_adv, byte_range_88_8b);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp166);
                  byte_range_98_9b = simd_and(r1000_1fff_tmp33, r1000_1fff_tmp18);
                  r1000_1fff_tmp167 = simd_and(sequence_e1_bf_adv, byte_range_98_9b);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp167);
                  r1000_1fff_tmp168 = simd_and(basis_bits.bit_5, tmp8);
                  byte_range_a8_ac = simd_andc(byte_range_a8_af, r1000_1fff_tmp168);
                  r1000_1fff_tmp169 = simd_and(sequence_e1_bf_adv, byte_range_a8_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp169);
                  r1000_1fff_tmp170 = simd_and(sequence_e1_bf_adv, byte_range_b8_bb);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r1000_1fff_tmp170);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(29, 8))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(29, 8))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(30), sequence_e2_84_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_84_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp1, tmp3);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(sequence_e2_84_adv, byte_87);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp8), simd_andc(tmp3, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(sequence_e2_84_adv, byte_range_8b_8d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp12 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, tmp7);
                  byte_range_90_92 = simd_andc(r2000_2fff_tmp13, tmp3);
                  r2000_2fff_tmp14 = simd_and(sequence_e2_84_adv, byte_range_90_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp15);
                  byte_95 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_84_adv, byte_95);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp12, basis_bits.bit_4);
                  r2000_2fff_tmp19 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp8), simd_andc(tmp8, basis_bits.bit_5));
                  byte_range_99_9d = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(sequence_e2_84_adv, byte_range_99_9d);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r2000_2fff_tmp21, r800_ffff_tmp2);
                  r2000_2fff_tmp22 = simd_and(sequence_e2_84_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(sequence_e2_84_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp26 = simd_andc(r2000_2fff_tmp25, tmp8);
                  byte_a8 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(sequence_e2_84_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp21, basis_bits.bit_4);
                  r2000_2fff_tmp29 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_ad = simd_and(r2000_2fff_tmp28, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_84_adv, byte_range_aa_ad);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp32 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp31);
                  byte_range_b0_b3 = simd_andc(r2000_2fff_tmp32, tmp7);
                  r2000_2fff_tmp33 = simd_and(sequence_e2_84_adv, byte_range_b0_b3);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp34, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(sequence_e2_84_adv, byte_range_be_bf);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp36);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_85_adv, byte_85);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp37);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp23);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp38 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_86_adv, byte_83);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp39);
                  byte_b0 = simd_andc(r2000_2fff_tmp32, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp34, tmp3);
                  r2000_2fff_tmp41 = simd_or(basis_bits.bit_3, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_and(basis_bits.bit_2, r2000_2fff_tmp41);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp42);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(33), sequence_e2_b0_adv));
                  r2000_2fff_tmp43 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_andc(r2000_2fff_tmp15, tmp7);
                  byte_b1 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp44);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  byte_a0 = simd_andc(r2000_2fff_tmp21, tmp9);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(34), sequence_e2_b1_adv));
                  r2000_2fff_tmp45 = simd_and(sequence_e2_b1_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp45);
                  r2000_2fff_tmp46 = simd_andc(r2000_2fff_tmp21, basis_bits.bit_4);
                  r2000_2fff_tmp47 = simd_not(tmp8);
                  r2000_2fff_tmp48 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp47), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_a2_a4 = simd_and(r2000_2fff_tmp46, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_b1_adv, byte_range_a2_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp49);
                  byte_a7 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp5);
                  r2000_2fff_tmp50 = simd_and(sequence_e2_b1_adv, byte_a7);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp15);
                  byte_a9 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp51);
                  r2000_2fff_tmp52 = simd_and(sequence_e2_b1_adv, byte_a9);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp52);
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp25, tmp3);
                  byte_ab = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_and(sequence_e2_b1_adv, byte_ab);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp54);
                  r2000_2fff_tmp55 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp56 = simd_not(tmp9);
                  r2000_2fff_tmp57 = simd_and(r2000_2fff_tmp34, tmp8);
                  r2000_2fff_tmp58 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp56), simd_andc(r2000_2fff_tmp57, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(r2000_2fff_tmp55, r2000_2fff_tmp58);
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b1_adv, byte_range_ad_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp59);
                  byte_b2 = simd_and(r2000_2fff_tmp32, r2000_4dff_tmp2);
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b1_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp60);
                  byte_b5 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp16);
                  r2000_2fff_tmp61 = simd_and(sequence_e2_b1_adv, byte_b5);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp61);
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b1_adv, byte_range_be_bf);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp62);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp9);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(35), sequence_e2_b2_adv));
                  r2000_2fff_tmp63 = simd_and(sequence_e2_b2_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp63);
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b2_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp64);
                  r2000_2fff_tmp65 = simd_and(sequence_e2_b2_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp65);
                  r2000_2fff_tmp66 = simd_and(sequence_e2_b2_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp66);
                  byte_88 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  r2000_2fff_tmp67 = simd_and(sequence_e2_b2_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp67);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp25, r2000_4dff_tmp1);
                  byte_8a = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp68);
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b2_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_andc(r2000_2fff_tmp34, tmp8);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp70);
                  r2000_2fff_tmp71 = simd_and(sequence_e2_b2_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp71);
                  r2000_2fff_tmp72 = simd_and(r2000_2fff_tmp34, r2000_4dff_tmp1);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp72);
                  r2000_2fff_tmp73 = simd_and(sequence_e2_b2_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp73);
                  byte_90 = simd_andc(r2000_2fff_tmp12, tmp9);
                  r2000_2fff_tmp74 = simd_and(sequence_e2_b2_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp74);
                  byte_92 = simd_and(r2000_2fff_tmp12, r2000_4dff_tmp2);
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b2_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp75);
                  byte_94 = simd_and(r2000_2fff_tmp12, r800_ffff_tmp2);
                  r2000_2fff_tmp76 = simd_and(sequence_e2_b2_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp76);
                  byte_96 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp23);
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b2_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp77);
                  byte_98 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp26);
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b2_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp78);
                  byte_9a = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp68);
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b2_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp79);
                  byte_9c = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp70);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b2_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp80);
                  byte_9e = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp72);
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b2_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b2_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp82);
                  byte_a2 = simd_and(r2000_2fff_tmp21, r2000_4dff_tmp2);
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b2_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp83);
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b2_adv, byte_a4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp84);
                  r2000_2fff_tmp85 = simd_and(sequence_e2_b2_adv, byte_a6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp85);
                  r2000_2fff_tmp86 = simd_and(sequence_e2_b2_adv, byte_a8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp86);
                  byte_aa = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp68);
                  r2000_2fff_tmp87 = simd_and(sequence_e2_b2_adv, byte_aa);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp87);
                  byte_ac = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp70);
                  r2000_2fff_tmp88 = simd_and(sequence_e2_b2_adv, byte_ac);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp88);
                  byte_ae = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp72);
                  r2000_2fff_tmp89 = simd_and(sequence_e2_b2_adv, byte_ae);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp89);
                  r2000_2fff_tmp90 = simd_and(sequence_e2_b2_adv, byte_b0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp90);
                  r2000_2fff_tmp91 = simd_and(sequence_e2_b2_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp91);
                  byte_b4 = simd_and(r2000_2fff_tmp32, r800_ffff_tmp2);
                  r2000_2fff_tmp92 = simd_and(sequence_e2_b2_adv, byte_b4);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp92);
                  byte_b6 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp23);
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b2_adv, byte_b6);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp93);
                  byte_b8 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp26);
                  r2000_2fff_tmp94 = simd_and(sequence_e2_b2_adv, byte_b8);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp94);
                  byte_ba = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp68);
                  r2000_2fff_tmp95 = simd_and(sequence_e2_b2_adv, byte_ba);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp95);
                  byte_bc = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp70);
                  r2000_2fff_tmp96 = simd_and(sequence_e2_b2_adv, byte_bc);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp96);
                  byte_be = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp72);
                  r2000_2fff_tmp97 = simd_and(sequence_e2_b2_adv, byte_be);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp97);
                  byte_b3 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp38);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(36), sequence_e2_b3_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_b3_adv, byte_80);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp98);
                  r2000_2fff_tmp99 = simd_and(sequence_e2_b3_adv, byte_82);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp99);
                  r2000_2fff_tmp100 = simd_and(sequence_e2_b3_adv, byte_84);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp100);
                  r2000_2fff_tmp101 = simd_and(sequence_e2_b3_adv, byte_86);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp101);
                  r2000_2fff_tmp102 = simd_and(sequence_e2_b3_adv, byte_88);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp102);
                  r2000_2fff_tmp103 = simd_and(sequence_e2_b3_adv, byte_8a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp103);
                  r2000_2fff_tmp104 = simd_and(sequence_e2_b3_adv, byte_8c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp104);
                  r2000_2fff_tmp105 = simd_and(sequence_e2_b3_adv, byte_8e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp105);
                  r2000_2fff_tmp106 = simd_and(sequence_e2_b3_adv, byte_90);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp106);
                  r2000_2fff_tmp107 = simd_and(sequence_e2_b3_adv, byte_92);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp107);
                  r2000_2fff_tmp108 = simd_and(sequence_e2_b3_adv, byte_94);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp108);
                  r2000_2fff_tmp109 = simd_and(sequence_e2_b3_adv, byte_96);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp109);
                  r2000_2fff_tmp110 = simd_and(sequence_e2_b3_adv, byte_98);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp110);
                  r2000_2fff_tmp111 = simd_and(sequence_e2_b3_adv, byte_9a);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp111);
                  r2000_2fff_tmp112 = simd_and(sequence_e2_b3_adv, byte_9c);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp112);
                  r2000_2fff_tmp113 = simd_and(sequence_e2_b3_adv, byte_9e);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp113);
                  r2000_2fff_tmp114 = simd_and(sequence_e2_b3_adv, byte_a0);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp114);
                  r2000_2fff_tmp115 = simd_and(sequence_e2_b3_adv, byte_a2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp115);
                  r2000_2fff_tmp116 = simd_and(sequence_e2_b3_adv, byte_ab);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp116);
                  r2000_2fff_tmp117 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp15);
                  byte_ad = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp117);
                  r2000_2fff_tmp118 = simd_and(sequence_e2_b3_adv, byte_ad);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp118);
                  r2000_2fff_tmp119 = simd_and(sequence_e2_b3_adv, byte_b2);
                  struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r2000_2fff_tmp119);
                }
                else {
                  carryQ.CarryDequeueEnqueue(29, 8);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(29, 8);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 19);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(37, 8))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(37), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp10 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp9);
              byte_80 = simd_andc(ra000_ffff_tmp10, tmp9);
              carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(38), sequence_ea_99_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_99_adv, byte_80);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(ra000_ffff_tmp2, tmp7);
              byte_82 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_82);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp13);
              byte_84 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp2);
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, byte_84);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_86 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(sequence_ea_99_adv, byte_86);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp1, tmp8);
              byte_88 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ea_99_adv, byte_88);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp18);
              byte_8a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              ra000_ffff_tmp19 = simd_and(sequence_ea_99_adv, byte_8a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp20, tmp8);
              byte_8c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(sequence_ea_99_adv, byte_8c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp2);
              byte_8e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ea_99_adv, byte_8e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp24);
              byte_90 = simd_andc(ra000_ffff_tmp5, tmp9);
              ra000_ffff_tmp25 = simd_and(sequence_ea_99_adv, byte_90);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp25);
              byte_92 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp12);
              ra000_ffff_tmp26 = simd_and(sequence_ea_99_adv, byte_92);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp26);
              byte_94 = simd_and(ra000_ffff_tmp5, r800_ffff_tmp2);
              ra000_ffff_tmp27 = simd_and(sequence_ea_99_adv, byte_94);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp27);
              byte_96 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp15);
              ra000_ffff_tmp28 = simd_and(sequence_ea_99_adv, byte_96);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp28);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              ra000_ffff_tmp29 = simd_and(sequence_ea_99_adv, byte_98);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp29);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              ra000_ffff_tmp30 = simd_and(sequence_ea_99_adv, byte_9a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp30);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp31 = simd_and(sequence_ea_99_adv, byte_9c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp31);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp32 = simd_and(sequence_ea_99_adv, byte_9e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp33, tmp9);
              ra000_ffff_tmp34 = simd_and(sequence_ea_99_adv, byte_a0);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp34);
              byte_a2 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp12);
              ra000_ffff_tmp35 = simd_and(sequence_ea_99_adv, byte_a2);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp35);
              byte_a4 = simd_and(ra000_ffff_tmp33, r800_ffff_tmp2);
              ra000_ffff_tmp36 = simd_and(sequence_ea_99_adv, byte_a4);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp36);
              byte_a6 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp15);
              ra000_ffff_tmp37 = simd_and(sequence_ea_99_adv, byte_a6);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp37);
              byte_a8 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp17);
              ra000_ffff_tmp38 = simd_and(sequence_ea_99_adv, byte_a8);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp38);
              byte_aa = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp3);
              ra000_ffff_tmp39 = simd_and(sequence_ea_99_adv, byte_aa);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp39);
              byte_ac = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp21);
              ra000_ffff_tmp40 = simd_and(sequence_ea_99_adv, byte_ac);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp40);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(39), sequence_ea_9a_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_9a_adv, byte_80);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp41);
              ra000_ffff_tmp42 = simd_and(sequence_ea_9a_adv, byte_82);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp42);
              ra000_ffff_tmp43 = simd_and(sequence_ea_9a_adv, byte_84);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(sequence_ea_9a_adv, byte_86);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(sequence_ea_9a_adv, byte_88);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ea_9a_adv, byte_8a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(sequence_ea_9a_adv, byte_8c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(sequence_ea_9a_adv, byte_8e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(sequence_ea_9a_adv, byte_90);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp49);
              ra000_ffff_tmp50 = simd_and(sequence_ea_9a_adv, byte_92);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(sequence_ea_9a_adv, byte_94);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_and(sequence_ea_9a_adv, byte_96);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(sequence_ea_9a_adv, byte_98);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ea_9a_adv, byte_9a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp54);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(40), sequence_ea_9c_adv));
              ra000_ffff_tmp55 = simd_and(sequence_ea_9c_adv, byte_a2);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_and(sequence_ea_9c_adv, byte_a4);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(sequence_ea_9c_adv, byte_a6);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp57);
              ra000_ffff_tmp58 = simd_and(sequence_ea_9c_adv, byte_a8);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(sequence_ea_9c_adv, byte_aa);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(sequence_ea_9c_adv, byte_ac);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp60);
              byte_ae = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp23);
              ra000_ffff_tmp61 = simd_and(sequence_ea_9c_adv, byte_ae);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp63 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp62);
              byte_b2 = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp12);
              ra000_ffff_tmp64 = simd_and(sequence_ea_9c_adv, byte_b2);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp64);
              byte_b4 = simd_and(ra000_ffff_tmp63, r800_ffff_tmp2);
              ra000_ffff_tmp65 = simd_and(sequence_ea_9c_adv, byte_b4);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp65);
              byte_b6 = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp15);
              ra000_ffff_tmp66 = simd_and(sequence_ea_9c_adv, byte_b6);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp66);
              byte_b8 = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp17);
              ra000_ffff_tmp67 = simd_and(sequence_ea_9c_adv, byte_b8);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp67);
              byte_ba = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp3);
              ra000_ffff_tmp68 = simd_and(sequence_ea_9c_adv, byte_ba);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp68);
              byte_bc = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp21);
              ra000_ffff_tmp69 = simd_and(sequence_ea_9c_adv, byte_bc);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp69);
              byte_be = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp23);
              ra000_ffff_tmp70 = simd_and(sequence_ea_9c_adv, byte_be);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp71);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(41), sequence_ea_9d_adv));
              ra000_ffff_tmp72 = simd_and(sequence_ea_9d_adv, byte_80);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp72);
              ra000_ffff_tmp73 = simd_and(sequence_ea_9d_adv, byte_82);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp73);
              ra000_ffff_tmp74 = simd_and(sequence_ea_9d_adv, byte_84);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp74);
              ra000_ffff_tmp75 = simd_and(sequence_ea_9d_adv, byte_86);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp75);
              ra000_ffff_tmp76 = simd_and(sequence_ea_9d_adv, byte_88);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp76);
              ra000_ffff_tmp77 = simd_and(sequence_ea_9d_adv, byte_8a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp77);
              ra000_ffff_tmp78 = simd_and(sequence_ea_9d_adv, byte_8c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp78);
              ra000_ffff_tmp79 = simd_and(sequence_ea_9d_adv, byte_8e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_and(sequence_ea_9d_adv, byte_90);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp80);
              ra000_ffff_tmp81 = simd_and(sequence_ea_9d_adv, byte_92);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_and(sequence_ea_9d_adv, byte_94);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp82);
              ra000_ffff_tmp83 = simd_and(sequence_ea_9d_adv, byte_96);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_and(sequence_ea_9d_adv, byte_98);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp84);
              ra000_ffff_tmp85 = simd_and(sequence_ea_9d_adv, byte_9a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp85);
              ra000_ffff_tmp86 = simd_and(sequence_ea_9d_adv, byte_9c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp86);
              ra000_ffff_tmp87 = simd_and(sequence_ea_9d_adv, byte_9e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(sequence_ea_9d_adv, byte_a0);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp88);
              ra000_ffff_tmp89 = simd_and(sequence_ea_9d_adv, byte_a2);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(sequence_ea_9d_adv, byte_a4);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp90);
              ra000_ffff_tmp91 = simd_and(sequence_ea_9d_adv, byte_a6);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp91);
              ra000_ffff_tmp92 = simd_and(sequence_ea_9d_adv, byte_a8);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp92);
              ra000_ffff_tmp93 = simd_and(sequence_ea_9d_adv, byte_aa);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp93);
              ra000_ffff_tmp94 = simd_and(sequence_ea_9d_adv, byte_ac);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp94);
              ra000_ffff_tmp95 = simd_and(sequence_ea_9d_adv, byte_ae);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp95);
              byte_b9 = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp7);
              ra000_ffff_tmp96 = simd_and(sequence_ea_9d_adv, byte_b9);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp96);
              ra000_ffff_tmp97 = simd_and(ra000_ffff_tmp1, tmp3);
              byte_bb = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp97);
              ra000_ffff_tmp98 = simd_and(sequence_ea_9d_adv, byte_bb);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp98);
              ra000_ffff_tmp99 = simd_and(ra000_ffff_tmp63, ra000_ffff_tmp20);
              ra000_ffff_tmp100 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_bd_be = simd_and(ra000_ffff_tmp99, ra000_ffff_tmp100);
              ra000_ffff_tmp101 = simd_and(sequence_ea_9d_adv, byte_range_bd_be);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp101);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(42), sequence_ea_9e_adv));
              ra000_ffff_tmp102 = simd_and(sequence_ea_9e_adv, byte_80);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp102);
              ra000_ffff_tmp103 = simd_and(sequence_ea_9e_adv, byte_82);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp103);
              ra000_ffff_tmp104 = simd_and(sequence_ea_9e_adv, byte_84);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp104);
              ra000_ffff_tmp105 = simd_and(sequence_ea_9e_adv, byte_86);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp105);
              byte_8b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp97);
              ra000_ffff_tmp106 = simd_and(sequence_ea_9e_adv, byte_8b);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp106);
              byte_8d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp71);
              ra000_ffff_tmp107 = simd_and(sequence_ea_9e_adv, byte_8d);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp107);
              ra000_ffff_tmp108 = simd_and(sequence_ea_9e_adv, byte_90);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp108);
              ra000_ffff_tmp109 = simd_and(sequence_ea_9e_adv, byte_92);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp109);
              ra000_ffff_tmp110 = simd_and(sequence_ea_9e_adv, byte_96);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp110);
              ra000_ffff_tmp111 = simd_and(sequence_ea_9e_adv, byte_98);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp111);
              ra000_ffff_tmp112 = simd_and(sequence_ea_9e_adv, byte_9a);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp112);
              ra000_ffff_tmp113 = simd_and(sequence_ea_9e_adv, byte_9c);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp113);
              ra000_ffff_tmp114 = simd_and(sequence_ea_9e_adv, byte_9e);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp114);
              ra000_ffff_tmp115 = simd_and(sequence_ea_9e_adv, byte_a0);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp115);
              ra000_ffff_tmp116 = simd_and(sequence_ea_9e_adv, byte_a2);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp116);
              ra000_ffff_tmp117 = simd_and(sequence_ea_9e_adv, byte_a4);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp117);
              ra000_ffff_tmp118 = simd_and(sequence_ea_9e_adv, byte_a6);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp118);
              ra000_ffff_tmp119 = simd_and(sequence_ea_9e_adv, byte_a8);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(ra000_ffff_tmp33, basis_bits.bit_4);
              ra000_ffff_tmp121 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_ad = simd_and(ra000_ffff_tmp120, ra000_ffff_tmp121);
              ra000_ffff_tmp122 = simd_and(sequence_ea_9e_adv, byte_range_aa_ad);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp122);
              ra000_ffff_tmp123 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp63, ra000_ffff_tmp123);
              ra000_ffff_tmp124 = simd_and(sequence_ea_9e_adv, byte_range_b0_b1);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp124);
              ra000_ffff_tmp125 = simd_and(ra000_ffff_tmp20, tmp3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp125);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(43), ra000_ffff_tmp126));
              sequence_ef_bc = simd_and(ra000_ffff_tmp126, byte_bc);
              byte_ef_adv = ra000_ffff_tmp126;
              ra000_ffff_tmp127 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp127, tmp10);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(44), sequence_ef_bc_adv));
              ra000_ffff_tmp128 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, ra000_ffff_tmp128);
            }
            else {
              carryQ.CarryDequeueEnqueue(37, 8);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(17, 28);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(45, 22))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(45), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(46), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp6);
            byte_range_80_a7 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(47), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, tmp7);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(48), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(49), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp9);
            byte_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(50), r10000_10ffff_tmp18));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp18, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp18;
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp21);
            byte_range_80_99 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp22);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(51), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_9d_90_adv, byte_range_80_99);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            byte_range_b4_bf = simd_and(r10000_10ffff_tmp24, tmp7);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_9d_90_adv, byte_range_b4_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp25);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp26 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp28);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp27, r10000_10ffff_tmp29);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(52), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_9d_91_adv, byte_range_80_8d);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp30);
            byte_range_a8_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp6);
            r10000_10ffff_tmp31 = simd_and(sequence_f0_9d_91_adv, byte_range_a8_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp31);
            byte_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp13);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp32 = simd_or(tmp7, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp27, r10000_10ffff_tmp32);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(53), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_9d_92_adv, byte_range_80_81);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp16, tmp8);
            byte_9c = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(sequence_f0_9d_92_adv, byte_9c);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp16, basis_bits.bit_6);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_9d_92_adv, byte_range_9e_9f);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_9d_92_adv, byte_a2);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp39);
            r10000_10ffff_tmp41 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(sequence_f0_9d_92_adv, byte_range_a5_a6);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_xor(basis_bits.bit_5, tmp8);
            byte_range_a9_ac = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(sequence_f0_9d_92_adv, byte_range_a9_ac);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp28);
            r10000_10ffff_tmp47 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp47), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_3));
            byte_range_ae_b5 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_9d_92_adv, byte_range_ae_b5);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_andc(tmp3, tmp7);
            byte_93 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp50);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp51 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp21);
            r10000_10ffff_tmp52 = simd_not(r10000_10ffff_tmp51);
            r10000_10ffff_tmp53 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp52), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a9 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp53);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(54), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_9d_93_adv, byte_range_90_a9);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_andc(r10000_10ffff_tmp39, tmp8);
            byte_94 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp55);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp56 = simd_andc(r10000_10ffff_tmp39, basis_bits.bit_6);
            byte_range_84_85 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp56);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(55), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp57 = simd_and(sequence_f0_9d_94_adv, byte_range_84_85);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_not(tmp4);
            r10000_10ffff_tmp59 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp60 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp58), simd_andc(r10000_10ffff_tmp59, basis_bits.bit_4));
            byte_range_87_8a = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_and(sequence_f0_9d_94_adv, byte_range_87_8a);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp63 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_not(r10000_10ffff_tmp63);
            r10000_10ffff_tmp65 = simd_and(r10000_10ffff_tmp16, tmp8);
            r10000_10ffff_tmp66 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp64), simd_andc(r10000_10ffff_tmp65, basis_bits.bit_3));
            byte_range_8d_94 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(sequence_f0_9d_94_adv, byte_range_8d_94);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp69 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp68), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_4));
            byte_range_96_9c = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_and(sequence_f0_9d_94_adv, byte_range_96_9c);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp70);
            r10000_10ffff_tmp71 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp72 = simd_andc(r10000_10ffff_tmp71, basis_bits.bit_6);
            byte_range_b8_b9 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp72);
            r10000_10ffff_tmp73 = simd_and(sequence_f0_9d_94_adv, byte_range_b8_b9);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp24, basis_bits.bit_4);
            r10000_10ffff_tmp75 = simd_xor(basis_bits.bit_5, tmp3);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp74, r10000_10ffff_tmp75);
            r10000_10ffff_tmp76 = simd_and(sequence_f0_9d_94_adv, byte_range_bb_be);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp76);
            r10000_10ffff_tmp77 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp9);
            byte_95 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp77);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp78 = simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp62);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(56), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp79 = simd_and(sequence_f0_9d_95_adv, byte_range_80_84);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp12);
            byte_86 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(sequence_f0_9d_95_adv, byte_86);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp81);
            r10000_10ffff_tmp82 = simd_not(tmp9);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp82), simd_andc(r10000_10ffff_tmp21, basis_bits.bit_3));
            byte_range_8a_90 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(sequence_f0_9d_95_adv, byte_range_8a_90);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_ac_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_and(sequence_f0_9d_95_adv, byte_range_ac_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp86);
            byte_96 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp80);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp28);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(57), sequence_f0_9d_96_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9d_96_adv, byte_range_80_85);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp87);
            byte_range_a0_b9 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp22);
            r10000_10ffff_tmp88 = simd_and(sequence_f0_9d_96_adv, byte_range_a0_b9);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp39, tmp3);
            byte_97 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp89);
            sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
            r10000_10ffff_tmp90 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp36);
            r10000_10ffff_tmp91 = simd_not(r10000_10ffff_tmp90);
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_3, tmp7);
            r10000_10ffff_tmp93 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp91), simd_andc(r10000_10ffff_tmp92, basis_bits.bit_2));
            byte_range_94_ad = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp93);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(58), sequence_f0_9d_97_adv));
            r10000_10ffff_tmp94 = simd_and(sequence_f0_9d_97_adv, byte_range_94_ad);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp94);
            r10000_10ffff_tmp95 = simd_andc(r10000_10ffff_tmp71, tmp8);
            byte_98 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp95);
            sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
            r10000_10ffff_tmp96 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp32);
            r10000_10ffff_tmp97 = simd_not(r10000_10ffff_tmp96);
            r10000_10ffff_tmp98 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp97), simd_andc(r10000_10ffff_tmp6, basis_bits.bit_2));
            byte_range_88_a1 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp98);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(59), sequence_f0_9d_98_adv));
            r10000_10ffff_tmp99 = simd_and(sequence_f0_9d_98_adv, byte_range_88_a1);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp99);
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp16);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_98_adv, byte_range_bc_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp100);
            r10000_10ffff_tmp101 = simd_and(r10000_10ffff_tmp71, r10000_10ffff_tmp9);
            byte_99 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp101);
            sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
            r10000_10ffff_tmp102 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp46);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp102);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(60), sequence_f0_9d_99_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_9d_99_adv, byte_range_80_95);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp103);
            byte_range_b0_bf = r10000_10ffff_tmp24;
            r10000_10ffff_tmp104 = simd_and(sequence_f0_9d_99_adv, byte_range_b0_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(r10000_10ffff_tmp71, r10000_10ffff_tmp12);
            byte_9a = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp105);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp27, r10000_10ffff_tmp21);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(61), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp106 = simd_and(sequence_f0_9d_9a_adv, byte_range_80_89);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp106);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_9d_9a_adv, byte_range_a8_bf);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(r10000_10ffff_tmp71, tmp3);
            byte_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp108);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            byte_80 = simd_andc(r10000_10ffff_tmp27, tmp9);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(62), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9d_9b_adv, byte_80);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_3));
            byte_range_a2_ba = simd_and(byte_range_a0_bf, r10000_10ffff_tmp110);
            r10000_10ffff_tmp111 = simd_and(sequence_f0_9d_9b_adv, byte_range_a2_ba);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp111);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp63);
            r10000_10ffff_tmp113 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp114 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp115 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp113), simd_andc(r10000_10ffff_tmp114, basis_bits.bit_2));
            byte_range_9c_b4 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp115);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(63), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_9d_9c_adv, byte_range_9c_b4);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp116);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp117 = simd_and(r10000_10ffff_tmp16, tmp3);
            r10000_10ffff_tmp118 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp117);
            r10000_10ffff_tmp119 = simd_not(r10000_10ffff_tmp118);
            r10000_10ffff_tmp120 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp119), simd_andc(r10000_10ffff_tmp102, basis_bits.bit_2));
            byte_range_96_ae = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp120);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(64), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp121 = simd_and(sequence_f0_9d_9d_adv, byte_range_96_ae);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp121);
            r10000_10ffff_tmp122 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp12);
            byte_9e = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp122);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp123 = simd_or(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp124 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp123);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp124);
            r10000_10ffff_tmp126 = simd_not(r10000_10ffff_tmp125);
            r10000_10ffff_tmp127 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp126), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp127);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(65), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_9d_9e_adv, byte_range_90_a8);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp128);
            byte_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp117);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_8a = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp105);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(66), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp129 = simd_and(sequence_f0_9d_9f_adv, byte_8a);
            struct_gc_Lu.cc = simd_or(struct_gc_Lu.cc, r10000_10ffff_tmp129);
          }
          else {
            carryQ.CarryDequeueEnqueue(45, 22);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 67);
        }
        carryQ.CarryQ_Adjust(67);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<67, 0> carryQ;
  };

  struct Property_gc_Lt {
  Property_gc_Lt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Lt & struct_gc_Lt) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock byte_c9, r100_2ff_tmp8, byte_range_80_8f, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c6_c8, r100_24f_tmp3, r180_24f_tmp1, r180_24f_tmp2;
		BitBlock r180_24f_tmp3, byte_c7, r180_24f_tmp4, byte_85, byte_c7_adv;
		BitBlock r180_24f_tmp5, r180_24f_tmp6, byte_88, r180_24f_tmp7, r180_24f_tmp8;
		BitBlock byte_8b, r180_24f_tmp9, r180_24f_tmp10, r180_24f_tmp11;
		BitBlock r180_24f_tmp12, r180_24f_tmp13, byte_b2, r180_24f_tmp14;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, byte_be, r1000_1fff_tmp6, sequence_e1_be;
		BitBlock byte_e1_adv, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_range_88_8f;
		BitBlock sequence_e1_be_adv, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, byte_range_98_9f, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_a8_af, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, byte_bc, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_bf, sequence_e1_bf, byte_8c;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp19, r1000_1fff_tmp20;




        struct_gc_Lt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp5, r100_2ff_tmp6);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp7);
                r100_2ff_tmp8 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_80_8f = simd_andc(r100_2ff_tmp8, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_8f);
                r100_2ff_tmp11 = simd_or(byte_range_c4_c8, r100_2ff_tmp10);
                if ((bitblock::any(r100_2ff_tmp11) || carryQ.CarryTest(1, 1))) {
                  r100_24f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp2 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(r100_24f_tmp1, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  r100_24f_tmp3 = simd_or(byte_range_c6_c8, r100_2ff_tmp10);
                  if ((bitblock::any(r100_24f_tmp3) || carryQ.CarryTest(1, 1))) {
                    r180_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                    r180_24f_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp3 = simd_and(r180_24f_tmp1, r180_24f_tmp2);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp3);
                    r180_24f_tmp4 = simd_and(r180_24f_tmp1, r100_2ff_tmp6);
                    byte_85 = simd_and(byte_range_80_8f, r180_24f_tmp4);
                    carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(1), byte_c7_adv));
                    r180_24f_tmp5 = simd_and(byte_c7_adv, byte_85);
                    struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r180_24f_tmp5);
                    r180_24f_tmp6 = simd_andc(r100_2ff_tmp5, r100_2ff_tmp1);
                    byte_88 = simd_and(byte_range_80_8f, r180_24f_tmp6);
                    r180_24f_tmp7 = simd_and(byte_c7_adv, byte_88);
                    struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r180_24f_tmp7);
                    r180_24f_tmp8 = simd_and(r100_2ff_tmp5, r180_24f_tmp2);
                    byte_8b = simd_and(byte_range_80_8f, r180_24f_tmp8);
                    r180_24f_tmp9 = simd_and(byte_c7_adv, byte_8b);
                    struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r180_24f_tmp9);
                    r180_24f_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp11 = simd_and(r100_2ff_tmp8, r180_24f_tmp10);
                    r180_24f_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp13 = simd_andc(r180_24f_tmp12, r80_7ff_tmp3);
                    byte_b2 = simd_and(r180_24f_tmp11, r180_24f_tmp13);
                    r180_24f_tmp14 = simd_and(byte_c7_adv, byte_b2);
                    struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r180_24f_tmp14);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(1, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(3, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(3, 3))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r1000_1fff_tmp6));
                  sequence_e1_be = simd_and(r1000_1fff_tmp6, byte_be);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp7);
                  byte_range_88_8f = simd_and(r1000_1fff_tmp8, basis_bits.bit_4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(4), sequence_e1_be_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_be_adv, byte_range_88_8f);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  byte_range_98_9f = simd_and(r1000_1fff_tmp11, basis_bits.bit_4);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_be_adv, byte_range_98_9f);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a8_af = simd_and(r1000_1fff_tmp13, basis_bits.bit_4);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_be_adv, byte_range_a8_af);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_bc = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(sequence_e1_be_adv, byte_bc);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp17);
                  byte_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp18);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_8c = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp15);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(5), sequence_e1_bf_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_bf_adv, byte_8c);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(sequence_e1_bf_adv, byte_bc);
                  struct_gc_Lt.cc = simd_or(struct_gc_Lt.cc, r1000_1fff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_gc_Pc {
  Property_gc_Pc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_Pc & struct_gc_Pc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_5f, byte_range_c0_ff;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, byte_bf, sequence_e2_80_adv, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_81, sequence_e2_81;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp10, r2000_2fff_tmp11, byte_94;
		BitBlock r2000_2fff_tmp12, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock byte_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock ra000_ffff_tmp4, byte_b8, ra000_ffff_tmp5, sequence_ef_b8;
		BitBlock byte_ef_adv, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock byte_range_b3_b4, sequence_ef_b8_adv, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_b9, sequence_ef_b9;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock byte_range_8d_8f, sequence_ef_b9_adv, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_bc, sequence_ef_bc, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp17;




        struct_gc_Pc.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        byte_5f = simd_and(tmp3, tmp6);
        struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, byte_5f);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 8))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 8))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  byte_bf = simd_and(r2000_2fff_tmp6, tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_bf);
                  struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp8, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp9);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(3), sequence_e2_81_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_81_adv, byte_80);
                  struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_94 = simd_and(r2000_2fff_tmp11, r800_ffff_tmp4);
                  r2000_2fff_tmp12 = simd_and(sequence_e2_81_adv, byte_94);
                  struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, r2000_2fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(4, 4))) {
              byte_ef = simd_and(byte_range_e0_ef, tmp6);
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp2 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp1);
              ra000_ffff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp4 = simd_andc(ra000_ffff_tmp3, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp4);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(4), ra000_ffff_tmp5));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp5, byte_b8);
              byte_ef_adv = ra000_ffff_tmp5;
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp2, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp8 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp7), simd_andc(tmp5, basis_bits.bit_5));
              byte_range_b3_b4 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp8);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(5), sequence_ef_b8_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ef_b8_adv, byte_range_b3_b4);
              struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp10);
              byte_b9 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp11);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp13, tmp4);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp14, r800_ffff_tmp3);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(6), sequence_ef_b9_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ef_b9_adv, byte_range_8d_8f);
              struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp16);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_bf = simd_and(ra000_ffff_tmp2, tmp6);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(7), sequence_ef_bc_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ef_bc_adv, byte_bf);
              struct_gc_Pc.cc = simd_or(struct_gc_Pc.cc, ra000_ffff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 8);
        }
        carryQ.CarryQ_Adjust(8);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<8, 0> carryQ;
  };

  struct Property_gc_S {
  Property_gc_S() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gc_S & struct_gc_S) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, tmp34, cc_range_24_7e_1, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock byte_range_a2_a6, byte_c2_adv, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_range_a8_a9, r80_7ff_tmp11, byte_ac, r80_7ff_tmp12;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, byte_range_ae_b1, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock byte_b4, r80_7ff_tmp20, r80_7ff_tmp21, byte_b8, r80_7ff_tmp22;
		BitBlock r80_7ff_tmp23, byte_c3, r80_7ff_tmp24, r80_7ff_tmp25, byte_97;
		BitBlock byte_c3_adv, r80_7ff_tmp26, byte_b7, r80_7ff_tmp27, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, byte_ca;
		BitBlock byte_range_b0_bf, r100_2ff_tmp2, r100_2ff_tmp3, byte_cb;
		BitBlock r100_2ff_tmp4, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock byte_range_82_85, byte_cb_adv, r2b0_2ff_tmp4, r2b0_2ff_tmp5;
		BitBlock r2b0_2ff_tmp6, byte_range_92_9f, r2b0_2ff_tmp7, r2b0_2ff_tmp8;
		BitBlock r2b0_2ff_tmp9, r2b0_2ff_tmp10, byte_range_a5_ab, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, byte_ad, r2b0_2ff_tmp14;
		BitBlock r2b0_2ff_tmp15, r2b0_2ff_tmp16, byte_range_af_bf, r2b0_2ff_tmp17;
		BitBlock r100_3ff_tmp2, r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_ce_cf, r100_3ff_tmp6, r370_3ff_tmp1, byte_b5, byte_cd_adv;
		BitBlock r370_3ff_tmp2, byte_ce, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock byte_range_84_85, byte_ce_adv, r370_3ff_tmp5, r370_3ff_tmp6, byte_cf;
		BitBlock r370_3ff_tmp7, byte_b6, byte_cf_adv, r370_3ff_tmp8, r80_7ff_tmp28;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, byte_d2, r400_4ff_tmp1, byte_82;
		BitBlock byte_d2_adv, r400_4ff_tmp2, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, byte_range_80_8f, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, r400_5ff_tmp5, byte_d4, r500_58f_tmp1, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, byte_range_8d_8f, byte_d6_adv, r530_58f_tmp2;
		BitBlock byte_range_d8_db, byte_d8, r600_6ff_tmp1, r600_6ff_tmp2;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, byte_range_86_88;
		BitBlock byte_d8_adv, r600_6ff_tmp6, byte_8b, r600_6ff_tmp7, byte_range_8e_8f;
		BitBlock r600_6ff_tmp8, byte_db, byte_9e, byte_db_adv, r600_6ff_tmp9;
		BitBlock r600_6ff_tmp10, r600_6ff_tmp11, byte_a9, r600_6ff_tmp12;
		BitBlock r600_6ff_tmp13, r600_6ff_tmp14, byte_range_bd_be, r600_6ff_tmp15;
		BitBlock byte_range_de_df, r780_7ff_tmp1, byte_df, r7c0_7ff_tmp1, byte_df_adv;
		BitBlock r7c0_7ff_tmp2, byte_range_e0_ef, byte_range_e0_e3, byte_e4;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3, byte_range_80_b7;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, byte_a7;
		BitBlock r800_fff_tmp3, sequence_e0_a7, byte_e0_adv, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, byte_range_b2_b3, sequence_e0_a7_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, byte_range_ba_bb, r800_fff_tmp8, byte_ab;
		BitBlock sequence_e0_ab, r800_fff_tmp9, r800_fff_tmp10, byte_b1;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp11, r800_fff_tmp12, sequence_e0_ad;
		BitBlock byte_b0, sequence_e0_ad_adv, r800_fff_tmp13, r800_fff_tmp14, byte_af;
		BitBlock sequence_e0_af, r800_fff_tmp15, r800_fff_tmp16, byte_range_b3_ba;
		BitBlock sequence_e0_af_adv, r800_fff_tmp17, sequence_e0_b1, byte_bf;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp18, r800_fff_tmp19, sequence_e0_b5;
		BitBlock r800_fff_tmp20, byte_b9, sequence_e0_b5_adv, r800_fff_tmp21;
		BitBlock r800_fff_tmp22, sequence_e0_b8, sequence_e0_b8_adv, r800_fff_tmp23;
		BitBlock byte_bc, sequence_e0_bc, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, byte_range_81_83, sequence_e0_bc_adv, r800_fff_tmp27;
		BitBlock r800_fff_tmp28, r800_fff_tmp29, byte_93, r800_fff_tmp30;
		BitBlock r800_fff_tmp31, byte_range_95_97, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, byte_range_9a_9f, r800_fff_tmp35, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39, byte_be;
		BitBlock sequence_e0_be, r800_fff_tmp40, byte_range_be_bf, sequence_e0_be_adv;
		BitBlock r800_fff_tmp41, sequence_e0_bf, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock byte_range_80_85, sequence_e0_bf_adv, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48, byte_range_87_8c;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, byte_range_95_98, r800_fff_tmp54, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, sequence_e1_82, byte_e1_adv;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, byte_range_9e_9f;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp7, byte_8e, sequence_e1_8e;
		BitBlock r1000_1fff_tmp8, r1000_1fff_tmp9, byte_range_90_99;
		BitBlock sequence_e1_8e_adv, r1000_1fff_tmp10, r1000_1fff_tmp11, byte_9f;
		BitBlock sequence_e1_9f, byte_9b, sequence_e1_9f_adv, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, byte_a5, sequence_e1_a5, byte_80;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock sequence_e1_a7, r1000_1fff_tmp17, r1000_1fff_tmp18, byte_range_9e_bf;
		BitBlock sequence_e1_a7_adv, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock sequence_e1_ad, r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_range_a1_aa, sequence_e1_ad_adv;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, byte_range_b4_bc;
		BitBlock r1000_1fff_tmp30, sequence_e1_be, byte_bd, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, sequence_e1_bf, byte_range_80_81;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, byte_range_9d_9f;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, byte_range_ad_af;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, r1000_1fff_tmp41;
		BitBlock r1000_1fff_tmp42, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5;
		BitBlock sequence_e2_81, byte_e2_adv, byte_84, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_92, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock byte_range_ba_bc, r2000_2fff_tmp13, sequence_e2_82, r2000_2fff_tmp14;
		BitBlock byte_range_8a_8c, sequence_e2_82_adv, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock byte_range_a0_bd, r2000_2fff_tmp19, sequence_e2_84;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp20, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, byte_range_83_86, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, byte_range_88_89, r2000_2fff_tmp25, byte_94;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, byte_range_96_98;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, byte_range_9e_a3, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, byte_ae, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, byte_85, sequence_e2_85, r2000_2fff_tmp46;
		BitBlock byte_range_80_84, sequence_e2_85_adv, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_range_8a_8d, r2000_2fff_tmp49;
		BitBlock r2000_2fff_tmp50, byte_8f, r2000_2fff_tmp51, r2000_2fff_tmp52;
		BitBlock byte_86, sequence_e2_86, byte_range_90_bf, sequence_e2_86_adv;
		BitBlock r2000_2fff_tmp53, r2000_2fff_tmp54, r2000_2fff_tmp55;
		BitBlock r2000_2fff_tmp56, byte_range_87_8b, byte_e2_byte_range_87_8b;
		BitBlock byte_range_80_bf, r2000_2fff_tmp57, byte_e2_byte_range_87_8b_sfx;
		BitBlock r2000_2fff_tmp58, byte_8c, sequence_e2_8c, byte_range_80_87;
		BitBlock sequence_e2_8c_adv, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock r2000_2fff_tmp64, byte_range_8c_a8, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, byte_range_ab_bf, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, r2000_2fff_tmp72, byte_range_8d_8e;
		BitBlock byte_e2_byte_range_8d_8e, r2000_2fff_tmp73;
		BitBlock byte_e2_byte_range_8d_8e_sfx, sequence_e2_8f, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, byte_range_80_ba, sequence_e2_8f_adv;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, byte_90, sequence_e2_90;
		BitBlock r2000_2fff_tmp78, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock byte_range_80_a6, sequence_e2_90_adv, r2000_2fff_tmp81, byte_91;
		BitBlock sequence_e2_91, byte_range_80_8a, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp82, sequence_e2_92, r2000_2fff_tmp83, r2000_2fff_tmp84;
		BitBlock byte_range_9c_bf, sequence_e2_92_adv, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, sequence_e2_93, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, byte_range_80_a9;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, byte_range_94_9c, byte_e2_byte_range_94_9c;
		BitBlock r2000_2fff_tmp94, byte_e2_byte_range_94_9c_sfx, r2000_2fff_tmp95;
		BitBlock byte_9d, sequence_e2_9d, r2000_2fff_tmp96, r2000_2fff_tmp97;
		BitBlock byte_range_80_a7, sequence_e2_9d_adv, r2000_2fff_tmp98;
		BitBlock sequence_e2_9e, r2000_2fff_tmp99, r2000_2fff_tmp100, byte_range_94_bf;
		BitBlock sequence_e2_9e_adv, r2000_2fff_tmp101, sequence_e2_9f;
		BitBlock sequence_e2_9f_adv, r2000_2fff_tmp102, r2000_2fff_tmp103;
		BitBlock r2000_2fff_tmp104, r2000_2fff_tmp105, r2000_2fff_tmp106;
		BitBlock byte_range_87_a5, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, r2000_2fff_tmp110, byte_range_a0_a5;
		BitBlock byte_e2_byte_range_a0_a5, r2000_2fff_tmp111;
		BitBlock byte_e2_byte_range_a0_a5_sfx, byte_a6, sequence_e2_a6;
		BitBlock r2000_2fff_tmp112, byte_range_80_82, sequence_e2_a6_adv;
		BitBlock r2000_2fff_tmp113, r2000_2fff_tmp114, r2000_2fff_tmp115;
		BitBlock byte_range_99_bf, r2000_2fff_tmp116, sequence_e2_a7;
		BitBlock r2000_2fff_tmp117, byte_range_80_97, sequence_e2_a7_adv;
		BitBlock r2000_2fff_tmp118, r2000_2fff_tmp119, byte_range_9c_bb;
		BitBlock r2000_2fff_tmp120, r2000_2fff_tmp121, r2000_2fff_tmp122;
		BitBlock byte_range_a8_ac, byte_e2_byte_range_a8_ac, r2000_2fff_tmp123;
		BitBlock byte_e2_byte_range_a8_ac_sfx, sequence_e2_ad, r2000_2fff_tmp124;
		BitBlock byte_range_80_b3, sequence_e2_ad_adv, r2000_2fff_tmp125;
		BitBlock byte_range_b6_bf, r2000_2fff_tmp126, sequence_e2_ae;
		BitBlock r2000_2fff_tmp127, byte_range_80_95, sequence_e2_ae_adv;
		BitBlock r2000_2fff_tmp128, r2000_2fff_tmp129, r2000_2fff_tmp130;
		BitBlock r2000_2fff_tmp131, byte_range_98_b9, r2000_2fff_tmp132;
		BitBlock r2000_2fff_tmp133, byte_range_bd_bf, r2000_2fff_tmp134;
		BitBlock sequence_e2_af, byte_range_80_88, sequence_e2_af_adv;
		BitBlock r2000_2fff_tmp135, r2000_2fff_tmp136, r2000_2fff_tmp137;
		BitBlock byte_range_8a_91, r2000_2fff_tmp138, byte_b3, sequence_e2_b3;
		BitBlock r2000_2fff_tmp139, r2000_2fff_tmp140, byte_range_a5_aa;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp141, r2000_2fff_tmp142, byte_ba;
		BitBlock sequence_e2_ba, byte_range_80_99, sequence_e2_ba_adv;
		BitBlock r2000_2fff_tmp143, r2000_2fff_tmp144, byte_range_9b_bf;
		BitBlock r2000_2fff_tmp145, byte_bb, sequence_e2_bb, sequence_e2_bb_adv;
		BitBlock r2000_2fff_tmp146, byte_range_bc_be, byte_e2_byte_range_bc_be;
		BitBlock r2000_2fff_tmp147, byte_e2_byte_range_bc_be_sfx, sequence_e2_bf;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp148, byte_range_b0_bb;
		BitBlock r2000_2fff_tmp149, r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, sequence_e3_80_adv, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock byte_range_92_93, r3000_4dff_tmp6, r3000_4dff_tmp7, byte_a0;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, byte_range_b6_b7;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13, sequence_e3_82;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock byte_range_9b_9c, sequence_e3_82_adv, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, sequence_e3_86, byte_range_90_91;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, byte_range_96_9f, r3000_4dff_tmp22;
		BitBlock r3000_4dff_tmp23, byte_87, sequence_e3_87, r3000_4dff_tmp24;
		BitBlock r3000_4dff_tmp25, byte_range_80_a3, sequence_e3_87_adv;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, byte_88, sequence_e3_88;
		BitBlock r3000_4dff_tmp28, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock byte_range_80_9e, sequence_e3_88_adv, r3000_4dff_tmp31;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, byte_range_aa_bf, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, byte_89, sequence_e3_89;
		BitBlock sequence_e3_89_adv, r3000_4dff_tmp39, r3000_4dff_tmp40;
		BitBlock byte_range_a0_bf, r3000_4dff_tmp41, r3000_4dff_tmp42, byte_8a;
		BitBlock sequence_e3_8a, r3000_4dff_tmp43, r3000_4dff_tmp44, r3000_4dff_tmp45;
		BitBlock byte_range_8a_b0, sequence_e3_8a_adv, r3000_4dff_tmp46;
		BitBlock sequence_e3_8b, r3000_4dff_tmp47, byte_range_80_be;
		BitBlock sequence_e3_8b_adv, r3000_4dff_tmp48, byte_range_8c_8f;
		BitBlock byte_e3_byte_range_8c_8f, r3000_4dff_tmp49;
		BitBlock byte_e3_byte_range_8c_8f_sfx, r3000_4dff_tmp50, sequence_e4_b7;
		BitBlock byte_e4_adv, sequence_e4_b7_adv, r3000_4dff_tmp51, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, byte_range_ea_ef, ra000_ffff_tmp1, byte_ea;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, ra000_ffff_tmp4, sequence_ea_92;
		BitBlock byte_ea_adv, ra000_ffff_tmp5, sequence_ea_92_adv, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_93, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, byte_range_80_86, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp11, byte_9c, sequence_ea_9c, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, byte_range_80_96;
		BitBlock sequence_ea_9c_adv, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_range_a0_a1, ra000_ffff_tmp18, sequence_ea_9e;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, byte_range_89_8a;
		BitBlock sequence_ea_9e_adv, ra000_ffff_tmp21, sequence_ea_a0;
		BitBlock byte_range_a8_ab, sequence_ea_a0_adv, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, byte_range_b6_b9, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, sequence_ea_a9, ra000_ffff_tmp30;
		BitBlock byte_range_b7_b9, sequence_ea_a9_adv, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, sequence_ea_ad, sequence_ea_ad_adv;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, byte_ef, ra000_ffff_tmp35;
		BitBlock sequence_ef_ac, byte_ef_adv, sequence_ef_ac_adv, ra000_ffff_tmp36;
		BitBlock sequence_ef_ae, ra000_ffff_tmp37, byte_range_b2_bf;
		BitBlock sequence_ef_ae_adv, ra000_ffff_tmp38, sequence_ef_af;
		BitBlock sequence_ef_af_adv, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock sequence_ef_b7, ra000_ffff_tmp41, byte_range_bc_bd;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp42, sequence_ef_b9, byte_a2;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock byte_range_a4_a6, ra000_ffff_tmp45, ra000_ffff_tmp46, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, byte_range_9c_9e, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, sequence_ef_bd, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp52, ra000_ffff_tmp53, ra000_ffff_tmp54, sequence_ef_bf;
		BitBlock ra000_ffff_tmp55, byte_range_a0_a6, sequence_ef_bf_adv;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, byte_range_a8_ae;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock sequence_f0_90, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, sequence_f0_90_84, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_range_b7_bf, sequence_f0_90_84_adv;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock sequence_f0_90_85, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_b9_bf, sequence_f0_90_85_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, sequence_f0_90_86, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_89, sequence_f0_90_86_adv;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_90_9b;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, sequence_f0_90_87, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock byte_range_90_bc, sequence_f0_90_87_adv, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, byte_a1, sequence_f0_90_a1, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, byte_range_b7_b8, sequence_f0_90_a1_adv;
		BitBlock r10000_10ffff_tmp33, sequence_f0_90_ab, r10000_10ffff_tmp34;
		BitBlock sequence_f0_90_ab_adv, r10000_10ffff_tmp35, byte_96, sequence_f0_96;
		BitBlock r10000_10ffff_tmp36, sequence_f0_96_ac, sequence_f0_96_adv;
		BitBlock byte_range_bc_bf, sequence_f0_96_ac_adv, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, sequence_f0_96_ad, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp39, sequence_f0_9b, r10000_10ffff_tmp40, byte_b2;
		BitBlock r10000_10ffff_tmp41, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp42, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock sequence_f0_9d_byte_range_80_82, r10000_10ffff_tmp45;
		BitBlock sequence_f0_9d_byte_range_80_82_sfx, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, byte_83, sequence_f0_9d_83, r10000_10ffff_tmp48;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, byte_range_80_b5;
		BitBlock sequence_f0_9d_83_adv, r10000_10ffff_tmp53, sequence_f0_9d_84;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, sequence_f0_9d_84_adv;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, byte_range_a9_bf, r10000_10ffff_tmp60;
		BitBlock sequence_f0_9d_85, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, byte_range_80_a4;
		BitBlock sequence_f0_9d_85_adv, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock r10000_10ffff_tmp67, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock byte_range_aa_ac, r10000_10ffff_tmp70, sequence_f0_9d_86;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, byte_range_83_84;
		BitBlock sequence_f0_9d_86_adv, r10000_10ffff_tmp73, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, r10000_10ffff_tmp77;
		BitBlock byte_range_8c_a9, r10000_10ffff_tmp78, r10000_10ffff_tmp79;
		BitBlock r10000_10ffff_tmp80, byte_range_ae_bf, r10000_10ffff_tmp81;
		BitBlock sequence_f0_9d_87, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock byte_range_80_9d, sequence_f0_9d_87_adv, r10000_10ffff_tmp84;
		BitBlock sequence_f0_9d_88, sequence_f0_9d_88_adv, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, sequence_f0_9d_89, r10000_10ffff_tmp87;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock sequence_f0_9d_8c, sequence_f0_9d_8c_adv, r10000_10ffff_tmp90;
		BitBlock byte_8d, sequence_f0_9d_8d, r10000_10ffff_tmp91;
		BitBlock sequence_f0_9d_8d_adv, r10000_10ffff_tmp92, sequence_f0_9d_9b;
		BitBlock sequence_f0_9d_9b_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock r10000_10ffff_tmp95, r10000_10ffff_tmp96, sequence_f0_9d_9c, byte_95;
		BitBlock sequence_f0_9d_9c_adv, r10000_10ffff_tmp97, r10000_10ffff_tmp98;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp99, sequence_f0_9d_9d_adv;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, sequence_f0_9d_9e;
		BitBlock sequence_f0_9d_9e_adv, r10000_10ffff_tmp102, r10000_10ffff_tmp103;
		BitBlock sequence_f0_9d_9f, sequence_f0_9d_9f_adv, r10000_10ffff_tmp104;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp105, sequence_f0_9e_bb;
		BitBlock sequence_f0_9e_adv, byte_range_b0_b1, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp106, sequence_f0_9f, r10000_10ffff_tmp107;
		BitBlock sequence_f0_9f_80, sequence_f0_9f_adv, r10000_10ffff_tmp108;
		BitBlock byte_range_80_ab, sequence_f0_9f_80_adv, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9f_81, sequence_f0_9f_81_adv;
		BitBlock r10000_10ffff_tmp111, sequence_f0_9f_82, r10000_10ffff_tmp112;
		BitBlock byte_range_80_93, sequence_f0_9f_82_adv, r10000_10ffff_tmp113;
		BitBlock r10000_10ffff_tmp114, byte_range_a0_ae, r10000_10ffff_tmp115;
		BitBlock r10000_10ffff_tmp116, byte_range_b1_bf, r10000_10ffff_tmp117;
		BitBlock sequence_f0_9f_83, byte_range_81_8f, sequence_f0_9f_83_adv;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, byte_range_91_b5, r10000_10ffff_tmp122;
		BitBlock sequence_f0_9f_84, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock r10000_10ffff_tmp125, byte_range_90_ae, sequence_f0_9f_84_adv;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, sequence_f0_9f_85;
		BitBlock sequence_f0_9f_85_adv, r10000_10ffff_tmp128, r10000_10ffff_tmp129;
		BitBlock sequence_f0_9f_86, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, byte_range_80_9a, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp133, sequence_f0_9f_87, r10000_10ffff_tmp134;
		BitBlock byte_range_a6_bf, sequence_f0_9f_87_adv, r10000_10ffff_tmp135;
		BitBlock sequence_f0_9f_88, r10000_10ffff_tmp136, sequence_f0_9f_88_adv;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock byte_range_90_ba, r10000_10ffff_tmp140, sequence_f0_9f_89;
		BitBlock sequence_f0_9f_89_adv, r10000_10ffff_tmp141, r10000_10ffff_tmp142;
		BitBlock sequence_f0_9f_8c, r10000_10ffff_tmp143, r10000_10ffff_tmp144;
		BitBlock byte_range_80_ac, sequence_f0_9f_8c_adv, r10000_10ffff_tmp145;
		BitBlock r10000_10ffff_tmp146, sequence_f0_9f_8d, r10000_10ffff_tmp147;
		BitBlock byte_range_80_bd, sequence_f0_9f_8d_adv, r10000_10ffff_tmp148;
		BitBlock sequence_f0_9f_8e, sequence_f0_9f_8e_adv, r10000_10ffff_tmp149;
		BitBlock sequence_f0_9f_8f, byte_range_80_8e, sequence_f0_9f_8f_adv;
		BitBlock r10000_10ffff_tmp150, r10000_10ffff_tmp151, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, byte_range_94_b7, r10000_10ffff_tmp154;
		BitBlock r10000_10ffff_tmp155, byte_range_90_92;
		BitBlock sequence_f0_9f_byte_range_90_92, r10000_10ffff_tmp156;
		BitBlock sequence_f0_9f_byte_range_90_92_sfx, sequence_f0_9f_93;
		BitBlock r10000_10ffff_tmp157, r10000_10ffff_tmp158, sequence_f0_9f_93_adv;
		BitBlock r10000_10ffff_tmp159, sequence_f0_9f_94, sequence_f0_9f_94_adv;
		BitBlock r10000_10ffff_tmp160, sequence_f0_9f_95, sequence_f0_9f_95_adv;
		BitBlock r10000_10ffff_tmp161, r10000_10ffff_tmp162, r10000_10ffff_tmp163;
		BitBlock r10000_10ffff_tmp164, byte_range_90_b9, r10000_10ffff_tmp165;
		BitBlock r10000_10ffff_tmp166, byte_range_bb_bf, r10000_10ffff_tmp167;
		BitBlock sequence_f0_9f_96, r10000_10ffff_tmp168, r10000_10ffff_tmp169;
		BitBlock sequence_f0_9f_96_adv, r10000_10ffff_tmp170, byte_range_a5_bf;
		BitBlock r10000_10ffff_tmp171, byte_range_97_98;
		BitBlock sequence_f0_9f_byte_range_97_98, r10000_10ffff_tmp172;
		BitBlock sequence_f0_9f_byte_range_97_98_sfx, byte_99, sequence_f0_9f_99;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock byte_range_85_bf, r10000_10ffff_tmp175, r10000_10ffff_tmp176, byte_9a;
		BitBlock sequence_f0_9f_9a, sequence_f0_9f_9a_adv, r10000_10ffff_tmp177;
		BitBlock sequence_f0_9f_9b, sequence_f0_9f_9b_adv, r10000_10ffff_tmp178;
		BitBlock r10000_10ffff_tmp179, byte_range_a0_ac, r10000_10ffff_tmp180;
		BitBlock byte_range_b0_b3, r10000_10ffff_tmp181, sequence_f0_9f_9c;
		BitBlock sequence_f0_9f_9c_adv, r10000_10ffff_tmp182, sequence_f0_9f_9d;
		BitBlock r10000_10ffff_tmp183, sequence_f0_9f_9d_adv, r10000_10ffff_tmp184;
		BitBlock sequence_f0_9f_9e, sequence_f0_9f_9e_adv, r10000_10ffff_tmp185;
		BitBlock sequence_f0_9f_9f, r10000_10ffff_tmp186, byte_range_80_94;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp187, sequence_f0_9f_a0;
		BitBlock byte_range_80_8b, sequence_f0_9f_a0_adv, r10000_10ffff_tmp188;
		BitBlock r10000_10ffff_tmp189, sequence_f0_9f_a1, sequence_f0_9f_a1_adv;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, r10000_10ffff_tmp192;
		BitBlock sequence_f0_9f_a2, sequence_f0_9f_a2_adv, r10000_10ffff_tmp193;
		BitBlock r10000_10ffff_tmp194, r10000_10ffff_tmp195, byte_range_90_ad;
		BitBlock r10000_10ffff_tmp196;




        struct_gc_S.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_or(tmp6, tmp9);
        tmp11 = simd_and(tmp3, tmp10);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_andc(tmp12, tmp1);
        tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp15 = simd_and(tmp13, tmp14);
        tmp16 = simd_andc(tmp15, tmp8);
        tmp17 = simd_or(tmp11, tmp16);
        tmp18 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp20 = simd_and(tmp18, tmp19);
        tmp21 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp22 = simd_and(tmp14, tmp21);
        tmp23 = simd_and(tmp20, tmp22);
        tmp24 = simd_or(tmp17, tmp23);
        tmp25 = simd_and(tmp18, tmp2);
        tmp26 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp27 = simd_or(tmp26, tmp5);
        tmp28 = simd_andc(tmp25, tmp27);
        tmp29 = simd_or(tmp24, tmp28);
        tmp30 = simd_and(tmp18, tmp12);
        tmp31 = simd_andc(tmp14, tmp5);
        tmp32 = simd_and(tmp30, tmp31);
        tmp33 = simd_or(tmp29, tmp32);
        tmp34 = simd_and(tmp30, tmp22);
        cc_range_24_7e_1 = simd_or(tmp33, tmp34);
        struct_gc_S.cc = simd_or(struct_gc_S.cc, cc_range_24_7e_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 154))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 13))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp21, tmp26);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            r80_7ff_tmp7 = simd_not(tmp8);
            r80_7ff_tmp8 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp7), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_a2_a6 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp9 = simd_and(byte_c2_adv, byte_range_a2_a6);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_andc(tmp7, basis_bits.bit_6);
            byte_range_a8_a9 = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_range_a8_a9);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp11);
            byte_ac = simd_and(r80_7ff_tmp5, tmp31);
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ac);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_or(tmp26, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_not(r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(tmp14, basis_bits.bit_6);
            r80_7ff_tmp17 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp15), simd_andc(r80_7ff_tmp16, basis_bits.bit_3));
            byte_range_ae_b1 = simd_and(r80_7ff_tmp13, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_and(byte_c2_adv, byte_range_ae_b1);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp18);
            r80_7ff_tmp19 = simd_and(r80_7ff_tmp4, tmp12);
            byte_b4 = simd_and(r80_7ff_tmp19, tmp6);
            r80_7ff_tmp20 = simd_and(byte_c2_adv, byte_b4);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_andc(tmp7, tmp5);
            byte_b8 = simd_and(r80_7ff_tmp19, r80_7ff_tmp21);
            r80_7ff_tmp22 = simd_and(byte_c2_adv, byte_b8);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp22);
            r80_7ff_tmp23 = simd_andc(tmp8, tmp26);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp23);
            r80_7ff_tmp24 = simd_and(r80_7ff_tmp4, tmp19);
            r80_7ff_tmp25 = simd_and(tmp4, tmp8);
            byte_97 = simd_and(r80_7ff_tmp24, r80_7ff_tmp25);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp26 = simd_and(byte_c3_adv, byte_97);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp26);
            byte_b7 = simd_and(r80_7ff_tmp19, r80_7ff_tmp25);
            r80_7ff_tmp27 = simd_and(byte_c3_adv, byte_b7);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r80_7ff_tmp27);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp26);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 5))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 2))) {
                r100_2ff_tmp1 = simd_and(tmp7, tmp21);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp1);
                byte_range_b0_bf = r80_7ff_tmp19;
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(2), r100_2ff_tmp2));
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp2, byte_range_b0_bf);
                byte_cb = simd_and(r80_7ff_tmp2, tmp9);
                r100_2ff_tmp4 = simd_or(r100_2ff_tmp3, byte_cb);
                if ((bitblock::any(r100_2ff_tmp4) || carryQ.CarryTest(3, 1))) {
                  r2b0_2ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                  r2b0_2ff_tmp2 = simd_andc(r2b0_2ff_tmp1, basis_bits.bit_4);
                  r2b0_2ff_tmp3 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_82_85 = simd_and(r2b0_2ff_tmp2, r2b0_2ff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(3), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_82_85);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2b0_2ff_tmp4);
                  r2b0_2ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  byte_range_92_9f = simd_and(r80_7ff_tmp24, r2b0_2ff_tmp6);
                  r2b0_2ff_tmp7 = simd_and(byte_cb_adv, byte_range_92_9f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp8 = simd_not(basis_bits.bit_5);
                  r2b0_2ff_tmp9 = simd_and(basis_bits.bit_5, tmp5);
                  r2b0_2ff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r2b0_2ff_tmp8), simd_andc(r2b0_2ff_tmp9, basis_bits.bit_4));
                  byte_range_a5_ab = simd_and(r80_7ff_tmp5, r2b0_2ff_tmp10);
                  r2b0_2ff_tmp11 = simd_and(byte_cb_adv, byte_range_a5_ab);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2b0_2ff_tmp13 = simd_and(tmp14, r2b0_2ff_tmp12);
                  byte_ad = simd_and(r80_7ff_tmp5, r2b0_2ff_tmp13);
                  r2b0_2ff_tmp14 = simd_and(byte_cb_adv, byte_ad);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2b0_2ff_tmp14);
                  r2b0_2ff_tmp15 = simd_and(tmp14, tmp8);
                  r2b0_2ff_tmp16 = simd_or(basis_bits.bit_3, r2b0_2ff_tmp15);
                  byte_range_af_bf = simd_and(r80_7ff_tmp13, r2b0_2ff_tmp16);
                  r2b0_2ff_tmp17 = simd_and(byte_cb_adv, byte_range_af_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2b0_2ff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(tmp14, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp19;
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(4), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp16);
              r100_3ff_tmp6 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(5, 2))) {
                r370_3ff_tmp1 = simd_and(tmp4, r100_3ff_tmp2);
                byte_b5 = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_b5);
                struct_gc_S.cc = simd_or(struct_gc_S.cc, r370_3ff_tmp2);
                byte_ce = simd_and(r80_7ff_tmp2, tmp22);
                r370_3ff_tmp3 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp4 = simd_andc(tmp4, basis_bits.bit_6);
                byte_range_84_85 = simd_and(r370_3ff_tmp3, r370_3ff_tmp4);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(5), byte_ce_adv));
                r370_3ff_tmp5 = simd_and(byte_ce_adv, byte_range_84_85);
                struct_gc_S.cc = simd_or(struct_gc_S.cc, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_and(tmp14, tmp8);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_and(tmp4, tmp21);
                byte_b6 = simd_and(byte_range_b0_bf, r370_3ff_tmp7);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(6), byte_cf_adv));
                r370_3ff_tmp8 = simd_and(byte_cf_adv, byte_b6);
                struct_gc_S.cc = simd_or(struct_gc_S.cc, r370_3ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 5);
            }
            r80_7ff_tmp28 = simd_and(byte_range_c0_ff, tmp19);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp28, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(7, 3))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp28, tmp26);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(7, 1))) {
                byte_d2 = simd_and(r80_7ff_tmp28, r80_7ff_tmp3);
                r400_4ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                byte_82 = simd_and(r400_4ff_tmp1, r80_7ff_tmp3);
                carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(7), byte_d2_adv));
                r400_4ff_tmp2 = simd_and(byte_d2_adv, byte_82);
                struct_gc_S.cc = simd_or(struct_gc_S.cc, r400_4ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(7, 1);
              }
              r400_5ff_tmp1 = simd_andc(tmp4, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp28, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(tmp4, tmp21);
              byte_d6 = simd_and(r80_7ff_tmp28, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(8), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(9, 1))) {
                byte_d4 = simd_and(r80_7ff_tmp28, tmp6);
                byte_range_b0_bf = r80_7ff_tmp19;
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(9), r500_58f_tmp1));
                r500_58f_tmp2 = simd_and(r500_58f_tmp1, byte_range_b0_bf);
                r500_58f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp4 = simd_and(tmp4, r500_58f_tmp3);
                byte_d5 = simd_and(r80_7ff_tmp28, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp2, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if (bitblock::any(r500_58f_tmp6)) {
                  r530_58f_tmp1 = simd_and(byte_range_80_8f, tmp14);
                  byte_range_8d_8f = simd_and(r530_58f_tmp1, tmp5);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp2 = simd_and(byte_d6_adv, byte_range_8d_8f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r530_58f_tmp2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 3);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp28, tmp7);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(10, 2))) {
              byte_d8 = simd_and(r80_7ff_tmp28, r80_7ff_tmp21);
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              r600_6ff_tmp2 = simd_or(basis_bits.bit_5, tmp5);
              r600_6ff_tmp3 = simd_not(r600_6ff_tmp2);
              r600_6ff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp5 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp3), simd_andc(r600_6ff_tmp4, basis_bits.bit_4));
              byte_range_86_88 = simd_and(r600_6ff_tmp1, r600_6ff_tmp5);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(10), byte_d8_adv));
              r600_6ff_tmp6 = simd_and(byte_d8_adv, byte_range_86_88);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp6);
              byte_8b = simd_and(r600_6ff_tmp1, tmp9);
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_8b);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp7);
              byte_range_8e_8f = simd_and(r600_6ff_tmp1, r80_7ff_tmp16);
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_8e_8f);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp8);
              byte_db = simd_and(r80_7ff_tmp28, tmp9);
              byte_9e = simd_and(r80_7ff_tmp24, tmp22);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(11), byte_db_adv));
              r600_6ff_tmp9 = simd_and(byte_db_adv, byte_9e);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp9);
              r600_6ff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp11 = simd_and(tmp7, r600_6ff_tmp10);
              byte_a9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(byte_db_adv, byte_a9);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r80_7ff_tmp19, tmp14);
              r600_6ff_tmp14 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_bd_be = simd_and(r600_6ff_tmp13, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(byte_db_adv, byte_range_bd_be);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, r600_6ff_tmp15);
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
            byte_range_de_df = simd_and(r80_7ff_tmp28, r80_7ff_tmp16);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(12, 1))) {
              r780_7ff_tmp1 = simd_and(tmp14, tmp8);
              byte_df = simd_and(r80_7ff_tmp28, r780_7ff_tmp1);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(12, 1))) {
                r7c0_7ff_tmp1 = simd_and(tmp4, tmp21);
                byte_b6 = simd_and(r80_7ff_tmp19, r7c0_7ff_tmp1);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(12), byte_df_adv));
                r7c0_7ff_tmp2 = simd_and(byte_df_adv, byte_b6);
                struct_gc_S.cc = simd_or(struct_gc_S.cc, r7c0_7ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 13);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(13, 79))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp26);
            byte_e4 = simd_and(byte_range_e0_ef, tmp6);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp2 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_and(basis_bits.bit_2, r800_ffff_tmp2);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp3);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(13), r800_ffff_tmp4));
            r800_ffff_tmp5 = simd_and(r800_ffff_tmp4, byte_range_80_b7);
            r800_ffff_tmp6 = simd_or(byte_range_e0_e3, r800_ffff_tmp5);
            if ((bitblock::any(r800_ffff_tmp6) || carryQ.CarryTest(14, 61))) {
              r800_4dff_tmp1 = simd_or(tmp26, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(14, 20))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp27);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(14, 11))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp1, tmp2);
                  r800_fff_tmp2 = simd_and(tmp4, tmp8);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp2);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(14), r800_fff_tmp3));
                  sequence_e0_a7 = simd_and(r800_fff_tmp3, byte_a7);
                  byte_e0_adv = r800_fff_tmp3;
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp1, tmp12);
                  r800_fff_tmp5 = simd_andc(basis_bits.bit_6, tmp26);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp4, r800_fff_tmp5);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(15), sequence_e0_a7_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a7_adv, byte_range_b2_b3);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_and(tmp7, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r800_fff_tmp4, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(sequence_e0_a7_adv, byte_range_ba_bb);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp8);
                  byte_ab = simd_and(r800_fff_tmp1, tmp9);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp10 = simd_andc(r800_fff_tmp9, tmp26);
                  byte_b1 = simd_and(r800_fff_tmp4, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(16), sequence_e0_ab_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_ab_adv, byte_b1);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(tmp14, r800_fff_tmp9);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  byte_b0 = simd_andc(r800_fff_tmp4, tmp27);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(17), sequence_e0_ad_adv));
                  r800_fff_tmp13 = simd_and(sequence_e0_ad_adv, byte_b0);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_and(tmp14, tmp8);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp14);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp15 = simd_or(basis_bits.bit_5, tmp8);
                  r800_fff_tmp16 = simd_xor(basis_bits.bit_4, r800_fff_tmp15);
                  byte_range_b3_ba = simd_and(r800_fff_tmp4, r800_fff_tmp16);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(18), sequence_e0_af_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_af_adv, byte_range_b3_ba);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp17);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  byte_bf = simd_and(r800_fff_tmp4, r800_fff_tmp14);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(19), sequence_e0_b1_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_b1_adv, byte_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(tmp4, r800_fff_tmp9);
                  byte_b5 = simd_and(r800_fff_tmp4, r800_fff_tmp19);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp20 = simd_and(tmp7, r800_fff_tmp9);
                  byte_b9 = simd_and(r800_fff_tmp4, r800_fff_tmp20);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(20), sequence_e0_b5_adv));
                  r800_fff_tmp21 = simd_and(sequence_e0_b5_adv, byte_b9);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_andc(tmp7, tmp5);
                  byte_b8 = simd_and(r800_fff_tmp4, r800_fff_tmp22);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(21), sequence_e0_b8_adv));
                  r800_fff_tmp23 = simd_and(sequence_e0_b8_adv, byte_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp23);
                  byte_bc = simd_and(r800_fff_tmp4, tmp31);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp25 = simd_andc(r800_ffff_tmp1, r800_fff_tmp24);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp25, tmp26);
                  byte_range_81_83 = simd_and(r800_fff_tmp26, tmp5);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(22), sequence_e0_bc_adv));
                  r800_fff_tmp27 = simd_and(sequence_e0_bc_adv, byte_range_81_83);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp27);
                  r800_fff_tmp28 = simd_and(r800_ffff_tmp1, tmp19);
                  r800_fff_tmp29 = simd_andc(tmp8, tmp26);
                  byte_93 = simd_and(r800_fff_tmp28, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(sequence_e0_bc_adv, byte_93);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(r800_fff_tmp28, tmp4);
                  byte_range_95_97 = simd_and(r800_fff_tmp31, tmp5);
                  r800_fff_tmp32 = simd_and(sequence_e0_bc_adv, byte_range_95_97);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_fff_tmp28, basis_bits.bit_4);
                  r800_fff_tmp34 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r800_fff_tmp33, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_bc_adv, byte_range_9a_9f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp35);
                  byte_b4 = simd_and(r800_fff_tmp4, tmp6);
                  r800_fff_tmp36 = simd_and(sequence_e0_bc_adv, byte_b4);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(tmp4, tmp21);
                  byte_b6 = simd_and(r800_fff_tmp4, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(sequence_e0_bc_adv, byte_b6);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(sequence_e0_bc_adv, byte_b8);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp39);
                  byte_be = simd_and(r800_fff_tmp4, tmp22);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp40 = simd_and(tmp14, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp4, r800_fff_tmp40);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(23), sequence_e0_be_adv));
                  r800_fff_tmp41 = simd_and(sequence_e0_be_adv, byte_range_be_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp41);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp42 = simd_andc(r800_fff_tmp25, basis_bits.bit_4);
                  r800_fff_tmp43 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r800_fff_tmp42, r800_fff_tmp43);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(24), sequence_e0_bf_adv));
                  r800_fff_tmp44 = simd_and(sequence_e0_bf_adv, byte_range_80_85);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(basis_bits.bit_5, tmp5);
                  r800_fff_tmp46 = simd_not(r800_fff_tmp45);
                  r800_fff_tmp47 = simd_and(basis_bits.bit_5, tmp8);
                  r800_fff_tmp48 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp46), simd_andc(r800_fff_tmp47, basis_bits.bit_4));
                  byte_range_87_8c = simd_and(r800_fff_tmp25, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_bf_adv, byte_range_87_8c);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp49);
                  byte_range_8e_8f = simd_and(r800_fff_tmp25, r800_fff_tmp40);
                  r800_fff_tmp50 = simd_and(sequence_e0_bf_adv, byte_range_8e_8f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_5, tmp5);
                  r800_fff_tmp52 = simd_not(r800_fff_tmp51);
                  r800_fff_tmp53 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp52), simd_andc(r800_fff_tmp45, basis_bits.bit_4));
                  byte_range_95_98 = simd_and(r800_fff_tmp28, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_bf_adv, byte_range_95_98);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r800_fff_tmp54);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 11);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp26);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(25, 9))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp1, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(tmp21, tmp26);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(25), r1000_1fff_tmp4));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp4, byte_82);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(r800_ffff_tmp1, tmp19);
                  r1000_1fff_tmp6 = simd_and(tmp14, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp6);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(26), sequence_e1_82_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_82_adv, byte_range_9e_9f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp7);
                  byte_8e = simd_and(r1000_1fff_tmp2, tmp22);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, r1000_1fff_tmp8);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp5, r1000_1fff_tmp9);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(27), sequence_e1_8e_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_8e_adv, byte_range_90_99);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(tmp14, tmp8);
                  byte_9f = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp11);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  byte_9b = simd_and(r1000_1fff_tmp5, tmp9);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(28), sequence_e1_9f_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_9f_adv, byte_9b);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp1, tmp2);
                  r1000_1fff_tmp14 = simd_and(tmp4, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp14);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp27);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(29), sequence_e1_a5_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_a5_adv, byte_80);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(tmp4, tmp8);
                  byte_a7 = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_3, r1000_1fff_tmp6);
                  r1000_1fff_tmp18 = simd_or(basis_bits.bit_2, r1000_1fff_tmp17);
                  byte_range_9e_bf = simd_and(r800_ffff_tmp1, r1000_1fff_tmp18);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(30), sequence_e1_a7_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_a7_adv, byte_range_9e_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(tmp14, r800_1fff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp20);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp21 = simd_or(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp22 = simd_not(r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_or(basis_bits.bit_5, tmp5);
                  r1000_1fff_tmp24 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp22), simd_andc(r1000_1fff_tmp23, basis_bits.bit_4));
                  byte_range_a1_aa = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp24);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(31), sequence_e1_ad_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_ad_adv, byte_range_a1_aa);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r800_ffff_tmp1, tmp12);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_5, tmp5);
                  r1000_1fff_tmp28 = simd_not(r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp28), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_bc = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp29);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_ad_adv, byte_range_b4_bc);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp30);
                  byte_be = simd_and(r1000_1fff_tmp26, tmp22);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_bd = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp20);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(32), sequence_e1_be_adv));
                  r1000_1fff_tmp31 = simd_and(sequence_e1_be_adv, byte_bd);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp31);
                  byte_bf = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp11);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_be_adv, byte_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp32);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(33), sequence_e1_bf_adv));
                  r1000_1fff_tmp33 = simd_and(sequence_e1_bf_adv, byte_range_80_81);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp2, tmp14);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp34, tmp5);
                  r1000_1fff_tmp35 = simd_and(sequence_e1_bf_adv, byte_range_8d_8f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp5, tmp14);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp36, tmp5);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_bf_adv, byte_range_9d_9f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(r1000_1fff_tmp13, tmp14);
                  byte_range_ad_af = simd_and(r1000_1fff_tmp38, tmp5);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_bf_adv, byte_range_ad_af);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp26, tmp14);
                  r1000_1fff_tmp41 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(sequence_e1_bf_adv, byte_range_bd_be);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r1000_1fff_tmp42);
                }
                else {
                  carryQ.CarryDequeueEnqueue(25, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 20);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp26);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp5);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(34, 41))) {
                r2000_4dff_tmp1 = simd_andc(tmp21, tmp26);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(34, 30))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp1, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp26);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(34), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_84 = simd_and(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(35), sequence_e2_81_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_81_adv, byte_84);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp1, tmp19);
                  byte_92 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp1);
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_92);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp1, tmp12);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, basis_bits.bit_4);
                  r2000_2fff_tmp11 = simd_not(tmp5);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_81_adv, byte_range_ba_bc);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp13);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp1);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_8a_8c = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp12);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(36), sequence_e2_82_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_82_adv, byte_range_8a_8c);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp1, basis_bits.bit_2);
                  r2000_2fff_tmp17 = simd_and(tmp14, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_3, r2000_2fff_tmp17);
                  byte_range_a0_bd = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_82_adv, byte_range_a0_bd);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp19);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  byte_range_80_81 = simd_andc(r2000_2fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(37), sequence_e2_84_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_84_adv, byte_range_80_81);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp22 = simd_xor(basis_bits.bit_5, tmp8);
                  byte_range_83_86 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp22);
                  r2000_2fff_tmp23 = simd_and(sequence_e2_84_adv, byte_range_83_86);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_andc(tmp7, basis_bits.bit_6);
                  byte_range_88_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_84_adv, byte_range_88_89);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp25);
                  byte_94 = simd_and(r2000_2fff_tmp7, tmp6);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_84_adv, byte_94);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_5, tmp5);
                  r2000_2fff_tmp28 = simd_not(r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp30 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp28), simd_andc(r2000_2fff_tmp29, basis_bits.bit_4));
                  byte_range_96_98 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(sequence_e2_84_adv, byte_range_96_98);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_or(basis_bits.bit_3, tmp26);
                  r2000_2fff_tmp33 = simd_not(r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp33), simd_andc(r2000_2fff_tmp18, basis_bits.bit_2));
                  byte_range_9e_a3 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp34);
                  r2000_2fff_tmp35 = simd_and(sequence_e2_84_adv, byte_range_9e_a3);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r800_ffff_tmp1, tmp2);
                  r2000_2fff_tmp37 = simd_and(tmp4, r2000_2fff_tmp3);
                  byte_a5 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_84_adv, byte_a5);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_and(tmp4, tmp8);
                  byte_a7 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp39);
                  r2000_2fff_tmp40 = simd_and(sequence_e2_84_adv, byte_a7);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(tmp7, r2000_2fff_tmp3);
                  byte_a9 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_and(sequence_e2_84_adv, byte_a9);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp42);
                  byte_ae = simd_and(r2000_2fff_tmp36, tmp22);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_84_adv, byte_ae);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(tmp7, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(sequence_e2_84_adv, byte_range_ba_bb);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp45);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp37);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp46 = simd_and(basis_bits.bit_5, tmp5);
                  byte_range_80_84 = simd_andc(r2000_2fff_tmp21, r2000_2fff_tmp46);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(38), sequence_e2_85_adv));
                  r2000_2fff_tmp47 = simd_and(sequence_e2_85_adv, byte_range_80_84);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp47);
                  r2000_2fff_tmp48 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(sequence_e2_85_adv, byte_range_8a_8d);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_and(tmp14, tmp8);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_and(sequence_e2_85_adv, byte_8f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp51);
                  r2000_2fff_tmp52 = simd_and(tmp4, tmp21);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp52);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  byte_range_90_bf = simd_and(r800_ffff_tmp1, r2000_2fff_tmp1);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(39), sequence_e2_86_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_86_adv, byte_range_90_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp53);
                  r2000_2fff_tmp54 = simd_not(basis_bits.bit_5);
                  r2000_2fff_tmp55 = simd_and(basis_bits.bit_5, tmp8);
                  r2000_2fff_tmp56 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp54), simd_andc(r2000_2fff_tmp55, basis_bits.bit_4));
                  byte_range_87_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp56);
                  byte_e2_byte_range_87_8b = simd_and(byte_e2_adv, byte_range_87_8b);
                  byte_range_80_bf = r800_ffff_tmp1;
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_87_8b, carryQ.get_carry_in(40), r2000_2fff_tmp57));
                  byte_e2_byte_range_87_8b_sfx = simd_and(r2000_2fff_tmp57, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_87_8b_sfx);
                  r2000_2fff_tmp58 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  byte_8c = simd_and(r2000_2fff_tmp58, tmp31);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_range_80_87 = simd_andc(r2000_2fff_tmp58, basis_bits.bit_4);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(41), sequence_e2_8c_adv));
                  r2000_2fff_tmp59 = simd_and(sequence_e2_8c_adv, byte_range_80_87);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp59);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_4, r2000_2fff_tmp27);
                  r2000_2fff_tmp61 = simd_or(basis_bits.bit_3, r2000_2fff_tmp60);
                  r2000_2fff_tmp62 = simd_not(r2000_2fff_tmp61);
                  r2000_2fff_tmp63 = simd_or(basis_bits.bit_3, tmp14);
                  r2000_2fff_tmp64 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp62), simd_andc(r2000_2fff_tmp63, basis_bits.bit_2));
                  byte_range_8c_a8 = simd_and(byte_range_80_bf, r2000_2fff_tmp64);
                  r2000_2fff_tmp65 = simd_and(sequence_e2_8c_adv, byte_range_8c_a8);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp65);
                  r2000_2fff_tmp66 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp67 = simd_or(basis_bits.bit_5, tmp8);
                  r2000_2fff_tmp68 = simd_and(basis_bits.bit_4, r2000_2fff_tmp67);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_3, r2000_2fff_tmp68);
                  byte_range_ab_bf = simd_and(r2000_2fff_tmp66, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_and(sequence_e2_8c_adv, byte_range_ab_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp70);
                  r2000_2fff_tmp71 = simd_and(r2000_2fff_tmp58, tmp14);
                  r2000_2fff_tmp72 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_8d_8e = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp72);
                  byte_e2_byte_range_8d_8e = simd_and(byte_e2_adv, byte_range_8d_8e);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_8d_8e, carryQ.get_carry_in(42), r2000_2fff_tmp73));
                  byte_e2_byte_range_8d_8e_sfx = simd_and(r2000_2fff_tmp73, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_8d_8e_sfx);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp74 = simd_and(basis_bits.bit_3, r2000_2fff_tmp68);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_2, r2000_2fff_tmp74);
                  byte_range_80_ba = simd_andc(byte_range_80_bf, r2000_2fff_tmp75);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(43), sequence_e2_8f_adv));
                  r2000_2fff_tmp76 = simd_and(sequence_e2_8f_adv, byte_range_80_ba);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp76);
                  r2000_2fff_tmp77 = simd_and(byte_range_80_bf, tmp19);
                  byte_90 = simd_andc(r2000_2fff_tmp77, tmp27);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp78 = simd_or(basis_bits.bit_4, r2000_2fff_tmp55);
                  r2000_2fff_tmp79 = simd_or(basis_bits.bit_3, r2000_2fff_tmp78);
                  r2000_2fff_tmp80 = simd_and(basis_bits.bit_2, r2000_2fff_tmp79);
                  byte_range_80_a6 = simd_andc(byte_range_80_bf, r2000_2fff_tmp80);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(44), sequence_e2_90_adv));
                  r2000_2fff_tmp81 = simd_and(sequence_e2_90_adv, byte_range_80_a6);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp81);
                  byte_91 = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp4);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp58, r2000_2fff_tmp68);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(45), sequence_e2_91_adv));
                  r2000_2fff_tmp82 = simd_and(sequence_e2_91_adv, byte_range_80_8a);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp82);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_3, tmp14);
                  r2000_2fff_tmp84 = simd_or(basis_bits.bit_2, r2000_2fff_tmp83);
                  byte_range_9c_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp84);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(46), sequence_e2_92_adv));
                  r2000_2fff_tmp85 = simd_and(sequence_e2_92_adv, byte_range_9c_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp85);
                  r2000_2fff_tmp86 = simd_andc(tmp8, tmp26);
                  byte_93 = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp86);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp87 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp88 = simd_and(basis_bits.bit_4, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(basis_bits.bit_3, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_and(basis_bits.bit_2, r2000_2fff_tmp89);
                  byte_range_80_a9 = simd_andc(byte_range_80_bf, r2000_2fff_tmp90);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(47), sequence_e2_93_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp91);
                  r2000_2fff_tmp92 = simd_not(r2000_2fff_tmp46);
                  r2000_2fff_tmp93 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp92), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_94_9c = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp93);
                  byte_e2_byte_range_94_9c = simd_and(byte_e2_adv, byte_range_94_9c);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_94_9c, carryQ.get_carry_in(48), r2000_2fff_tmp94));
                  byte_e2_byte_range_94_9c_sfx = simd_and(r2000_2fff_tmp94, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_94_9c_sfx);
                  r2000_2fff_tmp95 = simd_and(tmp14, r2000_2fff_tmp3);
                  byte_9d = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp95);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp96 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp97 = simd_and(basis_bits.bit_2, r2000_2fff_tmp96);
                  byte_range_80_a7 = simd_andc(byte_range_80_bf, r2000_2fff_tmp97);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(49), sequence_e2_9d_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_9d_adv, byte_range_80_a7);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp98);
                  byte_9e = simd_and(r2000_2fff_tmp77, tmp22);
                  sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
                  r2000_2fff_tmp99 = simd_and(basis_bits.bit_3, tmp26);
                  r2000_2fff_tmp100 = simd_or(basis_bits.bit_2, r2000_2fff_tmp99);
                  byte_range_94_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp100);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(50), sequence_e2_9e_adv));
                  r2000_2fff_tmp101 = simd_and(sequence_e2_9e_adv, byte_range_94_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp101);
                  byte_9f = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp50);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(51), sequence_e2_9f_adv));
                  r2000_2fff_tmp102 = simd_and(sequence_e2_9f_adv, byte_range_80_84);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp102);
                  r2000_2fff_tmp103 = simd_or(basis_bits.bit_4, r2000_2fff_tmp29);
                  r2000_2fff_tmp104 = simd_or(basis_bits.bit_3, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_not(r2000_2fff_tmp104);
                  r2000_2fff_tmp106 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp105), simd_andc(r2000_2fff_tmp79, basis_bits.bit_2));
                  byte_range_87_a5 = simd_and(byte_range_80_bf, r2000_2fff_tmp106);
                  r2000_2fff_tmp107 = simd_and(sequence_e2_9f_adv, byte_range_87_a5);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp107);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, tmp12);
                  r2000_2fff_tmp108 = simd_and(sequence_e2_9f_adv, byte_range_b0_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp108);
                  r2000_2fff_tmp109 = simd_and(byte_range_80_bf, tmp2);
                  r2000_2fff_tmp110 = simd_andc(r2000_2fff_tmp109, basis_bits.bit_4);
                  byte_range_a0_a5 = simd_andc(r2000_2fff_tmp110, r2000_2fff_tmp29);
                  byte_e2_byte_range_a0_a5 = simd_and(byte_e2_adv, byte_range_a0_a5);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a0_a5, carryQ.get_carry_in(52), r2000_2fff_tmp111));
                  byte_e2_byte_range_a0_a5_sfx = simd_and(r2000_2fff_tmp111, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_a0_a5_sfx);
                  byte_a6 = simd_and(r2000_2fff_tmp109, r2000_2fff_tmp52);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  r2000_2fff_tmp112 = simd_andc(r2000_2fff_tmp58, tmp26);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp112, tmp8);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(53), sequence_e2_a6_adv));
                  r2000_2fff_tmp113 = simd_and(sequence_e2_a6_adv, byte_range_80_82);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp113);
                  r2000_2fff_tmp114 = simd_and(basis_bits.bit_3, r2000_2fff_tmp60);
                  r2000_2fff_tmp115 = simd_or(basis_bits.bit_2, r2000_2fff_tmp114);
                  byte_range_99_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp115);
                  r2000_2fff_tmp116 = simd_and(sequence_e2_a6_adv, byte_range_99_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp116);
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  r2000_2fff_tmp117 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_80_97 = simd_andc(r2000_2fff_tmp117, r800_ffff_tmp2);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(54), sequence_e2_a7_adv));
                  r2000_2fff_tmp118 = simd_and(sequence_e2_a7_adv, byte_range_80_97);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp118);
                  r2000_2fff_tmp119 = simd_xor(basis_bits.bit_2, r2000_2fff_tmp83);
                  byte_range_9c_bb = simd_and(byte_range_80_bf, r2000_2fff_tmp119);
                  r2000_2fff_tmp120 = simd_and(sequence_e2_a7_adv, byte_range_9c_bb);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp120);
                  byte_range_be_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp17);
                  r2000_2fff_tmp121 = simd_and(sequence_e2_a7_adv, byte_range_be_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp121);
                  r2000_2fff_tmp122 = simd_and(r2000_2fff_tmp109, basis_bits.bit_4);
                  byte_range_a8_ac = simd_andc(r2000_2fff_tmp122, r2000_2fff_tmp46);
                  byte_e2_byte_range_a8_ac = simd_and(byte_e2_adv, byte_range_a8_ac);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a8_ac, carryQ.get_carry_in(55), r2000_2fff_tmp123));
                  byte_e2_byte_range_a8_ac_sfx = simd_and(r2000_2fff_tmp123, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_a8_ac_sfx);
                  byte_ad = simd_and(r2000_2fff_tmp109, r2000_2fff_tmp95);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp124 = simd_and(basis_bits.bit_2, r2000_2fff_tmp99);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r2000_2fff_tmp124);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(56), sequence_e2_ad_adv));
                  r2000_2fff_tmp125 = simd_and(sequence_e2_ad_adv, byte_range_80_b3);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp125);
                  byte_range_b6_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp103);
                  r2000_2fff_tmp126 = simd_and(sequence_e2_ad_adv, byte_range_b6_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp126);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp127 = simd_and(basis_bits.bit_3, r2000_2fff_tmp103);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp117, r2000_2fff_tmp127);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(57), sequence_e2_ae_adv));
                  r2000_2fff_tmp128 = simd_and(sequence_e2_ae_adv, byte_range_80_95);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp128);
                  r2000_2fff_tmp129 = simd_and(basis_bits.bit_3, r2000_2fff_tmp88);
                  r2000_2fff_tmp130 = simd_not(r2000_2fff_tmp129);
                  r2000_2fff_tmp131 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp130), simd_andc(r800_ffff_tmp2, basis_bits.bit_2));
                  byte_range_98_b9 = simd_and(byte_range_80_bf, r2000_2fff_tmp131);
                  r2000_2fff_tmp132 = simd_and(sequence_e2_ae_adv, byte_range_98_b9);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp132);
                  r2000_2fff_tmp133 = simd_and(byte_range_b0_bf, tmp14);
                  byte_range_bd_bf = simd_and(r2000_2fff_tmp133, tmp5);
                  r2000_2fff_tmp134 = simd_and(sequence_e2_ae_adv, byte_range_bd_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp134);
                  byte_af = simd_and(r2000_2fff_tmp109, r2000_2fff_tmp50);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp58, r2000_2fff_tmp60);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(58), sequence_e2_af_adv));
                  r2000_2fff_tmp135 = simd_and(sequence_e2_af_adv, byte_range_80_88);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp135);
                  r2000_2fff_tmp136 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp137 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp136), simd_andc(r2000_2fff_tmp88, basis_bits.bit_3));
                  byte_range_8a_91 = simd_and(r2000_2fff_tmp117, r2000_2fff_tmp137);
                  r2000_2fff_tmp138 = simd_and(sequence_e2_af_adv, byte_range_8a_91);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp138);
                  byte_b3 = simd_and(byte_range_b0_bf, r2000_2fff_tmp86);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp139 = simd_not(r2000_2fff_tmp67);
                  r2000_2fff_tmp140 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp139), simd_andc(r2000_2fff_tmp46, basis_bits.bit_4));
                  byte_range_a5_aa = simd_and(r2000_2fff_tmp109, r2000_2fff_tmp140);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(59), sequence_e2_b3_adv));
                  r2000_2fff_tmp141 = simd_and(sequence_e2_b3_adv, byte_range_a5_aa);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp141);
                  r2000_2fff_tmp142 = simd_and(tmp7, tmp21);
                  byte_ba = simd_and(byte_range_b0_bf, r2000_2fff_tmp142);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  byte_range_80_99 = simd_andc(r2000_2fff_tmp117, r2000_2fff_tmp129);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(60), sequence_e2_ba_adv));
                  r2000_2fff_tmp143 = simd_and(sequence_e2_ba_adv, byte_range_80_99);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp143);
                  r2000_2fff_tmp144 = simd_or(basis_bits.bit_2, r2000_2fff_tmp74);
                  byte_range_9b_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp144);
                  r2000_2fff_tmp145 = simd_and(sequence_e2_ba_adv, byte_range_9b_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp145);
                  byte_bb = simd_and(byte_range_b0_bf, tmp9);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(61), sequence_e2_bb_adv));
                  r2000_2fff_tmp146 = simd_and(sequence_e2_bb_adv, byte_range_80_b3);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp146);
                  byte_range_bc_be = simd_andc(r2000_2fff_tmp133, tmp8);
                  byte_e2_byte_range_bc_be = simd_and(byte_e2_adv, byte_range_bc_be);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_bc_be, carryQ.get_carry_in(62), r2000_2fff_tmp147));
                  byte_e2_byte_range_bc_be_sfx = simd_and(r2000_2fff_tmp147, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e2_byte_range_bc_be_sfx);
                  byte_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp50);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(63), sequence_e2_bf_adv));
                  r2000_2fff_tmp148 = simd_and(sequence_e2_bf_adv, byte_range_80_95);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp148);
                  byte_range_b0_bb = simd_andc(byte_range_b0_bf, tmp14);
                  r2000_2fff_tmp149 = simd_and(sequence_e2_bf_adv, byte_range_b0_bb);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r2000_2fff_tmp149);
                }
                else {
                  carryQ.CarryDequeueEnqueue(34, 30);
                }
                r2000_4dff_tmp2 = simd_andc(tmp8, tmp26);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp5);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(64, 11))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp1, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp27);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(64), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  byte_84 = simd_and(r3000_4dff_tmp2, tmp6);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(65), sequence_e3_80_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e3_80_adv, byte_84);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp4);
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp1, tmp19);
                  byte_range_92_93 = simd_and(r3000_4dff_tmp5, r800_4dff_tmp2);
                  r3000_4dff_tmp6 = simd_and(sequence_e3_80_adv, byte_range_92_93);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp1, tmp2);
                  byte_a0 = simd_andc(r3000_4dff_tmp7, tmp27);
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_a0);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp1, tmp12);
                  r3000_4dff_tmp10 = simd_and(tmp4, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(sequence_e3_80_adv, byte_range_b6_b7);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp11);
                  r3000_4dff_tmp12 = simd_and(tmp14, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(sequence_e3_80_adv, byte_range_be_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp13);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp1);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp14 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp15 = simd_not(tmp5);
                  r3000_4dff_tmp16 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp15), simd_andc(tmp8, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp16);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(66), sequence_e3_82_adv));
                  r3000_4dff_tmp17 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp17);
                  r3000_4dff_tmp18 = simd_and(tmp4, tmp21);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp18);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  byte_range_90_91 = simd_andc(r3000_4dff_tmp5, r800_4dff_tmp1);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(67), sequence_e3_86_adv));
                  r3000_4dff_tmp19 = simd_and(sequence_e3_86_adv, byte_range_90_91);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp19);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp21 = simd_or(basis_bits.bit_4, r3000_4dff_tmp20);
                  byte_range_96_9f = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_and(sequence_e3_86_adv, byte_range_96_9f);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_and(tmp4, tmp8);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp23);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_3, tmp26);
                  r3000_4dff_tmp25 = simd_and(basis_bits.bit_2, r3000_4dff_tmp24);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp1, r3000_4dff_tmp25);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(68), sequence_e3_87_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_87_adv, byte_range_80_a3);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_andc(tmp7, tmp5);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp27);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  r3000_4dff_tmp28 = simd_andc(r800_ffff_tmp1, basis_bits.bit_2);
                  r3000_4dff_tmp29 = simd_and(tmp14, tmp8);
                  r3000_4dff_tmp30 = simd_and(basis_bits.bit_3, r3000_4dff_tmp29);
                  byte_range_80_9e = simd_andc(r3000_4dff_tmp28, r3000_4dff_tmp30);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(69), sequence_e3_88_adv));
                  r3000_4dff_tmp31 = simd_and(sequence_e3_88_adv, byte_range_80_9e);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp31);
                  r3000_4dff_tmp32 = simd_and(r800_ffff_tmp1, basis_bits.bit_2);
                  r3000_4dff_tmp33 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp34 = simd_and(basis_bits.bit_4, r3000_4dff_tmp33);
                  r3000_4dff_tmp35 = simd_or(basis_bits.bit_3, r3000_4dff_tmp34);
                  byte_range_aa_bf = simd_and(r3000_4dff_tmp32, r3000_4dff_tmp35);
                  r3000_4dff_tmp36 = simd_and(sequence_e3_88_adv, byte_range_aa_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp36);
                  r3000_4dff_tmp37 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp38 = simd_and(tmp7, r3000_4dff_tmp37);
                  byte_89 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp38);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  byte_range_80_87 = simd_andc(r3000_4dff_tmp2, basis_bits.bit_4);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(70), sequence_e3_89_adv));
                  r3000_4dff_tmp39 = simd_and(sequence_e3_89_adv, byte_range_80_87);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp39);
                  byte_90 = simd_andc(r3000_4dff_tmp5, tmp27);
                  r3000_4dff_tmp40 = simd_and(sequence_e3_89_adv, byte_90);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp40);
                  byte_range_a0_bf = r3000_4dff_tmp32;
                  r3000_4dff_tmp41 = simd_and(sequence_e3_89_adv, byte_range_a0_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp41);
                  r3000_4dff_tmp42 = simd_and(tmp7, tmp21);
                  byte_8a = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp42);
                  sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
                  r3000_4dff_tmp43 = simd_and(basis_bits.bit_3, tmp27);
                  r3000_4dff_tmp44 = simd_not(r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp44), simd_andc(r3000_4dff_tmp35, basis_bits.bit_2));
                  byte_range_8a_b0 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp45);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(71), sequence_e3_8a_adv));
                  r3000_4dff_tmp46 = simd_and(sequence_e3_8a_adv, byte_range_8a_b0);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp46);
                  byte_8b = simd_and(r3000_4dff_tmp2, tmp9);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  r3000_4dff_tmp47 = simd_and(basis_bits.bit_2, r3000_4dff_tmp30);
                  byte_range_80_be = simd_andc(r800_ffff_tmp1, r3000_4dff_tmp47);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(72), sequence_e3_8b_adv));
                  r3000_4dff_tmp48 = simd_and(sequence_e3_8b_adv, byte_range_80_be);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp48);
                  byte_range_8c_8f = simd_and(r3000_4dff_tmp2, tmp14);
                  byte_e3_byte_range_8c_8f = simd_and(byte_e3_adv, byte_range_8c_8f);
                  byte_range_80_bf = r800_ffff_tmp1;
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8c_8f, carryQ.get_carry_in(73), r3000_4dff_tmp49));
                  byte_e3_byte_range_8c_8f_sfx = simd_and(r3000_4dff_tmp49, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, byte_e3_byte_range_8c_8f_sfx);
                  r3000_4dff_tmp50 = simd_and(byte_range_80_bf, tmp12);
                  byte_b7 = simd_and(r3000_4dff_tmp50, r3000_4dff_tmp23);
                  sequence_e4_b7 = simd_and(r800_ffff_tmp4, byte_b7);
                  byte_e4_adv = r800_ffff_tmp4;
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(74), sequence_e4_b7_adv));
                  r3000_4dff_tmp51 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
                  struct_gc_S.cc = simd_or(struct_gc_S.cc, r3000_4dff_tmp51);
                }
                else {
                  carryQ.CarryDequeueEnqueue(64, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(34, 41);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 61);
            }
            r800_ffff_tmp7 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp7, r800_ffff_tmp8);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(75, 17))) {
              ra000_ffff_tmp1 = simd_and(tmp7, tmp21);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp1);
              ra000_ffff_tmp2 = simd_and(r800_ffff_tmp1, tmp19);
              ra000_ffff_tmp3 = simd_andc(tmp21, tmp26);
              byte_92 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp3);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(75), ra000_ffff_tmp4));
              sequence_ea_92 = simd_and(ra000_ffff_tmp4, byte_92);
              byte_ea_adv = ra000_ffff_tmp4;
              ra000_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r800_ffff_tmp1, ra000_ffff_tmp5);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(76), sequence_ea_92_adv));
              ra000_ffff_tmp6 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp6);
              ra000_ffff_tmp7 = simd_andc(tmp8, tmp26);
              byte_93 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp7);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp8 = simd_andc(r800_ffff_tmp1, ra000_ffff_tmp5);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp8, basis_bits.bit_4);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, tmp8);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp10);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(77), sequence_ea_93_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_93_adv, byte_range_80_86);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp11);
              byte_9c = simd_and(ra000_ffff_tmp2, tmp31);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp12 = simd_andc(r800_ffff_tmp1, basis_bits.bit_2);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_4, ra000_ffff_tmp10);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_3, ra000_ffff_tmp13);
              byte_range_80_96 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp14);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(78), sequence_ea_9c_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_9c_adv, byte_range_80_96);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(r800_ffff_tmp1, tmp2);
              ra000_ffff_tmp17 = simd_or(tmp26, basis_bits.bit_6);
              byte_range_a0_a1 = simd_andc(ra000_ffff_tmp16, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ea_9c_adv, byte_range_a0_a1);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp18);
              byte_9e = simd_and(ra000_ffff_tmp2, tmp22);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp8, tmp7);
              ra000_ffff_tmp20 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_89_8a = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp20);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(79), sequence_ea_9e_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_9e_adv, byte_range_89_8a);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp21);
              byte_a0 = simd_andc(ra000_ffff_tmp16, tmp27);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_a8_ab = simd_and(ra000_ffff_tmp16, tmp7);
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(80), sequence_ea_a0_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_a0_adv, byte_range_a8_ab);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, tmp12);
              ra000_ffff_tmp24 = simd_not(r800_ffff_tmp8);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp26 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp24), simd_andc(ra000_ffff_tmp25, basis_bits.bit_4));
              byte_range_b6_b9 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(sequence_ea_a0_adv, byte_range_b6_b9);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp29 = simd_and(tmp7, ra000_ffff_tmp28);
              byte_a9 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp29);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp30 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp24), simd_andc(ra000_ffff_tmp10, basis_bits.bit_4));
              byte_range_b7_b9 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp30);
              carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(81), sequence_ea_a9_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_a9_adv, byte_range_b7_b9);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(tmp14, ra000_ffff_tmp28);
              byte_ad = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp32);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_9b = simd_and(ra000_ffff_tmp2, tmp9);
              carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(82), sequence_ea_ad_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ea_ad_adv, byte_9b);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(tmp14, tmp8);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp34);
              byte_ac = simd_and(ra000_ffff_tmp16, tmp31);
              carryQ.cq[83] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(83), ra000_ffff_tmp35));
              sequence_ef_ac = simd_and(ra000_ffff_tmp35, byte_ac);
              byte_ef_adv = ra000_ffff_tmp35;
              carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(84), sequence_ef_ac_adv));
              ra000_ffff_tmp36 = simd_and(sequence_ef_ac_adv, byte_a9);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp36);
              byte_ae = simd_and(ra000_ffff_tmp16, tmp22);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp37 = simd_or(basis_bits.bit_4, r800_ffff_tmp8);
              byte_range_b2_bf = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp37);
              carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(85), sequence_ef_ae_adv));
              ra000_ffff_tmp38 = simd_and(sequence_ef_ae_adv, byte_range_b2_bf);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp38);
              byte_af = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp34);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp17);
              carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(86), sequence_ef_af_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ef_af_adv, byte_range_80_81);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_and(tmp4, tmp8);
              byte_b7 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp40);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              ra000_ffff_tmp41 = simd_andc(tmp14, basis_bits.bit_6);
              byte_range_bc_bd = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp41);
              carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(87), sequence_ef_b7_adv));
              ra000_ffff_tmp42 = simd_and(sequence_ef_b7_adv, byte_range_bc_bd);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp42);
              byte_b9 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp29);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_a2 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp3);
              carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(88), sequence_ef_b9_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ef_b9_adv, byte_a2);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp16, tmp4);
              byte_range_a4_a6 = simd_andc(ra000_ffff_tmp44, tmp8);
              ra000_ffff_tmp45 = simd_and(sequence_ef_b9_adv, byte_range_a4_a6);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ef_b9_adv, byte_a9);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp46);
              byte_bc = simd_and(ra000_ffff_tmp23, tmp31);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_84 = simd_and(ra000_ffff_tmp8, tmp6);
              carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(89), sequence_ef_bc_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ef_bc_adv, byte_84);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp47);
              byte_8b = simd_and(ra000_ffff_tmp8, tmp9);
              ra000_ffff_tmp48 = simd_and(sequence_ef_bc_adv, byte_8b);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp2, tmp14);
              byte_range_9c_9e = simd_andc(ra000_ffff_tmp49, tmp8);
              ra000_ffff_tmp50 = simd_and(sequence_ef_bc_adv, byte_range_9c_9e);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp50);
              byte_be = simd_and(ra000_ffff_tmp23, tmp22);
              ra000_ffff_tmp51 = simd_and(sequence_ef_bc_adv, byte_be);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp51);
              byte_bd = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp32);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_80 = simd_andc(ra000_ffff_tmp8, tmp27);
              carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(90), sequence_ef_bd_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ef_bd_adv, byte_80);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp52);
              ra000_ffff_tmp53 = simd_and(sequence_ef_bd_adv, byte_9c);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(sequence_ef_bd_adv, byte_9e);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp54);
              byte_bf = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp34);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp16, basis_bits.bit_4);
              byte_range_a0_a6 = simd_andc(ra000_ffff_tmp55, ra000_ffff_tmp10);
              carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(91), sequence_ef_bf_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ef_bf_adv, byte_range_a0_a6);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(ra000_ffff_tmp16, basis_bits.bit_4);
              byte_range_a8_ae = simd_andc(ra000_ffff_tmp57, ra000_ffff_tmp10);
              ra000_ffff_tmp58 = simd_and(sequence_ef_bf_adv, byte_range_a8_ae);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(sequence_ef_bf_adv, byte_range_bc_bd);
              struct_gc_S.cc = simd_or(struct_gc_S.cc, ra000_ffff_tmp59);
            }
            else {
              carryQ.CarryDequeueEnqueue(75, 17);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(13, 79);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp12);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(92, 62))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp27);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp19);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp27);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(92), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            r10000_10ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp4);
            byte_84 = simd_and(r10000_10ffff_tmp5, tmp6);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(93), r10000_10ffff_tmp6));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp6, byte_84);
            byte_f0_adv = r10000_10ffff_tmp3;
            sequence_f0_90_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_and(r10000_10ffff_tmp1, tmp12);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp8);
            byte_range_b7_bf = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(94), sequence_f0_90_84_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_84_adv, byte_range_b7_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(tmp4, r10000_10ffff_tmp11);
            byte_85 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp12);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp7, basis_bits.bit_4);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_5, tmp5);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(95), sequence_f0_90_85_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_85_adv, byte_range_b9_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(tmp4, tmp21);
            byte_86 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp16);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp17);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp18);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(96), sequence_f0_90_86_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_86_adv, byte_range_80_89);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp19);
            byte_8c = simd_and(r10000_10ffff_tmp5, tmp31);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_86_adv, byte_8c);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp20);
            byte_range_90_9b = simd_andc(r10000_10ffff_tmp2, tmp14);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_86_adv, byte_range_90_9b);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp1, tmp2);
            byte_a0 = simd_andc(r10000_10ffff_tmp22, tmp27);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_86_adv, byte_a0);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(tmp4, tmp8);
            byte_87 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp24);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp25 = simd_and(tmp14, tmp5);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_not(r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp27), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_bc = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp28);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(97), sequence_f0_90_87_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(r10000_10ffff_tmp11, tmp26);
            byte_a1 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp30);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            r10000_10ffff_tmp31 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp31), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp32);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(98), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a1_adv, byte_range_b7_b8);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp33);
            byte_ab = simd_and(r10000_10ffff_tmp22, tmp9);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp34 = simd_andc(tmp7, tmp5);
            byte_88 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp34);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(99), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_90_ab_adv, byte_88);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp35);
            byte_96 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp16);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_ac = simd_and(r10000_10ffff_tmp22, tmp31);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(100), r10000_10ffff_tmp36));
            sequence_f0_96_ac = simd_and(r10000_10ffff_tmp36, byte_ac);
            sequence_f0_96_adv = r10000_10ffff_tmp36;
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp7, tmp14);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(101), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_96_ac_adv, byte_range_bc_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(tmp14, r10000_10ffff_tmp11);
            byte_ad = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp38);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(102), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_96_ad_adv, byte_85);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp39);
            byte_9b = simd_and(r10000_10ffff_tmp2, tmp9);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            r10000_10ffff_tmp40 = simd_andc(tmp21, tmp26);
            byte_b2 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp40);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(103), r10000_10ffff_tmp41));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp41, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp41;
            byte_9c = simd_and(r10000_10ffff_tmp2, tmp31);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(104), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_9b_b2_adv, byte_9c);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp42);
            byte_9d = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp38);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp5, tmp26);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp43, tmp8);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(105), r10000_10ffff_tmp44));
            sequence_f0_9d_byte_range_80_82 = simd_and(r10000_10ffff_tmp44, byte_range_80_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(106), r10000_10ffff_tmp45));
            sequence_f0_9d_byte_range_80_82_sfx = simd_and(r10000_10ffff_tmp45, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, sequence_f0_9d_byte_range_80_82_sfx);
            r10000_10ffff_tmp46 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp4);
            r10000_10ffff_tmp47 = simd_andc(tmp8, tmp26);
            byte_83 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp47);
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp44, byte_83);
            r10000_10ffff_tmp48 = simd_and(byte_range_80_bf, tmp19);
            sequence_f0_9d_adv = r10000_10ffff_tmp44;
            r10000_10ffff_tmp49 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp50 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp51);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp52);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(107), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_9d_83_adv, byte_range_80_b5);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp53);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp54 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp9);
            r10000_10ffff_tmp55 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp54);
            byte_range_80_a6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp55);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(108), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_9d_84_adv, byte_range_80_a6);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp58 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp59 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp58);
            byte_range_a9_bf = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(sequence_f0_9d_84_adv, byte_range_a9_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp60);
            sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp61);
            r10000_10ffff_tmp63 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp63);
            byte_range_80_a4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp64);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(109), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_9d_85_adv, byte_range_80_a4);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp66, basis_bits.bit_4);
            r10000_10ffff_tmp68 = simd_not(tmp5);
            r10000_10ffff_tmp69 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp68), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_aa_ac = simd_and(r10000_10ffff_tmp67, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_and(sequence_f0_9d_85_adv, byte_range_aa_ac);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp70);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp71 = simd_andc(r10000_10ffff_tmp46, basis_bits.bit_4);
            r10000_10ffff_tmp72 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp68), simd_andc(tmp8, basis_bits.bit_5));
            byte_range_83_84 = simd_and(r10000_10ffff_tmp71, r10000_10ffff_tmp72);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(110), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_9d_86_adv, byte_range_83_84);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp75 = simd_not(r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_or(basis_bits.bit_3, tmp14);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp75), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_2));
            byte_range_8c_a9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(sequence_f0_9d_86_adv, byte_range_8c_a9);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_and(tmp14, basis_bits.bit_6);
            r10000_10ffff_tmp80 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp79);
            byte_range_ae_bf = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(sequence_f0_9d_86_adv, byte_range_ae_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp81);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            r10000_10ffff_tmp82 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp83 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp79);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp83);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(111), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_9d_87_adv, byte_range_80_9d);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp84);
            sequence_f0_9d_88 = simd_and(sequence_f0_9d_adv, byte_88);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(112), sequence_f0_9d_88_adv));
            r10000_10ffff_tmp85 = simd_and(sequence_f0_9d_88_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_and(tmp7, r10000_10ffff_tmp11);
            byte_89 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp86);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp87 = simd_or(tmp26, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp87);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(113), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_9d_89_adv, byte_range_80_81);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_and(sequence_f0_9d_89_adv, byte_85);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp89);
            sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(114), sequence_f0_9d_8c_adv));
            r10000_10ffff_tmp90 = simd_and(sequence_f0_9d_8c_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp90);
            byte_8d = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp38);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            r10000_10ffff_tmp91 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp9);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp91);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(115), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_9d_8d_adv, byte_range_80_96);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp92);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            byte_81 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp30);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(116), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_9b_adv, byte_81);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(sequence_f0_9d_9b_adv, byte_9b);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp94);
            r10000_10ffff_tmp95 = simd_and(byte_range_80_bf, tmp12);
            byte_bb = simd_and(r10000_10ffff_tmp95, tmp9);
            r10000_10ffff_tmp96 = simd_and(sequence_f0_9d_9b_adv, byte_bb);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp96);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_95 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp12);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(117), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_9d_9c_adv, byte_95);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp97);
            byte_b5 = simd_and(r10000_10ffff_tmp95, r10000_10ffff_tmp12);
            r10000_10ffff_tmp98 = simd_and(sequence_f0_9d_9c_adv, byte_b5);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp98);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp99 = simd_and(tmp14, tmp8);
            byte_8f = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp99);
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(118), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_9d_adv, byte_8f);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp100);
            byte_af = simd_and(r10000_10ffff_tmp66, r10000_10ffff_tmp99);
            r10000_10ffff_tmp101 = simd_and(sequence_f0_9d_9d_adv, byte_af);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp101);
            byte_9e = simd_and(r10000_10ffff_tmp48, tmp22);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(119), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_9d_9e_adv, byte_89);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp102);
            byte_a9 = simd_and(r10000_10ffff_tmp66, r10000_10ffff_tmp86);
            r10000_10ffff_tmp103 = simd_and(sequence_f0_9d_9e_adv, byte_a9);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp103);
            byte_9f = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp99);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(120), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp104 = simd_and(sequence_f0_9d_9f_adv, byte_83);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp104);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(121), r10000_10ffff_tmp105));
            sequence_f0_9e_bb = simd_and(r10000_10ffff_tmp105, byte_bb);
            sequence_f0_9e_adv = r10000_10ffff_tmp105;
            byte_range_b0_b1 = simd_andc(r10000_10ffff_tmp95, r10000_10ffff_tmp87);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(122), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp106 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp106);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            byte_80 = simd_andc(r10000_10ffff_tmp46, tmp27);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(123), r10000_10ffff_tmp107));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp107, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp107;
            r10000_10ffff_tmp108 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp76);
            byte_range_80_ab = simd_andc(byte_range_80_bf, r10000_10ffff_tmp108);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(124), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9f_80_adv, byte_range_80_ab);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp109);
            byte_range_b0_bf = r10000_10ffff_tmp95;
            r10000_10ffff_tmp110 = simd_and(sequence_f0_9f_80_adv, byte_range_b0_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp110);
            sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(125), sequence_f0_9f_81_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp111);
            byte_82 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp40);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, tmp26);
            byte_range_80_93 = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp112);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(126), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp113 = simd_and(sequence_f0_9f_82_adv, byte_range_80_93);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp113);
            r10000_10ffff_tmp114 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp8);
            byte_range_a0_ae = simd_andc(r10000_10ffff_tmp66, r10000_10ffff_tmp114);
            r10000_10ffff_tmp115 = simd_and(sequence_f0_9f_82_adv, byte_range_a0_ae);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp115);
            r10000_10ffff_tmp116 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            byte_range_b1_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(sequence_f0_9f_82_adv, byte_range_b1_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp117);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            byte_range_81_8f = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp116);
            carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(127), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_9f_83_adv, byte_range_81_8f);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp118);
            r10000_10ffff_tmp119 = simd_not(r10000_10ffff_tmp51);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_3, tmp27);
            r10000_10ffff_tmp121 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp119), simd_andc(r10000_10ffff_tmp120, basis_bits.bit_2));
            byte_range_91_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp121);
            r10000_10ffff_tmp122 = simd_and(sequence_f0_9f_83_adv, byte_range_91_b5);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp122);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            r10000_10ffff_tmp123 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp99);
            r10000_10ffff_tmp124 = simd_not(r10000_10ffff_tmp123);
            r10000_10ffff_tmp125 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp124), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ae = simd_and(byte_range_80_bf, r10000_10ffff_tmp125);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(128), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp126 = simd_and(sequence_f0_9f_84_adv, byte_range_90_ae);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp126);
            r10000_10ffff_tmp127 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp127);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(129), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_9f_85_adv, byte_range_80_ab);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp128);
            r10000_10ffff_tmp129 = simd_and(sequence_f0_9f_85_adv, byte_range_b0_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp129);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            r10000_10ffff_tmp130 = simd_or(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp131 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp131);
            byte_range_80_9a = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp132);
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(130), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp133);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            r10000_10ffff_tmp134 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp50);
            byte_range_a6_bf = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp134);
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(131), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp135);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            r10000_10ffff_tmp136 = simd_andc(r10000_10ffff_tmp46, tmp26);
            carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(132), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp137 = simd_and(sequence_f0_9f_88_adv, byte_range_80_82);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp137);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp132);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ba = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_and(sequence_f0_9f_88_adv, byte_range_90_ba);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp140);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp58);
            carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(133), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp141 = simd_and(sequence_f0_9f_89_adv, byte_range_80_88);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp141);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp87);
            r10000_10ffff_tmp142 = simd_and(sequence_f0_9f_89_adv, byte_range_90_91);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp142);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            r10000_10ffff_tmp143 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp144 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp143);
            byte_range_80_ac = simd_andc(byte_range_80_bf, r10000_10ffff_tmp144);
            carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(134), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp145 = simd_and(sequence_f0_9f_8c_adv, byte_range_80_ac);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp145);
            r10000_10ffff_tmp146 = simd_and(sequence_f0_9f_8c_adv, byte_range_b0_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp146);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            r10000_10ffff_tmp147 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp83);
            byte_range_80_bd = simd_andc(byte_range_80_bf, r10000_10ffff_tmp147);
            carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(135), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bd);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp148);
            byte_8e = simd_and(r10000_10ffff_tmp46, tmp22);
            sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
            carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(136), sequence_f0_9f_8e_adv));
            r10000_10ffff_tmp149 = simd_and(sequence_f0_9f_8e_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp149);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp114);
            carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(137), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_9f_8f_adv, byte_range_80_8e);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp150);
            r10000_10ffff_tmp151 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp152 = simd_not(r10000_10ffff_tmp151);
            r10000_10ffff_tmp153 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp152), simd_andc(r10000_10ffff_tmp112, basis_bits.bit_2));
            byte_range_94_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp153);
            r10000_10ffff_tmp154 = simd_and(sequence_f0_9f_8f_adv, byte_range_94_b7);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp154);
            r10000_10ffff_tmp155 = simd_andc(r10000_10ffff_tmp48, tmp26);
            byte_range_90_92 = simd_andc(r10000_10ffff_tmp155, tmp8);
            sequence_f0_9f_byte_range_90_92 = simd_and(sequence_f0_9f_adv, byte_range_90_92);
            carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_90_92, carryQ.get_carry_in(138), r10000_10ffff_tmp156));
            sequence_f0_9f_byte_range_90_92_sfx = simd_and(r10000_10ffff_tmp156, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, sequence_f0_9f_byte_range_90_92_sfx);
            byte_93 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp47);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            r10000_10ffff_tmp157 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp99);
            r10000_10ffff_tmp158 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp157);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp158);
            carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(139), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp159 = simd_and(sequence_f0_9f_93_adv, byte_range_80_be);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp159);
            byte_94 = simd_and(r10000_10ffff_tmp48, tmp6);
            sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
            carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(140), sequence_f0_9f_94_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_9f_94_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp160);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            byte_range_80_8a = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp131);
            carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(141), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_9f_95_adv, byte_range_80_8a);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp161);
            r10000_10ffff_tmp162 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp163 = simd_not(r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp163), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp164);
            r10000_10ffff_tmp165 = simd_and(sequence_f0_9f_95_adv, byte_range_90_b9);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp165);
            r10000_10ffff_tmp166 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp166, r10000_10ffff_tmp130);
            r10000_10ffff_tmp167 = simd_and(sequence_f0_9f_95_adv, byte_range_bb_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp167);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            r10000_10ffff_tmp168 = simd_or(basis_bits.bit_3, tmp26);
            r10000_10ffff_tmp169 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp168);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp169);
            carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(142), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp170 = simd_and(sequence_f0_9f_96_adv, byte_range_80_a3);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp170);
            byte_range_a5_bf = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp63);
            r10000_10ffff_tmp171 = simd_and(sequence_f0_9f_96_adv, byte_range_a5_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp171);
            byte_range_97_98 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp32);
            sequence_f0_9f_byte_range_97_98 = simd_and(sequence_f0_9f_adv, byte_range_97_98);
            carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_97_98, carryQ.get_carry_in(143), r10000_10ffff_tmp172));
            sequence_f0_9f_byte_range_97_98_sfx = simd_and(r10000_10ffff_tmp172, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, sequence_f0_9f_byte_range_97_98_sfx);
            byte_99 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp86);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(144), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp173 = simd_and(sequence_f0_9f_99_adv, byte_range_80_82);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp173);
            r10000_10ffff_tmp174 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp63);
            byte_range_85_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp174);
            r10000_10ffff_tmp175 = simd_and(sequence_f0_9f_99_adv, byte_range_85_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp175);
            r10000_10ffff_tmp176 = simd_and(tmp7, tmp21);
            byte_9a = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp176);
            sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
            carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(145), sequence_f0_9f_9a_adv));
            r10000_10ffff_tmp177 = simd_and(sequence_f0_9f_9a_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp177);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_80_8f = r10000_10ffff_tmp46;
            carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(146), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_9f_9b_adv, byte_range_80_8f);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp178);
            r10000_10ffff_tmp179 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp61);
            byte_range_a0_ac = simd_andc(r10000_10ffff_tmp66, r10000_10ffff_tmp179);
            r10000_10ffff_tmp180 = simd_and(sequence_f0_9f_9b_adv, byte_range_a0_ac);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp180);
            byte_range_b0_b3 = simd_andc(byte_range_b0_bf, tmp26);
            r10000_10ffff_tmp181 = simd_and(sequence_f0_9f_9b_adv, byte_range_b0_b3);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp181);
            sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
            carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(147), sequence_f0_9f_9c_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_9f_9c_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp182);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            r10000_10ffff_tmp183 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_b3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp183);
            carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(148), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp184 = simd_and(sequence_f0_9f_9d_adv, byte_range_80_b3);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp184);
            sequence_f0_9f_9e = simd_and(sequence_f0_9f_adv, byte_9e);
            carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9e, carryQ.get_carry_in(149), sequence_f0_9f_9e_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_9f_9e_adv, byte_range_80_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp185);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            r10000_10ffff_tmp186 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp62);
            byte_range_80_94 = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp186);
            carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(150), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp187 = simd_and(sequence_f0_9f_9f_adv, byte_range_80_94);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp187);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            byte_range_80_8b = simd_andc(byte_range_80_8f, tmp14);
            carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(151), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp188 = simd_and(sequence_f0_9f_a0_adv, byte_range_80_8b);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp188);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp4);
            r10000_10ffff_tmp189 = simd_and(sequence_f0_9f_a0_adv, byte_range_90_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp189);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(152), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp190 = simd_and(sequence_f0_9f_a1_adv, byte_range_80_87);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp190);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp18);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_9f_a1_adv, byte_range_90_99);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp191);
            byte_range_a0_bf = r10000_10ffff_tmp57;
            r10000_10ffff_tmp192 = simd_and(sequence_f0_9f_a1_adv, byte_range_a0_bf);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp192);
            byte_a2 = simd_and(r10000_10ffff_tmp66, r10000_10ffff_tmp40);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(153), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp193 = simd_and(sequence_f0_9f_a2_adv, byte_range_80_87);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp193);
            r10000_10ffff_tmp194 = simd_not(r10000_10ffff_tmp80);
            r10000_10ffff_tmp195 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp194), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp195);
            r10000_10ffff_tmp196 = simd_and(sequence_f0_9f_a2_adv, byte_range_90_ad);
            struct_gc_S.cc = simd_or(struct_gc_S.cc, r10000_10ffff_tmp196);
          }
          else {
            carryQ.CarryDequeueEnqueue(92, 62);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 154);
        }
        carryQ.CarryQ_Adjust(154);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<154, 0> carryQ;
  };





Property_gc_C fgc_C;

extern "C" {
    BitBlock __get_gc_C (Basis_bits & basis_bits) {
        Struct_gc_C output;
        fgc_C . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Cc fgc_Cc;

extern "C" {
    BitBlock __get_gc_Cc (Basis_bits & basis_bits) {
        Struct_gc_Cc output;
        fgc_Cc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Cf fgc_Cf;

extern "C" {
    BitBlock __get_gc_Cf (Basis_bits & basis_bits) {
        Struct_gc_Cf output;
        fgc_Cf . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Cn fgc_Cn;

extern "C" {
    BitBlock __get_gc_Cn (Basis_bits & basis_bits) {
        Struct_gc_Cn output;
        fgc_Cn . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Co fgc_Co;

extern "C" {
    BitBlock __get_gc_Co (Basis_bits & basis_bits) {
        Struct_gc_Co output;
        fgc_Co . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Cs fgc_Cs;

extern "C" {
    BitBlock __get_gc_Cs (Basis_bits & basis_bits) {
        Struct_gc_Cs output;
        fgc_Cs . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_L fgc_L;

extern "C" {
    BitBlock __get_gc_L (Basis_bits & basis_bits) {
        Struct_gc_L output;
        fgc_L . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_LC fgc_LC;

extern "C" {
    BitBlock __get_gc_LC (Basis_bits & basis_bits) {
        Struct_gc_LC output;
        fgc_LC . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Ll fgc_Ll;

extern "C" {
    BitBlock __get_gc_Ll (Basis_bits & basis_bits) {
        Struct_gc_Ll output;
        fgc_Ll . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Lm fgc_Lm;

extern "C" {
    BitBlock __get_gc_Lm (Basis_bits & basis_bits) {
        Struct_gc_Lm output;
        fgc_Lm . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Lo fgc_Lo;

extern "C" {
    BitBlock __get_gc_Lo (Basis_bits & basis_bits) {
        Struct_gc_Lo output;
        fgc_Lo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Lt fgc_Lt;

extern "C" {
    BitBlock __get_gc_Lt (Basis_bits & basis_bits) {
        Struct_gc_Lt output;
        fgc_Lt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Lu fgc_Lu;

extern "C" {
    BitBlock __get_gc_Lu (Basis_bits & basis_bits) {
        Struct_gc_Lu output;
        fgc_Lu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_M fgc_M;

extern "C" {
    BitBlock __get_gc_M (Basis_bits & basis_bits) {
        Struct_gc_M output;
        fgc_M . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Mc fgc_Mc;

extern "C" {
    BitBlock __get_gc_Mc (Basis_bits & basis_bits) {
        Struct_gc_Mc output;
        fgc_Mc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Me fgc_Me;

extern "C" {
    BitBlock __get_gc_Me (Basis_bits & basis_bits) {
        Struct_gc_Me output;
        fgc_Me . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Mn fgc_Mn;

extern "C" {
    BitBlock __get_gc_Mn (Basis_bits & basis_bits) {
        Struct_gc_Mn output;
        fgc_Mn . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_N fgc_N;

extern "C" {
    BitBlock __get_gc_N (Basis_bits & basis_bits) {
        Struct_gc_N output;
        fgc_N . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Nd fgc_Nd;

extern "C" {
    BitBlock __get_gc_Nd (Basis_bits & basis_bits) {
        Struct_gc_Nd output;
        fgc_Nd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Nl fgc_Nl;

extern "C" {
    BitBlock __get_gc_Nl (Basis_bits & basis_bits) {
        Struct_gc_Nl output;
        fgc_Nl . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_No fgc_No;

extern "C" {
    BitBlock __get_gc_No (Basis_bits & basis_bits) {
        Struct_gc_No output;
        fgc_No . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_P fgc_P;

extern "C" {
    BitBlock __get_gc_P (Basis_bits & basis_bits) {
        Struct_gc_P output;
        fgc_P . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Pc fgc_Pc;

extern "C" {
    BitBlock __get_gc_Pc (Basis_bits & basis_bits) {
        Struct_gc_Pc output;
        fgc_Pc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Pd fgc_Pd;

extern "C" {
    BitBlock __get_gc_Pd (Basis_bits & basis_bits) {
        Struct_gc_Pd output;
        fgc_Pd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Pe fgc_Pe;

extern "C" {
    BitBlock __get_gc_Pe (Basis_bits & basis_bits) {
        Struct_gc_Pe output;
        fgc_Pe . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Pf fgc_Pf;

extern "C" {
    BitBlock __get_gc_Pf (Basis_bits & basis_bits) {
        Struct_gc_Pf output;
        fgc_Pf . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Pi fgc_Pi;

extern "C" {
    BitBlock __get_gc_Pi (Basis_bits & basis_bits) {
        Struct_gc_Pi output;
        fgc_Pi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Po fgc_Po;

extern "C" {
    BitBlock __get_gc_Po (Basis_bits & basis_bits) {
        Struct_gc_Po output;
        fgc_Po . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Ps fgc_Ps;

extern "C" {
    BitBlock __get_gc_Ps (Basis_bits & basis_bits) {
        Struct_gc_Ps output;
        fgc_Ps . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_S fgc_S;

extern "C" {
    BitBlock __get_gc_S (Basis_bits & basis_bits) {
        Struct_gc_S output;
        fgc_S . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Sc fgc_Sc;

extern "C" {
    BitBlock __get_gc_Sc (Basis_bits & basis_bits) {
        Struct_gc_Sc output;
        fgc_Sc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Sk fgc_Sk;

extern "C" {
    BitBlock __get_gc_Sk (Basis_bits & basis_bits) {
        Struct_gc_Sk output;
        fgc_Sk . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Sm fgc_Sm;

extern "C" {
    BitBlock __get_gc_Sm (Basis_bits & basis_bits) {
        Struct_gc_Sm output;
        fgc_Sm . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_So fgc_So;

extern "C" {
    BitBlock __get_gc_So (Basis_bits & basis_bits) {
        Struct_gc_So output;
        fgc_So . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Z fgc_Z;

extern "C" {
    BitBlock __get_gc_Z (Basis_bits & basis_bits) {
        Struct_gc_Z output;
        fgc_Z . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Zl fgc_Zl;

extern "C" {
    BitBlock __get_gc_Zl (Basis_bits & basis_bits) {
        Struct_gc_Zl output;
        fgc_Zl . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Zp fgc_Zp;

extern "C" {
    BitBlock __get_gc_Zp (Basis_bits & basis_bits) {
        Struct_gc_Zp output;
        fgc_Zp . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gc_Zs fgc_Zs;

extern "C" {
    BitBlock __get_gc_Zs (Basis_bits & basis_bits) {
        Struct_gc_Zs output;
        fgc_Zs . do_block(basis_bits, output);
        return output.cc;
    }
}

void install_property_gc_fn_ptrs(pablo::PabloCompiler & p) {
    p.InstallExternalFunction("__get_gc_C", (void *) & __get_gc_C);
  p.InstallExternalFunction("__get_gc_Cc", (void *) & __get_gc_Cc);
  p.InstallExternalFunction("__get_gc_Cf", (void *) & __get_gc_Cf);
  p.InstallExternalFunction("__get_gc_Cn", (void *) & __get_gc_Cn);
  p.InstallExternalFunction("__get_gc_Co", (void *) & __get_gc_Co);
  p.InstallExternalFunction("__get_gc_Cs", (void *) & __get_gc_Cs);
  p.InstallExternalFunction("__get_gc_L", (void *) & __get_gc_L);
  p.InstallExternalFunction("__get_gc_LC", (void *) & __get_gc_LC);
  p.InstallExternalFunction("__get_gc_Ll", (void *) & __get_gc_Ll);
  p.InstallExternalFunction("__get_gc_Lm", (void *) & __get_gc_Lm);
  p.InstallExternalFunction("__get_gc_Lo", (void *) & __get_gc_Lo);
  p.InstallExternalFunction("__get_gc_Lt", (void *) & __get_gc_Lt);
  p.InstallExternalFunction("__get_gc_Lu", (void *) & __get_gc_Lu);
  p.InstallExternalFunction("__get_gc_M", (void *) & __get_gc_M);
  p.InstallExternalFunction("__get_gc_Mc", (void *) & __get_gc_Mc);
  p.InstallExternalFunction("__get_gc_Me", (void *) & __get_gc_Me);
  p.InstallExternalFunction("__get_gc_Mn", (void *) & __get_gc_Mn);
  p.InstallExternalFunction("__get_gc_N", (void *) & __get_gc_N);
  p.InstallExternalFunction("__get_gc_Nd", (void *) & __get_gc_Nd);
  p.InstallExternalFunction("__get_gc_Nl", (void *) & __get_gc_Nl);
  p.InstallExternalFunction("__get_gc_No", (void *) & __get_gc_No);
  p.InstallExternalFunction("__get_gc_P", (void *) & __get_gc_P);
  p.InstallExternalFunction("__get_gc_Pc", (void *) & __get_gc_Pc);
  p.InstallExternalFunction("__get_gc_Pd", (void *) & __get_gc_Pd);
  p.InstallExternalFunction("__get_gc_Pe", (void *) & __get_gc_Pe);
  p.InstallExternalFunction("__get_gc_Pf", (void *) & __get_gc_Pf);
  p.InstallExternalFunction("__get_gc_Pi", (void *) & __get_gc_Pi);
  p.InstallExternalFunction("__get_gc_Po", (void *) & __get_gc_Po);
  p.InstallExternalFunction("__get_gc_Ps", (void *) & __get_gc_Ps);
  p.InstallExternalFunction("__get_gc_S", (void *) & __get_gc_S);
  p.InstallExternalFunction("__get_gc_Sc", (void *) & __get_gc_Sc);
  p.InstallExternalFunction("__get_gc_Sk", (void *) & __get_gc_Sk);
  p.InstallExternalFunction("__get_gc_Sm", (void *) & __get_gc_Sm);
  p.InstallExternalFunction("__get_gc_So", (void *) & __get_gc_So);
  p.InstallExternalFunction("__get_gc_Z", (void *) & __get_gc_Z);
  p.InstallExternalFunction("__get_gc_Zl", (void *) & __get_gc_Zl);
  p.InstallExternalFunction("__get_gc_Zp", (void *) & __get_gc_Zp);
  p.InstallExternalFunction("__get_gc_Zs", (void *) & __get_gc_Zs);

}

#endif
