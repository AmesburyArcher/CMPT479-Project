#ifndef HANGULSYLLABLETYPE_H
#define HANGULSYLLABLETYPE_H
/*
 *  Copyright (c) 2014 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include <vector>
#include "unicode_set.h"
#include "PropertyAliases.h"
#include "PropertyValueAliases.h"

namespace UCD {
  namespace HST {
    const UnicodeSet l_Set 
      {{{Empty, 136}, {Full, 3}, {Empty, 1216}, {Mixed, 1}, {Empty, 33460}},
       {0x1fffffff},
       34816};
    const UnicodeSet lv_Set 
      {{{Empty, 1376}, {Mixed, 349}, {Empty, 33091}},
       {0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100, 0x00000010,
        0x10000001, 0x01000000, 0x00100000, 0x00010000, 0x00001000,
        0x00000100, 0x00000010, 0x10000001, 0x01000000, 0x00100000,
        0x00010000, 0x00001000, 0x00000100, 0x00000010, 0x10000001,
        0x01000000, 0x00100000, 0x00010000, 0x00001000, 0x00000100,
        0x00000010, 0x10000001, 0x01000000, 0x00100000, 0x00010000,
        0x00001000, 0x00000100, 0x00000010, 0x10000001, 0x01000000,
        0x00100000, 0x00010000, 0x00001000, 0x00000100},
       34816};
    const UnicodeSet lvt_Set 
      {{{Empty, 1376}, {Mixed, 350}, {Empty, 33090}},
       {0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef,
        0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff,
        0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff,
        0xfffeffff, 0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe,
        0xfeffffff, 0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff,
        0xffffffef, 0xeffffffe, 0xfeffffff, 0xffefffff, 0xfffeffff,
        0xffffefff, 0xfffffeff, 0xffffffef, 0xeffffffe, 0xfeffffff,
        0xffefffff, 0xfffeffff, 0xffffefff, 0xfffffeff, 0x0000000f},
       34816};
    const UnicodeSet na_Set 
      {{{Full, 136}, {Empty, 8}, {Full, 1211}, {Mixed, 1}, {Full, 20},
        {Empty, 349}, {Mixed, 3}, {Full, 33088}},
       {0xe0000000, 0x0000fff0, 0x00000780, 0xf0000000},
       34816};
    const UnicodeSet t_Set 
      {{{Empty, 141}, {Mixed, 1}, {Full, 2}, {Empty, 1582}, {Mixed, 2},
        {Empty, 33088}},
       {0xffffff00, 0xfffff800, 0x0fffffff},
       34816};
    const UnicodeSet v_Set 
      {{{Empty, 139}, {Full, 2}, {Mixed, 1}, {Empty, 1583}, {Mixed, 2},
        {Empty, 33089}},
       {0x000000ff, 0xffff0000, 0x0000007f},
       34816};
    const EnumeratedPropertyObject property_object
      {hst,
       HST::value_names,
       HST::aliases_only_map,
       {l_Set, lv_Set, lvt_Set, na_Set, t_Set, v_Set
       }};
  }
}

#endif
