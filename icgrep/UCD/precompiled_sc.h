#ifndef UCD_PRECOMPILED_SC_H
#define UCD_PRECOMPILED_SC_H
/*
 *  Copyright (c) 2015 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by generate_UCD_property_functions.py - manual edits may be lost.
 */

#include "pablo/pablo_compiler.h"


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\


  struct Struct_sc_Aghb {
  BitBlock cc;
};

  struct Struct_sc_Arab {
  BitBlock cc;
};

  struct Struct_sc_Armi {
  BitBlock cc;
};

  struct Struct_sc_Armn {
  BitBlock cc;
};

  struct Struct_sc_Avst {
  BitBlock cc;
};

  struct Struct_sc_Bali {
  BitBlock cc;
};

  struct Struct_sc_Bamu {
  BitBlock cc;
};

  struct Struct_sc_Bass {
  BitBlock cc;
};

  struct Struct_sc_Batk {
  BitBlock cc;
};

  struct Struct_sc_Beng {
  BitBlock cc;
};

  struct Struct_sc_Bopo {
  BitBlock cc;
};

  struct Struct_sc_Brah {
  BitBlock cc;
};

  struct Struct_sc_Brai {
  BitBlock cc;
};

  struct Struct_sc_Bugi {
  BitBlock cc;
};

  struct Struct_sc_Buhd {
  BitBlock cc;
};

  struct Struct_sc_Cakm {
  BitBlock cc;
};

  struct Struct_sc_Cans {
  BitBlock cc;
};

  struct Struct_sc_Cari {
  BitBlock cc;
};

  struct Struct_sc_Cham {
  BitBlock cc;
};

  struct Struct_sc_Cher {
  BitBlock cc;
};

  struct Struct_sc_Copt {
  BitBlock cc;
};

  struct Struct_sc_Cprt {
  BitBlock cc;
};

  struct Struct_sc_Cyrl {
  BitBlock cc;
};

  struct Struct_sc_Deva {
  BitBlock cc;
};

  struct Struct_sc_Dsrt {
  BitBlock cc;
};

  struct Struct_sc_Dupl {
  BitBlock cc;
};

  struct Struct_sc_Egyp {
  BitBlock cc;
};

  struct Struct_sc_Elba {
  BitBlock cc;
};

  struct Struct_sc_Ethi {
  BitBlock cc;
};

  struct Struct_sc_Geor {
  BitBlock cc;
};

  struct Struct_sc_Glag {
  BitBlock cc;
};

  struct Struct_sc_Goth {
  BitBlock cc;
};

  struct Struct_sc_Gran {
  BitBlock cc;
};

  struct Struct_sc_Grek {
  BitBlock cc;
};

  struct Struct_sc_Gujr {
  BitBlock cc;
};

  struct Struct_sc_Guru {
  BitBlock cc;
};

  struct Struct_sc_Hang {
  BitBlock cc;
};

  struct Struct_sc_Hani {
  BitBlock cc;
};

  struct Struct_sc_Hano {
  BitBlock cc;
};

  struct Struct_sc_Hebr {
  BitBlock cc;
};

  struct Struct_sc_Hira {
  BitBlock cc;
};

  struct Struct_sc_Hmng {
  BitBlock cc;
};

  struct Struct_sc_Hrkt {
  BitBlock cc;
};

  struct Struct_sc_Ital {
  BitBlock cc;
};

  struct Struct_sc_Java {
  BitBlock cc;
};

  struct Struct_sc_Kali {
  BitBlock cc;
};

  struct Struct_sc_Kana {
  BitBlock cc;
};

  struct Struct_sc_Khar {
  BitBlock cc;
};

  struct Struct_sc_Khmr {
  BitBlock cc;
};

  struct Struct_sc_Khoj {
  BitBlock cc;
};

  struct Struct_sc_Knda {
  BitBlock cc;
};

  struct Struct_sc_Kthi {
  BitBlock cc;
};

  struct Struct_sc_Lana {
  BitBlock cc;
};

  struct Struct_sc_Laoo {
  BitBlock cc;
};

  struct Struct_sc_Latn {
  BitBlock cc;
};

  struct Struct_sc_Lepc {
  BitBlock cc;
};

  struct Struct_sc_Limb {
  BitBlock cc;
};

  struct Struct_sc_Lina {
  BitBlock cc;
};

  struct Struct_sc_Linb {
  BitBlock cc;
};

  struct Struct_sc_Lisu {
  BitBlock cc;
};

  struct Struct_sc_Lyci {
  BitBlock cc;
};

  struct Struct_sc_Lydi {
  BitBlock cc;
};

  struct Struct_sc_Mahj {
  BitBlock cc;
};

  struct Struct_sc_Mand {
  BitBlock cc;
};

  struct Struct_sc_Mani {
  BitBlock cc;
};

  struct Struct_sc_Mend {
  BitBlock cc;
};

  struct Struct_sc_Merc {
  BitBlock cc;
};

  struct Struct_sc_Mero {
  BitBlock cc;
};

  struct Struct_sc_Mlym {
  BitBlock cc;
};

  struct Struct_sc_Modi {
  BitBlock cc;
};

  struct Struct_sc_Mong {
  BitBlock cc;
};

  struct Struct_sc_Mroo {
  BitBlock cc;
};

  struct Struct_sc_Mtei {
  BitBlock cc;
};

  struct Struct_sc_Mymr {
  BitBlock cc;
};

  struct Struct_sc_Narb {
  BitBlock cc;
};

  struct Struct_sc_Nbat {
  BitBlock cc;
};

  struct Struct_sc_Nkoo {
  BitBlock cc;
};

  struct Struct_sc_Ogam {
  BitBlock cc;
};

  struct Struct_sc_Olck {
  BitBlock cc;
};

  struct Struct_sc_Orkh {
  BitBlock cc;
};

  struct Struct_sc_Orya {
  BitBlock cc;
};

  struct Struct_sc_Osma {
  BitBlock cc;
};

  struct Struct_sc_Palm {
  BitBlock cc;
};

  struct Struct_sc_Pauc {
  BitBlock cc;
};

  struct Struct_sc_Perm {
  BitBlock cc;
};

  struct Struct_sc_Phag {
  BitBlock cc;
};

  struct Struct_sc_Phli {
  BitBlock cc;
};

  struct Struct_sc_Phlp {
  BitBlock cc;
};

  struct Struct_sc_Phnx {
  BitBlock cc;
};

  struct Struct_sc_Plrd {
  BitBlock cc;
};

  struct Struct_sc_Prti {
  BitBlock cc;
};

  struct Struct_sc_Rjng {
  BitBlock cc;
};

  struct Struct_sc_Runr {
  BitBlock cc;
};

  struct Struct_sc_Samr {
  BitBlock cc;
};

  struct Struct_sc_Sarb {
  BitBlock cc;
};

  struct Struct_sc_Saur {
  BitBlock cc;
};

  struct Struct_sc_Shaw {
  BitBlock cc;
};

  struct Struct_sc_Shrd {
  BitBlock cc;
};

  struct Struct_sc_Sidd {
  BitBlock cc;
};

  struct Struct_sc_Sind {
  BitBlock cc;
};

  struct Struct_sc_Sinh {
  BitBlock cc;
};

  struct Struct_sc_Sora {
  BitBlock cc;
};

  struct Struct_sc_Sund {
  BitBlock cc;
};

  struct Struct_sc_Sylo {
  BitBlock cc;
};

  struct Struct_sc_Syrc {
  BitBlock cc;
};

  struct Struct_sc_Tagb {
  BitBlock cc;
};

  struct Struct_sc_Takr {
  BitBlock cc;
};

  struct Struct_sc_Tale {
  BitBlock cc;
};

  struct Struct_sc_Talu {
  BitBlock cc;
};

  struct Struct_sc_Taml {
  BitBlock cc;
};

  struct Struct_sc_Tavt {
  BitBlock cc;
};

  struct Struct_sc_Telu {
  BitBlock cc;
};

  struct Struct_sc_Tfng {
  BitBlock cc;
};

  struct Struct_sc_Tglg {
  BitBlock cc;
};

  struct Struct_sc_Thaa {
  BitBlock cc;
};

  struct Struct_sc_Thai {
  BitBlock cc;
};

  struct Struct_sc_Tibt {
  BitBlock cc;
};

  struct Struct_sc_Tirh {
  BitBlock cc;
};

  struct Struct_sc_Ugar {
  BitBlock cc;
};

  struct Struct_sc_Vaii {
  BitBlock cc;
};

  struct Struct_sc_Wara {
  BitBlock cc;
};

  struct Struct_sc_Xpeo {
  BitBlock cc;
};

  struct Struct_sc_Xsux {
  BitBlock cc;
};

  struct Struct_sc_Yiii {
  BitBlock cc;
};

  struct Struct_sc_Zinh {
  BitBlock cc;
};

  struct Struct_sc_Zyyy {
  BitBlock cc;
};

  struct Struct_sc_Zzzz {
  BitBlock cc;
};

  struct Property_sc_Aghb {
  Property_sc_Aghb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Aghb & struct_sc_Aghb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_94, r10000_10ffff_tmp10, sequence_f0_90_94;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_b0_bf;
		BitBlock sequence_f0_90_94_adv, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, byte_95, sequence_f0_90_95, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_range_80_a3, sequence_f0_90_95_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock byte_af, r10000_10ffff_tmp22;




        struct_sc_Aghb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_94 = simd_and(r10000_10ffff_tmp10, byte_94);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(2), sequence_f0_90_94_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_94_adv, byte_range_b0_bf);
            struct_sc_Aghb.cc = simd_or(struct_sc_Aghb.cc, r10000_10ffff_tmp11);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp12);
            byte_95 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp13);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp14);
            byte_range_80_a3 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp15);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(3), sequence_f0_90_95_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_95_adv, byte_range_80_a3);
            struct_sc_Aghb.cc = simd_or(struct_sc_Aghb.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            byte_af = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_95_adv, byte_af);
            struct_sc_Aghb.cc = simd_or(struct_sc_Aghb.cc, r10000_10ffff_tmp22);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Glag {
  Property_sc_Glag() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Glag & struct_sc_Glag) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_b0, r2000_2fff_tmp4, sequence_e2_b0;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_80_ae;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp10, byte_range_b0_bf;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_b1;
		BitBlock sequence_e2_b1, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_range_80_9e;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp16;




        struct_sc_Glag.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_b0 = simd_and(r2000_2fff_tmp4, byte_b0);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_3, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, r2000_2fff_tmp8);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(2), sequence_e2_b0_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_sc_Glag.cc = simd_or(struct_sc_Glag.cc, r2000_2fff_tmp10);
                  byte_range_b0_bf = r2000_2fff_tmp2;
                  r2000_2fff_tmp11 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_sc_Glag.cc = simd_or(struct_sc_Glag.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, r800_ffff_tmp1);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp13);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp14 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_3, r2000_2fff_tmp7);
                  byte_range_80_9e = simd_andc(r2000_2fff_tmp14, r2000_2fff_tmp15);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(3), sequence_e2_b1_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_b1_adv, byte_range_80_9e);
                  struct_sc_Glag.cc = simd_or(struct_sc_Glag.cc, r2000_2fff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Kthi {
  Property_sc_Kthi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Kthi & struct_sc_Kthi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_82;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_82, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_83, sequence_f0_91_83, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_range_80_81, sequence_f0_91_83_adv;
		BitBlock r10000_10ffff_tmp21;




        struct_sc_Kthi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_82 = simd_and(r10000_10ffff_tmp14, byte_82);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(2), sequence_f0_91_82_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_82_adv, byte_range_80_bf);
            struct_sc_Kthi.cc = simd_or(struct_sc_Kthi.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp19 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp20 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp20);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(3), sequence_f0_91_83_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
            struct_sc_Kthi.cc = simd_or(struct_sc_Kthi.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mahj {
  Property_sc_Mahj() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mahj & struct_sc_Mahj) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_85;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_85, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_range_90_b6, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp21;




        struct_sc_Mahj.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_85 = simd_and(r10000_10ffff_tmp14, byte_85);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_not(r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp19), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(2), sequence_f0_91_85_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_85_adv, byte_range_90_b6);
            struct_sc_Mahj.cc = simd_or(struct_sc_Mahj.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Orya {
  Property_sc_Orya() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Orya & struct_sc_Orya) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_ac, r800_fff_tmp4;
		BitBlock sequence_e0_ac, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, byte_range_81_83, sequence_e0_ac_adv, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, byte_range_85_8c, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, byte_range_8f_90, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_range_93_a8, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock byte_range_aa_b0, r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, byte_range_b2_b3, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, byte_range_b5_b9, r800_fff_tmp37, byte_range_bc_bf;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, byte_ad;
		BitBlock sequence_e0_ad, r800_fff_tmp41, byte_range_80_84, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock byte_range_87_88, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, byte_range_8b_8d, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, r800_fff_tmp53, byte_range_96_97, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, byte_range_9c_9d, r800_fff_tmp56, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60, byte_range_9f_a3;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64;
		BitBlock r800_fff_tmp65, byte_range_a6_b7, r800_fff_tmp66;




        struct_sc_Orya.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_ac = simd_and(r800_fff_tmp4, byte_ac);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_andc(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp7, r800_ffff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(2), sequence_e0_ac_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_ac_adv, byte_range_81_83);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp8);
                  r800_fff_tmp9 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp10 = simd_xor(basis_bits.bit_4, r800_fff_tmp9);
                  byte_range_85_8c = simd_and(r800_fff_tmp6, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_and(sequence_e0_ac_adv, byte_range_85_8c);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp13 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp2, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp13), simd_andc(r800_fff_tmp15, basis_bits.bit_3));
                  byte_range_8f_90 = simd_and(r800_fff_tmp12, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(sequence_e0_ac_adv, byte_range_8f_90);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_4, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_3, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_not(r800_fff_tmp20);
                  r800_fff_tmp22 = simd_or(r800_ffff_tmp1, r800_fff_tmp14);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_3, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp21), simd_andc(r800_fff_tmp23, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_ac_adv, byte_range_93_a8);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_4, r800_fff_tmp27);
                  r800_fff_tmp29 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp13), simd_andc(r800_fff_tmp28, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp26, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(sequence_e0_ac_adv, byte_range_aa_b0);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_and(r800_ffff_tmp5, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp32, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(sequence_e0_ac_adv, byte_range_b2_b3);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_not(r800_fff_tmp27);
                  r800_fff_tmp36 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp35), simd_andc(r800_fff_tmp9, basis_bits.bit_4));
                  byte_range_b5_b9 = simd_and(r800_fff_tmp32, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_ac_adv, byte_range_b5_b9);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp37);
                  byte_range_bc_bf = simd_and(r800_fff_tmp32, r800_fff_tmp2);
                  r800_fff_tmp38 = simd_and(sequence_e0_ac_adv, byte_range_bc_bf);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp40 = simd_and(r800_fff_tmp2, r800_fff_tmp39);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp6, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r800_fff_tmp41, r800_fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(3), sequence_e0_ad_adv));
                  r800_fff_tmp42 = simd_and(sequence_e0_ad_adv, byte_range_80_84);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_not(r800_fff_tmp18);
                  r800_fff_tmp44 = simd_and(basis_bits.bit_5, r800_fff_tmp14);
                  r800_fff_tmp45 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp43), simd_andc(r800_fff_tmp44, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp6, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_ad_adv, byte_range_87_88);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp6, basis_bits.bit_4);
                  r800_fff_tmp48 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp49 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp48), simd_andc(r800_fff_tmp14, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r800_fff_tmp47, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_and(sequence_e0_ad_adv, byte_range_8b_8d);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp52 = simd_and(r800_ffff_tmp5, r800_fff_tmp51);
                  r800_fff_tmp53 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r800_fff_tmp52, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_ad_adv, byte_range_96_97);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_andc(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp52, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(sequence_e0_ad_adv, byte_range_9c_9d);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp58 = simd_not(r800_fff_tmp57);
                  r800_fff_tmp59 = simd_and(basis_bits.bit_3, r800_fff_tmp15);
                  r800_fff_tmp60 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp58), simd_andc(r800_fff_tmp59, basis_bits.bit_2));
                  byte_range_9f_a3 = simd_and(r800_ffff_tmp5, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(sequence_e0_ad_adv, byte_range_9f_a3);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp63 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp64 = simd_or(basis_bits.bit_4, r800_fff_tmp63);
                  r800_fff_tmp65 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp62), simd_andc(r800_fff_tmp64, basis_bits.bit_3));
                  byte_range_a6_b7 = simd_and(r800_fff_tmp26, r800_fff_tmp65);
                  r800_fff_tmp66 = simd_and(sequence_e0_ad_adv, byte_range_a6_b7);
                  struct_sc_Orya.cc = simd_or(struct_sc_Orya.cc, r800_fff_tmp66);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Bass {
  Property_sc_Bass() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Bass & struct_sc_Bass) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_ab, r10000_10ffff_tmp16, sequence_f0_96_ab;
		BitBlock byte_f0_adv, sequence_f0_96_adv, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_90_ad, sequence_f0_96_ab_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, byte_range_b0_b5, r10000_10ffff_tmp26;




        struct_sc_Bass.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_ab = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp16));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp16, byte_ab);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp16;
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_not(r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp21);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(2), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_96_ab_adv, byte_range_90_ad);
            struct_sc_Bass.cc = simd_or(struct_sc_Bass.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp23, basis_bits.bit_4);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_b0_b5 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b5);
            struct_sc_Bass.cc = simd_or(struct_sc_Bass.cc, r10000_10ffff_tmp26);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Goth {
  Property_sc_Goth() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Goth & struct_sc_Goth) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8c;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_8c, byte_f0_adv;
		BitBlock sequence_f0_90_adv, byte_range_b0_bf, sequence_f0_90_8c_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock byte_8d, sequence_f0_90_8d, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_8a, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp19;




        struct_sc_Goth.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_8c = simd_and(r10000_10ffff_tmp12, byte_8c);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(2), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_8c_adv, byte_range_b0_bf);
            struct_sc_Goth.cc = simd_or(struct_sc_Goth.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp14);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp17);
            byte_range_80_8a = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(3), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_8d_adv, byte_range_80_8a);
            struct_sc_Goth.cc = simd_or(struct_sc_Goth.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Olck {
  Property_sc_Olck() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Olck & struct_sc_Olck) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b1, r1000_1fff_tmp3;
		BitBlock sequence_e1_b1, byte_e1_adv, r1000_1fff_tmp4, byte_range_90_bf;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp5;




        struct_sc_Olck.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_b1 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_b1 = simd_and(r1000_1fff_tmp3, byte_b1);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(2), sequence_e1_b1_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_b1_adv, byte_range_90_bf);
                  struct_sc_Olck.cc = simd_or(struct_sc_Olck.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Shaw {
  Property_sc_Shaw() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Shaw & struct_sc_Shaw) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_91, r10000_10ffff_tmp10, sequence_f0_90_91;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp11;
		BitBlock byte_range_90_bf, sequence_f0_90_91_adv, r10000_10ffff_tmp12;




        struct_sc_Shaw.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_91 = simd_and(r10000_10ffff_tmp10, byte_91);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(2), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_90_bf);
            struct_sc_Shaw.cc = simd_or(struct_sc_Shaw.cc, r10000_10ffff_tmp12);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Phag {
  Property_sc_Phag() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Phag & struct_sc_Phag) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a1;
		BitBlock ra000_ffff_tmp9, sequence_ea_a1, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_range_80_b7, sequence_ea_a1_adv;
		BitBlock ra000_ffff_tmp12;




        struct_sc_Phag.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp6);
              byte_a1 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a1 = simd_and(ra000_ffff_tmp9, byte_a1);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_2, ra000_ffff_tmp10);
              byte_range_80_b7 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(1), sequence_ea_a1_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_a1_adv, byte_range_80_b7);
              struct_sc_Phag.cc = simd_or(struct_sc_Phag.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_sc_Java {
  Property_sc_Java() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Java & struct_sc_Java) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a6, ra000_ffff_tmp8;
		BitBlock sequence_ea_a6, byte_ea_adv, byte_range_80_bf, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_a7, sequence_ea_a7, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, byte_range_80_8d;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, byte_range_90_99;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock byte_range_9e_9f, ra000_ffff_tmp24;




        struct_sc_Java.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a6 = simd_and(ra000_ffff_tmp8, byte_a6);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(1), sequence_ea_a6_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a6_adv, byte_range_80_bf);
              struct_sc_Java.cc = simd_or(struct_sc_Java.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp11);
              byte_a7 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp14 = simd_andc(byte_range_80_bf, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_4, ra000_ffff_tmp15);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp16);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(2), sequence_ea_a7_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_a7_adv, byte_range_80_8d);
              struct_sc_Java.cc = simd_or(struct_sc_Java.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp19 = simd_and(byte_range_80_bf, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp2);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp19, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(sequence_ea_a7_adv, byte_range_90_99);
              struct_sc_Java.cc = simd_or(struct_sc_Java.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp22, basis_bits.bit_6);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ea_a7_adv, byte_range_9e_9f);
              struct_sc_Java.cc = simd_or(struct_sc_Java.cc, ra000_ffff_tmp24);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Narb {
  Property_sc_Narb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Narb & struct_sc_Narb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_aa, r10000_10ffff_tmp13, sequence_f0_90_aa;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_80_9f;
		BitBlock sequence_f0_90_aa_adv, r10000_10ffff_tmp14;




        struct_sc_Narb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_aa = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_aa = simd_and(r10000_10ffff_tmp13, byte_aa);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(2), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_aa_adv, byte_range_80_9f);
            struct_sc_Narb.cc = simd_or(struct_sc_Narb.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Zyyy {
  Property_sc_Zyyy() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Zyyy & struct_sc_Zyyy) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, cc_range_0_7f_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock byte_range_80_a9, byte_c2_adv, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, byte_range_ab_b9, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, byte_range_bb_bf, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, byte_c3, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, byte_97, byte_c3_adv, r80_7ff_tmp22, byte_b7;
		BitBlock r80_7ff_tmp23, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, byte_ca, byte_range_b0_bf;
		BitBlock r100_2ff_tmp3, r100_2ff_tmp4, r100_2ff_tmp5, byte_cb, r100_2ff_tmp6;
		BitBlock r2b0_2ff_tmp1, r2b0_2ff_tmp2, byte_range_b9_bf, byte_ca_adv;
		BitBlock r2b0_2ff_tmp3, byte_range_80_9f, byte_cb_adv, r2b0_2ff_tmp4;
		BitBlock r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7, r2b0_2ff_tmp8;
		BitBlock r2b0_2ff_tmp9, byte_range_a5_a9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, byte_range_ac_bf, r2b0_2ff_tmp13, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock r100_3ff_tmp7, byte_range_ce_cf, r100_3ff_tmp8, r370_3ff_tmp1;
		BitBlock byte_b4, byte_cd_adv, r370_3ff_tmp2, r370_3ff_tmp3, byte_be;
		BitBlock r370_3ff_tmp4, byte_ce, r370_3ff_tmp5, r370_3ff_tmp6, byte_85;
		BitBlock byte_ce_adv, r370_3ff_tmp7, byte_87, r370_3ff_tmp8, r80_7ff_tmp24;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2;
		BitBlock byte_d6, byte_range_80_8f, r400_5ff_tmp3, r400_5ff_tmp4;
		BitBlock r400_5ff_tmp5, r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3;
		BitBlock r500_58f_tmp4, r500_58f_tmp5, byte_d5, r500_58f_tmp6, r500_58f_tmp7;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_89, byte_d6_adv, r530_58f_tmp3;
		BitBlock r80_7ff_tmp25, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4, byte_d8_adv;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7, byte_8c, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, byte_range_9b_9c;
		BitBlock r600_6ff_tmp12, r600_6ff_tmp13, byte_9f, r600_6ff_tmp14;
		BitBlock r600_6ff_tmp15, byte_d9, byte_80, byte_d9_adv, r600_6ff_tmp16;
		BitBlock r600_6ff_tmp17, r600_6ff_tmp18, byte_range_a0_a9, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, byte_db, r600_6ff_tmp21, byte_9d, byte_db_adv;
		BitBlock r600_6ff_tmp22, r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a5;
		BitBlock r800_fff_tmp4, sequence_e0_a5, byte_e0_adv, r800_fff_tmp5;
		BitBlock byte_range_a4_a5, sequence_e0_a5_adv, r800_fff_tmp6, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, byte_b8, sequence_e0_b8, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, byte_bf, sequence_e0_b8_adv, r800_fff_tmp12;
		BitBlock sequence_e0_bf, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, byte_range_95_98;
		BitBlock sequence_e0_bf_adv, r800_fff_tmp19, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_83, r1000_1fff_tmp3;
		BitBlock sequence_e1_83, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, byte_bb, sequence_e1_83_adv, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, r1000_1fff_tmp9, byte_9b, sequence_e1_9b;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_ab_ad, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp17, r1000_1fff_tmp18, byte_range_b5_b6;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp19, byte_a0, sequence_e1_a0;
		BitBlock r1000_1fff_tmp20, byte_range_82_83, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23, byte_b3;
		BitBlock sequence_e1_b3, byte_93, sequence_e1_b3_adv, r1000_1fff_tmp24;
		BitBlock byte_a1, r1000_1fff_tmp25, r1000_1fff_tmp26, byte_range_a9_ac;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, byte_range_ae_b3;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, sequence_e2_80, byte_e2_adv;
		BitBlock r2000_2fff_tmp3, byte_range_80_8b, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock byte_range_8e_bf, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock byte_81, sequence_e2_81, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, byte_range_80_a4;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, byte_range_a6_b0, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_range_b4_be, r2000_2fff_tmp26, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp27, byte_range_80_8e;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock byte_range_a0_bd, r2000_2fff_tmp30, byte_84, sequence_e2_84;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, byte_range_80_a5;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp33, r2000_2fff_tmp34;
		BitBlock r2000_2fff_tmp35, r2000_2fff_tmp36, r2000_2fff_tmp37;
		BitBlock byte_range_a7_a9, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, byte_range_ac_b1, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, byte_range_b3_bf, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, sequence_e2_85, r2000_2fff_tmp45, byte_range_80_8d;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, byte_range_8f_9f;
		BitBlock r2000_2fff_tmp50, r2000_2fff_tmp51, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, sequence_e2_86_adv;
		BitBlock r2000_2fff_tmp54, byte_range_90_bf, r2000_2fff_tmp55;
		BitBlock r2000_2fff_tmp56, byte_range_87_8e, byte_e2_byte_range_87_8e;
		BitBlock byte_range_80_bf, r2000_2fff_tmp57, byte_e2_byte_range_87_8e_sfx;
		BitBlock r2000_2fff_tmp58, byte_8f, sequence_e2_8f, r2000_2fff_tmp59;
		BitBlock byte_range_80_ba, sequence_e2_8f_adv, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, byte_90, sequence_e2_90;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock byte_range_80_a6, sequence_e2_90_adv, r2000_2fff_tmp66, byte_91;
		BitBlock sequence_e2_91, byte_range_80_8a, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp67, byte_range_a0_bf, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, byte_range_92_9f, byte_e2_byte_range_92_9f;
		BitBlock r2000_2fff_tmp70, byte_e2_byte_range_92_9f_sfx, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, byte_range_a4_ac;
		BitBlock byte_e2_byte_range_a4_ac, r2000_2fff_tmp74;
		BitBlock byte_e2_byte_range_a4_ac_sfx, r2000_2fff_tmp75, byte_ad;
		BitBlock sequence_e2_ad, r2000_2fff_tmp76, r2000_2fff_tmp77, byte_range_80_b3;
		BitBlock sequence_e2_ad_adv, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock byte_range_b6_bf, r2000_2fff_tmp80, r2000_2fff_tmp81, byte_ae;
		BitBlock sequence_e2_ae, r2000_2fff_tmp82, r2000_2fff_tmp83, byte_range_80_95;
		BitBlock sequence_e2_ae_adv, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock byte_range_98_b9, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock byte_range_bd_bf, r2000_2fff_tmp91, byte_af, sequence_e2_af;
		BitBlock r2000_2fff_tmp92, r2000_2fff_tmp93, byte_range_80_88;
		BitBlock sequence_e2_af_adv, r2000_2fff_tmp94, r2000_2fff_tmp95;
		BitBlock byte_range_8a_91, r2000_2fff_tmp96, r2000_2fff_tmp97, sequence_e2_b8;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp98, byte_b9, sequence_e2_b9;
		BitBlock r2000_2fff_tmp99, byte_range_80_82, sequence_e2_b9_adv;
		BitBlock r2000_2fff_tmp100, sequence_e2_bf, byte_range_b0_bb;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp101, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_range_80_84;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, byte_range_88_a0, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, byte_range_b0_b7, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_bc_bf, r3000_4dff_tmp14, sequence_e3_82;
		BitBlock r3000_4dff_tmp15, r3000_4dff_tmp16, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, r3000_4dff_tmp19, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp20, r3000_4dff_tmp21, r3000_4dff_tmp22, sequence_e3_83;
		BitBlock r3000_4dff_tmp23, byte_range_bb_bc, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp24, sequence_e3_86, byte_range_90_9f;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp25, r3000_4dff_tmp26;
		BitBlock sequence_e3_87, r3000_4dff_tmp27, r3000_4dff_tmp28, byte_range_80_a3;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, byte_88, sequence_e3_88, sequence_e3_88_adv;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, r3000_4dff_tmp34, sequence_e3_89;
		BitBlock sequence_e3_89_adv, r3000_4dff_tmp35, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, byte_8a, sequence_e3_8a;
		BitBlock sequence_e3_8a_adv, r3000_4dff_tmp39, r3000_4dff_tmp40;
		BitBlock r3000_4dff_tmp41, byte_8b, sequence_e3_8b, sequence_e3_8b_adv;
		BitBlock r3000_4dff_tmp42, r3000_4dff_tmp43, byte_8d, sequence_e3_8d;
		BitBlock r3000_4dff_tmp44, byte_range_98_bf, sequence_e3_8d_adv;
		BitBlock r3000_4dff_tmp45, r3000_4dff_tmp46, byte_range_8e_8f;
		BitBlock byte_e3_byte_range_8e_8f, r3000_4dff_tmp47;
		BitBlock byte_e3_byte_range_8e_8f_sfx, r3000_4dff_tmp48, sequence_e4_b7;
		BitBlock byte_e4_adv, sequence_e4_b7_adv, r3000_4dff_tmp49, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, sequence_ea_9c;
		BitBlock byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock byte_range_80_a1, sequence_ea_9c_adv, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, byte_9e, sequence_ea_9e, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, byte_range_88_8a, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, sequence_ea_a0, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_b0_b9, sequence_ea_a0_adv;
		BitBlock ra000_ffff_tmp20, byte_a4, sequence_ea_a4, sequence_ea_a4_adv;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_a7, sequence_ea_a7;
		BitBlock ra000_ffff_tmp23, sequence_ea_a7_adv, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, sequence_ea_ad, ra000_ffff_tmp27;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp28, byte_ef, ra000_ffff_tmp29;
		BitBlock sequence_ef_b4, byte_ef_adv, ra000_ffff_tmp30, byte_range_be_bf;
		BitBlock sequence_ef_b4_adv, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock sequence_ef_b8, byte_range_90_99, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, ra000_ffff_tmp35, sequence_ef_b9;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock byte_range_80_92, sequence_ef_b9_adv, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock byte_range_94_a6, ra000_ffff_tmp46, byte_range_a8_ab;
		BitBlock ra000_ffff_tmp47, sequence_ef_bb, sequence_ef_bb_adv;
		BitBlock ra000_ffff_tmp48, byte_bc, sequence_ef_bc, ra000_ffff_tmp49;
		BitBlock byte_range_81_a0, sequence_ef_bc_adv, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, byte_bd, sequence_ef_bd;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp53, ra000_ffff_tmp54;
		BitBlock ra000_ffff_tmp55, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock ra000_ffff_tmp58, byte_range_9b_a5, ra000_ffff_tmp59, byte_b0;
		BitBlock ra000_ffff_tmp60, sequence_ef_be, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp61, sequence_ef_bf;
		BitBlock ra000_ffff_tmp62, byte_range_a0_a6, sequence_ef_bf_adv;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, byte_range_a8_ae;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock byte_range_b9_bd, ra000_ffff_tmp68, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock sequence_f0_90_84, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp9, sequence_f0_90_84_adv, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_range_87_b3, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_range_b7_bf, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, sequence_f0_90_86, r10000_10ffff_tmp22;
		BitBlock byte_range_90_9b, sequence_f0_90_86_adv, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, sequence_f0_90_87, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock byte_range_90_bc, sequence_f0_90_87_adv, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, sequence_f0_90_8b;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock byte_range_a1_bb, sequence_f0_90_8b_adv, r10000_10ffff_tmp35;
		BitBlock sequence_f0_9b, r10000_10ffff_tmp36, byte_b2, r10000_10ffff_tmp37;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, r10000_10ffff_tmp38;
		BitBlock byte_range_a0_a3, sequence_f0_9b_b2_adv, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp42, sequence_f0_9d_byte_range_80_82;
		BitBlock r10000_10ffff_tmp43, sequence_f0_9d_byte_range_80_82_sfx;
		BitBlock r10000_10ffff_tmp44, r10000_10ffff_tmp45, sequence_f0_9d_83;
		BitBlock r10000_10ffff_tmp46, sequence_f0_9d_adv, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock byte_range_80_b5, sequence_f0_9d_83_adv, r10000_10ffff_tmp51;
		BitBlock sequence_f0_9d_84, r10000_10ffff_tmp52, sequence_f0_9d_84_adv;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, byte_range_a9_bf;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_85_adv, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock byte_range_aa_ba, r10000_10ffff_tmp65, sequence_f0_9d_86;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock byte_range_83_84, sequence_f0_9d_86_adv, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, byte_range_8c_a9, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, byte_range_ae_bf;
		BitBlock r10000_10ffff_tmp77, sequence_f0_9d_87, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, byte_range_80_9d, sequence_f0_9d_87_adv;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, sequence_f0_9d_8c;
		BitBlock sequence_f0_9d_8c_adv, r10000_10ffff_tmp82, sequence_f0_9d_8d;
		BitBlock r10000_10ffff_tmp83, byte_range_80_96, sequence_f0_9d_8d_adv;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock byte_range_a0_b1, r10000_10ffff_tmp87, sequence_f0_9d_90;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock sequence_f0_9d_91, r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock r10000_10ffff_tmp92, byte_range_80_94, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, byte_range_96_bf;
		BitBlock r10000_10ffff_tmp95, byte_92, sequence_f0_9d_92, byte_range_80_9c;
		BitBlock sequence_f0_9d_92_adv, r10000_10ffff_tmp96, r10000_10ffff_tmp97;
		BitBlock r10000_10ffff_tmp98, byte_a2, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, byte_range_a5_a6;
		BitBlock r10000_10ffff_tmp102, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock byte_range_ae_b9, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock sequence_f0_9d_93, byte_range_80_83, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock byte_range_85_bf, r10000_10ffff_tmp116, byte_94, sequence_f0_9d_94;
		BitBlock byte_range_80_85, sequence_f0_9d_94_adv, r10000_10ffff_tmp117;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, byte_range_87_8a;
		BitBlock r10000_10ffff_tmp120, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock byte_range_8d_94, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock r10000_10ffff_tmp125, byte_range_96_9c, r10000_10ffff_tmp126;
		BitBlock r10000_10ffff_tmp127, r10000_10ffff_tmp128, r10000_10ffff_tmp129;
		BitBlock byte_range_9e_b9, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, byte_range_bb_be, r10000_10ffff_tmp133, byte_95;
		BitBlock sequence_f0_9d_95, sequence_f0_9d_95_adv, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, r10000_10ffff_tmp136, r10000_10ffff_tmp137;
		BitBlock byte_range_8a_90, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock byte_range_92_bf, r10000_10ffff_tmp140, r10000_10ffff_tmp141;
		BitBlock r10000_10ffff_tmp142, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp143;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, r10000_10ffff_tmp144, byte_9a;
		BitBlock sequence_f0_9d_9a, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp147, r10000_10ffff_tmp148;
		BitBlock byte_range_a8_bf, r10000_10ffff_tmp149, r10000_10ffff_tmp150;
		BitBlock byte_range_9b_9e, sequence_f0_9d_byte_range_9b_9e;
		BitBlock r10000_10ffff_tmp151, sequence_f0_9d_byte_range_9b_9e_sfx;
		BitBlock r10000_10ffff_tmp152, sequence_f0_9d_9f, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp153, r10000_10ffff_tmp154, r10000_10ffff_tmp155;
		BitBlock sequence_f0_9f, r10000_10ffff_tmp156, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, r10000_10ffff_tmp157, byte_range_80_ab;
		BitBlock sequence_f0_9f_80_adv, r10000_10ffff_tmp158, r10000_10ffff_tmp159;
		BitBlock sequence_f0_9f_81, sequence_f0_9f_81_adv, r10000_10ffff_tmp160;
		BitBlock sequence_f0_9f_82, byte_range_80_93, sequence_f0_9f_82_adv;
		BitBlock r10000_10ffff_tmp161, r10000_10ffff_tmp162, byte_range_a0_ae;
		BitBlock r10000_10ffff_tmp163, r10000_10ffff_tmp164, byte_range_b1_bf;
		BitBlock r10000_10ffff_tmp165, sequence_f0_9f_83, byte_range_81_8f;
		BitBlock sequence_f0_9f_83_adv, r10000_10ffff_tmp166, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, byte_range_91_b5;
		BitBlock r10000_10ffff_tmp170, sequence_f0_9f_84, r10000_10ffff_tmp171;
		BitBlock byte_range_80_8c, sequence_f0_9f_84_adv, r10000_10ffff_tmp172;
		BitBlock r10000_10ffff_tmp173, r10000_10ffff_tmp174, r10000_10ffff_tmp175;
		BitBlock byte_range_90_ae, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock sequence_f0_9f_85, sequence_f0_9f_85_adv, r10000_10ffff_tmp178;
		BitBlock r10000_10ffff_tmp179, sequence_f0_9f_86, byte_range_80_9a;
		BitBlock sequence_f0_9f_86_adv, r10000_10ffff_tmp180, sequence_f0_9f_87;
		BitBlock byte_range_a6_bf, sequence_f0_9f_87_adv, r10000_10ffff_tmp181;
		BitBlock r10000_10ffff_tmp182, sequence_f0_9f_88, byte_range_81_82;
		BitBlock sequence_f0_9f_88_adv, r10000_10ffff_tmp183, r10000_10ffff_tmp184;
		BitBlock r10000_10ffff_tmp185, byte_range_90_ba, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, sequence_f0_9f_89, sequence_f0_9f_89_adv;
		BitBlock r10000_10ffff_tmp188, byte_range_90_91, r10000_10ffff_tmp189;
		BitBlock sequence_f0_9f_8c, r10000_10ffff_tmp190, r10000_10ffff_tmp191;
		BitBlock byte_range_80_ac, sequence_f0_9f_8c_adv, r10000_10ffff_tmp192;
		BitBlock r10000_10ffff_tmp193, sequence_f0_9f_8d, r10000_10ffff_tmp194;
		BitBlock byte_range_80_bd, sequence_f0_9f_8d_adv, r10000_10ffff_tmp195;
		BitBlock r10000_10ffff_tmp196, byte_8e, sequence_f0_9f_8e;
		BitBlock sequence_f0_9f_8e_adv, r10000_10ffff_tmp197, sequence_f0_9f_8f;
		BitBlock sequence_f0_9f_8f_adv, r10000_10ffff_tmp198, r10000_10ffff_tmp199;
		BitBlock r10000_10ffff_tmp200, r10000_10ffff_tmp201, byte_range_94_b7;
		BitBlock r10000_10ffff_tmp202, r10000_10ffff_tmp203, byte_range_90_92;
		BitBlock sequence_f0_9f_byte_range_90_92, r10000_10ffff_tmp204;
		BitBlock sequence_f0_9f_byte_range_90_92_sfx, sequence_f0_9f_93;
		BitBlock r10000_10ffff_tmp205, r10000_10ffff_tmp206, byte_range_80_be;
		BitBlock sequence_f0_9f_93_adv, r10000_10ffff_tmp207, sequence_f0_9f_94;
		BitBlock sequence_f0_9f_94_adv, r10000_10ffff_tmp208, sequence_f0_9f_95;
		BitBlock sequence_f0_9f_95_adv, r10000_10ffff_tmp209, r10000_10ffff_tmp210;
		BitBlock byte_range_90_b9, r10000_10ffff_tmp211, r10000_10ffff_tmp212;
		BitBlock r10000_10ffff_tmp213, byte_96, sequence_f0_9f_96;
		BitBlock r10000_10ffff_tmp214, r10000_10ffff_tmp215, sequence_f0_9f_96_adv;
		BitBlock r10000_10ffff_tmp216, byte_range_a5_bf, r10000_10ffff_tmp217;
		BitBlock r10000_10ffff_tmp218, r10000_10ffff_tmp219, byte_range_97_98;
		BitBlock sequence_f0_9f_byte_range_97_98, r10000_10ffff_tmp220;
		BitBlock sequence_f0_9f_byte_range_97_98_sfx, byte_99, sequence_f0_9f_99;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp221, r10000_10ffff_tmp222;
		BitBlock sequence_f0_9f_9a, sequence_f0_9f_9a_adv, r10000_10ffff_tmp223;
		BitBlock sequence_f0_9f_9b, sequence_f0_9f_9b_adv, r10000_10ffff_tmp224;
		BitBlock byte_range_a0_ac, r10000_10ffff_tmp225, byte_range_b0_b3;
		BitBlock r10000_10ffff_tmp226, sequence_f0_9f_9c, sequence_f0_9f_9c_adv;
		BitBlock r10000_10ffff_tmp227, sequence_f0_9f_9d, r10000_10ffff_tmp228;
		BitBlock sequence_f0_9f_9d_adv, r10000_10ffff_tmp229, sequence_f0_9f_9e;
		BitBlock sequence_f0_9f_9e_adv, r10000_10ffff_tmp230, sequence_f0_9f_9f;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp231, sequence_f0_9f_a0;
		BitBlock sequence_f0_9f_a0_adv, r10000_10ffff_tmp232, r10000_10ffff_tmp233;
		BitBlock sequence_f0_9f_a1, byte_range_80_87, sequence_f0_9f_a1_adv;
		BitBlock r10000_10ffff_tmp234, r10000_10ffff_tmp235, r10000_10ffff_tmp236;
		BitBlock sequence_f0_9f_a2, sequence_f0_9f_a2_adv, r10000_10ffff_tmp237;
		BitBlock r10000_10ffff_tmp238, r10000_10ffff_tmp239, byte_range_90_ad;
		BitBlock r10000_10ffff_tmp240, byte_f3, r10000_10ffff_tmp241, sequence_f3_a0;
		BitBlock r10000_10ffff_tmp242, sequence_f3_a0_80, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_80_adv, r10000_10ffff_tmp243;
		BitBlock r10000_10ffff_tmp244, sequence_f3_a0_81, sequence_f3_a0_81_adv;
		BitBlock r10000_10ffff_tmp245;




        struct_sc_Zyyy.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp2 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(tmp2, tmp3);
        tmp5 = simd_or(tmp1, tmp4);
        tmp6 = simd_and(basis_bits.bit_1, tmp5);
        tmp7 = simd_or(basis_bits.bit_0, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_or(basis_bits.bit_3, tmp4);
        tmp10 = simd_not(tmp9);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_or(basis_bits.bit_5, tmp11);
        tmp13 = simd_and(basis_bits.bit_4, tmp12);
        tmp14 = simd_and(basis_bits.bit_3, tmp13);
        tmp15 = simd_or(simd_and(basis_bits.bit_2, tmp10), simd_andc(tmp14, basis_bits.bit_2));
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_andc(tmp7, tmp16);
        tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp19 = simd_and(tmp8, tmp18);
        tmp20 = simd_and(tmp19, basis_bits.bit_4);
        tmp21 = simd_and(tmp20, tmp12);
        tmp22 = simd_andc(tmp17, tmp21);
        cc_range_0_7f_1 = simd_not(tmp22);
        struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, cc_range_0_7f_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 132))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 11))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp1);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp2);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_4, r80_7ff_tmp5);
            r80_7ff_tmp7 = simd_or(basis_bits.bit_3, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_and(basis_bits.bit_2, r80_7ff_tmp7);
            byte_range_80_a9 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp9 = simd_and(byte_c2_adv, byte_range_80_a9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r80_7ff_tmp9);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
            r80_7ff_tmp11 = simd_not(r80_7ff_tmp6);
            r80_7ff_tmp12 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp11), simd_andc(tmp13, basis_bits.bit_3));
            byte_range_ab_b9 = simd_and(r80_7ff_tmp10, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(byte_c2_adv, byte_range_ab_b9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_and(r80_7ff_tmp4, tmp18);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp14, basis_bits.bit_4);
            byte_range_bb_bf = simd_and(r80_7ff_tmp15, tmp12);
            r80_7ff_tmp16 = simd_and(byte_c2_adv, byte_range_bb_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r80_7ff_tmp16);
            r80_7ff_tmp17 = simd_andc(tmp11, tmp2);
            byte_c3 = simd_and(r80_7ff_tmp1, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp19 = simd_and(r80_7ff_tmp4, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp21 = simd_and(r80_7ff_tmp20, tmp11);
            byte_97 = simd_and(r80_7ff_tmp19, r80_7ff_tmp21);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp22 = simd_and(byte_c3_adv, byte_97);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r80_7ff_tmp22);
            byte_b7 = simd_and(r80_7ff_tmp14, r80_7ff_tmp21);
            r80_7ff_tmp23 = simd_and(byte_c3_adv, byte_b7);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r80_7ff_tmp23);
            byte_range_c4_cf = simd_and(r80_7ff_tmp1, tmp2);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 4))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp1, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_and(r100_2ff_tmp1, r80_7ff_tmp2);
                byte_ca = simd_and(r80_7ff_tmp1, r100_2ff_tmp2);
                byte_range_b0_bf = r80_7ff_tmp14;
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(2), r100_2ff_tmp3));
                r100_2ff_tmp4 = simd_and(r100_2ff_tmp3, byte_range_b0_bf);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp1, tmp11);
                byte_cb = simd_and(r80_7ff_tmp1, r100_2ff_tmp5);
                r100_2ff_tmp6 = simd_or(r100_2ff_tmp4, byte_cb);
                if ((bitblock::any(r100_2ff_tmp6) || carryQ.CarryTest(3, 1))) {
                  r2b0_2ff_tmp1 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                  r2b0_2ff_tmp2 = simd_or(basis_bits.bit_5, tmp3);
                  byte_range_b9_bf = simd_and(r2b0_2ff_tmp1, r2b0_2ff_tmp2);
                  byte_ca_adv = r100_2ff_tmp3;
                  r2b0_2ff_tmp3 = simd_and(byte_ca_adv, byte_range_b9_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2b0_2ff_tmp3);
                  byte_range_80_9f = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(3), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_80_9f);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2b0_2ff_tmp4);
                  r2b0_2ff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r2b0_2ff_tmp6 = simd_and(r80_7ff_tmp4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_not(r80_7ff_tmp5);
                  r2b0_2ff_tmp8 = simd_and(basis_bits.bit_5, tmp3);
                  r2b0_2ff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r2b0_2ff_tmp7), simd_andc(r2b0_2ff_tmp8, basis_bits.bit_4));
                  byte_range_a5_a9 = simd_and(r2b0_2ff_tmp6, r2b0_2ff_tmp9);
                  r2b0_2ff_tmp10 = simd_and(byte_cb_adv, byte_range_a5_a9);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2b0_2ff_tmp10);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp12 = simd_or(basis_bits.bit_3, r2b0_2ff_tmp11);
                  byte_range_ac_bf = simd_and(r80_7ff_tmp10, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp13 = simd_and(byte_cb_adv, byte_range_ac_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2b0_2ff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp1, r100_3ff_tmp4);
              byte_range_b0_bf = r80_7ff_tmp14;
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(4), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp1, r100_3ff_tmp7);
              r100_3ff_tmp8 = simd_or(r100_3ff_tmp6, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp8) || carryQ.CarryTest(5, 1))) {
                r370_3ff_tmp1 = simd_andc(r80_7ff_tmp20, tmp3);
                byte_b4 = simd_and(byte_range_b0_bf, r370_3ff_tmp1);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp2 = simd_and(byte_cd_adv, byte_b4);
                struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r370_3ff_tmp2);
                r370_3ff_tmp3 = simd_and(r100_3ff_tmp2, r80_7ff_tmp2);
                byte_be = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_and(byte_cd_adv, byte_be);
                struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r370_3ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp1, r370_3ff_tmp3);
                r370_3ff_tmp5 = simd_andc(r80_7ff_tmp4, tmp1);
                r370_3ff_tmp6 = simd_and(r80_7ff_tmp20, r100_3ff_tmp3);
                byte_85 = simd_and(r370_3ff_tmp5, r370_3ff_tmp6);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(5), byte_ce_adv));
                r370_3ff_tmp7 = simd_and(byte_ce_adv, byte_85);
                struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r370_3ff_tmp7);
                byte_87 = simd_and(r370_3ff_tmp5, r80_7ff_tmp21);
                r370_3ff_tmp8 = simd_and(byte_ce_adv, byte_87);
                struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r370_3ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 4);
            }
            r80_7ff_tmp24 = simd_and(byte_range_c0_ff, r80_7ff_tmp18);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp24, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(6, 2))) {
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp20, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp24, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp20, r80_7ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp24, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, tmp1);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(6), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(7, 1))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp20, tmp3);
                byte_d4 = simd_and(r80_7ff_tmp24, r500_58f_tmp1);
                byte_range_b0_bf = r80_7ff_tmp14;
                carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(7), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp5 = simd_and(r80_7ff_tmp20, r500_58f_tmp4);
                byte_d5 = simd_and(r80_7ff_tmp24, r500_58f_tmp5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp7 = simd_or(r500_58f_tmp6, r400_5ff_tmp4);
                if (bitblock::any(r500_58f_tmp7)) {
                  r530_58f_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, r500_58f_tmp4);
                  byte_89 = simd_and(byte_range_80_8f, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_89);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(7, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 2);
            }
            r80_7ff_tmp25 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp24, r80_7ff_tmp25);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(8, 3))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp25, tmp3);
              byte_d8 = simd_and(r80_7ff_tmp24, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp4, tmp1);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp20, r600_6ff_tmp3);
              byte_85 = simd_and(r600_6ff_tmp2, r600_6ff_tmp4);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(8), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_85);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp7 = simd_andc(r600_6ff_tmp6, tmp3);
              byte_8c = simd_and(r600_6ff_tmp2, r600_6ff_tmp7);
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_8c);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_and(r80_7ff_tmp19, basis_bits.bit_4);
              r600_6ff_tmp10 = simd_not(tmp3);
              r600_6ff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp10), simd_andc(tmp11, basis_bits.bit_5));
              byte_range_9b_9c = simd_and(r600_6ff_tmp9, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(byte_d8_adv, byte_range_9b_9c);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r600_6ff_tmp6, tmp11);
              byte_9f = simd_and(r80_7ff_tmp19, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_and(byte_d8_adv, byte_9f);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp25, r600_6ff_tmp3);
              byte_d9 = simd_and(r80_7ff_tmp24, r600_6ff_tmp15);
              byte_80 = simd_andc(r600_6ff_tmp2, tmp4);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(9), byte_d9_adv));
              r600_6ff_tmp16 = simd_and(byte_d9_adv, byte_80);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp18 = simd_and(r80_7ff_tmp4, r600_6ff_tmp17);
              byte_range_a0_a9 = simd_andc(r600_6ff_tmp18, r80_7ff_tmp6);
              r600_6ff_tmp19 = simd_and(byte_d9_adv, byte_range_a0_a9);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp19);
              r600_6ff_tmp20 = simd_and(r80_7ff_tmp25, tmp11);
              byte_db = simd_and(r80_7ff_tmp24, r600_6ff_tmp20);
              r600_6ff_tmp21 = simd_and(r600_6ff_tmp6, r600_6ff_tmp3);
              byte_9d = simd_and(r80_7ff_tmp19, r600_6ff_tmp21);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(10), byte_db_adv));
              r600_6ff_tmp22 = simd_and(byte_db_adv, byte_9d);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r600_6ff_tmp22);
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 11);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(11, 59))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp2);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(11), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(12, 42))) {
              r800_4dff_tmp1 = simd_or(tmp2, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(12, 10))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp4);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(12, 4))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp1, r800_fff_tmp2);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_fff_tmp4));
                  sequence_e0_a5 = simd_and(r800_fff_tmp4, byte_a5);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp5);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(13), sequence_e0_a5_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a5_adv, byte_range_a4_a5);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_and(r800_ffff_tmp3, tmp18);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp9 = simd_andc(r800_fff_tmp8, tmp3);
                  byte_b8 = simd_and(r800_fff_tmp7, r800_fff_tmp9);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_and(r800_fff_tmp10, tmp11);
                  byte_bf = simd_and(r800_fff_tmp7, r800_fff_tmp11);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(14), sequence_e0_b8_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_b8_adv, byte_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r800_fff_tmp12);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp3, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_or(basis_bits.bit_5, tmp3);
                  r800_fff_tmp16 = simd_not(r800_fff_tmp15);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_5, tmp3);
                  r800_fff_tmp18 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp16), simd_andc(r800_fff_tmp17, basis_bits.bit_4));
                  byte_range_95_98 = simd_and(r800_fff_tmp14, r800_fff_tmp18);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(15), sequence_e0_bf_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_bf_adv, byte_range_95_98);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r800_fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 4);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp2);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(16, 6))) {
                  r1000_1fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp1);
                  r1000_1fff_tmp2 = simd_andc(tmp11, tmp2);
                  byte_83 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(16), r1000_1fff_tmp3));
                  sequence_e1_83 = simd_and(r1000_1fff_tmp3, byte_83);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp3, tmp18);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp5, tmp11);
                  byte_bb = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(17), sequence_e1_83_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_83_adv, byte_bb);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp8);
                  byte_9b = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp6);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp10, basis_bits.bit_4);
                  r1000_1fff_tmp12 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp12), simd_andc(tmp11, basis_bits.bit_5));
                  byte_range_ab_ad = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(18), sequence_e1_9b_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_andc(r1000_1fff_tmp15, tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp16);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp4, r800_ffff_tmp1);
                  r1000_1fff_tmp18 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(19), sequence_e1_9c_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp19);
                  byte_a0 = simd_andc(r1000_1fff_tmp10, tmp4);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp20 = simd_andc(basis_bits.bit_6, tmp2);
                  byte_range_82_83 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp20);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(20), sequence_e1_a0_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_a0_adv, byte_range_82_83);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_85 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(sequence_e1_a0_adv, byte_85);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp23);
                  byte_b3 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp2);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_93 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp2);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(21), sequence_e1_b3_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b3_adv, byte_93);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp24);
                  byte_a1 = simd_and(r1000_1fff_tmp10, r800_1fff_tmp2);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_b3_adv, byte_a1);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_xor(basis_bits.bit_5, tmp3);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b3_adv, byte_range_a9_ac);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp29 = simd_not(tmp2);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp15, basis_bits.bit_6);
                  r1000_1fff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp29), simd_andc(r1000_1fff_tmp30, basis_bits.bit_3));
                  byte_range_ae_b3 = simd_and(r1000_1fff_tmp28, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_b3_adv, byte_range_ae_b3);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(sequence_e1_b3_adv, byte_range_b5_b6);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r1000_1fff_tmp33);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 6);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 10);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp2);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(22, 32))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp2);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(22, 19))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp4);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(22), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_80_8b = simd_andc(r2000_2fff_tmp1, r2000_2fff_tmp3);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(23), sequence_e2_80_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_80_adv, byte_range_80_8b);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, basis_bits.bit_6);
                  r2000_2fff_tmp6 = simd_or(basis_bits.bit_3, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_2, r2000_2fff_tmp6);
                  byte_range_8e_bf = simd_and(r800_ffff_tmp3, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(sequence_e2_80_adv, byte_range_8e_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp9, tmp2);
                  byte_81 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp10);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_5, tmp3);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_4, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_or(basis_bits.bit_3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_2, r2000_2fff_tmp13);
                  byte_range_80_a4 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp14);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(24), sequence_e2_81_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_81_adv, byte_range_80_a4);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp17 = simd_not(tmp4);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp19 = simd_or(basis_bits.bit_4, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp17), simd_andc(r2000_2fff_tmp19, basis_bits.bit_3));
                  byte_range_a6_b0 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_81_adv, byte_range_a6_b0);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp3, tmp18);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_5, tmp11);
                  r2000_2fff_tmp24 = simd_not(r2000_2fff_tmp23);
                  r2000_2fff_tmp25 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp24), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_be = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_81_adv, byte_range_b4_be);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp26);
                  byte_82 = simd_and(r2000_2fff_tmp1, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_4, r2000_2fff_tmp23);
                  byte_range_80_8e = simd_andc(r2000_2fff_tmp1, r2000_2fff_tmp27);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(25), sequence_e2_82_adv));
                  r2000_2fff_tmp28 = simd_and(sequence_e2_82_adv, byte_range_80_8e);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp28);
                  r2000_2fff_tmp29 = simd_and(basis_bits.bit_3, r2000_2fff_tmp5);
                  byte_range_a0_bd = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_82_adv, byte_range_a0_bd);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp30);
                  byte_84 = simd_and(r2000_2fff_tmp1, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp31 = simd_or(basis_bits.bit_3, r2000_2fff_tmp19);
                  r2000_2fff_tmp32 = simd_and(basis_bits.bit_2, r2000_2fff_tmp31);
                  byte_range_80_a5 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp32);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(26), sequence_e2_84_adv));
                  r2000_2fff_tmp33 = simd_and(sequence_e2_84_adv, byte_range_80_a5);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp35 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp36 = simd_not(r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp36), simd_andc(r2000_2fff_tmp23, basis_bits.bit_4));
                  byte_range_a7_a9 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_and(sequence_e2_84_adv, byte_range_a7_a9);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp38);
                  r2000_2fff_tmp39 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp40 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp39), simd_andc(r2000_2fff_tmp3, basis_bits.bit_3));
                  byte_range_ac_b1 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_and(sequence_e2_84_adv, byte_range_ac_b1);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp41);
                  r2000_2fff_tmp42 = simd_or(basis_bits.bit_4, tmp12);
                  byte_range_b3_bf = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp42);
                  r2000_2fff_tmp43 = simd_and(sequence_e2_84_adv, byte_range_b3_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp9);
                  byte_85 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp44);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp45 = simd_and(basis_bits.bit_4, r2000_2fff_tmp18);
                  byte_range_80_8d = simd_andc(r2000_2fff_tmp1, r2000_2fff_tmp45);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(27), sequence_e2_85_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_85_adv, byte_range_80_8d);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp3, tmp11);
                  r2000_2fff_tmp49 = simd_or(basis_bits.bit_3, r2000_2fff_tmp48);
                  byte_range_8f_9f = simd_and(r2000_2fff_tmp47, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_and(sequence_e2_85_adv, byte_range_8f_9f);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp50);
                  r2000_2fff_tmp51 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp51);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp52 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp52, r2000_2fff_tmp9);
                  byte_89 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp53);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(28), sequence_e2_86_adv));
                  r2000_2fff_tmp54 = simd_and(sequence_e2_86_adv, byte_89);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp54);
                  byte_range_90_bf = simd_and(r800_ffff_tmp3, tmp1);
                  r2000_2fff_tmp55 = simd_and(sequence_e2_86_adv, byte_range_90_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_xor(basis_bits.bit_4, r2000_2fff_tmp23);
                  byte_range_87_8e = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp56);
                  byte_e2_byte_range_87_8e = simd_and(byte_e2_adv, byte_range_87_8e);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_87_8e, carryQ.get_carry_in(29), r2000_2fff_tmp57));
                  byte_e2_byte_range_87_8e_sfx = simd_and(r2000_2fff_tmp57, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, byte_e2_byte_range_87_8e_sfx);
                  r2000_2fff_tmp58 = simd_andc(byte_range_80_bf, tmp1);
                  byte_8f = simd_and(r2000_2fff_tmp58, r2000_2fff_tmp48);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp59 = simd_and(basis_bits.bit_2, tmp14);
                  byte_range_80_ba = simd_andc(byte_range_80_bf, r2000_2fff_tmp59);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(30), sequence_e2_8f_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_8f_adv, byte_range_80_ba);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp60);
                  r2000_2fff_tmp61 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp62 = simd_and(byte_range_80_bf, r2000_2fff_tmp61);
                  byte_90 = simd_andc(r2000_2fff_tmp62, tmp4);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp63 = simd_or(basis_bits.bit_4, r2000_2fff_tmp23);
                  r2000_2fff_tmp64 = simd_or(basis_bits.bit_3, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_and(basis_bits.bit_2, r2000_2fff_tmp64);
                  byte_range_80_a6 = simd_andc(byte_range_80_bf, r2000_2fff_tmp65);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(31), sequence_e2_90_adv));
                  r2000_2fff_tmp66 = simd_and(sequence_e2_90_adv, byte_range_80_a6);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp66);
                  byte_91 = simd_and(r2000_2fff_tmp62, r2000_2fff_tmp10);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp58, tmp13);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(32), sequence_e2_91_adv));
                  r2000_2fff_tmp67 = simd_and(sequence_e2_91_adv, byte_range_80_8a);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp67);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp68);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_4, r2000_2fff_tmp35);
                  byte_range_92_9f = simd_and(r2000_2fff_tmp62, r2000_2fff_tmp69);
                  byte_e2_byte_range_92_9f = simd_and(byte_e2_adv, byte_range_92_9f);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_92_9f, carryQ.get_carry_in(33), r2000_2fff_tmp70));
                  byte_e2_byte_range_92_9f_sfx = simd_and(r2000_2fff_tmp70, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, byte_e2_byte_range_92_9f_sfx);
                  r2000_2fff_tmp71 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp72 = simd_not(r2000_2fff_tmp11);
                  r2000_2fff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp72), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_a4_ac = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp73);
                  byte_e2_byte_range_a4_ac = simd_and(byte_e2_adv, byte_range_a4_ac);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a4_ac, carryQ.get_carry_in(34), r2000_2fff_tmp74));
                  byte_e2_byte_range_a4_ac_sfx = simd_and(r2000_2fff_tmp74, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, byte_e2_byte_range_a4_ac_sfx);
                  r2000_2fff_tmp75 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp9);
                  byte_ad = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp75);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp76 = simd_and(basis_bits.bit_3, tmp2);
                  r2000_2fff_tmp77 = simd_and(basis_bits.bit_2, r2000_2fff_tmp76);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r2000_2fff_tmp77);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(35), sequence_e2_ad_adv));
                  r2000_2fff_tmp78 = simd_and(sequence_e2_ad_adv, byte_range_80_b3);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp78);
                  r2000_2fff_tmp79 = simd_and(byte_range_80_bf, tmp18);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp79, r2000_2fff_tmp19);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_ad_adv, byte_range_b6_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp80);
                  r2000_2fff_tmp81 = simd_and(r2000_2fff_tmp3, r2000_4dff_tmp1);
                  byte_ae = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp81);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp82 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_3, r2000_2fff_tmp19);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp82, r2000_2fff_tmp83);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(36), sequence_e2_ae_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_ae_adv, byte_range_80_95);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp84);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_4, r2000_2fff_tmp35);
                  r2000_2fff_tmp86 = simd_and(basis_bits.bit_3, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_not(r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp87), simd_andc(r800_ffff_tmp4, basis_bits.bit_2));
                  byte_range_98_b9 = simd_and(byte_range_80_bf, r2000_2fff_tmp88);
                  r2000_2fff_tmp89 = simd_and(sequence_e2_ae_adv, byte_range_98_b9);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp89);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp79, r2000_2fff_tmp3);
                  byte_range_bd_bf = simd_and(r2000_2fff_tmp90, tmp3);
                  r2000_2fff_tmp91 = simd_and(sequence_e2_ae_adv, byte_range_bd_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp91);
                  byte_af = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp48);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp92 = simd_or(basis_bits.bit_5, tmp3);
                  r2000_2fff_tmp93 = simd_and(basis_bits.bit_4, r2000_2fff_tmp92);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp58, r2000_2fff_tmp93);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(37), sequence_e2_af_adv));
                  r2000_2fff_tmp94 = simd_and(sequence_e2_af_adv, byte_range_80_88);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp94);
                  r2000_2fff_tmp95 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp39), simd_andc(r2000_2fff_tmp85, basis_bits.bit_3));
                  byte_range_8a_91 = simd_and(r2000_2fff_tmp82, r2000_2fff_tmp95);
                  r2000_2fff_tmp96 = simd_and(sequence_e2_af_adv, byte_range_8a_91);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp96);
                  r2000_2fff_tmp97 = simd_andc(r2000_2fff_tmp52, tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp79, r2000_2fff_tmp97);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(38), sequence_e2_b8_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_b8_adv, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp98);
                  byte_b9 = simd_and(r2000_2fff_tmp79, r2000_2fff_tmp53);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  r2000_2fff_tmp99 = simd_andc(r2000_2fff_tmp58, tmp2);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp99, tmp11);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(39), sequence_e2_b9_adv));
                  r2000_2fff_tmp100 = simd_and(sequence_e2_b9_adv, byte_range_80_82);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp100);
                  byte_bf = simd_and(r2000_2fff_tmp79, r2000_2fff_tmp48);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  byte_range_b0_bb = simd_andc(r2000_2fff_tmp79, r2000_2fff_tmp3);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(40), sequence_e2_bf_adv));
                  r2000_2fff_tmp101 = simd_and(sequence_e2_bf_adv, byte_range_b0_bb);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r2000_2fff_tmp101);
                }
                else {
                  carryQ.CarryDequeueEnqueue(22, 19);
                }
                r2000_4dff_tmp3 = simd_andc(tmp11, tmp2);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(41, 13))) {
                  r3000_4dff_tmp1 = simd_andc(r800_ffff_tmp3, tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp1, tmp4);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(41), r3000_4dff_tmp2));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp2, byte_80);
                  byte_e3_adv = r3000_4dff_tmp2;
                  r3000_4dff_tmp3 = simd_andc(r3000_4dff_tmp1, basis_bits.bit_4);
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_5, tmp3);
                  byte_range_80_84 = simd_andc(r3000_4dff_tmp3, r3000_4dff_tmp4);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(42), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_range_80_84);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp5);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp1, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_86);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r3000_4dff_tmp9 = simd_or(simd_and(basis_bits.bit_2, tmp10), simd_andc(r3000_4dff_tmp8, basis_bits.bit_2));
                  byte_range_88_a0 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, byte_range_88_a0);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp3, tmp18);
                  byte_range_b0_b7 = simd_andc(r3000_4dff_tmp11, basis_bits.bit_4);
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, byte_range_b0_b7);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_bc_bf = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp13);
                  r3000_4dff_tmp14 = simd_and(sequence_e3_80_adv, byte_range_bc_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp14);
                  byte_82 = simd_and(r3000_4dff_tmp1, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp16 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp15);
                  r3000_4dff_tmp17 = simd_and(r3000_4dff_tmp16, basis_bits.bit_4);
                  r3000_4dff_tmp18 = simd_not(tmp3);
                  r3000_4dff_tmp19 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp18), simd_andc(tmp11, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp19);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(43), sequence_e3_82_adv));
                  r3000_4dff_tmp20 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp20);
                  r3000_4dff_tmp21 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r3000_4dff_tmp21, tmp4);
                  r3000_4dff_tmp22 = simd_and(sequence_e3_82_adv, byte_a0);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp22);
                  byte_83 = simd_and(r3000_4dff_tmp1, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp23 = simd_and(r3000_4dff_tmp11, basis_bits.bit_4);
                  byte_range_bb_bc = simd_and(r3000_4dff_tmp23, r3000_4dff_tmp19);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(44), sequence_e3_83_adv));
                  r3000_4dff_tmp24 = simd_and(sequence_e3_83_adv, byte_range_bb_bc);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp24);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  byte_range_90_9f = r3000_4dff_tmp16;
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(45), sequence_e3_86_adv));
                  r3000_4dff_tmp25 = simd_and(sequence_e3_86_adv, byte_range_90_9f);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp25);
                  r3000_4dff_tmp26 = simd_and(r800_ffff_tmp1, tmp11);
                  byte_87 = simd_and(r3000_4dff_tmp1, r3000_4dff_tmp26);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_3, tmp2);
                  r3000_4dff_tmp28 = simd_and(basis_bits.bit_2, r3000_4dff_tmp27);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp28);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(46), sequence_e3_87_adv));
                  r3000_4dff_tmp29 = simd_and(sequence_e3_87_adv, byte_range_80_a3);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp29);
                  r3000_4dff_tmp30 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp31 = simd_andc(r3000_4dff_tmp30, tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp1, r3000_4dff_tmp31);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(47), sequence_e3_88_adv));
                  r3000_4dff_tmp32 = simd_and(sequence_e3_88_adv, byte_range_a0_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp32);
                  r3000_4dff_tmp33 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp34 = simd_and(r3000_4dff_tmp30, r3000_4dff_tmp33);
                  byte_89 = simd_and(r3000_4dff_tmp1, r3000_4dff_tmp34);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(48), sequence_e3_89_adv));
                  r3000_4dff_tmp35 = simd_and(sequence_e3_89_adv, byte_range_80_9f);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp35);
                  r3000_4dff_tmp36 = simd_and(r3000_4dff_tmp13, tmp11);
                  byte_bf = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp36);
                  r3000_4dff_tmp37 = simd_and(sequence_e3_89_adv, byte_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp37);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp30, r2000_4dff_tmp1);
                  byte_8a = simd_and(r3000_4dff_tmp1, r3000_4dff_tmp38);
                  sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(49), sequence_e3_8a_adv));
                  r3000_4dff_tmp39 = simd_and(sequence_e3_8a_adv, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp39);
                  r3000_4dff_tmp40 = simd_andc(byte_range_80_bf, tmp1);
                  r3000_4dff_tmp41 = simd_and(r3000_4dff_tmp30, tmp11);
                  byte_8b = simd_and(r3000_4dff_tmp40, r3000_4dff_tmp41);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  byte_range_80_8f = r3000_4dff_tmp40;
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(50), sequence_e3_8b_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e3_8b_adv, byte_range_80_8f);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp42);
                  r3000_4dff_tmp43 = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp33);
                  byte_8d = simd_and(byte_range_80_8f, r3000_4dff_tmp43);
                  sequence_e3_8d = simd_and(byte_e3_adv, byte_8d);
                  r3000_4dff_tmp44 = simd_or(basis_bits.bit_2, r800_ffff_tmp4);
                  byte_range_98_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp44);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e3_8d, carryQ.get_carry_in(51), sequence_e3_8d_adv));
                  r3000_4dff_tmp45 = simd_and(sequence_e3_8d_adv, byte_range_98_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp45);
                  r3000_4dff_tmp46 = simd_and(r3000_4dff_tmp13, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(byte_range_80_8f, r3000_4dff_tmp46);
                  byte_e3_byte_range_8e_8f = simd_and(byte_e3_adv, byte_range_8e_8f);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8e_8f, carryQ.get_carry_in(52), r3000_4dff_tmp47));
                  byte_e3_byte_range_8e_8f_sfx = simd_and(r3000_4dff_tmp47, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, byte_e3_byte_range_8e_8f_sfx);
                  r3000_4dff_tmp48 = simd_and(byte_range_80_bf, tmp18);
                  byte_b7 = simd_and(r3000_4dff_tmp48, r3000_4dff_tmp26);
                  sequence_e4_b7 = simd_and(r800_ffff_tmp6, byte_b7);
                  byte_e4_adv = r800_ffff_tmp6;
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(53), sequence_e4_b7_adv));
                  r3000_4dff_tmp49 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
                  struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r3000_4dff_tmp49);
                }
                else {
                  carryQ.CarryDequeueEnqueue(41, 13);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 32);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 42);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(54, 16))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp6, tmp3);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(54), ra000_ffff_tmp8));
              sequence_ea_9c = simd_and(ra000_ffff_tmp8, byte_9c);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(tmp2, basis_bits.bit_6);
              ra000_ffff_tmp10 = simd_or(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_2, ra000_ffff_tmp10);
              byte_range_80_a1 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp11);
              carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(55), sequence_ea_9c_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_9c_adv, byte_range_80_a1);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp13);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp14 = simd_andc(r800_ffff_tmp3, tmp1);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp1);
              byte_range_88_8a = simd_andc(ra000_ffff_tmp15, tmp11);
              carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(56), sequence_ea_9e_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_9e_adv, byte_range_88_8a);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp17, tmp4);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp3, tmp18);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_4, r800_ffff_tmp10);
              byte_range_b0_b9 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp19);
              carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(57), sequence_ea_a0_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a0_adv, byte_range_b0_b9);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp20);
              byte_a4 = simd_and(ra000_ffff_tmp17, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              byte_ae = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp13);
              carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(58), sequence_ea_a4_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a4_adv, byte_ae);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(r800_ffff_tmp1, tmp11);
              byte_a7 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp22);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp6, tmp11);
              byte_8f = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp23);
              carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(59), sequence_ea_a7_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_a7_adv, byte_8f);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp25);
              byte_ad = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp26);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, tmp11);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp27);
              carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(60), sequence_ea_ad_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_ad_adv, byte_9b);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp28);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp23);
              byte_b4 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp2);
              carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(61), ra000_ffff_tmp29));
              sequence_ef_b4 = simd_and(ra000_ffff_tmp29, byte_b4);
              byte_ef_adv = ra000_ffff_tmp29;
              ra000_ffff_tmp30 = simd_and(ra000_ffff_tmp6, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp30);
              carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(62), sequence_ef_b4_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ef_b4_adv, byte_range_be_bf);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_andc(ra000_ffff_tmp1, tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp32);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp19);
              carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(63), sequence_ef_b8_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ef_b8_adv, byte_range_90_99);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp33);
              byte_range_b0_bf = ra000_ffff_tmp18;
              ra000_ffff_tmp34 = simd_and(sequence_ef_b8_adv, byte_range_b0_bf);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp25);
              byte_b9 = simd_and(byte_range_b0_bf, ra000_ffff_tmp35);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp36 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp37 = simd_or(tmp2, tmp11);
              ra000_ffff_tmp38 = simd_and(basis_bits.bit_3, ra000_ffff_tmp37);
              byte_range_80_92 = simd_andc(ra000_ffff_tmp36, ra000_ffff_tmp38);
              carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(64), sequence_ef_b9_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ef_b9_adv, byte_range_80_92);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_and(basis_bits.bit_5, tmp11);
              ra000_ffff_tmp41 = simd_or(basis_bits.bit_4, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_or(basis_bits.bit_3, ra000_ffff_tmp41);
              ra000_ffff_tmp43 = simd_not(ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(basis_bits.bit_3, tmp2);
              ra000_ffff_tmp45 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp43), simd_andc(ra000_ffff_tmp44, basis_bits.bit_2));
              byte_range_94_a6 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ef_b9_adv, byte_range_94_a6);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp46);
              byte_range_a8_ab = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp1);
              ra000_ffff_tmp47 = simd_and(sequence_ef_b9_adv, byte_range_a8_ab);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp47);
              byte_bb = simd_and(byte_range_b0_bf, ra000_ffff_tmp27);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              byte_bf = simd_and(byte_range_b0_bf, ra000_ffff_tmp23);
              carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(65), sequence_ef_bb_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ef_bb_adv, byte_bf);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp48);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp7);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp49 = simd_xor(basis_bits.bit_2, tmp9);
              byte_range_81_a0 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp49);
              carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(66), sequence_ef_bc_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ef_bc_adv, byte_range_81_a0);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
              byte_range_bb_bf = simd_and(ra000_ffff_tmp51, tmp12);
              ra000_ffff_tmp52 = simd_and(sequence_ef_bc_adv, byte_range_bb_bf);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp52);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp26);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_80 = simd_andc(ra000_ffff_tmp14, tmp4);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(67), sequence_ef_bd_adv));
              ra000_ffff_tmp53 = simd_and(sequence_ef_bd_adv, byte_80);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp55 = simd_or(basis_bits.bit_4, ra000_ffff_tmp54);
              ra000_ffff_tmp56 = simd_or(basis_bits.bit_3, ra000_ffff_tmp55);
              ra000_ffff_tmp57 = simd_not(ra000_ffff_tmp56);
              ra000_ffff_tmp58 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp57), simd_andc(tmp14, basis_bits.bit_2));
              byte_range_9b_a5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp58);
              ra000_ffff_tmp59 = simd_and(sequence_ef_bd_adv, byte_range_9b_a5);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp59);
              byte_b0 = simd_andc(byte_range_b0_bf, tmp4);
              ra000_ffff_tmp60 = simd_and(sequence_ef_bd_adv, byte_b0);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp60);
              byte_be = simd_and(byte_range_b0_bf, ra000_ffff_tmp13);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp30);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(68), sequence_ef_be_adv));
              ra000_ffff_tmp61 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp61);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp62 = simd_andc(ra000_ffff_tmp17, basis_bits.bit_4);
              byte_range_a0_a6 = simd_andc(ra000_ffff_tmp62, ra000_ffff_tmp40);
              carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(69), sequence_ef_bf_adv));
              ra000_ffff_tmp63 = simd_and(sequence_ef_bf_adv, byte_range_a0_a6);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp63);
              ra000_ffff_tmp64 = simd_and(ra000_ffff_tmp17, basis_bits.bit_4);
              byte_range_a8_ae = simd_andc(ra000_ffff_tmp64, ra000_ffff_tmp40);
              ra000_ffff_tmp65 = simd_and(sequence_ef_bf_adv, byte_range_a8_ae);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp65);
              ra000_ffff_tmp66 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp67 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp66), simd_andc(tmp3, basis_bits.bit_5));
              byte_range_b9_bd = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_and(sequence_ef_bf_adv, byte_range_b9_bd);
              struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, ra000_ffff_tmp68);
            }
            else {
              carryQ.CarryDequeueEnqueue(54, 16);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 59);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp18);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(70, 62))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp4);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp4);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(70), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, tmp1);
            r10000_10ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp7 = simd_andc(r10000_10ffff_tmp6, tmp3);
            byte_84 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(71), r10000_10ffff_tmp8));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp8, byte_84);
            byte_f0_adv = r10000_10ffff_tmp4;
            sequence_f0_90_adv = r10000_10ffff_tmp8;
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp5, tmp2);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp9, tmp11);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(72), sequence_f0_90_84_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_84_adv, byte_range_80_82);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_3, tmp2);
            r10000_10ffff_tmp12 = simd_not(r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_5, tmp11);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp12), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_2));
            byte_range_87_b3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_84_adv, byte_range_87_b3);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp1, tmp18);
            byte_range_b7_bf = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp14);
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_84_adv, byte_range_b7_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            byte_86 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp21);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_90_9b = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp22);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(73), sequence_f0_90_86_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_86_adv, byte_range_90_9b);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp6, tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp24);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp22, tmp3);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_not(r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp27), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_bc = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp28);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(74), sequence_f0_90_87_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp31);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp33 = simd_not(r10000_10ffff_tmp22);
            r10000_10ffff_tmp34 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp33), simd_andc(tmp4, basis_bits.bit_3));
            byte_range_a1_bb = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp34);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(75), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_90_8b_adv, byte_range_a1_bb);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp35);
            byte_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp31);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            r10000_10ffff_tmp36 = simd_andc(r10000_10ffff_tmp20, tmp2);
            byte_b2 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp36);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(76), r10000_10ffff_tmp37));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp37, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp37;
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp38, tmp2);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(77), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_9b_b2_adv, byte_range_a0_a3);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp40);
            byte_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp41);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(78), r10000_10ffff_tmp42));
            sequence_f0_9d_byte_range_80_82 = simd_and(r10000_10ffff_tmp42, byte_range_80_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(79), r10000_10ffff_tmp43));
            sequence_f0_9d_byte_range_80_82_sfx = simd_and(r10000_10ffff_tmp43, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, sequence_f0_9d_byte_range_80_82_sfx);
            r10000_10ffff_tmp44 = simd_andc(byte_range_80_bf, tmp1);
            r10000_10ffff_tmp45 = simd_andc(tmp11, tmp2);
            byte_83 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp45);
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp42, byte_83);
            r10000_10ffff_tmp46 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            sequence_f0_9d_adv = r10000_10ffff_tmp42;
            r10000_10ffff_tmp47 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp48 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp47);
            r10000_10ffff_tmp49 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp49);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp50);
            carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(80), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_9d_83_adv, byte_range_80_b5);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp51);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp52 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp15);
            byte_range_80_a6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp52);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(81), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_9d_84_adv, byte_range_80_a6);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp55 = simd_or(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp56 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp55);
            r10000_10ffff_tmp57 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp56);
            byte_range_a9_bf = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp57);
            r10000_10ffff_tmp58 = simd_and(sequence_f0_9d_84_adv, byte_range_a9_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp58);
            r10000_10ffff_tmp59 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp40);
            byte_85 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp59);
            sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(82), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_9d_85_adv, byte_range_80_a6);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_not(tmp13);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp63 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp61), simd_andc(r10000_10ffff_tmp63, basis_bits.bit_3));
            byte_range_aa_ba = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp64);
            r10000_10ffff_tmp65 = simd_and(sequence_f0_9d_85_adv, byte_range_aa_ba);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp65);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp66 = simd_andc(r10000_10ffff_tmp44, basis_bits.bit_4);
            r10000_10ffff_tmp67 = simd_not(tmp3);
            r10000_10ffff_tmp68 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp67), simd_andc(tmp11, basis_bits.bit_5));
            byte_range_83_84 = simd_and(r10000_10ffff_tmp66, r10000_10ffff_tmp68);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(83), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_9d_86_adv, byte_range_83_84);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp69);
            r10000_10ffff_tmp70 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp63);
            r10000_10ffff_tmp71 = simd_not(r10000_10ffff_tmp70);
            r10000_10ffff_tmp72 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp22);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_2));
            byte_range_8c_a9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(sequence_f0_9d_86_adv, byte_range_8c_a9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp22, basis_bits.bit_6);
            r10000_10ffff_tmp76 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp75);
            byte_range_ae_bf = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp76);
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9d_86_adv, byte_range_ae_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp77);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            r10000_10ffff_tmp78 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp79 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp75);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp79);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(84), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_9d_87_adv, byte_range_80_9d);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp22, tmp3);
            byte_8c = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp81);
            sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(85), sequence_f0_9d_8c_adv));
            r10000_10ffff_tmp82 = simd_and(sequence_f0_9d_8c_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp82);
            byte_8d = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp41);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            r10000_10ffff_tmp83 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp83);
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(86), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_9d_8d_adv, byte_range_80_96);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_or(tmp2, basis_bits.bit_6);
            r10000_10ffff_tmp86 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp85);
            byte_range_a0_b1 = simd_andc(r10000_10ffff_tmp54, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_b1);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp87);
            sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(87), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_andc(r10000_10ffff_tmp40, tmp2);
            byte_91 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp89);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp90 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp91 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp90);
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp91);
            byte_range_80_94 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp92);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(88), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_91_adv, byte_range_80_94);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp49);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp94);
            r10000_10ffff_tmp95 = simd_and(sequence_f0_9d_91_adv, byte_range_96_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp95);
            byte_92 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp36);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            byte_range_80_9c = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp26);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(89), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_9d_92_adv, byte_range_80_9c);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp96);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp75);
            r10000_10ffff_tmp97 = simd_and(sequence_f0_9d_92_adv, byte_range_9e_9f);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp98, r10000_10ffff_tmp36);
            r10000_10ffff_tmp99 = simd_and(sequence_f0_9d_92_adv, byte_a2);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(r10000_10ffff_tmp98, r10000_10ffff_tmp6);
            r10000_10ffff_tmp101 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp100, r10000_10ffff_tmp101);
            r10000_10ffff_tmp102 = simd_and(sequence_f0_9d_92_adv, byte_range_a5_a6);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(r10000_10ffff_tmp98, basis_bits.bit_4);
            r10000_10ffff_tmp104 = simd_xor(basis_bits.bit_5, tmp3);
            byte_range_a9_ac = simd_and(r10000_10ffff_tmp103, r10000_10ffff_tmp104);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_9d_92_adv, byte_range_a9_ac);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp105);
            r10000_10ffff_tmp106 = simd_not(r10000_10ffff_tmp63);
            r10000_10ffff_tmp107 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp106), simd_andc(r10000_10ffff_tmp75, basis_bits.bit_3));
            byte_range_ae_b9 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(sequence_f0_9d_92_adv, byte_range_ae_b9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp108);
            r10000_10ffff_tmp109 = simd_and(byte_range_80_bf, tmp18);
            byte_bb = simd_and(r10000_10ffff_tmp109, r10000_10ffff_tmp31);
            r10000_10ffff_tmp110 = simd_and(sequence_f0_9d_92_adv, byte_bb);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp110);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp109, r10000_10ffff_tmp22);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp111, tmp3);
            r10000_10ffff_tmp112 = simd_and(sequence_f0_9d_92_adv, byte_range_bd_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp112);
            byte_93 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp45);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp44, tmp2);
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(90), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp113 = simd_and(sequence_f0_9d_93_adv, byte_range_80_83);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp113);
            r10000_10ffff_tmp114 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp91);
            r10000_10ffff_tmp115 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp114);
            byte_range_85_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp115);
            r10000_10ffff_tmp116 = simd_and(sequence_f0_9d_93_adv, byte_range_85_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp116);
            byte_94 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp7);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp66, r10000_10ffff_tmp47);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(91), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp117 = simd_and(sequence_f0_9d_94_adv, byte_range_80_85);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp117);
            r10000_10ffff_tmp118 = simd_not(tmp12);
            r10000_10ffff_tmp119 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp118), simd_andc(r10000_10ffff_tmp13, basis_bits.bit_4));
            byte_range_87_8a = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(sequence_f0_9d_94_adv, byte_range_87_8a);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp120);
            r10000_10ffff_tmp121 = simd_not(r10000_10ffff_tmp91);
            r10000_10ffff_tmp122 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp121), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_3));
            byte_range_8d_94 = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp122);
            r10000_10ffff_tmp123 = simd_and(sequence_f0_9d_94_adv, byte_range_8d_94);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_not(r10000_10ffff_tmp90);
            r10000_10ffff_tmp125 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp124), simd_andc(r10000_10ffff_tmp47, basis_bits.bit_4));
            byte_range_96_9c = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_and(sequence_f0_9d_94_adv, byte_range_96_9c);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp126);
            r10000_10ffff_tmp127 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp63);
            r10000_10ffff_tmp128 = simd_not(r10000_10ffff_tmp127);
            r10000_10ffff_tmp129 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp128), simd_andc(r10000_10ffff_tmp79, basis_bits.bit_2));
            byte_range_9e_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp129);
            r10000_10ffff_tmp130 = simd_and(sequence_f0_9d_94_adv, byte_range_9e_b9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp130);
            r10000_10ffff_tmp131 = simd_and(r10000_10ffff_tmp109, basis_bits.bit_4);
            r10000_10ffff_tmp132 = simd_xor(basis_bits.bit_5, tmp11);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp131, r10000_10ffff_tmp132);
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9d_94_adv, byte_range_bb_be);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp133);
            byte_95 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp59);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp66, r10000_10ffff_tmp90);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(92), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_9d_95_adv, byte_range_80_84);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp134);
            r10000_10ffff_tmp135 = simd_and(sequence_f0_9d_95_adv, byte_86);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp135);
            r10000_10ffff_tmp136 = simd_not(tmp4);
            r10000_10ffff_tmp137 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp136), simd_andc(r10000_10ffff_tmp63, basis_bits.bit_3));
            byte_range_8a_90 = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp137);
            r10000_10ffff_tmp138 = simd_and(sequence_f0_9d_95_adv, byte_range_8a_90);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp138);
            r10000_10ffff_tmp139 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp86);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            r10000_10ffff_tmp140 = simd_and(sequence_f0_9d_95_adv, byte_range_92_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp140);
            r10000_10ffff_tmp141 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp142 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp141), simd_andc(r10000_10ffff_tmp47, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp142);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(93), r10000_10ffff_tmp143));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp143, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, sequence_f0_9d_byte_range_96_99_sfx);
            r10000_10ffff_tmp144 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp20);
            byte_9a = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp144);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp145 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp48);
            r10000_10ffff_tmp146 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp145);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp146);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(94), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_9d_9a_adv, byte_range_80_a5);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp148);
            r10000_10ffff_tmp149 = simd_and(sequence_f0_9d_9a_adv, byte_range_a8_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp149);
            r10000_10ffff_tmp150 = simd_and(r10000_10ffff_tmp46, basis_bits.bit_4);
            byte_range_9b_9e = simd_and(r10000_10ffff_tmp150, r10000_10ffff_tmp132);
            sequence_f0_9d_byte_range_9b_9e = simd_and(sequence_f0_9d_adv, byte_range_9b_9e);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_9b_9e, carryQ.get_carry_in(95), r10000_10ffff_tmp151));
            sequence_f0_9d_byte_range_9b_9e_sfx = simd_and(r10000_10ffff_tmp151, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, sequence_f0_9d_byte_range_9b_9e_sfx);
            r10000_10ffff_tmp152 = simd_and(r10000_10ffff_tmp22, tmp11);
            byte_9f = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp152);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_8b = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp22);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(96), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp153 = simd_and(sequence_f0_9d_9f_adv, byte_range_80_8b);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp153);
            r10000_10ffff_tmp154 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp76);
            byte_range_8e_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp154);
            r10000_10ffff_tmp155 = simd_and(sequence_f0_9d_9f_adv, byte_range_8e_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp155);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            byte_80 = simd_andc(r10000_10ffff_tmp44, tmp4);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(97), r10000_10ffff_tmp156));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp156, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp156;
            r10000_10ffff_tmp157 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp72);
            byte_range_80_ab = simd_andc(byte_range_80_bf, r10000_10ffff_tmp157);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(98), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp158 = simd_and(sequence_f0_9f_80_adv, byte_range_80_ab);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp158);
            byte_range_b0_bf = r10000_10ffff_tmp109;
            r10000_10ffff_tmp159 = simd_and(sequence_f0_9f_80_adv, byte_range_b0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp159);
            byte_81 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp89);
            sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(99), sequence_f0_9f_81_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp160);
            byte_82 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp36);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            byte_range_80_93 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp11);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(100), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_9f_82_adv, byte_range_80_93);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp161);
            r10000_10ffff_tmp162 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp13);
            byte_range_a0_ae = simd_andc(r10000_10ffff_tmp98, r10000_10ffff_tmp162);
            r10000_10ffff_tmp163 = simd_and(sequence_f0_9f_82_adv, byte_range_a0_ae);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp163);
            r10000_10ffff_tmp164 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp55);
            byte_range_b1_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp164);
            r10000_10ffff_tmp165 = simd_and(sequence_f0_9f_82_adv, byte_range_b1_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp165);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            byte_range_81_8f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp164);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(101), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp166 = simd_and(sequence_f0_9f_83_adv, byte_range_81_8f);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp166);
            r10000_10ffff_tmp167 = simd_not(r10000_10ffff_tmp49);
            r10000_10ffff_tmp168 = simd_and(basis_bits.bit_3, tmp4);
            r10000_10ffff_tmp169 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp167), simd_andc(r10000_10ffff_tmp168, basis_bits.bit_2));
            byte_range_91_b5 = simd_and(byte_range_80_bf, r10000_10ffff_tmp169);
            r10000_10ffff_tmp170 = simd_and(sequence_f0_9f_83_adv, byte_range_91_b5);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp170);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            r10000_10ffff_tmp171 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp90);
            byte_range_80_8c = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp171);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(102), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp172 = simd_and(sequence_f0_9f_84_adv, byte_range_80_8c);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp172);
            r10000_10ffff_tmp173 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp174 = simd_not(r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp174), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ae = simd_and(byte_range_80_bf, r10000_10ffff_tmp175);
            r10000_10ffff_tmp176 = simd_and(sequence_f0_9f_84_adv, byte_range_90_ae);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp176);
            r10000_10ffff_tmp177 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp177);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(103), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_9f_85_adv, byte_range_80_ab);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp178);
            r10000_10ffff_tmp179 = simd_and(sequence_f0_9f_85_adv, byte_range_b0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp179);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_9a = simd_andc(r10000_10ffff_tmp78, tmp14);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(104), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp180 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp180);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            byte_range_a6_bf = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp145);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(105), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp181 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp181);
            r10000_10ffff_tmp182 = simd_andc(r10000_10ffff_tmp30, tmp3);
            byte_88 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp182);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            byte_range_81_82 = simd_and(byte_range_80_83, r10000_10ffff_tmp101);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(106), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp183 = simd_and(sequence_f0_9f_88_adv, byte_range_81_82);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp183);
            r10000_10ffff_tmp184 = simd_not(tmp14);
            r10000_10ffff_tmp185 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp184), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ba = simd_and(byte_range_80_bf, r10000_10ffff_tmp185);
            r10000_10ffff_tmp186 = simd_and(sequence_f0_9f_88_adv, byte_range_90_ba);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp186);
            r10000_10ffff_tmp187 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp40);
            byte_89 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp187);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp56);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(107), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp188 = simd_and(sequence_f0_9f_89_adv, byte_range_80_88);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp188);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp85);
            r10000_10ffff_tmp189 = simd_and(sequence_f0_9f_89_adv, byte_range_90_91);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp189);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            r10000_10ffff_tmp190 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp191 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp190);
            byte_range_80_ac = simd_andc(byte_range_80_bf, r10000_10ffff_tmp191);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(108), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp192 = simd_and(sequence_f0_9f_8c_adv, byte_range_80_ac);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp192);
            r10000_10ffff_tmp193 = simd_and(sequence_f0_9f_8c_adv, byte_range_b0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp193);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            r10000_10ffff_tmp194 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp79);
            byte_range_80_bd = simd_andc(byte_range_80_bf, r10000_10ffff_tmp194);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(109), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp195 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bd);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp195);
            r10000_10ffff_tmp196 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp20);
            byte_8e = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp196);
            sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(110), sequence_f0_9f_8e_adv));
            r10000_10ffff_tmp197 = simd_and(sequence_f0_9f_8e_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp197);
            byte_8f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp152);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp162);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(111), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_9f_8f_adv, byte_range_80_8e);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp198);
            r10000_10ffff_tmp199 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp200 = simd_not(r10000_10ffff_tmp199);
            r10000_10ffff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp200), simd_andc(r10000_10ffff_tmp11, basis_bits.bit_2));
            byte_range_94_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp201);
            r10000_10ffff_tmp202 = simd_and(sequence_f0_9f_8f_adv, byte_range_94_b7);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp202);
            r10000_10ffff_tmp203 = simd_andc(r10000_10ffff_tmp46, tmp2);
            byte_range_90_92 = simd_andc(r10000_10ffff_tmp203, tmp11);
            sequence_f0_9f_byte_range_90_92 = simd_and(sequence_f0_9f_adv, byte_range_90_92);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_90_92, carryQ.get_carry_in(112), r10000_10ffff_tmp204));
            sequence_f0_9f_byte_range_90_92_sfx = simd_and(r10000_10ffff_tmp204, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, sequence_f0_9f_byte_range_90_92_sfx);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            r10000_10ffff_tmp205 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp206 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp205);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp206);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(113), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_9f_93_adv, byte_range_80_be);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp207);
            sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(114), sequence_f0_9f_94_adv));
            r10000_10ffff_tmp208 = simd_and(sequence_f0_9f_94_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp208);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            byte_range_80_8a = simd_andc(r10000_10ffff_tmp44, tmp13);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(115), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp209 = simd_and(sequence_f0_9f_95_adv, byte_range_80_8a);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp209);
            r10000_10ffff_tmp210 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp128), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_b9 = simd_and(byte_range_80_bf, r10000_10ffff_tmp210);
            r10000_10ffff_tmp211 = simd_and(sequence_f0_9f_95_adv, byte_range_90_b9);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp211);
            r10000_10ffff_tmp212 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp212, tmp12);
            r10000_10ffff_tmp213 = simd_and(sequence_f0_9f_95_adv, byte_range_bb_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp213);
            byte_96 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp21);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            r10000_10ffff_tmp214 = simd_or(basis_bits.bit_3, tmp2);
            r10000_10ffff_tmp215 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp214);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp215);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(116), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp216 = simd_and(sequence_f0_9f_96_adv, byte_range_80_a3);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp216);
            byte_range_a5_bf = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp114);
            r10000_10ffff_tmp217 = simd_and(sequence_f0_9f_96_adv, byte_range_a5_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp217);
            r10000_10ffff_tmp218 = simd_not(r10000_10ffff_tmp55);
            r10000_10ffff_tmp219 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp218), simd_andc(r10000_10ffff_tmp13, basis_bits.bit_4));
            byte_range_97_98 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp219);
            sequence_f0_9f_byte_range_97_98 = simd_and(sequence_f0_9f_adv, byte_range_97_98);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_97_98, carryQ.get_carry_in(117), r10000_10ffff_tmp220));
            sequence_f0_9f_byte_range_97_98_sfx = simd_and(r10000_10ffff_tmp220, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, sequence_f0_9f_byte_range_97_98_sfx);
            byte_99 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp187);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(118), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp221 = simd_and(sequence_f0_9f_99_adv, byte_range_80_82);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp221);
            r10000_10ffff_tmp222 = simd_and(sequence_f0_9f_99_adv, byte_range_85_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp222);
            sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(119), sequence_f0_9f_9a_adv));
            r10000_10ffff_tmp223 = simd_and(sequence_f0_9f_9a_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp223);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_80_8f = r10000_10ffff_tmp44;
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(120), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp224 = simd_and(sequence_f0_9f_9b_adv, byte_range_80_8f);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp224);
            byte_range_a0_ac = simd_andc(r10000_10ffff_tmp98, r10000_10ffff_tmp171);
            r10000_10ffff_tmp225 = simd_and(sequence_f0_9f_9b_adv, byte_range_a0_ac);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp225);
            byte_range_b0_b3 = simd_andc(byte_range_b0_bf, tmp2);
            r10000_10ffff_tmp226 = simd_and(sequence_f0_9f_9b_adv, byte_range_b0_b3);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp226);
            byte_9c = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp81);
            sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(121), sequence_f0_9f_9c_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_9f_9c_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp227);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            r10000_10ffff_tmp228 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp11);
            byte_range_80_b3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp228);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(122), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp229 = simd_and(sequence_f0_9f_9d_adv, byte_range_80_b3);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp229);
            byte_9e = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp196);
            sequence_f0_9f_9e = simd_and(sequence_f0_9f_adv, byte_9e);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9e, carryQ.get_carry_in(123), sequence_f0_9f_9e_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_9f_9e_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp230);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(124), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp231 = simd_and(sequence_f0_9f_9f_adv, byte_range_80_94);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp231);
            byte_a0 = simd_andc(r10000_10ffff_tmp98, tmp4);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(125), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp232 = simd_and(sequence_f0_9f_a0_adv, byte_range_80_8b);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp232);
            byte_range_90_bf = simd_and(byte_range_80_bf, tmp1);
            r10000_10ffff_tmp233 = simd_and(sequence_f0_9f_a0_adv, byte_range_90_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp233);
            byte_a1 = simd_and(r10000_10ffff_tmp98, r10000_10ffff_tmp89);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(126), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp234 = simd_and(sequence_f0_9f_a1_adv, byte_range_80_87);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp234);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp63);
            r10000_10ffff_tmp235 = simd_and(sequence_f0_9f_a1_adv, byte_range_90_99);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp235);
            byte_range_a0_bf = r10000_10ffff_tmp54;
            r10000_10ffff_tmp236 = simd_and(sequence_f0_9f_a1_adv, byte_range_a0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp236);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(127), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp237 = simd_and(sequence_f0_9f_a2_adv, byte_range_80_87);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp237);
            r10000_10ffff_tmp238 = simd_not(r10000_10ffff_tmp76);
            r10000_10ffff_tmp239 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp238), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp239);
            r10000_10ffff_tmp240 = simd_and(sequence_f0_9f_a2_adv, byte_range_90_ad);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp240);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp45);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(128), r10000_10ffff_tmp241));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp241, byte_a0);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(129), r10000_10ffff_tmp242));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp242, byte_80);
            byte_f3_adv = r10000_10ffff_tmp241;
            sequence_f3_a0_adv = r10000_10ffff_tmp242;
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(130), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp243 = simd_and(sequence_f3_a0_80_adv, byte_81);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp243);
            r10000_10ffff_tmp244 = simd_and(sequence_f3_a0_80_adv, byte_range_a0_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp244);
            sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(131), sequence_f3_a0_81_adv));
            r10000_10ffff_tmp245 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
            struct_sc_Zyyy.cc = simd_or(struct_sc_Zyyy.cc, r10000_10ffff_tmp245);
          }
          else {
            carryQ.CarryDequeueEnqueue(70, 62);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 132);
        }
        carryQ.CarryQ_Adjust(132);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<132, 0> carryQ;
  };

  struct Property_sc_Armn {
  Property_sc_Armn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Armn & struct_sc_Armn) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock byte_range_80_8f, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3;
		BitBlock byte_range_b0_bf, r500_58f_tmp4, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r500_58f_tmp7, byte_d5, r500_58f_tmp8, r500_58f_tmp9, r530_58f_tmp1;
		BitBlock r530_58f_tmp2, byte_range_b1_bf, byte_d4_adv, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, byte_range_80_96, byte_d5_adv, r530_58f_tmp9;
		BitBlock r530_58f_tmp10, r530_58f_tmp11, byte_range_99_9f, r530_58f_tmp12;
		BitBlock r530_58f_tmp13, r530_58f_tmp14, r530_58f_tmp15, r530_58f_tmp16;
		BitBlock byte_range_a1_bf, r530_58f_tmp17, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp18, r530_58f_tmp19, r530_58f_tmp20, byte_8a;
		BitBlock r530_58f_tmp21, r530_58f_tmp22, r530_58f_tmp23, byte_range_8d_8f;
		BitBlock r530_58f_tmp24, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ac, ra000_ffff_tmp8;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_93_97;
		BitBlock sequence_ef_ac_adv, ra000_ffff_tmp13;




        struct_sc_Armn.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 3))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r400_5ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp7));
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp7, byte_range_80_8f);
              r400_5ff_tmp9 = simd_or(byte_range_d4_d5, r400_5ff_tmp8);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(1, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp2, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp8);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(2, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, r500_58f_tmp1);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp4;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_andc(r400_5ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r530_58f_tmp6 = simd_and(basis_bits.bit_5, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(basis_bits.bit_4, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(basis_bits.bit_3, r530_58f_tmp7);
                  byte_range_80_96 = simd_andc(r530_58f_tmp4, r530_58f_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(2), byte_d5_adv));
                  r530_58f_tmp9 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp9);
                  r530_58f_tmp10 = simd_and(r400_5ff_tmp5, r80_7ff_tmp1);
                  r530_58f_tmp11 = simd_and(r530_58f_tmp10, basis_bits.bit_4);
                  byte_range_99_9f = simd_and(r530_58f_tmp11, r530_58f_tmp1);
                  r530_58f_tmp12 = simd_and(byte_d5_adv, byte_range_99_9f);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp12);
                  r530_58f_tmp13 = simd_and(r400_5ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp14 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp15 = simd_or(r530_58f_tmp14, r500_58f_tmp1);
                  r530_58f_tmp16 = simd_or(basis_bits.bit_3, r530_58f_tmp15);
                  byte_range_a1_bf = simd_and(r530_58f_tmp13, r530_58f_tmp16);
                  r530_58f_tmp17 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp17);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp7;
                  r530_58f_tmp18 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp18);
                  r530_58f_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp20 = simd_and(r530_58f_tmp19, r400_5ff_tmp3);
                  byte_8a = simd_and(byte_range_80_8f, r530_58f_tmp20);
                  r530_58f_tmp21 = simd_and(byte_d6_adv, byte_8a);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp21);
                  r530_58f_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp23 = simd_and(byte_range_80_8f, r530_58f_tmp22);
                  byte_range_8d_8f = simd_and(r530_58f_tmp23, r500_58f_tmp1);
                  r530_58f_tmp24 = simd_and(byte_d6_adv, byte_range_8d_8f);
                  struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, r530_58f_tmp24);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(3, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ac = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(3), ra000_ffff_tmp8));
              sequence_ef_ac = simd_and(ra000_ffff_tmp8, byte_ac);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_4);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_5, ra000_ffff_tmp2);
              byte_range_93_97 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(4), sequence_ef_ac_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_ac_adv, byte_range_93_97);
              struct_sc_Armn.cc = simd_or(struct_sc_Armn.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Armi {
  Property_sc_Armi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Armi & struct_sc_Armi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a1;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a1, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_80_95;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_97_9f;
		BitBlock r10000_10ffff_tmp21;




        struct_sc_Armi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a1 = simd_and(r10000_10ffff_tmp12, byte_a1);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp16);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(2), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_a1_adv, byte_range_80_95);
            struct_sc_Armi.cc = simd_or(struct_sc_Armi.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp19);
            byte_range_97_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_a1_adv, byte_range_97_9f);
            struct_sc_Armi.cc = simd_or(struct_sc_Armi.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Lepc {
  Property_sc_Lepc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lepc & struct_sc_Lepc) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_b0;
		BitBlock r1000_1fff_tmp4, sequence_e1_b0, byte_e1_adv, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_range_bb_bf, r1000_1fff_tmp9, byte_b1, sequence_e1_b1;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_80_89, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock byte_range_8d_8f, r1000_1fff_tmp17;




        struct_sc_Lepc.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_b0 = simd_and(r1000_1fff_tmp4, byte_b0);
                  byte_e1_adv = r1000_1fff_tmp4;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(2), sequence_e1_b0_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_b0_adv, byte_range_80_b7);
                  struct_sc_Lepc.cc = simd_or(struct_sc_Lepc.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_or(basis_bits.bit_5, r1000_1fff_tmp7);
                  byte_range_bb_bf = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
                  struct_sc_Lepc.cc = simd_or(struct_sc_Lepc.cc, r1000_1fff_tmp9);
                  byte_b1 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_4, r1000_1fff_tmp12);
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(3), sequence_e1_b1_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_b1_adv, byte_range_80_89);
                  struct_sc_Lepc.cc = simd_or(struct_sc_Lepc.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp15);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp16, r800_ffff_tmp3);
                  r1000_1fff_tmp17 = simd_and(sequence_e1_b1_adv, byte_range_8d_8f);
                  struct_sc_Lepc.cc = simd_or(struct_sc_Lepc.cc, r1000_1fff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Telu {
  Property_sc_Telu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Telu & struct_sc_Telu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, byte_b0, r800_fff_tmp3, sequence_e0_b0;
		BitBlock byte_e0_adv, r800_fff_tmp4, r800_fff_tmp5, byte_range_80_83;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock byte_range_85_8c, r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, byte_range_8e_90;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, byte_range_92_a8;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, byte_range_aa_b9, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock byte_range_bd_bf, r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31;
		BitBlock byte_b1, sequence_e0_b1, r800_fff_tmp32, byte_range_80_84;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp33, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, byte_range_86_88, r800_fff_tmp37, r800_fff_tmp38;
		BitBlock r800_fff_tmp39, byte_range_8a_8d, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44, byte_range_95_96;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, byte_range_98_99;
		BitBlock r800_fff_tmp48, r800_fff_tmp49, byte_range_a0_a3, r800_fff_tmp50;
		BitBlock r800_fff_tmp51, byte_range_a6_af, r800_fff_tmp52, byte_range_b8_bf;
		BitBlock r800_fff_tmp53;




        struct_sc_Telu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  byte_b0 = simd_andc(r800_fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  sequence_e0_b0 = simd_and(r800_fff_tmp3, byte_b0);
                  byte_e0_adv = r800_fff_tmp3;
                  r800_fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp5 = simd_andc(r800_ffff_tmp5, r800_fff_tmp4);
                  byte_range_80_83 = simd_andc(r800_fff_tmp5, r800_ffff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(2), sequence_e0_b0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_b0_adv, byte_range_80_83);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp8 = simd_xor(basis_bits.bit_4, r800_fff_tmp7);
                  byte_range_85_8c = simd_and(r800_fff_tmp5, r800_fff_tmp8);
                  r800_fff_tmp9 = simd_and(sequence_e0_b0_adv, byte_range_85_8c);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp11 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp12, basis_bits.bit_6);
                  r800_fff_tmp14 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp11), simd_andc(r800_fff_tmp13, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp10, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(sequence_e0_b0_adv, byte_range_8e_90);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_4, r800_fff_tmp16);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_3, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_not(r800_fff_tmp18);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp19), simd_andc(r800_fff_tmp20, basis_bits.bit_2));
                  byte_range_92_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_and(sequence_e0_b0_adv, byte_range_92_a8);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp25 = simd_and(basis_bits.bit_4, r800_fff_tmp24);
                  r800_fff_tmp26 = simd_xor(basis_bits.bit_3, r800_fff_tmp25);
                  byte_range_aa_b9 = simd_and(r800_fff_tmp23, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_and(sequence_e0_b0_adv, byte_range_aa_b9);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp27);
                  r800_fff_tmp28 = simd_and(r800_fff_tmp2, r800_fff_tmp12);
                  byte_range_bd_bf = simd_and(r800_fff_tmp28, r800_ffff_tmp3);
                  r800_fff_tmp29 = simd_and(sequence_e0_b0_adv, byte_range_bd_bf);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp31 = simd_andc(r800_fff_tmp30, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp2, r800_fff_tmp31);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp32 = simd_andc(r800_fff_tmp5, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r800_fff_tmp32, r800_fff_tmp7);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(3), sequence_e0_b1_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_b1_adv, byte_range_80_84);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_not(r800_fff_tmp16);
                  r800_fff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp36 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp34), simd_andc(r800_fff_tmp35, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp5, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_b1_adv, byte_range_86_88);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp5, basis_bits.bit_4);
                  r800_fff_tmp39 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r800_fff_tmp38, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_b1_adv, byte_range_8a_8d);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp42 = simd_and(r800_ffff_tmp5, r800_fff_tmp41);
                  r800_fff_tmp43 = simd_and(r800_fff_tmp42, r800_ffff_tmp2);
                  r800_fff_tmp44 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_95_96 = simd_and(r800_fff_tmp43, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(sequence_e0_b1_adv, byte_range_95_96);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp47 = simd_andc(r800_fff_tmp46, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r800_fff_tmp42, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_b1_adv, byte_range_98_99);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r800_fff_tmp49, r800_ffff_tmp1);
                  r800_fff_tmp50 = simd_and(sequence_e0_b1_adv, byte_range_a0_a3);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_4, r800_fff_tmp35);
                  byte_range_a6_af = simd_and(r800_fff_tmp49, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(sequence_e0_b1_adv, byte_range_a6_af);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp52);
                  byte_range_b8_bf = simd_and(r800_fff_tmp2, basis_bits.bit_4);
                  r800_fff_tmp53 = simd_and(sequence_e0_b1_adv, byte_range_b8_bf);
                  struct_sc_Telu.cc = simd_or(struct_sc_Telu.cc, r800_fff_tmp53);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Xsux {
  Property_sc_Xsux() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Xsux & struct_sc_Xsux) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_92, r10000_10ffff_tmp9;
		BitBlock sequence_f0_92, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_80_8d;
		BitBlock r10000_10ffff_tmp14, sequence_f0_92_byte_range_80_8d;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_92_byte_range_80_8d_sfx, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_8e, sequence_f0_92_8e;
		BitBlock r10000_10ffff_tmp19, byte_f0_adv, sequence_f0_92_adv;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, byte_range_80_98, sequence_f0_92_8e_adv;
		BitBlock r10000_10ffff_tmp24, byte_90, sequence_f0_92_90;
		BitBlock sequence_f0_92_90_adv, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_91, sequence_f0_92_91, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock byte_range_80_ae, sequence_f0_92_91_adv, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock byte_range_b0_b4, r10000_10ffff_tmp36;




        struct_sc_Xsux.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 6))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_92 = simd_and(r10000_10ffff_tmp9, byte_92);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp12);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp14, byte_range_80_8d);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_sc_Xsux.cc = simd_or(struct_sc_Xsux.cc, sequence_f0_92_byte_range_80_8d_sfx);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp7);
            byte_8e = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp14, byte_8e);
            r10000_10ffff_tmp19 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_92_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp20 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp22);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(3), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_92_8e_adv, byte_range_80_98);
            struct_sc_Xsux.cc = simd_or(struct_sc_Xsux.cc, r10000_10ffff_tmp24);
            byte_90 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp3);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(4), sequence_f0_92_90_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_92_90_adv, byte_range_80_bf);
            struct_sc_Xsux.cc = simd_or(struct_sc_Xsux.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp27);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp30);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp31);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(5), sequence_f0_92_91_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_92_91_adv, byte_range_80_ae);
            struct_sc_Xsux.cc = simd_or(struct_sc_Xsux.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp33, basis_bits.bit_4);
            r10000_10ffff_tmp35 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b4);
            struct_sc_Xsux.cc = simd_or(struct_sc_Xsux.cc, r10000_10ffff_tmp36);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Ethi {
  Property_sc_Ethi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Ethi & struct_sc_Ethi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_88, r1000_1fff_tmp5, sequence_e1_88;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_88_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_89, sequence_e1_89;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_range_80_88;
		BitBlock sequence_e1_89_adv, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_8a_8d, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, r1000_1fff_tmp19, byte_range_90_96;
		BitBlock r1000_1fff_tmp20, byte_98, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock byte_range_9a_9d, r1000_1fff_tmp23, byte_range_a0_bf;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26, byte_8a;
		BitBlock sequence_e1_8a, sequence_e1_8a_adv, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, byte_range_90_b0;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, byte_range_b2_b5, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, byte_range_b8_be, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, byte_8b, sequence_e1_8b, byte_80;
		BitBlock sequence_e1_8b_adv, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock byte_range_82_85, r1000_1fff_tmp43, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, r1000_1fff_tmp46, r1000_1fff_tmp47;
		BitBlock byte_range_88_96, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock byte_range_98_bf, r1000_1fff_tmp50, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, byte_8c, sequence_e1_8c, byte_range_80_90;
		BitBlock sequence_e1_8c_adv, r1000_1fff_tmp53, byte_range_92_95;
		BitBlock r1000_1fff_tmp54, r1000_1fff_tmp55, r1000_1fff_tmp56, byte_8d;
		BitBlock sequence_e1_8d, r1000_1fff_tmp57, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock byte_range_80_9a, sequence_e1_8d_adv, r1000_1fff_tmp60;
		BitBlock r1000_1fff_tmp61, r1000_1fff_tmp62, r1000_1fff_tmp63;
		BitBlock byte_range_9d_bc, r1000_1fff_tmp64, r1000_1fff_tmp65, byte_8e;
		BitBlock sequence_e1_8e, r1000_1fff_tmp66, r1000_1fff_tmp67, r1000_1fff_tmp68;
		BitBlock byte_range_80_99, sequence_e1_8e_adv, r1000_1fff_tmp69;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_b6, r2000_2fff_tmp4, sequence_e2_b6;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_80_96;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_range_a0_a6, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, byte_range_a8_ae, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, byte_range_b0_b6, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20, byte_b7;
		BitBlock sequence_e2_b7, r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock byte_range_80_86, sequence_e2_b7_adv, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_range_88_8e, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, byte_range_98_9e;
		BitBlock r2000_2fff_tmp32, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, byte_ac;
		BitBlock ra000_ffff_tmp7, sequence_ea_ac, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, byte_range_81_86, sequence_ea_ac_adv;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, byte_range_89_8e;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_91_96, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25;




        struct_sc_Ethi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 14))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 14))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 11))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 8))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 8))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_88 = simd_and(r1000_1fff_tmp5, byte_88);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_88, carryQ.get_carry_in(2), sequence_e1_88_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_88_adv, byte_range_80_bf);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp8);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, r1000_1fff_tmp9);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(3), sequence_e1_89_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_89_adv, byte_range_80_88);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp7, basis_bits.bit_4);
                  r1000_1fff_tmp13 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_89_adv, byte_range_8a_8d);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp16 = simd_and(byte_range_80_bf, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_andc(r1000_1fff_tmp16, basis_bits.bit_4);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_5, r1000_1fff_tmp18);
                  byte_range_90_96 = simd_andc(r1000_1fff_tmp17, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_and(sequence_e1_89_adv, byte_range_90_96);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp20);
                  byte_98 = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp4);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_89_adv, byte_98);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp16, basis_bits.bit_4);
                  byte_range_9a_9d = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp13);
                  r1000_1fff_tmp23 = simd_and(sequence_e1_89_adv, byte_range_9a_9d);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp23);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_89_adv, byte_range_a0_bf);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp25);
                  byte_8a = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp26);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(4), sequence_e1_8a_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_8a_adv, byte_range_80_88);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(sequence_e1_8a_adv, byte_range_8a_8d);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r1000_1fff_tmp30 = simd_and(basis_bits.bit_3, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_not(r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp31), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(byte_range_80_bf, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(sequence_e1_8a_adv, byte_range_90_b0);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp35 = simd_and(byte_range_80_bf, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_andc(r1000_1fff_tmp35, basis_bits.bit_4);
                  byte_range_b2_b5 = simd_and(r1000_1fff_tmp36, r1000_1fff_tmp13);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_8a_adv, byte_range_b2_b5);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(r1000_1fff_tmp35, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r1000_1fff_tmp38, r1000_1fff_tmp19);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_8a_adv, byte_range_b8_be);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp39);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp18);
                  byte_8b = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp40);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  byte_80 = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp29);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(5), sequence_e1_8b_adv));
                  r1000_1fff_tmp41 = simd_and(sequence_e1_8b_adv, byte_80);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_andc(r1000_1fff_tmp7, basis_bits.bit_4);
                  byte_range_82_85 = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp13);
                  r1000_1fff_tmp43 = simd_and(sequence_e1_8b_adv, byte_range_82_85);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp43);
                  r1000_1fff_tmp44 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp45 = simd_or(basis_bits.bit_4, r1000_1fff_tmp19);
                  r1000_1fff_tmp46 = simd_not(r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp46), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
                  byte_range_88_96 = simd_and(r1000_1fff_tmp44, r1000_1fff_tmp47);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_8b_adv, byte_range_88_96);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_or(basis_bits.bit_2, r800_ffff_tmp6);
                  byte_range_98_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp49);
                  r1000_1fff_tmp50 = simd_and(sequence_e1_8b_adv, byte_range_98_bf);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp50);
                  r1000_1fff_tmp51 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp52 = simd_andc(r1000_1fff_tmp51, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp52);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp44, r1000_1fff_tmp30);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(6), sequence_e1_8c_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_8c_adv, byte_range_80_90);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp53);
                  byte_range_92_95 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp13);
                  r1000_1fff_tmp54 = simd_and(sequence_e1_8c_adv, byte_range_92_95);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp54);
                  r1000_1fff_tmp55 = simd_and(sequence_e1_8c_adv, byte_range_98_bf);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp55);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp51, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp56);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp57 = simd_or(basis_bits.bit_5, r1000_1fff_tmp18);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_4, r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_and(basis_bits.bit_3, r1000_1fff_tmp58);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp44, r1000_1fff_tmp59);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(7), sequence_e1_8d_adv));
                  r1000_1fff_tmp60 = simd_and(sequence_e1_8d_adv, byte_range_80_9a);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(r1000_1fff_tmp51, r800_ffff_tmp3);
                  r1000_1fff_tmp62 = simd_and(basis_bits.bit_3, r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_xor(basis_bits.bit_2, r1000_1fff_tmp62);
                  byte_range_9d_bc = simd_and(byte_range_80_bf, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_8d_adv, byte_range_9d_bc);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(r1000_1fff_tmp51, r1000_1fff_tmp25);
                  byte_8e = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp65);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp66 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp67 = simd_and(basis_bits.bit_4, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_and(basis_bits.bit_3, r1000_1fff_tmp67);
                  byte_range_80_99 = simd_andc(r1000_1fff_tmp44, r1000_1fff_tmp68);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(8), sequence_e1_8e_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_8e_adv, byte_range_80_99);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r1000_1fff_tmp69);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 8);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 8);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(9, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(9, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_b6 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(9), r2000_2fff_tmp4));
                  sequence_e2_b6 = simd_and(r2000_2fff_tmp4, byte_b6);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_4, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_3, r2000_2fff_tmp8);
                  byte_range_80_96 = simd_andc(r2000_2fff_tmp5, r2000_2fff_tmp9);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(10), sequence_e2_b6_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_b6_adv, byte_range_80_96);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp12 = simd_andc(r2000_2fff_tmp11, basis_bits.bit_4);
                  byte_range_a0_a6 = simd_andc(r2000_2fff_tmp12, r2000_2fff_tmp7);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_b6_adv, byte_range_a0_a6);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp11, basis_bits.bit_4);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp14, r2000_2fff_tmp7);
                  r2000_2fff_tmp15 = simd_and(sequence_e2_b6_adv, byte_range_a8_ae);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_b0_b6 = simd_andc(r2000_2fff_tmp16, r2000_2fff_tmp7);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_b6_adv, byte_range_b0_b6);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_b8_be = simd_andc(r2000_2fff_tmp18, r2000_2fff_tmp7);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_b6_adv, byte_range_b8_be);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp6);
                  byte_b7 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp20);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp22 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp21);
                  r2000_2fff_tmp23 = simd_andc(r2000_2fff_tmp22, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r2000_2fff_tmp23, r2000_2fff_tmp7);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(11), sequence_e2_b7_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_b7_adv, byte_range_80_86);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp22, basis_bits.bit_4);
                  byte_range_88_8e = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp7);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_b7_adv, byte_range_88_8e);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp28 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_andc(r2000_2fff_tmp28, basis_bits.bit_4);
                  byte_range_90_96 = simd_andc(r2000_2fff_tmp29, r2000_2fff_tmp7);
                  r2000_2fff_tmp30 = simd_and(sequence_e2_b7_adv, byte_range_90_96);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp30);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp28, basis_bits.bit_4);
                  byte_range_98_9e = simd_andc(r2000_2fff_tmp31, r2000_2fff_tmp7);
                  r2000_2fff_tmp32 = simd_and(sequence_e2_b7_adv, byte_range_98_9e);
                  struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, r2000_2fff_tmp32);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 11);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(12, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(12), ra000_ffff_tmp7));
              sequence_ea_ac = simd_and(ra000_ffff_tmp7, byte_ac);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp9 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_andc(ra000_ffff_tmp9, basis_bits.bit_4);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp12), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(13), sequence_ea_ac_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_ac_adv, byte_range_81_86);
              struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp9, basis_bits.bit_4);
              byte_range_89_8e = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp13);
              ra000_ffff_tmp16 = simd_and(sequence_ea_ac_adv, byte_range_89_8e);
              struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp18, basis_bits.bit_4);
              byte_range_91_96 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp13);
              ra000_ffff_tmp20 = simd_and(sequence_ea_ac_adv, byte_range_91_96);
              struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_4);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_5, ra000_ffff_tmp11);
              byte_range_a0_a6 = simd_andc(ra000_ffff_tmp21, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(sequence_ea_ac_adv, byte_range_a0_a6);
              struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp4, basis_bits.bit_4);
              byte_range_a8_ae = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp22);
              ra000_ffff_tmp25 = simd_and(sequence_ea_ac_adv, byte_range_a8_ae);
              struct_sc_Ethi.cc = simd_or(struct_sc_Ethi.cc, ra000_ffff_tmp25);
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 14);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 14);
        }
        carryQ.CarryQ_Adjust(14);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<14, 0> carryQ;
  };

  struct Property_sc_Sidd {
  Property_sc_Sidd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sidd & struct_sc_Sidd) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_96, r10000_10ffff_tmp13, sequence_f0_91_96;
		BitBlock byte_f0_adv, sequence_f0_91_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_b5, sequence_f0_91_96_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_b8_bf, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_97, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, byte_range_80_89, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp27;




        struct_sc_Sidd.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_91_96 = simd_and(r10000_10ffff_tmp13, byte_96);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp16);
            byte_range_80_b5 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(2), sequence_f0_91_96_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_96_adv, byte_range_80_b5);
            struct_sc_Sidd.cc = simd_or(struct_sc_Sidd.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_b8_bf = simd_and(r10000_10ffff_tmp19, basis_bits.bit_4);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_96_adv, byte_range_b8_bf);
            struct_sc_Sidd.cc = simd_or(struct_sc_Sidd.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp21);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp22);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp25);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp26);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(3), sequence_f0_91_97_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_91_97_adv, byte_range_80_89);
            struct_sc_Sidd.cc = simd_or(struct_sc_Sidd.cc, r10000_10ffff_tmp27);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mong {
  Property_sc_Mong() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mong & struct_sc_Mong) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a0, r1000_1fff_tmp3;
		BitBlock sequence_e1_a0, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock byte_range_80_81, sequence_e1_a0_adv, r1000_1fff_tmp6, byte_84;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, byte_range_86_8e;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, byte_range_90_99;
		BitBlock r1000_1fff_tmp18, byte_range_a0_bf, r1000_1fff_tmp19, byte_a1;
		BitBlock sequence_e1_a1, sequence_e1_a1_adv, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, byte_a2, sequence_e1_a2;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, byte_range_80_aa, sequence_e1_a2_adv;
		BitBlock r1000_1fff_tmp27;




        struct_sc_Mong.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 4))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_a0 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_a0 = simd_and(r1000_1fff_tmp3, byte_a0);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp4);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp5, r800_4dff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(2), sequence_e1_a0_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_a0_adv, byte_range_80_81);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp6);
                  byte_84 = simd_and(r1000_1fff_tmp5, r800_ffff_tmp4);
                  r1000_1fff_tmp7 = simd_and(sequence_e1_a0_adv, byte_84);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, r1000_1fff_tmp8);
                  r1000_1fff_tmp10 = simd_not(r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp12 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp10), simd_andc(r1000_1fff_tmp11, basis_bits.bit_4));
                  byte_range_86_8e = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(sequence_e1_a0_adv, byte_range_86_8e);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_4, r1000_1fff_tmp16);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_a0_adv, byte_range_90_99);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp18);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp19 = simd_and(sequence_e1_a0_adv, byte_range_a0_bf);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp19);
                  byte_a1 = simd_and(r1000_1fff_tmp1, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(3), sequence_e1_a1_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_a1_adv, byte_range_80_b7);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp22 = simd_andc(r1000_1fff_tmp21, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp22);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp23 = simd_or(basis_bits.bit_5, r1000_1fff_tmp8);
                  r1000_1fff_tmp24 = simd_and(basis_bits.bit_4, r1000_1fff_tmp23);
                  r1000_1fff_tmp25 = simd_or(basis_bits.bit_3, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(basis_bits.bit_2, r1000_1fff_tmp25);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp26);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(4), sequence_e1_a2_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_a2_adv, byte_range_80_aa);
                  struct_sc_Mong.cc = simd_or(struct_sc_Mong.cc, r1000_1fff_tmp27);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Kali {
  Property_sc_Kali() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Kali & struct_sc_Kali) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a4;
		BitBlock ra000_ffff_tmp9, sequence_ea_a4, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock byte_range_80_ad, sequence_ea_a4_adv, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, byte_af, ra000_ffff_tmp17;




        struct_sc_Kali.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a4 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a4 = simd_and(ra000_ffff_tmp9, byte_a4);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp10, basis_bits.bit_6);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_3, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_2, ra000_ffff_tmp12);
              byte_range_80_ad = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp13);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(1), sequence_ea_a4_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_a4_adv, byte_range_80_ad);
              struct_sc_Kali.cc = simd_or(struct_sc_Kali.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp15);
              byte_af = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(sequence_ea_a4_adv, byte_af);
              struct_sc_Kali.cc = simd_or(struct_sc_Kali.cc, ra000_ffff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_sc_Mlym {
  Property_sc_Mlym() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mlym & struct_sc_Mlym) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, byte_b4, r800_fff_tmp3, sequence_e0_b4;
		BitBlock byte_e0_adv, r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock byte_range_81_83, sequence_e0_b4_adv, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, byte_range_85_8c, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock byte_range_8e_90, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, byte_range_92_ba, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock byte_range_bd_bf, r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock byte_b5, sequence_e0_b5, r800_fff_tmp29, byte_range_80_84;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, byte_range_86_88, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, r800_fff_tmp37, r800_fff_tmp38, byte_range_8a_8e;
		BitBlock r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock byte_97, r800_fff_tmp43, r800_fff_tmp44, byte_range_a0_a3;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock byte_range_a6_b5, r800_fff_tmp49, r800_fff_tmp50, byte_range_b9_bf;
		BitBlock r800_fff_tmp51;




        struct_sc_Mlym.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  byte_b4 = simd_and(r800_fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  sequence_e0_b4 = simd_and(r800_fff_tmp3, byte_b4);
                  byte_e0_adv = r800_fff_tmp3;
                  r800_fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp5 = simd_andc(r800_ffff_tmp5, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_andc(r800_fff_tmp5, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp6, r800_ffff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(2), sequence_e0_b4_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_b4_adv, byte_range_81_83);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp9 = simd_xor(basis_bits.bit_4, r800_fff_tmp8);
                  byte_range_85_8c = simd_and(r800_fff_tmp5, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(sequence_e0_b4_adv, byte_range_85_8c);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp12 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp14 = simd_and(r800_fff_tmp13, basis_bits.bit_6);
                  r800_fff_tmp15 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp12), simd_andc(r800_fff_tmp14, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp11, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(sequence_e0_b4_adv, byte_range_8e_90);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_5, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_4, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_3, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_not(r800_fff_tmp20);
                  r800_fff_tmp22 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp23 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp21), simd_andc(r800_fff_tmp22, basis_bits.bit_2));
                  byte_range_92_ba = simd_and(r800_ffff_tmp5, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_and(sequence_e0_b4_adv, byte_range_92_ba);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(r800_fff_tmp2, r800_fff_tmp13);
                  byte_range_bd_bf = simd_and(r800_fff_tmp25, r800_ffff_tmp3);
                  r800_fff_tmp26 = simd_and(sequence_e0_b4_adv, byte_range_bd_bf);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp28 = simd_and(r800_ffff_tmp2, r800_fff_tmp27);
                  byte_b5 = simd_and(r800_fff_tmp2, r800_fff_tmp28);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp29 = simd_andc(r800_fff_tmp5, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r800_fff_tmp29, r800_fff_tmp8);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(3), sequence_e0_b5_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_b5_adv, byte_range_80_84);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp32 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp34 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp32), simd_andc(r800_fff_tmp33, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp5, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_b5_adv, byte_range_86_88);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp5, basis_bits.bit_4);
                  r800_fff_tmp37 = simd_not(r800_fff_tmp17);
                  r800_fff_tmp38 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp37), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_8a_8e = simd_and(r800_fff_tmp36, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(sequence_e0_b5_adv, byte_range_8a_8e);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp41 = simd_and(r800_ffff_tmp5, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_and(r800_ffff_tmp2, r800_fff_tmp17);
                  byte_97 = simd_and(r800_fff_tmp41, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_b5_adv, byte_97);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r800_fff_tmp44, r800_ffff_tmp1);
                  r800_fff_tmp45 = simd_and(sequence_e0_b5_adv, byte_range_a0_a3);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp47 = simd_or(basis_bits.bit_4, r800_fff_tmp33);
                  r800_fff_tmp48 = simd_xor(basis_bits.bit_3, r800_fff_tmp47);
                  byte_range_a6_b5 = simd_and(r800_fff_tmp46, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_b5_adv, byte_range_a6_b5);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp2, basis_bits.bit_4);
                  byte_range_b9_bf = simd_and(r800_fff_tmp50, r800_fff_tmp31);
                  r800_fff_tmp51 = simd_and(sequence_e0_b5_adv, byte_range_b9_bf);
                  struct_sc_Mlym.cc = simd_or(struct_sc_Mlym.cc, r800_fff_tmp51);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Cher {
  Property_sc_Cher() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cher & struct_sc_Cher) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_8e, r1000_1fff_tmp6;
		BitBlock sequence_e1_8e, byte_e1_adv, byte_range_a0_bf, sequence_e1_8e_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_8f;
		BitBlock sequence_e1_8f, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_80_b4, sequence_e1_8f_adv;
		BitBlock r1000_1fff_tmp14;




        struct_sc_Cher.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_8e = simd_and(r1000_1fff_tmp6, byte_8e);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(2), sequence_e1_8e_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_8e_adv, byte_range_a0_bf);
                  struct_sc_Cher.cc = simd_or(struct_sc_Cher.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp8);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp11 = simd_or(basis_bits.bit_4, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_3, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_2, r1000_1fff_tmp12);
                  byte_range_80_b4 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(3), sequence_e1_8f_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_8f_adv, byte_range_80_b4);
                  struct_sc_Cher.cc = simd_or(struct_sc_Cher.cc, r1000_1fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Hmng {
  Property_sc_Hmng() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hmng & struct_sc_Hmng) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_ac, r10000_10ffff_tmp15, sequence_f0_96_ac, byte_f0_adv;
		BitBlock sequence_f0_96_adv, byte_range_80_bf, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_ad, sequence_f0_96_ad, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, byte_range_80_85, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock byte_range_90_99, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, byte_range_9b_a1, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_range_a3_b7, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_range_bd_bf;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, byte_ae, sequence_f0_96_ae;
		BitBlock byte_range_80_8f, sequence_f0_96_ae_adv, r10000_10ffff_tmp47;




        struct_sc_Hmng.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp2);
            byte_ac = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_96_ac = simd_and(r10000_10ffff_tmp15, byte_ac);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp15;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(2), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_96_ac_adv, byte_range_80_bf);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp18);
            byte_ad = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            r10000_10ffff_tmp20 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp22 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp22, basis_bits.bit_4);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(3), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_96_ad_adv, byte_range_80_85);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp26);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(sequence_f0_96_ad_adv, byte_range_90_99);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp30 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_not(r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp33);
            r10000_10ffff_tmp35 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp31), simd_andc(r10000_10ffff_tmp35, basis_bits.bit_2));
            byte_range_9b_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_96_ad_adv, byte_range_9b_a1);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp39 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp40 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp32);
            r10000_10ffff_tmp41 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp39), simd_andc(r10000_10ffff_tmp40, basis_bits.bit_3));
            byte_range_a3_b7 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(sequence_f0_96_ad_adv, byte_range_a3_b7);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp13);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp2);
            r10000_10ffff_tmp45 = simd_and(sequence_f0_96_ad_adv, byte_range_bd_bf);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp8);
            byte_ae = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp46);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            byte_range_80_8f = r10000_10ffff_tmp22;
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(4), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_96_ae_adv, byte_range_80_8f);
            struct_sc_Hmng.cc = simd_or(struct_sc_Hmng.cc, r10000_10ffff_tmp47);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Rjng {
  Property_sc_Rjng() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Rjng & struct_sc_Rjng) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a4;
		BitBlock ra000_ffff_tmp9, sequence_ea_a4, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_b0_bf, sequence_ea_a4_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_a5, sequence_ea_a5;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock byte_range_80_93, sequence_ea_a5_adv, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_9f, ra000_ffff_tmp23;




        struct_sc_Rjng.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a4 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a4 = simd_and(ra000_ffff_tmp9, byte_a4);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(1), sequence_ea_a4_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a4_adv, byte_range_b0_bf);
              struct_sc_Rjng.cc = simd_or(struct_sc_Rjng.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp12);
              byte_a5 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp13);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_2);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp15);
              byte_range_80_93 = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp16);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(2), sequence_ea_a5_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_a5_adv, byte_range_80_93);
              struct_sc_Rjng.cc = simd_or(struct_sc_Rjng.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              byte_9f = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(sequence_ea_a5_adv, byte_9f);
              struct_sc_Rjng.cc = simd_or(struct_sc_Rjng.cc, ra000_ffff_tmp23);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Khoj {
  Property_sc_Khoj() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Khoj & struct_sc_Khoj) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_88;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_88, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_range_80_91, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_93_bd, r10000_10ffff_tmp27;




        struct_sc_Khoj.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_88 = simd_and(r10000_10ffff_tmp14, byte_88);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp16 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(2), sequence_f0_91_88_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_88_adv, byte_range_80_91);
            struct_sc_Khoj.cc = simd_or(struct_sc_Khoj.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_not(r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp22), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_2));
            byte_range_93_bd = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_91_88_adv, byte_range_93_bd);
            struct_sc_Khoj.cc = simd_or(struct_sc_Khoj.cc, r10000_10ffff_tmp27);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Bopo {
  Property_sc_Bopo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Bopo & struct_sc_Bopo) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_ca, r100_2ff_tmp4;
		BitBlock r100_2ff_tmp5, byte_range_b0_bf, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, r100_2ff_tmp9, byte_cb, r100_2ff_tmp10, r2b0_2ff_tmp1;
		BitBlock r2b0_2ff_tmp2, r2b0_2ff_tmp3, byte_range_aa_ab, byte_cb_adv;
		BitBlock r2b0_2ff_tmp4, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, byte_84, r3000_4dff_tmp3, sequence_e3_84;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, byte_range_85_ad, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, r3000_4dff_tmp14, byte_86;
		BitBlock sequence_e3_86, r3000_4dff_tmp15, r3000_4dff_tmp16, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, byte_range_a0_ba, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp19;




        struct_sc_Bopo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp1, r100_2ff_tmp2);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r100_2ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(0), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_b0_bf);
                r100_2ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp1, r100_2ff_tmp8);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp9);
                r100_2ff_tmp10 = simd_or(r100_2ff_tmp7, byte_cb);
                if ((bitblock::any(r100_2ff_tmp10) || carryQ.CarryTest(1, 1))) {
                  r2b0_2ff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r2b0_2ff_tmp2 = simd_and(r100_2ff_tmp4, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp3 = simd_and(r100_2ff_tmp1, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r2b0_2ff_tmp2, r2b0_2ff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(1), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_aa_ab);
                  struct_sc_Bopo.cc = simd_or(struct_sc_Bopo.cc, r2b0_2ff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(3, 3))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(3, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(3), r3000_4dff_tmp3));
                  sequence_e3_84 = simd_and(r3000_4dff_tmp3, byte_84);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_or(basis_bits.bit_3, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_not(r3000_4dff_tmp6);
                  r3000_4dff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp9 = simd_or(basis_bits.bit_4, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_3, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp7), simd_andc(r3000_4dff_tmp10, basis_bits.bit_2));
                  byte_range_85_ad = simd_and(r800_ffff_tmp5, r3000_4dff_tmp11);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(4), sequence_e3_84_adv));
                  r3000_4dff_tmp12 = simd_and(sequence_e3_84_adv, byte_range_85_ad);
                  struct_sc_Bopo.cc = simd_or(struct_sc_Bopo.cc, r3000_4dff_tmp12);
                  r3000_4dff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp13);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp14);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp15 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp16 = simd_or(basis_bits.bit_5, r2000_4dff_tmp1);
                  r3000_4dff_tmp17 = simd_and(basis_bits.bit_4, r3000_4dff_tmp16);
                  r3000_4dff_tmp18 = simd_and(basis_bits.bit_3, r3000_4dff_tmp17);
                  byte_range_a0_ba = simd_andc(r3000_4dff_tmp15, r3000_4dff_tmp18);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(5), sequence_e3_86_adv));
                  r3000_4dff_tmp19 = simd_and(sequence_e3_86_adv, byte_range_a0_ba);
                  struct_sc_Bopo.cc = simd_or(struct_sc_Bopo.cc, r3000_4dff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Runr {
  Property_sc_Runr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Runr & struct_sc_Runr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9a, r1000_1fff_tmp6;
		BitBlock sequence_e1_9a, byte_e1_adv, byte_range_a0_bf, sequence_e1_9a_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_9b;
		BitBlock sequence_e1_9b, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_80_aa, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_range_ae_b8, r1000_1fff_tmp21;




        struct_sc_Runr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(2), sequence_e1_9a_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_9a_adv, byte_range_a0_bf);
                  struct_sc_Runr.cc = simd_or(struct_sc_Runr.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp8);
                  byte_9b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp10 = simd_or(basis_bits.bit_5, r1000_1fff_tmp8);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_4, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_3, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_2, r1000_1fff_tmp12);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(3), sequence_e1_9b_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_9b_adv, byte_range_80_aa);
                  struct_sc_Runr.cc = simd_or(struct_sc_Runr.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_4, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_not(r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp18, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp17), simd_andc(r1000_1fff_tmp19, basis_bits.bit_3));
                  byte_range_ae_b8 = simd_and(byte_range_a0_bf, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_9b_adv, byte_range_ae_b8);
                  struct_sc_Runr.cc = simd_or(struct_sc_Runr.cc, r1000_1fff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Lisu {
  Property_sc_Lisu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lisu & struct_sc_Lisu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_93, ra000_ffff_tmp10, sequence_ea_93, byte_ea_adv;
		BitBlock ra000_ffff_tmp11, byte_range_90_bf, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp12;




        struct_sc_Lisu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp7);
              byte_93 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ea_93 = simd_and(ra000_ffff_tmp10, byte_93);
              byte_ea_adv = ra000_ffff_tmp10;
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(1), sequence_ea_93_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_93_adv, byte_range_90_bf);
              struct_sc_Lisu.cc = simd_or(struct_sc_Lisu.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_sc_Lydi {
  Property_sc_Lydi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lydi & struct_sc_Lydi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a4;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a4, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_a0_b9;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock byte_bf, r10000_10ffff_tmp22;




        struct_sc_Lydi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a4 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a4 = simd_and(r10000_10ffff_tmp12, byte_a4);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            byte_range_a0_b9 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp16);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(2), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_a4_adv, byte_range_a0_b9);
            struct_sc_Lydi.cc = simd_or(struct_sc_Lydi.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            byte_bf = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_a4_adv, byte_bf);
            struct_sc_Lydi.cc = simd_or(struct_sc_Lydi.cc, r10000_10ffff_tmp22);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Laoo {
  Property_sc_Laoo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Laoo & struct_sc_Laoo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, byte_ba, r800_fff_tmp6, sequence_e0_ba, byte_e0_adv;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock byte_range_81_82, sequence_e0_ba_adv, r800_fff_tmp11, byte_84;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, byte_range_87_88, r800_fff_tmp18;
		BitBlock byte_8a, r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock r800_fff_tmp22, byte_8d, r800_fff_tmp23, r800_fff_tmp24;
		BitBlock r800_fff_tmp25, byte_range_94_97, r800_fff_tmp26, r800_fff_tmp27;
		BitBlock byte_range_99_9f, r800_fff_tmp28, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock byte_range_a1_a3, r800_fff_tmp31, r800_fff_tmp32, byte_a5;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, byte_a7, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, byte_range_aa_ab, r800_fff_tmp37, r800_fff_tmp38;
		BitBlock r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock r800_fff_tmp43, byte_range_ad_b9, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock r800_fff_tmp46, r800_fff_tmp47, byte_range_bb_bd, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, byte_bb, sequence_e0_bb, r800_fff_tmp50;
		BitBlock r800_fff_tmp51, byte_range_80_84, sequence_e0_bb_adv, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, byte_86, r800_fff_tmp54, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, byte_range_88_8d, r800_fff_tmp57, byte_range_90_99;
		BitBlock r800_fff_tmp58, byte_range_9c_9f, r800_fff_tmp59;




        struct_sc_Laoo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp5 = simd_and(r800_fff_tmp3, r800_fff_tmp4);
                  byte_ba = simd_and(r800_fff_tmp2, r800_fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp6));
                  sequence_e0_ba = simd_and(r800_fff_tmp6, byte_ba);
                  byte_e0_adv = r800_fff_tmp6;
                  r800_fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp8 = simd_andc(r800_ffff_tmp5, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  r800_fff_tmp10 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_81_82 = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(2), sequence_e0_ba_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_ba_adv, byte_range_81_82);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp11);
                  byte_84 = simd_and(r800_fff_tmp8, r800_ffff_tmp4);
                  r800_fff_tmp12 = simd_and(sequence_e0_ba_adv, byte_84);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp14 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp16 = simd_and(basis_bits.bit_5, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp14), simd_andc(r800_fff_tmp16, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp8, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(sequence_e0_ba_adv, byte_range_87_88);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp18);
                  byte_8a = simd_and(r800_fff_tmp8, r800_fff_tmp5);
                  r800_fff_tmp19 = simd_and(sequence_e0_ba_adv, byte_8a);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp22 = simd_and(r800_fff_tmp20, r800_fff_tmp21);
                  byte_8d = simd_and(r800_fff_tmp8, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_and(sequence_e0_ba_adv, byte_8d);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp23);
                  r800_fff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp25 = simd_and(r800_ffff_tmp5, r800_fff_tmp24);
                  byte_range_94_97 = simd_and(r800_fff_tmp25, r800_ffff_tmp2);
                  r800_fff_tmp26 = simd_and(sequence_e0_ba_adv, byte_range_94_97);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_and(r800_fff_tmp25, basis_bits.bit_4);
                  byte_range_99_9f = simd_and(r800_fff_tmp27, r800_fff_tmp13);
                  r800_fff_tmp28 = simd_and(sequence_e0_ba_adv, byte_range_99_9f);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp30 = simd_andc(r800_fff_tmp29, r800_ffff_tmp1);
                  byte_range_a1_a3 = simd_and(r800_fff_tmp30, r800_ffff_tmp3);
                  r800_fff_tmp31 = simd_and(sequence_e0_ba_adv, byte_range_a1_a3);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_and(r800_ffff_tmp2, r800_fff_tmp21);
                  byte_a5 = simd_and(r800_fff_tmp29, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(sequence_e0_ba_adv, byte_a5);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(r800_ffff_tmp2, r800_fff_tmp15);
                  byte_a7 = simd_and(r800_fff_tmp29, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_ba_adv, byte_a7);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r800_fff_tmp29, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_ba_adv, byte_range_aa_ab);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp39 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp40 = simd_and(basis_bits.bit_4, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_not(r800_fff_tmp40);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp20, r800_ffff_tmp3);
                  r800_fff_tmp43 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp41), simd_andc(r800_fff_tmp42, basis_bits.bit_3));
                  byte_range_ad_b9 = simd_and(r800_fff_tmp38, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(sequence_e0_ba_adv, byte_range_ad_b9);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(r800_fff_tmp2, basis_bits.bit_4);
                  r800_fff_tmp46 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp47 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp46), simd_andc(r800_fff_tmp15, basis_bits.bit_5));
                  byte_range_bb_bd = simd_and(r800_fff_tmp45, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_ba_adv, byte_range_bb_bd);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(r800_fff_tmp3, r800_fff_tmp15);
                  byte_bb = simd_and(r800_fff_tmp2, r800_fff_tmp49);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp50 = simd_andc(r800_fff_tmp8, basis_bits.bit_4);
                  r800_fff_tmp51 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r800_fff_tmp50, r800_fff_tmp51);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(3), sequence_e0_bb_adv));
                  r800_fff_tmp52 = simd_and(sequence_e0_bb_adv, byte_range_80_84);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(r800_ffff_tmp2, r800_fff_tmp4);
                  byte_86 = simd_and(r800_fff_tmp8, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_bb_adv, byte_86);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_and(r800_fff_tmp8, basis_bits.bit_4);
                  r800_fff_tmp56 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_88_8d = simd_andc(r800_fff_tmp55, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp57);
                  byte_range_90_99 = simd_andc(r800_fff_tmp25, r800_fff_tmp40);
                  r800_fff_tmp58 = simd_and(sequence_e0_bb_adv, byte_range_90_99);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp58);
                  byte_range_9c_9f = simd_and(r800_fff_tmp25, r800_fff_tmp20);
                  r800_fff_tmp59 = simd_and(sequence_e0_bb_adv, byte_range_9c_9f);
                  struct_sc_Laoo.cc = simd_or(struct_sc_Laoo.cc, r800_fff_tmp59);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mand {
  Property_sc_Mand() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mand & struct_sc_Mand) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a1, r800_fff_tmp4;
		BitBlock sequence_e0_a1, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, byte_range_80_9b, sequence_e0_a1_adv, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock byte_9e, r800_fff_tmp13;




        struct_sc_Mand.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a1 = simd_and(r800_fff_tmp4, byte_a1);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_3, r800_fff_tmp6);
                  byte_range_80_9b = simd_andc(r800_fff_tmp5, r800_fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(2), sequence_e0_a1_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a1_adv, byte_range_80_9b);
                  struct_sc_Mand.cc = simd_or(struct_sc_Mand.cc, r800_fff_tmp8);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp10 = simd_and(r800_ffff_tmp5, r800_fff_tmp9);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp6, r800_fff_tmp11);
                  byte_9e = simd_and(r800_fff_tmp10, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(sequence_e0_a1_adv, byte_9e);
                  struct_sc_Mand.cc = simd_or(struct_sc_Mand.cc, r800_fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Dsrt {
  Property_sc_Dsrt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Dsrt & struct_sc_Dsrt) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock sequence_f0_90_90, byte_f0_adv, sequence_f0_90_adv, byte_range_80_bf;
		BitBlock sequence_f0_90_90_adv, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_91, sequence_f0_90_91;
		BitBlock r10000_10ffff_tmp13, byte_range_80_8f, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_sc_Dsrt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp8));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp8, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp8;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(2), sequence_f0_90_90_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_90_90_adv, byte_range_80_bf);
            struct_sc_Dsrt.cc = simd_or(struct_sc_Dsrt.cc, r10000_10ffff_tmp9);
            r10000_10ffff_tmp10 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp12);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp13);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(3), sequence_f0_90_91_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_sc_Dsrt.cc = simd_or(struct_sc_Dsrt.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Guru {
  Property_sc_Guru() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Guru & struct_sc_Guru) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a8, r800_fff_tmp4;
		BitBlock sequence_e0_a8, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, byte_range_81_83, sequence_e0_a8_adv, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_range_85_8a, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock byte_range_8f_90, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, byte_range_93_a8, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32, byte_range_aa_b0;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36;
		BitBlock byte_range_b2_b3, r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39;
		BitBlock byte_range_b5_b6, r800_fff_tmp40, r800_fff_tmp41, byte_range_b8_b9;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, byte_bc, r800_fff_tmp44;
		BitBlock r800_fff_tmp45, byte_range_be_bf, r800_fff_tmp46, r800_fff_tmp47;
		BitBlock r800_fff_tmp48, byte_a9, sequence_e0_a9, byte_range_80_82;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, byte_range_87_88, r800_fff_tmp53, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, r800_fff_tmp56, byte_range_8b_8d, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60, byte_91;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63, byte_range_99_9c;
		BitBlock r800_fff_tmp64, r800_fff_tmp65, r800_fff_tmp66, byte_9e;
		BitBlock r800_fff_tmp67, r800_fff_tmp68, r800_fff_tmp69, r800_fff_tmp70;
		BitBlock byte_range_a6_b5, r800_fff_tmp71;




        struct_sc_Guru.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a8 = simd_and(r800_fff_tmp4, byte_a8);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_andc(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp7, r800_ffff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(2), sequence_e0_a8_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a8_adv, byte_range_81_83);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp8);
                  r800_fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_5, r800_fff_tmp9);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp11), simd_andc(r800_fff_tmp12, basis_bits.bit_4));
                  byte_range_85_8a = simd_and(r800_fff_tmp6, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_and(sequence_e0_a8_adv, byte_range_85_8a);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp16 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp17, r800_fff_tmp9);
                  r800_fff_tmp19 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp16), simd_andc(r800_fff_tmp18, basis_bits.bit_3));
                  byte_range_8f_90 = simd_and(r800_fff_tmp15, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(sequence_e0_a8_adv, byte_range_8f_90);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp22 = simd_and(basis_bits.bit_4, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_or(basis_bits.bit_3, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_not(r800_fff_tmp23);
                  r800_fff_tmp25 = simd_or(r800_ffff_tmp1, r800_fff_tmp9);
                  r800_fff_tmp26 = simd_and(basis_bits.bit_3, r800_fff_tmp25);
                  r800_fff_tmp27 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp24), simd_andc(r800_fff_tmp26, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp27);
                  r800_fff_tmp28 = simd_and(sequence_e0_a8_adv, byte_range_93_a8);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp30 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp31 = simd_and(basis_bits.bit_4, r800_fff_tmp30);
                  r800_fff_tmp32 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp16), simd_andc(r800_fff_tmp31, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp29, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(sequence_e0_a8_adv, byte_range_aa_b0);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp35 = simd_and(r800_ffff_tmp5, r800_fff_tmp34);
                  r800_fff_tmp36 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp35, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(sequence_e0_a8_adv, byte_range_b2_b3);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp35, r800_ffff_tmp2);
                  r800_fff_tmp39 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b5_b6 = simd_and(r800_fff_tmp38, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(sequence_e0_a8_adv, byte_range_b5_b6);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r800_fff_tmp35, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(sequence_e0_a8_adv, byte_range_b8_b9);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_andc(r800_fff_tmp17, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp35, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(sequence_e0_a8_adv, byte_bc);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(r800_fff_tmp17, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp35, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_a8_adv, byte_range_be_bf);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp48 = simd_and(r800_fff_tmp2, r800_fff_tmp47);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp48);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  byte_range_80_82 = simd_andc(r800_fff_tmp7, r800_fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(3), sequence_e0_a9_adv));
                  r800_fff_tmp49 = simd_and(sequence_e0_a9_adv, byte_range_80_82);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_not(r800_fff_tmp21);
                  r800_fff_tmp51 = simd_and(basis_bits.bit_5, r800_fff_tmp9);
                  r800_fff_tmp52 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp50), simd_andc(r800_fff_tmp51, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp6, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(sequence_e0_a9_adv, byte_range_87_88);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_fff_tmp6, basis_bits.bit_4);
                  r800_fff_tmp55 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp56 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp55), simd_andc(r800_fff_tmp9, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r800_fff_tmp54, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_a9_adv, byte_range_8b_8d);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp59 = simd_and(r800_ffff_tmp5, r800_fff_tmp58);
                  r800_fff_tmp60 = simd_andc(r800_fff_tmp47, r800_ffff_tmp1);
                  byte_91 = simd_and(r800_fff_tmp59, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(sequence_e0_a9_adv, byte_91);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_and(r800_fff_tmp59, basis_bits.bit_4);
                  r800_fff_tmp63 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_99_9c = simd_and(r800_fff_tmp62, r800_fff_tmp63);
                  r800_fff_tmp64 = simd_and(sequence_e0_a9_adv, byte_range_99_9c);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp66 = simd_and(r800_fff_tmp17, r800_fff_tmp65);
                  byte_9e = simd_and(r800_fff_tmp59, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(sequence_e0_a9_adv, byte_9e);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp69 = simd_or(basis_bits.bit_4, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_xor(basis_bits.bit_3, r800_fff_tmp69);
                  byte_range_a6_b5 = simd_and(r800_fff_tmp29, r800_fff_tmp70);
                  r800_fff_tmp71 = simd_and(sequence_e0_a9_adv, byte_range_a6_b5);
                  struct_sc_Guru.cc = simd_or(struct_sc_Guru.cc, r800_fff_tmp71);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mani {
  Property_sc_Mani() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mani & struct_sc_Mani) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ab, r10000_10ffff_tmp13, sequence_f0_90_ab;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_a6, sequence_f0_90_ab_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, byte_range_ab_b6;
		BitBlock r10000_10ffff_tmp24;




        struct_sc_Mani.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ab = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ab = simd_and(r10000_10ffff_tmp13, byte_ab);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp16);
            byte_range_80_a6 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(2), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_ab_adv, byte_range_80_a6);
            struct_sc_Mani.cc = simd_or(struct_sc_Mani.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_not(r10000_10ffff_tmp15);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp20), simd_andc(r10000_10ffff_tmp22, basis_bits.bit_3));
            byte_range_ab_b6 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(sequence_f0_90_ab_adv, byte_range_ab_b6);
            struct_sc_Mani.cc = simd_or(struct_sc_Mani.cc, r10000_10ffff_tmp24);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Bali {
  Property_sc_Bali() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Bali & struct_sc_Bali) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_ac;
		BitBlock r1000_1fff_tmp4, sequence_e1_ac, byte_e1_adv, byte_range_80_bf;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock byte_ad, sequence_e1_ad, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_80_8b, sequence_e1_ad_adv, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, byte_range_90_bc, r1000_1fff_tmp15;




        struct_sc_Bali.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp3);
                  byte_ac = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_ac = simd_and(r1000_1fff_tmp4, byte_ac);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(2), sequence_e1_ac_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_ac_adv, byte_range_80_bf);
                  struct_sc_Bali.cc = simd_or(struct_sc_Bali.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp7);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp9 = simd_andc(byte_range_80_bf, r1000_1fff_tmp8);
                  byte_range_80_8b = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(3), sequence_e1_ad_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_ad_adv, byte_range_80_8b);
                  struct_sc_Bali.cc = simd_or(struct_sc_Bali.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp3);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_3, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_not(r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp13), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_bc = simd_and(byte_range_80_bf, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_ad_adv, byte_range_90_bc);
                  struct_sc_Bali.cc = simd_or(struct_sc_Bali.cc, r1000_1fff_tmp15);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Tibt {
  Property_sc_Tibt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tibt & struct_sc_Tibt) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_bc;
		BitBlock r800_fff_tmp5, sequence_e0_bc, byte_e0_adv, byte_range_80_bf;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, byte_bd, sequence_e0_bd, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, byte_range_80_87, sequence_e0_bd_adv, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19, byte_range_89_ac;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, byte_range_b1_bf, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_be, sequence_e0_be;
		BitBlock r800_fff_tmp25, byte_range_80_97, sequence_e0_be_adv, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock byte_range_99_bc, r800_fff_tmp31, r800_fff_tmp32, byte_range_be_bf;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, r800_fff_tmp35, byte_bf;
		BitBlock sequence_e0_bf, r800_fff_tmp36, r800_fff_tmp37, byte_range_80_8c;
		BitBlock sequence_e0_bf_adv, r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40;
		BitBlock r800_fff_tmp41, byte_range_8e_94, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47;
		BitBlock byte_range_99_9a, r800_fff_tmp48;




        struct_sc_Tibt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 5))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 5))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 5))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(r800_fff_tmp3, r800_ffff_tmp3);
                  byte_bc = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_bc = simd_and(r800_fff_tmp5, byte_bc);
                  byte_e0_adv = r800_fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_bc_adv, byte_range_80_bf);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_and(byte_range_80_bf, r800_fff_tmp1);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp9 = simd_and(r800_fff_tmp3, r800_fff_tmp8);
                  byte_bd = simd_and(r800_fff_tmp7, r800_fff_tmp9);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp11 = simd_andc(byte_range_80_bf, r800_fff_tmp10);
                  byte_range_80_87 = simd_andc(r800_fff_tmp11, basis_bits.bit_4);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(3), sequence_e0_bd_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_bd_adv, byte_range_80_87);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp3, r800_ffff_tmp3);
                  r800_fff_tmp14 = simd_or(basis_bits.bit_3, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_not(r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_4, r800_fff_tmp16);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_3, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp15), simd_andc(r800_fff_tmp18, basis_bits.bit_2));
                  byte_range_89_ac = simd_and(byte_range_80_bf, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(sequence_e0_bd_adv, byte_range_89_ac);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_or(basis_bits.bit_4, r800_fff_tmp16);
                  byte_range_b1_bf = simd_and(r800_fff_tmp7, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_and(sequence_e0_bd_adv, byte_range_b1_bf);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp24 = simd_and(r800_fff_tmp3, r800_fff_tmp23);
                  byte_be = simd_and(r800_fff_tmp7, r800_fff_tmp24);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp25 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_80_97 = simd_andc(r800_fff_tmp25, r800_ffff_tmp6);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(4), sequence_e0_be_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_be_adv, byte_range_80_97);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_and(basis_bits.bit_3, r800_fff_tmp13);
                  r800_fff_tmp28 = simd_not(r800_fff_tmp27);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_3, r800_fff_tmp17);
                  r800_fff_tmp30 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp28), simd_andc(r800_fff_tmp29, basis_bits.bit_2));
                  byte_range_99_bc = simd_and(byte_range_80_bf, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(sequence_e0_be_adv, byte_range_99_bc);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r800_fff_tmp7, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(sequence_e0_be_adv, byte_range_be_bf);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp35 = simd_and(r800_fff_tmp3, r800_fff_tmp34);
                  byte_bf = simd_and(r800_fff_tmp7, r800_fff_tmp35);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp36 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp37 = simd_and(basis_bits.bit_4, r800_fff_tmp36);
                  byte_range_80_8c = simd_andc(r800_fff_tmp11, r800_fff_tmp37);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(5), sequence_e0_bf_adv));
                  r800_fff_tmp38 = simd_and(sequence_e0_bf_adv, byte_range_80_8c);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_or(basis_bits.bit_4, r800_fff_tmp36);
                  r800_fff_tmp40 = simd_not(r800_fff_tmp39);
                  r800_fff_tmp41 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp40), simd_andc(r800_fff_tmp32, basis_bits.bit_3));
                  byte_range_8e_94 = simd_and(r800_fff_tmp25, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(sequence_e0_bf_adv, byte_range_8e_94);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp44 = simd_and(byte_range_80_bf, r800_fff_tmp43);
                  r800_fff_tmp45 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp46 = simd_and(r800_fff_tmp44, r800_fff_tmp45);
                  r800_fff_tmp47 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r800_fff_tmp46, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_bf_adv, byte_range_99_9a);
                  struct_sc_Tibt.cc = simd_or(struct_sc_Tibt.cc, r800_fff_tmp48);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Brah {
  Property_sc_Brah() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Brah & struct_sc_Brah) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_80;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91_80, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_80_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_81, sequence_f0_91_81;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_8d, sequence_f0_91_81_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, byte_range_92_af, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_bf, r10000_10ffff_tmp28;




        struct_sc_Brah.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            byte_80 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp12, byte_80);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(2), sequence_f0_91_80_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_80_adv, byte_range_80_bf);
            struct_sc_Brah.cc = simd_or(struct_sc_Brah.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            byte_81 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp8);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp16);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(3), sequence_f0_91_81_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_81_adv, byte_range_80_8d);
            struct_sc_Brah.cc = simd_or(struct_sc_Brah.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp20 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp19), simd_andc(r10000_10ffff_tmp21, basis_bits.bit_2));
            byte_range_92_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_81_adv, byte_range_92_af);
            struct_sc_Brah.cc = simd_or(struct_sc_Brah.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp26);
            byte_bf = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(sequence_f0_91_81_adv, byte_bf);
            struct_sc_Brah.cc = simd_or(struct_sc_Brah.cc, r10000_10ffff_tmp28);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Brai {
  Property_sc_Brai() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Brai & struct_sc_Brai) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, byte_range_a0_a3;
		BitBlock r2000_2fff_tmp2, byte_e2_byte_range_a0_a3, byte_range_80_bf;
		BitBlock r2000_2fff_tmp3, byte_e2_byte_range_a0_a3_sfx;




        struct_sc_Brai.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r2000_2fff_tmp1, r800_ffff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp2));
                  byte_e2_byte_range_a0_a3 = simd_and(r2000_2fff_tmp2, byte_range_a0_a3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a0_a3, carryQ.get_carry_in(2), r2000_2fff_tmp3));
                  byte_e2_byte_range_a0_a3_sfx = simd_and(r2000_2fff_tmp3, byte_range_80_bf);
                  struct_sc_Brai.cc = simd_or(struct_sc_Brai.cc, byte_e2_byte_range_a0_a3_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Cprt {
  Property_sc_Cprt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cprt & struct_sc_Cprt) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_a0, r10000_10ffff_tmp10, sequence_f0_90_a0;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_80_85, sequence_f0_90_a0_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_88;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_range_8a_b5;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, byte_range_b7_b8, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, byte_bc;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, byte_bf;
		BitBlock r10000_10ffff_tmp38;




        struct_sc_Cprt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_a0 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_a0 = simd_and(r10000_10ffff_tmp10, byte_a0);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, basis_bits.bit_4);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(2), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_a0_adv, byte_range_80_85);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_a0_adv, byte_88);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_2));
            byte_range_8a_b5 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_a0_adv, byte_range_8a_b5);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp29 = simd_not(r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp31 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp29), simd_andc(r10000_10ffff_tmp31, basis_bits.bit_4));
            byte_range_b7_b8 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a0_adv, byte_range_b7_b8);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp2);
            byte_bc = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_a0_adv, byte_bc);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp30);
            byte_bf = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_a0_adv, byte_bf);
            struct_sc_Cprt.cc = simd_or(struct_sc_Cprt.cc, r10000_10ffff_tmp38);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Gran {
  Property_sc_Gran() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Gran & struct_sc_Gran) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_8c;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_8c, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, byte_range_81_83;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_85_8c, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, byte_range_8f_90;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, byte_range_93_a8;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, byte_range_aa_b0;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock byte_range_b2_b3, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, byte_range_b5_b9, r10000_10ffff_tmp44;
		BitBlock byte_range_bc_bf, r10000_10ffff_tmp45, r10000_10ffff_tmp46, byte_8d;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp47, byte_range_80_84;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, byte_range_87_88;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, byte_range_8b_8d, r10000_10ffff_tmp56;
		BitBlock r10000_10ffff_tmp57, r10000_10ffff_tmp58, byte_97;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock byte_range_9d_a3, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock r10000_10ffff_tmp67, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, byte_range_a6_ac, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, byte_range_b0_b4, r10000_10ffff_tmp73;




        struct_sc_Gran.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_8c = simd_and(r10000_10ffff_tmp14, byte_8c);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_range_81_83 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(2), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_8c_adv, byte_range_81_83);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp18 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp17);
            byte_range_85_8c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_8c_adv, byte_range_85_8c);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp23, basis_bits.bit_3));
            byte_range_8f_90 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_91_8c_adv, byte_range_8f_90);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_not(r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp22);
            r10000_10ffff_tmp31 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp29), simd_andc(r10000_10ffff_tmp31, basis_bits.bit_2));
            byte_range_93_a8 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_91_8c_adv, byte_range_93_a8);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp35 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_3));
            byte_range_aa_b0 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_91_8c_adv, byte_range_aa_b0);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_b2_b3 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(sequence_f0_91_8c_adv, byte_range_b2_b3);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_not(r10000_10ffff_tmp35);
            r10000_10ffff_tmp43 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp42), simd_andc(r10000_10ffff_tmp17, basis_bits.bit_4));
            byte_range_b5_b9 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_8c_adv, byte_range_b5_b9);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp44);
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp12);
            r10000_10ffff_tmp45 = simd_and(sequence_f0_91_8c_adv, byte_range_bc_bf);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_8d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp46);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp47 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp47, r10000_10ffff_tmp17);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(3), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_8d_adv, byte_range_80_84);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_not(r10000_10ffff_tmp26);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp22);
            r10000_10ffff_tmp51 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp49), simd_andc(r10000_10ffff_tmp50, basis_bits.bit_4));
            byte_range_87_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_and(sequence_f0_91_8d_adv, byte_range_87_88);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_4);
            r10000_10ffff_tmp54 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp55 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp54), simd_andc(r10000_10ffff_tmp22, basis_bits.bit_5));
            byte_range_8b_8d = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_and(sequence_f0_91_8d_adv, byte_range_8b_8d);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp58 = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp22);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp58);
            r10000_10ffff_tmp59 = simd_and(sequence_f0_91_8d_adv, byte_97);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp61 = simd_not(r10000_10ffff_tmp60);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            r10000_10ffff_tmp63 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp61), simd_andc(r10000_10ffff_tmp63, basis_bits.bit_2));
            byte_range_9d_a3 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp64);
            r10000_10ffff_tmp65 = simd_and(sequence_f0_91_8d_adv, byte_range_9d_a3);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp69 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp70 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp68), simd_andc(r10000_10ffff_tmp69, basis_bits.bit_4));
            byte_range_a6_ac = simd_and(r10000_10ffff_tmp67, r10000_10ffff_tmp70);
            r10000_10ffff_tmp71 = simd_and(sequence_f0_91_8d_adv, byte_range_a6_ac);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_andc(r10000_10ffff_tmp39, basis_bits.bit_4);
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp72, r10000_10ffff_tmp17);
            r10000_10ffff_tmp73 = simd_and(sequence_f0_91_8d_adv, byte_range_b0_b4);
            struct_sc_Gran.cc = simd_or(struct_sc_Gran.cc, r10000_10ffff_tmp73);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mtei {
  Property_sc_Mtei() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mtei & struct_sc_Mtei) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ab, ra000_ffff_tmp8;
		BitBlock sequence_ea_ab, byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_a0_b6;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, byte_af, sequence_ea_af, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, byte_range_80_ad;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_range_b0_b9;
		BitBlock ra000_ffff_tmp23;




        struct_sc_Mtei.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ab = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_ab = simd_and(ra000_ffff_tmp8, byte_ab);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, ra000_ffff_tmp6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_4, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_3, ra000_ffff_tmp11);
              byte_range_a0_b6 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp12);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(1), sequence_ea_ab_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_ab_adv, byte_range_a0_b6);
              struct_sc_Mtei.cc = simd_or(struct_sc_Mtei.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp6);
              byte_af = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp15);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp14, basis_bits.bit_6);
              ra000_ffff_tmp17 = simd_or(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_2, ra000_ffff_tmp17);
              byte_range_80_ad = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp18);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(2), sequence_ea_af_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_af_adv, byte_range_80_ad);
              struct_sc_Mtei.cc = simd_or(struct_sc_Mtei.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_4, r800_ffff_tmp2);
              byte_range_b0_b9 = simd_andc(ra000_ffff_tmp21, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(sequence_ea_af_adv, byte_range_b0_b9);
              struct_sc_Mtei.cc = simd_or(struct_sc_Mtei.cc, ra000_ffff_tmp23);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Mend {
  Property_sc_Mend() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mend & struct_sc_Mend) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9e;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9e, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_a0_a2, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9e_byte_range_a0_a2, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp16, sequence_f0_9e_byte_range_a0_a2_sfx;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_a3, sequence_f0_9e_a3;
		BitBlock r10000_10ffff_tmp19, byte_f0_adv, sequence_f0_9e_adv;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, byte_range_80_84, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, byte_range_87_96;
		BitBlock r10000_10ffff_tmp29;




        struct_sc_Mend.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9e = simd_and(r10000_10ffff_tmp10, byte_9e);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp15, byte_range_a0_a2);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(2), r10000_10ffff_tmp16));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp16, byte_range_80_bf);
            struct_sc_Mend.cc = simd_or(struct_sc_Mend.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_a3 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp15, byte_a3);
            r10000_10ffff_tmp19 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_9e_adv = r10000_10ffff_tmp15;
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp21 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(3), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_9e_a3_adv, byte_range_80_84);
            struct_sc_Mend.cc = simd_or(struct_sc_Mend.cc, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp14);
            r10000_10ffff_tmp27 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_xor(basis_bits.bit_3, r10000_10ffff_tmp27);
            byte_range_87_96 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_and(sequence_f0_9e_a3_adv, byte_range_87_96);
            struct_sc_Mend.cc = simd_or(struct_sc_Mend.cc, r10000_10ffff_tmp29);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Orkh {
  Property_sc_Orkh() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Orkh & struct_sc_Orkh) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8, byte_b0;
		BitBlock r10000_10ffff_tmp9, sequence_f0_90_b0, byte_f0_adv;
		BitBlock sequence_f0_90_adv, byte_range_80_bf, sequence_f0_90_b0_adv;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, byte_b1, sequence_f0_90_b1, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_88, sequence_f0_90_b1_adv;
		BitBlock r10000_10ffff_tmp19;




        struct_sc_Orkh.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_b0 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp9));
            sequence_f0_90_b0 = simd_and(r10000_10ffff_tmp9, byte_b0);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp9;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(2), sequence_f0_90_b0_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
            struct_sc_Orkh.cc = simd_or(struct_sc_Orkh.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_b1 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp17);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(3), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_b1_adv, byte_range_80_88);
            struct_sc_Orkh.cc = simd_or(struct_sc_Orkh.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Lyci {
  Property_sc_Lyci() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lyci & struct_sc_Lyci) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8a, r10000_10ffff_tmp13, sequence_f0_90_8a;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_9c, sequence_f0_90_8a_adv, r10000_10ffff_tmp18;




        struct_sc_Lyci.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8a = simd_and(r10000_10ffff_tmp13, byte_8a);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_80_9c = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(2), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_8a_adv, byte_range_80_9c);
            struct_sc_Lyci.cc = simd_or(struct_sc_Lyci.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Knda {
  Property_sc_Knda() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Knda & struct_sc_Knda) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_b2;
		BitBlock r800_fff_tmp5, sequence_e0_b2, byte_e0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_range_81_83, sequence_e0_b2_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, byte_range_85_8c;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, byte_range_8e_90, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_range_92_a8, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, byte_range_aa_b3, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, byte_range_b5_b9, r800_fff_tmp34, byte_range_bc_bf;
		BitBlock r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37, byte_b3;
		BitBlock sequence_e0_b3, r800_fff_tmp38, byte_range_80_84, sequence_e0_b3_adv;
		BitBlock r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock byte_range_86_88, r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock byte_range_8a_8d, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, byte_range_95_96, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, byte_9e, r800_fff_tmp53, r800_fff_tmp54;
		BitBlock byte_range_a0_a3, r800_fff_tmp55, r800_fff_tmp56, byte_range_a6_af;
		BitBlock r800_fff_tmp57, r800_fff_tmp58, byte_range_b1_b2, r800_fff_tmp59;




        struct_sc_Knda.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp4 = simd_andc(r800_fff_tmp3, r800_ffff_tmp1);
                  byte_b2 = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_b2 = simd_and(r800_fff_tmp5, byte_b2);
                  byte_e0_adv = r800_fff_tmp5;
                  r800_fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_andc(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp8, r800_ffff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(2), sequence_e0_b2_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_b2_adv, byte_range_81_83);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp11 = simd_xor(basis_bits.bit_4, r800_fff_tmp10);
                  byte_range_85_8c = simd_and(r800_fff_tmp7, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(sequence_e0_b2_adv, byte_range_85_8c);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp14 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp15, basis_bits.bit_6);
                  r800_fff_tmp17 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp14), simd_andc(r800_fff_tmp16, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp13, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(sequence_e0_b2_adv, byte_range_8e_90);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp20 = simd_and(basis_bits.bit_4, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_or(basis_bits.bit_3, r800_fff_tmp20);
                  r800_fff_tmp22 = simd_not(r800_fff_tmp21);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp22), simd_andc(r800_fff_tmp23, basis_bits.bit_2));
                  byte_range_92_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_b2_adv, byte_range_92_a8);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp27 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp28 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_4, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp27), simd_andc(r800_fff_tmp29, basis_bits.bit_3));
                  byte_range_aa_b3 = simd_and(r800_fff_tmp26, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(sequence_e0_b2_adv, byte_range_aa_b3);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_not(r800_fff_tmp28);
                  r800_fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp32), simd_andc(r800_fff_tmp10, basis_bits.bit_4));
                  byte_range_b5_b9 = simd_and(r800_fff_tmp2, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(sequence_e0_b2_adv, byte_range_b5_b9);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp34);
                  byte_range_bc_bf = simd_and(r800_fff_tmp2, r800_fff_tmp15);
                  r800_fff_tmp35 = simd_and(sequence_e0_b2_adv, byte_range_bc_bf);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp37 = simd_andc(r800_fff_tmp36, r800_ffff_tmp1);
                  byte_b3 = simd_and(r800_fff_tmp2, r800_fff_tmp37);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp38 = simd_andc(r800_fff_tmp7, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r800_fff_tmp38, r800_fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(3), sequence_e0_b3_adv));
                  r800_fff_tmp39 = simd_and(sequence_e0_b3_adv, byte_range_80_84);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_not(r800_fff_tmp19);
                  r800_fff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp42 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp40), simd_andc(r800_fff_tmp41, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp7, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_b3_adv, byte_range_86_88);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp45 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8d = simd_and(r800_fff_tmp44, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_b3_adv, byte_range_8a_8d);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp48 = simd_and(r800_ffff_tmp5, r800_fff_tmp47);
                  r800_fff_tmp49 = simd_and(r800_fff_tmp48, r800_ffff_tmp2);
                  r800_fff_tmp50 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_95_96 = simd_and(r800_fff_tmp49, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_and(sequence_e0_b3_adv, byte_range_95_96);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp15, r800_fff_tmp3);
                  byte_9e = simd_and(r800_fff_tmp48, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(sequence_e0_b3_adv, byte_9e);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r800_fff_tmp54, r800_ffff_tmp1);
                  r800_fff_tmp55 = simd_and(sequence_e0_b3_adv, byte_range_a0_a3);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_or(basis_bits.bit_4, r800_fff_tmp41);
                  byte_range_a6_af = simd_and(r800_fff_tmp54, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(sequence_e0_b3_adv, byte_range_a6_af);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_range_b1_b2 = simd_and(r800_fff_tmp58, r800_fff_tmp50);
                  r800_fff_tmp59 = simd_and(sequence_e0_b3_adv, byte_range_b1_b2);
                  struct_sc_Knda.cc = simd_or(struct_sc_Knda.cc, r800_fff_tmp59);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Tirh {
  Property_sc_Tirh() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tirh & struct_sc_Tirh) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_92;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91_92, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, byte_93, sequence_f0_91_93, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_87, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock byte_range_90_99, r10000_10ffff_tmp22;




        struct_sc_Tirh.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_92 = simd_and(r10000_10ffff_tmp12, byte_92);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(2), sequence_f0_91_92_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_92_adv, byte_range_80_bf);
            struct_sc_Tirh.cc = simd_or(struct_sc_Tirh.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp18 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp17);
            byte_range_80_87 = simd_andc(r10000_10ffff_tmp18, basis_bits.bit_4);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(3), sequence_f0_91_93_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_93_adv, byte_range_80_87);
            struct_sc_Tirh.cc = simd_or(struct_sc_Tirh.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp20);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_91_93_adv, byte_range_90_99);
            struct_sc_Tirh.cc = simd_or(struct_sc_Tirh.cc, r10000_10ffff_tmp22);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Hira {
  Property_sc_Hira() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hira & struct_sc_Hira) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_81;
		BitBlock r3000_4dff_tmp5, sequence_e3_81, byte_e3_adv, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, byte_range_81_bf;
		BitBlock sequence_e3_81_adv, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, byte_82, sequence_e3_82, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, r3000_4dff_tmp15;
		BitBlock byte_range_80_96, sequence_e3_82_adv, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock r3000_4dff_tmp20, byte_range_9d_9f, r3000_4dff_tmp21, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_9b, r10000_10ffff_tmp10, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_80;
		BitBlock r10000_10ffff_tmp13, sequence_f0_9b_80, byte_f0_adv;
		BitBlock sequence_f0_9b_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_9f, sequence_f0_9f, r10000_10ffff_tmp19;
		BitBlock byte_88, r10000_10ffff_tmp20, sequence_f0_9f_88, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_88_adv, r10000_10ffff_tmp21;




        struct_sc_Hira.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 9))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_81 = simd_and(r3000_4dff_tmp5, byte_81);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_3, r3000_4dff_tmp6);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_2, r3000_4dff_tmp7);
                  byte_range_81_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(2), sequence_e3_81_adv));
                  r3000_4dff_tmp9 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_sc_Hira.cc = simd_or(struct_sc_Hira.cc, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp11 = simd_andc(r3000_4dff_tmp10, r800_ffff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp11);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp12 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_5, r2000_4dff_tmp1);
                  r3000_4dff_tmp14 = simd_or(basis_bits.bit_4, r3000_4dff_tmp13);
                  r3000_4dff_tmp15 = simd_and(basis_bits.bit_3, r3000_4dff_tmp14);
                  byte_range_80_96 = simd_andc(r3000_4dff_tmp12, r3000_4dff_tmp15);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(3), sequence_e3_82_adv));
                  r3000_4dff_tmp16 = simd_and(sequence_e3_82_adv, byte_range_80_96);
                  struct_sc_Hira.cc = simd_or(struct_sc_Hira.cc, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp19);
                  byte_range_9d_9f = simd_and(r3000_4dff_tmp20, r800_ffff_tmp3);
                  r3000_4dff_tmp21 = simd_and(sequence_e3_82_adv, byte_range_9d_9f);
                  struct_sc_Hira.cc = simd_or(struct_sc_Hira.cc, r3000_4dff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(4, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(4), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_80 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp3);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(5), r10000_10ffff_tmp13));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp13, byte_80);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_9b_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(6), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9b_80_adv, byte_81);
            struct_sc_Hira.cc = simd_or(struct_sc_Hira.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp18);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp19);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(7), r10000_10ffff_tmp20));
            sequence_f0_9f_88 = simd_and(r10000_10ffff_tmp20, byte_88);
            sequence_f0_9f_adv = r10000_10ffff_tmp20;
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(8), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_9f_88_adv, byte_80);
            struct_sc_Hira.cc = simd_or(struct_sc_Hira.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<9, 0> carryQ;
  };

  struct Property_sc_Kana {
  Property_sc_Kana() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Kana & struct_sc_Kana) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_82;
		BitBlock r3000_4dff_tmp5, sequence_e3_82, byte_e3_adv, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, byte_range_a1_bf;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp9, byte_83, sequence_e3_83;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_80_ba, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, byte_range_bd_bf;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, byte_87, sequence_e3_87;
		BitBlock byte_range_b0_bf, sequence_e3_87_adv, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, r3000_4dff_tmp23, byte_8b, sequence_e3_8b;
		BitBlock r3000_4dff_tmp24, r3000_4dff_tmp25, r3000_4dff_tmp26;
		BitBlock r3000_4dff_tmp27, byte_range_90_be, sequence_e3_8b_adv;
		BitBlock r3000_4dff_tmp28, r3000_4dff_tmp29, byte_8c, sequence_e3_8c;
		BitBlock byte_range_80_bf, sequence_e3_8c_adv, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, r3000_4dff_tmp33, byte_8d;
		BitBlock sequence_e3_8d, r3000_4dff_tmp34, byte_range_80_97;
		BitBlock sequence_e3_8d_adv, r3000_4dff_tmp35, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_bd, ra000_ffff_tmp8;
		BitBlock sequence_ef_bd, byte_ef_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_range_a6_af, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock byte_range_b1_bf, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_be, sequence_ef_be, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, byte_range_80_9d;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp21, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_9b, r10000_10ffff_tmp10, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_80;
		BitBlock r10000_10ffff_tmp13, sequence_f0_9b_80, byte_f0_adv;
		BitBlock sequence_f0_9b_adv, sequence_f0_9b_80_adv, r10000_10ffff_tmp14;




        struct_sc_Kana.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 14))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 11))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 7))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 7))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 7))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_82 = simd_and(r3000_4dff_tmp5, byte_82);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp7 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_3, r3000_4dff_tmp7);
                  byte_range_a1_bf = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(2), sequence_e3_82_adv));
                  r3000_4dff_tmp9 = simd_and(sequence_e3_82_adv, byte_range_a1_bf);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp9);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r2000_4dff_tmp1);
                  r3000_4dff_tmp11 = simd_and(basis_bits.bit_4, r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_and(basis_bits.bit_3, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_2, r3000_4dff_tmp12);
                  byte_range_80_ba = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(3), sequence_e3_83_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_83_adv, byte_range_80_ba);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp14);
                  r3000_4dff_tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp16 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp15);
                  r3000_4dff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp18 = simd_and(r3000_4dff_tmp16, r3000_4dff_tmp17);
                  byte_range_bd_bf = simd_and(r3000_4dff_tmp18, r800_ffff_tmp3);
                  r3000_4dff_tmp19 = simd_and(sequence_e3_83_adv, byte_range_bd_bf);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp19);
                  r3000_4dff_tmp20 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp20);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = r3000_4dff_tmp16;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(4), sequence_e3_87_adv));
                  r3000_4dff_tmp21 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp21);
                  r3000_4dff_tmp22 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp23 = simd_and(r3000_4dff_tmp22, r2000_4dff_tmp1);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp23);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  r3000_4dff_tmp24 = simd_and(r3000_4dff_tmp17, r2000_4dff_tmp1);
                  r3000_4dff_tmp25 = simd_and(basis_bits.bit_3, r3000_4dff_tmp24);
                  r3000_4dff_tmp26 = simd_not(r3000_4dff_tmp25);
                  r3000_4dff_tmp27 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp26), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_be = simd_and(r800_ffff_tmp5, r3000_4dff_tmp27);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(5), sequence_e3_8b_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e3_8b_adv, byte_range_90_be);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp28);
                  r3000_4dff_tmp29 = simd_andc(r3000_4dff_tmp17, r800_ffff_tmp3);
                  byte_8c = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp29);
                  sequence_e3_8c = simd_and(byte_e3_adv, byte_8c);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e3_8c, carryQ.get_carry_in(6), sequence_e3_8c_adv));
                  r3000_4dff_tmp30 = simd_and(sequence_e3_8c_adv, byte_range_80_bf);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp30);
                  r3000_4dff_tmp31 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp32 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp33 = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp32);
                  byte_8d = simd_and(r3000_4dff_tmp31, r3000_4dff_tmp33);
                  sequence_e3_8d = simd_and(byte_e3_adv, byte_8d);
                  r3000_4dff_tmp34 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_80_97 = simd_andc(r3000_4dff_tmp34, r800_ffff_tmp6);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e3_8d, carryQ.get_carry_in(7), sequence_e3_8d_adv));
                  r3000_4dff_tmp35 = simd_and(sequence_e3_8d_adv, byte_range_80_97);
                  struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r3000_4dff_tmp35);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 7);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 7);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(8, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_bd = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(8), ra000_ffff_tmp8));
              sequence_ef_bd = simd_and(ra000_ffff_tmp8, byte_bd);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_4, ra000_ffff_tmp10);
              byte_range_a6_af = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp11);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(9), sequence_ef_bd_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_bd_adv, byte_range_a6_af);
              struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_4, ra000_ffff_tmp13);
              byte_range_b1_bf = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_and(sequence_ef_bd_adv, byte_range_b1_bf);
              struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp16);
              byte_be = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp18 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_3, ra000_ffff_tmp19);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp20);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(10), sequence_ef_be_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ef_be_adv, byte_range_80_9d);
              struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, ra000_ffff_tmp21);
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 11);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(11, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(11), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_80 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp3);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(12), r10000_10ffff_tmp13));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp13, byte_80);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_9b_adv = r10000_10ffff_tmp13;
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(13), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9b_80_adv, byte_80);
            struct_sc_Kana.cc = simd_or(struct_sc_Kana.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 14);
        }
        carryQ.CarryQ_Adjust(14);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<14, 0> carryQ;
  };

  struct Property_sc_Hebr {
  Property_sc_Hebr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hebr & struct_sc_Hebr) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, r400_5ff_tmp3;
		BitBlock byte_d6, r400_5ff_tmp4, r400_5ff_tmp5, byte_range_90_bf;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9, byte_d7;
		BitBlock r400_5ff_tmp10, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3;
		BitBlock r590_5ff_tmp4, r590_5ff_tmp5, byte_range_91_bf, byte_d6_adv;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, byte_range_80_87, byte_d7_adv;
		BitBlock r590_5ff_tmp8, r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11;
		BitBlock r590_5ff_tmp12, r590_5ff_tmp13, byte_range_90_aa, r590_5ff_tmp14;
		BitBlock r590_5ff_tmp15, r590_5ff_tmp16, r590_5ff_tmp17, r590_5ff_tmp18;
		BitBlock byte_range_b0_b4, r590_5ff_tmp19, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ac;
		BitBlock ra000_ffff_tmp8, sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock byte_range_9d_b6, sequence_ef_ac_adv, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_range_b8_bc, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, byte_be, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, byte_ad, sequence_ef_ad;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, byte_range_80_81, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, byte_range_83_84, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, byte_range_86_8f;
		BitBlock ra000_ffff_tmp38;




        struct_sc_Hebr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r400_5ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_90_bf);
              r400_5ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp1, r400_5ff_tmp8);
              byte_d7 = simd_and(r80_7ff_tmp2, r400_5ff_tmp9);
              r400_5ff_tmp10 = simd_or(r400_5ff_tmp7, byte_d7);
              if ((bitblock::any(r400_5ff_tmp10) || carryQ.CarryTest(1, 1))) {
                r590_5ff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp3 = simd_or(r590_5ff_tmp1, r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_3, r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_or(basis_bits.bit_2, r590_5ff_tmp4);
                byte_range_91_bf = simd_and(r400_5ff_tmp4, r590_5ff_tmp5);
                byte_d6_adv = r400_5ff_tmp6;
                r590_5ff_tmp6 = simd_and(byte_d6_adv, byte_range_91_bf);
                struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, r590_5ff_tmp6);
                r590_5ff_tmp7 = simd_andc(r400_5ff_tmp4, r400_5ff_tmp5);
                byte_range_80_87 = simd_andc(r590_5ff_tmp7, basis_bits.bit_4);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(1), byte_d7_adv));
                r590_5ff_tmp8 = simd_and(byte_d7_adv, byte_range_80_87);
                struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_or(basis_bits.bit_5, r400_5ff_tmp8);
                r590_5ff_tmp10 = simd_and(basis_bits.bit_4, r590_5ff_tmp9);
                r590_5ff_tmp11 = simd_or(basis_bits.bit_3, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_not(r590_5ff_tmp11);
                r590_5ff_tmp13 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp12), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                byte_range_90_aa = simd_and(r400_5ff_tmp4, r590_5ff_tmp13);
                r590_5ff_tmp14 = simd_and(byte_d7_adv, byte_range_90_aa);
                struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, r590_5ff_tmp14);
                r590_5ff_tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp16 = simd_and(r400_5ff_tmp4, r590_5ff_tmp15);
                r590_5ff_tmp17 = simd_andc(r590_5ff_tmp16, basis_bits.bit_4);
                r590_5ff_tmp18 = simd_and(basis_bits.bit_5, r590_5ff_tmp2);
                byte_range_b0_b4 = simd_andc(r590_5ff_tmp17, r590_5ff_tmp18);
                r590_5ff_tmp19 = simd_and(byte_d7_adv, byte_range_b0_b4);
                struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, r590_5ff_tmp19);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(2, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ac = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(2), ra000_ffff_tmp8));
              sequence_ef_ac = simd_and(ra000_ffff_tmp8, byte_ac);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_5, ra000_ffff_tmp2);
              ra000_ffff_tmp10 = simd_or(basis_bits.bit_4, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_3, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp12), simd_andc(ra000_ffff_tmp14, basis_bits.bit_2));
              byte_range_9d_b6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp15);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(3), sequence_ef_ac_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ef_ac_adv, byte_range_9d_b6);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp18, basis_bits.bit_4);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_5, ra000_ffff_tmp6);
              byte_range_b8_bc = simd_andc(ra000_ffff_tmp19, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(sequence_ef_ac_adv, byte_range_b8_bc);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp22);
              byte_be = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(sequence_ef_ac_adv, byte_be);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp25);
              byte_ad = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp26);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              ra000_ffff_tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp28 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp27);
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp29, basis_bits.bit_6);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp30);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(4), sequence_ef_ad_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ef_ad_adv, byte_range_80_81);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_andc(ra000_ffff_tmp28, basis_bits.bit_4);
              ra000_ffff_tmp33 = simd_not(ra000_ffff_tmp6);
              ra000_ffff_tmp34 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp33), simd_andc(ra000_ffff_tmp2, basis_bits.bit_5));
              byte_range_83_84 = simd_and(ra000_ffff_tmp32, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(sequence_ef_ad_adv, byte_range_83_84);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp37 = simd_or(basis_bits.bit_4, ra000_ffff_tmp36);
              byte_range_86_8f = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(sequence_ef_ad_adv, byte_range_86_8f);
              struct_sc_Hebr.cc = simd_or(struct_sc_Hebr.cc, ra000_ffff_tmp38);
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Takr {
  Property_sc_Takr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Takr & struct_sc_Takr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_9a, r10000_10ffff_tmp13, sequence_f0_91_9a;
		BitBlock byte_f0_adv, sequence_f0_91_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_range_80_b7, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_9b, sequence_f0_91_9b, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_80_89;
		BitBlock sequence_f0_91_9b_adv, r10000_10ffff_tmp23;




        struct_sc_Takr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_91_9a = simd_and(r10000_10ffff_tmp13, byte_9a);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp14);
            byte_range_80_b7 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp15);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(2), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_9a_adv, byte_range_80_b7);
            struct_sc_Takr.cc = simd_or(struct_sc_Takr.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp17);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp18);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp22);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(3), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_sc_Takr.cc = simd_or(struct_sc_Takr.cc, r10000_10ffff_tmp23);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Ugar {
  Property_sc_Ugar() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Ugar & struct_sc_Ugar) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8e, r10000_10ffff_tmp13, sequence_f0_90_8e;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_80_9d;
		BitBlock sequence_f0_90_8e_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_9f, r10000_10ffff_tmp20;




        struct_sc_Ugar.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8e = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8e = simd_and(r10000_10ffff_tmp13, byte_8e);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_6);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(2), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_8e_adv, byte_range_80_9d);
            struct_sc_Ugar.cc = simd_or(struct_sc_Ugar.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp18);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_8e_adv, byte_9f);
            struct_sc_Ugar.cc = simd_or(struct_sc_Ugar.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Batk {
  Property_sc_Batk() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Batk & struct_sc_Batk) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_af, r1000_1fff_tmp5, sequence_e1_af;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_b3;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, byte_range_bc_bf, r1000_1fff_tmp11;




        struct_sc_Batk.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_af = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_af = simd_and(r1000_1fff_tmp5, byte_af);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, r1000_1fff_tmp6);
                  byte_range_80_b3 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(2), sequence_e1_af_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_af_adv, byte_range_80_b3);
                  struct_sc_Batk.cc = simd_or(struct_sc_Batk.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp9);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp2);
                  r1000_1fff_tmp11 = simd_and(sequence_e1_af_adv, byte_range_bc_bf);
                  struct_sc_Batk.cc = simd_or(struct_sc_Batk.cc, r1000_1fff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Sind {
  Property_sc_Sind() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sind & struct_sc_Sind) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_8a, r10000_10ffff_tmp15, sequence_f0_91_8a, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_b0_bf, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_8b, sequence_f0_91_8b, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_80_aa;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, byte_range_b0_b9, r10000_10ffff_tmp26;




        struct_sc_Sind.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_8a = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_8a = simd_and(r10000_10ffff_tmp15, byte_8a);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(2), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_sc_Sind.cc = simd_or(struct_sc_Sind.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            byte_8b = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp18);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp17);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp21);
            byte_range_80_aa = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp22);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(3), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_8b_adv, byte_range_80_aa);
            struct_sc_Sind.cc = simd_or(struct_sc_Sind.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp24);
            byte_range_b0_b9 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_91_8b_adv, byte_range_b0_b9);
            struct_sc_Sind.cc = simd_or(struct_sc_Sind.cc, r10000_10ffff_tmp26);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Vaii {
  Property_sc_Vaii() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Vaii & struct_sc_Vaii) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_range_94_97, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_94_97, byte_range_80_bf, ra000_ffff_tmp9;
		BitBlock byte_ea_byte_range_94_97_sfx, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, byte_98, sequence_ea_98, byte_ea_adv;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock byte_range_80_ab, sequence_ea_98_adv, ra000_ffff_tmp16;




        struct_sc_Vaii.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              byte_range_94_97 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              byte_ea_byte_range_94_97 = simd_and(ra000_ffff_tmp8, byte_range_94_97);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_94_97, carryQ.get_carry_in(1), ra000_ffff_tmp9));
              byte_ea_byte_range_94_97_sfx = simd_and(ra000_ffff_tmp9, byte_range_80_bf);
              struct_sc_Vaii.cc = simd_or(struct_sc_Vaii.cc, byte_ea_byte_range_94_97_sfx);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp5);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp11);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_98 = simd_and(ra000_ffff_tmp8, byte_98);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_3, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_2, ra000_ffff_tmp14);
              byte_range_80_ab = simd_andc(byte_range_80_bf, ra000_ffff_tmp15);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(2), sequence_ea_98_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_98_adv, byte_range_80_ab);
              struct_sc_Vaii.cc = simd_or(struct_sc_Vaii.cc, ra000_ffff_tmp16);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Ogam {
  Property_sc_Ogam() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Ogam & struct_sc_Ogam) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9a, r1000_1fff_tmp6;
		BitBlock sequence_e1_9a, byte_e1_adv, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_range_80_9c;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp11;




        struct_sc_Ogam.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp8, r800_ffff_tmp3);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_3, r1000_1fff_tmp9);
                  byte_range_80_9c = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp10);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(2), sequence_e1_9a_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_9a_adv, byte_range_80_9c);
                  struct_sc_Ogam.cc = simd_or(struct_sc_Ogam.cc, r1000_1fff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Sinh {
  Property_sc_Sinh() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sinh & struct_sc_Sinh) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_b6;
		BitBlock r800_fff_tmp5, sequence_e0_b6, byte_e0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_range_82_83, sequence_e0_b6_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock r800_fff_tmp17, byte_range_85_96, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, byte_range_9a_b1, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, byte_range_b3_bb, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32, byte_bd;
		BitBlock r800_fff_tmp33, r800_fff_tmp34, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp35, byte_range_80_86, sequence_e0_b7_adv, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, byte_8a, r800_fff_tmp39;
		BitBlock r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42, byte_range_8f_94;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45, byte_96;
		BitBlock r800_fff_tmp46, byte_range_98_9f, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, byte_range_a6_af, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, r800_fff_tmp53, r800_fff_tmp54, byte_range_b2_b4;
		BitBlock r800_fff_tmp55, r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9, sequence_f0_91;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_87;
		BitBlock r10000_10ffff_tmp15, sequence_f0_91_87, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_range_a1_b4, sequence_f0_91_87_adv, r10000_10ffff_tmp21;




        struct_sc_Sinh.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 7))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp2, r800_fff_tmp3);
                  byte_b6 = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_b6 = simd_and(r800_fff_tmp5, byte_b6);
                  byte_e0_adv = r800_fff_tmp5;
                  r800_fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_andc(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_82_83 = simd_and(r800_fff_tmp7, r800_fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(2), sequence_e0_b6_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_5, r800_fff_tmp11);
                  r800_fff_tmp13 = simd_or(basis_bits.bit_4, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp16 = simd_or(basis_bits.bit_4, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp14), simd_andc(r800_fff_tmp16, basis_bits.bit_3));
                  byte_range_85_96 = simd_and(r800_fff_tmp10, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_and(sequence_e0_b6_adv, byte_range_85_96);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp20 = simd_not(r800_fff_tmp19);
                  r800_fff_tmp21 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp22 = simd_and(basis_bits.bit_4, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_3, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp20), simd_andc(r800_fff_tmp23, basis_bits.bit_2));
                  byte_range_9a_b1 = simd_and(r800_ffff_tmp5, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_b6_adv, byte_range_9a_b1);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_5, r800_fff_tmp11);
                  r800_fff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp26), simd_andc(r800_fff_tmp27, basis_bits.bit_4));
                  byte_range_b3_bb = simd_and(r800_fff_tmp2, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_and(sequence_e0_b6_adv, byte_range_b3_bb);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp31 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp32 = simd_and(r800_fff_tmp30, r800_fff_tmp31);
                  byte_bd = simd_and(r800_fff_tmp2, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(sequence_e0_b6_adv, byte_bd);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(r800_ffff_tmp2, r800_fff_tmp11);
                  byte_b7 = simd_and(r800_fff_tmp2, r800_fff_tmp34);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp35 = simd_andc(r800_fff_tmp7, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r800_fff_tmp35, r800_fff_tmp12);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(3), sequence_e0_b7_adv));
                  r800_fff_tmp36 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp37, r800_fff_tmp3);
                  byte_8a = simd_and(r800_fff_tmp7, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(sequence_e0_b7_adv, byte_8a);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_not(r800_fff_tmp16);
                  r800_fff_tmp41 = simd_and(r800_fff_tmp30, r800_fff_tmp11);
                  r800_fff_tmp42 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp40), simd_andc(r800_fff_tmp41, basis_bits.bit_3));
                  byte_range_8f_94 = simd_and(r800_fff_tmp10, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_and(sequence_e0_b7_adv, byte_range_8f_94);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp45 = simd_and(r800_ffff_tmp5, r800_fff_tmp44);
                  byte_96 = simd_and(r800_fff_tmp45, r800_fff_tmp4);
                  r800_fff_tmp46 = simd_and(sequence_e0_b7_adv, byte_96);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp46);
                  byte_range_98_9f = simd_and(r800_fff_tmp45, basis_bits.bit_4);
                  r800_fff_tmp47 = simd_and(sequence_e0_b7_adv, byte_range_98_9f);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp49 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp50 = simd_or(basis_bits.bit_4, r800_fff_tmp49);
                  byte_range_a6_af = simd_and(r800_fff_tmp48, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_and(sequence_e0_b7_adv, byte_range_a6_af);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_andc(r800_fff_tmp2, basis_bits.bit_4);
                  r800_fff_tmp53 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp54 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp53), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_b2_b4 = simd_and(r800_fff_tmp52, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_and(sequence_e0_b7_adv, byte_range_b2_b4);
                  struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r800_fff_tmp55);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(4, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(4), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_87 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(5), r10000_10ffff_tmp15));
            sequence_f0_91_87 = simd_and(r10000_10ffff_tmp15, byte_87);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_not(r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp19), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            byte_range_a1_b4 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp20);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(6), sequence_f0_91_87_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_87_adv, byte_range_a1_b4);
            struct_sc_Sinh.cc = simd_or(struct_sc_Sinh.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 7);
        }
        carryQ.CarryQ_Adjust(7);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<7, 0> carryQ;
  };

  struct Property_sc_Lina {
  Property_sc_Lina() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lina & struct_sc_Lina) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock byte_range_98_9b, r10000_10ffff_tmp9, sequence_f0_90_byte_range_98_9b;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp10;
		BitBlock sequence_f0_90_byte_range_98_9b_sfx, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_9c, sequence_f0_90_9c;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_b6, sequence_f0_90_9c_adv;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock byte_9d, sequence_f0_90_9d, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_range_80_95;
		BitBlock sequence_f0_90_9d_adv, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, byte_range_a0_a7, r10000_10ffff_tmp29;




        struct_sc_Lina.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_98_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp9));
            sequence_f0_90_byte_range_98_9b = simd_and(r10000_10ffff_tmp9, byte_range_98_9b);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_98_9b, carryQ.get_carry_in(2), r10000_10ffff_tmp10));
            sequence_f0_90_byte_range_98_9b_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            struct_sc_Lina.cc = simd_or(struct_sc_Lina.cc, sequence_f0_90_byte_range_98_9b_sfx);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_9c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            sequence_f0_90_9c = simd_and(r10000_10ffff_tmp9, byte_9c);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp17);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(3), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_9c_adv, byte_range_80_b6);
            struct_sc_Lina.cc = simd_or(struct_sc_Lina.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp20);
            byte_9d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp21);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            r10000_10ffff_tmp22 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp25);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(4), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_9d_adv, byte_range_80_95);
            struct_sc_Lina.cc = simd_or(struct_sc_Lina.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp28 = simd_and(byte_range_80_bf, r10000_10ffff_tmp27);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp28, basis_bits.bit_4);
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_9d_adv, byte_range_a0_a7);
            struct_sc_Lina.cc = simd_or(struct_sc_Lina.cc, r10000_10ffff_tmp29);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Linb {
  Property_sc_Linb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Linb & struct_sc_Linb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_80, r10000_10ffff_tmp10, sequence_f0_90_80;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp11;
		BitBlock byte_range_80_8b, sequence_f0_90_80_adv, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_8d_a6;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_a8_ba, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, byte_range_bc_bd, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, byte_bf, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, byte_81, sequence_f0_90_81;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_range_80_8d;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp37, byte_range_90_9d;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock byte_82, sequence_f0_90_82, byte_range_80_bf, sequence_f0_90_82_adv;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock byte_83, sequence_f0_90_83, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, byte_range_80_ba, sequence_f0_90_83_adv;
		BitBlock r10000_10ffff_tmp47;




        struct_sc_Linb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 6))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_80_8b = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(2), sequence_f0_90_80_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_80_adv, byte_range_80_8b);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp12);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_not(r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp17), simd_andc(r10000_10ffff_tmp19, basis_bits.bit_2));
            byte_range_8d_a6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_80_adv, byte_range_8d_a6);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp13);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp25), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            byte_range_a8_ba = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_80_adv, byte_range_a8_ba);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_bc_bd = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_80_adv, byte_range_bc_bd);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            byte_bf = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_80_adv, byte_bf);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp33, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp34);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp35);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp36);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(3), sequence_f0_90_81_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_90_81_adv, byte_range_80_8d);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp37);
            byte_range_90_9d = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_and(sequence_f0_90_81_adv, byte_range_90_9d);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp39, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp40);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(4), sequence_f0_90_82_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp43);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp44 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp45 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp46 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp45);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp46);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(5), sequence_f0_90_83_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_sc_Linb.cc = simd_or(struct_sc_Linb.cc, r10000_10ffff_tmp47);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Prti {
  Property_sc_Prti() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Prti & struct_sc_Prti) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ad, r10000_10ffff_tmp13, sequence_f0_90_ad;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_95, sequence_f0_90_ad_adv, r10000_10ffff_tmp18;
		BitBlock byte_range_98_9f, r10000_10ffff_tmp19;




        struct_sc_Prti.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ad = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ad = simd_and(r10000_10ffff_tmp13, byte_ad);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(2), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_ad_adv, byte_range_80_95);
            struct_sc_Prti.cc = simd_or(struct_sc_Prti.cc, r10000_10ffff_tmp18);
            byte_range_98_9f = simd_and(r10000_10ffff_tmp6, basis_bits.bit_4);
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_ad_adv, byte_range_98_9f);
            struct_sc_Prti.cc = simd_or(struct_sc_Prti.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Khmr {
  Property_sc_Khmr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Khmr & struct_sc_Khmr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9e, r1000_1fff_tmp6;
		BitBlock sequence_e1_9e, byte_e1_adv, byte_range_80_bf, sequence_e1_9e_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock byte_9f, sequence_e1_9f, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, byte_range_80_9d, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, byte_range_a0_a9, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, byte_range_b0_b9;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, byte_a7, sequence_e1_a7;
		BitBlock byte_range_a0_bf, sequence_e1_a7_adv, r1000_1fff_tmp23;




        struct_sc_Khmr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 4))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9e = simd_and(r1000_1fff_tmp6, byte_9e);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(2), sequence_e1_9e_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_9e_adv, byte_range_80_bf);
                  struct_sc_Khmr.cc = simd_or(struct_sc_Khmr.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp9);
                  byte_9f = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp3, basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_3, r1000_1fff_tmp12);
                  byte_range_80_9d = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(3), sequence_e1_9f_adv));
                  r1000_1fff_tmp14 = simd_and(sequence_e1_9f_adv, byte_range_80_9d);
                  struct_sc_Khmr.cc = simd_or(struct_sc_Khmr.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_4, r1000_1fff_tmp16);
                  byte_range_a0_a9 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_9f_adv, byte_range_a0_a9);
                  struct_sc_Khmr.cc = simd_or(struct_sc_Khmr.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp20 = simd_and(byte_range_80_bf, r1000_1fff_tmp19);
                  byte_range_b0_b9 = simd_andc(r1000_1fff_tmp20, r1000_1fff_tmp17);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_9f_adv, byte_range_b0_b9);
                  struct_sc_Khmr.cc = simd_or(struct_sc_Khmr.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp9);
                  byte_a7 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp22);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(4), sequence_e1_a7_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_a7_adv, byte_range_a0_bf);
                  struct_sc_Khmr.cc = simd_or(struct_sc_Khmr.cc, r1000_1fff_tmp23);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Perm {
  Property_sc_Perm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Perm & struct_sc_Perm) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8d, r10000_10ffff_tmp13, sequence_f0_90_8d;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, byte_range_90_ba;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp20;




        struct_sc_Perm.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8d = simd_and(r10000_10ffff_tmp13, byte_8d);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp18), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ba = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(2), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_8d_adv, byte_range_90_ba);
            struct_sc_Perm.cc = simd_or(struct_sc_Perm.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Phlp {
  Property_sc_Phlp() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Phlp & struct_sc_Phlp) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ae, r10000_10ffff_tmp13, sequence_f0_90_ae;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_80_91;
		BitBlock sequence_f0_90_ae_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_99_9c, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_a9_af;
		BitBlock r10000_10ffff_tmp23;




        struct_sc_Phlp.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ae = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ae = simd_and(r10000_10ffff_tmp13, byte_ae);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(2), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_ae_adv, byte_range_80_91);
            struct_sc_Phlp.cc = simd_or(struct_sc_Phlp.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp6, basis_bits.bit_4);
            r10000_10ffff_tmp19 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_99_9c = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_ae_adv, byte_range_99_9c);
            struct_sc_Phlp.cc = simd_or(struct_sc_Phlp.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_a9_af = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_ae_adv, byte_range_a9_af);
            struct_sc_Phlp.cc = simd_or(struct_sc_Phlp.cc, r10000_10ffff_tmp23);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Bugi {
  Property_sc_Bugi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Bugi & struct_sc_Bugi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a8;
		BitBlock r1000_1fff_tmp4, sequence_e1_a8, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_9b;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_9e_9f;
		BitBlock r1000_1fff_tmp12;




        struct_sc_Bugi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a8 = simd_and(r1000_1fff_tmp4, byte_a8);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_3, r1000_1fff_tmp6);
                  byte_range_80_9b = simd_andc(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(2), sequence_e1_a8_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_a8_adv, byte_range_80_9b);
                  struct_sc_Bugi.cc = simd_or(struct_sc_Bugi.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp6, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_a8_adv, byte_range_9e_9f);
                  struct_sc_Bugi.cc = simd_or(struct_sc_Bugi.cc, r1000_1fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Nbat {
  Property_sc_Nbat() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Nbat & struct_sc_Nbat) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a2;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a2, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_80_9e, sequence_f0_90_a2_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_a7_af;
		BitBlock r10000_10ffff_tmp21;




        struct_sc_Nbat.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a2 = simd_and(r10000_10ffff_tmp12, byte_a2);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(2), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_a2_adv, byte_range_80_9e);
            struct_sc_Nbat.cc = simd_or(struct_sc_Nbat.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp19);
            byte_range_a7_af = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_a2_adv, byte_range_a7_af);
            struct_sc_Nbat.cc = simd_or(struct_sc_Nbat.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Latn {
  Property_sc_Latn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Latn & struct_sc_Latn) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_7a_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, byte_aa;
		BitBlock byte_c2_adv, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, byte_ba;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, byte_c3, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, byte_range_80_96, byte_c3_adv;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22;
		BitBlock byte_range_98_b6, r80_7ff_tmp23, byte_range_b8_bf, r80_7ff_tmp24;
		BitBlock byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1;
		BitBlock r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8, r100_2ff_tmp4;
		BitBlock r100_2ff_tmp5, byte_c9, byte_range_80_8f, r100_2ff_tmp6;
		BitBlock r100_2ff_tmp7, r100_2ff_tmp8, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp3, r100_24f_tmp4, byte_range_c6_c8;
		BitBlock r100_24f_tmp5, r180_24f_tmp1, byte_range_c6_c8_sfx, byte_c9_adv;
		BitBlock r180_24f_tmp2, byte_range_90_bf, r100_2ff_tmp9, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp10, r100_2ff_tmp11, r100_2ff_tmp12;
		BitBlock r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2, byte_range_b0_bf;
		BitBlock r100_2ff_tmp13, r100_2ff_tmp14, byte_cb, r100_2ff_tmp15;
		BitBlock r2b0_2ff_tmp1, byte_range_b0_b8, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, byte_range_a0_a4, byte_cb_adv, r2b0_2ff_tmp5;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b4;
		BitBlock r1000_1fff_tmp3, sequence_e1_b4, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_a5;
		BitBlock sequence_e1_b4_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_ac_bf;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_b5, sequence_e1_b5;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock byte_range_80_9c, sequence_e1_b5_adv, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock byte_range_a2_a5, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_range_ab_b7, r1000_1fff_tmp24;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, byte_range_b9_bf;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29, byte_b6;
		BitBlock sequence_e1_b6, r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock byte_range_80_be, sequence_e1_b6_adv, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, byte_range_b8_bb, byte_e1_byte_range_b8_bb;
		BitBlock r1000_1fff_tmp35, byte_e1_byte_range_b8_bb_sfx, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, byte_b1;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, byte_bf, r2000_2fff_tmp11, byte_82, sequence_e2_82;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, byte_84, sequence_e2_84, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, byte_range_aa_ab;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp20, byte_b2, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, byte_85, sequence_e2_85, r2000_2fff_tmp23, byte_8e;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp24, byte_range_a0_bf;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, byte_range_80_88;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp29, sequence_e2_b1;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp30, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_9c, ra000_ffff_tmp8, sequence_ea_9c;
		BitBlock byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock byte_range_a2_bf, sequence_ea_9c_adv, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, byte_9d, sequence_ea_9d;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_9e, sequence_ea_9e, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_80_87, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock byte_range_8b_8e, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock byte_range_90_ad, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, byte_range_b0_b1, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, byte_9f, sequence_ea_9f, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, byte_range_b7_bf, sequence_ea_9f_adv;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, byte_ac, sequence_ea_ac;
		BitBlock sequence_ea_ac_adv, ra000_ffff_tmp37, byte_ad, sequence_ea_ad;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, byte_range_80_9a;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp40, byte_range_9c_9f;
		BitBlock ra000_ffff_tmp41, byte_a4, ra000_ffff_tmp42, byte_ef;
		BitBlock ra000_ffff_tmp43, sequence_ef_ac, byte_ef_adv, byte_range_80_86;
		BitBlock sequence_ef_ac_adv, ra000_ffff_tmp44, byte_bc, sequence_ef_bc;
		BitBlock ra000_ffff_tmp45, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp46, byte_bd, sequence_ef_bd, byte_range_81_9a;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp47;




        struct_sc_Latn.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_7a_1 = simd_and(tmp8, tmp9);
        struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, cc_range_41_7a_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 31))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 7))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            byte_aa = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp10 = simd_and(byte_c2_adv, byte_aa);
            struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r80_7ff_tmp10);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            byte_ba = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            r80_7ff_tmp13 = simd_and(byte_c2_adv, byte_ba);
            struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp14);
            r80_7ff_tmp15 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp17 = simd_or(basis_bits.bit_4, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(basis_bits.bit_3, r80_7ff_tmp17);
            byte_range_80_96 = simd_andc(r80_7ff_tmp15, r80_7ff_tmp18);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp19 = simd_and(byte_c3_adv, byte_range_80_96);
            struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_not(r80_7ff_tmp18);
            r80_7ff_tmp21 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp22 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp20), simd_andc(r80_7ff_tmp21, basis_bits.bit_2));
            byte_range_98_b6 = simd_and(r80_7ff_tmp5, r80_7ff_tmp22);
            r80_7ff_tmp23 = simd_and(byte_c3_adv, byte_range_98_b6);
            struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r80_7ff_tmp23);
            byte_range_b8_bf = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            r80_7ff_tmp24 = simd_and(byte_c3_adv, byte_range_b8_bf);
            struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r80_7ff_tmp24);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 5))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp5 = simd_and(r80_7ff_tmp8, r100_2ff_tmp4);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp5) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, byte_range_c6_c8_sfx);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp2 = simd_and(byte_c9_adv, byte_range_80_8f);
                    struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r180_24f_tmp2);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp10));
                r100_2ff_tmp11 = simd_and(r100_2ff_tmp10, byte_range_80_af);
                r100_2ff_tmp12 = simd_or(r100_2ff_tmp9, r100_2ff_tmp11);
                if (bitblock::any(r100_2ff_tmp12)) {
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp10;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp13 = simd_and(r100_2ff_tmp10, byte_range_b0_bf);
                r100_2ff_tmp14 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp14);
                r100_2ff_tmp15 = simd_or(r100_2ff_tmp13, byte_cb);
                if ((bitblock::any(r100_2ff_tmp15) || carryQ.CarryTest(6, 1))) {
                  r2b0_2ff_tmp1 = simd_and(basis_bits.bit_4, r100_2ff_tmp1);
                  byte_range_b0_b8 = simd_andc(byte_range_b0_bf, r2b0_2ff_tmp1);
                  byte_ca_adv = r100_2ff_tmp10;
                  r2b0_2ff_tmp2 = simd_and(byte_ca_adv, byte_range_b0_b8);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp3 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp4 = simd_and(basis_bits.bit_5, tmp6);
                  byte_range_a0_a4 = simd_andc(r2b0_2ff_tmp3, r2b0_2ff_tmp4);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp5 = simd_and(byte_cb_adv, byte_range_a0_a4);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2b0_2ff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 7);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(7, 24))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(7), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(8, 12))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(8, 5))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(8, 5))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_b4 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(8), r1000_1fff_tmp3));
                  sequence_e1_b4 = simd_and(r1000_1fff_tmp3, byte_b4);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_4, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, r1000_1fff_tmp6);
                  byte_range_80_a5 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp7);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(9), sequence_e1_b4_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_b4_adv, byte_range_80_a5);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp11 = simd_or(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_ac_bf = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp13);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp14 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp10, tmp6);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_3, r1000_1fff_tmp15);
                  byte_range_80_9c = simd_andc(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(10), sequence_e1_b5_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_b5_adv, byte_range_80_9c);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp19 = simd_andc(r1000_1fff_tmp18, basis_bits.bit_4);
                  r1000_1fff_tmp20 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_a2_a5 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_b5_adv, byte_range_a2_a5);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_not(basis_bits.bit_4);
                  r1000_1fff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp22), simd_andc(tmp3, basis_bits.bit_3));
                  byte_range_ab_b7 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b5_adv, byte_range_ab_b7);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp26 = simd_or(basis_bits.bit_5, tmp6);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_b5_adv, byte_range_b9_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp28);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp29);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp10, tmp1);
                  r1000_1fff_tmp31 = simd_and(basis_bits.bit_3, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(basis_bits.bit_2, r1000_1fff_tmp31);
                  byte_range_80_be = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp32);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(11), sequence_e1_b6_adv));
                  r1000_1fff_tmp33 = simd_and(sequence_e1_b6_adv, byte_range_80_be);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b8_bb = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  byte_e1_byte_range_b8_bb = simd_and(byte_e1_adv, byte_range_b8_bb);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b8_bb, carryQ.get_carry_in(12), r1000_1fff_tmp35));
                  byte_e1_byte_range_b8_bb_sfx = simd_and(r1000_1fff_tmp35, byte_range_80_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, byte_e1_byte_range_b8_bb_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 5);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(13, 7))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(13, 7))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(13), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(14), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_b1);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, tmp1);
                  byte_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, byte_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(15), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp18 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp18, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp19);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(16), sequence_e2_84_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_84_adv, byte_range_aa_ab);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp20);
                  byte_b2 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp2);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_84_adv, byte_b2);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp9, r2000_4dff_tmp1);
                  byte_8e = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp23);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(17), sequence_e2_85_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_85_adv, byte_8e);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp24);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp25 = simd_and(sequence_e2_85_adv, byte_range_a0_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_4, r2000_2fff_tmp27);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp28);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(18), sequence_e2_86_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp29);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(19), sequence_e2_b1_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_b1_adv, byte_range_a0_bf);
                  struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, r2000_2fff_tmp30);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 7);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 12);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(20, 11))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp6, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(20), ra000_ffff_tmp8));
              sequence_ea_9c = simd_and(ra000_ffff_tmp8, byte_9c);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_a2_bf = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp11);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(21), sequence_ea_9c_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_9c_adv, byte_range_a2_bf);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp13);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(22), sequence_ea_9d_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_9d_adv, byte_range_80_bf);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp17);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp19 = simd_andc(byte_range_80_bf, ra000_ffff_tmp18);
              byte_range_80_87 = simd_andc(ra000_ffff_tmp19, basis_bits.bit_4);
              carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(23), sequence_ea_9e_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_9e_adv, byte_range_80_87);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp19, basis_bits.bit_4);
              ra000_ffff_tmp22 = simd_xor(basis_bits.bit_5, tmp1);
              byte_range_8b_8e = simd_and(ra000_ffff_tmp21, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(sequence_ea_9e_adv, byte_range_8b_8e);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp6, basis_bits.bit_6);
              ra000_ffff_tmp25 = simd_or(basis_bits.bit_3, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_not(ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp26), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_ad = simd_and(byte_range_80_bf, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(sequence_ea_9e_adv, byte_range_90_ad);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp30 = simd_and(byte_range_80_bf, ra000_ffff_tmp29);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp30, ra000_ffff_tmp10);
              ra000_ffff_tmp31 = simd_and(sequence_ea_9e_adv, byte_range_b0_b1);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(ra000_ffff_tmp6, tmp1);
              byte_9f = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp32);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp33 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp34 = simd_or(basis_bits.bit_4, ra000_ffff_tmp33);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp30, ra000_ffff_tmp34);
              carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(24), sequence_ea_9f_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_9f_adv, byte_range_b7_bf);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_ac = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp7);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_b0_bf = ra000_ffff_tmp30;
              carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(25), sequence_ea_ac_adv));
              ra000_ffff_tmp37 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp37);
              byte_ad = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp14);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp38 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp39);
              carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(26), sequence_ea_ad_adv));
              ra000_ffff_tmp40 = simd_and(sequence_ea_ad_adv, byte_range_80_9a);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp40);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp6);
              ra000_ffff_tmp41 = simd_and(sequence_ea_ad_adv, byte_range_9c_9f);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp41);
              byte_a4 = simd_and(ra000_ffff_tmp36, r800_ffff_tmp2);
              ra000_ffff_tmp42 = simd_and(sequence_ea_ad_adv, byte_a4);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp42);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp32);
              carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(27), ra000_ffff_tmp43));
              sequence_ef_ac = simd_and(ra000_ffff_tmp43, byte_ac);
              byte_ef_adv = ra000_ffff_tmp43;
              byte_range_80_86 = simd_andc(byte_range_80_87, ra000_ffff_tmp33);
              carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(28), sequence_ef_ac_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ef_ac_adv, byte_range_80_86);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp44);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp7);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp45 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp45, tmp8);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(29), sequence_ef_bc_adv));
              ra000_ffff_tmp46 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp46);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp14);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp38, tmp8);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(30), sequence_ef_bd_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_sc_Latn.cc = simd_or(struct_sc_Latn.cc, ra000_ffff_tmp47);
            }
            else {
              carryQ.CarryDequeueEnqueue(20, 11);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(7, 24);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 31);
        }
        carryQ.CarryQ_Adjust(31);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<31, 0> carryQ;
  };

  struct Property_sc_Phli {
  Property_sc_Phli() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Phli & struct_sc_Phli) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ad, r10000_10ffff_tmp13, sequence_f0_90_ad;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_a0_b2, sequence_f0_90_ad_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_b8_bf, r10000_10ffff_tmp20;




        struct_sc_Phli.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ad = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ad = simd_and(r10000_10ffff_tmp13, byte_ad);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_a0_b2 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(2), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_ad_adv, byte_range_a0_b2);
            struct_sc_Phli.cc = simd_or(struct_sc_Phli.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_b8_bf = simd_and(r10000_10ffff_tmp19, basis_bits.bit_4);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_ad_adv, byte_range_b8_bf);
            struct_sc_Phli.cc = simd_or(struct_sc_Phli.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Mroo {
  Property_sc_Mroo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mroo & struct_sc_Mroo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_a9, r10000_10ffff_tmp16, sequence_f0_96_a9;
		BitBlock byte_f0_adv, sequence_f0_96_adv, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_80_9e, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock byte_range_a0_a9, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_ae_af, r10000_10ffff_tmp27;




        struct_sc_Mroo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_a9 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp16));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp16, byte_a9);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp16;
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp21);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(2), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_96_a9_adv, byte_range_80_9e);
            struct_sc_Mroo.cc = simd_or(struct_sc_Mroo.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_96_a9_adv, byte_range_a0_a9);
            struct_sc_Mroo.cc = simd_or(struct_sc_Mroo.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp18, basis_bits.bit_6);
            byte_range_ae_af = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(sequence_f0_96_a9_adv, byte_range_ae_af);
            struct_sc_Mroo.cc = simd_or(struct_sc_Mroo.cc, r10000_10ffff_tmp27);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Deva {
  Property_sc_Deva() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Deva & struct_sc_Deva) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a4, r800_fff_tmp2, sequence_e0_a4, byte_e0_adv;
		BitBlock byte_range_80_bf, sequence_e0_a4_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, byte_a5, sequence_e0_a5, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, byte_range_80_90, sequence_e0_a5_adv, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, r800_fff_tmp15, byte_range_93_a3, r800_fff_tmp16;
		BitBlock r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19, r800_fff_tmp20;
		BitBlock byte_range_a6_bf, r800_fff_tmp21, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, byte_a3;
		BitBlock ra000_ffff_tmp7, sequence_ea_a3, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, byte_range_a0_bb;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp11;




        struct_sc_Deva.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp2));
                  sequence_e0_a4 = simd_and(r800_fff_tmp2, byte_a4);
                  byte_e0_adv = r800_fff_tmp2;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(2), sequence_e0_a4_adv));
                  r800_fff_tmp3 = simd_and(sequence_e0_a4_adv, byte_range_80_bf);
                  struct_sc_Deva.cc = simd_or(struct_sc_Deva.cc, r800_fff_tmp3);
                  r800_fff_tmp4 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r800_fff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp2, r800_fff_tmp5);
                  byte_a5 = simd_and(r800_fff_tmp4, r800_fff_tmp6);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp7 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_3, r800_1fff_tmp1);
                  byte_range_80_90 = simd_andc(r800_fff_tmp7, r800_fff_tmp8);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(3), sequence_e0_a5_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a5_adv, byte_range_80_90);
                  struct_sc_Deva.cc = simd_or(struct_sc_Deva.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_or(r800_ffff_tmp1, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_3, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp11), simd_andc(r800_fff_tmp14, basis_bits.bit_2));
                  byte_range_93_a3 = simd_and(byte_range_80_bf, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(sequence_e0_a5_adv, byte_range_93_a3);
                  struct_sc_Deva.cc = simd_or(struct_sc_Deva.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_4, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_3, r800_fff_tmp19);
                  byte_range_a6_bf = simd_and(r800_fff_tmp17, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(sequence_e0_a5_adv, byte_range_a6_bf);
                  struct_sc_Deva.cc = simd_or(struct_sc_Deva.cc, r800_fff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(4, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(4), ra000_ffff_tmp7));
              sequence_ea_a3 = simd_and(ra000_ffff_tmp7, byte_a3);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              byte_range_a0_bb = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp10);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(5), sequence_ea_a3_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a3_adv, byte_range_a0_bb);
              struct_sc_Deva.cc = simd_or(struct_sc_Deva.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Sarb {
  Property_sc_Sarb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sarb & struct_sc_Sarb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a9, r10000_10ffff_tmp13, sequence_f0_90_a9;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_a0_bf;
		BitBlock sequence_f0_90_a9_adv, r10000_10ffff_tmp14;




        struct_sc_Sarb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a9 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a9 = simd_and(r10000_10ffff_tmp13, byte_a9);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(2), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bf);
            struct_sc_Sarb.cc = simd_or(struct_sc_Sarb.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Thai {
  Property_sc_Thai() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Thai & struct_sc_Thai) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_b8;
		BitBlock r800_fff_tmp5, sequence_e0_b8, byte_e0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, byte_range_81_ba, sequence_e0_b8_adv;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15, byte_b9;
		BitBlock sequence_e0_b9, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock byte_range_80_9b, sequence_e0_b9_adv, r800_fff_tmp19;




        struct_sc_Thai.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(r800_fff_tmp3, r800_ffff_tmp3);
                  byte_b8 = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_b8 = simd_and(r800_fff_tmp5, byte_b8);
                  byte_e0_adv = r800_fff_tmp5;
                  r800_fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp7 = simd_or(basis_bits.bit_5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_4, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_and(basis_bits.bit_3, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_not(r800_fff_tmp9);
                  r800_fff_tmp11 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r800_fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp10), simd_andc(r800_fff_tmp11, basis_bits.bit_2));
                  byte_range_81_ba = simd_and(r800_ffff_tmp5, r800_fff_tmp12);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(2), sequence_e0_b8_adv));
                  r800_fff_tmp13 = simd_and(sequence_e0_b8_adv, byte_range_81_ba);
                  struct_sc_Thai.cc = simd_or(struct_sc_Thai.cc, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp3, r800_fff_tmp14);
                  byte_b9 = simd_and(r800_fff_tmp2, r800_fff_tmp15);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp16 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp18 = simd_and(basis_bits.bit_3, r800_fff_tmp17);
                  byte_range_80_9b = simd_andc(r800_fff_tmp16, r800_fff_tmp18);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(3), sequence_e0_b9_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_b9_adv, byte_range_80_9b);
                  struct_sc_Thai.cc = simd_or(struct_sc_Thai.cc, r800_fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Syrc {
  Property_sc_Syrc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Syrc & struct_sc_Syrc) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock r700_77f_tmp2, byte_dc, r700_77f_tmp3, r700_77f_tmp4, byte_dd;
		BitBlock r700_77f_tmp5, r700_77f_tmp6, byte_range_80_8f, r700_77f_tmp7;
		BitBlock r700_77f_tmp8, r700_77f_tmp9, r700_74f_tmp1, r700_74f_tmp2;
		BitBlock byte_range_80_8d, byte_dc_adv, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock r700_74f_tmp5, r700_74f_tmp6, r700_74f_tmp7, byte_range_8f_bf;
		BitBlock r700_74f_tmp8, r700_74f_tmp9, r700_74f_tmp10, byte_range_80_8a;
		BitBlock byte_dd_adv, r700_74f_tmp11, r700_74f_tmp12, byte_range_8d_8f;
		BitBlock r700_74f_tmp13;




        struct_sc_Syrc.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(0, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp3, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp2, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp3, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp2, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r700_77f_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r700_77f_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(0), r700_77f_tmp7));
              r700_77f_tmp8 = simd_and(r700_77f_tmp7, byte_range_80_8f);
              r700_77f_tmp9 = simd_or(byte_dc, r700_77f_tmp8);
              if ((bitblock::any(r700_77f_tmp9) || carryQ.CarryTest(1, 1))) {
                r700_74f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r700_74f_tmp2 = simd_and(basis_bits.bit_4, r700_74f_tmp1);
                byte_range_80_8d = simd_andc(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(1), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_range_80_8d);
                struct_sc_Syrc.cc = simd_or(struct_sc_Syrc.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp5 = simd_and(r80_7ff_tmp3, r700_74f_tmp4);
                r700_74f_tmp6 = simd_or(basis_bits.bit_3, r700_74f_tmp5);
                r700_74f_tmp7 = simd_or(basis_bits.bit_2, r700_74f_tmp6);
                byte_range_8f_bf = simd_and(r700_77f_tmp5, r700_74f_tmp7);
                r700_74f_tmp8 = simd_and(byte_dc_adv, byte_range_8f_bf);
                struct_sc_Syrc.cc = simd_or(struct_sc_Syrc.cc, r700_74f_tmp8);
                r700_74f_tmp9 = simd_or(basis_bits.bit_5, r700_74f_tmp4);
                r700_74f_tmp10 = simd_and(basis_bits.bit_4, r700_74f_tmp9);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp10);
                byte_dd_adv = r700_77f_tmp7;
                r700_74f_tmp11 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_sc_Syrc.cc = simd_or(struct_sc_Syrc.cc, r700_74f_tmp11);
                r700_74f_tmp12 = simd_and(byte_range_80_8f, r80_7ff_tmp3);
                byte_range_8d_8f = simd_and(r700_74f_tmp12, r700_77f_tmp1);
                r700_74f_tmp13 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_sc_Syrc.cc = simd_or(struct_sc_Syrc.cc, r700_74f_tmp13);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_sc_Cham {
  Property_sc_Cham() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cham & struct_sc_Cham) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a8, ra000_ffff_tmp8;
		BitBlock sequence_ea_a8, byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock byte_range_80_b6, sequence_ea_a8_adv, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, byte_a9, sequence_ea_a9;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_range_80_8d, sequence_ea_a9_adv;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, byte_range_90_99, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, byte_range_9c_9f, ra000_ffff_tmp27;




        struct_sc_Cham.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_a8 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a8 = simd_and(ra000_ffff_tmp8, byte_a8);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_5, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_4, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_3, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_2, ra000_ffff_tmp12);
              byte_range_80_b6 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp13);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(1), sequence_ea_a8_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_a8_adv, byte_range_80_b6);
              struct_sc_Cham.cc = simd_or(struct_sc_Cham.cc, ra000_ffff_tmp14);
              ra000_ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp15);
              byte_a9 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp16);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp18 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_4, ra000_ffff_tmp19);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp20);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(2), sequence_ea_a9_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a9_adv, byte_range_80_8d);
              struct_sc_Cham.cc = simd_or(struct_sc_Cham.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp22);
              ra000_ffff_tmp24 = simd_and(basis_bits.bit_4, r800_ffff_tmp2);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp23, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(sequence_ea_a9_adv, byte_range_90_99);
              struct_sc_Cham.cc = simd_or(struct_sc_Cham.cc, ra000_ffff_tmp25);
              ra000_ffff_tmp26 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp26);
              ra000_ffff_tmp27 = simd_and(sequence_ea_a9_adv, byte_range_9c_9f);
              struct_sc_Cham.cc = simd_or(struct_sc_Cham.cc, ra000_ffff_tmp27);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Thaa {
  Property_sc_Thaa() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Thaa & struct_sc_Thaa) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock r780_7bf_tmp4, r780_7bf_tmp5, byte_range_80_b1, byte_de_adv;
		BitBlock r780_7bf_tmp6;




        struct_sc_Thaa.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(0, 1))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp3, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp2, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(0, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
                r780_7bf_tmp3 = simd_or(r780_7bf_tmp2, basis_bits.bit_6);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_3, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_and(basis_bits.bit_2, r780_7bf_tmp4);
                byte_range_80_b1 = simd_andc(r780_7bf_tmp1, r780_7bf_tmp5);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(0), byte_de_adv));
                r780_7bf_tmp6 = simd_and(byte_de_adv, byte_range_80_b1);
                struct_sc_Thaa.cc = simd_or(struct_sc_Thaa.cc, r780_7bf_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_sc_Elba {
  Property_sc_Elba() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Elba & struct_sc_Elba) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_94, r10000_10ffff_tmp10, sequence_f0_90_94;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_80_a7, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp13;




        struct_sc_Elba.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_94 = simd_and(r10000_10ffff_tmp10, byte_94);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp11);
            byte_range_80_a7 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp12);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(2), sequence_f0_90_94_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_94_adv, byte_range_80_a7);
            struct_sc_Elba.cc = simd_or(struct_sc_Elba.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Dupl {
  Property_sc_Dupl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Dupl & struct_sc_Dupl) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9b;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9b, r10000_10ffff_tmp11, byte_b0;
		BitBlock r10000_10ffff_tmp12, sequence_f0_9b_b0, byte_f0_adv;
		BitBlock sequence_f0_9b_adv, byte_range_80_bf, sequence_f0_9b_b0_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, byte_b1, sequence_f0_9b_b1, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_80_aa, sequence_f0_9b_b1_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock byte_range_b0_bc, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_b2, sequence_f0_9b_b2, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock byte_range_80_88, sequence_f0_9b_b2_adv, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, byte_range_90_99;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_range_9c_9f;
		BitBlock r10000_10ffff_tmp37;




        struct_sc_Dupl.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_b0 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_9b_b0 = simd_and(r10000_10ffff_tmp12, byte_b0);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_9b_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(2), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_b1 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp8);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp20);
            byte_range_80_aa = simd_andc(byte_range_80_bf, r10000_10ffff_tmp21);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(3), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9b_b1_adv, byte_range_80_aa);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp23);
            byte_range_b0_bc = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_9b_b1_adv, byte_range_b0_bc);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp1);
            byte_b2 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp27);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp29 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp31 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp30);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp31);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(4), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_9b_b2_adv, byte_range_80_88);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp33);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(sequence_f0_9b_b2_adv, byte_range_90_99);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_9c_9f = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_9b_b2_adv, byte_range_9c_9f);
            struct_sc_Dupl.cc = simd_or(struct_sc_Dupl.cc, r10000_10ffff_tmp37);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Beng {
  Property_sc_Beng() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Beng & struct_sc_Beng) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a6, r800_fff_tmp4;
		BitBlock sequence_e0_a6, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock byte_range_80_83, sequence_e0_a6_adv, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, byte_range_85_8c, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, byte_range_8f_90, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_range_93_a8, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock byte_range_aa_b0, r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, byte_b2, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock r800_fff_tmp36, r800_fff_tmp37, byte_range_b6_b9, r800_fff_tmp38;
		BitBlock byte_range_bc_bf, r800_fff_tmp39, r800_fff_tmp40, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp41, byte_range_80_84, sequence_e0_a7_adv;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock byte_range_87_88, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock byte_range_8b_8e, r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock byte_97, r800_fff_tmp52, r800_fff_tmp53, byte_range_9c_9d;
		BitBlock r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, byte_range_9f_a3, r800_fff_tmp59, r800_fff_tmp60;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, byte_range_a6_bb, r800_fff_tmp63;




        struct_sc_Beng.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a6 = simd_and(r800_fff_tmp4, byte_a6);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_andc(r800_ffff_tmp5, r800_fff_tmp5);
                  byte_range_80_83 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(2), sequence_e0_a6_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a6_adv, byte_range_80_83);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp9 = simd_xor(basis_bits.bit_4, r800_fff_tmp8);
                  byte_range_85_8c = simd_and(r800_fff_tmp6, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(sequence_e0_a6_adv, byte_range_85_8c);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp12 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp13, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp12), simd_andc(r800_fff_tmp15, basis_bits.bit_3));
                  byte_range_8f_90 = simd_and(r800_fff_tmp11, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(sequence_e0_a6_adv, byte_range_8f_90);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_4, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_3, r800_fff_tmp19);
                  r800_fff_tmp21 = simd_not(r800_fff_tmp20);
                  r800_fff_tmp22 = simd_or(r800_ffff_tmp1, r800_fff_tmp14);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_3, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp21), simd_andc(r800_fff_tmp23, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_a6_adv, byte_range_93_a8);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_4, r800_fff_tmp27);
                  r800_fff_tmp29 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp12), simd_andc(r800_fff_tmp28, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp26, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(sequence_e0_a6_adv, byte_range_aa_b0);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_and(r800_ffff_tmp5, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_b2 = simd_and(r800_fff_tmp32, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(sequence_e0_a6_adv, byte_b2);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_not(r800_fff_tmp27);
                  r800_fff_tmp36 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp35), simd_andc(r800_fff_tmp36, basis_bits.bit_4));
                  byte_range_b6_b9 = simd_and(r800_fff_tmp32, r800_fff_tmp37);
                  r800_fff_tmp38 = simd_and(sequence_e0_a6_adv, byte_range_b6_b9);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp38);
                  byte_range_bc_bf = simd_and(r800_fff_tmp32, r800_fff_tmp13);
                  r800_fff_tmp39 = simd_and(sequence_e0_a6_adv, byte_range_bc_bf);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(r800_ffff_tmp2, r800_fff_tmp14);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp6, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r800_fff_tmp41, r800_fff_tmp8);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(3), sequence_e0_a7_adv));
                  r800_fff_tmp42 = simd_and(sequence_e0_a7_adv, byte_range_80_84);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_not(r800_fff_tmp18);
                  r800_fff_tmp44 = simd_and(basis_bits.bit_5, r800_fff_tmp14);
                  r800_fff_tmp45 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp43), simd_andc(r800_fff_tmp44, basis_bits.bit_4));
                  byte_range_87_88 = simd_and(r800_fff_tmp6, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_a7_adv, byte_range_87_88);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp6, basis_bits.bit_4);
                  r800_fff_tmp48 = simd_xor(basis_bits.bit_5, r800_fff_tmp14);
                  byte_range_8b_8e = simd_and(r800_fff_tmp47, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_a7_adv, byte_range_8b_8e);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp51 = simd_and(r800_ffff_tmp5, r800_fff_tmp50);
                  byte_97 = simd_and(r800_fff_tmp51, r800_fff_tmp40);
                  r800_fff_tmp52 = simd_and(sequence_e0_a7_adv, byte_97);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_andc(r800_fff_tmp13, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp51, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(sequence_e0_a7_adv, byte_range_9c_9d);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp56 = simd_not(r800_fff_tmp55);
                  r800_fff_tmp57 = simd_and(basis_bits.bit_3, r800_fff_tmp15);
                  r800_fff_tmp58 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp56), simd_andc(r800_fff_tmp57, basis_bits.bit_2));
                  byte_range_9f_a3 = simd_and(r800_ffff_tmp5, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(sequence_e0_a7_adv, byte_range_9f_a3);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp61 = simd_or(basis_bits.bit_4, r800_fff_tmp36);
                  r800_fff_tmp62 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp60), simd_andc(r800_fff_tmp61, basis_bits.bit_3));
                  byte_range_a6_bb = simd_and(r800_fff_tmp26, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_and(sequence_e0_a7_adv, byte_range_a6_bb);
                  struct_sc_Beng.cc = simd_or(struct_sc_Beng.cc, r800_fff_tmp63);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Geor {
  Property_sc_Geor() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Geor & struct_sc_Geor) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_83, sequence_e1_83;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_range_80_85;
		BitBlock sequence_e1_83_adv, r1000_1fff_tmp11, r1000_1fff_tmp12, byte_87;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15, byte_8d;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock byte_range_90_ba, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_range_bc_bf, r1000_1fff_tmp25, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_b4, r2000_2fff_tmp3;
		BitBlock sequence_e2_b4, byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_range_80_a5;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, byte_a7, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_ad;
		BitBlock r2000_2fff_tmp16;




        struct_sc_Geor.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 5))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(2), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp9 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(3), sequence_e1_83_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_83_adv, byte_range_80_85);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp7);
                  byte_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(sequence_e1_83_adv, byte_87);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(sequence_e1_83_adv, byte_8d);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_or(basis_bits.bit_5, r1000_1fff_tmp7);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_4, r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_not(r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ba = simd_and(r800_ffff_tmp5, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_83_adv, byte_range_90_ba);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp24 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp23);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp14);
                  r1000_1fff_tmp25 = simd_and(sequence_e1_83_adv, byte_range_bc_bf);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r1000_1fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(4, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(4, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_b4 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r2000_2fff_tmp3));
                  sequence_e2_b4 = simd_and(r2000_2fff_tmp3, byte_b4);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp5 = simd_or(basis_bits.bit_4, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_or(basis_bits.bit_3, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_2, r2000_2fff_tmp6);
                  byte_range_80_a5 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(5), sequence_e2_b4_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_b4_adv, byte_range_80_a5);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp10);
                  byte_a7 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(sequence_e2_b4_adv, byte_a7);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp14);
                  byte_ad = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(sequence_e2_b4_adv, byte_ad);
                  struct_sc_Geor.cc = simd_or(struct_sc_Geor.cc, r2000_2fff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Yiii {
  Property_sc_Yiii() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Yiii & struct_sc_Yiii) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_range_80_91;
		BitBlock ra000_ffff_tmp9, byte_ea_byte_range_80_91, byte_range_80_bf;
		BitBlock ra000_ffff_tmp10, byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_92, sequence_ea_92;
		BitBlock byte_ea_adv, ra000_ffff_tmp14, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, byte_range_80_8c;
		BitBlock sequence_ea_92_adv, ra000_ffff_tmp19, byte_range_90_bf;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp23, ra000_ffff_tmp24, byte_range_80_86;
		BitBlock sequence_ea_93_adv, ra000_ffff_tmp25;




        struct_sc_Yiii.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 4))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(ra000_ffff_tmp6, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_3, ra000_ffff_tmp7);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp9, byte_range_80_91);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(1), ra000_ffff_tmp10));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp10, byte_range_80_bf);
              struct_sc_Yiii.cc = simd_or(struct_sc_Yiii.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp12 = simd_and(byte_range_80_bf, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp6);
              byte_92 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp13);
              sequence_ea_92 = simd_and(ra000_ffff_tmp9, byte_92);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp15 = simd_andc(byte_range_80_bf, ra000_ffff_tmp14);
              ra000_ffff_tmp16 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_5, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_4, ra000_ffff_tmp17);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp18);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(2), sequence_ea_92_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_92_adv, byte_range_80_8c);
              struct_sc_Yiii.cc = simd_or(struct_sc_Yiii.cc, ra000_ffff_tmp19);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp14);
              ra000_ffff_tmp20 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
              struct_sc_Yiii.cc = simd_or(struct_sc_Yiii.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp21, ra000_ffff_tmp6);
              byte_93 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp22);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp23 = simd_andc(ra000_ffff_tmp15, basis_bits.bit_4);
              ra000_ffff_tmp24 = simd_and(basis_bits.bit_5, ra000_ffff_tmp21);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp23, ra000_ffff_tmp24);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(3), sequence_ea_93_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_93_adv, byte_range_80_86);
              struct_sc_Yiii.cc = simd_or(struct_sc_Yiii.cc, ra000_ffff_tmp25);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Bamu {
  Property_sc_Bamu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Bamu & struct_sc_Bamu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_9a, ra000_ffff_tmp7, sequence_ea_9a;
		BitBlock byte_ea_adv, byte_range_a0_bf, sequence_ea_9a_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, byte_9b, sequence_ea_9b;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_80_b7;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp13, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_96, r10000_10ffff_tmp10, sequence_f0_96;
		BitBlock r10000_10ffff_tmp11, byte_range_a0_a7, r10000_10ffff_tmp12;
		BitBlock sequence_f0_96_byte_range_a0_a7, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp13, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_a8, sequence_f0_96_a8, r10000_10ffff_tmp17, byte_f0_adv;
		BitBlock sequence_f0_96_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, byte_range_80_b8;
		BitBlock sequence_f0_96_a8_adv, r10000_10ffff_tmp22;




        struct_sc_Bamu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 7))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              byte_9a = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp3);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp7));
              sequence_ea_9a = simd_and(ra000_ffff_tmp7, byte_9a);
              byte_ea_adv = ra000_ffff_tmp7;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(1), sequence_ea_9a_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ea_9a_adv, byte_range_a0_bf);
              struct_sc_Bamu.cc = simd_or(struct_sc_Bamu.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_9b = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp10);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              byte_range_80_b7 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp12);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(2), sequence_ea_9b_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_9b_adv, byte_range_80_b7);
              struct_sc_Bamu.cc = simd_or(struct_sc_Bamu.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(3, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(3), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_4);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(4), r10000_10ffff_tmp12));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp12, byte_range_a0_a7);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(5), r10000_10ffff_tmp13));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp13, byte_range_80_bf);
            struct_sc_Bamu.cc = simd_or(struct_sc_Bamu.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp12, byte_a8);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp20);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp21);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(6), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_96_a8_adv, byte_range_80_b8);
            struct_sc_Bamu.cc = simd_or(struct_sc_Bamu.cc, r10000_10ffff_tmp22);
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 7);
        }
        carryQ.CarryQ_Adjust(7);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<7, 0> carryQ;
  };

  struct Property_sc_Cyrl {
  Property_sc_Cyrl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cyrl & struct_sc_Cyrl) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, byte_range_80_bf, r400_4ff_tmp2;
		BitBlock byte_range_d0_d1_sfx, r400_4ff_tmp3, r400_4ff_tmp4, byte_d2;
		BitBlock r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7, r400_4ff_tmp8;
		BitBlock r400_4ff_tmp9, byte_range_80_84, byte_d2_adv, r400_4ff_tmp10;
		BitBlock r400_4ff_tmp11, r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14;
		BitBlock r400_4ff_tmp15, byte_range_87_bf, r400_4ff_tmp16, r400_4ff_tmp17;
		BitBlock byte_d3, byte_d3_adv, r400_4ff_tmp18, r400_5ff_tmp2, r400_5ff_tmp3;
		BitBlock byte_range_d4_d5, r400_5ff_tmp4, r400_5ff_tmp5, byte_d6;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, byte_range_80_8f, r400_5ff_tmp8;
		BitBlock r400_5ff_tmp9, r400_5ff_tmp10, r500_58f_tmp1, r500_58f_tmp2, byte_d4;
		BitBlock r500_58f_tmp3, byte_range_80_af, r500_58f_tmp4, r500_58f_tmp5;
		BitBlock byte_d4_adv, r500_52f_tmp1, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b4;
		BitBlock r1000_1fff_tmp3, sequence_e1_b4, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_ab;
		BitBlock sequence_e1_b4_adv, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_b5;
		BitBlock sequence_e1_b5, r1000_1fff_tmp10, byte_b8, sequence_e1_b5_adv;
		BitBlock r1000_1fff_tmp11, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, byte_b7;
		BitBlock r2000_2fff_tmp5, sequence_e2_b7, byte_e2_adv, byte_range_a0_bf;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp6, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_99, ra000_ffff_tmp8, sequence_ea_99;
		BitBlock byte_ea_adv, sequence_ea_99_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock byte_9a, sequence_ea_9a, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, byte_range_80_9d;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_9f, ra000_ffff_tmp18;




        struct_sc_Cyrl.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 14))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 5))) {
              r400_5ff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp2, r400_5ff_tmp1);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(0, 3))) {
                r400_4ff_tmp1 = simd_or(r400_5ff_tmp1, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp2, r400_4ff_tmp1);
                byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(0), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, byte_range_d0_d1_sfx);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r400_5ff_tmp1);
                byte_d2 = simd_and(r80_7ff_tmp2, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp6 = simd_andc(byte_range_80_bf, r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_andc(r400_4ff_tmp6, basis_bits.bit_4);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp9 = simd_and(basis_bits.bit_5, r400_4ff_tmp8);
                byte_range_80_84 = simd_andc(r400_4ff_tmp7, r400_4ff_tmp9);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(1), byte_d2_adv));
                r400_4ff_tmp10 = simd_and(byte_d2_adv, byte_range_80_84);
                struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r400_4ff_tmp10);
                r400_4ff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp12 = simd_and(basis_bits.bit_5, r400_4ff_tmp11);
                r400_4ff_tmp13 = simd_or(basis_bits.bit_4, r400_4ff_tmp12);
                r400_4ff_tmp14 = simd_or(basis_bits.bit_3, r400_4ff_tmp13);
                r400_4ff_tmp15 = simd_or(basis_bits.bit_2, r400_4ff_tmp14);
                byte_range_87_bf = simd_and(byte_range_80_bf, r400_4ff_tmp15);
                r400_4ff_tmp16 = simd_and(byte_d2_adv, byte_range_87_bf);
                struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r400_4ff_tmp16);
                r400_4ff_tmp17 = simd_andc(r400_4ff_tmp11, r400_5ff_tmp1);
                byte_d3 = simd_and(r80_7ff_tmp2, r400_4ff_tmp17);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(2), byte_d3_adv));
                r400_4ff_tmp18 = simd_and(byte_d3_adv, byte_range_80_bf);
                struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r400_4ff_tmp18);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 3);
              }
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp3 = simd_andc(r400_5ff_tmp2, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp5 = simd_and(r400_5ff_tmp2, r400_5ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp5);
              r400_5ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp6, r400_5ff_tmp7);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp8));
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp8, byte_range_80_8f);
              r400_5ff_tmp10 = simd_or(byte_range_d4_d5, r400_5ff_tmp9);
              if ((bitblock::any(r400_5ff_tmp10) || carryQ.CarryTest(4, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp2, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r400_5ff_tmp6, r500_58f_tmp3);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(4), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp5)) {
                  byte_d4_adv = r500_58f_tmp4;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r500_52f_tmp1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 9))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(6, 5))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(6, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(6, 3))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_b4 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r1000_1fff_tmp3));
                  sequence_e1_b4 = simd_and(r1000_1fff_tmp3, byte_b4);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp6);
                  byte_ab = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp7);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(7), sequence_e1_b4_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_b4_adv, byte_ab);
                  struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp3);
                  byte_b8 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp10);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(8), sequence_e1_b5_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_b5_adv, byte_b8);
                  struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r1000_1fff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(9, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(9, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b7 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(9), r2000_2fff_tmp5));
                  sequence_e2_b7 = simd_and(r2000_2fff_tmp5, byte_b7);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(10), sequence_e2_b7_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(11, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(11), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(12), sequence_ea_99_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_99_adv, byte_range_80_bf);
              struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              byte_9a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp12, basis_bits.bit_6);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_3, ra000_ffff_tmp13);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp11, ra000_ffff_tmp14);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(13), sequence_ea_9a_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_9a_adv, byte_range_80_9d);
              struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp16);
              byte_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, byte_9f);
              struct_sc_Cyrl.cc = simd_or(struct_sc_Cyrl.cc, ra000_ffff_tmp18);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 9);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 14);
        }
        carryQ.CarryQ_Adjust(14);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<14, 0> carryQ;
  };

  struct Property_sc_Gujr {
  Property_sc_Gujr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Gujr & struct_sc_Gujr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_aa;
		BitBlock r800_fff_tmp5, sequence_e0_aa, byte_e0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_range_81_83, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_range_85_8d, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, byte_range_8f_91, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, byte_range_93_a8, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, byte_range_aa_b0, r800_fff_tmp35, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, byte_range_b2_b3, r800_fff_tmp39;
		BitBlock r800_fff_tmp40, r800_fff_tmp41, byte_range_b5_b9, r800_fff_tmp42;
		BitBlock byte_range_bc_bf, r800_fff_tmp43, r800_fff_tmp44, byte_ab;
		BitBlock sequence_e0_ab, r800_fff_tmp45, byte_range_80_85, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48, byte_range_87_89;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock byte_range_8b_8d, r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55;
		BitBlock byte_90, r800_fff_tmp56, byte_range_a0_a3, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, byte_range_a6_b1, r800_fff_tmp60;




        struct_sc_Gujr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_aa = simd_and(r800_fff_tmp5, byte_aa);
                  byte_e0_adv = r800_fff_tmp5;
                  r800_fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_andc(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r800_fff_tmp8, r800_ffff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(2), sequence_e0_aa_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_aa_adv, byte_range_81_83);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp11), simd_andc(r800_fff_tmp12, basis_bits.bit_4));
                  byte_range_85_8d = simd_and(r800_fff_tmp7, r800_fff_tmp13);
                  r800_fff_tmp14 = simd_and(sequence_e0_aa_adv, byte_range_85_8d);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp16 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp17, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp16), simd_andc(r800_fff_tmp19, basis_bits.bit_3));
                  byte_range_8f_91 = simd_and(r800_fff_tmp15, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(sequence_e0_aa_adv, byte_range_8f_91);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_4, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_3, r800_fff_tmp23);
                  r800_fff_tmp25 = simd_not(r800_fff_tmp24);
                  r800_fff_tmp26 = simd_or(r800_ffff_tmp1, r800_fff_tmp18);
                  r800_fff_tmp27 = simd_and(basis_bits.bit_3, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp25), simd_andc(r800_fff_tmp27, basis_bits.bit_2));
                  byte_range_93_a8 = simd_and(r800_ffff_tmp5, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_and(sequence_e0_aa_adv, byte_range_93_a8);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp31 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp33 = simd_and(basis_bits.bit_4, r800_fff_tmp32);
                  r800_fff_tmp34 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp31), simd_andc(r800_fff_tmp33, basis_bits.bit_3));
                  byte_range_aa_b0 = simd_and(r800_fff_tmp30, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(sequence_e0_aa_adv, byte_range_aa_b0);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp37 = simd_and(r800_ffff_tmp5, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp37, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(sequence_e0_aa_adv, byte_range_b2_b3);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_not(r800_fff_tmp32);
                  r800_fff_tmp41 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp40), simd_andc(r800_fff_tmp12, basis_bits.bit_4));
                  byte_range_b5_b9 = simd_and(r800_fff_tmp37, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_and(sequence_e0_aa_adv, byte_range_b5_b9);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp42);
                  byte_range_bc_bf = simd_and(r800_fff_tmp37, r800_fff_tmp17);
                  r800_fff_tmp43 = simd_and(sequence_e0_aa_adv, byte_range_bc_bf);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_fff_tmp2, r800_fff_tmp18);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp45 = simd_andc(r800_fff_tmp7, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r800_fff_tmp45, r800_fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(3), sequence_e0_ab_adv));
                  r800_fff_tmp46 = simd_and(sequence_e0_ab_adv, byte_range_80_85);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(basis_bits.bit_5, r800_fff_tmp18);
                  r800_fff_tmp48 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp40), simd_andc(r800_fff_tmp47, basis_bits.bit_4));
                  byte_range_87_89 = simd_and(r800_fff_tmp7, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(sequence_e0_ab_adv, byte_range_87_89);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp49);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp51 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp52 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp51), simd_andc(r800_fff_tmp18, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r800_fff_tmp50, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_and(sequence_e0_ab_adv, byte_range_8b_8d);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp55 = simd_and(r800_ffff_tmp5, r800_fff_tmp54);
                  byte_90 = simd_andc(r800_fff_tmp55, r800_1fff_tmp1);
                  r800_fff_tmp56 = simd_and(sequence_e0_ab_adv, byte_90);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp56);
                  byte_range_a0_a3 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  r800_fff_tmp57 = simd_and(sequence_e0_ab_adv, byte_range_a0_a3);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_or(basis_bits.bit_4, r800_fff_tmp10);
                  r800_fff_tmp59 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp16), simd_andc(r800_fff_tmp58, basis_bits.bit_3));
                  byte_range_a6_b1 = simd_and(r800_fff_tmp30, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_and(sequence_e0_ab_adv, byte_range_a6_b1);
                  struct_sc_Gujr.cc = simd_or(struct_sc_Gujr.cc, r800_fff_tmp60);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Zinh {
  Property_sc_Zinh() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Zinh & struct_sc_Zinh) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, byte_range_80_bf, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1, r400_4ff_tmp2;
		BitBlock byte_d2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6;
		BitBlock r400_4ff_tmp7, byte_range_85_86, byte_d2_adv, r400_4ff_tmp8;
		BitBlock r80_7ff_tmp6, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d9;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10;
		BitBlock r600_6ff_tmp11, byte_range_8b_95, byte_d9_adv, r600_6ff_tmp12;
		BitBlock r600_6ff_tmp13, r600_6ff_tmp14, r600_6ff_tmp15, r600_6ff_tmp16;
		BitBlock byte_b0, r600_6ff_tmp17, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a5;
		BitBlock r800_fff_tmp4, sequence_e0_a5, byte_e0_adv, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, byte_range_91_92;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp9, r800_1fff_tmp2, r800_1fff_tmp3;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_aa, r1000_1fff_tmp5, sequence_e1_aa;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_range_b0_be;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp11, r1000_1fff_tmp12, byte_b3;
		BitBlock sequence_e1_b3, r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock byte_range_90_92, sequence_e1_b3_adv, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_range_94_a0, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock r1000_1fff_tmp25, byte_range_a2_a8, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, byte_ad, r1000_1fff_tmp29;
		BitBlock byte_b4, r1000_1fff_tmp30, r1000_1fff_tmp31, byte_range_b8_b9;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, byte_b7, sequence_e1_b7;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, byte_range_80_b5, sequence_e1_b7_adv;
		BitBlock r1000_1fff_tmp38, byte_range_bc_bf, r1000_1fff_tmp39, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, byte_range_8c_8d, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, byte_83;
		BitBlock sequence_e2_83, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock byte_range_90_b0, sequence_e2_83_adv, r2000_2fff_tmp13;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, byte_range_aa_ad, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp8, byte_82, sequence_e3_82, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_99_9a, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_b8, ra000_ffff_tmp8, sequence_ef_b8, byte_ef_adv;
		BitBlock ra000_ffff_tmp9, byte_range_80_8f, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, byte_range_a0_ad, ra000_ffff_tmp14, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_87;
		BitBlock r10000_10ffff_tmp13, sequence_f0_90_87, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_bd;
		BitBlock sequence_f0_90_87_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_8b, sequence_f0_90_8b, r10000_10ffff_tmp21;
		BitBlock byte_a0, sequence_f0_90_8b_adv, r10000_10ffff_tmp22, byte_9d;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp23, byte_85, r10000_10ffff_tmp24;
		BitBlock sequence_f0_9d_85, sequence_f0_9d_adv, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock byte_range_a7_a9, sequence_f0_9d_85_adv, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, byte_range_bb_bf;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock byte_86, sequence_f0_9d_86, r10000_10ffff_tmp35, byte_range_80_82;
		BitBlock sequence_f0_9d_86_adv, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, byte_range_85_8b;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_f3;
		BitBlock r10000_10ffff_tmp45, sequence_f3_a0, r10000_10ffff_tmp46;
		BitBlock byte_range_84_86, r10000_10ffff_tmp47;
		BitBlock sequence_f3_a0_byte_range_84_86, r10000_10ffff_tmp48;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, r10000_10ffff_tmp49;
		BitBlock sequence_f3_a0_87, r10000_10ffff_tmp50, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87_adv, r10000_10ffff_tmp51;




        struct_sc_Zinh.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 30))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r100_3ff_tmp6;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(1), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 1))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(2, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r80_7ff_tmp3);
                byte_d2 = simd_and(r80_7ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r80_7ff_tmp1);
                r400_4ff_tmp5 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r400_4ff_tmp6 = simd_and(r400_4ff_tmp4, r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                byte_range_85_86 = simd_and(r400_4ff_tmp6, r400_4ff_tmp7);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(2), byte_d2_adv));
                r400_4ff_tmp8 = simd_and(byte_d2_adv, byte_range_85_86);
                struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r400_4ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 1);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(3, 1))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_4, r600_6ff_tmp5);
              r600_6ff_tmp7 = simd_not(r600_6ff_tmp6);
              r600_6ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp9 = simd_or(basis_bits.bit_5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_and(basis_bits.bit_4, r600_6ff_tmp9);
              r600_6ff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp7), simd_andc(r600_6ff_tmp10, basis_bits.bit_3));
              byte_range_8b_95 = simd_and(r600_6ff_tmp4, r600_6ff_tmp11);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(3), byte_d9_adv));
              r600_6ff_tmp12 = simd_and(byte_d9_adv, byte_range_8b_95);
              struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp14 = simd_and(r600_6ff_tmp3, r600_6ff_tmp13);
              r600_6ff_tmp15 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp16 = simd_or(r80_7ff_tmp3, r600_6ff_tmp15);
              byte_b0 = simd_andc(r600_6ff_tmp14, r600_6ff_tmp16);
              r600_6ff_tmp17 = simd_and(byte_d9_adv, byte_b0);
              struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r600_6ff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 15))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(4), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(5, 12))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(5, 6))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(5, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(5), r800_fff_tmp4));
                  sequence_e0_a5 = simd_and(r800_fff_tmp4, byte_a5);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  r800_fff_tmp8 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_91_92 = simd_and(r800_fff_tmp7, r800_fff_tmp8);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(6), sequence_e0_a5_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a5_adv, byte_range_91_92);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r800_fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 2);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(7, 4))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_aa = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(7), r1000_1fff_tmp5));
                  sequence_e1_aa = simd_and(r1000_1fff_tmp5, byte_aa);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, r1000_1fff_tmp8);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, r1000_1fff_tmp9);
                  byte_range_b0_be = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp10);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(8), sequence_e1_aa_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_aa_adv, byte_range_b0_be);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp8, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp12);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(r1000_1fff_tmp14, r800_ffff_tmp1);
                  byte_range_90_92 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp8);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(9), sequence_e1_b3_adv));
                  r1000_1fff_tmp16 = simd_and(sequence_e1_b3_adv, byte_range_90_92);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp18 = simd_not(r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp18), simd_andc(r1000_1fff_tmp19, basis_bits.bit_2));
                  byte_range_94_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(sequence_e1_b3_adv, byte_range_94_a0);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp23 = simd_not(r1000_1fff_tmp22);
                  r1000_1fff_tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp25 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp23), simd_andc(r1000_1fff_tmp24, basis_bits.bit_4));
                  byte_range_a2_a8 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(sequence_e1_b3_adv, byte_range_a2_a8);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp27, r800_1fff_tmp2);
                  byte_ad = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(sequence_e1_b3_adv, byte_ad);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp29);
                  byte_b4 = simd_and(r1000_1fff_tmp7, r800_ffff_tmp4);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_b3_adv, byte_b4);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_b3_adv, byte_range_b8_b9);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp8);
                  byte_b7 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp33);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp35 = simd_or(basis_bits.bit_4, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_and(basis_bits.bit_3, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_and(basis_bits.bit_2, r1000_1fff_tmp36);
                  byte_range_80_b5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp37);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(10), sequence_e1_b7_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_b7_adv, byte_range_80_b5);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp38);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp27);
                  r1000_1fff_tmp39 = simd_and(sequence_e1_b7_adv, byte_range_bc_bf);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r1000_1fff_tmp39);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 6);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(11, 6))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(11, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(11), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp5, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(12), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_8c_8d);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp8, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp9);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_3, r2000_2fff_tmp3);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp11), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp12);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(13), sequence_e2_83_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_83_adv, byte_range_90_b0);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r2000_2fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(11, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(14, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_ad = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_aa_ad);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r3000_4dff_tmp8);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp12 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(16), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
                  struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r3000_4dff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 6);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 12);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(17, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(17), ra000_ffff_tmp8));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp8, byte_b8);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp9);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(18), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, ra000_ffff_tmp12);
              byte_range_a0_ad = simd_andc(ra000_ffff_tmp11, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(sequence_ef_b8_adv, byte_range_a0_ad);
              struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 15);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(19, 11))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(19), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(20), r10000_10ffff_tmp13));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp13, byte_87);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_bd = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(21), sequence_f0_90_87_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp3);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(22), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp22);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp23);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(23), r10000_10ffff_tmp24));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp24, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp24;
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_not(r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp26), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            byte_range_a7_a9 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp28);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(24), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_9d_85_adv, byte_range_a7_a9);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp14, basis_bits.bit_4);
            r10000_10ffff_tmp31 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp11);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(sequence_f0_9d_85_adv, byte_range_bb_bf);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp33);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp34);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp11);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(25), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_9d_86_adv, byte_range_80_82);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp38 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp39 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp37), simd_andc(r10000_10ffff_tmp38, basis_bits.bit_4));
            byte_range_85_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(sequence_f0_9d_86_adv, byte_range_85_8b);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp42 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_aa_ad = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_and(sequence_f0_9d_86_adv, byte_range_aa_ad);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp44);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(26), r10000_10ffff_tmp45));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp45, byte_a0);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp11);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(27), r10000_10ffff_tmp47));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp47, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(28), r10000_10ffff_tmp48));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp48, byte_range_80_bf);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp49 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            sequence_f3_a0_87 = simd_and(r10000_10ffff_tmp47, byte_87);
            r10000_10ffff_tmp50 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_f3_adv = r10000_10ffff_tmp45;
            sequence_f3_a0_adv = r10000_10ffff_tmp47;
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(29), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f3_a0_87_adv, byte_range_80_af);
            struct_sc_Zinh.cc = simd_or(struct_sc_Zinh.cc, r10000_10ffff_tmp51);
          }
          else {
            carryQ.CarryDequeueEnqueue(19, 11);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 30);
        }
        carryQ.CarryQ_Adjust(30);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<30, 0> carryQ;
  };

  struct Property_sc_Lana {
  Property_sc_Lana() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Lana & struct_sc_Lana) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a8;
		BitBlock r1000_1fff_tmp4, sequence_e1_a8, byte_e1_adv, byte_range_a0_bf;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_a9;
		BitBlock sequence_e1_a9, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_80_9e;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, byte_range_a0_bc, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, byte_bf, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, byte_aa, sequence_e1_aa;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_range_80_89, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock byte_range_90_99, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, byte_range_a0_ad, r1000_1fff_tmp31;




        struct_sc_Lana.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 4))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a8 = simd_and(r1000_1fff_tmp4, byte_a8);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(2), sequence_e1_a8_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a8_adv, byte_range_a0_bf);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp1);
                  byte_a9 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp6);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp7 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp11);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(3), sequence_e1_a9_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_a9_adv, byte_range_80_9e);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp8, r800_ffff_tmp3);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_3, r1000_1fff_tmp13);
                  byte_range_a0_bc = simd_andc(byte_range_a0_bf, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_a9_adv, byte_range_a0_bc);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp16);
                  byte_bf = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp10);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_a9_adv, byte_bf);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp19);
                  byte_aa = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp20);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp22 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp24 = simd_and(basis_bits.bit_4, r1000_1fff_tmp23);
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp22, r1000_1fff_tmp24);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(4), sequence_e1_aa_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_aa_adv, byte_range_80_89);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp27 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp26);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp27, r1000_1fff_tmp24);
                  r1000_1fff_tmp28 = simd_and(sequence_e1_aa_adv, byte_range_90_99);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp30 = simd_and(basis_bits.bit_4, r1000_1fff_tmp29);
                  byte_range_a0_ad = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(sequence_e1_aa_adv, byte_range_a0_ad);
                  struct_sc_Lana.cc = simd_or(struct_sc_Lana.cc, r1000_1fff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Egyp {
  Property_sc_Egyp() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Egyp & struct_sc_Egyp) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_93, r10000_10ffff_tmp9;
		BitBlock sequence_f0_93, r10000_10ffff_tmp10, byte_range_80_8f;
		BitBlock r10000_10ffff_tmp11, sequence_f0_93_byte_range_80_8f;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, r10000_10ffff_tmp13, byte_90;
		BitBlock sequence_f0_93_90, byte_f0_adv, sequence_f0_93_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_range_80_ae, sequence_f0_93_90_adv;
		BitBlock r10000_10ffff_tmp18;




        struct_sc_Egyp.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_93 = simd_and(r10000_10ffff_tmp9, byte_93);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp11, byte_range_80_8f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_sc_Egyp.cc = simd_or(struct_sc_Egyp.cc, sequence_f0_93_byte_range_80_8f_sfx);
            r10000_10ffff_tmp13 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp3);
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp11, byte_90);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_93_adv = r10000_10ffff_tmp11;
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp7);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp16);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp17);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(3), sequence_f0_93_90_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_93_90_adv, byte_range_80_ae);
            struct_sc_Egyp.cc = simd_or(struct_sc_Egyp.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Cans {
  Property_sc_Cans() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cans & struct_sc_Cans) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_range_90_99, r1000_1fff_tmp5;
		BitBlock byte_e1_byte_range_90_99, byte_range_80_bf, r1000_1fff_tmp6;
		BitBlock byte_e1_byte_range_90_99_sfx, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, byte_a2, sequence_e1_a2, byte_e1_adv;
		BitBlock r1000_1fff_tmp10, byte_range_b0_bf, sequence_e1_a2_adv;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13, byte_a3;
		BitBlock sequence_e1_a3, r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, byte_range_80_b5, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp18;




        struct_sc_Cans.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 4))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_4, r1000_1fff_tmp3);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  byte_e1_byte_range_90_99 = simd_and(r1000_1fff_tmp5, byte_range_90_99);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_90_99, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  byte_e1_byte_range_90_99_sfx = simd_and(r1000_1fff_tmp6, byte_range_80_bf);
                  struct_sc_Cans.cc = simd_or(struct_sc_Cans.cc, byte_e1_byte_range_90_99_sfx);
                  r1000_1fff_tmp7 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_andc(r1000_1fff_tmp8, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  sequence_e1_a2 = simd_and(r1000_1fff_tmp5, byte_a2);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(3), sequence_e1_a2_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_a2_adv, byte_range_b0_bf);
                  struct_sc_Cans.cc = simd_or(struct_sc_Cans.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp13 = simd_andc(r1000_1fff_tmp12, r800_ffff_tmp1);
                  byte_a3 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp13);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp15 = simd_or(basis_bits.bit_4, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_3, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_2, r1000_1fff_tmp16);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp17);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(4), sequence_e1_a3_adv));
                  r1000_1fff_tmp18 = simd_and(sequence_e1_a3_adv, byte_range_80_b5);
                  struct_sc_Cans.cc = simd_or(struct_sc_Cans.cc, r1000_1fff_tmp18);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Tglg {
  Property_sc_Tglg() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tglg & struct_sc_Tglg) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9c, r1000_1fff_tmp5, sequence_e1_9c;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, byte_range_80_8c, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock byte_range_8e_94, r1000_1fff_tmp16;




        struct_sc_Tglg.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9c = simd_and(r1000_1fff_tmp5, byte_9c);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp7 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, r1000_1fff_tmp8);
                  byte_range_80_8c = simd_andc(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(2), sequence_e1_9c_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_9c_adv, byte_range_80_8c);
                  struct_sc_Tglg.cc = simd_or(struct_sc_Tglg.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_4, r1000_1fff_tmp8);
                  r1000_1fff_tmp13 = simd_not(r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp3, basis_bits.bit_6);
                  r1000_1fff_tmp15 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp13), simd_andc(r1000_1fff_tmp14, basis_bits.bit_3));
                  byte_range_8e_94 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(sequence_e1_9c_adv, byte_range_8e_94);
                  struct_sc_Tglg.cc = simd_or(struct_sc_Tglg.cc, r1000_1fff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Limb {
  Property_sc_Limb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Limb & struct_sc_Limb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, byte_a4, r1000_1fff_tmp2, sequence_e1_a4;
		BitBlock byte_e1_adv, r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_9e;
		BitBlock sequence_e1_a4_adv, r1000_1fff_tmp8, byte_range_a0_ab;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_b0_bb;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_a5, sequence_e1_a5;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16, byte_80;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp17, byte_range_84_8f;
		BitBlock r1000_1fff_tmp18;




        struct_sc_Limb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r1000_1fff_tmp1, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp2));
                  sequence_e1_a4 = simd_and(r1000_1fff_tmp2, byte_a4);
                  byte_e1_adv = r1000_1fff_tmp2;
                  r1000_1fff_tmp3 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_3, r1000_1fff_tmp6);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp3, r1000_1fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(2), sequence_e1_a4_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_a4_adv, byte_range_80_9e);
                  struct_sc_Limb.cc = simd_or(struct_sc_Limb.cc, r1000_1fff_tmp8);
                  byte_range_a0_ab = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  r1000_1fff_tmp9 = simd_and(sequence_e1_a4_adv, byte_range_a0_ab);
                  struct_sc_Limb.cc = simd_or(struct_sc_Limb.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  byte_range_b0_bb = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp4);
                  r1000_1fff_tmp12 = simd_and(sequence_e1_a4_adv, byte_range_b0_bb);
                  struct_sc_Limb.cc = simd_or(struct_sc_Limb.cc, r1000_1fff_tmp12);
                  r1000_1fff_tmp13 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp13);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp15 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(3), sequence_e1_a5_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_a5_adv, byte_80);
                  struct_sc_Limb.cc = simd_or(struct_sc_Limb.cc, r1000_1fff_tmp17);
                  byte_range_84_8f = simd_and(r1000_1fff_tmp15, r800_ffff_tmp1);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_a5_adv, byte_range_84_8f);
                  struct_sc_Limb.cc = simd_or(struct_sc_Limb.cc, r1000_1fff_tmp18);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Pauc {
  Property_sc_Pauc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Pauc & struct_sc_Pauc) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_ab, r10000_10ffff_tmp15, sequence_f0_91_ab, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, byte_range_80_b8;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp20;




        struct_sc_Pauc.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_ab = simd_and(r10000_10ffff_tmp15, byte_ab);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp18);
            byte_range_80_b8 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(2), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_sc_Pauc.cc = simd_or(struct_sc_Pauc.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Palm {
  Property_sc_Palm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Palm & struct_sc_Palm) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a1;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a1, byte_f0_adv;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_a1_adv;
		BitBlock r10000_10ffff_tmp13;




        struct_sc_Palm.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a1 = simd_and(r10000_10ffff_tmp12, byte_a1);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(2), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a1_adv, byte_range_a0_bf);
            struct_sc_Palm.cc = simd_or(struct_sc_Palm.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Arab {
  Property_sc_Arab() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Arab & struct_sc_Arab) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_range_80_84, byte_d8_adv, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, byte_range_86_8b;
		BitBlock r600_6ff_tmp12, r600_6ff_tmp13, r600_6ff_tmp14, r600_6ff_tmp15;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, byte_range_8d_9a, r600_6ff_tmp21, r600_6ff_tmp22;
		BitBlock r600_6ff_tmp23, r600_6ff_tmp24, byte_9e, r600_6ff_tmp25;
		BitBlock byte_range_a0_bf, r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28;
		BitBlock byte_d9, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock byte_range_81_8a, byte_d9_adv, r600_6ff_tmp32, r600_6ff_tmp33;
		BitBlock byte_range_96_9f, r600_6ff_tmp34, r600_6ff_tmp35, r600_6ff_tmp36;
		BitBlock r600_6ff_tmp37, r600_6ff_tmp38, byte_range_aa_af, r600_6ff_tmp39;
		BitBlock r600_6ff_tmp40, r600_6ff_tmp41, r600_6ff_tmp42, byte_range_b1_bf;
		BitBlock r600_6ff_tmp43, r600_6ff_tmp44, byte_da, byte_range_80_bf;
		BitBlock byte_da_adv, r600_6ff_tmp45, r600_6ff_tmp46, byte_db, r600_6ff_tmp47;
		BitBlock r600_6ff_tmp48, byte_range_80_9c, byte_db_adv, r600_6ff_tmp49;
		BitBlock r600_6ff_tmp50, r600_6ff_tmp51, r600_6ff_tmp52, byte_range_9e_bf;
		BitBlock r600_6ff_tmp53, r80_7ff_tmp4, r80_7ff_tmp5, byte_range_dc_dd;
		BitBlock r700_77f_tmp1, r700_77f_tmp2, byte_dd, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock byte_range_90_bf, r700_77f_tmp5, r700_77f_tmp6, byte_dd_adv;
		BitBlock r750_77f_tmp1, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a2, r800_fff_tmp4;
		BitBlock sequence_e0_a2, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_range_a0_b2, sequence_e0_a2_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, byte_a3, sequence_e0_a3;
		BitBlock r800_fff_tmp11, byte_range_a4_bf, sequence_e0_a3_adv, r800_fff_tmp12;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_ad, ra000_ffff_tmp7;
		BitBlock sequence_ef_ad, byte_ef_adv, ra000_ffff_tmp8, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, byte_ae;
		BitBlock sequence_ef_ae, sequence_ef_ae_adv, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, byte_af, sequence_ef_af, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, byte_range_80_81, sequence_ef_af_adv;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_93_bf, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_range_b0_b3;
		BitBlock byte_ef_byte_range_b0_b3, ra000_ffff_tmp23;
		BitBlock byte_ef_byte_range_b0_b3_sfx, byte_b4, sequence_ef_b4;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock byte_range_80_bd, sequence_ef_b4_adv, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, byte_b5, sequence_ef_b5, sequence_ef_b5_adv;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, byte_b6, sequence_ef_b6;
		BitBlock byte_range_80_8f, sequence_ef_b6_adv, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, byte_range_92_bf;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, byte_b7, sequence_ef_b7;
		BitBlock byte_range_80_87, sequence_ef_b7_adv, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, byte_range_b0_bd;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41, byte_b9;
		BitBlock sequence_ef_b9, ra000_ffff_tmp42, ra000_ffff_tmp43, byte_range_b0_b4;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock byte_range_b6_bf, ra000_ffff_tmp46, ra000_ffff_tmp47, byte_ba;
		BitBlock sequence_ef_ba, sequence_ef_ba_adv, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, byte_bb, sequence_ef_bb, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, byte_range_80_bc;
		BitBlock sequence_ef_bb_adv, ra000_ffff_tmp53, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, sequence_f0_90_b9;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_range_a0_be, sequence_f0_90_b9_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp21, byte_b8, r10000_10ffff_tmp22;
		BitBlock sequence_f0_9e_b8, sequence_f0_9e_adv, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, byte_range_80_83, sequence_f0_9e_b8_adv;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, byte_range_85_9f;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, byte_range_a1_a2, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_a4;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, byte_a7;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock byte_range_a9_b2, r10000_10ffff_tmp45, byte_range_b4_b7;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, sequence_f0_9e_b9, r10000_10ffff_tmp50, byte_82;
		BitBlock sequence_f0_9e_b9_adv, r10000_10ffff_tmp51, byte_87;
		BitBlock r10000_10ffff_tmp52, byte_89, r10000_10ffff_tmp53, byte_8b;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, byte_range_8d_8f;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, byte_range_91_92;
		BitBlock r10000_10ffff_tmp58, byte_94, r10000_10ffff_tmp59, byte_97;
		BitBlock r10000_10ffff_tmp60, byte_99, r10000_10ffff_tmp61, byte_9b;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, byte_9d;
		BitBlock r10000_10ffff_tmp64, byte_9f, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, r10000_10ffff_tmp71;
		BitBlock byte_range_a7_aa, r10000_10ffff_tmp72, r10000_10ffff_tmp73;
		BitBlock byte_range_ac_b2, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, byte_range_b9_bc;
		BitBlock r10000_10ffff_tmp78, byte_be, r10000_10ffff_tmp79;
		BitBlock r10000_10ffff_tmp80, sequence_f0_9e_ba, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, byte_range_80_89, sequence_f0_9e_ba_adv;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, byte_range_8b_9b, r10000_10ffff_tmp87;
		BitBlock byte_range_a1_a3, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock r10000_10ffff_tmp90, byte_range_a5_a9, r10000_10ffff_tmp91;
		BitBlock byte_range_ab_bb, r10000_10ffff_tmp92, sequence_f0_9e_bb;
		BitBlock r10000_10ffff_tmp93, byte_range_b0_b1, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp94;




        struct_sc_Arab.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 29))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(0, 4))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp2, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp5 = simd_andc(r600_6ff_tmp3, r600_6ff_tmp4);
              r600_6ff_tmp6 = simd_andc(r600_6ff_tmp5, basis_bits.bit_4);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_5, r600_6ff_tmp1);
              byte_range_80_84 = simd_andc(r600_6ff_tmp6, r600_6ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(0), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_80_84);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_not(basis_bits.bit_5);
              r600_6ff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp9), simd_andc(r600_6ff_tmp10, basis_bits.bit_4));
              byte_range_86_8b = simd_and(r600_6ff_tmp5, r600_6ff_tmp11);
              r600_6ff_tmp12 = simd_and(byte_d8_adv, byte_range_86_8b);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp15 = simd_or(basis_bits.bit_5, r600_6ff_tmp14);
              r600_6ff_tmp16 = simd_and(basis_bits.bit_4, r600_6ff_tmp15);
              r600_6ff_tmp17 = simd_not(r600_6ff_tmp16);
              r600_6ff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp19 = simd_and(r600_6ff_tmp18, r600_6ff_tmp1);
              r600_6ff_tmp20 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp17), simd_andc(r600_6ff_tmp19, basis_bits.bit_3));
              byte_range_8d_9a = simd_and(r600_6ff_tmp13, r600_6ff_tmp20);
              r600_6ff_tmp21 = simd_and(byte_d8_adv, byte_range_8d_9a);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp21);
              r600_6ff_tmp22 = simd_and(r600_6ff_tmp3, r80_7ff_tmp1);
              r600_6ff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp24 = simd_and(r600_6ff_tmp18, r600_6ff_tmp23);
              byte_9e = simd_and(r600_6ff_tmp22, r600_6ff_tmp24);
              r600_6ff_tmp25 = simd_and(byte_d8_adv, byte_9e);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp25);
              byte_range_a0_bf = simd_and(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp26 = simd_and(byte_d8_adv, byte_range_a0_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp26);
              r600_6ff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp28 = simd_and(r80_7ff_tmp3, r600_6ff_tmp27);
              byte_d9 = simd_and(r80_7ff_tmp2, r600_6ff_tmp28);
              r600_6ff_tmp29 = simd_not(r600_6ff_tmp15);
              r600_6ff_tmp30 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp31 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp29), simd_andc(r600_6ff_tmp30, basis_bits.bit_4));
              byte_range_81_8a = simd_and(r600_6ff_tmp5, r600_6ff_tmp31);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(1), byte_d9_adv));
              r600_6ff_tmp32 = simd_and(byte_d9_adv, byte_range_81_8a);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp32);
              r600_6ff_tmp33 = simd_or(basis_bits.bit_4, r600_6ff_tmp10);
              byte_range_96_9f = simd_and(r600_6ff_tmp22, r600_6ff_tmp33);
              r600_6ff_tmp34 = simd_and(byte_d9_adv, byte_range_96_9f);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp34);
              r600_6ff_tmp35 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp36 = simd_and(r600_6ff_tmp3, r600_6ff_tmp35);
              r600_6ff_tmp37 = simd_and(r600_6ff_tmp36, basis_bits.bit_4);
              r600_6ff_tmp38 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_aa_af = simd_and(r600_6ff_tmp37, r600_6ff_tmp38);
              r600_6ff_tmp39 = simd_and(byte_d9_adv, byte_range_aa_af);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp39);
              r600_6ff_tmp40 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp41 = simd_and(r600_6ff_tmp3, r600_6ff_tmp40);
              r600_6ff_tmp42 = simd_or(basis_bits.bit_4, r600_6ff_tmp30);
              byte_range_b1_bf = simd_and(r600_6ff_tmp41, r600_6ff_tmp42);
              r600_6ff_tmp43 = simd_and(byte_d9_adv, byte_range_b1_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp43);
              r600_6ff_tmp44 = simd_and(r80_7ff_tmp3, r600_6ff_tmp23);
              byte_da = simd_and(r80_7ff_tmp2, r600_6ff_tmp44);
              byte_range_80_bf = r600_6ff_tmp3;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(2), byte_da_adv));
              r600_6ff_tmp45 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp45);
              r600_6ff_tmp46 = simd_and(r80_7ff_tmp3, r600_6ff_tmp14);
              byte_db = simd_and(r80_7ff_tmp2, r600_6ff_tmp46);
              r600_6ff_tmp47 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp48 = simd_and(basis_bits.bit_3, r600_6ff_tmp19);
              byte_range_80_9c = simd_andc(r600_6ff_tmp47, r600_6ff_tmp48);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(3), byte_db_adv));
              r600_6ff_tmp49 = simd_and(byte_db_adv, byte_range_80_9c);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp49);
              r600_6ff_tmp50 = simd_and(r600_6ff_tmp18, basis_bits.bit_6);
              r600_6ff_tmp51 = simd_and(basis_bits.bit_3, r600_6ff_tmp50);
              r600_6ff_tmp52 = simd_or(basis_bits.bit_2, r600_6ff_tmp51);
              byte_range_9e_bf = simd_and(byte_range_80_bf, r600_6ff_tmp52);
              r600_6ff_tmp53 = simd_and(byte_db_adv, byte_range_9e_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r600_6ff_tmp53);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 4);
            }
            r80_7ff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(4, 1))) {
              r700_77f_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp4, r700_77f_tmp1);
              byte_dd = simd_and(r80_7ff_tmp2, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r700_77f_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r700_77f_tmp3, r700_77f_tmp4);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(4), r700_77f_tmp5));
              r700_77f_tmp6 = simd_and(r700_77f_tmp5, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp5;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 16))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(6, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(6, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(6, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(6), r800_fff_tmp4));
                  sequence_e0_a2 = simd_and(r800_fff_tmp4, byte_a2);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp7 = simd_or(r800_ffff_tmp1, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_3, r800_fff_tmp7);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp5, r800_fff_tmp8);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(7), sequence_e0_a2_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp11 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_a4_bf = simd_and(r800_fff_tmp5, r800_fff_tmp11);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(8), sequence_e0_a3_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r800_fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 3);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(9, 12))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp5);
              byte_ad = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(9), ra000_ffff_tmp7));
              sequence_ef_ad = simd_and(ra000_ffff_tmp7, byte_ad);
              byte_ef_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r800_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(10), sequence_ef_ad_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ef_ad_adv, byte_range_90_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_ae = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(11), sequence_ef_ae_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_ae_adv, byte_range_80_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_af = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp3);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp14 = simd_andc(byte_range_80_bf, ra000_ffff_tmp8);
              ra000_ffff_tmp15 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp15);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(12), sequence_ef_af_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ef_af_adv, byte_range_80_81);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp2);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_3, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_2, ra000_ffff_tmp18);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(sequence_ef_af_adv, byte_range_93_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp22 = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              byte_range_b0_b3 = simd_andc(ra000_ffff_tmp22, r800_ffff_tmp1);
              byte_ef_byte_range_b0_b3 = simd_and(byte_ef_adv, byte_range_b0_b3);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_b0_b3, carryQ.get_carry_in(13), ra000_ffff_tmp23));
              byte_ef_byte_range_b0_b3_sfx = simd_and(ra000_ffff_tmp23, byte_range_80_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, byte_ef_byte_range_b0_b3_sfx);
              byte_b4 = simd_and(ra000_ffff_tmp22, r800_ffff_tmp4);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_3, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_and(basis_bits.bit_2, ra000_ffff_tmp25);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp26);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(14), sequence_ef_b4_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ef_b4_adv, byte_range_80_bd);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp5);
              byte_b5 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp28);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(15), sequence_ef_b5_adv));
              ra000_ffff_tmp29 = simd_and(sequence_ef_b5_adv, byte_range_90_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_b6 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp30);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp14;
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(16), sequence_ef_b6_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ef_b6_adv, byte_range_80_8f);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_3, ra000_ffff_tmp15);
              ra000_ffff_tmp33 = simd_or(basis_bits.bit_2, ra000_ffff_tmp32);
              byte_range_92_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp33);
              ra000_ffff_tmp34 = simd_and(sequence_ef_b6_adv, byte_range_92_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_b7 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp35);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(17), sequence_ef_b7_adv));
              ra000_ffff_tmp36 = simd_and(sequence_ef_b7_adv, byte_range_80_87);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp36);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp38 = simd_and(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_b0_bd = simd_andc(ra000_ffff_tmp22, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_and(sequence_ef_b7_adv, byte_range_b0_bd);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp40, ra000_ffff_tmp5);
              byte_b9 = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp41);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp42 = simd_andc(ra000_ffff_tmp22, basis_bits.bit_4);
              ra000_ffff_tmp43 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
              byte_range_b0_b4 = simd_andc(ra000_ffff_tmp42, ra000_ffff_tmp43);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(18), sequence_ef_b9_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ef_b9_adv, byte_range_b0_b4);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_or(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_b6_bf = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(sequence_ef_b9_adv, byte_range_b6_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(ra000_ffff_tmp40, ra000_ffff_tmp10);
              byte_ba = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp47);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(19), sequence_ef_ba_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ef_ba_adv, byte_range_80_bf);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp40, ra000_ffff_tmp2);
              byte_bb = simd_and(ra000_ffff_tmp22, ra000_ffff_tmp49);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp50 = simd_and(ra000_ffff_tmp1, r800_ffff_tmp3);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_3, ra000_ffff_tmp50);
              ra000_ffff_tmp52 = simd_and(basis_bits.bit_2, ra000_ffff_tmp51);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp52);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(20), sequence_ef_bb_adv));
              ra000_ffff_tmp53 = simd_and(sequence_ef_bb_adv, byte_range_80_bc);
              struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, ra000_ffff_tmp53);
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 12);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 16);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(21, 8))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(21), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            byte_b9 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp11);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(22), r10000_10ffff_tmp12));
            sequence_f0_90_b9 = simd_and(r10000_10ffff_tmp12, byte_b9);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            byte_range_a0_be = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp17);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(23), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_be);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp19);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp2);
            byte_b8 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp21);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(24), r10000_10ffff_tmp22));
            sequence_f0_9e_b8 = simd_and(r10000_10ffff_tmp22, byte_b8);
            sequence_f0_9e_adv = r10000_10ffff_tmp22;
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp23);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp1);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(25), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_9e_b8_adv, byte_range_80_83);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            byte_range_85_9f = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_9e_b8_adv, byte_range_85_9f);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp32 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp1);
            r10000_10ffff_tmp33 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a1_a2 = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(sequence_f0_9e_b8_adv, byte_range_a1_a2);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp36 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp2);
            byte_a4 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_9e_b8_adv, byte_a4);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp15);
            byte_a7 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(sequence_f0_9e_b8_adv, byte_a7);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp15);
            r10000_10ffff_tmp41 = simd_not(r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp42);
            r10000_10ffff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp41), simd_andc(r10000_10ffff_tmp43, basis_bits.bit_3));
            byte_range_a9_b2 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_and(sequence_f0_9e_b8_adv, byte_range_a9_b2);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp45);
            byte_range_b4_b7 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp35);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_9e_b8_adv, byte_range_b4_b7);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(sequence_f0_9e_b8_adv, byte_b9);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp47);
            r10000_10ffff_tmp48 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            byte_bb = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_9e_b8_adv, byte_bb);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp49);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp50);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(26), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f0_9e_b9_adv, byte_82);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp51);
            byte_87 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp38);
            r10000_10ffff_tmp52 = simd_and(sequence_f0_9e_b9_adv, byte_87);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp52);
            byte_89 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp11);
            r10000_10ffff_tmp53 = simd_and(sequence_f0_9e_b9_adv, byte_89);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp53);
            byte_8b = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp48);
            r10000_10ffff_tmp54 = simd_and(sequence_f0_9e_b9_adv, byte_8b);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp14);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp2);
            r10000_10ffff_tmp56 = simd_and(sequence_f0_9e_b9_adv, byte_range_8d_8f);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp1);
            byte_range_91_92 = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp33);
            r10000_10ffff_tmp58 = simd_and(sequence_f0_9e_b9_adv, byte_range_91_92);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp58);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp36);
            r10000_10ffff_tmp59 = simd_and(sequence_f0_9e_b9_adv, byte_94);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp59);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            r10000_10ffff_tmp60 = simd_and(sequence_f0_9e_b9_adv, byte_97);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp60);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            r10000_10ffff_tmp61 = simd_and(sequence_f0_9e_b9_adv, byte_99);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp61);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp48);
            r10000_10ffff_tmp62 = simd_and(sequence_f0_9e_b9_adv, byte_9b);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp10);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_and(sequence_f0_9e_b9_adv, byte_9d);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp64);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp16);
            r10000_10ffff_tmp65 = simd_and(sequence_f0_9e_b9_adv, byte_9f);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(sequence_f0_9e_b9_adv, byte_range_a1_a2);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(sequence_f0_9e_b9_adv, byte_a4);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp69 = simd_not(r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp69), simd_andc(r10000_10ffff_tmp70, basis_bits.bit_4));
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(sequence_f0_9e_b9_adv, byte_range_a7_aa);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp72);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp41), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_3));
            byte_range_ac_b2 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(sequence_f0_9e_b9_adv, byte_range_ac_b2);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(sequence_f0_9e_b9_adv, byte_range_b4_b7);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp75);
            r10000_10ffff_tmp76 = simd_and(r10000_10ffff_tmp8, basis_bits.bit_4);
            r10000_10ffff_tmp77 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_b9_bc = simd_and(r10000_10ffff_tmp76, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(sequence_f0_9e_b9_adv, byte_range_b9_bc);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp78);
            byte_be = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp20);
            r10000_10ffff_tmp79 = simd_and(sequence_f0_9e_b9_adv, byte_be);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp79);
            r10000_10ffff_tmp80 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp19);
            byte_ba = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp80);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            r10000_10ffff_tmp81 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp82 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp81);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp82);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(27), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_9e_ba_adv, byte_range_80_89);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp85 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp68);
            r10000_10ffff_tmp86 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp84), simd_andc(r10000_10ffff_tmp85, basis_bits.bit_3));
            byte_range_8b_9b = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9e_ba_adv, byte_range_8b_9b);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp87);
            byte_range_a1_a3 = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp2);
            r10000_10ffff_tmp88 = simd_and(sequence_f0_9e_ba_adv, byte_range_a1_a3);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_not(r10000_10ffff_tmp81);
            r10000_10ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp89), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            byte_range_a5_a9 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_and(sequence_f0_9e_ba_adv, byte_range_a5_a9);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp91);
            byte_range_ab_bb = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp86);
            r10000_10ffff_tmp92 = simd_and(sequence_f0_9e_ba_adv, byte_range_ab_bb);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp92);
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            r10000_10ffff_tmp93 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_b0_b1 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp93);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(28), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp94 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
            struct_sc_Arab.cc = simd_or(struct_sc_Arab.cc, r10000_10ffff_tmp94);
          }
          else {
            carryQ.CarryDequeueEnqueue(21, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 29);
        }
        carryQ.CarryQ_Adjust(29);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<29, 0> carryQ;
  };

  struct Property_sc_Plrd {
  Property_sc_Plrd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Plrd & struct_sc_Plrd) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_bc;
		BitBlock r10000_10ffff_tmp14, sequence_f0_96_bc, byte_f0_adv;
		BitBlock sequence_f0_96_adv, byte_range_80_bf, sequence_f0_96_bc_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_bd, sequence_f0_96_bd, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, byte_range_80_84, sequence_f0_96_bd_adv;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock byte_range_90_be, r10000_10ffff_tmp30, r10000_10ffff_tmp31, byte_be;
		BitBlock sequence_f0_96_be, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock byte_range_8f_9f, sequence_f0_96_be_adv, r10000_10ffff_tmp34;




        struct_sc_Plrd.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_bc = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_96_bc = simd_and(r10000_10ffff_tmp14, byte_bc);
            byte_f0_adv = r10000_10ffff_tmp10;
            sequence_f0_96_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(2), sequence_f0_96_bc_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_96_bc_adv, byte_range_80_bf);
            struct_sc_Plrd.cc = simd_or(struct_sc_Plrd.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            byte_bd = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp19 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp21 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(3), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_96_bd_adv, byte_range_80_84);
            struct_sc_Plrd.cc = simd_or(struct_sc_Plrd.cc, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_not(r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp28), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_be = simd_and(byte_range_80_bf, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(sequence_f0_96_bd_adv, byte_range_90_be);
            struct_sc_Plrd.cc = simd_or(struct_sc_Plrd.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp8);
            byte_be = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp31);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp32 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp26);
            byte_range_8f_9f = simd_and(r10000_10ffff_tmp32, r10000_10ffff_tmp33);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(4), sequence_f0_96_be_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_96_be_adv, byte_range_8f_9f);
            struct_sc_Plrd.cc = simd_or(struct_sc_Plrd.cc, r10000_10ffff_tmp34);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_sc_Cakm {
  Property_sc_Cakm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cakm & struct_sc_Cakm) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_84;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_84, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_range_80_b4;
		BitBlock sequence_f0_91_84_adv, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_b6_bf;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, byte_85, sequence_f0_91_85;
		BitBlock byte_range_80_83, sequence_f0_91_85_adv, r10000_10ffff_tmp25;




        struct_sc_Cakm.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_84 = simd_and(r10000_10ffff_tmp14, byte_84);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp17);
            byte_range_80_b4 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp18);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(2), sequence_f0_91_84_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_84_adv, byte_range_80_b4);
            struct_sc_Cakm.cc = simd_or(struct_sc_Cakm.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp21);
            byte_range_b6_bf = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_84_adv, byte_range_b6_bf);
            struct_sc_Cakm.cc = simd_or(struct_sc_Cakm.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp24);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(3), sequence_f0_91_85_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_91_85_adv, byte_range_80_83);
            struct_sc_Cakm.cc = simd_or(struct_sc_Cakm.cc, r10000_10ffff_tmp25);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Ital {
  Property_sc_Ital() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Ital & struct_sc_Ital) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8c;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_8c, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_80_a3, sequence_f0_90_8c_adv, r10000_10ffff_tmp15;




        struct_sc_Ital.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_8c = simd_and(r10000_10ffff_tmp12, byte_8c);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp13);
            byte_range_80_a3 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp14);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(2), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_8c_adv, byte_range_80_a3);
            struct_sc_Ital.cc = simd_or(struct_sc_Ital.cc, r10000_10ffff_tmp15);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Phnx {
  Property_sc_Phnx() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Phnx & struct_sc_Phnx) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a4;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a4, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_range_80_9b, sequence_f0_90_a4_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_9f, r10000_10ffff_tmp19;




        struct_sc_Phnx.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a4 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a4 = simd_and(r10000_10ffff_tmp12, byte_a4);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            byte_range_80_9b = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp15);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(2), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_a4_adv, byte_range_80_9b);
            struct_sc_Phnx.cc = simd_or(struct_sc_Phnx.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_a4_adv, byte_9f);
            struct_sc_Phnx.cc = simd_or(struct_sc_Phnx.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Talu {
  Property_sc_Talu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Talu & struct_sc_Talu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a6;
		BitBlock r1000_1fff_tmp4, sequence_e1_a6, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_ab;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_b0_bf, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, byte_a7, sequence_e1_a7, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock byte_range_80_89, sequence_e1_a7_adv, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, byte_range_90_9a, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_range_9e_9f, r1000_1fff_tmp24;




        struct_sc_Talu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp2);
                  byte_a6 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a6 = simd_and(r1000_1fff_tmp4, byte_a6);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, r1000_1fff_tmp6);
                  byte_range_80_ab = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(2), sequence_e1_a6_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_a6_adv, byte_range_80_ab);
                  struct_sc_Talu.cc = simd_or(struct_sc_Talu.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
                  struct_sc_Talu.cc = simd_or(struct_sc_Talu.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp11);
                  byte_a7 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp12);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp14 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_4, r1000_1fff_tmp15);
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(3), sequence_e1_a7_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_a7_adv, byte_range_80_89);
                  struct_sc_Talu.cc = simd_or(struct_sc_Talu.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_or(basis_bits.bit_5, r1000_1fff_tmp11);
                  r1000_1fff_tmp21 = simd_and(basis_bits.bit_4, r1000_1fff_tmp20);
                  byte_range_90_9a = simd_andc(r1000_1fff_tmp19, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_a7_adv, byte_range_90_9a);
                  struct_sc_Talu.cc = simd_or(struct_sc_Talu.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp5, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_a7_adv, byte_range_9e_9f);
                  struct_sc_Talu.cc = simd_or(struct_sc_Talu.cc, r1000_1fff_tmp24);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Copt {
  Property_sc_Copt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Copt & struct_sc_Copt) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock byte_cf, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock byte_range_a2_af, byte_cf_adv, r370_3ff_tmp7, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e2_e3;
		BitBlock r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, byte_b2, r2000_2fff_tmp3;
		BitBlock sequence_e2_b2, byte_e2_adv, byte_range_80_bf, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock byte_b3, sequence_e2_b3, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock byte_range_80_b3, sequence_e2_b3_adv, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, byte_range_b9_bf;
		BitBlock r2000_2fff_tmp13;




        struct_sc_Copt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r370_3ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp2 = simd_and(r100_3ff_tmp1, r370_3ff_tmp1);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp2);
                r370_3ff_tmp3 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp4 = simd_and(r100_3ff_tmp4, r370_3ff_tmp3);
                r370_3ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp6 = simd_or(basis_bits.bit_4, r370_3ff_tmp5);
                byte_range_a2_af = simd_and(r370_3ff_tmp4, r370_3ff_tmp6);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(1), byte_cf_adv));
                r370_3ff_tmp7 = simd_and(byte_cf_adv, byte_range_a2_af);
                struct_sc_Copt.cc = simd_or(struct_sc_Copt.cc, r370_3ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(3, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(3, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_b2 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(3), r2000_2fff_tmp3));
                  sequence_e2_b2 = simd_and(r2000_2fff_tmp3, byte_b2);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(4), sequence_e2_b2_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_sc_Copt.cc = simd_or(struct_sc_Copt.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, r800_ffff_tmp1);
                  byte_b3 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, r2000_2fff_tmp8);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r2000_2fff_tmp9);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(5), sequence_e2_b3_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_b3_adv, byte_range_80_b3);
                  struct_sc_Copt.cc = simd_or(struct_sc_Copt.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp5, basis_bits.bit_4);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b9_bf = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_and(sequence_e2_b3_adv, byte_range_b9_bf);
                  struct_sc_Copt.cc = simd_or(struct_sc_Copt.cc, r2000_2fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_sc_Sund {
  Property_sc_Sund() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sund & struct_sc_Sund) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_ae, r1000_1fff_tmp5, sequence_e1_ae;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_ae_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock byte_b3, sequence_e1_b3, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock byte_range_80_87, sequence_e1_b3_adv, r1000_1fff_tmp13;




        struct_sc_Sund.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_ae = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_ae = simd_and(r1000_1fff_tmp5, byte_ae);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(2), sequence_e1_ae_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_ae_adv, byte_range_80_bf);
                  struct_sc_Sund.cc = simd_or(struct_sc_Sund.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_and(byte_range_80_bf, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp9, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp12 = simd_andc(byte_range_80_bf, r1000_1fff_tmp11);
                  byte_range_80_87 = simd_andc(r1000_1fff_tmp12, basis_bits.bit_4);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(3), sequence_e1_b3_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_b3_adv, byte_range_80_87);
                  struct_sc_Sund.cc = simd_or(struct_sc_Sund.cc, r1000_1fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Cari {
  Property_sc_Cari() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Cari & struct_sc_Cari) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8a, r10000_10ffff_tmp13, sequence_f0_90_8a;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_a0_bf;
		BitBlock sequence_f0_90_8a_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, byte_8b, sequence_f0_90_8b, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_range_80_90, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp19;




        struct_sc_Cari.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8a = simd_and(r10000_10ffff_tmp13, byte_8a);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(2), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8a_adv, byte_range_a0_bf);
            struct_sc_Cari.cc = simd_or(struct_sc_Cari.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(3), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_sc_Cari.cc = simd_or(struct_sc_Cari.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Tale {
  Property_sc_Tale() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tale & struct_sc_Tale) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a5, r1000_1fff_tmp3;
		BitBlock sequence_e1_a5, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_range_90_ad;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock byte_range_b0_b4, r1000_1fff_tmp14;




        struct_sc_Tale.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_a5 = simd_and(r1000_1fff_tmp3, byte_a5);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp4, basis_bits.bit_6);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp7), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(r800_ffff_tmp5, r1000_1fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(2), sequence_e1_a5_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_a5_adv, byte_range_90_ad);
                  struct_sc_Tale.cc = simd_or(struct_sc_Tale.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp11, basis_bits.bit_4);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b0_b4 = simd_andc(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_a5_adv, byte_range_b0_b4);
                  struct_sc_Tale.cc = simd_or(struct_sc_Tale.cc, r1000_1fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Nkoo {
  Property_sc_Nkoo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Nkoo & struct_sc_Nkoo) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3;
		BitBlock r7c0_7ff_tmp4, r7c0_7ff_tmp5, byte_range_80_ba, byte_df_adv;
		BitBlock r7c0_7ff_tmp6;




        struct_sc_Nkoo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(0, 1))) {
              r780_7ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp3, r780_7ff_tmp1);
              byte_df = simd_and(r80_7ff_tmp2, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(0, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_or(basis_bits.bit_5, r780_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_3, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_and(basis_bits.bit_2, r7c0_7ff_tmp4);
                byte_range_80_ba = simd_andc(r7c0_7ff_tmp1, r7c0_7ff_tmp5);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(0), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, byte_range_80_ba);
                struct_sc_Nkoo.cc = simd_or(struct_sc_Nkoo.cc, r7c0_7ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_sc_Modi {
  Property_sc_Modi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Modi & struct_sc_Modi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_98;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91_98, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_98_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock byte_99, sequence_f0_91_99, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, byte_range_80_84;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, byte_range_90_99, r10000_10ffff_tmp23;




        struct_sc_Modi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_98 = simd_and(r10000_10ffff_tmp12, byte_98);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(2), sequence_f0_91_98_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_98_adv, byte_range_80_bf);
            struct_sc_Modi.cc = simd_or(struct_sc_Modi.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp7);
            byte_99 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp17, basis_bits.bit_4);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(3), sequence_f0_91_99_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_99_adv, byte_range_80_84);
            struct_sc_Modi.cc = simd_or(struct_sc_Modi.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            byte_range_90_99 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_99_adv, byte_range_90_99);
            struct_sc_Modi.cc = simd_or(struct_sc_Modi.cc, r10000_10ffff_tmp23);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Xpeo {
  Property_sc_Xpeo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Xpeo & struct_sc_Xpeo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8e, r10000_10ffff_tmp13, sequence_f0_90_8e;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_a0_bf;
		BitBlock sequence_f0_90_8e_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, byte_8f, sequence_f0_90_8f, byte_range_80_83;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, byte_range_88_95, r10000_10ffff_tmp23;




        struct_sc_Xpeo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8e = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8e = simd_and(r10000_10ffff_tmp13, byte_8e);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(2), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8e_adv, byte_range_a0_bf);
            struct_sc_Xpeo.cc = simd_or(struct_sc_Xpeo.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(3), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_8f_adv, byte_range_80_83);
            struct_sc_Xpeo.cc = simd_or(struct_sc_Xpeo.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp21), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            byte_range_88_95 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_8f_adv, byte_range_88_95);
            struct_sc_Xpeo.cc = simd_or(struct_sc_Xpeo.cc, r10000_10ffff_tmp23);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Sylo {
  Property_sc_Sylo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sylo & struct_sc_Sylo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a0;
		BitBlock ra000_ffff_tmp9, sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_80_ab;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp13;




        struct_sc_Sylo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_or(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a0 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp9, byte_a0);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              byte_range_80_ab = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp12);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(1), sequence_ea_a0_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_a0_adv, byte_range_80_ab);
              struct_sc_Sylo.cc = simd_or(struct_sc_Sylo.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_sc_Sora {
  Property_sc_Sora() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Sora & struct_sc_Sora) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_83;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_83, byte_f0_adv;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_range_90_a8, sequence_f0_91_83_adv, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock byte_range_b0_b9, r10000_10ffff_tmp24;




        struct_sc_Sora.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_83 = simd_and(r10000_10ffff_tmp14, byte_83);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp18), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(2), sequence_f0_91_83_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_sc_Sora.cc = simd_or(struct_sc_Sora.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp22);
            byte_range_b0_b9 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(sequence_f0_91_83_adv, byte_range_b0_b9);
            struct_sc_Sora.cc = simd_or(struct_sc_Sora.cc, r10000_10ffff_tmp24);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Grek {
  Property_sc_Grek() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Grek & struct_sc_Grek) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, byte_range_b0_b3, byte_cd_adv;
		BitBlock r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock byte_range_b5_b7, r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7;
		BitBlock byte_range_ba_bd, r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock byte_bf, r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13, byte_ce;
		BitBlock r370_3ff_tmp14, r370_3ff_tmp15, byte_84, byte_ce_adv, r370_3ff_tmp16;
		BitBlock r370_3ff_tmp17, byte_86, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, byte_range_88_8a, r370_3ff_tmp21, r370_3ff_tmp22;
		BitBlock byte_8c, r370_3ff_tmp23, r370_3ff_tmp24, r370_3ff_tmp25;
		BitBlock r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28, byte_range_8e_a1;
		BitBlock r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31, r370_3ff_tmp32;
		BitBlock byte_range_a3_bf, r370_3ff_tmp33, byte_cf, r370_3ff_tmp34;
		BitBlock byte_range_80_a1, byte_cf_adv, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b4, r1000_1fff_tmp3;
		BitBlock sequence_e1_b4, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_a6_aa, sequence_e1_b4_adv, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, byte_b5, sequence_e1_b5, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, byte_range_9d_a1;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, byte_b6, sequence_e1_b6;
		BitBlock r1000_1fff_tmp22, sequence_e1_b6_adv, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_bc, sequence_e1_bc, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, byte_range_80_95;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, byte_range_98_9d;
		BitBlock r1000_1fff_tmp32, byte_range_a0_bf, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, byte_bd, sequence_e1_bd, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, r1000_1fff_tmp37, byte_range_80_85;
		BitBlock sequence_e1_bd_adv, r1000_1fff_tmp38, r1000_1fff_tmp39;
		BitBlock byte_range_88_8d, r1000_1fff_tmp40, byte_range_90_97;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43, byte_99;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, byte_9b, r1000_1fff_tmp46;
		BitBlock byte_9d, r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock byte_range_9f_bd, r1000_1fff_tmp53, r1000_1fff_tmp54, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp55, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, byte_range_80_b4, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp59, byte_range_b6_bf, r1000_1fff_tmp60, sequence_e1_bf;
		BitBlock byte_range_80_84, sequence_e1_bf_adv, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, byte_range_86_93;
		BitBlock r1000_1fff_tmp64, r1000_1fff_tmp65, r1000_1fff_tmp66;
		BitBlock byte_range_96_9b, r1000_1fff_tmp67, r1000_1fff_tmp68;
		BitBlock r1000_1fff_tmp69, byte_range_9d_af, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock byte_range_b2_b4, r1000_1fff_tmp74, r1000_1fff_tmp75;
		BitBlock r1000_1fff_tmp76, r1000_1fff_tmp77, byte_range_b6_be;
		BitBlock r1000_1fff_tmp78, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, byte_a6, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp6, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_ad, ra000_ffff_tmp8, sequence_ea_ad, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, byte_a5, sequence_ea_ad_adv, ra000_ffff_tmp10;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock byte_85, r10000_10ffff_tmp13, sequence_f0_90_85, byte_f0_adv;
		BitBlock sequence_f0_90_adv, byte_range_80_bf, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, sequence_f0_90_86, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_80_8c;
		BitBlock sequence_f0_90_86_adv, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock byte_a0, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, sequence_f0_9d, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_88, r10000_10ffff_tmp28, sequence_f0_9d_88;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_88_adv, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, byte_89, sequence_f0_9d_89, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, sequence_f0_9d_89_adv, r10000_10ffff_tmp33;




        struct_sc_Grek.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 23))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 3))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(1, 2))) {
                byte_range_b0_b3 = simd_andc(byte_range_b0_bf, r80_7ff_tmp3);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_range_b0_b3);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp3 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                byte_range_b5_b7 = simd_and(r370_3ff_tmp3, r370_3ff_tmp4);
                r370_3ff_tmp5 = simd_and(byte_cd_adv, byte_range_b5_b7);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp7 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                byte_range_ba_bd = simd_and(r370_3ff_tmp6, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(byte_cd_adv, byte_range_ba_bd);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp10 = simd_and(r100_3ff_tmp1, r370_3ff_tmp9);
                byte_bf = simd_and(byte_range_b0_bf, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_and(byte_cd_adv, byte_bf);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp13 = simd_and(r100_3ff_tmp1, r370_3ff_tmp12);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_andc(r100_3ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp15 = simd_andc(r370_3ff_tmp2, r370_3ff_tmp4);
                byte_84 = simd_and(r370_3ff_tmp14, r370_3ff_tmp15);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(1), byte_ce_adv));
                r370_3ff_tmp16 = simd_and(byte_ce_adv, byte_84);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp16);
                r370_3ff_tmp17 = simd_and(r370_3ff_tmp2, r370_3ff_tmp12);
                byte_86 = simd_and(r370_3ff_tmp14, r370_3ff_tmp17);
                r370_3ff_tmp18 = simd_and(byte_ce_adv, byte_86);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp18);
                r370_3ff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp20 = simd_and(r370_3ff_tmp14, r370_3ff_tmp19);
                byte_range_88_8a = simd_andc(r370_3ff_tmp20, r370_3ff_tmp9);
                r370_3ff_tmp21 = simd_and(byte_ce_adv, byte_range_88_8a);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp21);
                r370_3ff_tmp22 = simd_andc(r100_3ff_tmp1, r370_3ff_tmp4);
                byte_8c = simd_and(r370_3ff_tmp14, r370_3ff_tmp22);
                r370_3ff_tmp23 = simd_and(byte_ce_adv, byte_8c);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp23);
                r370_3ff_tmp24 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r370_3ff_tmp25 = simd_or(basis_bits.bit_3, r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_not(r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_or(basis_bits.bit_3, r100_3ff_tmp8);
                r370_3ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp26), simd_andc(r370_3ff_tmp27, basis_bits.bit_2));
                byte_range_8e_a1 = simd_and(r100_3ff_tmp4, r370_3ff_tmp28);
                r370_3ff_tmp29 = simd_and(byte_ce_adv, byte_range_8e_a1);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp29);
                r370_3ff_tmp30 = simd_and(r100_3ff_tmp4, basis_bits.bit_2);
                r370_3ff_tmp31 = simd_or(r80_7ff_tmp3, r370_3ff_tmp9);
                r370_3ff_tmp32 = simd_or(basis_bits.bit_3, r370_3ff_tmp31);
                byte_range_a3_bf = simd_and(r370_3ff_tmp30, r370_3ff_tmp32);
                r370_3ff_tmp33 = simd_and(byte_ce_adv, byte_range_a3_bf);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp33);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp34 = simd_and(basis_bits.bit_2, r370_3ff_tmp25);
                byte_range_80_a1 = simd_andc(r100_3ff_tmp4, r370_3ff_tmp34);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(2), byte_cf_adv));
                r370_3ff_tmp35 = simd_and(byte_cf_adv, byte_range_80_a1);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp35);
                r370_3ff_tmp36 = simd_and(byte_cf_adv, byte_range_b0_bf);
                struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r370_3ff_tmp36);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 13))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 10))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 8))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(4, 8))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_b4 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r1000_1fff_tmp3));
                  sequence_e1_b4 = simd_and(r1000_1fff_tmp3, byte_b4);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_5, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp7), simd_andc(r1000_1fff_tmp8, basis_bits.bit_4));
                  byte_range_a6_aa = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp9);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(5), sequence_e1_b4_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_b4_adv, byte_range_a6_aa);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r1000_1fff_tmp13 = simd_not(r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_ffff_tmp3);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_3, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp13), simd_andc(r1000_1fff_tmp16, basis_bits.bit_2));
                  byte_range_9d_a1 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp17);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(6), sequence_e1_b5_adv));
                  r1000_1fff_tmp18 = simd_and(sequence_e1_b5_adv, byte_range_9d_a1);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_and(sequence_e1_b5_adv, byte_range_a6_aa);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp20);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp21);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp5);
                  byte_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp22);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(7), sequence_e1_b6_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_b6_adv, byte_bf);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_andc(r1000_1fff_tmp14, r800_ffff_tmp3);
                  byte_bc = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp24);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp25 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp26 = simd_or(basis_bits.bit_4, r1000_1fff_tmp8);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_3, r1000_1fff_tmp26);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp25, r1000_1fff_tmp27);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(8), sequence_e1_bc_adv));
                  r1000_1fff_tmp28 = simd_and(sequence_e1_bc_adv, byte_range_80_95);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp28);
                  r1000_1fff_tmp29 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp30, basis_bits.bit_4);
                  byte_range_98_9d = simd_andc(r1000_1fff_tmp31, r1000_1fff_tmp8);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_bc_adv, byte_range_98_9d);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp32);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp33 = simd_and(sequence_e1_bc_adv, byte_range_a0_bf);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  byte_bd = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp35 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp36 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_andc(r1000_1fff_tmp36, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp37, r1000_1fff_tmp8);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(9), sequence_e1_bd_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_bd_adv, byte_range_80_85);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp36, basis_bits.bit_4);
                  byte_range_88_8d = simd_andc(r1000_1fff_tmp39, r1000_1fff_tmp8);
                  r1000_1fff_tmp40 = simd_and(sequence_e1_bd_adv, byte_range_88_8d);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp40);
                  byte_range_90_97 = simd_andc(r1000_1fff_tmp30, basis_bits.bit_4);
                  r1000_1fff_tmp41 = simd_and(sequence_e1_bd_adv, byte_range_90_97);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp42, r800_1fff_tmp1);
                  byte_99 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp43);
                  r1000_1fff_tmp44 = simd_and(sequence_e1_bd_adv, byte_99);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp42, r1000_1fff_tmp5);
                  byte_9b = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp45);
                  r1000_1fff_tmp46 = simd_and(sequence_e1_bd_adv, byte_9b);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp46);
                  byte_9d = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp34);
                  r1000_1fff_tmp47 = simd_and(sequence_e1_bd_adv, byte_9d);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp47);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp14, basis_bits.bit_6);
                  r1000_1fff_tmp49 = simd_and(basis_bits.bit_3, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_not(r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_and(basis_bits.bit_3, r1000_1fff_tmp22);
                  r1000_1fff_tmp52 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp50), simd_andc(r1000_1fff_tmp51, basis_bits.bit_2));
                  byte_range_9f_bd = simd_and(r800_ffff_tmp5, r1000_1fff_tmp52);
                  r1000_1fff_tmp53 = simd_and(sequence_e1_bd_adv, byte_range_9f_bd);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp53);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp20);
                  byte_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp54);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp55 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp56 = simd_or(basis_bits.bit_4, r1000_1fff_tmp55);
                  r1000_1fff_tmp57 = simd_and(basis_bits.bit_3, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_2, r1000_1fff_tmp57);
                  byte_range_80_b4 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp58);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(10), sequence_e1_be_adv));
                  r1000_1fff_tmp59 = simd_and(sequence_e1_be_adv, byte_range_80_b4);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp59);
                  byte_range_b6_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_be_adv, byte_range_b6_bf);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp60);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_range_80_84 = simd_andc(r1000_1fff_tmp37, r1000_1fff_tmp55);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(11), sequence_e1_bf_adv));
                  r1000_1fff_tmp61 = simd_and(sequence_e1_bf_adv, byte_range_80_84);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_not(r800_ffff_tmp1);
                  r1000_1fff_tmp63 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp62), simd_andc(r1000_1fff_tmp26, basis_bits.bit_3));
                  byte_range_86_93 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp63);
                  r1000_1fff_tmp64 = simd_and(sequence_e1_bf_adv, byte_range_86_93);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp66 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp65), simd_andc(r1000_1fff_tmp8, basis_bits.bit_4));
                  byte_range_96_9b = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_bf_adv, byte_range_96_9b);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp67);
                  r1000_1fff_tmp68 = simd_not(basis_bits.bit_3);
                  r1000_1fff_tmp69 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp68), simd_andc(r1000_1fff_tmp16, basis_bits.bit_2));
                  byte_range_9d_af = simd_and(r800_ffff_tmp5, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(sequence_e1_bf_adv, byte_range_9d_af);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp72 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp73 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp72), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_b2_b4 = simd_and(r1000_1fff_tmp71, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_bf_adv, byte_range_b2_b4);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(basis_bits.bit_5, r1000_1fff_tmp5);
                  r1000_1fff_tmp76 = simd_not(r1000_1fff_tmp75);
                  r1000_1fff_tmp77 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp76), simd_andc(r1000_1fff_tmp8, basis_bits.bit_4));
                  byte_range_b6_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(sequence_e1_bf_adv, byte_range_b6_be);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r1000_1fff_tmp78);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 8);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 8);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(12, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(12, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_a6 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp5);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(13), sequence_e2_84_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_84_adv, byte_a6);
                  struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 10);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(14, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              byte_ad = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(14), ra000_ffff_tmp8));
              sequence_ea_ad = simd_and(ra000_ffff_tmp8, byte_ad);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp6);
              byte_a5 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp9);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(15), sequence_ea_ad_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_ad_adv, byte_a5);
              struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 13);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(16, 7))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(16), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(17), r10000_10ffff_tmp13));
            sequence_f0_90_85 = simd_and(r10000_10ffff_tmp13, byte_85);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(18), sequence_f0_90_85_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_85_adv, byte_range_80_bf);
            struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_86 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp18 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp19);
            byte_range_80_8c = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp20);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(19), sequence_f0_90_86_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_86_adv, byte_range_80_8c);
            struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp3);
            r10000_10ffff_tmp23 = simd_and(sequence_f0_90_86_adv, byte_a0);
            struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp11);
            byte_9d = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp25);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp27);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(20), r10000_10ffff_tmp28));
            sequence_f0_9d_88 = simd_and(r10000_10ffff_tmp28, byte_88);
            sequence_f0_9d_adv = r10000_10ffff_tmp28;
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(21), sequence_f0_9d_88_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_9d_88_adv, byte_range_80_bf);
            struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp11);
            byte_89 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp30);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp15, basis_bits.bit_4);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(22), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_9d_89_adv, byte_range_80_85);
            struct_sc_Grek.cc = simd_or(struct_sc_Grek.cc, r10000_10ffff_tmp33);
          }
          else {
            carryQ.CarryDequeueEnqueue(16, 7);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 23);
        }
        carryQ.CarryQ_Adjust(23);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<23, 0> carryQ;
  };

  struct Property_sc_Merc {
  Property_sc_Merc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Merc & struct_sc_Merc) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a6, r10000_10ffff_tmp13, sequence_f0_90_a6;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_range_a0_b7, sequence_f0_90_a6_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_be_bf, r10000_10ffff_tmp20;




        struct_sc_Merc.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a6 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a6 = simd_and(r10000_10ffff_tmp13, byte_a6);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a0_b7 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(2), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_a6_adv, byte_range_a0_b7);
            struct_sc_Merc.cc = simd_or(struct_sc_Merc.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp18, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_a6_adv, byte_range_be_bf);
            struct_sc_Merc.cc = simd_or(struct_sc_Merc.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Osma {
  Property_sc_Osma() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Osma & struct_sc_Osma) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_92, r10000_10ffff_tmp10, sequence_f0_90_92;
		BitBlock byte_f0_adv, sequence_f0_90_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_80_9d, sequence_f0_90_92_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_a0_a9, r10000_10ffff_tmp20;




        struct_sc_Osma.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_92 = simd_and(r10000_10ffff_tmp10, byte_92);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp13);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(2), sequence_f0_90_92_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_92_adv, byte_range_80_9d);
            struct_sc_Osma.cc = simd_or(struct_sc_Osma.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp18);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_92_adv, byte_range_a0_a9);
            struct_sc_Osma.cc = simd_or(struct_sc_Osma.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Mero {
  Property_sc_Mero() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mero & struct_sc_Mero) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a6, r10000_10ffff_tmp13, sequence_f0_90_a6;
		BitBlock byte_f0_adv, sequence_f0_90_adv, byte_range_80_9f;
		BitBlock sequence_f0_90_a6_adv, r10000_10ffff_tmp14;




        struct_sc_Mero.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a6 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a6 = simd_and(r10000_10ffff_tmp13, byte_a6);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(2), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a6_adv, byte_range_80_9f);
            struct_sc_Mero.cc = simd_or(struct_sc_Mero.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Wara {
  Property_sc_Wara() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Wara & struct_sc_Wara) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_a2;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_a2, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_a0_bf, sequence_f0_91_a2_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_a3, sequence_f0_91_a3, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_range_80_b2, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, byte_bf, r10000_10ffff_tmp25;




        struct_sc_Wara.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(2), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_sc_Wara.cc = simd_or(struct_sc_Wara.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_a3 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp17);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp18 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp19);
            byte_range_80_b2 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(3), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_a3_adv, byte_range_80_b2);
            struct_sc_Wara.cc = simd_or(struct_sc_Wara.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp16);
            byte_bf = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_91_a3_adv, byte_bf);
            struct_sc_Wara.cc = simd_or(struct_sc_Wara.cc, r10000_10ffff_tmp25);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Hrkt {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hrkt & struct_sc_Hrkt) {





        struct_sc_Hrkt.cc = simd<1>::constant<0>();
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };

  struct Property_sc_Hano {
  Property_sc_Hano() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hano & struct_sc_Hano) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9c, r1000_1fff_tmp5, sequence_e1_9c;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, byte_range_a0_b4, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp10;




        struct_sc_Hano.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9c = simd_and(r1000_1fff_tmp5, byte_9c);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp8 = simd_or(basis_bits.bit_4, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_3, r1000_1fff_tmp8);
                  byte_range_a0_b4 = simd_andc(r1000_1fff_tmp6, r1000_1fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(2), sequence_e1_9c_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_9c_adv, byte_range_a0_b4);
                  struct_sc_Hano.cc = simd_or(struct_sc_Hano.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Hani {
  Property_sc_Hani() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hani & struct_sc_Hani) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_ba, r2000_2fff_tmp5;
		BitBlock sequence_e2_ba, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, byte_range_80_99;
		BitBlock sequence_e2_ba_adv, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_9b_bf, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, byte_bb, sequence_e2_bb, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, byte_range_80_b3, sequence_e2_bb_adv;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock byte_range_bc_be, byte_e2_byte_range_bc_be, byte_range_80_bf;
		BitBlock r2000_2fff_tmp23, byte_e2_byte_range_bc_be_sfx, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_bf, sequence_e2_bf, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock byte_range_80_95, sequence_e2_bf_adv, r2000_2fff_tmp30;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, byte_80;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, byte_85, sequence_e3_80_adv, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, byte_87, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, byte_range_a1_a9, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock byte_range_b8_bb, r3000_4dff_tmp19, byte_range_90_bf;
		BitBlock byte_e3_byte_range_90_bf, r3000_4dff_tmp20;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp21, r3000_4dff_tmp22;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, byte_range_80_b5;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp25;
		BitBlock byte_e4_byte_range_80_b5_sfx, r3000_4dff_tmp26, r3000_4dff_tmp27;
		BitBlock byte_b6, sequence_e4_b6, byte_e4_adv, sequence_e4_b6_adv;
		BitBlock r3000_4dff_tmp28, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_b8_bf;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, byte_range_e5_e9, r800_ffff_tmp18;
		BitBlock byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12;
		BitBlock r4e00_9fff_tmp13, r4e00_9fff_tmp14, byte_range_80_be;
		BitBlock r4e00_9fff_tmp15, byte_e9_byte_range_80_be, r4e00_9fff_tmp16;
		BitBlock byte_e9_byte_range_80_be_sfx, r4e00_9fff_tmp17, sequence_e9_bf;
		BitBlock byte_e9_adv, r4e00_9fff_tmp18, r4e00_9fff_tmp19, r4e00_9fff_tmp20;
		BitBlock byte_range_80_8c, sequence_e9_bf_adv, r4e00_9fff_tmp21;
		BitBlock r800_ffff_tmp19, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_range_a4_a8, ra000_ffff_tmp8;
		BitBlock byte_ef_byte_range_a4_a8, ra000_ffff_tmp9;
		BitBlock byte_ef_byte_range_a4_a8_sfx, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_a9, sequence_ef_a9;
		BitBlock byte_ef_adv, ra000_ffff_tmp14, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock byte_range_80_ad, sequence_ef_a9_adv, ra000_ffff_tmp17;
		BitBlock byte_range_b0_bf, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_aa, sequence_ef_aa, sequence_ef_aa_adv;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, byte_ab, sequence_ef_ab;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock sequence_ef_ab_adv, ra000_ffff_tmp26, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_range_a0_a9;
		BitBlock r10000_10ffff_tmp8, byte_f0_byte_range_a0_a9, r10000_10ffff_tmp9;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp10;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock sequence_f0_aa, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_range_80_9a, r10000_10ffff_tmp20;
		BitBlock sequence_f0_aa_byte_range_80_9a, r10000_10ffff_tmp21;
		BitBlock sequence_f0_aa_byte_range_80_9a_sfx, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, byte_9b, sequence_f0_aa_9b;
		BitBlock byte_f0_adv, sequence_f0_aa_adv, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, byte_range_80_96;
		BitBlock sequence_f0_aa_9b_adv, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, byte_range_9c_bf;
		BitBlock sequence_f0_aa_byte_range_9c_bf, r10000_10ffff_tmp32;
		BitBlock sequence_f0_aa_byte_range_9c_bf_sfx, sequence_f0_ab, byte_range_80_9b;
		BitBlock r10000_10ffff_tmp33, sequence_f0_ab_byte_range_80_9b;
		BitBlock r10000_10ffff_tmp34, sequence_f0_ab_byte_range_80_9b_sfx;
		BitBlock r10000_10ffff_tmp35, byte_9c, sequence_f0_ab_9c, sequence_f0_ab_adv;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, byte_range_80_b4, sequence_f0_ab_9c_adv;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, byte_range_9d_9f;
		BitBlock sequence_f0_ab_byte_range_9d_9f, r10000_10ffff_tmp42;
		BitBlock sequence_f0_ab_byte_range_9d_9f_sfx, byte_a0, sequence_f0_ab_a0;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_range_80_9d;
		BitBlock sequence_f0_ab_a0_adv, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock byte_af, sequence_f0_af, byte_range_a0_a7, r10000_10ffff_tmp47;
		BitBlock sequence_f0_af_byte_range_a0_a7, r10000_10ffff_tmp48;
		BitBlock sequence_f0_af_byte_range_a0_a7_sfx, r10000_10ffff_tmp49, byte_a8;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp50;




        struct_sc_Hani.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 37))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 22))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 10))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 5))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp3, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_ba = simd_and(r2000_2fff_tmp5, byte_ba);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_3, r2000_2fff_tmp8);
                  byte_range_80_99 = simd_andc(r2000_2fff_tmp6, r2000_2fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(2), sequence_e2_ba_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_ba_adv, byte_range_80_99);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_5, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_4, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_3, r2000_2fff_tmp13);
                  r2000_2fff_tmp15 = simd_or(basis_bits.bit_2, r2000_2fff_tmp14);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(sequence_e2_ba_adv, byte_range_9b_bf);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp11);
                  byte_bb = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_2, r2000_2fff_tmp18);
                  byte_range_80_b3 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp19);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(3), sequence_e2_bb_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_bb_adv, byte_range_80_b3);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp22 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp21);
                  byte_range_bc_be = simd_andc(r2000_2fff_tmp22, r2000_2fff_tmp11);
                  byte_e2_byte_range_bc_be = simd_and(byte_e2_adv, byte_range_bc_be);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_bc_be, carryQ.get_carry_in(4), r2000_2fff_tmp23));
                  byte_e2_byte_range_bc_be_sfx = simd_and(r2000_2fff_tmp23, byte_range_80_bf);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_e2_byte_range_bc_be_sfx);
                  r2000_2fff_tmp24 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp11);
                  byte_bf = simd_and(r2000_2fff_tmp24, r2000_2fff_tmp25);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  r2000_2fff_tmp26 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp28 = simd_or(basis_bits.bit_4, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(basis_bits.bit_3, r2000_2fff_tmp28);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp26, r2000_2fff_tmp29);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(5), sequence_e2_bf_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_bf_adv, byte_range_80_95);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r2000_2fff_tmp30);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 5);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(6, 5))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(6), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp5);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(7), sequence_e3_80_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_85);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r3000_4dff_tmp7);
                  r3000_4dff_tmp8 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_and(sequence_e3_80_adv, byte_87);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r3000_4dff_tmp9);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp12 = simd_not(r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp14 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp12), simd_andc(r3000_4dff_tmp13, basis_bits.bit_4));
                  byte_range_a1_a9 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp14);
                  r3000_4dff_tmp15 = simd_and(sequence_e3_80_adv, byte_range_a1_a9);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r3000_4dff_tmp15);
                  r3000_4dff_tmp16 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp17 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp16);
                  r3000_4dff_tmp18 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b8_bb = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp18);
                  r3000_4dff_tmp19 = simd_and(sequence_e3_80_adv, byte_range_b8_bb);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r3000_4dff_tmp19);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(8), r3000_4dff_tmp20));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp20, byte_range_80_bf);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_or(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp23 = simd_and(basis_bits.bit_3, r3000_4dff_tmp22);
                  r3000_4dff_tmp24 = simd_and(basis_bits.bit_2, r3000_4dff_tmp23);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp24);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp8, byte_range_80_b5);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(9), r3000_4dff_tmp25));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp25, byte_range_80_bf);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_e4_byte_range_80_b5_sfx);
                  r3000_4dff_tmp26 = simd_and(byte_range_80_bf, r3000_4dff_tmp16);
                  r3000_4dff_tmp27 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_b6 = simd_and(r3000_4dff_tmp26, r3000_4dff_tmp27);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp8, byte_b6);
                  byte_e4_adv = r800_ffff_tmp8;
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(10), sequence_e4_b6_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e4_b6_adv, byte_range_80_b5);
                  struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r3000_4dff_tmp28);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 10);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(11, 6))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp13;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(11), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(12), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(13), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r4e00_9fff_tmp12 = simd_and(r4e00_9fff_tmp10, r4e00_9fff_tmp11);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_3, r4e00_9fff_tmp12);
              r4e00_9fff_tmp14 = simd_and(basis_bits.bit_2, r4e00_9fff_tmp13);
              byte_range_80_be = simd_andc(byte_range_80_bf, r4e00_9fff_tmp14);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(14), r4e00_9fff_tmp15));
              byte_e9_byte_range_80_be = simd_and(r4e00_9fff_tmp15, byte_range_80_be);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e9_byte_range_80_be, carryQ.get_carry_in(15), r4e00_9fff_tmp16));
              byte_e9_byte_range_80_be_sfx = simd_and(r4e00_9fff_tmp16, byte_range_80_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_e9_byte_range_80_be_sfx);
              r4e00_9fff_tmp17 = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              byte_bf = simd_and(r4e00_9fff_tmp17, r4e00_9fff_tmp12);
              sequence_e9_bf = simd_and(r4e00_9fff_tmp15, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp15;
              r4e00_9fff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp19 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp18);
              r4e00_9fff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp19, r4e00_9fff_tmp20);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(16), sequence_e9_bf_adv));
              r4e00_9fff_tmp21 = simd_and(sequence_e9_bf_adv, byte_range_80_8c);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r4e00_9fff_tmp21);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 6);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(17, 5))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp6 = simd_not(ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(17), ra000_ffff_tmp8));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp8, byte_range_a4_a8);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(18), ra000_ffff_tmp9));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp9, byte_range_80_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_ef_byte_range_a4_a8_sfx);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              byte_a9 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              sequence_ef_a9 = simd_and(ra000_ffff_tmp8, byte_a9);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_3, ra000_ffff_tmp14);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_2, ra000_ffff_tmp15);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp16);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(19), sequence_ef_a9_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ef_a9_adv, byte_range_80_ad);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, ra000_ffff_tmp17);
              byte_range_b0_bf = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              ra000_ffff_tmp18 = simd_and(sequence_ef_a9_adv, byte_range_b0_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp20 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp19);
              byte_aa = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp20);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(20), sequence_ef_aa_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ef_aa_adv, byte_range_80_bf);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp2);
              byte_ab = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp22);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp23 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp24 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_3, ra000_ffff_tmp24);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp23, ra000_ffff_tmp25);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(21), sequence_ef_ab_adv));
              ra000_ffff_tmp26 = simd_and(sequence_ef_ab_adv, byte_range_80_99);
              struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, ra000_ffff_tmp26);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 22);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(22, 15))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp6);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(22), r10000_10ffff_tmp8));
            byte_f0_byte_range_a0_a9 = simd_and(r10000_10ffff_tmp8, byte_range_a0_a9);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(23), r10000_10ffff_tmp9));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp9, byte_range_80_bf);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(24), r10000_10ffff_tmp10));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_aa = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            sequence_f0_aa = simd_and(r10000_10ffff_tmp8, byte_aa);
            r10000_10ffff_tmp15 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            byte_range_80_9a = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp19);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(25), r10000_10ffff_tmp20));
            sequence_f0_aa_byte_range_80_9a = simd_and(r10000_10ffff_tmp20, byte_range_80_9a);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_80_9a, carryQ.get_carry_in(26), r10000_10ffff_tmp21));
            sequence_f0_aa_byte_range_80_9a_sfx = simd_and(r10000_10ffff_tmp21, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, sequence_f0_aa_byte_range_80_9a_sfx);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp23 = simd_and(byte_range_80_bf, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp16);
            byte_9b = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp20, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp8;
            sequence_f0_aa_adv = r10000_10ffff_tmp20;
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp16);
            r10000_10ffff_tmp26 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp26);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp27);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(27), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp28 = simd_and(sequence_f0_aa_9b_adv, byte_range_80_96);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp30);
            byte_range_9c_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp31);
            sequence_f0_aa_byte_range_9c_bf = simd_and(sequence_f0_aa_adv, byte_range_9c_bf);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_9c_bf, carryQ.get_carry_in(28), r10000_10ffff_tmp32));
            sequence_f0_aa_byte_range_9c_bf_sfx = simd_and(r10000_10ffff_tmp32, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, sequence_f0_aa_byte_range_9c_bf_sfx);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp24);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            byte_range_80_9b = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp30);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(29), r10000_10ffff_tmp33));
            sequence_f0_ab_byte_range_80_9b = simd_and(r10000_10ffff_tmp33, byte_range_80_9b);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_80_9b, carryQ.get_carry_in(30), r10000_10ffff_tmp34));
            sequence_f0_ab_byte_range_80_9b_sfx = simd_and(r10000_10ffff_tmp34, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, sequence_f0_ab_byte_range_80_9b_sfx);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp2);
            byte_9c = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp35);
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp33, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp33;
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp37 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp37);
            r10000_10ffff_tmp39 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp38);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp39);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(31), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_ab_9c_adv, byte_range_80_b4);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp29);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp2);
            sequence_f0_ab_byte_range_9d_9f = simd_and(sequence_f0_ab_adv, byte_range_9d_9f);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_9d_9f, carryQ.get_carry_in(32), r10000_10ffff_tmp42));
            sequence_f0_ab_byte_range_9d_9f_sfx = simd_and(r10000_10ffff_tmp42, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, sequence_f0_ab_byte_range_9d_9f_sfx);
            byte_a0 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp29, basis_bits.bit_6);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp43);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp44);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(33), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_ab_a0_adv, byte_range_80_9d);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp16);
            byte_af = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp46);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_4);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(34), r10000_10ffff_tmp47));
            sequence_f0_af_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp47, byte_range_a0_a7);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a0_a7, carryQ.get_carry_in(35), r10000_10ffff_tmp48));
            sequence_f0_af_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp48, byte_range_80_bf);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, sequence_f0_af_byte_range_a0_a7_sfx);
            r10000_10ffff_tmp49 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp49);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp47, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp47;
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(36), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_af_a8_adv, byte_range_80_9d);
            struct_sc_Hani.cc = simd_or(struct_sc_Hani.cc, r10000_10ffff_tmp50);
          }
          else {
            carryQ.CarryDequeueEnqueue(22, 15);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 37);
        }
        carryQ.CarryQ_Adjust(37);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<37, 0> carryQ;
  };

  struct Property_sc_Shrd {
  Property_sc_Shrd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Shrd & struct_sc_Shrd) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_86, r10000_10ffff_tmp15, sequence_f0_91_86, byte_f0_adv;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_87, sequence_f0_91_87, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, byte_range_80_88;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, byte_8d, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, byte_range_90_9a;
		BitBlock r10000_10ffff_tmp29;




        struct_sc_Shrd.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_86 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_86 = simd_and(r10000_10ffff_tmp15, byte_86);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(2), sequence_f0_91_86_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_86_adv, byte_range_80_bf);
            struct_sc_Shrd.cc = simd_or(struct_sc_Shrd.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp18);
            byte_87 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp20 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp21);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp22);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(3), sequence_f0_91_87_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_87_adv, byte_range_80_88);
            struct_sc_Shrd.cc = simd_or(struct_sc_Shrd.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp7);
            byte_8d = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_91_87_adv, byte_8d);
            struct_sc_Shrd.cc = simd_or(struct_sc_Shrd.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp18);
            r10000_10ffff_tmp28 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp27);
            byte_range_90_9a = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_and(sequence_f0_91_87_adv, byte_range_90_9a);
            struct_sc_Shrd.cc = simd_or(struct_sc_Shrd.cc, r10000_10ffff_tmp29);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Tagb {
  Property_sc_Tagb() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tagb & struct_sc_Tagb) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9d, r1000_1fff_tmp5, sequence_e1_9d;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_range_a0_ac, sequence_e1_9d_adv, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, byte_range_ae_b0;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_range_b2_b3, r1000_1fff_tmp19;




        struct_sc_Tagb.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_9d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9d = simd_and(r1000_1fff_tmp5, byte_9d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, r1000_1fff_tmp7);
                  byte_range_a0_ac = simd_andc(r1000_1fff_tmp6, r1000_1fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(2), sequence_e1_9d_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_9d_adv, byte_range_a0_ac);
                  struct_sc_Tagb.cc = simd_or(struct_sc_Tagb.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp11 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r1000_1fff_tmp12 = simd_not(r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp3, basis_bits.bit_6);
                  r1000_1fff_tmp14 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp12), simd_andc(r1000_1fff_tmp13, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_and(sequence_e1_9d_adv, byte_range_ae_b0);
                  struct_sc_Tagb.cc = simd_or(struct_sc_Tagb.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_and(sequence_e1_9d_adv, byte_range_b2_b3);
                  struct_sc_Tagb.cc = simd_or(struct_sc_Tagb.cc, r1000_1fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Hang {
  Property_sc_Hang() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Hang & struct_sc_Hang) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_range_84_87;
		BitBlock r1000_1fff_tmp3, byte_e1_byte_range_84_87, byte_range_80_bf;
		BitBlock r1000_1fff_tmp4, byte_e1_byte_range_84_87_sfx, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1, r3000_4dff_tmp2;
		BitBlock r3000_4dff_tmp3, byte_80, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock byte_range_ae_af, sequence_e3_80_adv, r3000_4dff_tmp8, byte_84;
		BitBlock sequence_e3_84, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, byte_range_b1_bf, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, r3000_4dff_tmp15, byte_85;
		BitBlock sequence_e3_85, sequence_e3_85_adv, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19, byte_86;
		BitBlock sequence_e3_86, r3000_4dff_tmp20, r3000_4dff_tmp21, byte_range_80_8e;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp22, r3000_4dff_tmp23;
		BitBlock r3000_4dff_tmp24, byte_88, sequence_e3_88, r3000_4dff_tmp25;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, byte_range_80_9e;
		BitBlock sequence_e3_88_adv, r3000_4dff_tmp28, r3000_4dff_tmp29, byte_89;
		BitBlock sequence_e3_89, r3000_4dff_tmp30, byte_range_a0_be;
		BitBlock sequence_e3_89_adv, r3000_4dff_tmp31, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_a5, ra000_ffff_tmp7, sequence_ea_a5;
		BitBlock byte_ea_adv, ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_range_a0_bc, sequence_ea_a5_adv;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_range_b0_bf;
		BitBlock byte_ea_byte_range_b0_bf, ra000_ffff_tmp14;
		BitBlock byte_ea_byte_range_b0_bf_sfx, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_range_eb_ec, ra000_ffff_tmp18;
		BitBlock byte_range_eb_ec_sfx, ra000_ffff_tmp19, byte_range_eb_ec_sfx_sfx;
		BitBlock ra000_ffff_tmp20, byte_ed, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, byte_range_80_9d, ra000_ffff_tmp24;
		BitBlock byte_ed_byte_range_80_9d, ra000_ffff_tmp25;
		BitBlock byte_ed_byte_range_80_9d_sfx, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, byte_9e, sequence_ed_9e, byte_ed_adv;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, byte_range_80_a3;
		BitBlock sequence_ed_9e_adv, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, byte_9f, sequence_ed_9f, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock byte_range_80_86, sequence_ed_9f_adv, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock byte_range_8b_bb, ra000_ffff_tmp45, byte_ef, ra000_ffff_tmp46;
		BitBlock byte_be, ra000_ffff_tmp47, sequence_ef_be, byte_ef_adv;
		BitBlock ra000_ffff_tmp48, ra000_ffff_tmp49, sequence_ef_be_adv;
		BitBlock ra000_ffff_tmp50, byte_bf, sequence_ef_bf, byte_range_82_87;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock byte_range_8a_8f, ra000_ffff_tmp53, ra000_ffff_tmp54;
		BitBlock byte_range_92_97, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, byte_range_9a_9c, ra000_ffff_tmp58;




        struct_sc_Hang.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 22))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 22))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 9))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_range_84_87 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  byte_e1_byte_range_84_87 = simd_and(r1000_1fff_tmp3, byte_range_84_87);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_87, carryQ.get_carry_in(2), r1000_1fff_tmp4));
                  byte_e1_byte_range_84_87_sfx = simd_and(r1000_1fff_tmp4, byte_range_80_bf);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, byte_e1_byte_range_84_87_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(3, 7))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(3, 7))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(3), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp7 = simd_and(r3000_4dff_tmp6, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(4), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_ae_af);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp8);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp12 = simd_or(basis_bits.bit_4, r3000_4dff_tmp11);
                  byte_range_b1_bf = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp12);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(5), sequence_e3_84_adv));
                  r3000_4dff_tmp13 = simd_and(sequence_e3_84_adv, byte_range_b1_bf);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp13);
                  r3000_4dff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp15 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp14);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp15);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(6), sequence_e3_85_adv));
                  r3000_4dff_tmp16 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp16);
                  r3000_4dff_tmp17 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp18 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp19 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp18);
                  byte_86 = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp19);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_5, r2000_4dff_tmp1);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_4, r3000_4dff_tmp20);
                  byte_range_80_8e = simd_andc(r3000_4dff_tmp17, r3000_4dff_tmp21);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(7), sequence_e3_86_adv));
                  r3000_4dff_tmp22 = simd_and(sequence_e3_86_adv, byte_range_80_8e);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp24 = simd_andc(r3000_4dff_tmp23, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp24);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  r3000_4dff_tmp25 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp26 = simd_and(r3000_4dff_tmp6, r2000_4dff_tmp1);
                  r3000_4dff_tmp27 = simd_and(basis_bits.bit_3, r3000_4dff_tmp26);
                  byte_range_80_9e = simd_andc(r3000_4dff_tmp25, r3000_4dff_tmp27);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(8), sequence_e3_88_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e3_88_adv, byte_range_80_9e);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp28);
                  r3000_4dff_tmp29 = simd_and(r3000_4dff_tmp23, r3000_4dff_tmp14);
                  byte_89 = simd_and(r3000_4dff_tmp17, r3000_4dff_tmp29);
                  sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
                  r3000_4dff_tmp30 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  byte_range_a0_be = simd_andc(r3000_4dff_tmp30, r3000_4dff_tmp27);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(9), sequence_e3_89_adv));
                  r3000_4dff_tmp31 = simd_and(sequence_e3_89_adv, byte_range_a0_be);
                  struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, r3000_4dff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 7);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 9);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(10, 12))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp5);
              byte_a5 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(10), ra000_ffff_tmp7));
              sequence_ea_a5 = simd_and(ra000_ffff_tmp7, byte_a5);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, r800_ffff_tmp3);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_a0_bc = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp11);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(11), sequence_ea_a5_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_a5_adv, byte_range_a0_bc);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r800_ffff_tmp5, ra000_ffff_tmp13);
              byte_ea_byte_range_b0_bf = simd_and(byte_ea_adv, byte_range_b0_bf);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_b0_bf, carryQ.get_carry_in(12), ra000_ffff_tmp14));
              byte_ea_byte_range_b0_bf_sfx = simd_and(ra000_ffff_tmp14, byte_range_80_bf);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, byte_ea_byte_range_b0_bf_sfx);
              ra000_ffff_tmp15 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp15), simd_andc(ra000_ffff_tmp16, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp11, ra000_ffff_tmp17);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(13), ra000_ffff_tmp18));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp18, byte_range_80_bf);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(14), ra000_ffff_tmp19));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp19, byte_range_80_bf);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, byte_range_eb_ec_sfx_sfx);
              ra000_ffff_tmp20 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp5);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp23 = simd_and(basis_bits.bit_3, ra000_ffff_tmp22);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp21, ra000_ffff_tmp23);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(15), ra000_ffff_tmp24));
              byte_ed_byte_range_80_9d = simd_and(ra000_ffff_tmp24, byte_range_80_9d);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_80_9d, carryQ.get_carry_in(16), ra000_ffff_tmp25));
              byte_ed_byte_range_80_9d_sfx = simd_and(ra000_ffff_tmp25, byte_range_80_bf);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, byte_ed_byte_range_80_9d_sfx);
              ra000_ffff_tmp26 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp27 = simd_and(byte_range_80_bf, ra000_ffff_tmp26);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp28);
              sequence_ed_9e = simd_and(ra000_ffff_tmp24, byte_9e);
              byte_ed_adv = ra000_ffff_tmp24;
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp29);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(17), sequence_ed_9e_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ed_9e_adv, byte_range_80_a3);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(sequence_ed_9e_adv, byte_range_b0_bf);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp32);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp16);
              byte_9f = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp33);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              ra000_ffff_tmp34 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp35 = simd_andc(byte_range_80_bf, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp35, basis_bits.bit_4);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_5, ra000_ffff_tmp16);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp36, ra000_ffff_tmp37);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(18), sequence_ed_9f_adv));
              ra000_ffff_tmp38 = simd_and(sequence_ed_9f_adv, byte_range_80_86);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp40 = simd_not(ra000_ffff_tmp39);
              ra000_ffff_tmp41 = simd_or(basis_bits.bit_5, ra000_ffff_tmp16);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_4, ra000_ffff_tmp41);
              ra000_ffff_tmp43 = simd_or(basis_bits.bit_3, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp40), simd_andc(ra000_ffff_tmp43, basis_bits.bit_2));
              byte_range_8b_bb = simd_and(byte_range_80_bf, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(sequence_ed_9f_adv, byte_range_8b_bb);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp45);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp33);
              ra000_ffff_tmp46 = simd_and(byte_range_80_bf, ra000_ffff_tmp13);
              byte_be = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp28);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(19), ra000_ffff_tmp47));
              sequence_ef_be = simd_and(ra000_ffff_tmp47, byte_be);
              byte_ef_adv = ra000_ffff_tmp47;
              ra000_ffff_tmp48 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp49 = simd_and(basis_bits.bit_3, ra000_ffff_tmp33);
              byte_range_a0_be = simd_andc(ra000_ffff_tmp48, ra000_ffff_tmp49);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(20), sequence_ef_be_adv));
              ra000_ffff_tmp50 = simd_and(sequence_ef_be_adv, byte_range_a0_be);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp50);
              byte_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp33);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(ra000_ffff_tmp36, r800_ffff_tmp12);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(21), sequence_ef_bf_adv));
              ra000_ffff_tmp51 = simd_and(sequence_ef_bf_adv, byte_range_82_87);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp51);
              ra000_ffff_tmp52 = simd_and(ra000_ffff_tmp35, basis_bits.bit_4);
              byte_range_8a_8f = simd_and(ra000_ffff_tmp52, r800_ffff_tmp12);
              ra000_ffff_tmp53 = simd_and(sequence_ef_bf_adv, byte_range_8a_8f);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_andc(ra000_ffff_tmp27, basis_bits.bit_4);
              byte_range_92_97 = simd_and(ra000_ffff_tmp54, r800_ffff_tmp12);
              ra000_ffff_tmp55 = simd_and(sequence_ef_bf_adv, byte_range_92_97);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_and(ra000_ffff_tmp27, basis_bits.bit_4);
              ra000_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp15), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              byte_range_9a_9c = simd_and(ra000_ffff_tmp56, ra000_ffff_tmp57);
              ra000_ffff_tmp58 = simd_and(sequence_ef_bf_adv, byte_range_9a_9c);
              struct_sc_Hang.cc = simd_or(struct_sc_Hang.cc, ra000_ffff_tmp58);
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 12);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 22);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 22);
        }
        carryQ.CarryQ_Adjust(22);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<22, 0> carryQ;
  };

  struct Property_sc_Tavt {
  Property_sc_Tavt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tavt & struct_sc_Tavt) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_aa;
		BitBlock ra000_ffff_tmp6, sequence_ea_aa, byte_ea_adv, byte_range_80_bf;
		BitBlock sequence_ea_aa_adv, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, byte_ab, sequence_ea_ab, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock byte_range_80_82, sequence_ea_ab_adv, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_9b_9f, ra000_ffff_tmp20;




        struct_sc_Tavt.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              byte_aa = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp6));
              sequence_ea_aa = simd_and(ra000_ffff_tmp6, byte_aa);
              byte_ea_adv = ra000_ffff_tmp6;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(1), sequence_ea_aa_adv));
              ra000_ffff_tmp7 = simd_and(sequence_ea_aa_adv, byte_range_80_bf);
              struct_sc_Tavt.cc = simd_or(struct_sc_Tavt.cc, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_ab = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp10);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp12 = simd_andc(byte_range_80_bf, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp13);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp9);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(2), sequence_ea_ab_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_ab_adv, byte_range_80_82);
              struct_sc_Tavt.cc = simd_or(struct_sc_Tavt.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp17 = simd_and(byte_range_80_bf, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp17, basis_bits.bit_4);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_5, ra000_ffff_tmp9);
              byte_range_9b_9f = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(sequence_ea_ab_adv, byte_range_9b_9f);
              struct_sc_Tavt.cc = simd_or(struct_sc_Tavt.cc, ra000_ffff_tmp20);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Tfng {
  Property_sc_Tfng() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Tfng & struct_sc_Tfng) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_b4;
		BitBlock r2000_2fff_tmp3, sequence_e2_b4, byte_e2_adv, byte_range_b0_bf;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock byte_b5, sequence_e2_b5, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock byte_range_80_a7, sequence_e2_b5_adv, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, byte_range_af_b0, r2000_2fff_tmp17, byte_bf;
		BitBlock r2000_2fff_tmp18;




        struct_sc_Tfng.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_b4 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_b4 = simd_and(r2000_2fff_tmp3, byte_b4);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_b0_bf = r2000_2fff_tmp2;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(2), sequence_e2_b4_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
                  struct_sc_Tfng.cc = simd_or(struct_sc_Tfng.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp5);
                  byte_b5 = simd_and(byte_range_b0_bf, r2000_2fff_tmp6);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_2, r2000_2fff_tmp7);
                  byte_range_80_a7 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp8);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(3), sequence_e2_b5_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_b5_adv, byte_range_80_a7);
                  struct_sc_Tfng.cc = simd_or(struct_sc_Tfng.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp11 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r2000_2fff_tmp12 = simd_not(r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp12), simd_andc(r2000_2fff_tmp15, basis_bits.bit_3));
                  byte_range_af_b0 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_and(sequence_e2_b5_adv, byte_range_af_b0);
                  struct_sc_Tfng.cc = simd_or(struct_sc_Tfng.cc, r2000_2fff_tmp17);
                  byte_bf = simd_and(byte_range_b0_bf, r2000_2fff_tmp15);
                  r2000_2fff_tmp18 = simd_and(sequence_e2_b5_adv, byte_bf);
                  struct_sc_Tfng.cc = simd_or(struct_sc_Tfng.cc, r2000_2fff_tmp18);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Khar {
  Property_sc_Khar() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Khar & struct_sc_Khar) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a8;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a8, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_80_83, sequence_f0_90_a8_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_range_85_86, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock byte_range_8c_93, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock byte_range_95_97, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, byte_range_99_b3;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, byte_range_b8_ba, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, byte_bf, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, byte_a9, sequence_f0_90_a9;
		BitBlock byte_range_80_87, sequence_f0_90_a9_adv, r10000_10ffff_tmp42;
		BitBlock byte_range_90_98, r10000_10ffff_tmp43;




        struct_sc_Khar.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a8 = simd_and(r10000_10ffff_tmp12, byte_a8);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp13);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(2), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_a8_adv, byte_range_80_83);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_85_86 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_a8_adv, byte_range_85_86);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp1);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp22, basis_bits.bit_3));
            byte_range_8c_93 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_and(sequence_f0_90_a8_adv, byte_range_8c_93);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp16);
            byte_range_95_97 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp2);
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_a8_adv, byte_range_95_97);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp28 = simd_not(r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp28), simd_andc(r10000_10ffff_tmp31, basis_bits.bit_2));
            byte_range_99_b3 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a8_adv, byte_range_99_b3);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp10);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_b8_ba = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(sequence_f0_90_a8_adv, byte_range_b8_ba);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp36);
            byte_bf = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_a8_adv, byte_bf);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp40);
            byte_a9 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp41);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_80_87 = simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(3), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_a9_adv, byte_range_80_87);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp42);
            byte_range_90_98 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp30);
            r10000_10ffff_tmp43 = simd_and(sequence_f0_90_a9_adv, byte_range_90_98);
            struct_sc_Khar.cc = simd_or(struct_sc_Khar.cc, r10000_10ffff_tmp43);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_sc_Mymr {
  Property_sc_Mymr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Mymr & struct_sc_Mymr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_range_80_81;
		BitBlock r1000_1fff_tmp3, byte_e1_byte_range_80_81, byte_range_80_bf;
		BitBlock r1000_1fff_tmp4, byte_e1_byte_range_80_81_sfx, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_82, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_80_9f, sequence_e1_82_adv, r1000_1fff_tmp8;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_a7, ra000_ffff_tmp7;
		BitBlock sequence_ea_a7, byte_ea_adv, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_a0_be;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_a9, sequence_ea_a9, byte_range_a0_bf;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp15;




        struct_sc_Mymr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 7))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 7))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  byte_e1_byte_range_80_81 = simd_and(r1000_1fff_tmp3, byte_range_80_81);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_80_81, carryQ.get_carry_in(2), r1000_1fff_tmp4));
                  byte_e1_byte_range_80_81_sfx = simd_and(r1000_1fff_tmp4, byte_range_80_bf);
                  struct_sc_Mymr.cc = simd_or(struct_sc_Mymr.cc, byte_e1_byte_range_80_81_sfx);
                  r1000_1fff_tmp5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  sequence_e1_82 = simd_and(r1000_1fff_tmp3, byte_82);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(3), sequence_e1_82_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_82_adv, byte_range_80_9f);
                  struct_sc_Mymr.cc = simd_or(struct_sc_Mymr.cc, r1000_1fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(4, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp6 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp5);
              byte_a7 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(4), ra000_ffff_tmp7));
              sequence_ea_a7 = simd_and(ra000_ffff_tmp7, byte_a7);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp5);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_a0_be = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp11);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(5), sequence_ea_a7_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_a7_adv, byte_range_a0_be);
              struct_sc_Mymr.cc = simd_or(struct_sc_Mymr.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp13);
              byte_a9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_a0_bf = ra000_ffff_tmp8;
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(6), sequence_ea_a9_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_a9_adv, byte_range_a0_bf);
              struct_sc_Mymr.cc = simd_or(struct_sc_Mymr.cc, ra000_ffff_tmp15);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 7);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 7);
        }
        carryQ.CarryQ_Adjust(7);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<7, 0> carryQ;
  };

  struct Property_sc_Avst {
  Property_sc_Avst() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Avst & struct_sc_Avst) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_ac;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_ac, byte_f0_adv;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, byte_range_80_b5;
		BitBlock sequence_f0_90_ac_adv, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_range_b9_bf;
		BitBlock r10000_10ffff_tmp21;




        struct_sc_Avst.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_ac = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_ac = simd_and(r10000_10ffff_tmp12, byte_ac);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp15);
            byte_range_80_b5 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp16);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(2), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_ac_adv, byte_range_80_b5);
            struct_sc_Avst.cc = simd_or(struct_sc_Avst.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp18, basis_bits.bit_4);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_b9_bf = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(sequence_f0_90_ac_adv, byte_range_b9_bf);
            struct_sc_Avst.cc = simd_or(struct_sc_Avst.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Buhd {
  Property_sc_Buhd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Buhd & struct_sc_Buhd) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9d, r1000_1fff_tmp5, sequence_e1_9d;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_range_80_93;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp8;




        struct_sc_Buhd.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_9d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9d = simd_and(r1000_1fff_tmp5, byte_9d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  byte_range_80_93 = simd_andc(r1000_1fff_tmp6, r1000_1fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(2), sequence_e1_9d_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_9d_adv, byte_range_80_93);
                  struct_sc_Buhd.cc = simd_or(struct_sc_Buhd.cc, r1000_1fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Samr {
  Property_sc_Samr() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Samr & struct_sc_Samr) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock byte_range_80_ad, sequence_e0_a0_adv, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock byte_range_b0_be, r800_fff_tmp13;




        struct_sc_Samr.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_3, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_2, r800_fff_tmp5);
                  byte_range_80_ad = simd_andc(r800_ffff_tmp5, r800_fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(2), sequence_e0_a0_adv));
                  r800_fff_tmp7 = simd_and(sequence_e0_a0_adv, byte_range_80_ad);
                  struct_sc_Samr.cc = simd_or(struct_sc_Samr.cc, r800_fff_tmp7);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp5, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_5, r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_4, r800_fff_tmp11);
                  byte_range_b0_be = simd_andc(r800_fff_tmp9, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
                  struct_sc_Samr.cc = simd_or(struct_sc_Samr.cc, r800_fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Zzzz {
  Property_sc_Zzzz() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Zzzz & struct_sc_Zzzz) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock byte_range_b8_b9, byte_cd_adv, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock r370_3ff_tmp5, byte_ce, r370_3ff_tmp6, byte_range_80_83, byte_ce_adv;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9, byte_8b, r370_3ff_tmp10;
		BitBlock byte_8d, r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13;
		BitBlock r370_3ff_tmp14, byte_a2, r370_3ff_tmp15, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, byte_d6, r400_5ff_tmp5;
		BitBlock byte_range_80_8f, r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock r500_58f_tmp5, r500_58f_tmp6, r500_58f_tmp7, byte_d5, r500_58f_tmp8;
		BitBlock r500_58f_tmp9, r530_58f_tmp1, byte_b0, byte_d4_adv, r530_58f_tmp2;
		BitBlock r530_58f_tmp3, r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6;
		BitBlock r530_58f_tmp7, r530_58f_tmp8, byte_range_97_98, byte_d5_adv;
		BitBlock r530_58f_tmp9, r530_58f_tmp10, r530_58f_tmp11, byte_a0;
		BitBlock r530_58f_tmp12, r530_58f_tmp13, r530_58f_tmp14, byte_88, byte_d6_adv;
		BitBlock r530_58f_tmp15, r530_58f_tmp16, r530_58f_tmp17, r530_58f_tmp18;
		BitBlock byte_range_8b_8c, r530_58f_tmp19, byte_range_90_bf, r400_5ff_tmp9;
		BitBlock r400_5ff_tmp10, r400_5ff_tmp11, byte_d7, r400_5ff_tmp12;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, byte_90, r590_5ff_tmp4;
		BitBlock byte_range_88_8f, byte_d7_adv, r590_5ff_tmp5, r590_5ff_tmp6;
		BitBlock r590_5ff_tmp7, r590_5ff_tmp8, r590_5ff_tmp9, byte_range_ab_af;
		BitBlock r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13;
		BitBlock r590_5ff_tmp14, byte_range_b5_bf, r590_5ff_tmp15, r80_7ff_tmp6;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_9d, byte_d8_adv, r600_6ff_tmp8, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5, r700_77f_tmp6;
		BitBlock r700_77f_tmp7, r700_77f_tmp8, r700_74f_tmp1, r700_74f_tmp2, byte_8e;
		BitBlock byte_dc_adv, r700_74f_tmp3, r700_74f_tmp4, r700_74f_tmp5;
		BitBlock r700_74f_tmp6, r700_74f_tmp7, byte_dd_adv, r700_74f_tmp8;
		BitBlock r80_7ff_tmp9, byte_range_de_df, r780_7ff_tmp1, r780_7ff_tmp2, byte_de;
		BitBlock r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock r780_7bf_tmp5, byte_range_b2_bf, byte_de_adv, r780_7bf_tmp6;
		BitBlock r780_7ff_tmp3, r780_7ff_tmp4, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, byte_range_bb_bf;
		BitBlock byte_df_adv, r7c0_7ff_tmp6, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, byte_range_ae_af, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, byte_bf, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, byte_a1, sequence_e0_a1, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, r800_fff_tmp15, byte_range_9c_9d, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, byte_range_9f_bf;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, sequence_e0_a2;
		BitBlock byte_range_80_9f, sequence_e0_a2_adv, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, byte_range_b3_bf, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock byte_range_80_a3, sequence_e0_a3_adv, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock byte_a6, sequence_e0_a6, r800_fff_tmp31, r800_fff_tmp32, byte_84;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp33, r800_fff_tmp34, r800_fff_tmp35;
		BitBlock byte_range_8d_8e, r800_fff_tmp36, r800_fff_tmp37, byte_range_91_92;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, byte_a9;
		BitBlock r800_fff_tmp41, byte_b1, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, byte_range_b3_b5, r800_fff_tmp46;
		BitBlock r800_fff_tmp47, byte_range_ba_bb, r800_fff_tmp48, r800_fff_tmp49;
		BitBlock byte_a7, sequence_e0_a7, r800_fff_tmp50, byte_range_85_86;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp51, r800_fff_tmp52, byte_range_89_8a;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock r800_fff_tmp57, byte_range_8f_96, r800_fff_tmp58, byte_range_98_9b;
		BitBlock r800_fff_tmp59, r800_fff_tmp60, byte_9e, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, byte_range_a4_a5, r800_fff_tmp63, byte_range_bc_bf;
		BitBlock r800_fff_tmp64, r800_fff_tmp65, byte_a8, sequence_e0_a8, byte_80;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, byte_range_8b_8e, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, byte_b4, r800_fff_tmp74, byte_b7;
		BitBlock r800_fff_tmp75, r800_fff_tmp76, r800_fff_tmp77, byte_bd;
		BitBlock r800_fff_tmp78, sequence_e0_a9, r800_fff_tmp79, byte_range_83_86;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp80, r800_fff_tmp81, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, byte_range_8e_90, r800_fff_tmp84, r800_fff_tmp85;
		BitBlock r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88, byte_range_92_98;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, r800_fff_tmp92;
		BitBlock r800_fff_tmp93, r800_fff_tmp94, r800_fff_tmp95, byte_range_9f_a5;
		BitBlock r800_fff_tmp96, byte_range_b6_bf, r800_fff_tmp97, r800_fff_tmp98;
		BitBlock byte_aa, sequence_e0_aa, sequence_e0_aa_adv, r800_fff_tmp99;
		BitBlock r800_fff_tmp100, r800_fff_tmp101, byte_92, r800_fff_tmp102;
		BitBlock r800_fff_tmp103, r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106;
		BitBlock r800_fff_tmp107, byte_ab, sequence_e0_ab, byte_86, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp108, byte_8a, r800_fff_tmp109, byte_range_8e_8f;
		BitBlock r800_fff_tmp110, r800_fff_tmp111, byte_range_91_9f, r800_fff_tmp112;
		BitBlock r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock byte_ac, sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp117;
		BitBlock r800_fff_tmp118, r800_fff_tmp119, r800_fff_tmp120, r800_fff_tmp121;
		BitBlock r800_fff_tmp122, r800_fff_tmp123, r800_fff_tmp124, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_fff_tmp125, r800_fff_tmp126;
		BitBlock r800_fff_tmp127, r800_fff_tmp128, byte_range_8e_95, r800_fff_tmp129;
		BitBlock r800_fff_tmp130, r800_fff_tmp131, r800_fff_tmp132, byte_range_b8_bf;
		BitBlock r800_fff_tmp133, byte_ae, sequence_e0_ae, byte_range_80_81;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp134, r800_fff_tmp135;
		BitBlock byte_range_8b_8d, r800_fff_tmp136, byte_91, r800_fff_tmp137;
		BitBlock r800_fff_tmp138, byte_range_96_98, r800_fff_tmp139, byte_9b;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, byte_range_a0_a2;
		BitBlock r800_fff_tmp143, r800_fff_tmp144, byte_range_a5_a7, r800_fff_tmp145;
		BitBlock r800_fff_tmp146, byte_range_ab_ad, r800_fff_tmp147, r800_fff_tmp148;
		BitBlock byte_range_ba_bd, r800_fff_tmp149, byte_af, sequence_e0_af;
		BitBlock byte_range_83_85, sequence_e0_af_adv, r800_fff_tmp150, byte_89;
		BitBlock r800_fff_tmp151, r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock r800_fff_tmp155, byte_range_91_96, r800_fff_tmp156, r800_fff_tmp157;
		BitBlock byte_range_98_a5, r800_fff_tmp158, r800_fff_tmp159, sequence_e0_b0;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162;
		BitBlock r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165, byte_range_ba_bc;
		BitBlock r800_fff_tmp166, sequence_e0_b1, r800_fff_tmp167, byte_85;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170;
		BitBlock r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173, byte_range_8e_94;
		BitBlock r800_fff_tmp174, byte_97, r800_fff_tmp175, r800_fff_tmp176;
		BitBlock byte_range_9a_9f, r800_fff_tmp177, r800_fff_tmp178, byte_range_b0_b7;
		BitBlock r800_fff_tmp179, byte_b2, sequence_e0_b2, sequence_e0_b2_adv;
		BitBlock r800_fff_tmp180, r800_fff_tmp181, r800_fff_tmp182, r800_fff_tmp183;
		BitBlock r800_fff_tmp184, r800_fff_tmp185, r800_fff_tmp186, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp187, r800_fff_tmp188;
		BitBlock r800_fff_tmp189, r800_fff_tmp190, r800_fff_tmp191, byte_range_97_9d;
		BitBlock r800_fff_tmp192, byte_9f, r800_fff_tmp193, r800_fff_tmp194;
		BitBlock r800_fff_tmp195, r800_fff_tmp196, sequence_e0_b4, sequence_e0_b4_adv;
		BitBlock r800_fff_tmp197, r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200;
		BitBlock r800_fff_tmp201, byte_range_bb_bc, r800_fff_tmp202, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp203, r800_fff_tmp204;
		BitBlock r800_fff_tmp205, byte_range_98_9f, r800_fff_tmp206, r800_fff_tmp207;
		BitBlock byte_range_b6_b8, r800_fff_tmp208, byte_b6, sequence_e0_b6;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp209, r800_fff_tmp210, r800_fff_tmp211;
		BitBlock r800_fff_tmp212, byte_range_97_99, r800_fff_tmp213, r800_fff_tmp214;
		BitBlock byte_bc, r800_fff_tmp215, byte_range_be_bf, r800_fff_tmp216;
		BitBlock sequence_e0_b7, byte_range_87_89, sequence_e0_b7_adv, r800_fff_tmp217;
		BitBlock r800_fff_tmp218, byte_95, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, byte_range_a0_a5, r800_fff_tmp222, byte_range_b0_b1;
		BitBlock r800_fff_tmp223, r800_fff_tmp224, byte_b8, sequence_e0_b8;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp225, byte_range_bb_be;
		BitBlock r800_fff_tmp226, byte_b9, sequence_e0_b9, r800_fff_tmp227;
		BitBlock r800_fff_tmp228, byte_range_9c_bf, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp229, byte_ba, sequence_e0_ba, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp230, byte_83, r800_fff_tmp231, r800_fff_tmp232;
		BitBlock r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235, r800_fff_tmp236;
		BitBlock byte_range_8e_93, r800_fff_tmp237, byte_98, r800_fff_tmp238;
		BitBlock r800_fff_tmp239, byte_a4, r800_fff_tmp240, r800_fff_tmp241;
		BitBlock r800_fff_tmp242, byte_range_a8_a9, r800_fff_tmp243, r800_fff_tmp244;
		BitBlock r800_fff_tmp245, r800_fff_tmp246, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp247, byte_87, r800_fff_tmp248;
		BitBlock r800_fff_tmp249, byte_range_9a_9b, r800_fff_tmp250, byte_range_a0_bf;
		BitBlock r800_fff_tmp251, sequence_e0_bd, sequence_e0_bd_adv, r800_fff_tmp252;
		BitBlock r800_fff_tmp253, r800_fff_tmp254, byte_range_ad_b0, r800_fff_tmp255;
		BitBlock byte_be, sequence_e0_be, sequence_e0_be_adv, r800_fff_tmp256;
		BitBlock r800_fff_tmp257, sequence_e0_bf, sequence_e0_bf_adv, r800_fff_tmp258;
		BitBlock r800_fff_tmp259, r800_fff_tmp260, r800_fff_tmp261, byte_range_9b_bf;
		BitBlock r800_fff_tmp262, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, sequence_e1_83, byte_e1_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, sequence_e1_83_adv, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, byte_range_88_8c, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, sequence_e1_89;
		BitBlock sequence_e1_89_adv, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, byte_99, r1000_1fff_tmp23, byte_range_9e_9f;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, sequence_e1_8a;
		BitBlock sequence_e1_8a_adv, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, byte_range_b6_b7, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, r1000_1fff_tmp35, sequence_e1_8b;
		BitBlock byte_81, sequence_e1_8b_adv, r1000_1fff_tmp36, byte_range_86_87;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39, byte_8c;
		BitBlock sequence_e1_8c, sequence_e1_8c_adv, r1000_1fff_tmp40;
		BitBlock byte_range_96_97, r1000_1fff_tmp41, r1000_1fff_tmp42, sequence_e1_8d;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock byte_range_9b_9c, sequence_e1_8d_adv, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, byte_range_bd_bf, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, sequence_e1_8e, r1000_1fff_tmp50;
		BitBlock sequence_e1_8e_adv, r1000_1fff_tmp51, byte_8f, sequence_e1_8f;
		BitBlock r1000_1fff_tmp52, sequence_e1_8f_adv, r1000_1fff_tmp53, byte_9a;
		BitBlock sequence_e1_9a, r1000_1fff_tmp54, byte_range_9d_9f;
		BitBlock sequence_e1_9a_adv, r1000_1fff_tmp55, sequence_e1_9b;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, byte_range_b9_bf;
		BitBlock sequence_e1_9b_adv, r1000_1fff_tmp58, byte_9c, sequence_e1_9c;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp59, byte_range_95_9f;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock byte_range_b7_bf, r1000_1fff_tmp63, sequence_e1_9d, byte_range_94_9f;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_range_b4_bf;
		BitBlock r1000_1fff_tmp68, sequence_e1_9f, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp69, r1000_1fff_tmp70, byte_range_aa_af;
		BitBlock r1000_1fff_tmp71, byte_range_ba_bf, r1000_1fff_tmp72, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp73, r1000_1fff_tmp74;
		BitBlock sequence_e1_a1, sequence_e1_a1_adv, r1000_1fff_tmp75;
		BitBlock r1000_1fff_tmp76, sequence_e1_a2, r1000_1fff_tmp77;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp78, sequence_e1_a3;
		BitBlock r1000_1fff_tmp79, r1000_1fff_tmp80, sequence_e1_a3_adv;
		BitBlock r1000_1fff_tmp81, sequence_e1_a4, sequence_e1_a4_adv;
		BitBlock r1000_1fff_tmp82, byte_range_ac_af, r1000_1fff_tmp83;
		BitBlock r1000_1fff_tmp84, r1000_1fff_tmp85, byte_a5, sequence_e1_a5;
		BitBlock r1000_1fff_tmp86, byte_range_81_83, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp87, r1000_1fff_tmp88, r1000_1fff_tmp89, sequence_e1_a6;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp90, sequence_e1_a7;
		BitBlock byte_range_8a_8f, sequence_e1_a7_adv, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, byte_range_9b_9d;
		BitBlock r1000_1fff_tmp94, r1000_1fff_tmp95, sequence_e1_a8, r1000_1fff_tmp96;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp97, sequence_e1_a9;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp98, r1000_1fff_tmp99;
		BitBlock byte_range_bd_be, r1000_1fff_tmp100, sequence_e1_aa;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp101, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, r1000_1fff_tmp104, sequence_e1_ab;
		BitBlock byte_range_80_bf, sequence_e1_ab_adv, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, sequence_e1_ad, r1000_1fff_tmp107;
		BitBlock byte_range_8c_8f, sequence_e1_ad_adv, r1000_1fff_tmp108;
		BitBlock r1000_1fff_tmp109, r1000_1fff_tmp110, r1000_1fff_tmp111;
		BitBlock sequence_e1_af, r1000_1fff_tmp112, byte_range_b4_bb;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp113, sequence_e1_b0;
		BitBlock r1000_1fff_tmp114, byte_range_b8_ba, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp115, sequence_e1_b1, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, byte_range_8a_8c, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp118, sequence_e1_b2, sequence_e1_b2_adv;
		BitBlock r1000_1fff_tmp119, sequence_e1_b3, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, r1000_1fff_tmp122;
		BitBlock r1000_1fff_tmp123, sequence_e1_b7, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, byte_range_b6_bb, sequence_e1_b7_adv;
		BitBlock r1000_1fff_tmp126, sequence_e1_bc, r1000_1fff_tmp127;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp128, r1000_1fff_tmp129;
		BitBlock sequence_e1_bd, sequence_e1_bd_adv, r1000_1fff_tmp130;
		BitBlock r1000_1fff_tmp131, r1000_1fff_tmp132, r1000_1fff_tmp133;
		BitBlock r1000_1fff_tmp134, r1000_1fff_tmp135, r1000_1fff_tmp136;
		BitBlock sequence_e1_be, sequence_e1_be_adv, r1000_1fff_tmp137, sequence_e1_bf;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp138, r1000_1fff_tmp139;
		BitBlock byte_range_94_95, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, r1000_1fff_tmp143, r1000_1fff_tmp144;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, byte_range_b2_b3;
		BitBlock r2000_2fff_tmp11, byte_82, sequence_e2_82, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, sequence_e2_83;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, byte_range_b1_bf, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, sequence_e2_86, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp30, sequence_e2_8f;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, sequence_e2_8f_adv;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, sequence_e2_90, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock byte_range_a7_bf, sequence_e2_90_adv, r2000_2fff_tmp39;
		BitBlock sequence_e2_91, r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock byte_range_8b_9f, sequence_e2_91_adv, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, sequence_e2_ad, r2000_2fff_tmp45, byte_range_b4_b5;
		BitBlock sequence_e2_ad_adv, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock sequence_e2_ae, r2000_2fff_tmp48, sequence_e2_ae_adv;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, sequence_e2_af, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock sequence_e2_af_adv, r2000_2fff_tmp55, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, byte_range_92_bf, r2000_2fff_tmp58, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp59, sequence_e2_b1;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp60, sequence_e2_b3;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, byte_range_b4_b8;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp63, sequence_e2_b4;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, byte_range_a8_ac, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, sequence_e2_b5, byte_range_a8_ae;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, byte_range_b1_be, r2000_2fff_tmp72, sequence_e2_b6;
		BitBlock byte_range_97_9f, sequence_e2_b6_adv, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, sequence_e2_b7;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, sequence_e2_b9, r2000_2fff_tmp83;
		BitBlock r2000_2fff_tmp84, r2000_2fff_tmp85, byte_range_83_bf;
		BitBlock sequence_e2_b9_adv, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock sequence_e2_ba, sequence_e2_ba_adv, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, sequence_e2_bb, sequence_e2_bb_adv;
		BitBlock r2000_2fff_tmp90, sequence_e2_bf, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, r2000_2fff_tmp94, r2000_2fff_tmp95;
		BitBlock byte_range_96_af, sequence_e2_bf_adv, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, sequence_e3_81, byte_e3_adv;
		BitBlock r3000_4dff_tmp6, sequence_e3_81_adv, r3000_4dff_tmp7, sequence_e3_82;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, sequence_e3_84, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock byte_range_80_84, sequence_e3_84_adv, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, r3000_4dff_tmp22, byte_range_ae_b0;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, sequence_e3_86, r3000_4dff_tmp25;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp26, r3000_4dff_tmp27;
		BitBlock r3000_4dff_tmp28, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, sequence_e3_87, r3000_4dff_tmp33;
		BitBlock byte_range_a4_af, sequence_e3_87_adv, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, r3000_4dff_tmp36, sequence_e3_88;
		BitBlock sequence_e3_88_adv, r3000_4dff_tmp37, r3000_4dff_tmp38;
		BitBlock sequence_e3_8b, sequence_e3_8b_adv, r3000_4dff_tmp39, sequence_e4_b6;
		BitBlock byte_e4_adv, r3000_4dff_tmp40, r3000_4dff_tmp41, sequence_e4_b6_adv;
		BitBlock r3000_4dff_tmp42, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock byte_range_e5_e9, r800_ffff_tmp18, r4e00_9fff_tmp1, r4e00_9fff_tmp2;
		BitBlock r4e00_9fff_tmp3, byte_e9, r4e00_9fff_tmp4, r4e00_9fff_tmp5;
		BitBlock r4e00_9fff_tmp6, r4e00_9fff_tmp7, sequence_e9_bf, byte_e9_adv;
		BitBlock r4e00_9fff_tmp8, r4e00_9fff_tmp9, r4e00_9fff_tmp10, byte_range_8d_bf;
		BitBlock sequence_e9_bf_adv, r4e00_9fff_tmp11, r800_ffff_tmp19;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_92, byte_ea_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_8d_8f;
		BitBlock sequence_ea_92_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_93, sequence_ea_93, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_range_87_8f, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, sequence_ea_98, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_range_ac_bf, sequence_ea_98_adv;
		BitBlock ra000_ffff_tmp21, sequence_ea_9a, ra000_ffff_tmp22;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock sequence_ea_9b, sequence_ea_9b_adv, ra000_ffff_tmp25, sequence_ea_9e;
		BitBlock ra000_ffff_tmp26, sequence_ea_9e_adv, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, sequence_ea_9f, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, byte_range_80_b6, sequence_ea_9f_adv;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, sequence_ea_a0;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, sequence_ea_a1;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp41, sequence_ea_a3;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock byte_range_85_8d, sequence_ea_a3_adv, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, sequence_ea_a5, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock byte_range_94_9e, sequence_ea_a5_adv, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock byte_range_9a_9d, ra000_ffff_tmp57, ra000_ffff_tmp58, sequence_ea_a8;
		BitBlock sequence_ea_a8_adv, ra000_ffff_tmp59, ra000_ffff_tmp60;
		BitBlock sequence_ea_a9, sequence_ea_a9_adv, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, sequence_ea_ab, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, byte_range_83_9a;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, sequence_ea_ac, sequence_ea_ac_adv;
		BitBlock ra000_ffff_tmp73, ra000_ffff_tmp74, ra000_ffff_tmp75;
		BitBlock ra000_ffff_tmp76, byte_range_87_88, ra000_ffff_tmp77;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, byte_range_8f_90;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, sequence_ea_ad, byte_range_a0_a3;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp85, ra000_ffff_tmp86;
		BitBlock ra000_ffff_tmp87, byte_range_a6_bf, ra000_ffff_tmp88, sequence_ea_ae;
		BitBlock sequence_ea_ae_adv, ra000_ffff_tmp89, ra000_ffff_tmp90;
		BitBlock sequence_ea_af, sequence_ea_af_adv, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94, byte_ed;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, sequence_ed_9e, byte_ed_adv;
		BitBlock sequence_ed_9e_adv, ra000_ffff_tmp97, sequence_ed_9f;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock byte_range_87_8a, sequence_ed_9f_adv, ra000_ffff_tmp101;
		BitBlock ra000_ffff_tmp102, byte_ed_byte_range_a0_bf, ra000_ffff_tmp103;
		BitBlock byte_ed_byte_range_a0_bf_sfx, byte_ee, ra000_ffff_tmp104;
		BitBlock byte_ee_byte_range_80_bf, ra000_ffff_tmp105;
		BitBlock byte_ee_byte_range_80_bf_sfx, byte_ef, ra000_ffff_tmp106;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, byte_ef_byte_range_80_a3;
		BitBlock ra000_ffff_tmp109, byte_ef_byte_range_80_a3_sfx, sequence_ef_a9;
		BitBlock byte_ef_adv, sequence_ef_a9_adv, ra000_ffff_tmp110, sequence_ef_ab;
		BitBlock ra000_ffff_tmp111, ra000_ffff_tmp112, ra000_ffff_tmp113;
		BitBlock byte_range_9a_bf, sequence_ef_ab_adv, ra000_ffff_tmp114;
		BitBlock sequence_ef_ac, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock ra000_ffff_tmp117, byte_range_87_92, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp118, ra000_ffff_tmp119, byte_range_98_9c;
		BitBlock ra000_ffff_tmp120, ra000_ffff_tmp121, ra000_ffff_tmp122;
		BitBlock ra000_ffff_tmp123, sequence_ef_ad, sequence_ef_ad_adv;
		BitBlock ra000_ffff_tmp124, ra000_ffff_tmp125, sequence_ef_af;
		BitBlock ra000_ffff_tmp126, ra000_ffff_tmp127, byte_range_82_92;
		BitBlock sequence_ef_af_adv, ra000_ffff_tmp128, sequence_ef_b5;
		BitBlock sequence_ef_b5_adv, ra000_ffff_tmp129, ra000_ffff_tmp130;
		BitBlock sequence_ef_b6, byte_range_90_91, sequence_ef_b6_adv;
		BitBlock ra000_ffff_tmp131, sequence_ef_b7, ra000_ffff_tmp132;
		BitBlock ra000_ffff_tmp133, ra000_ffff_tmp134, byte_range_88_af;
		BitBlock sequence_ef_b7_adv, ra000_ffff_tmp135, ra000_ffff_tmp136;
		BitBlock sequence_ef_b8, sequence_ef_b8_adv, ra000_ffff_tmp137;
		BitBlock ra000_ffff_tmp138, sequence_ef_b9, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp139, ra000_ffff_tmp140, ra000_ffff_tmp141;
		BitBlock ra000_ffff_tmp142, sequence_ef_bb, ra000_ffff_tmp143;
		BitBlock ra000_ffff_tmp144, sequence_ef_bb_adv, ra000_ffff_tmp145;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, ra000_ffff_tmp146, sequence_ef_be;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp147, sequence_ef_bf;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp148, ra000_ffff_tmp149;
		BitBlock byte_range_88_89, ra000_ffff_tmp150, ra000_ffff_tmp151;
		BitBlock byte_range_98_99, ra000_ffff_tmp152, ra000_ffff_tmp153;
		BitBlock ra000_ffff_tmp154, ra000_ffff_tmp155, ra000_ffff_tmp156;
		BitBlock ra000_ffff_tmp157, ra000_ffff_tmp158, byte_range_af_b8;
		BitBlock ra000_ffff_tmp159, ra000_ffff_tmp160, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock sequence_f0_90_80, byte_f0_adv, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock sequence_f0_90_81, r10000_10ffff_tmp28, sequence_f0_90_81_adv;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock byte_range_9e_bf, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock sequence_f0_90_83, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock sequence_f0_90_83_adv, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock sequence_f0_90_84, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock sequence_f0_90_84_adv, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock byte_range_b4_b6, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock sequence_f0_90_86, r10000_10ffff_tmp44, sequence_f0_90_86_adv;
		BitBlock r10000_10ffff_tmp45, byte_range_9c_9f, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, byte_range_a1_bf;
		BitBlock r10000_10ffff_tmp49, sequence_f0_90_87, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock sequence_f0_90_byte_range_88_89, r10000_10ffff_tmp53;
		BitBlock sequence_f0_90_byte_range_88_89_sfx, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, sequence_f0_90_8a;
		BitBlock r10000_10ffff_tmp57, sequence_f0_90_8a_adv, r10000_10ffff_tmp58;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp61, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, sequence_f0_90_8c, r10000_10ffff_tmp64;
		BitBlock sequence_f0_90_8c_adv, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp67, byte_range_8b_8f;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, sequence_f0_90_8e, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, sequence_f0_90_8f;
		BitBlock byte_range_84_87, sequence_f0_90_8f_adv, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock r10000_10ffff_tmp77, byte_range_96_bf, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, sequence_f0_90_92, sequence_f0_90_92_adv;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, byte_range_aa_bf;
		BitBlock r10000_10ffff_tmp85, sequence_f0_90_93, sequence_f0_90_93_adv;
		BitBlock r10000_10ffff_tmp86, byte_94, sequence_f0_90_94, byte_range_a8_af;
		BitBlock sequence_f0_90_94_adv, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock sequence_f0_90_95, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, byte_range_a4_ae, sequence_f0_90_95_adv;
		BitBlock r10000_10ffff_tmp92, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock sequence_f0_90_byte_range_96_97, r10000_10ffff_tmp95;
		BitBlock sequence_f0_90_byte_range_96_97_sfx, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp96, sequence_f0_90_9c_adv, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_9d, byte_range_96_9f, sequence_f0_90_9d_adv;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_a8_bf;
		BitBlock r10000_10ffff_tmp100, sequence_f0_90_byte_range_9e_9f;
		BitBlock r10000_10ffff_tmp101, sequence_f0_90_byte_range_9e_9f_sfx;
		BitBlock sequence_f0_90_a0, sequence_f0_90_a0_adv, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock r10000_10ffff_tmp106, byte_range_b9_bb, r10000_10ffff_tmp107;
		BitBlock r10000_10ffff_tmp108, r10000_10ffff_tmp109, r10000_10ffff_tmp110;
		BitBlock sequence_f0_90_a1, byte_96, sequence_f0_90_a1_adv;
		BitBlock r10000_10ffff_tmp111, sequence_f0_90_a2, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock byte_range_9f_a6, sequence_f0_90_a2_adv, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_a3, sequence_f0_90_a3_adv;
		BitBlock r10000_10ffff_tmp118, sequence_f0_90_a4, byte_range_9c_9e;
		BitBlock sequence_f0_90_a4_adv, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, byte_range_ba_be;
		BitBlock r10000_10ffff_tmp123, sequence_f0_90_a5, sequence_f0_90_a5_adv;
		BitBlock r10000_10ffff_tmp124, sequence_f0_90_a6, byte_range_b8_bd;
		BitBlock sequence_f0_90_a6_adv, r10000_10ffff_tmp125, sequence_f0_90_a7;
		BitBlock sequence_f0_90_a7_adv, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_a8, sequence_f0_90_a8_adv, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, byte_range_87_8b;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, r10000_10ffff_tmp133;
		BitBlock byte_range_b4_b7, r10000_10ffff_tmp134, r10000_10ffff_tmp135;
		BitBlock sequence_f0_90_a9, sequence_f0_90_a9_adv, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, byte_range_99_9f, r10000_10ffff_tmp138;
		BitBlock sequence_f0_90_aa, sequence_f0_90_aa_adv, r10000_10ffff_tmp139;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp140, r10000_10ffff_tmp141;
		BitBlock byte_range_a7_aa, sequence_f0_90_ab_adv, r10000_10ffff_tmp142;
		BitBlock r10000_10ffff_tmp143, sequence_f0_90_ac, r10000_10ffff_tmp144;
		BitBlock r10000_10ffff_tmp145, sequence_f0_90_ac_adv, r10000_10ffff_tmp146;
		BitBlock sequence_f0_90_ad, sequence_f0_90_ad_adv, r10000_10ffff_tmp147;
		BitBlock r10000_10ffff_tmp148, byte_range_b3_b7, r10000_10ffff_tmp149;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp150, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp151, r10000_10ffff_tmp152, r10000_10ffff_tmp153;
		BitBlock r10000_10ffff_tmp154, r10000_10ffff_tmp155, r10000_10ffff_tmp156;
		BitBlock r10000_10ffff_tmp157, byte_range_9d_a8, r10000_10ffff_tmp158;
		BitBlock r10000_10ffff_tmp159, sequence_f0_90_af, sequence_f0_90_af_adv;
		BitBlock r10000_10ffff_tmp160, sequence_f0_90_b1, r10000_10ffff_tmp161;
		BitBlock byte_range_89_bf, sequence_f0_90_b1_adv, r10000_10ffff_tmp162;
		BitBlock byte_range_b2_b8, sequence_f0_90_byte_range_b2_b8;
		BitBlock r10000_10ffff_tmp163, sequence_f0_90_byte_range_b2_b8_sfx;
		BitBlock sequence_f0_90_b9, sequence_f0_90_b9_adv, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, sequence_f0_90_byte_range_ba_bf;
		BitBlock r10000_10ffff_tmp166, sequence_f0_90_byte_range_ba_bf_sfx;
		BitBlock sequence_f0_91, r10000_10ffff_tmp167, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp168, r10000_10ffff_tmp169;
		BitBlock r10000_10ffff_tmp170, byte_range_8e_91, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp171, r10000_10ffff_tmp172, byte_range_b0_be;
		BitBlock r10000_10ffff_tmp173, sequence_f0_91_83, r10000_10ffff_tmp174;
		BitBlock byte_range_82_8f, sequence_f0_91_83_adv, r10000_10ffff_tmp175;
		BitBlock byte_range_a9_af, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock sequence_f0_91_84, sequence_f0_91_84_adv, r10000_10ffff_tmp178;
		BitBlock sequence_f0_91_85, byte_range_84_8f, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp179, r10000_10ffff_tmp180, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp181, byte_range_89_8c, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp182, r10000_10ffff_tmp183, r10000_10ffff_tmp184;
		BitBlock r10000_10ffff_tmp185, r10000_10ffff_tmp186, r10000_10ffff_tmp187;
		BitBlock byte_range_9b_a0, r10000_10ffff_tmp188, r10000_10ffff_tmp189;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, sequence_f0_91_88;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp192, r10000_10ffff_tmp193;
		BitBlock sequence_f0_91_89, sequence_f0_91_89_adv, r10000_10ffff_tmp194;
		BitBlock sequence_f0_91_8a, byte_range_80_af, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp195, sequence_f0_91_8b, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp196, r10000_10ffff_tmp197, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp198, r10000_10ffff_tmp199;
		BitBlock r10000_10ffff_tmp200, r10000_10ffff_tmp201, r10000_10ffff_tmp202;
		BitBlock r10000_10ffff_tmp203, r10000_10ffff_tmp204, r10000_10ffff_tmp205;
		BitBlock r10000_10ffff_tmp206, r10000_10ffff_tmp207, r10000_10ffff_tmp208;
		BitBlock sequence_f0_91_8d, sequence_f0_91_8d_adv, r10000_10ffff_tmp209;
		BitBlock r10000_10ffff_tmp210, r10000_10ffff_tmp211, r10000_10ffff_tmp212;
		BitBlock r10000_10ffff_tmp213, byte_range_8e_96, r10000_10ffff_tmp214;
		BitBlock r10000_10ffff_tmp215, r10000_10ffff_tmp216, r10000_10ffff_tmp217;
		BitBlock r10000_10ffff_tmp218, byte_range_ad_af, r10000_10ffff_tmp219;
		BitBlock r10000_10ffff_tmp220, sequence_f0_91_byte_range_8e_91;
		BitBlock r10000_10ffff_tmp221, sequence_f0_91_byte_range_8e_91_sfx;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp222;
		BitBlock r10000_10ffff_tmp223, r10000_10ffff_tmp224, r10000_10ffff_tmp225;
		BitBlock sequence_f0_91_byte_range_94_95, r10000_10ffff_tmp226;
		BitBlock sequence_f0_91_byte_range_94_95_sfx, sequence_f0_91_96;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp227, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp228, byte_range_8a_bf, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp229, sequence_f0_91_99, byte_range_85_8f;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp230, r10000_10ffff_tmp231;
		BitBlock sequence_f0_91_9a, sequence_f0_91_9a_adv, r10000_10ffff_tmp232;
		BitBlock sequence_f0_91_9b, sequence_f0_91_9b_adv, r10000_10ffff_tmp233;
		BitBlock r10000_10ffff_tmp234, r10000_10ffff_tmp235, r10000_10ffff_tmp236;
		BitBlock r10000_10ffff_tmp237, byte_range_9c_a1;
		BitBlock sequence_f0_91_byte_range_9c_a1, r10000_10ffff_tmp238;
		BitBlock sequence_f0_91_byte_range_9c_a1_sfx, sequence_f0_91_a2;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp239, sequence_f0_91_a3;
		BitBlock r10000_10ffff_tmp240, byte_range_b3_be, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp241, r10000_10ffff_tmp242, byte_range_a4_aa;
		BitBlock sequence_f0_91_byte_range_a4_aa, r10000_10ffff_tmp243;
		BitBlock sequence_f0_91_byte_range_a4_aa_sfx, sequence_f0_91_ab;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp244, r10000_10ffff_tmp245;
		BitBlock sequence_f0_91_byte_range_ac_bf, r10000_10ffff_tmp246;
		BitBlock sequence_f0_91_byte_range_ac_bf_sfx, sequence_f0_92;
		BitBlock r10000_10ffff_tmp247, sequence_f0_92_8e, sequence_f0_92_adv;
		BitBlock r10000_10ffff_tmp248, r10000_10ffff_tmp249, byte_range_99_bf;
		BitBlock sequence_f0_92_8e_adv, r10000_10ffff_tmp250, sequence_f0_92_8f;
		BitBlock sequence_f0_92_8f_adv, r10000_10ffff_tmp251, sequence_f0_92_91;
		BitBlock sequence_f0_92_91_adv, r10000_10ffff_tmp252, r10000_10ffff_tmp253;
		BitBlock r10000_10ffff_tmp254, r10000_10ffff_tmp255;
		BitBlock sequence_f0_92_byte_range_92_bf, r10000_10ffff_tmp256;
		BitBlock sequence_f0_92_byte_range_92_bf_sfx, sequence_f0_93;
		BitBlock r10000_10ffff_tmp257, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock r10000_10ffff_tmp258, byte_range_af_bf, sequence_f0_93_90_adv;
		BitBlock r10000_10ffff_tmp259, r10000_10ffff_tmp260, r10000_10ffff_tmp261;
		BitBlock byte_range_91_bf, sequence_f0_93_byte_range_91_bf;
		BitBlock r10000_10ffff_tmp262, sequence_f0_93_byte_range_91_bf_sfx;
		BitBlock byte_f0_byte_range_94_95, r10000_10ffff_tmp263;
		BitBlock byte_f0_byte_range_94_95_sfx, r10000_10ffff_tmp264;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, sequence_f0_96;
		BitBlock r10000_10ffff_tmp265, sequence_f0_96_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp266, sequence_f0_96_byte_range_80_9f_sfx;
		BitBlock sequence_f0_96_a8, sequence_f0_96_adv, sequence_f0_96_a8_adv;
		BitBlock r10000_10ffff_tmp267, sequence_f0_96_a9, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, byte_range_aa_ad;
		BitBlock r10000_10ffff_tmp270, r10000_10ffff_tmp271, sequence_f0_96_aa;
		BitBlock sequence_f0_96_aa_adv, r10000_10ffff_tmp272, sequence_f0_96_ab;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp273, r10000_10ffff_tmp274;
		BitBlock r10000_10ffff_tmp275, sequence_f0_96_ad, byte_range_86_8f;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock r10000_10ffff_tmp278, byte_range_b8_bc, r10000_10ffff_tmp279;
		BitBlock sequence_f0_96_ae, sequence_f0_96_ae_adv, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, byte_range_af_bb;
		BitBlock sequence_f0_96_byte_range_af_bb, r10000_10ffff_tmp283;
		BitBlock sequence_f0_96_byte_range_af_bb_sfx, sequence_f0_96_bd;
		BitBlock sequence_f0_96_bd_adv, r10000_10ffff_tmp284, r10000_10ffff_tmp285;
		BitBlock sequence_f0_96_be, byte_range_80_8e, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp286, r10000_10ffff_tmp287, sequence_f0_96_bf;
		BitBlock sequence_f0_96_bf_adv, r10000_10ffff_tmp288, byte_range_97_9a;
		BitBlock byte_f0_byte_range_97_9a, r10000_10ffff_tmp289;
		BitBlock byte_f0_byte_range_97_9a_sfx, r10000_10ffff_tmp290;
		BitBlock byte_f0_byte_range_97_9a_sfx_sfx, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp291, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock r10000_10ffff_tmp292, byte_range_82_bf, sequence_f0_9b_80_adv;
		BitBlock r10000_10ffff_tmp293, r10000_10ffff_tmp294, r10000_10ffff_tmp295;
		BitBlock byte_range_81_af, sequence_f0_9b_byte_range_81_af;
		BitBlock r10000_10ffff_tmp296, sequence_f0_9b_byte_range_81_af_sfx;
		BitBlock sequence_f0_9b_b1, sequence_f0_9b_b1_adv, r10000_10ffff_tmp297;
		BitBlock r10000_10ffff_tmp298, sequence_f0_9b_b2, byte_range_89_8f;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp299, r10000_10ffff_tmp300;
		BitBlock r10000_10ffff_tmp301, byte_range_a4_bf, r10000_10ffff_tmp302;
		BitBlock r10000_10ffff_tmp303, sequence_f0_9b_byte_range_b3_bf;
		BitBlock r10000_10ffff_tmp304, sequence_f0_9b_byte_range_b3_bf_sfx;
		BitBlock sequence_f0_9c, r10000_10ffff_tmp305, sequence_f0_9c_byte_range_80_bf;
		BitBlock r10000_10ffff_tmp306, sequence_f0_9c_byte_range_80_bf_sfx;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp307, sequence_f0_9d_83;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83_adv, r10000_10ffff_tmp308;
		BitBlock sequence_f0_9d_84, r10000_10ffff_tmp309, byte_range_a7_a8;
		BitBlock sequence_f0_9d_84_adv, r10000_10ffff_tmp310, sequence_f0_9d_87;
		BitBlock sequence_f0_9d_87_adv, r10000_10ffff_tmp311, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp312, r10000_10ffff_tmp313, byte_range_86_bf;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp314, byte_range_8a_8b;
		BitBlock sequence_f0_9d_byte_range_8a_8b, r10000_10ffff_tmp315;
		BitBlock sequence_f0_9d_byte_range_8a_8b_sfx, sequence_f0_9d_8d;
		BitBlock sequence_f0_9d_8d_adv, r10000_10ffff_tmp316, r10000_10ffff_tmp317;
		BitBlock sequence_f0_9d_byte_range_8e_8f, r10000_10ffff_tmp318;
		BitBlock sequence_f0_9d_byte_range_8e_8f_sfx, sequence_f0_9d_91;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp319, sequence_f0_9d_92;
		BitBlock sequence_f0_9d_92_adv, r10000_10ffff_tmp320, byte_range_a0_a1;
		BitBlock r10000_10ffff_tmp321, r10000_10ffff_tmp322, r10000_10ffff_tmp323;
		BitBlock r10000_10ffff_tmp324, byte_range_a3_a4, r10000_10ffff_tmp325;
		BitBlock r10000_10ffff_tmp326, r10000_10ffff_tmp327, r10000_10ffff_tmp328;
		BitBlock r10000_10ffff_tmp329, sequence_f0_9d_93, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp330, sequence_f0_9d_94, sequence_f0_9d_94_adv;
		BitBlock r10000_10ffff_tmp331, r10000_10ffff_tmp332, r10000_10ffff_tmp333;
		BitBlock r10000_10ffff_tmp334, r10000_10ffff_tmp335, r10000_10ffff_tmp336;
		BitBlock sequence_f0_9d_95, sequence_f0_9d_95_adv, r10000_10ffff_tmp337;
		BitBlock r10000_10ffff_tmp338, r10000_10ffff_tmp339, r10000_10ffff_tmp340;
		BitBlock r10000_10ffff_tmp341, sequence_f0_9d_9a, byte_range_a6_a7;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp342, sequence_f0_9d_9f;
		BitBlock r10000_10ffff_tmp343, byte_range_8c_8d, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp344, sequence_f0_9d_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp345, sequence_f0_9d_byte_range_a0_bf_sfx;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp346, sequence_f0_9e_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp347, sequence_f0_9e_byte_range_80_9f_sfx;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp348, r10000_10ffff_tmp349, r10000_10ffff_tmp350;
		BitBlock byte_range_97_bf, r10000_10ffff_tmp351, r10000_10ffff_tmp352;
		BitBlock r10000_10ffff_tmp353, byte_range_a4_b7;
		BitBlock sequence_f0_9e_byte_range_a4_b7, r10000_10ffff_tmp354;
		BitBlock sequence_f0_9e_byte_range_a4_b7_sfx, sequence_f0_9e_b8;
		BitBlock sequence_f0_9e_b8_adv, r10000_10ffff_tmp355, r10000_10ffff_tmp356;
		BitBlock r10000_10ffff_tmp357, r10000_10ffff_tmp358, byte_range_a5_a6;
		BitBlock r10000_10ffff_tmp359, r10000_10ffff_tmp360, r10000_10ffff_tmp361;
		BitBlock r10000_10ffff_tmp362, r10000_10ffff_tmp363, r10000_10ffff_tmp364;
		BitBlock sequence_f0_9e_b9, sequence_f0_9e_b9_adv, r10000_10ffff_tmp365;
		BitBlock r10000_10ffff_tmp366, r10000_10ffff_tmp367, r10000_10ffff_tmp368;
		BitBlock r10000_10ffff_tmp369, r10000_10ffff_tmp370, r10000_10ffff_tmp371;
		BitBlock r10000_10ffff_tmp372, r10000_10ffff_tmp373, byte_range_95_96;
		BitBlock r10000_10ffff_tmp374, r10000_10ffff_tmp375, r10000_10ffff_tmp376;
		BitBlock r10000_10ffff_tmp377, r10000_10ffff_tmp378, r10000_10ffff_tmp379;
		BitBlock r10000_10ffff_tmp380, r10000_10ffff_tmp381, r10000_10ffff_tmp382;
		BitBlock r10000_10ffff_tmp383, r10000_10ffff_tmp384, r10000_10ffff_tmp385;
		BitBlock r10000_10ffff_tmp386, sequence_f0_9e_ba, sequence_f0_9e_ba_adv;
		BitBlock r10000_10ffff_tmp387, r10000_10ffff_tmp388, byte_range_9c_a0;
		BitBlock r10000_10ffff_tmp389, r10000_10ffff_tmp390, r10000_10ffff_tmp391;
		BitBlock r10000_10ffff_tmp392, sequence_f0_9e_bb, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp393, r10000_10ffff_tmp394;
		BitBlock sequence_f0_9e_byte_range_bc_bf, r10000_10ffff_tmp395;
		BitBlock sequence_f0_9e_byte_range_bc_bf_sfx, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp396, sequence_f0_9f_80, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_80_adv, r10000_10ffff_tmp397, sequence_f0_9f_82;
		BitBlock sequence_f0_9f_82_adv, r10000_10ffff_tmp398, r10000_10ffff_tmp399;
		BitBlock r10000_10ffff_tmp400, byte_range_af_b0, r10000_10ffff_tmp401;
		BitBlock sequence_f0_9f_83, sequence_f0_9f_83_adv, r10000_10ffff_tmp402;
		BitBlock r10000_10ffff_tmp403, r10000_10ffff_tmp404, sequence_f0_9f_84;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp405, r10000_10ffff_tmp406;
		BitBlock sequence_f0_9f_85, sequence_f0_9f_85_adv, r10000_10ffff_tmp407;
		BitBlock sequence_f0_9f_86, r10000_10ffff_tmp408, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp409, sequence_f0_9f_87, r10000_10ffff_tmp410;
		BitBlock byte_range_80_a5, sequence_f0_9f_87_adv, r10000_10ffff_tmp411;
		BitBlock sequence_f0_9f_88, byte_range_83_8f, sequence_f0_9f_88_adv;
		BitBlock r10000_10ffff_tmp412, r10000_10ffff_tmp413, sequence_f0_9f_89;
		BitBlock sequence_f0_9f_89_adv, r10000_10ffff_tmp414, r10000_10ffff_tmp415;
		BitBlock sequence_f0_9f_byte_range_8a_8b, r10000_10ffff_tmp416;
		BitBlock sequence_f0_9f_byte_range_8a_8b_sfx, sequence_f0_9f_8c;
		BitBlock sequence_f0_9f_8c_adv, r10000_10ffff_tmp417, sequence_f0_9f_8d;
		BitBlock sequence_f0_9f_8d_adv, r10000_10ffff_tmp418, sequence_f0_9f_8f;
		BitBlock r10000_10ffff_tmp419, r10000_10ffff_tmp420, byte_range_8f_93;
		BitBlock sequence_f0_9f_8f_adv, r10000_10ffff_tmp421, r10000_10ffff_tmp422;
		BitBlock sequence_f0_9f_93, sequence_f0_9f_93_adv, r10000_10ffff_tmp423;
		BitBlock sequence_f0_9f_95, sequence_f0_9f_95_adv, r10000_10ffff_tmp424;
		BitBlock r10000_10ffff_tmp425, sequence_f0_9f_96, sequence_f0_9f_96_adv;
		BitBlock r10000_10ffff_tmp426, sequence_f0_9f_99, byte_range_83_84;
		BitBlock sequence_f0_9f_99_adv, r10000_10ffff_tmp427, sequence_f0_9f_9b;
		BitBlock byte_range_90_9f, sequence_f0_9f_9b_adv, r10000_10ffff_tmp428;
		BitBlock r10000_10ffff_tmp429, r10000_10ffff_tmp430, sequence_f0_9f_9d;
		BitBlock sequence_f0_9f_9d_adv, r10000_10ffff_tmp431, sequence_f0_9f_9f;
		BitBlock r10000_10ffff_tmp432, r10000_10ffff_tmp433, byte_range_95_bf;
		BitBlock sequence_f0_9f_9f_adv, r10000_10ffff_tmp434, sequence_f0_9f_a0;
		BitBlock sequence_f0_9f_a0_adv, r10000_10ffff_tmp435, sequence_f0_9f_a1;
		BitBlock sequence_f0_9f_a1_adv, r10000_10ffff_tmp436, r10000_10ffff_tmp437;
		BitBlock r10000_10ffff_tmp438, sequence_f0_9f_a2, sequence_f0_9f_a2_adv;
		BitBlock r10000_10ffff_tmp439, r10000_10ffff_tmp440, byte_range_ae_bf;
		BitBlock r10000_10ffff_tmp441, r10000_10ffff_tmp442, r10000_10ffff_tmp443;
		BitBlock byte_range_a3_bf, sequence_f0_9f_byte_range_a3_bf;
		BitBlock r10000_10ffff_tmp444, sequence_f0_9f_byte_range_a3_bf_sfx;
		BitBlock sequence_f0_aa, r10000_10ffff_tmp445, sequence_f0_aa_9b;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b_adv, r10000_10ffff_tmp446;
		BitBlock sequence_f0_ab, r10000_10ffff_tmp447, sequence_f0_ab_9c;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_9c_adv, r10000_10ffff_tmp448;
		BitBlock sequence_f0_ab_a0, sequence_f0_ab_a0_adv, r10000_10ffff_tmp449;
		BitBlock sequence_f0_ab_byte_range_a1_bf, r10000_10ffff_tmp450;
		BitBlock sequence_f0_ab_byte_range_a1_bf_sfx, byte_range_ac_ae;
		BitBlock byte_f0_byte_range_ac_ae, r10000_10ffff_tmp451;
		BitBlock byte_f0_byte_range_ac_ae_sfx, r10000_10ffff_tmp452;
		BitBlock byte_f0_byte_range_ac_ae_sfx_sfx, sequence_f0_af;
		BitBlock r10000_10ffff_tmp453, sequence_f0_af_byte_range_80_9f;
		BitBlock r10000_10ffff_tmp454, sequence_f0_af_byte_range_80_9f_sfx;
		BitBlock sequence_f0_af_a8, sequence_f0_af_adv, sequence_f0_af_a8_adv;
		BitBlock r10000_10ffff_tmp455, byte_range_a9_bf;
		BitBlock sequence_f0_af_byte_range_a9_bf, r10000_10ffff_tmp456;
		BitBlock sequence_f0_af_byte_range_a9_bf_sfx, byte_f0_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp457, byte_f0_byte_range_b0_bf_sfx;
		BitBlock r10000_10ffff_tmp458, byte_f0_byte_range_b0_bf_sfx_sfx;
		BitBlock r10000_10ffff_tmp459, byte_range_f1_f2, r10000_10ffff_tmp460;
		BitBlock byte_range_f1_f2_sfx, r10000_10ffff_tmp461, byte_range_f1_f2_sfx_sfx;
		BitBlock r10000_10ffff_tmp462, byte_range_f1_f2_sfx_sfx_sfx, byte_f3;
		BitBlock r10000_10ffff_tmp463, byte_f3_byte_range_80_9f, r10000_10ffff_tmp464;
		BitBlock byte_f3_byte_range_80_9f_sfx, r10000_10ffff_tmp465;
		BitBlock byte_f3_byte_range_80_9f_sfx_sfx, sequence_f3_a0;
		BitBlock r10000_10ffff_tmp466, sequence_f3_a0_80, byte_f3_adv;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_80_adv, r10000_10ffff_tmp467;
		BitBlock byte_range_82_9f, r10000_10ffff_tmp468, r10000_10ffff_tmp469;
		BitBlock byte_range_82_83, sequence_f3_a0_byte_range_82_83;
		BitBlock r10000_10ffff_tmp470, sequence_f3_a0_byte_range_82_83_sfx;
		BitBlock sequence_f3_a0_87, sequence_f3_a0_87_adv, r10000_10ffff_tmp471;
		BitBlock r10000_10ffff_tmp472, byte_range_88_bf;
		BitBlock sequence_f3_a0_byte_range_88_bf, r10000_10ffff_tmp473;
		BitBlock sequence_f3_a0_byte_range_88_bf_sfx, byte_f3_byte_range_a1_bf;
		BitBlock r10000_10ffff_tmp474, byte_f3_byte_range_a1_bf_sfx;
		BitBlock r10000_10ffff_tmp475, byte_f3_byte_range_a1_bf_sfx_sfx, byte_f4;
		BitBlock r10000_10ffff_tmp476, byte_f4_byte_range_80_8f, r10000_10ffff_tmp477;
		BitBlock byte_f4_byte_range_80_8f_sfx, r10000_10ffff_tmp478;
		BitBlock byte_f4_byte_range_80_8f_sfx_sfx;




        struct_sc_Zzzz.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 335))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 11))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp2 = simd_andc(r370_3ff_tmp1, basis_bits.bit_6);
                byte_range_b8_b9 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp3 = simd_and(byte_cd_adv, byte_range_b8_b9);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r370_3ff_tmp3);
                r370_3ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp5 = simd_and(r100_3ff_tmp1, r370_3ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_andc(r100_3ff_tmp4, r80_7ff_tmp1);
                byte_range_80_83 = simd_andc(r370_3ff_tmp6, r80_7ff_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(1), byte_ce_adv));
                r370_3ff_tmp7 = simd_and(byte_ce_adv, byte_range_80_83);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp1, r370_3ff_tmp8);
                byte_8b = simd_and(r370_3ff_tmp6, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(byte_ce_adv, byte_8b);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r370_3ff_tmp10);
                byte_8d = simd_and(r370_3ff_tmp6, r100_3ff_tmp3);
                r370_3ff_tmp11 = simd_and(byte_ce_adv, byte_8d);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp13 = simd_and(r100_3ff_tmp4, r370_3ff_tmp12);
                r370_3ff_tmp14 = simd_andc(r370_3ff_tmp4, r80_7ff_tmp3);
                byte_a2 = simd_and(r370_3ff_tmp13, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_and(byte_ce_adv, byte_a2);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r370_3ff_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 4))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp5, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(2), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_80_8f);
              r400_5ff_tmp8 = simd_or(byte_range_d4_d5, r400_5ff_tmp7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(3, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp5, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(3), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp5, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp7);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(4, 1))) {
                  r530_58f_tmp1 = simd_or(r80_7ff_tmp3, r500_58f_tmp1);
                  byte_b0 = simd_andc(byte_range_b0_bf, r530_58f_tmp1);
                  byte_d4_adv = r500_58f_tmp4;
                  r530_58f_tmp2 = simd_and(byte_d4_adv, byte_b0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r530_58f_tmp2);
                  r530_58f_tmp3 = simd_and(r400_5ff_tmp5, r80_7ff_tmp4);
                  r530_58f_tmp4 = simd_or(basis_bits.bit_5, r500_58f_tmp1);
                  r530_58f_tmp5 = simd_not(r530_58f_tmp4);
                  r530_58f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r530_58f_tmp7 = simd_and(basis_bits.bit_5, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_or(simd_and(basis_bits.bit_4, r530_58f_tmp5), simd_andc(r530_58f_tmp7, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r530_58f_tmp3, r530_58f_tmp8);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(4), byte_d5_adv));
                  r530_58f_tmp9 = simd_and(byte_d5_adv, byte_range_97_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r530_58f_tmp9);
                  r530_58f_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r530_58f_tmp11 = simd_and(r400_5ff_tmp5, r530_58f_tmp10);
                  byte_a0 = simd_andc(r530_58f_tmp11, r530_58f_tmp1);
                  r530_58f_tmp12 = simd_and(byte_d5_adv, byte_a0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r530_58f_tmp12);
                  r530_58f_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp14 = simd_andc(r530_58f_tmp13, r500_58f_tmp1);
                  byte_88 = simd_and(byte_range_80_8f, r530_58f_tmp14);
                  byte_d6_adv = r400_5ff_tmp6;
                  r530_58f_tmp15 = simd_and(byte_d6_adv, byte_88);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r530_58f_tmp15);
                  r530_58f_tmp16 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r530_58f_tmp17 = simd_not(r500_58f_tmp1);
                  r530_58f_tmp18 = simd_or(simd_and(basis_bits.bit_5, r530_58f_tmp17), simd_andc(r530_58f_tmp6, basis_bits.bit_5));
                  byte_range_8b_8c = simd_and(r530_58f_tmp16, r530_58f_tmp18);
                  r530_58f_tmp19 = simd_and(byte_d6_adv, byte_range_8b_8c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r530_58f_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 2);
              }
              byte_range_90_bf = simd_and(r400_5ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp6, byte_range_90_bf);
              r400_5ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp11 = simd_and(r400_5ff_tmp1, r400_5ff_tmp10);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp11);
              r400_5ff_tmp12 = simd_or(r400_5ff_tmp9, byte_d7);
              if ((bitblock::any(r400_5ff_tmp12) || carryQ.CarryTest(5, 1))) {
                r590_5ff_tmp1 = simd_and(r400_5ff_tmp5, r80_7ff_tmp4);
                r590_5ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp3 = simd_or(r80_7ff_tmp3, r590_5ff_tmp2);
                byte_90 = simd_andc(r590_5ff_tmp1, r590_5ff_tmp3);
                byte_d6_adv = r400_5ff_tmp6;
                r590_5ff_tmp4 = simd_and(byte_d6_adv, byte_90);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r590_5ff_tmp4);
                byte_range_88_8f = simd_and(byte_range_80_8f, basis_bits.bit_4);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(5), byte_d7_adv));
                r590_5ff_tmp5 = simd_and(byte_d7_adv, byte_range_88_8f);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r590_5ff_tmp5);
                r590_5ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp7 = simd_and(r400_5ff_tmp5, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_and(r590_5ff_tmp7, basis_bits.bit_4);
                r590_5ff_tmp9 = simd_or(basis_bits.bit_5, r400_5ff_tmp10);
                byte_range_ab_af = simd_and(r590_5ff_tmp8, r590_5ff_tmp9);
                r590_5ff_tmp10 = simd_and(byte_d7_adv, byte_range_ab_af);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r590_5ff_tmp10);
                r590_5ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp12 = simd_and(r400_5ff_tmp5, r590_5ff_tmp11);
                r590_5ff_tmp13 = simd_and(basis_bits.bit_5, r590_5ff_tmp2);
                r590_5ff_tmp14 = simd_or(basis_bits.bit_4, r590_5ff_tmp13);
                byte_range_b5_bf = simd_and(r590_5ff_tmp12, r590_5ff_tmp14);
                r590_5ff_tmp15 = simd_and(byte_d7_adv, byte_range_b5_bf);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r590_5ff_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 4);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(6, 1))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp5, r600_6ff_tmp6);
              byte_9d = simd_and(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(6), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_9d);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r600_6ff_tmp8);
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 1);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(7, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(7), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(8, 1))) {
                r700_74f_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp2 = simd_and(r80_7ff_tmp7, r700_74f_tmp1);
                byte_8e = simd_and(byte_range_80_8f, r700_74f_tmp2);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(8), byte_dc_adv));
                r700_74f_tmp3 = simd_and(byte_dc_adv, byte_8e);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r700_74f_tmp3);
                r700_74f_tmp4 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                r700_74f_tmp5 = simd_not(r700_77f_tmp1);
                r700_74f_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp7 = simd_or(simd_and(basis_bits.bit_5, r700_74f_tmp5), simd_andc(r700_74f_tmp6, basis_bits.bit_5));
                byte_range_8b_8c = simd_and(r700_74f_tmp4, r700_74f_tmp7);
                byte_dd_adv = r700_77f_tmp6;
                r700_74f_tmp8 = simd_and(byte_dd_adv, byte_range_8b_8c);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r700_74f_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(9, 2))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(9, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r780_7bf_tmp3 = simd_and(r780_7bf_tmp1, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp5 = simd_or(basis_bits.bit_4, r780_7bf_tmp4);
                byte_range_b2_bf = simd_and(r780_7bf_tmp3, r780_7bf_tmp5);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(9), byte_de_adv));
                r780_7bf_tmp6 = simd_and(byte_de_adv, byte_range_b2_bf);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r780_7bf_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
              r780_7ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp4 = simd_and(r80_7ff_tmp7, r780_7ff_tmp3);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(10, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r7c0_7ff_tmp3 = simd_and(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(r7c0_7ff_tmp3, basis_bits.bit_4);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_5, r780_7ff_tmp3);
                byte_range_bb_bf = simd_and(r7c0_7ff_tmp4, r7c0_7ff_tmp5);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(10), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, byte_range_bb_bf);
                struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r7c0_7ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 11);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(11, 143))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(11), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(12, 98))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(12, 67))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(12, 30))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r800_fff_tmp1, r800_fff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(13), sequence_e0_a0_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a0_adv, byte_range_ae_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp5);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_and(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp9 = simd_and(r800_fff_tmp3, r800_fff_tmp8);
                  byte_bf = simd_and(r800_fff_tmp7, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(sequence_e0_a0_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp12 = simd_andc(r800_fff_tmp11, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp5, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_andc(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r800_fff_tmp14, r800_fff_tmp15);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(14), sequence_e0_a1_adv));
                  r800_fff_tmp16 = simd_and(sequence_e0_a1_adv, byte_range_9c_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_and(basis_bits.bit_3, r800_fff_tmp9);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_2, r800_fff_tmp17);
                  byte_range_9f_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(sequence_e0_a1_adv, byte_range_9f_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp21 = simd_andc(r800_fff_tmp20, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(15), sequence_e0_a2_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_a2_adv, byte_range_80_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_or(basis_bits.bit_5, r800_fff_tmp8);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_4, r800_fff_tmp23);
                  byte_range_b3_bf = simd_and(r800_fff_tmp7, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_a2_adv, byte_range_b3_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp8, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_2, r800_fff_tmp27);
                  byte_range_80_a3 = simd_andc(r800_ffff_tmp5, r800_fff_tmp28);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(16), sequence_e0_a3_adv));
                  r800_fff_tmp29 = simd_and(sequence_e0_a3_adv, byte_range_80_a3);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(r800_ffff_tmp2, r800_fff_tmp20);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp30);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_andc(r800_ffff_tmp5, r800_fff_tmp31);
                  byte_84 = simd_and(r800_fff_tmp32, r800_ffff_tmp4);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(17), sequence_e0_a6_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_a6_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_and(r800_fff_tmp32, r800_fff_tmp3);
                  r800_fff_tmp35 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_8d_8e = simd_and(r800_fff_tmp34, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(sequence_e0_a6_adv, byte_range_8d_8e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_andc(r800_fff_tmp14, r800_ffff_tmp1);
                  byte_range_91_92 = simd_and(r800_fff_tmp37, r800_fff_tmp35);
                  r800_fff_tmp38 = simd_and(sequence_e0_a6_adv, byte_range_91_92);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp40 = simd_and(r800_fff_tmp39, r800_fff_tmp11);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_and(sequence_e0_a6_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp41);
                  byte_b1 = simd_and(r800_fff_tmp7, r800_fff_tmp12);
                  r800_fff_tmp42 = simd_and(sequence_e0_a6_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp42);
                  r800_fff_tmp43 = simd_andc(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp44 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp45 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp44), simd_andc(r800_fff_tmp8, basis_bits.bit_5));
                  byte_range_b3_b5 = simd_and(r800_fff_tmp43, r800_fff_tmp45);
                  r800_fff_tmp46 = simd_and(sequence_e0_a6_adv, byte_range_b3_b5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp39, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r800_fff_tmp7, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(sequence_e0_a6_adv, byte_range_ba_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp2, r800_fff_tmp8);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp49);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp32, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r800_fff_tmp50, r800_fff_tmp35);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(18), sequence_e0_a7_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_a7_adv, byte_range_85_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp32, r800_fff_tmp39);
                  byte_range_89_8a = simd_and(r800_fff_tmp52, r800_fff_tmp35);
                  r800_fff_tmp53 = simd_and(sequence_e0_a7_adv, byte_range_89_8a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(basis_bits.bit_5, r800_fff_tmp8);
                  r800_fff_tmp55 = simd_or(basis_bits.bit_4, r800_fff_tmp54);
                  r800_fff_tmp56 = simd_not(r800_fff_tmp55);
                  r800_fff_tmp57 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp56), simd_andc(r800_fff_tmp9, basis_bits.bit_3));
                  byte_range_8f_96 = simd_and(byte_range_80_9f, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(sequence_e0_a7_adv, byte_range_8f_96);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp58);
                  byte_range_98_9b = simd_and(r800_fff_tmp14, r800_fff_tmp39);
                  r800_fff_tmp59 = simd_and(sequence_e0_a7_adv, byte_range_98_9b);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_and(r800_fff_tmp3, r800_fff_tmp20);
                  byte_9e = simd_and(r800_fff_tmp14, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(sequence_e0_a7_adv, byte_9e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp61);
                  r800_fff_tmp62 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp62);
                  r800_fff_tmp63 = simd_and(sequence_e0_a7_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp63);
                  byte_range_bc_bf = simd_and(r800_fff_tmp7, r800_fff_tmp3);
                  r800_fff_tmp64 = simd_and(sequence_e0_a7_adv, byte_range_bc_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_andc(r800_fff_tmp39, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp65);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  byte_80 = simd_andc(r800_fff_tmp32, r800_1fff_tmp1);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(19), sequence_e0_a8_adv));
                  r800_fff_tmp66 = simd_and(sequence_e0_a8_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(sequence_e0_a8_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp67);
                  r800_fff_tmp68 = simd_and(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp69 = simd_xor(basis_bits.bit_5, r800_fff_tmp8);
                  byte_range_8b_8e = simd_and(r800_fff_tmp68, r800_fff_tmp69);
                  r800_fff_tmp70 = simd_and(sequence_e0_a8_adv, byte_range_8b_8e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp70);
                  r800_fff_tmp71 = simd_and(sequence_e0_a8_adv, byte_range_91_92);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp71);
                  r800_fff_tmp72 = simd_and(sequence_e0_a8_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(sequence_e0_a8_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp73);
                  byte_b4 = simd_and(r800_fff_tmp7, r800_ffff_tmp4);
                  r800_fff_tmp74 = simd_and(sequence_e0_a8_adv, byte_b4);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp74);
                  byte_b7 = simd_and(r800_fff_tmp7, r800_fff_tmp49);
                  r800_fff_tmp75 = simd_and(sequence_e0_a8_adv, byte_b7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp75);
                  r800_fff_tmp76 = simd_and(sequence_e0_a8_adv, byte_range_ba_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(r800_fff_tmp3, r800_fff_tmp11);
                  byte_bd = simd_and(r800_fff_tmp7, r800_fff_tmp77);
                  r800_fff_tmp78 = simd_and(sequence_e0_a8_adv, byte_bd);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp78);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp79 = simd_andc(r800_fff_tmp32, basis_bits.bit_4);
                  byte_range_83_86 = simd_and(r800_fff_tmp79, r800_fff_tmp69);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(20), sequence_e0_a9_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_a9_adv, byte_range_83_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(sequence_e0_a9_adv, byte_range_89_8a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp81);
                  r800_fff_tmp82 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp83 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp82), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(byte_range_80_9f, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(sequence_e0_a9_adv, byte_range_8e_90);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp84);
                  r800_fff_tmp85 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp86 = simd_not(r800_fff_tmp85);
                  r800_fff_tmp87 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp86), simd_andc(r800_fff_tmp87, basis_bits.bit_4));
                  byte_range_92_98 = simd_and(r800_fff_tmp14, r800_fff_tmp88);
                  r800_fff_tmp89 = simd_and(sequence_e0_a9_adv, byte_range_92_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp89);
                  byte_9d = simd_and(r800_fff_tmp14, r800_fff_tmp77);
                  r800_fff_tmp90 = simd_and(sequence_e0_a9_adv, byte_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp90);
                  r800_fff_tmp91 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp92 = simd_or(basis_bits.bit_4, r800_fff_tmp91);
                  r800_fff_tmp93 = simd_or(basis_bits.bit_3, r800_fff_tmp92);
                  r800_fff_tmp94 = simd_not(r800_fff_tmp93);
                  r800_fff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp94), simd_andc(r800_fff_tmp17, basis_bits.bit_2));
                  byte_range_9f_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp95);
                  r800_fff_tmp96 = simd_and(sequence_e0_a9_adv, byte_range_9f_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp96);
                  byte_range_b6_bf = simd_and(r800_fff_tmp7, r800_fff_tmp92);
                  r800_fff_tmp97 = simd_and(sequence_e0_a9_adv, byte_range_b6_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp39, r800_fff_tmp20);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp98);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(21), sequence_e0_aa_adv));
                  r800_fff_tmp99 = simd_and(sequence_e0_aa_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(sequence_e0_aa_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp100);
                  byte_8e = simd_and(r800_fff_tmp32, r800_fff_tmp60);
                  r800_fff_tmp101 = simd_and(sequence_e0_aa_adv, byte_8e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp101);
                  byte_92 = simd_and(r800_fff_tmp14, r800_fff_tmp21);
                  r800_fff_tmp102 = simd_and(sequence_e0_aa_adv, byte_92);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_and(sequence_e0_aa_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp103);
                  r800_fff_tmp104 = simd_and(sequence_e0_aa_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp104);
                  r800_fff_tmp105 = simd_and(sequence_e0_aa_adv, byte_b4);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp105);
                  r800_fff_tmp106 = simd_and(sequence_e0_aa_adv, byte_range_ba_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp39, r800_fff_tmp8);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp107);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  byte_86 = simd_and(r800_fff_tmp32, r800_fff_tmp30);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(22), sequence_e0_ab_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_ab_adv, byte_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp108);
                  byte_8a = simd_and(r800_fff_tmp32, r800_fff_tmp98);
                  r800_fff_tmp109 = simd_and(sequence_e0_ab_adv, byte_8a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp109);
                  byte_range_8e_8f = simd_and(r800_fff_tmp32, r800_fff_tmp4);
                  r800_fff_tmp110 = simd_and(sequence_e0_ab_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp110);
                  r800_fff_tmp111 = simd_or(basis_bits.bit_4, r800_fff_tmp85);
                  byte_range_91_9f = simd_and(r800_fff_tmp14, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(sequence_e0_ab_adv, byte_range_91_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp112);
                  r800_fff_tmp113 = simd_and(sequence_e0_ab_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp113);
                  r800_fff_tmp114 = simd_or(basis_bits.bit_4, r800_fff_tmp87);
                  byte_range_b2_bf = simd_and(r800_fff_tmp7, r800_fff_tmp114);
                  r800_fff_tmp115 = simd_and(sequence_e0_ab_adv, byte_range_b2_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp115);
                  r800_fff_tmp116 = simd_andc(r800_fff_tmp3, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp116);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(23), sequence_e0_ac_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_ac_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(sequence_e0_ac_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp118);
                  r800_fff_tmp119 = simd_and(sequence_e0_ac_adv, byte_range_8d_8e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp119);
                  r800_fff_tmp120 = simd_and(sequence_e0_ac_adv, byte_range_91_92);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp120);
                  r800_fff_tmp121 = simd_and(sequence_e0_ac_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp121);
                  r800_fff_tmp122 = simd_and(sequence_e0_ac_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp122);
                  r800_fff_tmp123 = simd_and(sequence_e0_ac_adv, byte_b4);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp123);
                  r800_fff_tmp124 = simd_and(sequence_e0_ac_adv, byte_range_ba_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp124);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp77);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(24), sequence_e0_ad_adv));
                  r800_fff_tmp125 = simd_and(sequence_e0_ad_adv, byte_range_85_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp125);
                  r800_fff_tmp126 = simd_and(sequence_e0_ad_adv, byte_range_89_8a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp126);
                  r800_fff_tmp127 = simd_not(r800_fff_tmp92);
                  r800_fff_tmp128 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp127), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_95 = simd_and(byte_range_80_9f, r800_fff_tmp128);
                  r800_fff_tmp129 = simd_and(sequence_e0_ad_adv, byte_range_8e_95);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp129);
                  r800_fff_tmp130 = simd_and(sequence_e0_ad_adv, byte_range_98_9b);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp130);
                  r800_fff_tmp131 = simd_and(sequence_e0_ad_adv, byte_9e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp131);
                  r800_fff_tmp132 = simd_and(sequence_e0_ad_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp132);
                  byte_range_b8_bf = simd_and(r800_fff_tmp7, basis_bits.bit_4);
                  r800_fff_tmp133 = simd_and(sequence_e0_ad_adv, byte_range_b8_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp133);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp60);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  byte_range_80_81 = simd_andc(r800_fff_tmp32, r800_4dff_tmp1);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(25), sequence_e0_ae_adv));
                  r800_fff_tmp134 = simd_and(sequence_e0_ae_adv, byte_range_80_81);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp134);
                  r800_fff_tmp135 = simd_and(sequence_e0_ae_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp135);
                  byte_range_8b_8d = simd_and(r800_fff_tmp68, r800_fff_tmp45);
                  r800_fff_tmp136 = simd_and(sequence_e0_ae_adv, byte_range_8b_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp136);
                  byte_91 = simd_and(r800_fff_tmp14, r800_fff_tmp12);
                  r800_fff_tmp137 = simd_and(sequence_e0_ae_adv, byte_91);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp137);
                  r800_fff_tmp138 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp86), simd_andc(r800_fff_tmp91, basis_bits.bit_4));
                  byte_range_96_98 = simd_and(r800_fff_tmp14, r800_fff_tmp138);
                  r800_fff_tmp139 = simd_and(sequence_e0_ae_adv, byte_range_96_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp139);
                  byte_9b = simd_and(r800_fff_tmp14, r800_fff_tmp107);
                  r800_fff_tmp140 = simd_and(sequence_e0_ae_adv, byte_9b);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp140);
                  r800_fff_tmp141 = simd_and(sequence_e0_ae_adv, byte_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp141);
                  r800_fff_tmp142 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  byte_range_a0_a2 = simd_andc(r800_fff_tmp142, r800_fff_tmp8);
                  r800_fff_tmp143 = simd_and(sequence_e0_ae_adv, byte_range_a0_a2);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp143);
                  r800_fff_tmp144 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  byte_range_a5_a7 = simd_and(r800_fff_tmp144, r800_ffff_tmp3);
                  r800_fff_tmp145 = simd_and(sequence_e0_ae_adv, byte_range_a5_a7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp145);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_ab_ad = simd_and(r800_fff_tmp146, r800_fff_tmp45);
                  r800_fff_tmp147 = simd_and(sequence_e0_ae_adv, byte_range_ab_ad);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp147);
                  r800_fff_tmp148 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_ba_bd = simd_and(byte_range_b8_bf, r800_fff_tmp148);
                  r800_fff_tmp149 = simd_and(sequence_e0_ae_adv, byte_range_ba_bd);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp149);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp9);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_range_83_85 = simd_and(r800_fff_tmp79, r800_fff_tmp45);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(26), sequence_e0_af_adv));
                  r800_fff_tmp150 = simd_and(sequence_e0_af_adv, byte_range_83_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp150);
                  byte_89 = simd_and(r800_fff_tmp32, r800_fff_tmp40);
                  r800_fff_tmp151 = simd_and(sequence_e0_af_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(sequence_e0_af_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp152);
                  r800_fff_tmp153 = simd_andc(r800_fff_tmp14, basis_bits.bit_4);
                  r800_fff_tmp154 = simd_not(r800_fff_tmp8);
                  r800_fff_tmp155 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp154), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  byte_range_91_96 = simd_and(r800_fff_tmp153, r800_fff_tmp155);
                  r800_fff_tmp156 = simd_and(sequence_e0_af_adv, byte_range_91_96);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp156);
                  r800_fff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp94), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  byte_range_98_a5 = simd_and(r800_ffff_tmp5, r800_fff_tmp157);
                  r800_fff_tmp158 = simd_and(sequence_e0_af_adv, byte_range_98_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp158);
                  byte_range_bb_bf = simd_and(byte_range_b8_bf, r800_fff_tmp23);
                  r800_fff_tmp159 = simd_and(sequence_e0_af_adv, byte_range_bb_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp159);
                  byte_b0 = simd_andc(r800_fff_tmp7, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(27), sequence_e0_b0_adv));
                  r800_fff_tmp160 = simd_and(sequence_e0_b0_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp160);
                  byte_8d = simd_and(r800_fff_tmp32, r800_fff_tmp77);
                  r800_fff_tmp161 = simd_and(sequence_e0_b0_adv, byte_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp161);
                  r800_fff_tmp162 = simd_and(sequence_e0_b0_adv, byte_91);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp162);
                  r800_fff_tmp163 = simd_and(sequence_e0_b0_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp163);
                  r800_fff_tmp164 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp165 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp164), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(byte_range_b8_bf, r800_fff_tmp165);
                  r800_fff_tmp166 = simd_and(sequence_e0_b0_adv, byte_range_ba_bc);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp166);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp167 = simd_and(r800_ffff_tmp2, r800_fff_tmp11);
                  byte_85 = simd_and(r800_fff_tmp32, r800_fff_tmp167);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(28), sequence_e0_b1_adv));
                  r800_fff_tmp168 = simd_and(sequence_e0_b1_adv, byte_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp168);
                  r800_fff_tmp169 = simd_and(sequence_e0_b1_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp169);
                  r800_fff_tmp170 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp171 = simd_or(basis_bits.bit_4, r800_fff_tmp170);
                  r800_fff_tmp172 = simd_not(r800_fff_tmp171);
                  r800_fff_tmp173 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp172), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_94 = simd_and(byte_range_80_9f, r800_fff_tmp173);
                  r800_fff_tmp174 = simd_and(sequence_e0_b1_adv, byte_range_8e_94);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp174);
                  byte_97 = simd_and(r800_fff_tmp14, r800_fff_tmp49);
                  r800_fff_tmp175 = simd_and(sequence_e0_b1_adv, byte_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp175);
                  r800_fff_tmp176 = simd_and(r800_fff_tmp14, basis_bits.bit_4);
                  byte_range_9a_9f = simd_and(r800_fff_tmp176, r800_fff_tmp87);
                  r800_fff_tmp177 = simd_and(sequence_e0_b1_adv, byte_range_9a_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp177);
                  r800_fff_tmp178 = simd_and(sequence_e0_b1_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp178);
                  byte_range_b0_b7 = r800_fff_tmp43;
                  r800_fff_tmp179 = simd_and(sequence_e0_b1_adv, byte_range_b0_b7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp179);
                  byte_b2 = simd_and(r800_fff_tmp7, r800_fff_tmp21);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(29), sequence_e0_b2_adv));
                  r800_fff_tmp180 = simd_and(sequence_e0_b2_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp180);
                  r800_fff_tmp181 = simd_and(sequence_e0_b2_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp181);
                  r800_fff_tmp182 = simd_and(sequence_e0_b2_adv, byte_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp182);
                  r800_fff_tmp183 = simd_and(sequence_e0_b2_adv, byte_91);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp183);
                  r800_fff_tmp184 = simd_and(sequence_e0_b2_adv, byte_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp184);
                  r800_fff_tmp185 = simd_and(sequence_e0_b2_adv, byte_b4);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp185);
                  r800_fff_tmp186 = simd_and(sequence_e0_b2_adv, byte_range_ba_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp186);
                  byte_b3 = simd_and(r800_fff_tmp7, r800_fff_tmp26);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(30), sequence_e0_b3_adv));
                  r800_fff_tmp187 = simd_and(sequence_e0_b3_adv, byte_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp187);
                  r800_fff_tmp188 = simd_and(sequence_e0_b3_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp188);
                  r800_fff_tmp189 = simd_and(sequence_e0_b3_adv, byte_range_8e_94);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp189);
                  r800_fff_tmp190 = simd_not(r800_fff_tmp91);
                  r800_fff_tmp191 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp190), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  byte_range_97_9d = simd_and(r800_fff_tmp14, r800_fff_tmp191);
                  r800_fff_tmp192 = simd_and(sequence_e0_b3_adv, byte_range_97_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp192);
                  byte_9f = simd_and(r800_fff_tmp14, r800_fff_tmp9);
                  r800_fff_tmp193 = simd_and(sequence_e0_b3_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp193);
                  r800_fff_tmp194 = simd_and(sequence_e0_b3_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp194);
                  r800_fff_tmp195 = simd_and(sequence_e0_b3_adv, byte_b0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp195);
                  r800_fff_tmp196 = simd_and(sequence_e0_b3_adv, byte_range_b3_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp196);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(31), sequence_e0_b4_adv));
                  r800_fff_tmp197 = simd_and(sequence_e0_b4_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp197);
                  r800_fff_tmp198 = simd_and(sequence_e0_b4_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp198);
                  r800_fff_tmp199 = simd_and(sequence_e0_b4_adv, byte_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp199);
                  r800_fff_tmp200 = simd_and(sequence_e0_b4_adv, byte_91);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp200);
                  r800_fff_tmp201 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp164), simd_andc(r800_fff_tmp8, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(byte_range_b8_bf, r800_fff_tmp201);
                  r800_fff_tmp202 = simd_and(sequence_e0_b4_adv, byte_range_bb_bc);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp202);
                  byte_b5 = simd_and(r800_fff_tmp7, r800_fff_tmp167);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(32), sequence_e0_b5_adv));
                  r800_fff_tmp203 = simd_and(sequence_e0_b5_adv, byte_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp203);
                  r800_fff_tmp204 = simd_and(sequence_e0_b5_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp204);
                  r800_fff_tmp205 = simd_and(sequence_e0_b5_adv, byte_range_8f_96);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp205);
                  byte_range_98_9f = r800_fff_tmp176;
                  r800_fff_tmp206 = simd_and(sequence_e0_b5_adv, byte_range_98_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp206);
                  r800_fff_tmp207 = simd_and(sequence_e0_b5_adv, byte_range_a4_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp207);
                  byte_range_b6_b8 = simd_and(r800_fff_tmp7, r800_fff_tmp138);
                  r800_fff_tmp208 = simd_and(sequence_e0_b5_adv, byte_range_b6_b8);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp208);
                  byte_b6 = simd_and(r800_fff_tmp7, r800_fff_tmp30);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(33), sequence_e0_b6_adv));
                  r800_fff_tmp209 = simd_and(sequence_e0_b6_adv, byte_range_80_81);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp209);
                  r800_fff_tmp210 = simd_and(sequence_e0_b6_adv, byte_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp210);
                  r800_fff_tmp211 = simd_not(r800_fff_tmp87);
                  r800_fff_tmp212 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp211), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  byte_range_97_99 = simd_and(r800_fff_tmp14, r800_fff_tmp212);
                  r800_fff_tmp213 = simd_and(sequence_e0_b6_adv, byte_range_97_99);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp213);
                  r800_fff_tmp214 = simd_and(sequence_e0_b6_adv, byte_b2);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp214);
                  byte_bc = simd_and(r800_fff_tmp7, r800_fff_tmp116);
                  r800_fff_tmp215 = simd_and(sequence_e0_b6_adv, byte_bc);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp215);
                  byte_range_be_bf = simd_and(r800_fff_tmp7, r800_fff_tmp4);
                  r800_fff_tmp216 = simd_and(sequence_e0_b6_adv, byte_range_be_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp216);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_range_87_89 = simd_and(r800_fff_tmp32, r800_fff_tmp212);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(34), sequence_e0_b7_adv));
                  r800_fff_tmp217 = simd_and(sequence_e0_b7_adv, byte_range_87_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp217);
                  r800_fff_tmp218 = simd_and(sequence_e0_b7_adv, byte_range_8b_8e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp218);
                  byte_95 = simd_and(r800_fff_tmp14, r800_fff_tmp167);
                  r800_fff_tmp219 = simd_and(sequence_e0_b7_adv, byte_95);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp219);
                  r800_fff_tmp220 = simd_and(sequence_e0_b7_adv, byte_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp220);
                  r800_fff_tmp221 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  byte_range_a0_a5 = simd_andc(r800_fff_tmp221, r800_fff_tmp91);
                  r800_fff_tmp222 = simd_and(sequence_e0_b7_adv, byte_range_a0_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp222);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp7, r800_4dff_tmp1);
                  r800_fff_tmp223 = simd_and(sequence_e0_b7_adv, byte_range_b0_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp223);
                  byte_range_b5_bf = simd_and(r800_fff_tmp7, r800_fff_tmp171);
                  r800_fff_tmp224 = simd_and(sequence_e0_b7_adv, byte_range_b5_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp224);
                  byte_b8 = simd_and(r800_fff_tmp7, r800_fff_tmp65);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(35), sequence_e0_b8_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_b8_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp225);
                  byte_range_bb_be = simd_and(byte_range_b8_bf, r800_fff_tmp69);
                  r800_fff_tmp226 = simd_and(sequence_e0_b8_adv, byte_range_bb_be);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp226);
                  byte_b9 = simd_and(r800_fff_tmp7, r800_fff_tmp40);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp227 = simd_and(basis_bits.bit_3, r800_fff_tmp3);
                  r800_fff_tmp228 = simd_or(basis_bits.bit_2, r800_fff_tmp227);
                  byte_range_9c_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp228);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(36), sequence_e0_b9_adv));
                  r800_fff_tmp229 = simd_and(sequence_e0_b9_adv, byte_range_9c_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp229);
                  byte_ba = simd_and(r800_fff_tmp7, r800_fff_tmp98);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(37), sequence_e0_ba_adv));
                  r800_fff_tmp230 = simd_and(sequence_e0_ba_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp230);
                  byte_83 = simd_and(r800_fff_tmp32, r800_fff_tmp26);
                  r800_fff_tmp231 = simd_and(sequence_e0_ba_adv, byte_83);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp231);
                  r800_fff_tmp232 = simd_and(sequence_e0_ba_adv, byte_range_85_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp232);
                  r800_fff_tmp233 = simd_and(sequence_e0_ba_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp233);
                  byte_range_8b_8c = simd_and(r800_fff_tmp68, r800_fff_tmp201);
                  r800_fff_tmp234 = simd_and(sequence_e0_ba_adv, byte_range_8b_8c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp234);
                  r800_fff_tmp235 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp236 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp235), simd_andc(r800_fff_tmp4, basis_bits.bit_3));
                  byte_range_8e_93 = simd_and(byte_range_80_9f, r800_fff_tmp236);
                  r800_fff_tmp237 = simd_and(sequence_e0_ba_adv, byte_range_8e_93);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp237);
                  byte_98 = simd_and(r800_fff_tmp14, r800_fff_tmp65);
                  r800_fff_tmp238 = simd_and(sequence_e0_ba_adv, byte_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp238);
                  r800_fff_tmp239 = simd_and(sequence_e0_ba_adv, byte_a0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp239);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  r800_fff_tmp240 = simd_and(sequence_e0_ba_adv, byte_a4);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp240);
                  r800_fff_tmp241 = simd_and(sequence_e0_ba_adv, byte_a6);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp241);
                  r800_fff_tmp242 = simd_andc(r800_fff_tmp39, basis_bits.bit_6);
                  byte_range_a8_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp242);
                  r800_fff_tmp243 = simd_and(sequence_e0_ba_adv, byte_range_a8_a9);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp243);
                  r800_fff_tmp244 = simd_and(sequence_e0_ba_adv, byte_ac);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp244);
                  r800_fff_tmp245 = simd_and(sequence_e0_ba_adv, byte_ba);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp245);
                  r800_fff_tmp246 = simd_and(sequence_e0_ba_adv, byte_range_be_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp246);
                  byte_bb = simd_and(r800_fff_tmp7, r800_fff_tmp107);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(38), sequence_e0_bb_adv));
                  r800_fff_tmp247 = simd_and(sequence_e0_bb_adv, byte_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp247);
                  byte_87 = simd_and(r800_fff_tmp32, r800_fff_tmp49);
                  r800_fff_tmp248 = simd_and(sequence_e0_bb_adv, byte_87);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp248);
                  r800_fff_tmp249 = simd_and(sequence_e0_bb_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp249);
                  byte_range_9a_9b = simd_and(r800_fff_tmp14, r800_fff_tmp47);
                  r800_fff_tmp250 = simd_and(sequence_e0_bb_adv, byte_range_9a_9b);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp250);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp251 = simd_and(sequence_e0_bb_adv, byte_range_a0_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp251);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  byte_88 = simd_and(r800_fff_tmp32, r800_fff_tmp65);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(39), sequence_e0_bd_adv));
                  r800_fff_tmp252 = simd_and(sequence_e0_bd_adv, byte_88);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp252);
                  r800_fff_tmp253 = simd_and(r800_fff_tmp3, r800_ffff_tmp3);
                  r800_fff_tmp254 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp82), simd_andc(r800_fff_tmp253, basis_bits.bit_3));
                  byte_range_ad_b0 = simd_and(byte_range_a0_bf, r800_fff_tmp254);
                  r800_fff_tmp255 = simd_and(sequence_e0_bd_adv, byte_range_ad_b0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp255);
                  byte_be = simd_and(r800_fff_tmp7, r800_fff_tmp60);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(40), sequence_e0_be_adv));
                  r800_fff_tmp256 = simd_and(sequence_e0_be_adv, byte_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp256);
                  r800_fff_tmp257 = simd_and(sequence_e0_be_adv, byte_bd);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp257);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(41), sequence_e0_bf_adv));
                  r800_fff_tmp258 = simd_and(sequence_e0_bf_adv, byte_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp258);
                  r800_fff_tmp259 = simd_and(basis_bits.bit_4, r800_fff_tmp23);
                  r800_fff_tmp260 = simd_and(basis_bits.bit_3, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(basis_bits.bit_2, r800_fff_tmp260);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r800_fff_tmp261);
                  r800_fff_tmp262 = simd_and(sequence_e0_bf_adv, byte_range_9b_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r800_fff_tmp262);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 30);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(42, 37))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(42), r1000_1fff_tmp5));
                  sequence_e1_83 = simd_and(r1000_1fff_tmp5, byte_83);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_86 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(43), sequence_e1_83_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_83_adv, byte_86);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_88_8c = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp10);
                  r1000_1fff_tmp11 = simd_and(sequence_e1_83_adv, byte_range_88_8c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp12, basis_bits.bit_6);
                  byte_range_8e_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(sequence_e1_83_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp14);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp15, r800_1fff_tmp2);
                  byte_89 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp16);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(44), sequence_e1_89_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_89_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(sequence_e1_89_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp3);
                  byte_97 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(sequence_e1_89_adv, byte_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp22);
                  byte_99 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp16);
                  r1000_1fff_tmp23 = simd_and(sequence_e1_89_adv, byte_99);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp23);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp13);
                  r1000_1fff_tmp24 = simd_and(sequence_e1_89_adv, byte_range_9e_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp6);
                  byte_8a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp25);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(45), sequence_e1_8a_adv));
                  r1000_1fff_tmp26 = simd_and(sequence_e1_8a_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp26);
                  r1000_1fff_tmp27 = simd_and(sequence_e1_8a_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp28);
                  byte_b1 = simd_and(r1000_1fff_tmp29, r800_1fff_tmp3);
                  r1000_1fff_tmp30 = simd_and(sequence_e1_8a_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp31);
                  r1000_1fff_tmp32 = simd_and(sequence_e1_8a_adv, byte_range_b6_b7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp32);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp3);
                  byte_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_and(sequence_e1_8a_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp3);
                  byte_8b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(46), sequence_e1_8b_adv));
                  r1000_1fff_tmp36 = simd_and(sequence_e1_8b_adv, byte_81);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp36);
                  byte_range_86_87 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp31);
                  r1000_1fff_tmp37 = simd_and(sequence_e1_8b_adv, byte_range_86_87);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_and(sequence_e1_8b_adv, byte_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp12, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  byte_91 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp3);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(47), sequence_e1_8c_adv));
                  r1000_1fff_tmp40 = simd_and(sequence_e1_8c_adv, byte_91);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp40);
                  byte_range_96_97 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp31);
                  r1000_1fff_tmp41 = simd_and(sequence_e1_8c_adv, byte_range_96_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp12, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp20, basis_bits.bit_4);
                  r1000_1fff_tmp44 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp45 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp44), simd_andc(r1000_1fff_tmp3, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp45);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(48), sequence_e1_8d_adv));
                  r1000_1fff_tmp46 = simd_and(sequence_e1_8d_adv, byte_range_9b_9c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp46);
                  r1000_1fff_tmp47 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp12);
                  byte_range_bd_bf = simd_and(r1000_1fff_tmp47, r800_ffff_tmp3);
                  r1000_1fff_tmp48 = simd_and(sequence_e1_8d_adv, byte_range_bd_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp6);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp49);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp50 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_9a_9f = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp50);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(49), sequence_e1_8e_adv));
                  r1000_1fff_tmp51 = simd_and(sequence_e1_8e_adv, byte_range_9a_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp51);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp33);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp52 = simd_or(basis_bits.bit_4, r1000_1fff_tmp10);
                  byte_range_b5_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp52);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(50), sequence_e1_8f_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_8f_adv, byte_range_b5_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp53);
                  byte_9a = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp25);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp12);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp54, r800_ffff_tmp3);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(51), sequence_e1_9a_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_9a_adv, byte_range_9d_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp55);
                  byte_9b = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp35);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp29, basis_bits.bit_4);
                  r1000_1fff_tmp57 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_b9_bf = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp57);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(52), sequence_e1_9b_adv));
                  r1000_1fff_tmp58 = simd_and(sequence_e1_9b_adv, byte_range_b9_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp58);
                  byte_9c = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp39);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(53), sequence_e1_9c_adv));
                  r1000_1fff_tmp59 = simd_and(sequence_e1_9c_adv, byte_8d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp59);
                  byte_range_95_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp52);
                  r1000_1fff_tmp60 = simd_and(sequence_e1_9c_adv, byte_range_95_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_and(basis_bits.bit_5, r1000_1fff_tmp3);
                  r1000_1fff_tmp62 = simd_or(basis_bits.bit_4, r1000_1fff_tmp61);
                  byte_range_b7_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp62);
                  r1000_1fff_tmp63 = simd_and(sequence_e1_9c_adv, byte_range_b7_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp63);
                  byte_9d = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp42);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  byte_range_94_9f = simd_and(r1000_1fff_tmp20, r800_ffff_tmp1);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(54), sequence_e1_9d_adv));
                  r1000_1fff_tmp64 = simd_and(sequence_e1_9d_adv, byte_range_94_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp42);
                  r1000_1fff_tmp66 = simd_and(sequence_e1_9d_adv, byte_ad);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(sequence_e1_9d_adv, byte_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp67);
                  byte_range_b4_bf = simd_and(r1000_1fff_tmp29, r800_ffff_tmp1);
                  r1000_1fff_tmp68 = simd_and(sequence_e1_9d_adv, byte_range_b4_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp68);
                  byte_9f = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp33);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(55), sequence_e1_9f_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_9f_adv, byte_range_9e_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp69);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp65, basis_bits.bit_4);
                  byte_range_aa_af = simd_and(r1000_1fff_tmp70, r1000_1fff_tmp50);
                  r1000_1fff_tmp71 = simd_and(sequence_e1_9f_adv, byte_range_aa_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp71);
                  byte_range_ba_bf = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp50);
                  r1000_1fff_tmp72 = simd_and(sequence_e1_9f_adv, byte_range_ba_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp72);
                  byte_a0 = simd_andc(r1000_1fff_tmp65, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(56), sequence_e1_a0_adv));
                  r1000_1fff_tmp73 = simd_and(sequence_e1_a0_adv, byte_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp73);
                  r1000_1fff_tmp74 = simd_and(sequence_e1_a0_adv, byte_range_9a_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp74);
                  byte_a1 = simd_and(r1000_1fff_tmp65, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  byte_range_b8_bf = r1000_1fff_tmp56;
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(57), sequence_e1_a1_adv));
                  r1000_1fff_tmp75 = simd_and(sequence_e1_a1_adv, byte_range_b8_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp75);
                  r1000_1fff_tmp76 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp76);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp77 = simd_or(basis_bits.bit_5, r1000_1fff_tmp3);
                  byte_range_ab_af = simd_and(r1000_1fff_tmp70, r1000_1fff_tmp77);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(58), sequence_e1_a2_adv));
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a2_adv, byte_range_ab_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp78);
                  byte_a3 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp4);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp79 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp80 = simd_or(basis_bits.bit_4, r1000_1fff_tmp79);
                  byte_range_b6_bf = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp80);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(59), sequence_e1_a3_adv));
                  r1000_1fff_tmp81 = simd_and(sequence_e1_a3_adv, byte_range_b6_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp81);
                  byte_a4 = simd_and(r1000_1fff_tmp65, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(60), sequence_e1_a4_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a4_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp82);
                  byte_range_ac_af = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp12);
                  r1000_1fff_tmp83 = simd_and(sequence_e1_a4_adv, byte_range_ac_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp83);
                  byte_range_bc_bf = r1000_1fff_tmp47;
                  r1000_1fff_tmp84 = simd_and(sequence_e1_a4_adv, byte_range_bc_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp84);
                  r1000_1fff_tmp85 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp85);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp86 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_range_81_83 = simd_and(r1000_1fff_tmp86, r800_ffff_tmp3);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(61), sequence_e1_a5_adv));
                  r1000_1fff_tmp87 = simd_and(sequence_e1_a5_adv, byte_range_81_83);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp87);
                  byte_range_ae_af = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp13);
                  r1000_1fff_tmp88 = simd_and(sequence_e1_a5_adv, byte_range_ae_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(sequence_e1_a5_adv, byte_range_b5_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp89);
                  byte_a6 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp7);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(62), sequence_e1_a6_adv));
                  r1000_1fff_tmp90 = simd_and(sequence_e1_a6_adv, byte_range_ac_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp90);
                  byte_a7 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp21);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_8a_8f = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp50);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(63), sequence_e1_a7_adv));
                  r1000_1fff_tmp91 = simd_and(sequence_e1_a7_adv, byte_range_8a_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp93 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp92), simd_andc(r1000_1fff_tmp3, basis_bits.bit_5));
                  byte_range_9b_9d = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp93);
                  r1000_1fff_tmp94 = simd_and(sequence_e1_a7_adv, byte_range_9b_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_andc(r1000_1fff_tmp15, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp95);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp96 = simd_andc(r1000_1fff_tmp12, basis_bits.bit_6);
                  byte_range_9c_9d = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp96);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(64), sequence_e1_a8_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_a8_adv, byte_range_9c_9d);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp97);
                  byte_a9 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp16);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(65), sequence_e1_a9_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_a9_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp98);
                  r1000_1fff_tmp99 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bd_be = simd_and(byte_range_bc_bf, r1000_1fff_tmp99);
                  r1000_1fff_tmp100 = simd_and(sequence_e1_a9_adv, byte_range_bd_be);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp100);
                  byte_aa = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp25);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(66), sequence_e1_aa_adv));
                  r1000_1fff_tmp101 = simd_and(sequence_e1_aa_adv, byte_range_8a_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp101);
                  r1000_1fff_tmp102 = simd_and(sequence_e1_aa_adv, byte_range_9a_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp102);
                  r1000_1fff_tmp103 = simd_and(sequence_e1_aa_adv, byte_range_ae_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp103);
                  r1000_1fff_tmp104 = simd_and(sequence_e1_aa_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp104);
                  byte_ab = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp35);
                  sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(67), sequence_e1_ab_adv));
                  r1000_1fff_tmp105 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp105);
                  r1000_1fff_tmp106 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp107 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_range_8c_8f = simd_and(r1000_1fff_tmp107, r1000_1fff_tmp12);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(68), sequence_e1_ad_adv));
                  r1000_1fff_tmp108 = simd_and(sequence_e1_ad_adv, byte_range_8c_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp108);
                  r1000_1fff_tmp109 = simd_and(byte_range_80_bf, r1000_1fff_tmp28);
                  r1000_1fff_tmp110 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp12);
                  r1000_1fff_tmp111 = simd_and(sequence_e1_ad_adv, byte_range_bd_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp111);
                  byte_af = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp33);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp112 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b4_bb = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp112);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(69), sequence_e1_af_adv));
                  r1000_1fff_tmp113 = simd_and(sequence_e1_af_adv, byte_range_b4_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp113);
                  byte_b0 = simd_andc(r1000_1fff_tmp109, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp114 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp15);
                  byte_range_b8_ba = simd_andc(r1000_1fff_tmp114, r1000_1fff_tmp3);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(70), sequence_e1_b0_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_b0_adv, byte_range_b8_ba);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp115);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp116 = simd_and(r1000_1fff_tmp107, basis_bits.bit_4);
                  r1000_1fff_tmp117 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp44), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_8a_8c = simd_and(r1000_1fff_tmp116, r1000_1fff_tmp117);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(71), sequence_e1_b1_adv));
                  r1000_1fff_tmp118 = simd_and(sequence_e1_b1_adv, byte_range_8a_8c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp118);
                  byte_b2 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp76);
                  sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(72), sequence_e1_b2_adv));
                  r1000_1fff_tmp119 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp119);
                  byte_b3 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp4);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_88_8f = r1000_1fff_tmp116;
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(73), sequence_e1_b3_adv));
                  r1000_1fff_tmp120 = simd_and(sequence_e1_b3_adv, byte_range_88_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp120);
                  byte_b7 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp21);
                  r1000_1fff_tmp121 = simd_and(sequence_e1_b3_adv, byte_b7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp121);
                  r1000_1fff_tmp122 = simd_and(r1000_1fff_tmp109, basis_bits.bit_4);
                  r1000_1fff_tmp123 = simd_and(sequence_e1_b3_adv, byte_range_ba_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp123);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp124 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp125 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp124), simd_andc(r1000_1fff_tmp79, basis_bits.bit_4));
                  byte_range_b6_bb = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp125);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(74), sequence_e1_b7_adv));
                  r1000_1fff_tmp126 = simd_and(sequence_e1_b7_adv, byte_range_b6_bb);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp126);
                  byte_bc = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp39);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp127 = simd_and(byte_range_80_bf, r1000_1fff_tmp19);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(75), sequence_e1_bc_adv));
                  r1000_1fff_tmp128 = simd_and(sequence_e1_bc_adv, byte_range_96_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp128);
                  r1000_1fff_tmp129 = simd_and(sequence_e1_bc_adv, byte_range_9e_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp129);
                  byte_bd = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp42);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(76), sequence_e1_bd_adv));
                  r1000_1fff_tmp130 = simd_and(sequence_e1_bd_adv, byte_range_86_87);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp130);
                  r1000_1fff_tmp131 = simd_and(sequence_e1_bd_adv, byte_range_8e_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp131);
                  byte_98 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp95);
                  r1000_1fff_tmp132 = simd_and(sequence_e1_bd_adv, byte_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp132);
                  r1000_1fff_tmp133 = simd_and(sequence_e1_bd_adv, byte_9a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp133);
                  r1000_1fff_tmp134 = simd_and(sequence_e1_bd_adv, byte_9c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp134);
                  byte_9e = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp49);
                  r1000_1fff_tmp135 = simd_and(sequence_e1_bd_adv, byte_9e);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp135);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp13);
                  r1000_1fff_tmp136 = simd_and(sequence_e1_bd_adv, byte_range_be_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp136);
                  byte_be = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp49);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_b5 = simd_and(r1000_1fff_tmp109, r1000_1fff_tmp85);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(77), sequence_e1_be_adv));
                  r1000_1fff_tmp137 = simd_and(sequence_e1_be_adv, byte_b5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp137);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_85 = simd_and(r1000_1fff_tmp107, r1000_1fff_tmp85);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(78), sequence_e1_bf_adv));
                  r1000_1fff_tmp138 = simd_and(sequence_e1_bf_adv, byte_85);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp138);
                  r1000_1fff_tmp139 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_94_95 = simd_and(r1000_1fff_tmp127, r1000_1fff_tmp139);
                  r1000_1fff_tmp140 = simd_and(sequence_e1_bf_adv, byte_range_94_95);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp140);
                  r1000_1fff_tmp141 = simd_and(sequence_e1_bf_adv, byte_9c);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp141);
                  byte_range_b0_b1 = simd_andc(r1000_1fff_tmp109, r800_4dff_tmp1);
                  r1000_1fff_tmp142 = simd_and(sequence_e1_bf_adv, byte_range_b0_b1);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp142);
                  r1000_1fff_tmp143 = simd_and(sequence_e1_bf_adv, byte_b5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp143);
                  r1000_1fff_tmp144 = simd_and(sequence_e1_bf_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r1000_1fff_tmp144);
                }
                else {
                  carryQ.CarryDequeueEnqueue(42, 37);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 67);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(79, 31))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(79, 22))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(79), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_a5 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(80), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_a5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp9);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp10, r800_4dff_tmp2);
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, byte_range_b2_b3);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp13);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp14);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(81), sequence_e2_82_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_82_adv, byte_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp12);
                  byte_range_9d_9f = simd_and(r2000_2fff_tmp18, r800_ffff_tmp3);
                  r2000_2fff_tmp19 = simd_and(sequence_e2_82_adv, byte_range_9d_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_and(r2000_2fff_tmp12, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_and(sequence_e2_82_adv, byte_range_be_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_andc(r2000_2fff_tmp13, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(82), sequence_e2_83_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_83_adv, byte_range_80_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp25 = simd_or(basis_bits.bit_4, r2000_2fff_tmp24);
                  byte_range_b1_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_and(sequence_e2_83_adv, byte_range_b1_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp26);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(byte_range_80_8f, r2000_2fff_tmp27);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp28 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r2000_2fff_tmp29 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_8a_8f = simd_and(r2000_2fff_tmp28, r2000_2fff_tmp29);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(83), sequence_e2_86_adv));
                  r2000_2fff_tmp30 = simd_and(sequence_e2_86_adv, byte_range_8a_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp30);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp10, basis_bits.bit_4);
                  r2000_2fff_tmp32 = simd_or(basis_bits.bit_5, r2000_2fff_tmp13);
                  byte_range_bb_bf = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp32);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(84), sequence_e2_8f_adv));
                  r2000_2fff_tmp33 = simd_and(sequence_e2_8f_adv, byte_range_bb_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp33);
                  r2000_2fff_tmp34 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r2000_2fff_tmp17, r2000_2fff_tmp34);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp36 = simd_and(basis_bits.bit_5, r2000_2fff_tmp13);
                  r2000_2fff_tmp37 = simd_or(basis_bits.bit_4, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_or(basis_bits.bit_3, r2000_2fff_tmp37);
                  byte_range_a7_bf = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(85), sequence_e2_90_adv));
                  r2000_2fff_tmp39 = simd_and(sequence_e2_90_adv, byte_range_a7_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp39);
                  byte_91 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp4);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  r2000_2fff_tmp40 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp41 = simd_and(basis_bits.bit_4, r2000_2fff_tmp32);
                  r2000_2fff_tmp42 = simd_or(basis_bits.bit_3, r2000_2fff_tmp41);
                  byte_range_8b_9f = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp42);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(86), sequence_e2_91_adv));
                  r2000_2fff_tmp43 = simd_and(sequence_e2_91_adv, byte_range_8b_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp43);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp3);
                  byte_ad = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp44);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp45 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp45);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(87), sequence_e2_ad_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_ad_adv, byte_range_b4_b5);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp46);
                  r2000_2fff_tmp47 = simd_and(r2000_2fff_tmp12, r2000_4dff_tmp1);
                  byte_ae = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp47);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp48 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_96_97 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp48);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(88), sequence_e2_ae_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_ae_adv, byte_range_96_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp49);
                  r2000_2fff_tmp50 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp51 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_ba_bc = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp51);
                  r2000_2fff_tmp52 = simd_and(sequence_e2_ae_adv, byte_range_ba_bc);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp52);
                  byte_af = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp14);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp53, r2000_2fff_tmp3);
                  byte_89 = simd_and(byte_range_80_8f, r2000_2fff_tmp54);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(89), sequence_e2_af_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_af_adv, byte_89);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp55);
                  r2000_2fff_tmp56 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r2000_2fff_tmp57 = simd_or(basis_bits.bit_2, r2000_2fff_tmp56);
                  byte_range_92_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_and(sequence_e2_af_adv, byte_range_92_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp58);
                  byte_b0 = simd_andc(r2000_2fff_tmp10, r2000_2fff_tmp34);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(90), sequence_e2_b0_adv));
                  r2000_2fff_tmp59 = simd_and(sequence_e2_b0_adv, byte_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp59);
                  byte_b1 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  byte_9f = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp14);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(91), sequence_e2_b1_adv));
                  r2000_2fff_tmp60 = simd_and(sequence_e2_b1_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp60);
                  byte_b3 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp22);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp61 = simd_not(r2000_2fff_tmp24);
                  r2000_2fff_tmp62 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp61), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_b4_b8 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp62);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(92), sequence_e2_b3_adv));
                  r2000_2fff_tmp63 = simd_and(sequence_e2_b3_adv, byte_range_b4_b8);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp63);
                  byte_b4 = simd_and(r2000_2fff_tmp10, r800_ffff_tmp4);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  byte_a6 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp27);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(93), sequence_e2_b4_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_b4_adv, byte_a6);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp64);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp66 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_a8_ac = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_and(sequence_e2_b4_adv, byte_range_a8_ac);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp67);
                  byte_range_ae_af = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp20);
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b4_adv, byte_range_ae_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp68);
                  byte_b5 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp7);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_range_a8_ae = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp36);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(94), sequence_e2_b5_adv));
                  r2000_2fff_tmp69 = simd_and(sequence_e2_b5_adv, byte_range_a8_ae);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp69);
                  r2000_2fff_tmp70 = simd_not(r2000_2fff_tmp36);
                  r2000_2fff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp70), simd_andc(r2000_2fff_tmp24, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp71);
                  r2000_2fff_tmp72 = simd_and(sequence_e2_b5_adv, byte_range_b1_be);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp72);
                  byte_b6 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp27);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  byte_range_97_9f = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp37);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(95), sequence_e2_b6_adv));
                  r2000_2fff_tmp73 = simd_and(sequence_e2_b6_adv, byte_range_97_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp73);
                  r2000_2fff_tmp74 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp13);
                  byte_a7 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp74);
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b6_adv, byte_a7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp75);
                  r2000_2fff_tmp76 = simd_and(sequence_e2_b6_adv, byte_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp76);
                  byte_b7 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp74);
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b6_adv, byte_b7);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp77);
                  byte_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp14);
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b6_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp78);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_87 = simd_and(byte_range_80_8f, r2000_2fff_tmp74);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(96), sequence_e2_b7_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b7_adv, byte_87);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp79);
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b7_adv, byte_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp80);
                  byte_97 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp74);
                  r2000_2fff_tmp81 = simd_and(sequence_e2_b7_adv, byte_97);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp81);
                  r2000_2fff_tmp82 = simd_and(sequence_e2_b7_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp82);
                  byte_b9 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp54);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  r2000_2fff_tmp83 = simd_or(r800_ffff_tmp1, r2000_2fff_tmp13);
                  r2000_2fff_tmp84 = simd_or(basis_bits.bit_3, r2000_2fff_tmp83);
                  r2000_2fff_tmp85 = simd_or(basis_bits.bit_2, r2000_2fff_tmp84);
                  byte_range_83_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp85);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(97), sequence_e2_b9_adv));
                  r2000_2fff_tmp86 = simd_and(sequence_e2_b9_adv, byte_range_83_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp86);
                  r2000_2fff_tmp87 = simd_and(r2000_2fff_tmp53, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp87);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  byte_9a = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp87);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(98), sequence_e2_ba_adv));
                  r2000_2fff_tmp88 = simd_and(sequence_e2_ba_adv, byte_9a);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp88);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp53, r2000_2fff_tmp13);
                  byte_bb = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp89);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  byte_range_b4_bf = simd_and(r2000_2fff_tmp10, r800_ffff_tmp1);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(99), sequence_e2_bb_adv));
                  r2000_2fff_tmp90 = simd_and(sequence_e2_bb_adv, byte_range_b4_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp90);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  r2000_2fff_tmp91 = simd_not(basis_bits.bit_3);
                  r2000_2fff_tmp92 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp93 = simd_or(basis_bits.bit_4, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_and(basis_bits.bit_3, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp91), simd_andc(r2000_2fff_tmp94, basis_bits.bit_2));
                  byte_range_96_af = simd_and(r800_ffff_tmp5, r2000_2fff_tmp95);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(100), sequence_e2_bf_adv));
                  r2000_2fff_tmp96 = simd_and(sequence_e2_bf_adv, byte_range_96_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp96);
                  byte_range_bc_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  r2000_2fff_tmp97 = simd_and(sequence_e2_bf_adv, byte_range_bc_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r2000_2fff_tmp97);
                }
                else {
                  carryQ.CarryDequeueEnqueue(79, 22);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(101, 9))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(101), r3000_4dff_tmp5));
                  sequence_e3_81 = simd_and(r3000_4dff_tmp5, byte_81);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(102), sequence_e3_81_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_81_adv, byte_80);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp7);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp11 = simd_not(r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_and(basis_bits.bit_5, r2000_4dff_tmp3);
                  r3000_4dff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp11), simd_andc(r3000_4dff_tmp12, basis_bits.bit_4));
                  byte_range_97_98 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp13);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(103), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_97_98);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp14);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp2, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r3000_4dff_tmp15, r3000_4dff_tmp16);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(104), sequence_e3_84_adv));
                  r3000_4dff_tmp17 = simd_and(sequence_e3_84_adv, byte_range_80_84);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp17);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp19 = simd_not(r3000_4dff_tmp6);
                  r3000_4dff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp21 = simd_and(r3000_4dff_tmp20, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_or(simd_and(basis_bits.bit_3, r3000_4dff_tmp19), simd_andc(r3000_4dff_tmp21, basis_bits.bit_3));
                  byte_range_ae_b0 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp22);
                  r3000_4dff_tmp23 = simd_and(sequence_e3_84_adv, byte_range_ae_b0);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp24);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp25 = simd_and(r3000_4dff_tmp20, r2000_4dff_tmp3);
                  byte_8f = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(105), sequence_e3_86_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_86_adv, byte_8f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp26);
                  r3000_4dff_tmp27 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp28 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp27);
                  r3000_4dff_tmp29 = simd_and(r3000_4dff_tmp28, basis_bits.bit_4);
                  r3000_4dff_tmp30 = simd_or(basis_bits.bit_5, r2000_4dff_tmp3);
                  byte_range_bb_bf = simd_and(r3000_4dff_tmp29, r3000_4dff_tmp30);
                  r3000_4dff_tmp31 = simd_and(sequence_e3_86_adv, byte_range_bb_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp31);
                  r3000_4dff_tmp32 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp32);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp33 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a4_af = simd_and(r3000_4dff_tmp33, r800_ffff_tmp1);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(106), sequence_e3_87_adv));
                  r3000_4dff_tmp34 = simd_and(sequence_e3_87_adv, byte_range_a4_af);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp34);
                  r3000_4dff_tmp35 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp36 = simd_andc(r3000_4dff_tmp35, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp36);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  byte_9f = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp25);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(107), sequence_e3_88_adv));
                  r3000_4dff_tmp37 = simd_and(sequence_e3_88_adv, byte_9f);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp37);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp35, r2000_4dff_tmp3);
                  byte_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp38);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  byte_bf = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp25);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(108), sequence_e3_8b_adv));
                  r3000_4dff_tmp39 = simd_and(sequence_e3_8b_adv, byte_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp39);
                  byte_b6 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp24);
                  sequence_e4_b6 = simd_and(r800_ffff_tmp8, byte_b6);
                  byte_e4_adv = r800_ffff_tmp8;
                  r3000_4dff_tmp40 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp41 = simd_or(basis_bits.bit_4, r3000_4dff_tmp40);
                  byte_range_b6_bf = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp41);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(109), sequence_e4_b6_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e4_b6_adv, byte_range_b6_bf);
                  struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r3000_4dff_tmp42);
                }
                else {
                  carryQ.CarryDequeueEnqueue(101, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(79, 31);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 98);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(110, 2))) {
              r4e00_9fff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp3 = simd_and(r4e00_9fff_tmp1, r4e00_9fff_tmp2);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp3);
              r4e00_9fff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r4e00_9fff_tmp6 = simd_and(r4e00_9fff_tmp4, r4e00_9fff_tmp5);
              byte_bf = simd_and(r800_ffff_tmp12, r4e00_9fff_tmp6);
              carryQ.cq[110] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(110), r4e00_9fff_tmp7));
              sequence_e9_bf = simd_and(r4e00_9fff_tmp7, byte_bf);
              byte_e9_adv = r4e00_9fff_tmp7;
              r4e00_9fff_tmp8 = simd_and(r4e00_9fff_tmp4, r800_ffff_tmp3);
              r4e00_9fff_tmp9 = simd_or(basis_bits.bit_3, r4e00_9fff_tmp8);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, r4e00_9fff_tmp9);
              byte_range_8d_bf = simd_and(r800_ffff_tmp5, r4e00_9fff_tmp10);
              carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(111), sequence_e9_bf_adv));
              r4e00_9fff_tmp11 = simd_and(sequence_e9_bf_adv, byte_range_8d_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r4e00_9fff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(110, 2);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(112, 42))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[112] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(112), ra000_ffff_tmp7));
              sequence_ea_92 = simd_and(ra000_ffff_tmp7, byte_92);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp9 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp10);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp11, r800_ffff_tmp3);
              carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(113), sequence_ea_92_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_92_adv, byte_range_8d_8f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_5, ra000_ffff_tmp13);
              ra000_ffff_tmp16 = simd_or(basis_bits.bit_4, ra000_ffff_tmp15);
              byte_range_87_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp16);
              carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(114), sequence_ea_93_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_93_adv, byte_range_87_8f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp18);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_ac_bf = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp20);
              carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(115), sequence_ea_98_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_98_adv, byte_range_ac_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp21);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(116), sequence_ea_9a_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9a_adv, byte_9e);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp13);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp24);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(117), sequence_ea_9b_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_9b_adv, byte_range_b8_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp25);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              byte_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp26);
              carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(118), sequence_ea_9e_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ea_9e_adv, byte_8f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp10, basis_bits.bit_6);
              byte_range_ae_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp30 = simd_and(sequence_ea_9e_adv, byte_range_ae_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp30);
              ra000_ffff_tmp31 = simd_or(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_b2_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(sequence_ea_9e_adv, byte_range_b2_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp32);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp26);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp33 = simd_and(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_2, ra000_ffff_tmp33);
              byte_range_80_b6 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp34);
              carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(119), sequence_ea_9f_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_9f_adv, byte_range_80_b6);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp36);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_ac_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp10);
              carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(120), sequence_ea_a0_adv));
              ra000_ffff_tmp37 = simd_and(sequence_ea_a0_adv, byte_range_ac_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp37);
              byte_range_ba_bf = simd_and(byte_range_b8_bf, r800_ffff_tmp14);
              ra000_ffff_tmp38 = simd_and(sequence_ea_a0_adv, byte_range_ba_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp38);
              ra000_ffff_tmp39 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp39, r800_ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp40);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(121), sequence_ea_a1_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_a1_adv, byte_range_b8_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp41);
              byte_a3 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp14);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp43 = simd_not(ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp43), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_85_8d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp44);
              carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(122), sequence_ea_a3_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_a3_adv, byte_range_85_8d);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp5, basis_bits.bit_4);
              byte_range_9a_9f = simd_and(ra000_ffff_tmp46, r800_ffff_tmp14);
              ra000_ffff_tmp47 = simd_and(sequence_ea_a3_adv, byte_range_9a_9f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp47);
              byte_range_bc_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp10);
              ra000_ffff_tmp48 = simd_and(sequence_ea_a3_adv, byte_range_bc_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp39);
              byte_a5 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp49);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp50 = simd_not(ra000_ffff_tmp15);
              ra000_ffff_tmp51 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp50), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_94_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp51);
              carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(123), sequence_ea_a5_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ea_a5_adv, byte_range_94_9e);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp52);
              byte_range_bd_bf = simd_and(byte_range_bc_bf, r800_ffff_tmp3);
              ra000_ffff_tmp53 = simd_and(sequence_ea_a5_adv, byte_range_bd_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp13);
              byte_a7 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp54);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp22);
              carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(124), sequence_ea_a7_adv));
              ra000_ffff_tmp55 = simd_and(sequence_ea_a7_adv, byte_8e);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp55);
              ra000_ffff_tmp56 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_9a_9d = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp56);
              ra000_ffff_tmp57 = simd_and(sequence_ea_a7_adv, byte_range_9a_9d);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp57);
              byte_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp26);
              ra000_ffff_tmp58 = simd_and(sequence_ea_a7_adv, byte_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp58);
              byte_a8 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp18);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              byte_range_b7_bf = simd_and(r800_ffff_tmp12, ra000_ffff_tmp16);
              carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(125), sequence_ea_a8_adv));
              ra000_ffff_tmp59 = simd_and(sequence_ea_a8_adv, byte_range_b7_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp59);
              ra000_ffff_tmp60 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp39);
              byte_a9 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp60);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp29);
              carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(126), sequence_ea_a9_adv));
              ra000_ffff_tmp61 = simd_and(sequence_ea_a9_adv, byte_range_8e_8f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp61);
              ra000_ffff_tmp62 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_9a_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp62);
              ra000_ffff_tmp63 = simd_and(sequence_ea_a9_adv, byte_range_9a_9b);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp63);
              byte_ab = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp24);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp64 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp65 = simd_or(basis_bits.bit_5, ra000_ffff_tmp13);
              ra000_ffff_tmp66 = simd_and(basis_bits.bit_4, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_not(ra000_ffff_tmp66);
              ra000_ffff_tmp68 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp13);
              ra000_ffff_tmp69 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp67), simd_andc(ra000_ffff_tmp68, basis_bits.bit_3));
              byte_range_83_9a = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp69);
              carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(127), sequence_ea_ab_adv));
              ra000_ffff_tmp70 = simd_and(sequence_ea_ab_adv, byte_range_83_9a);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp70);
              ra000_ffff_tmp71 = simd_and(sequence_ea_ab_adv, byte_range_b7_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp71);
              ra000_ffff_tmp72 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp72);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_80 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp36);
              carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(128), sequence_ea_ac_adv));
              ra000_ffff_tmp73 = simd_and(sequence_ea_ac_adv, byte_80);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp73);
              ra000_ffff_tmp74 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp75 = simd_not(ra000_ffff_tmp74);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp75), simd_andc(ra000_ffff_tmp15, basis_bits.bit_4));
              byte_range_87_88 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp76);
              ra000_ffff_tmp77 = simd_and(sequence_ea_ac_adv, byte_range_87_88);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp77);
              ra000_ffff_tmp78 = simd_not(ra000_ffff_tmp36);
              ra000_ffff_tmp79 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp78), simd_andc(ra000_ffff_tmp26, basis_bits.bit_3));
              byte_range_8f_90 = simd_and(ra000_ffff_tmp64, ra000_ffff_tmp79);
              ra000_ffff_tmp80 = simd_and(sequence_ea_ac_adv, byte_range_8f_90);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp80);
              byte_range_97_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp16);
              ra000_ffff_tmp81 = simd_and(sequence_ea_ac_adv, byte_range_97_9f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp81);
              ra000_ffff_tmp82 = simd_and(sequence_ea_ac_adv, byte_a7);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp82);
              byte_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp26);
              ra000_ffff_tmp83 = simd_and(sequence_ea_ac_adv, byte_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp83);
              ra000_ffff_tmp84 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp39);
              byte_ad = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp84);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_a0_a3 = simd_andc(ra000_ffff_tmp28, r800_ffff_tmp1);
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(129), sequence_ea_ad_adv));
              ra000_ffff_tmp85 = simd_and(sequence_ea_ad_adv, byte_range_a0_a3);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp85);
              ra000_ffff_tmp86 = simd_or(basis_bits.bit_4, ra000_ffff_tmp42);
              ra000_ffff_tmp87 = simd_or(basis_bits.bit_3, ra000_ffff_tmp86);
              byte_range_a6_bf = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp87);
              ra000_ffff_tmp88 = simd_and(sequence_ea_ad_adv, byte_range_a6_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp88);
              byte_ae = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp22);
              sequence_ea_ae = simd_and(byte_ea_adv, byte_ae);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_ea_ae, carryQ.get_carry_in(130), sequence_ea_ae_adv));
              ra000_ffff_tmp89 = simd_and(sequence_ea_ae_adv, byte_range_80_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp89);
              ra000_ffff_tmp90 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(131), sequence_ea_af_adv));
              ra000_ffff_tmp91 = simd_and(sequence_ea_af_adv, byte_range_ae_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp91);
              ra000_ffff_tmp92 = simd_and(byte_range_80_bf, r800_ffff_tmp11);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp92, basis_bits.bit_4);
              ra000_ffff_tmp94 = simd_and(sequence_ea_af_adv, byte_range_ba_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp94);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp84);
              ra000_ffff_tmp95 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(132), ra000_ffff_tmp96));
              sequence_ed_9e = simd_and(ra000_ffff_tmp96, byte_9e);
              byte_ed_adv = ra000_ffff_tmp96;
              byte_range_a4_af = simd_and(ra000_ffff_tmp90, r800_ffff_tmp1);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(133), sequence_ed_9e_adv));
              ra000_ffff_tmp97 = simd_and(sequence_ed_9e_adv, byte_range_a4_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp97);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              ra000_ffff_tmp98 = simd_andc(byte_range_80_bf, ra000_ffff_tmp8);
              ra000_ffff_tmp99 = simd_not(ra000_ffff_tmp65);
              ra000_ffff_tmp100 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp99), simd_andc(ra000_ffff_tmp15, basis_bits.bit_4));
              byte_range_87_8a = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp100);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(134), sequence_ed_9f_adv));
              ra000_ffff_tmp101 = simd_and(sequence_ed_9f_adv, byte_range_87_8a);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp101);
              ra000_ffff_tmp102 = simd_and(sequence_ed_9f_adv, byte_range_bc_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp102);
              byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_ed_byte_range_a0_bf = simd_and(byte_ed_adv, byte_range_a0_bf);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ed_byte_range_a0_bf, carryQ.get_carry_in(135), ra000_ffff_tmp103));
              byte_ed_byte_range_a0_bf_sfx = simd_and(ra000_ffff_tmp103, byte_range_80_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_ed_byte_range_a0_bf_sfx);
              byte_ee = simd_and(byte_range_e0_ef, ra000_ffff_tmp22);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(136), ra000_ffff_tmp104));
              byte_ee_byte_range_80_bf = simd_and(ra000_ffff_tmp104, byte_range_80_bf);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(137), ra000_ffff_tmp105));
              byte_ee_byte_range_80_bf_sfx = simd_and(ra000_ffff_tmp105, byte_range_80_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_ee_byte_range_80_bf_sfx);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp26);
              ra000_ffff_tmp106 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp107 = simd_and(basis_bits.bit_2, ra000_ffff_tmp106);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(138), ra000_ffff_tmp108));
              byte_ef_byte_range_80_a3 = simd_and(ra000_ffff_tmp108, byte_range_80_a3);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(139), ra000_ffff_tmp109));
              byte_ef_byte_range_80_a3_sfx = simd_and(ra000_ffff_tmp109, byte_range_80_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_ef_byte_range_80_a3_sfx);
              sequence_ef_a9 = simd_and(ra000_ffff_tmp108, byte_a9);
              byte_ef_adv = ra000_ffff_tmp108;
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(140), sequence_ef_a9_adv));
              ra000_ffff_tmp110 = simd_and(sequence_ef_a9_adv, byte_range_ae_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp110);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp111 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              ra000_ffff_tmp112 = simd_and(basis_bits.bit_3, ra000_ffff_tmp111);
              ra000_ffff_tmp113 = simd_or(basis_bits.bit_2, ra000_ffff_tmp112);
              byte_range_9a_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp113);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(141), sequence_ef_ab_adv));
              ra000_ffff_tmp114 = simd_and(sequence_ef_ab_adv, byte_range_9a_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp114);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              ra000_ffff_tmp115 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp116 = simd_not(ra000_ffff_tmp68);
              ra000_ffff_tmp117 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp116), simd_andc(ra000_ffff_tmp16, basis_bits.bit_3));
              byte_range_87_92 = simd_and(ra000_ffff_tmp115, ra000_ffff_tmp117);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(142), sequence_ef_ac_adv));
              ra000_ffff_tmp118 = simd_and(sequence_ef_ac_adv, byte_range_87_92);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp118);
              ra000_ffff_tmp119 = simd_and(ra000_ffff_tmp95, basis_bits.bit_4);
              byte_range_98_9c = simd_andc(ra000_ffff_tmp119, r800_ffff_tmp16);
              ra000_ffff_tmp120 = simd_and(sequence_ef_ac_adv, byte_range_98_9c);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp120);
              byte_b7 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp54);
              ra000_ffff_tmp121 = simd_and(sequence_ef_ac_adv, byte_b7);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp121);
              byte_bd = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp84);
              ra000_ffff_tmp122 = simd_and(sequence_ef_ac_adv, byte_bd);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp122);
              ra000_ffff_tmp123 = simd_and(sequence_ef_ac_adv, byte_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp123);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              byte_82 = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp6);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(143), sequence_ef_ad_adv));
              ra000_ffff_tmp124 = simd_and(sequence_ef_ad_adv, byte_82);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp124);
              byte_85 = simd_and(ra000_ffff_tmp98, ra000_ffff_tmp49);
              ra000_ffff_tmp125 = simd_and(sequence_ef_ad_adv, byte_85);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp125);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp126 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp127 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp116), simd_andc(ra000_ffff_tmp126, basis_bits.bit_3));
              byte_range_82_92 = simd_and(ra000_ffff_tmp115, ra000_ffff_tmp127);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(144), sequence_ef_af_adv));
              ra000_ffff_tmp128 = simd_and(sequence_ef_af_adv, byte_range_82_92);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp128);
              byte_b5 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp49);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_80_8f = ra000_ffff_tmp98;
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(145), sequence_ef_b5_adv));
              ra000_ffff_tmp129 = simd_and(sequence_ef_b5_adv, byte_range_80_8f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp129);
              ra000_ffff_tmp130 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_b6 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp130);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_90_91 = simd_andc(ra000_ffff_tmp95, ra000_ffff_tmp126);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(146), sequence_ef_b6_adv));
              ra000_ffff_tmp131 = simd_and(sequence_ef_b6_adv, byte_range_90_91);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp131);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              ra000_ffff_tmp132 = simd_not(basis_bits.bit_3);
              ra000_ffff_tmp133 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp134 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp132), simd_andc(ra000_ffff_tmp133, basis_bits.bit_2));
              byte_range_88_af = simd_and(byte_range_80_bf, ra000_ffff_tmp134);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(147), sequence_ef_b7_adv));
              ra000_ffff_tmp135 = simd_and(sequence_ef_b7_adv, byte_range_88_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp135);
              byte_range_be_bf = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp29);
              ra000_ffff_tmp136 = simd_and(sequence_ef_b7_adv, byte_range_be_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp136);
              byte_b8 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp18);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(148), sequence_ef_b8_adv));
              ra000_ffff_tmp137 = simd_and(sequence_ef_b8_adv, byte_range_9a_9f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp137);
              ra000_ffff_tmp138 = simd_and(sequence_ef_b8_adv, byte_range_ae_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp138);
              byte_b9 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp60);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(149), sequence_ef_b9_adv));
              ra000_ffff_tmp139 = simd_and(sequence_ef_b9_adv, byte_93);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp139);
              ra000_ffff_tmp140 = simd_and(sequence_ef_b9_adv, byte_a7);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp140);
              ra000_ffff_tmp141 = simd_and(sequence_ef_b9_adv, byte_range_ac_af);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp141);
              ra000_ffff_tmp142 = simd_and(sequence_ef_b9_adv, byte_b5);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp142);
              byte_bb = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp24);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp143 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp10);
              ra000_ffff_tmp144 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_bd_be = simd_and(ra000_ffff_tmp143, ra000_ffff_tmp144);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(150), sequence_ef_bb_adv));
              ra000_ffff_tmp145 = simd_and(sequence_ef_bb_adv, byte_range_bd_be);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp145);
              byte_bc = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp72);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(151), sequence_ef_bc_adv));
              ra000_ffff_tmp146 = simd_and(sequence_ef_bc_adv, byte_80);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp146);
              byte_be = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp22);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(152), sequence_ef_be_adv));
              ra000_ffff_tmp147 = simd_and(sequence_ef_be_adv, byte_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp147);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_80_81 = simd_andc(byte_range_80_8f, ra000_ffff_tmp126);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(153), sequence_ef_bf_adv));
              ra000_ffff_tmp148 = simd_and(sequence_ef_bf_adv, byte_range_80_81);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp148);
              ra000_ffff_tmp149 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_88_89 = simd_and(byte_range_80_8f, ra000_ffff_tmp149);
              ra000_ffff_tmp150 = simd_and(sequence_ef_bf_adv, byte_range_88_89);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp150);
              ra000_ffff_tmp151 = simd_and(sequence_ef_bf_adv, byte_range_90_91);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp151);
              byte_range_98_99 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp149);
              ra000_ffff_tmp152 = simd_and(sequence_ef_bf_adv, byte_range_98_99);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp152);
              ra000_ffff_tmp153 = simd_and(ra000_ffff_tmp95, ra000_ffff_tmp10);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp153, r800_ffff_tmp3);
              ra000_ffff_tmp154 = simd_and(sequence_ef_bf_adv, byte_range_9d_9f);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp154);
              ra000_ffff_tmp155 = simd_and(sequence_ef_bf_adv, byte_a7);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp155);
              ra000_ffff_tmp156 = simd_and(basis_bits.bit_4, ra000_ffff_tmp74);
              ra000_ffff_tmp157 = simd_not(ra000_ffff_tmp156);
              ra000_ffff_tmp158 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp157), simd_andc(ra000_ffff_tmp26, basis_bits.bit_3));
              byte_range_af_b8 = simd_and(byte_range_a0_bf, ra000_ffff_tmp158);
              ra000_ffff_tmp159 = simd_and(sequence_ef_bf_adv, byte_range_af_b8);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp159);
              ra000_ffff_tmp160 = simd_and(sequence_ef_bf_adv, byte_range_be_bf);
              struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, ra000_ffff_tmp160);
            }
            else {
              carryQ.CarryDequeueEnqueue(112, 42);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 143);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(154, 181))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[154] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(154), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(155), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            byte_f0_adv = r10000_10ffff_tmp7;
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(156), sequence_f0_90_80_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_80_adv, byte_8c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_a7 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_80_adv, byte_a7);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp16);
            byte_bb = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_80_adv, byte_bb);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp23);
            byte_be = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp24);
            r10000_10ffff_tmp25 = simd_and(sequence_f0_90_80_adv, byte_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp27);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_8e_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(157), sequence_f0_90_81_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_81_adv, byte_range_8e_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp31 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp30);
            byte_range_9e_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_81_adv, byte_range_9e_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp33);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp19, basis_bits.bit_4);
            r10000_10ffff_tmp35 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp16);
            byte_range_bb_bf = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(158), sequence_f0_90_83_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_83_adv, byte_range_bb_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp37);
            sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp39 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp16);
            byte_range_83_86 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(159), sequence_f0_90_84_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_84_adv, byte_range_83_86);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp15);
            byte_range_b4_b6 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp16);
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_84_adv, byte_range_b4_b6);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp23);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp43);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            byte_range_8d_8f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp2);
            carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(160), sequence_f0_90_86_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_86_adv, byte_range_8d_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp45);
            byte_range_9c_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            r10000_10ffff_tmp46 = simd_and(sequence_f0_90_86_adv, byte_range_9c_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp46);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp48 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp3);
            byte_range_a1_bf = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp48);
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_86_adv, byte_range_a1_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp49);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            byte_range_80_8f = r10000_10ffff_tmp9;
            carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(161), sequence_f0_90_87_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_90_87_adv, byte_range_80_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp50);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp28);
            r10000_10ffff_tmp51 = simd_and(sequence_f0_90_87_adv, byte_range_be_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp51);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp20, basis_bits.bit_6);
            byte_range_88_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp52);
            sequence_f0_90_byte_range_88_89 = simd_and(sequence_f0_90_adv, byte_range_88_89);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(162), r10000_10ffff_tmp53));
            sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10ffff_tmp53, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_90_byte_range_88_89_sfx);
            r10000_10ffff_tmp54 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp55 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            byte_8a = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp11);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp2);
            carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(163), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_90_8a_adv, byte_range_9d_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp58);
            byte_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp21);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp59 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp59);
            byte_range_91_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp60);
            carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(164), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_90_8b_adv, byte_range_91_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            byte_range_bc_bf = simd_and(r10000_10ffff_tmp62, r10000_10ffff_tmp11);
            r10000_10ffff_tmp63 = simd_and(sequence_f0_90_8b_adv, byte_range_bc_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp63);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp64 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_range_a4_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp1);
            carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(165), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_8c_adv, byte_range_a4_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp26);
            byte_8d = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp66);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp55, basis_bits.bit_4);
            byte_range_8b_8f = simd_and(r10000_10ffff_tmp67, r10000_10ffff_tmp35);
            carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(166), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_90_8d_adv, byte_range_8b_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp62, basis_bits.bit_4);
            r10000_10ffff_tmp70 = simd_and(sequence_f0_90_8d_adv, byte_range_bb_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp70);
            byte_8e = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp24);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            byte_9e = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp24);
            carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(167), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_90_8e_adv, byte_9e);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp16);
            byte_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp72);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_84_87 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp15);
            carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(168), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_8f_adv, byte_range_84_87);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp75 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp76);
            byte_range_96_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_8f_adv, byte_range_96_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp78);
            r10000_10ffff_tmp79 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp79);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp28);
            carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(169), sequence_f0_90_92_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_90_92_adv, byte_range_9e_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp82 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp83 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp82);
            r10000_10ffff_tmp84 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp83);
            byte_range_aa_bf = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp84);
            r10000_10ffff_tmp85 = simd_and(sequence_f0_90_92_adv, byte_range_aa_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp85);
            byte_93 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp33);
            sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
            carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(170), sequence_f0_90_93_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_90_93_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp86);
            byte_94 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp37);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            byte_range_a8_af = simd_and(r10000_10ffff_tmp64, basis_bits.bit_4);
            carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(171), sequence_f0_90_94_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_90_94_adv, byte_range_a8_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp26);
            byte_95 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp88);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp89 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp16);
            r10000_10ffff_tmp90 = simd_not(r10000_10ffff_tmp89);
            r10000_10ffff_tmp91 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp90), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp91);
            carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(172), sequence_f0_90_95_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_90_95_adv, byte_range_a4_ae);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp92);
            byte_range_b0_bf = r10000_10ffff_tmp62;
            r10000_10ffff_tmp93 = simd_and(sequence_f0_90_95_adv, byte_range_b0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp94);
            sequence_f0_90_byte_range_96_97 = simd_and(sequence_f0_90_adv, byte_range_96_97);
            carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_96_97, carryQ.get_carry_in(173), r10000_10ffff_tmp95));
            sequence_f0_90_byte_range_96_97_sfx = simd_and(r10000_10ffff_tmp95, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_90_byte_range_96_97_sfx);
            byte_9c = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp12);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp96 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp89);
            byte_range_b7_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp96);
            carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(174), sequence_f0_90_9c_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_90_9c_adv, byte_range_b7_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp97);
            byte_9d = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp66);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_96_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp75);
            carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(175), sequence_f0_90_9d_adv));
            r10000_10ffff_tmp98 = simd_and(sequence_f0_90_9d_adv, byte_range_96_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp98);
            r10000_10ffff_tmp99 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp99);
            r10000_10ffff_tmp100 = simd_and(sequence_f0_90_9d_adv, byte_range_a8_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp100);
            sequence_f0_90_byte_range_9e_9f = simd_and(sequence_f0_90_adv, byte_range_9e_9f);
            carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_9e_9f, carryQ.get_carry_in(176), r10000_10ffff_tmp101));
            sequence_f0_90_byte_range_9e_9f_sfx = simd_and(r10000_10ffff_tmp101, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_90_byte_range_9e_9f_sfx);
            byte_a0 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp3);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            byte_range_86_87 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp94);
            carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(177), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp102 = simd_and(sequence_f0_90_a0_adv, byte_range_86_87);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp102);
            r10000_10ffff_tmp103 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp26);
            byte_89 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_and(sequence_f0_90_a0_adv, byte_89);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp104);
            byte_b6 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp43);
            r10000_10ffff_tmp105 = simd_and(sequence_f0_90_a0_adv, byte_b6);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp105);
            r10000_10ffff_tmp106 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp20);
            byte_range_b9_bb = simd_and(r10000_10ffff_tmp106, r10000_10ffff_tmp2);
            r10000_10ffff_tmp107 = simd_and(sequence_f0_90_a0_adv, byte_range_b9_bb);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp109 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_bd_be = simd_and(r10000_10ffff_tmp108, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_and(sequence_f0_90_a0_adv, byte_range_bd_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp110);
            byte_a1 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp27);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            byte_96 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp43);
            carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(178), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_90_a1_adv, byte_96);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp111);
            byte_a2 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp79);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp112 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp96);
            r10000_10ffff_tmp113 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp114 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp72);
            r10000_10ffff_tmp115 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp113), simd_andc(r10000_10ffff_tmp114, basis_bits.bit_2));
            byte_range_9f_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp115);
            carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(179), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_90_a2_adv, byte_range_9f_a6);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(sequence_f0_90_a2_adv, byte_range_b0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp117);
            byte_a3 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp33);
            sequence_f0_90_a3 = simd_and(sequence_f0_90_adv, byte_a3);
            carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a3, carryQ.get_carry_in(180), sequence_f0_90_a3_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_90_a3_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp118);
            byte_a4 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp37);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            byte_range_9c_9e = simd_andc(r10000_10ffff_tmp57, r10000_10ffff_tmp16);
            carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(181), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp119 = simd_and(sequence_f0_90_a4_adv, byte_range_9c_9e);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp119);
            r10000_10ffff_tmp120 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp121 = simd_not(r10000_10ffff_tmp16);
            r10000_10ffff_tmp122 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp121), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_ba_be = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp122);
            r10000_10ffff_tmp123 = simd_and(sequence_f0_90_a4_adv, byte_range_ba_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp123);
            byte_a5 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp88);
            sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
            carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(182), sequence_f0_90_a5_adv));
            r10000_10ffff_tmp124 = simd_and(sequence_f0_90_a5_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp124);
            byte_a6 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp43);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            byte_range_b8_bd = simd_andc(r10000_10ffff_tmp120, r10000_10ffff_tmp74);
            carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(183), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp125 = simd_and(sequence_f0_90_a6_adv, byte_range_b8_bd);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp125);
            sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
            carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(184), sequence_f0_90_a7_adv));
            r10000_10ffff_tmp126 = simd_and(sequence_f0_90_a7_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp126);
            r10000_10ffff_tmp127 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp127);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(185), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_90_a8_adv, byte_84);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp128);
            r10000_10ffff_tmp129 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp129), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_87_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp130);
            r10000_10ffff_tmp131 = simd_and(sequence_f0_90_a8_adv, byte_range_87_8b);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp131);
            r10000_10ffff_tmp132 = simd_and(sequence_f0_90_a8_adv, byte_94);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp132);
            byte_98 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp127);
            r10000_10ffff_tmp133 = simd_and(sequence_f0_90_a8_adv, byte_98);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp133);
            byte_range_b4_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp15);
            r10000_10ffff_tmp134 = simd_and(sequence_f0_90_a8_adv, byte_range_b4_b7);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp134);
            byte_range_bb_be = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp39);
            r10000_10ffff_tmp135 = simd_and(sequence_f0_90_a8_adv, byte_range_bb_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp135);
            byte_a9 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp103);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_88_8f = r10000_10ffff_tmp67;
            carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(186), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_90_a9_adv, byte_range_88_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp136);
            r10000_10ffff_tmp137 = simd_and(r10000_10ffff_tmp54, basis_bits.bit_4);
            byte_range_99_9f = simd_and(r10000_10ffff_tmp137, r10000_10ffff_tmp59);
            r10000_10ffff_tmp138 = simd_and(sequence_f0_90_a9_adv, byte_range_99_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp138);
            byte_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp56);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_a0_bf = r10000_10ffff_tmp81;
            carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(187), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp139 = simd_and(sequence_f0_90_aa_adv, byte_range_a0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp139);
            byte_ab = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp21);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp140 = simd_not(r10000_10ffff_tmp35);
            r10000_10ffff_tmp141 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp140), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_a7_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp141);
            carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(188), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_90_ab_adv, byte_range_a7_aa);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp142);
            r10000_10ffff_tmp143 = simd_and(sequence_f0_90_ab_adv, byte_range_b7_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp143);
            byte_ac = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp12);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp144 = simd_not(r10000_10ffff_tmp59);
            r10000_10ffff_tmp145 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp74, basis_bits.bit_4));
            byte_range_b6_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp145);
            carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(189), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp146 = simd_and(sequence_f0_90_ac_adv, byte_range_b6_b8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp146);
            byte_ad = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp66);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(190), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_90_ad_adv, byte_range_96_97);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp147);
            r10000_10ffff_tmp148 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_b3_b7 = simd_and(r10000_10ffff_tmp148, r10000_10ffff_tmp35);
            r10000_10ffff_tmp149 = simd_and(sequence_f0_90_ad_adv, byte_range_b3_b7);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp149);
            byte_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp24);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp150 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp82, basis_bits.bit_4));
            byte_range_92_98 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp150);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(191), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_90_ae_adv, byte_range_92_98);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp151);
            r10000_10ffff_tmp152 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp59);
            r10000_10ffff_tmp153 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_not(r10000_10ffff_tmp153);
            r10000_10ffff_tmp155 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp156 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp155);
            r10000_10ffff_tmp157 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp154), simd_andc(r10000_10ffff_tmp156, basis_bits.bit_2));
            byte_range_9d_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp157);
            r10000_10ffff_tmp158 = simd_and(sequence_f0_90_ae_adv, byte_range_9d_a8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp158);
            r10000_10ffff_tmp159 = simd_and(sequence_f0_90_ae_adv, byte_range_b0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp159);
            byte_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp72);
            sequence_f0_90_af = simd_and(sequence_f0_90_adv, byte_af);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_af, carryQ.get_carry_in(192), sequence_f0_90_af_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_90_af_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp160);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp161 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp153);
            byte_range_89_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp161);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(193), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_90_b1_adv, byte_range_89_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp162);
            byte_range_b2_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp150);
            sequence_f0_90_byte_range_b2_b8 = simd_and(sequence_f0_90_adv, byte_range_b2_b8);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_b2_b8, carryQ.get_carry_in(194), r10000_10ffff_tmp163));
            sequence_f0_90_byte_range_b2_b8_sfx = simd_and(r10000_10ffff_tmp163, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_90_byte_range_b2_b8_sfx);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp103);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(195), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp164 = simd_and(sequence_f0_90_b9_adv, byte_range_80_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp164);
            byte_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp72);
            r10000_10ffff_tmp165 = simd_and(sequence_f0_90_b9_adv, byte_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp165);
            byte_range_ba_bf = simd_and(r10000_10ffff_tmp120, r10000_10ffff_tmp82);
            sequence_f0_90_byte_range_ba_bf = simd_and(sequence_f0_90_adv, byte_range_ba_bf);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_ba_bf, carryQ.get_carry_in(196), r10000_10ffff_tmp166));
            sequence_f0_90_byte_range_ba_bf_sfx = simd_and(r10000_10ffff_tmp166, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_90_byte_range_ba_bf_sfx);
            byte_91 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp27);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(197), r10000_10ffff_tmp167));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp167, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp167;
            r10000_10ffff_tmp168 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp169 = simd_not(r10000_10ffff_tmp168);
            r10000_10ffff_tmp170 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp169), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_3));
            byte_range_8e_91 = simd_and(byte_range_80_9f, r10000_10ffff_tmp170);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(198), sequence_f0_91_81_adv));
            r10000_10ffff_tmp171 = simd_and(sequence_f0_91_81_adv, byte_range_8e_91);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp171);
            r10000_10ffff_tmp172 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp89);
            byte_range_b0_be = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp172);
            r10000_10ffff_tmp173 = simd_and(sequence_f0_91_81_adv, byte_range_b0_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp173);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp174 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp82);
            byte_range_82_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp174);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(199), sequence_f0_91_83_adv));
            r10000_10ffff_tmp175 = simd_and(sequence_f0_91_83_adv, byte_range_82_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp175);
            byte_range_a9_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp59);
            r10000_10ffff_tmp176 = simd_and(sequence_f0_91_83_adv, byte_range_a9_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp176);
            r10000_10ffff_tmp177 = simd_and(sequence_f0_91_83_adv, byte_range_ba_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp177);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            byte_b5 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp88);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(200), sequence_f0_91_84_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_91_84_adv, byte_b5);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp178);
            byte_85 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp88);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_84_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp1);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(201), sequence_f0_91_85_adv));
            r10000_10ffff_tmp179 = simd_and(sequence_f0_91_85_adv, byte_range_84_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp179);
            r10000_10ffff_tmp180 = simd_and(sequence_f0_91_85_adv, byte_range_b7_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp180);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp181 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            byte_range_89_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp181);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(202), sequence_f0_91_87_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_91_87_adv, byte_range_89_8c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp182);
            r10000_10ffff_tmp183 = simd_and(sequence_f0_91_87_adv, byte_range_8e_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp183);
            r10000_10ffff_tmp184 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp185 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp35);
            r10000_10ffff_tmp186 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp186, basis_bits.bit_2));
            byte_range_9b_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp187);
            r10000_10ffff_tmp188 = simd_and(sequence_f0_91_87_adv, byte_range_9b_a0);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp188);
            r10000_10ffff_tmp189 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp190 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp189);
            byte_range_b5_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp190);
            r10000_10ffff_tmp191 = simd_and(sequence_f0_91_87_adv, byte_range_b5_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp191);
            byte_88 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp127);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(203), sequence_f0_91_88_adv));
            r10000_10ffff_tmp192 = simd_and(sequence_f0_91_88_adv, byte_92);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp192);
            r10000_10ffff_tmp193 = simd_and(sequence_f0_91_88_adv, byte_range_be_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp193);
            sequence_f0_91_89 = simd_and(sequence_f0_91_adv, byte_89);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_91_89, carryQ.get_carry_in(204), sequence_f0_91_89_adv));
            r10000_10ffff_tmp194 = simd_and(sequence_f0_91_89_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp194);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(205), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp195 = simd_and(sequence_f0_91_8a_adv, byte_range_80_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp195);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            byte_range_ab_af = simd_and(byte_range_a8_af, r10000_10ffff_tmp35);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(206), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_8b_adv, byte_range_ab_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp196);
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_8b_adv, byte_range_ba_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp197);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(207), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_8c_adv, byte_80);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp198);
            r10000_10ffff_tmp199 = simd_and(sequence_f0_91_8c_adv, byte_84);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp199);
            r10000_10ffff_tmp200 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp11);
            byte_range_8d_8e = simd_and(r10000_10ffff_tmp200, r10000_10ffff_tmp109);
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_8c_adv, byte_range_8d_8e);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp201);
            r10000_10ffff_tmp202 = simd_andc(r10000_10ffff_tmp54, r10000_10ffff_tmp1);
            byte_range_91_92 = simd_and(r10000_10ffff_tmp202, r10000_10ffff_tmp109);
            r10000_10ffff_tmp203 = simd_and(sequence_f0_91_8c_adv, byte_range_91_92);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp203);
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_8c_adv, byte_a9);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp204);
            r10000_10ffff_tmp205 = simd_and(sequence_f0_91_8c_adv, byte_b1);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp205);
            byte_b4 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp37);
            r10000_10ffff_tmp206 = simd_and(sequence_f0_91_8c_adv, byte_b4);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp206);
            r10000_10ffff_tmp207 = simd_and(r10000_10ffff_tmp20, basis_bits.bit_6);
            byte_range_ba_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp207);
            r10000_10ffff_tmp208 = simd_and(sequence_f0_91_8c_adv, byte_range_ba_bb);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp208);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            byte_range_85_86 = simd_and(byte_range_84_87, r10000_10ffff_tmp109);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(208), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp209 = simd_and(sequence_f0_91_8d_adv, byte_range_85_86);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp209);
            r10000_10ffff_tmp210 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp20);
            byte_range_89_8a = simd_and(r10000_10ffff_tmp210, r10000_10ffff_tmp109);
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_8d_adv, byte_range_89_8a);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp211);
            r10000_10ffff_tmp212 = simd_not(r10000_10ffff_tmp96);
            r10000_10ffff_tmp213 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp212), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_3));
            byte_range_8e_96 = simd_and(byte_range_80_9f, r10000_10ffff_tmp213);
            r10000_10ffff_tmp214 = simd_and(sequence_f0_91_8d_adv, byte_range_8e_96);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp214);
            byte_range_98_9c = simd_andc(r10000_10ffff_tmp137, r10000_10ffff_tmp189);
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_8d_adv, byte_range_98_9c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp215);
            r10000_10ffff_tmp216 = simd_andc(r10000_10ffff_tmp15, basis_bits.bit_6);
            byte_range_a4_a5 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp216);
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_8d_adv, byte_range_a4_a5);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp217);
            r10000_10ffff_tmp218 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp11);
            byte_range_ad_af = simd_and(r10000_10ffff_tmp218, r10000_10ffff_tmp2);
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_8d_adv, byte_range_ad_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp219);
            r10000_10ffff_tmp220 = simd_and(sequence_f0_91_8d_adv, byte_range_b5_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp220);
            sequence_f0_91_byte_range_8e_91 = simd_and(sequence_f0_91_adv, byte_range_8e_91);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_8e_91, carryQ.get_carry_in(209), r10000_10ffff_tmp221));
            sequence_f0_91_byte_range_8e_91_sfx = simd_and(r10000_10ffff_tmp221, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_91_byte_range_8e_91_sfx);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(210), sequence_f0_91_93_adv));
            r10000_10ffff_tmp222 = simd_and(sequence_f0_91_93_adv, byte_range_88_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp222);
            r10000_10ffff_tmp223 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp83);
            r10000_10ffff_tmp224 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp223);
            byte_range_9a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp224);
            r10000_10ffff_tmp225 = simd_and(sequence_f0_91_93_adv, byte_range_9a_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp225);
            byte_range_94_95 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp216);
            sequence_f0_91_byte_range_94_95 = simd_and(sequence_f0_91_adv, byte_range_94_95);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_94_95, carryQ.get_carry_in(211), r10000_10ffff_tmp226));
            sequence_f0_91_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp226, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_91_byte_range_94_95_sfx);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            byte_range_b6_b7 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp94);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(212), sequence_f0_91_96_adv));
            r10000_10ffff_tmp227 = simd_and(sequence_f0_91_96_adv, byte_range_b6_b7);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp227);
            byte_97 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp17);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp228 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp84);
            byte_range_8a_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp228);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(213), sequence_f0_91_97_adv));
            r10000_10ffff_tmp229 = simd_and(sequence_f0_91_97_adv, byte_range_8a_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp229);
            byte_99 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp103);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_85_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp190);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(214), sequence_f0_91_99_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_91_99_adv, byte_range_85_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp230);
            r10000_10ffff_tmp231 = simd_and(sequence_f0_91_99_adv, byte_range_9a_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp231);
            byte_9a = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp56);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            byte_range_b8_bf = r10000_10ffff_tmp120;
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(215), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp232 = simd_and(sequence_f0_91_9a_adv, byte_range_b8_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp232);
            byte_9b = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp21);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(216), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_91_9b_adv, byte_range_8a_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp233);
            r10000_10ffff_tmp234 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp168);
            r10000_10ffff_tmp235 = simd_not(r10000_10ffff_tmp234);
            r10000_10ffff_tmp236 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp237 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp235), simd_andc(r10000_10ffff_tmp236, basis_bits.bit_2));
            byte_range_9c_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp237);
            sequence_f0_91_byte_range_9c_a1 = simd_and(sequence_f0_91_adv, byte_range_9c_a1);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_9c_a1, carryQ.get_carry_in(217), r10000_10ffff_tmp238));
            sequence_f0_91_byte_range_9c_a1_sfx = simd_and(r10000_10ffff_tmp238, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_91_byte_range_9c_a1_sfx);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(218), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp239 = simd_and(sequence_f0_91_a2_adv, byte_range_80_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp239);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp240 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp90), simd_andc(r10000_10ffff_tmp35, basis_bits.bit_4));
            byte_range_b3_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp240);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(219), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp241 = simd_and(sequence_f0_91_a3_adv, byte_range_b3_be);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp241);
            r10000_10ffff_tmp242 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp140), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            byte_range_a4_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp242);
            sequence_f0_91_byte_range_a4_aa = simd_and(sequence_f0_91_adv, byte_range_a4_aa);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_a4_aa, carryQ.get_carry_in(220), r10000_10ffff_tmp243));
            sequence_f0_91_byte_range_a4_aa_sfx = simd_and(r10000_10ffff_tmp243, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_91_byte_range_a4_aa_sfx);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            byte_range_b9_bf = simd_and(byte_range_b8_bf, r10000_10ffff_tmp59);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(221), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp244 = simd_and(sequence_f0_91_ab_adv, byte_range_b9_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp244);
            r10000_10ffff_tmp245 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            byte_range_ac_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp245);
            sequence_f0_91_byte_range_ac_bf = simd_and(sequence_f0_91_adv, byte_range_ac_bf);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_ac_bf, carryQ.get_carry_in(222), r10000_10ffff_tmp246));
            sequence_f0_91_byte_range_ac_bf_sfx = simd_and(r10000_10ffff_tmp246, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_91_byte_range_ac_bf_sfx);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(223), r10000_10ffff_tmp247));
            sequence_f0_92_8e = simd_and(r10000_10ffff_tmp247, byte_8e);
            sequence_f0_92_adv = r10000_10ffff_tmp247;
            r10000_10ffff_tmp248 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp152);
            r10000_10ffff_tmp249 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp248);
            byte_range_99_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp249);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(224), sequence_f0_92_8e_adv));
            r10000_10ffff_tmp250 = simd_and(sequence_f0_92_8e_adv, byte_range_99_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp250);
            sequence_f0_92_8f = simd_and(sequence_f0_92_adv, byte_8f);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8f, carryQ.get_carry_in(225), sequence_f0_92_8f_adv));
            r10000_10ffff_tmp251 = simd_and(sequence_f0_92_8f_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp251);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(226), sequence_f0_92_91_adv));
            r10000_10ffff_tmp252 = simd_and(sequence_f0_92_91_adv, byte_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp252);
            r10000_10ffff_tmp253 = simd_and(sequence_f0_92_91_adv, byte_range_b5_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp253);
            r10000_10ffff_tmp254 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp168);
            r10000_10ffff_tmp255 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp254);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp255);
            sequence_f0_92_byte_range_92_bf = simd_and(sequence_f0_92_adv, byte_range_92_bf);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_92_bf, carryQ.get_carry_in(227), r10000_10ffff_tmp256));
            sequence_f0_92_byte_range_92_bf_sfx = simd_and(r10000_10ffff_tmp256, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_92_byte_range_92_bf_sfx);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(228), r10000_10ffff_tmp257));
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp257, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp257;
            r10000_10ffff_tmp258 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp72);
            byte_range_af_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp258);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(229), sequence_f0_93_90_adv));
            r10000_10ffff_tmp259 = simd_and(sequence_f0_93_90_adv, byte_range_af_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp259);
            r10000_10ffff_tmp260 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp261 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp260);
            byte_range_91_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp261);
            sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(230), r10000_10ffff_tmp262));
            sequence_f0_93_byte_range_91_bf_sfx = simd_and(r10000_10ffff_tmp262, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_93_byte_range_91_bf_sfx);
            byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(231), r10000_10ffff_tmp263));
            byte_f0_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp263, byte_range_80_bf);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(232), r10000_10ffff_tmp264));
            byte_f0_byte_range_94_95_sfx_sfx = simd_and(r10000_10ffff_tmp264, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f0_byte_range_94_95_sfx_sfx);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(233), r10000_10ffff_tmp265));
            sequence_f0_96_byte_range_80_9f = simd_and(r10000_10ffff_tmp265, byte_range_80_9f);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_80_9f, carryQ.get_carry_in(234), r10000_10ffff_tmp266));
            sequence_f0_96_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp266, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_96_byte_range_80_9f_sfx);
            sequence_f0_96_a8 = simd_and(r10000_10ffff_tmp265, byte_a8);
            sequence_f0_96_adv = r10000_10ffff_tmp265;
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(235), sequence_f0_96_a8_adv));
            r10000_10ffff_tmp267 = simd_and(sequence_f0_96_a8_adv, byte_range_b9_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp267);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            byte_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp72);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(236), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp268 = simd_and(sequence_f0_96_a9_adv, byte_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp268);
            r10000_10ffff_tmp269 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_aa_ad = simd_and(byte_range_a8_af, r10000_10ffff_tmp269);
            r10000_10ffff_tmp270 = simd_and(sequence_f0_96_a9_adv, byte_range_aa_ad);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp270);
            r10000_10ffff_tmp271 = simd_and(sequence_f0_96_a9_adv, byte_range_b0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp271);
            sequence_f0_96_aa = simd_and(sequence_f0_96_adv, byte_aa);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_96_aa, carryQ.get_carry_in(237), sequence_f0_96_aa_adv));
            r10000_10ffff_tmp272 = simd_and(sequence_f0_96_aa_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp272);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(238), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp273 = simd_and(sequence_f0_96_ab_adv, byte_range_80_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp273);
            byte_range_ae_af = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp28);
            r10000_10ffff_tmp274 = simd_and(sequence_f0_96_ab_adv, byte_range_ae_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp274);
            byte_range_b6_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp75);
            r10000_10ffff_tmp275 = simd_and(sequence_f0_96_ab_adv, byte_range_b6_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp275);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_86_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp75);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(239), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp276 = simd_and(sequence_f0_96_ad_adv, byte_range_86_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp276);
            r10000_10ffff_tmp277 = simd_and(sequence_f0_96_ad_adv, byte_9a);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp277);
            r10000_10ffff_tmp278 = simd_and(sequence_f0_96_ad_adv, byte_a2);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp278);
            byte_range_b8_bc = simd_andc(byte_range_b8_bf, r10000_10ffff_tmp189);
            r10000_10ffff_tmp279 = simd_and(sequence_f0_96_ad_adv, byte_range_b8_bc);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp279);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(240), sequence_f0_96_ae_adv));
            r10000_10ffff_tmp280 = simd_and(sequence_f0_96_ae_adv, byte_range_90_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp280);
            r10000_10ffff_tmp281 = simd_not(r10000_10ffff_tmp11);
            r10000_10ffff_tmp282 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp281), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_af_bb = simd_and(byte_range_a0_bf, r10000_10ffff_tmp282);
            sequence_f0_96_byte_range_af_bb = simd_and(sequence_f0_96_adv, byte_range_af_bb);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_af_bb, carryQ.get_carry_in(241), r10000_10ffff_tmp283));
            sequence_f0_96_byte_range_af_bb_sfx = simd_and(r10000_10ffff_tmp283, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_96_byte_range_af_bb_sfx);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp66);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(242), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp284 = simd_and(sequence_f0_96_bd_adv, byte_range_85_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp284);
            r10000_10ffff_tmp285 = simd_and(sequence_f0_96_bd_adv, byte_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp285);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp172);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(243), sequence_f0_96_be_adv));
            r10000_10ffff_tmp286 = simd_and(sequence_f0_96_be_adv, byte_range_80_8e);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp286);
            r10000_10ffff_tmp287 = simd_and(sequence_f0_96_be_adv, byte_range_a0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp287);
            sequence_f0_96_bf = simd_and(sequence_f0_96_adv, byte_bf);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bf, carryQ.get_carry_in(244), sequence_f0_96_bf_adv));
            r10000_10ffff_tmp288 = simd_and(sequence_f0_96_bf_adv, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp288);
            byte_range_97_9a = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp141);
            byte_f0_byte_range_97_9a = simd_and(byte_f0_adv, byte_range_97_9a);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a, carryQ.get_carry_in(245), r10000_10ffff_tmp289));
            byte_f0_byte_range_97_9a_sfx = simd_and(r10000_10ffff_tmp289, byte_range_80_bf);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_97_9a_sfx, carryQ.get_carry_in(246), r10000_10ffff_tmp290));
            byte_f0_byte_range_97_9a_sfx_sfx = simd_and(r10000_10ffff_tmp290, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f0_byte_range_97_9a_sfx_sfx);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(247), r10000_10ffff_tmp291));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp291, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp291;
            r10000_10ffff_tmp292 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp234);
            byte_range_82_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp292);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(248), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp293 = simd_and(sequence_f0_9b_80_adv, byte_range_82_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp293);
            r10000_10ffff_tmp294 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp295 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp294), simd_andc(r10000_10ffff_tmp48, basis_bits.bit_2));
            byte_range_81_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp295);
            sequence_f0_9b_byte_range_81_af = simd_and(sequence_f0_9b_adv, byte_range_81_af);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_81_af, carryQ.get_carry_in(249), r10000_10ffff_tmp296));
            sequence_f0_9b_byte_range_81_af_sfx = simd_and(r10000_10ffff_tmp296, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9b_byte_range_81_af_sfx);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(250), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp297 = simd_and(sequence_f0_9b_b1_adv, byte_range_ab_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp297);
            byte_range_bd_bf = simd_and(r10000_10ffff_tmp108, r10000_10ffff_tmp2);
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9b_b1_adv, byte_range_bd_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp298);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp79);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            byte_range_89_8f = simd_and(byte_range_88_8f, r10000_10ffff_tmp59);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(251), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp299 = simd_and(sequence_f0_9b_b2_adv, byte_range_89_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp299);
            byte_range_9a_9b = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp207);
            r10000_10ffff_tmp300 = simd_and(sequence_f0_9b_b2_adv, byte_range_9a_9b);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp300);
            r10000_10ffff_tmp301 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            byte_range_a4_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp301);
            r10000_10ffff_tmp302 = simd_and(sequence_f0_9b_b2_adv, byte_range_a4_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp302);
            r10000_10ffff_tmp303 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp35);
            byte_range_b3_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp303);
            sequence_f0_9b_byte_range_b3_bf = simd_and(sequence_f0_9b_adv, byte_range_b3_bf);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_b3_bf, carryQ.get_carry_in(252), r10000_10ffff_tmp304));
            sequence_f0_9b_byte_range_b3_bf_sfx = simd_and(r10000_10ffff_tmp304, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9b_byte_range_b3_bf_sfx);
            sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(253), r10000_10ffff_tmp305));
            sequence_f0_9c_byte_range_80_bf = simd_and(r10000_10ffff_tmp305, byte_range_80_bf);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_byte_range_80_bf, carryQ.get_carry_in(254), r10000_10ffff_tmp306));
            sequence_f0_9c_byte_range_80_bf_sfx = simd_and(r10000_10ffff_tmp306, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9c_byte_range_80_bf_sfx);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(255), r10000_10ffff_tmp307));
            sequence_f0_9d_83 = simd_and(r10000_10ffff_tmp307, byte_83);
            sequence_f0_9d_adv = r10000_10ffff_tmp307;
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(256), sequence_f0_9d_83_adv));
            r10000_10ffff_tmp308 = simd_and(sequence_f0_9d_83_adv, byte_range_b6_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp308);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp309 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_a7_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp309);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(257), sequence_f0_9d_84_adv));
            r10000_10ffff_tmp310 = simd_and(sequence_f0_9d_84_adv, byte_range_a7_a8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp310);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(258), sequence_f0_9d_87_adv));
            r10000_10ffff_tmp311 = simd_and(sequence_f0_9d_87_adv, byte_range_9e_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp311);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp312 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp313 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp312);
            byte_range_86_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp313);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(259), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp314 = simd_and(sequence_f0_9d_89_adv, byte_range_86_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp314);
            byte_range_8a_8b = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp207);
            sequence_f0_9d_byte_range_8a_8b = simd_and(sequence_f0_9d_adv, byte_range_8a_8b);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8a_8b, carryQ.get_carry_in(260), r10000_10ffff_tmp315));
            sequence_f0_9d_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp315, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9d_byte_range_8a_8b_sfx);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            byte_range_97_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp96);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(261), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp316 = simd_and(sequence_f0_9d_8d_adv, byte_range_97_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp316);
            byte_range_b2_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp174);
            r10000_10ffff_tmp317 = simd_and(sequence_f0_9d_8d_adv, byte_range_b2_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp317);
            sequence_f0_9d_byte_range_8e_8f = simd_and(sequence_f0_9d_adv, byte_range_8e_8f);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_8e_8f, carryQ.get_carry_in(262), r10000_10ffff_tmp318));
            sequence_f0_9d_byte_range_8e_8f_sfx = simd_and(r10000_10ffff_tmp318, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9d_byte_range_8e_8f_sfx);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(263), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp319 = simd_and(sequence_f0_9d_91_adv, byte_95);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp319);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(264), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp320 = simd_and(sequence_f0_9d_92_adv, byte_9d);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp320);
            byte_range_a0_a1 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp168);
            r10000_10ffff_tmp321 = simd_and(sequence_f0_9d_92_adv, byte_range_a0_a1);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp321);
            r10000_10ffff_tmp322 = simd_andc(r10000_10ffff_tmp64, basis_bits.bit_4);
            r10000_10ffff_tmp323 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp324 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp323), simd_andc(r10000_10ffff_tmp16, basis_bits.bit_5));
            byte_range_a3_a4 = simd_and(r10000_10ffff_tmp322, r10000_10ffff_tmp324);
            r10000_10ffff_tmp325 = simd_and(sequence_f0_9d_92_adv, byte_range_a3_a4);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp325);
            r10000_10ffff_tmp326 = simd_and(sequence_f0_9d_92_adv, byte_range_a7_a8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp326);
            r10000_10ffff_tmp327 = simd_and(sequence_f0_9d_92_adv, byte_ad);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp327);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp56);
            r10000_10ffff_tmp328 = simd_and(sequence_f0_9d_92_adv, byte_ba);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp328);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp12);
            r10000_10ffff_tmp329 = simd_and(sequence_f0_9d_92_adv, byte_bc);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp329);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(265), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp330 = simd_and(sequence_f0_9d_93_adv, byte_84);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp330);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(266), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp331 = simd_and(sequence_f0_9d_94_adv, byte_86);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp331);
            byte_range_8b_8c = simd_and(byte_range_88_8f, r10000_10ffff_tmp324);
            r10000_10ffff_tmp332 = simd_and(sequence_f0_9d_94_adv, byte_range_8b_8c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp332);
            r10000_10ffff_tmp333 = simd_and(sequence_f0_9d_94_adv, byte_95);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp333);
            r10000_10ffff_tmp334 = simd_and(sequence_f0_9d_94_adv, byte_9d);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp334);
            r10000_10ffff_tmp335 = simd_and(sequence_f0_9d_94_adv, byte_ba);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp335);
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9d_94_adv, byte_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp336);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(267), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp337 = simd_and(sequence_f0_9d_95_adv, byte_85);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp337);
            r10000_10ffff_tmp338 = simd_not(r10000_10ffff_tmp82);
            r10000_10ffff_tmp339 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp338), simd_andc(r10000_10ffff_tmp89, basis_bits.bit_4));
            byte_range_87_89 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp339);
            r10000_10ffff_tmp340 = simd_and(sequence_f0_9d_95_adv, byte_range_87_89);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp340);
            r10000_10ffff_tmp341 = simd_and(sequence_f0_9d_95_adv, byte_91);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp341);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            byte_range_a6_a7 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp94);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(268), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp342 = simd_and(sequence_f0_9d_9a_adv, byte_range_a6_a7);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp342);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp343 = simd_andc(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_8c_8d = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp343);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(269), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp344 = simd_and(sequence_f0_9d_9f_adv, byte_range_8c_8d);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp344);
            sequence_f0_9d_byte_range_a0_bf = simd_and(sequence_f0_9d_adv, byte_range_a0_bf);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_a0_bf, carryQ.get_carry_in(270), r10000_10ffff_tmp345));
            sequence_f0_9d_byte_range_a0_bf_sfx = simd_and(r10000_10ffff_tmp345, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9d_byte_range_a0_bf_sfx);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(271), r10000_10ffff_tmp346));
            sequence_f0_9e_byte_range_80_9f = simd_and(r10000_10ffff_tmp346, byte_range_80_9f);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_80_9f, carryQ.get_carry_in(272), r10000_10ffff_tmp347));
            sequence_f0_9e_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp347, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9e_byte_range_80_9f_sfx);
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp346, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp346;
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(273), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp348 = simd_and(sequence_f0_9e_a3_adv, byte_range_85_86);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp348);
            r10000_10ffff_tmp349 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp96);
            r10000_10ffff_tmp350 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp349);
            byte_range_97_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp350);
            r10000_10ffff_tmp351 = simd_and(sequence_f0_9e_a3_adv, byte_range_97_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp351);
            r10000_10ffff_tmp352 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp353 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp352), simd_andc(r10000_10ffff_tmp1, basis_bits.bit_3));
            byte_range_a4_b7 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp353);
            sequence_f0_9e_byte_range_a4_b7 = simd_and(sequence_f0_9e_adv, byte_range_a4_b7);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a4_b7, carryQ.get_carry_in(274), r10000_10ffff_tmp354));
            sequence_f0_9e_byte_range_a4_b7_sfx = simd_and(r10000_10ffff_tmp354, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9e_byte_range_a4_b7_sfx);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp127);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(275), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp355 = simd_and(sequence_f0_9e_b8_adv, byte_84);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp355);
            r10000_10ffff_tmp356 = simd_and(sequence_f0_9e_b8_adv, byte_a0);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp356);
            r10000_10ffff_tmp357 = simd_and(sequence_f0_9e_b8_adv, byte_a3);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp357);
            r10000_10ffff_tmp358 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp15);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp358, r10000_10ffff_tmp109);
            r10000_10ffff_tmp359 = simd_and(sequence_f0_9e_b8_adv, byte_range_a5_a6);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp359);
            r10000_10ffff_tmp360 = simd_and(sequence_f0_9e_b8_adv, byte_a8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp360);
            byte_b3 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp33);
            r10000_10ffff_tmp361 = simd_and(sequence_f0_9e_b8_adv, byte_b3);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp361);
            r10000_10ffff_tmp362 = simd_and(sequence_f0_9e_b8_adv, byte_b8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp362);
            r10000_10ffff_tmp363 = simd_and(sequence_f0_9e_b8_adv, byte_ba);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp363);
            r10000_10ffff_tmp364 = simd_and(sequence_f0_9e_b8_adv, byte_range_bc_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp364);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp168);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(276), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp365 = simd_and(sequence_f0_9e_b9_adv, byte_range_80_81);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp365);
            r10000_10ffff_tmp366 = simd_andc(r10000_10ffff_tmp55, basis_bits.bit_4);
            r10000_10ffff_tmp367 = simd_and(sequence_f0_9e_b9_adv, byte_range_83_86);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp367);
            r10000_10ffff_tmp368 = simd_and(sequence_f0_9e_b9_adv, byte_88);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp368);
            r10000_10ffff_tmp369 = simd_and(sequence_f0_9e_b9_adv, byte_8a);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp369);
            r10000_10ffff_tmp370 = simd_and(sequence_f0_9e_b9_adv, byte_8c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp370);
            r10000_10ffff_tmp371 = simd_and(sequence_f0_9e_b9_adv, byte_90);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp371);
            r10000_10ffff_tmp372 = simd_and(sequence_f0_9e_b9_adv, byte_93);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp372);
            r10000_10ffff_tmp373 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp15);
            byte_range_95_96 = simd_and(r10000_10ffff_tmp373, r10000_10ffff_tmp109);
            r10000_10ffff_tmp374 = simd_and(sequence_f0_9e_b9_adv, byte_range_95_96);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp374);
            r10000_10ffff_tmp375 = simd_and(sequence_f0_9e_b9_adv, byte_98);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp375);
            r10000_10ffff_tmp376 = simd_and(sequence_f0_9e_b9_adv, byte_9a);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp376);
            r10000_10ffff_tmp377 = simd_and(sequence_f0_9e_b9_adv, byte_9c);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp377);
            r10000_10ffff_tmp378 = simd_and(sequence_f0_9e_b9_adv, byte_9e);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp378);
            r10000_10ffff_tmp379 = simd_and(sequence_f0_9e_b9_adv, byte_a0);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp379);
            r10000_10ffff_tmp380 = simd_and(sequence_f0_9e_b9_adv, byte_a3);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp380);
            r10000_10ffff_tmp381 = simd_and(sequence_f0_9e_b9_adv, byte_range_a5_a6);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp381);
            r10000_10ffff_tmp382 = simd_and(sequence_f0_9e_b9_adv, byte_ab);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp382);
            r10000_10ffff_tmp383 = simd_and(sequence_f0_9e_b9_adv, byte_b3);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp383);
            r10000_10ffff_tmp384 = simd_and(sequence_f0_9e_b9_adv, byte_b8);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp384);
            r10000_10ffff_tmp385 = simd_and(sequence_f0_9e_b9_adv, byte_bd);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp385);
            r10000_10ffff_tmp386 = simd_and(sequence_f0_9e_b9_adv, byte_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp386);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(277), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp387 = simd_and(sequence_f0_9e_ba_adv, byte_8a);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp387);
            r10000_10ffff_tmp388 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp236, basis_bits.bit_2));
            byte_range_9c_a0 = simd_and(byte_range_80_bf, r10000_10ffff_tmp388);
            r10000_10ffff_tmp389 = simd_and(sequence_f0_9e_ba_adv, byte_range_9c_a0);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp389);
            r10000_10ffff_tmp390 = simd_and(sequence_f0_9e_ba_adv, byte_a4);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp390);
            r10000_10ffff_tmp391 = simd_and(sequence_f0_9e_ba_adv, byte_aa);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp391);
            r10000_10ffff_tmp392 = simd_and(sequence_f0_9e_ba_adv, byte_range_bc_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp392);
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(278), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp393 = simd_and(sequence_f0_9e_bb_adv, byte_range_80_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp393);
            r10000_10ffff_tmp394 = simd_and(sequence_f0_9e_bb_adv, byte_range_b2_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp394);
            sequence_f0_9e_byte_range_bc_bf = simd_and(sequence_f0_9e_adv, byte_range_bc_bf);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_bc_bf, carryQ.get_carry_in(279), r10000_10ffff_tmp395));
            sequence_f0_9e_byte_range_bc_bf_sfx = simd_and(r10000_10ffff_tmp395, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9e_byte_range_bc_bf_sfx);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(280), r10000_10ffff_tmp396));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp396, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp396;
            byte_range_ac_af = r10000_10ffff_tmp218;
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(281), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp397 = simd_and(sequence_f0_9f_80_adv, byte_range_ac_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp397);
            byte_82 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp79);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            byte_range_94_9f = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp1);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(282), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp398 = simd_and(sequence_f0_9f_82_adv, byte_range_94_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp398);
            r10000_10ffff_tmp399 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp400 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp399), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_af_b0 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp400);
            r10000_10ffff_tmp401 = simd_and(sequence_f0_9f_82_adv, byte_range_af_b0);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp401);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(283), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp402 = simd_and(sequence_f0_9f_83_adv, byte_80);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp402);
            r10000_10ffff_tmp403 = simd_and(sequence_f0_9f_83_adv, byte_90);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp403);
            r10000_10ffff_tmp404 = simd_and(sequence_f0_9f_83_adv, byte_range_b6_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp404);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(284), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp405 = simd_and(sequence_f0_9f_84_adv, byte_range_8d_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp405);
            r10000_10ffff_tmp406 = simd_and(sequence_f0_9f_84_adv, byte_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp406);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(285), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp407 = simd_and(sequence_f0_9f_85_adv, byte_range_ac_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp407);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            r10000_10ffff_tmp408 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp186);
            byte_range_9b_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp408);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(286), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp409 = simd_and(sequence_f0_9f_86_adv, byte_range_9b_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp409);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            r10000_10ffff_tmp410 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp312);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp410);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(287), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp411 = simd_and(sequence_f0_9f_87_adv, byte_range_80_a5);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp411);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            byte_range_83_8f = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp303);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(288), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp412 = simd_and(sequence_f0_9f_88_adv, byte_range_83_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp412);
            r10000_10ffff_tmp413 = simd_and(sequence_f0_9f_88_adv, byte_range_bb_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp413);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(289), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp414 = simd_and(sequence_f0_9f_89_adv, byte_range_89_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp414);
            r10000_10ffff_tmp415 = simd_and(sequence_f0_9f_89_adv, byte_range_92_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp415);
            sequence_f0_9f_byte_range_8a_8b = simd_and(sequence_f0_9f_adv, byte_range_8a_8b);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_8a_8b, carryQ.get_carry_in(290), r10000_10ffff_tmp416));
            sequence_f0_9f_byte_range_8a_8b_sfx = simd_and(r10000_10ffff_tmp416, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9f_byte_range_8a_8b_sfx);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(291), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp417 = simd_and(sequence_f0_9f_8c_adv, byte_range_ad_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp417);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(292), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp418 = simd_and(sequence_f0_9f_8d_adv, byte_range_be_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp418);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            r10000_10ffff_tmp419 = simd_not(r10000_10ffff_tmp1);
            r10000_10ffff_tmp420 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp419), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            byte_range_8f_93 = simd_and(byte_range_80_9f, r10000_10ffff_tmp420);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(293), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp421 = simd_and(sequence_f0_9f_8f_adv, byte_range_8f_93);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp421);
            r10000_10ffff_tmp422 = simd_and(sequence_f0_9f_8f_adv, byte_range_b8_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp422);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(294), sequence_f0_9f_93_adv));
            r10000_10ffff_tmp423 = simd_and(sequence_f0_9f_93_adv, byte_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp423);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(295), sequence_f0_9f_95_adv));
            r10000_10ffff_tmp424 = simd_and(sequence_f0_9f_95_adv, byte_range_8b_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp424);
            r10000_10ffff_tmp425 = simd_and(sequence_f0_9f_95_adv, byte_ba);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp425);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(296), sequence_f0_9f_96_adv));
            r10000_10ffff_tmp426 = simd_and(sequence_f0_9f_96_adv, byte_a4);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp426);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            byte_range_83_84 = simd_and(r10000_10ffff_tmp366, r10000_10ffff_tmp324);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(297), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp427 = simd_and(sequence_f0_9f_99_adv, byte_range_83_84);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp427);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            byte_range_90_9f = r10000_10ffff_tmp54;
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(298), sequence_f0_9f_9b_adv));
            r10000_10ffff_tmp428 = simd_and(sequence_f0_9f_9b_adv, byte_range_90_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp428);
            r10000_10ffff_tmp429 = simd_and(sequence_f0_9f_9b_adv, byte_range_ad_af);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp429);
            byte_range_b4_bf = simd_and(byte_range_b0_bf, r10000_10ffff_tmp1);
            r10000_10ffff_tmp430 = simd_and(sequence_f0_9f_9b_adv, byte_range_b4_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp430);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(299), sequence_f0_9f_9d_adv));
            r10000_10ffff_tmp431 = simd_and(sequence_f0_9f_9d_adv, byte_range_b4_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp431);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            r10000_10ffff_tmp432 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp190);
            r10000_10ffff_tmp433 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp432);
            byte_range_95_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp433);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(300), sequence_f0_9f_9f_adv));
            r10000_10ffff_tmp434 = simd_and(sequence_f0_9f_9f_adv, byte_range_95_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp434);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            byte_range_8c_8f = r10000_10ffff_tmp200;
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(301), sequence_f0_9f_a0_adv));
            r10000_10ffff_tmp435 = simd_and(sequence_f0_9f_a0_adv, byte_range_8c_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp435);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(302), sequence_f0_9f_a1_adv));
            r10000_10ffff_tmp436 = simd_and(sequence_f0_9f_a1_adv, byte_range_88_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp436);
            r10000_10ffff_tmp437 = simd_and(byte_range_90_9f, basis_bits.bit_4);
            byte_range_9a_9f = simd_and(r10000_10ffff_tmp437, r10000_10ffff_tmp82);
            r10000_10ffff_tmp438 = simd_and(sequence_f0_9f_a1_adv, byte_range_9a_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp438);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(303), sequence_f0_9f_a2_adv));
            r10000_10ffff_tmp439 = simd_and(sequence_f0_9f_a2_adv, byte_range_88_8f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp439);
            r10000_10ffff_tmp440 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            byte_range_ae_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp440);
            r10000_10ffff_tmp441 = simd_and(sequence_f0_9f_a2_adv, byte_range_ae_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp441);
            r10000_10ffff_tmp442 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp443 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp442);
            byte_range_a3_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp443);
            sequence_f0_9f_byte_range_a3_bf = simd_and(sequence_f0_9f_adv, byte_range_a3_bf);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_a3_bf, carryQ.get_carry_in(304), r10000_10ffff_tmp444));
            sequence_f0_9f_byte_range_a3_bf_sfx = simd_and(r10000_10ffff_tmp444, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_9f_byte_range_a3_bf_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(305), r10000_10ffff_tmp445));
            sequence_f0_aa_9b = simd_and(r10000_10ffff_tmp445, byte_9b);
            sequence_f0_aa_adv = r10000_10ffff_tmp445;
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(306), sequence_f0_aa_9b_adv));
            r10000_10ffff_tmp446 = simd_and(sequence_f0_aa_9b_adv, byte_range_97_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp446);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(307), r10000_10ffff_tmp447));
            sequence_f0_ab_9c = simd_and(r10000_10ffff_tmp447, byte_9c);
            sequence_f0_ab_adv = r10000_10ffff_tmp447;
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(308), sequence_f0_ab_9c_adv));
            r10000_10ffff_tmp448 = simd_and(sequence_f0_ab_9c_adv, byte_range_b5_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp448);
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(309), sequence_f0_ab_a0_adv));
            r10000_10ffff_tmp449 = simd_and(sequence_f0_ab_a0_adv, byte_range_9e_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp449);
            sequence_f0_ab_byte_range_a1_bf = simd_and(sequence_f0_ab_adv, byte_range_a1_bf);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_a1_bf, carryQ.get_carry_in(310), r10000_10ffff_tmp450));
            sequence_f0_ab_byte_range_a1_bf_sfx = simd_and(r10000_10ffff_tmp450, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_ab_byte_range_a1_bf_sfx);
            byte_range_ac_ae = simd_andc(byte_range_ac_af, r10000_10ffff_tmp16);
            byte_f0_byte_range_ac_ae = simd_and(byte_f0_adv, byte_range_ac_ae);
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae, carryQ.get_carry_in(311), r10000_10ffff_tmp451));
            byte_f0_byte_range_ac_ae_sfx = simd_and(r10000_10ffff_tmp451, byte_range_80_bf);
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_ac_ae_sfx, carryQ.get_carry_in(312), r10000_10ffff_tmp452));
            byte_f0_byte_range_ac_ae_sfx_sfx = simd_and(r10000_10ffff_tmp452, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f0_byte_range_ac_ae_sfx_sfx);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(313), r10000_10ffff_tmp453));
            sequence_f0_af_byte_range_80_9f = simd_and(r10000_10ffff_tmp453, byte_range_80_9f);
            carryQ.cq[314] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_80_9f, carryQ.get_carry_in(314), r10000_10ffff_tmp454));
            sequence_f0_af_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp454, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_af_byte_range_80_9f_sfx);
            sequence_f0_af_a8 = simd_and(r10000_10ffff_tmp453, byte_a8);
            sequence_f0_af_adv = r10000_10ffff_tmp453;
            carryQ.cq[315] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(315), sequence_f0_af_a8_adv));
            r10000_10ffff_tmp455 = simd_and(sequence_f0_af_a8_adv, byte_range_9e_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp455);
            byte_range_a9_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp153);
            sequence_f0_af_byte_range_a9_bf = simd_and(sequence_f0_af_adv, byte_range_a9_bf);
            carryQ.cq[316] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a9_bf, carryQ.get_carry_in(316), r10000_10ffff_tmp456));
            sequence_f0_af_byte_range_a9_bf_sfx = simd_and(r10000_10ffff_tmp456, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f0_af_byte_range_a9_bf_sfx);
            byte_f0_byte_range_b0_bf = simd_and(byte_f0_adv, byte_range_b0_bf);
            carryQ.cq[317] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf, carryQ.get_carry_in(317), r10000_10ffff_tmp457));
            byte_f0_byte_range_b0_bf_sfx = simd_and(r10000_10ffff_tmp457, byte_range_80_bf);
            carryQ.cq[318] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_b0_bf_sfx, carryQ.get_carry_in(318), r10000_10ffff_tmp458));
            byte_f0_byte_range_b0_bf_sfx_sfx = simd_and(r10000_10ffff_tmp458, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f0_byte_range_b0_bf_sfx_sfx);
            r10000_10ffff_tmp459 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp1);
            byte_range_f1_f2 = simd_and(r10000_10ffff_tmp459, r10000_10ffff_tmp109);
            carryQ.cq[319] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(319), r10000_10ffff_tmp460));
            byte_range_f1_f2_sfx = simd_and(r10000_10ffff_tmp460, byte_range_80_bf);
            carryQ.cq[320] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(320), r10000_10ffff_tmp461));
            byte_range_f1_f2_sfx_sfx = simd_and(r10000_10ffff_tmp461, byte_range_80_bf);
            carryQ.cq[321] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(321), r10000_10ffff_tmp462));
            byte_range_f1_f2_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp462, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_range_f1_f2_sfx_sfx_sfx);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp33);
            carryQ.cq[322] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(322), r10000_10ffff_tmp463));
            byte_f3_byte_range_80_9f = simd_and(r10000_10ffff_tmp463, byte_range_80_9f);
            carryQ.cq[323] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f, carryQ.get_carry_in(323), r10000_10ffff_tmp464));
            byte_f3_byte_range_80_9f_sfx = simd_and(r10000_10ffff_tmp464, byte_range_80_bf);
            carryQ.cq[324] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_80_9f_sfx, carryQ.get_carry_in(324), r10000_10ffff_tmp465));
            byte_f3_byte_range_80_9f_sfx_sfx = simd_and(r10000_10ffff_tmp465, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f3_byte_range_80_9f_sfx_sfx);
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp463, byte_a0);
            carryQ.cq[325] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(325), r10000_10ffff_tmp466));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp466, byte_80);
            byte_f3_adv = r10000_10ffff_tmp463;
            sequence_f3_a0_adv = r10000_10ffff_tmp466;
            carryQ.cq[326] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(326), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp467 = simd_and(sequence_f3_a0_80_adv, byte_80);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp467);
            byte_range_82_9f = simd_and(byte_range_80_9f, r10000_10ffff_tmp234);
            r10000_10ffff_tmp468 = simd_and(sequence_f3_a0_80_adv, byte_range_82_9f);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp468);
            r10000_10ffff_tmp469 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp469);
            sequence_f3_a0_byte_range_82_83 = simd_and(sequence_f3_a0_adv, byte_range_82_83);
            carryQ.cq[327] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_82_83, carryQ.get_carry_in(327), r10000_10ffff_tmp470));
            sequence_f3_a0_byte_range_82_83_sfx = simd_and(r10000_10ffff_tmp470, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f3_a0_byte_range_82_83_sfx);
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            carryQ.cq[328] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(328), sequence_f3_a0_87_adv));
            r10000_10ffff_tmp471 = simd_and(sequence_f3_a0_87_adv, byte_range_b0_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, r10000_10ffff_tmp471);
            r10000_10ffff_tmp472 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp99);
            byte_range_88_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp472);
            sequence_f3_a0_byte_range_88_bf = simd_and(sequence_f3_a0_adv, byte_range_88_bf);
            carryQ.cq[329] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_88_bf, carryQ.get_carry_in(329), r10000_10ffff_tmp473));
            sequence_f3_a0_byte_range_88_bf_sfx = simd_and(r10000_10ffff_tmp473, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, sequence_f3_a0_byte_range_88_bf_sfx);
            byte_f3_byte_range_a1_bf = simd_and(byte_f3_adv, byte_range_a1_bf);
            carryQ.cq[330] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_bf, carryQ.get_carry_in(330), r10000_10ffff_tmp474));
            byte_f3_byte_range_a1_bf_sfx = simd_and(r10000_10ffff_tmp474, byte_range_80_bf);
            carryQ.cq[331] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_a1_bf_sfx, carryQ.get_carry_in(331), r10000_10ffff_tmp475));
            byte_f3_byte_range_a1_bf_sfx_sfx = simd_and(r10000_10ffff_tmp475, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f3_byte_range_a1_bf_sfx_sfx);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp37);
            carryQ.cq[332] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(332), r10000_10ffff_tmp476));
            byte_f4_byte_range_80_8f = simd_and(r10000_10ffff_tmp476, byte_range_80_8f);
            carryQ.cq[333] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f, carryQ.get_carry_in(333), r10000_10ffff_tmp477));
            byte_f4_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp477, byte_range_80_bf);
            carryQ.cq[334] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f_sfx, carryQ.get_carry_in(334), r10000_10ffff_tmp478));
            byte_f4_byte_range_80_8f_sfx_sfx = simd_and(r10000_10ffff_tmp478, byte_range_80_bf);
            struct_sc_Zzzz.cc = simd_or(struct_sc_Zzzz.cc, byte_f4_byte_range_80_8f_sfx_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(154, 181);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 335);
        }
        carryQ.CarryQ_Adjust(335);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<335, 0> carryQ;
  };

  struct Property_sc_Saur {
  Property_sc_Saur() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Saur & struct_sc_Saur) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a2, ra000_ffff_tmp8;
		BitBlock sequence_ea_a2, byte_ea_adv, byte_range_80_bf, sequence_ea_a2_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_a3, sequence_ea_a3, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock byte_range_80_84, sequence_ea_a3_adv, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock byte_range_8e_99, ra000_ffff_tmp25;




        struct_sc_Saur.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp6);
              byte_a2 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a2 = simd_and(ra000_ffff_tmp8, byte_a2);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(1), sequence_ea_a2_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a2_adv, byte_range_80_bf);
              struct_sc_Saur.cc = simd_or(struct_sc_Saur.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_andc(ra000_ffff_tmp11, ra000_ffff_tmp6);
              byte_a3 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp14 = simd_andc(byte_range_80_bf, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_andc(ra000_ffff_tmp14, basis_bits.bit_4);
              ra000_ffff_tmp16 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_5, ra000_ffff_tmp16);
              byte_range_80_84 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp17);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(2), sequence_ea_a3_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_a3_adv, byte_range_80_84);
              struct_sc_Saur.cc = simd_or(struct_sc_Saur.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp2);
              ra000_ffff_tmp21 = simd_not(ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp22, basis_bits.bit_6);
              ra000_ffff_tmp24 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp21), simd_andc(ra000_ffff_tmp23, basis_bits.bit_3));
              byte_range_8e_99 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(sequence_ea_a3_adv, byte_range_8e_99);
              struct_sc_Saur.cc = simd_or(struct_sc_Saur.cc, ra000_ffff_tmp25);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sc_Taml {
  Property_sc_Taml() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sc_Taml & struct_sc_Taml) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4, byte_ae;
		BitBlock r800_fff_tmp5, sequence_e0_ae, byte_e0_adv, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_range_82_83, sequence_e0_ae_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, byte_range_85_8a, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock byte_range_8e_90, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, byte_range_92_95, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, byte_range_99_9a;
		BitBlock r800_fff_tmp29, r800_fff_tmp30, byte_9c, r800_fff_tmp31;
		BitBlock byte_range_9e_9f, r800_fff_tmp32, r800_fff_tmp33, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, byte_range_a3_a4, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock byte_range_a8_aa, r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40;
		BitBlock r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43, byte_range_ae_b9;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, r800_fff_tmp46, byte_range_be_bf;
		BitBlock r800_fff_tmp47, r800_fff_tmp48, byte_af, sequence_e0_af;
		BitBlock r800_fff_tmp49, byte_range_80_82, sequence_e0_af_adv, r800_fff_tmp50;
		BitBlock r800_fff_tmp51, r800_fff_tmp52, r800_fff_tmp53, r800_fff_tmp54;
		BitBlock byte_range_86_88, r800_fff_tmp55, r800_fff_tmp56, byte_range_8a_8d;
		BitBlock r800_fff_tmp57, byte_90, r800_fff_tmp58, r800_fff_tmp59, byte_97;
		BitBlock r800_fff_tmp60, r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63;
		BitBlock r800_fff_tmp64, byte_range_a6_ba, r800_fff_tmp65;




        struct_sc_Taml.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  sequence_e0_ae = simd_and(r800_fff_tmp5, byte_ae);
                  byte_e0_adv = r800_fff_tmp5;
                  r800_fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp7 = simd_andc(r800_ffff_tmp5, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_82_83 = simd_and(r800_fff_tmp7, r800_fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(2), sequence_e0_ae_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_ae_adv, byte_range_82_83);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp11 = simd_or(basis_bits.bit_5, r800_fff_tmp10);
                  r800_fff_tmp12 = simd_not(r800_fff_tmp11);
                  r800_fff_tmp13 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp14 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp12), simd_andc(r800_fff_tmp13, basis_bits.bit_4));
                  byte_range_85_8a = simd_and(r800_fff_tmp7, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_and(sequence_e0_ae_adv, byte_range_85_8a);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp17 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp2, basis_bits.bit_6);
                  r800_fff_tmp19 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp17), simd_andc(r800_fff_tmp18, basis_bits.bit_3));
                  byte_range_8e_90 = simd_and(r800_fff_tmp16, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_and(sequence_e0_ae_adv, byte_range_8e_90);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp22 = simd_and(r800_ffff_tmp5, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp22, basis_bits.bit_4);
                  r800_fff_tmp24 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_92_95 = simd_and(r800_fff_tmp23, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_and(sequence_e0_ae_adv, byte_range_92_95);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp27 = simd_and(r800_fff_tmp22, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r800_fff_tmp27, r800_fff_tmp28);
                  r800_fff_tmp29 = simd_and(sequence_e0_ae_adv, byte_range_99_9a);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_andc(r800_fff_tmp2, r800_ffff_tmp3);
                  byte_9c = simd_and(r800_fff_tmp22, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(sequence_e0_ae_adv, byte_9c);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp31);
                  byte_range_9e_9f = simd_and(r800_fff_tmp22, r800_fff_tmp18);
                  r800_fff_tmp32 = simd_and(sequence_e0_ae_adv, byte_range_9e_9f);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp34 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp35 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp34), simd_andc(r800_fff_tmp10, basis_bits.bit_5));
                  byte_range_a3_a4 = simd_and(r800_fff_tmp33, r800_fff_tmp35);
                  r800_fff_tmp36 = simd_and(sequence_e0_ae_adv, byte_range_a3_a4);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  byte_range_a8_aa = simd_andc(r800_fff_tmp37, r800_fff_tmp10);
                  r800_fff_tmp38 = simd_and(sequence_e0_ae_adv, byte_range_a8_aa);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp40 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp41 = simd_and(basis_bits.bit_4, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_not(r800_fff_tmp41);
                  r800_fff_tmp43 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp42), simd_andc(r800_fff_tmp18, basis_bits.bit_3));
                  byte_range_ae_b9 = simd_and(r800_fff_tmp39, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(sequence_e0_ae_adv, byte_range_ae_b9);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp44);
                  r800_fff_tmp45 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp46 = simd_and(r800_ffff_tmp5, r800_fff_tmp45);
                  byte_range_be_bf = simd_and(r800_fff_tmp46, r800_fff_tmp18);
                  r800_fff_tmp47 = simd_and(sequence_e0_ae_adv, byte_range_be_bf);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp47);
                  r800_fff_tmp48 = simd_and(r800_fff_tmp2, r800_fff_tmp10);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp48);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp49 = simd_andc(r800_fff_tmp7, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r800_fff_tmp49, r800_fff_tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(3), sequence_e0_af_adv));
                  r800_fff_tmp50 = simd_and(sequence_e0_af_adv, byte_range_80_82);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp50);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp52 = simd_not(r800_fff_tmp51);
                  r800_fff_tmp53 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp54 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp52), simd_andc(r800_fff_tmp53, basis_bits.bit_4));
                  byte_range_86_88 = simd_and(r800_fff_tmp7, r800_fff_tmp54);
                  r800_fff_tmp55 = simd_and(sequence_e0_af_adv, byte_range_86_88);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp55);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp7, basis_bits.bit_4);
                  byte_range_8a_8d = simd_and(r800_fff_tmp56, r800_fff_tmp24);
                  r800_fff_tmp57 = simd_and(sequence_e0_af_adv, byte_range_8a_8d);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp57);
                  byte_90 = simd_andc(r800_fff_tmp22, r800_1fff_tmp1);
                  r800_fff_tmp58 = simd_and(sequence_e0_af_adv, byte_90);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp58);
                  r800_fff_tmp59 = simd_and(r800_ffff_tmp2, r800_fff_tmp10);
                  byte_97 = simd_and(r800_fff_tmp22, r800_fff_tmp59);
                  r800_fff_tmp60 = simd_and(sequence_e0_af_adv, byte_97);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(basis_bits.bit_4, r800_fff_tmp11);
                  r800_fff_tmp62 = simd_not(r800_fff_tmp61);
                  r800_fff_tmp63 = simd_or(basis_bits.bit_4, r800_fff_tmp53);
                  r800_fff_tmp64 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp62), simd_andc(r800_fff_tmp63, basis_bits.bit_3));
                  byte_range_a6_ba = simd_and(r800_fff_tmp39, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_and(sequence_e0_af_adv, byte_range_a6_ba);
                  struct_sc_Taml.cc = simd_or(struct_sc_Taml.cc, r800_fff_tmp65);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };





Property_sc_Aghb fsc_Aghb;

extern "C" {
    BitBlock __get_sc_Aghb (Basis_bits & basis_bits) {
        Struct_sc_Aghb output;
        fsc_Aghb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Arab fsc_Arab;

extern "C" {
    BitBlock __get_sc_Arab (Basis_bits & basis_bits) {
        Struct_sc_Arab output;
        fsc_Arab . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Armi fsc_Armi;

extern "C" {
    BitBlock __get_sc_Armi (Basis_bits & basis_bits) {
        Struct_sc_Armi output;
        fsc_Armi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Armn fsc_Armn;

extern "C" {
    BitBlock __get_sc_Armn (Basis_bits & basis_bits) {
        Struct_sc_Armn output;
        fsc_Armn . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Avst fsc_Avst;

extern "C" {
    BitBlock __get_sc_Avst (Basis_bits & basis_bits) {
        Struct_sc_Avst output;
        fsc_Avst . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Bali fsc_Bali;

extern "C" {
    BitBlock __get_sc_Bali (Basis_bits & basis_bits) {
        Struct_sc_Bali output;
        fsc_Bali . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Bamu fsc_Bamu;

extern "C" {
    BitBlock __get_sc_Bamu (Basis_bits & basis_bits) {
        Struct_sc_Bamu output;
        fsc_Bamu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Bass fsc_Bass;

extern "C" {
    BitBlock __get_sc_Bass (Basis_bits & basis_bits) {
        Struct_sc_Bass output;
        fsc_Bass . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Batk fsc_Batk;

extern "C" {
    BitBlock __get_sc_Batk (Basis_bits & basis_bits) {
        Struct_sc_Batk output;
        fsc_Batk . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Beng fsc_Beng;

extern "C" {
    BitBlock __get_sc_Beng (Basis_bits & basis_bits) {
        Struct_sc_Beng output;
        fsc_Beng . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Bopo fsc_Bopo;

extern "C" {
    BitBlock __get_sc_Bopo (Basis_bits & basis_bits) {
        Struct_sc_Bopo output;
        fsc_Bopo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Brah fsc_Brah;

extern "C" {
    BitBlock __get_sc_Brah (Basis_bits & basis_bits) {
        Struct_sc_Brah output;
        fsc_Brah . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Brai fsc_Brai;

extern "C" {
    BitBlock __get_sc_Brai (Basis_bits & basis_bits) {
        Struct_sc_Brai output;
        fsc_Brai . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Bugi fsc_Bugi;

extern "C" {
    BitBlock __get_sc_Bugi (Basis_bits & basis_bits) {
        Struct_sc_Bugi output;
        fsc_Bugi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Buhd fsc_Buhd;

extern "C" {
    BitBlock __get_sc_Buhd (Basis_bits & basis_bits) {
        Struct_sc_Buhd output;
        fsc_Buhd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cakm fsc_Cakm;

extern "C" {
    BitBlock __get_sc_Cakm (Basis_bits & basis_bits) {
        Struct_sc_Cakm output;
        fsc_Cakm . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cans fsc_Cans;

extern "C" {
    BitBlock __get_sc_Cans (Basis_bits & basis_bits) {
        Struct_sc_Cans output;
        fsc_Cans . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cari fsc_Cari;

extern "C" {
    BitBlock __get_sc_Cari (Basis_bits & basis_bits) {
        Struct_sc_Cari output;
        fsc_Cari . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cham fsc_Cham;

extern "C" {
    BitBlock __get_sc_Cham (Basis_bits & basis_bits) {
        Struct_sc_Cham output;
        fsc_Cham . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cher fsc_Cher;

extern "C" {
    BitBlock __get_sc_Cher (Basis_bits & basis_bits) {
        Struct_sc_Cher output;
        fsc_Cher . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Copt fsc_Copt;

extern "C" {
    BitBlock __get_sc_Copt (Basis_bits & basis_bits) {
        Struct_sc_Copt output;
        fsc_Copt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cprt fsc_Cprt;

extern "C" {
    BitBlock __get_sc_Cprt (Basis_bits & basis_bits) {
        Struct_sc_Cprt output;
        fsc_Cprt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Cyrl fsc_Cyrl;

extern "C" {
    BitBlock __get_sc_Cyrl (Basis_bits & basis_bits) {
        Struct_sc_Cyrl output;
        fsc_Cyrl . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Deva fsc_Deva;

extern "C" {
    BitBlock __get_sc_Deva (Basis_bits & basis_bits) {
        Struct_sc_Deva output;
        fsc_Deva . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Dsrt fsc_Dsrt;

extern "C" {
    BitBlock __get_sc_Dsrt (Basis_bits & basis_bits) {
        Struct_sc_Dsrt output;
        fsc_Dsrt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Dupl fsc_Dupl;

extern "C" {
    BitBlock __get_sc_Dupl (Basis_bits & basis_bits) {
        Struct_sc_Dupl output;
        fsc_Dupl . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Egyp fsc_Egyp;

extern "C" {
    BitBlock __get_sc_Egyp (Basis_bits & basis_bits) {
        Struct_sc_Egyp output;
        fsc_Egyp . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Elba fsc_Elba;

extern "C" {
    BitBlock __get_sc_Elba (Basis_bits & basis_bits) {
        Struct_sc_Elba output;
        fsc_Elba . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Ethi fsc_Ethi;

extern "C" {
    BitBlock __get_sc_Ethi (Basis_bits & basis_bits) {
        Struct_sc_Ethi output;
        fsc_Ethi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Geor fsc_Geor;

extern "C" {
    BitBlock __get_sc_Geor (Basis_bits & basis_bits) {
        Struct_sc_Geor output;
        fsc_Geor . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Glag fsc_Glag;

extern "C" {
    BitBlock __get_sc_Glag (Basis_bits & basis_bits) {
        Struct_sc_Glag output;
        fsc_Glag . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Goth fsc_Goth;

extern "C" {
    BitBlock __get_sc_Goth (Basis_bits & basis_bits) {
        Struct_sc_Goth output;
        fsc_Goth . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Gran fsc_Gran;

extern "C" {
    BitBlock __get_sc_Gran (Basis_bits & basis_bits) {
        Struct_sc_Gran output;
        fsc_Gran . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Grek fsc_Grek;

extern "C" {
    BitBlock __get_sc_Grek (Basis_bits & basis_bits) {
        Struct_sc_Grek output;
        fsc_Grek . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Gujr fsc_Gujr;

extern "C" {
    BitBlock __get_sc_Gujr (Basis_bits & basis_bits) {
        Struct_sc_Gujr output;
        fsc_Gujr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Guru fsc_Guru;

extern "C" {
    BitBlock __get_sc_Guru (Basis_bits & basis_bits) {
        Struct_sc_Guru output;
        fsc_Guru . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hang fsc_Hang;

extern "C" {
    BitBlock __get_sc_Hang (Basis_bits & basis_bits) {
        Struct_sc_Hang output;
        fsc_Hang . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hani fsc_Hani;

extern "C" {
    BitBlock __get_sc_Hani (Basis_bits & basis_bits) {
        Struct_sc_Hani output;
        fsc_Hani . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hano fsc_Hano;

extern "C" {
    BitBlock __get_sc_Hano (Basis_bits & basis_bits) {
        Struct_sc_Hano output;
        fsc_Hano . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hebr fsc_Hebr;

extern "C" {
    BitBlock __get_sc_Hebr (Basis_bits & basis_bits) {
        Struct_sc_Hebr output;
        fsc_Hebr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hira fsc_Hira;

extern "C" {
    BitBlock __get_sc_Hira (Basis_bits & basis_bits) {
        Struct_sc_Hira output;
        fsc_Hira . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hmng fsc_Hmng;

extern "C" {
    BitBlock __get_sc_Hmng (Basis_bits & basis_bits) {
        Struct_sc_Hmng output;
        fsc_Hmng . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Hrkt fsc_Hrkt;

extern "C" {
    BitBlock __get_sc_Hrkt (Basis_bits & basis_bits) {
        Struct_sc_Hrkt output;
        fsc_Hrkt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Ital fsc_Ital;

extern "C" {
    BitBlock __get_sc_Ital (Basis_bits & basis_bits) {
        Struct_sc_Ital output;
        fsc_Ital . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Java fsc_Java;

extern "C" {
    BitBlock __get_sc_Java (Basis_bits & basis_bits) {
        Struct_sc_Java output;
        fsc_Java . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Kali fsc_Kali;

extern "C" {
    BitBlock __get_sc_Kali (Basis_bits & basis_bits) {
        Struct_sc_Kali output;
        fsc_Kali . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Kana fsc_Kana;

extern "C" {
    BitBlock __get_sc_Kana (Basis_bits & basis_bits) {
        Struct_sc_Kana output;
        fsc_Kana . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Khar fsc_Khar;

extern "C" {
    BitBlock __get_sc_Khar (Basis_bits & basis_bits) {
        Struct_sc_Khar output;
        fsc_Khar . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Khmr fsc_Khmr;

extern "C" {
    BitBlock __get_sc_Khmr (Basis_bits & basis_bits) {
        Struct_sc_Khmr output;
        fsc_Khmr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Khoj fsc_Khoj;

extern "C" {
    BitBlock __get_sc_Khoj (Basis_bits & basis_bits) {
        Struct_sc_Khoj output;
        fsc_Khoj . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Knda fsc_Knda;

extern "C" {
    BitBlock __get_sc_Knda (Basis_bits & basis_bits) {
        Struct_sc_Knda output;
        fsc_Knda . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Kthi fsc_Kthi;

extern "C" {
    BitBlock __get_sc_Kthi (Basis_bits & basis_bits) {
        Struct_sc_Kthi output;
        fsc_Kthi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lana fsc_Lana;

extern "C" {
    BitBlock __get_sc_Lana (Basis_bits & basis_bits) {
        Struct_sc_Lana output;
        fsc_Lana . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Laoo fsc_Laoo;

extern "C" {
    BitBlock __get_sc_Laoo (Basis_bits & basis_bits) {
        Struct_sc_Laoo output;
        fsc_Laoo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Latn fsc_Latn;

extern "C" {
    BitBlock __get_sc_Latn (Basis_bits & basis_bits) {
        Struct_sc_Latn output;
        fsc_Latn . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lepc fsc_Lepc;

extern "C" {
    BitBlock __get_sc_Lepc (Basis_bits & basis_bits) {
        Struct_sc_Lepc output;
        fsc_Lepc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Limb fsc_Limb;

extern "C" {
    BitBlock __get_sc_Limb (Basis_bits & basis_bits) {
        Struct_sc_Limb output;
        fsc_Limb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lina fsc_Lina;

extern "C" {
    BitBlock __get_sc_Lina (Basis_bits & basis_bits) {
        Struct_sc_Lina output;
        fsc_Lina . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Linb fsc_Linb;

extern "C" {
    BitBlock __get_sc_Linb (Basis_bits & basis_bits) {
        Struct_sc_Linb output;
        fsc_Linb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lisu fsc_Lisu;

extern "C" {
    BitBlock __get_sc_Lisu (Basis_bits & basis_bits) {
        Struct_sc_Lisu output;
        fsc_Lisu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lyci fsc_Lyci;

extern "C" {
    BitBlock __get_sc_Lyci (Basis_bits & basis_bits) {
        Struct_sc_Lyci output;
        fsc_Lyci . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Lydi fsc_Lydi;

extern "C" {
    BitBlock __get_sc_Lydi (Basis_bits & basis_bits) {
        Struct_sc_Lydi output;
        fsc_Lydi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mahj fsc_Mahj;

extern "C" {
    BitBlock __get_sc_Mahj (Basis_bits & basis_bits) {
        Struct_sc_Mahj output;
        fsc_Mahj . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mand fsc_Mand;

extern "C" {
    BitBlock __get_sc_Mand (Basis_bits & basis_bits) {
        Struct_sc_Mand output;
        fsc_Mand . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mani fsc_Mani;

extern "C" {
    BitBlock __get_sc_Mani (Basis_bits & basis_bits) {
        Struct_sc_Mani output;
        fsc_Mani . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mend fsc_Mend;

extern "C" {
    BitBlock __get_sc_Mend (Basis_bits & basis_bits) {
        Struct_sc_Mend output;
        fsc_Mend . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Merc fsc_Merc;

extern "C" {
    BitBlock __get_sc_Merc (Basis_bits & basis_bits) {
        Struct_sc_Merc output;
        fsc_Merc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mero fsc_Mero;

extern "C" {
    BitBlock __get_sc_Mero (Basis_bits & basis_bits) {
        Struct_sc_Mero output;
        fsc_Mero . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mlym fsc_Mlym;

extern "C" {
    BitBlock __get_sc_Mlym (Basis_bits & basis_bits) {
        Struct_sc_Mlym output;
        fsc_Mlym . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Modi fsc_Modi;

extern "C" {
    BitBlock __get_sc_Modi (Basis_bits & basis_bits) {
        Struct_sc_Modi output;
        fsc_Modi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mong fsc_Mong;

extern "C" {
    BitBlock __get_sc_Mong (Basis_bits & basis_bits) {
        Struct_sc_Mong output;
        fsc_Mong . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mroo fsc_Mroo;

extern "C" {
    BitBlock __get_sc_Mroo (Basis_bits & basis_bits) {
        Struct_sc_Mroo output;
        fsc_Mroo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mtei fsc_Mtei;

extern "C" {
    BitBlock __get_sc_Mtei (Basis_bits & basis_bits) {
        Struct_sc_Mtei output;
        fsc_Mtei . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Mymr fsc_Mymr;

extern "C" {
    BitBlock __get_sc_Mymr (Basis_bits & basis_bits) {
        Struct_sc_Mymr output;
        fsc_Mymr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Narb fsc_Narb;

extern "C" {
    BitBlock __get_sc_Narb (Basis_bits & basis_bits) {
        Struct_sc_Narb output;
        fsc_Narb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Nbat fsc_Nbat;

extern "C" {
    BitBlock __get_sc_Nbat (Basis_bits & basis_bits) {
        Struct_sc_Nbat output;
        fsc_Nbat . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Nkoo fsc_Nkoo;

extern "C" {
    BitBlock __get_sc_Nkoo (Basis_bits & basis_bits) {
        Struct_sc_Nkoo output;
        fsc_Nkoo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Ogam fsc_Ogam;

extern "C" {
    BitBlock __get_sc_Ogam (Basis_bits & basis_bits) {
        Struct_sc_Ogam output;
        fsc_Ogam . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Olck fsc_Olck;

extern "C" {
    BitBlock __get_sc_Olck (Basis_bits & basis_bits) {
        Struct_sc_Olck output;
        fsc_Olck . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Orkh fsc_Orkh;

extern "C" {
    BitBlock __get_sc_Orkh (Basis_bits & basis_bits) {
        Struct_sc_Orkh output;
        fsc_Orkh . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Orya fsc_Orya;

extern "C" {
    BitBlock __get_sc_Orya (Basis_bits & basis_bits) {
        Struct_sc_Orya output;
        fsc_Orya . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Osma fsc_Osma;

extern "C" {
    BitBlock __get_sc_Osma (Basis_bits & basis_bits) {
        Struct_sc_Osma output;
        fsc_Osma . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Palm fsc_Palm;

extern "C" {
    BitBlock __get_sc_Palm (Basis_bits & basis_bits) {
        Struct_sc_Palm output;
        fsc_Palm . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Pauc fsc_Pauc;

extern "C" {
    BitBlock __get_sc_Pauc (Basis_bits & basis_bits) {
        Struct_sc_Pauc output;
        fsc_Pauc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Perm fsc_Perm;

extern "C" {
    BitBlock __get_sc_Perm (Basis_bits & basis_bits) {
        Struct_sc_Perm output;
        fsc_Perm . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Phag fsc_Phag;

extern "C" {
    BitBlock __get_sc_Phag (Basis_bits & basis_bits) {
        Struct_sc_Phag output;
        fsc_Phag . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Phli fsc_Phli;

extern "C" {
    BitBlock __get_sc_Phli (Basis_bits & basis_bits) {
        Struct_sc_Phli output;
        fsc_Phli . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Phlp fsc_Phlp;

extern "C" {
    BitBlock __get_sc_Phlp (Basis_bits & basis_bits) {
        Struct_sc_Phlp output;
        fsc_Phlp . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Phnx fsc_Phnx;

extern "C" {
    BitBlock __get_sc_Phnx (Basis_bits & basis_bits) {
        Struct_sc_Phnx output;
        fsc_Phnx . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Plrd fsc_Plrd;

extern "C" {
    BitBlock __get_sc_Plrd (Basis_bits & basis_bits) {
        Struct_sc_Plrd output;
        fsc_Plrd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Prti fsc_Prti;

extern "C" {
    BitBlock __get_sc_Prti (Basis_bits & basis_bits) {
        Struct_sc_Prti output;
        fsc_Prti . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Rjng fsc_Rjng;

extern "C" {
    BitBlock __get_sc_Rjng (Basis_bits & basis_bits) {
        Struct_sc_Rjng output;
        fsc_Rjng . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Runr fsc_Runr;

extern "C" {
    BitBlock __get_sc_Runr (Basis_bits & basis_bits) {
        Struct_sc_Runr output;
        fsc_Runr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Samr fsc_Samr;

extern "C" {
    BitBlock __get_sc_Samr (Basis_bits & basis_bits) {
        Struct_sc_Samr output;
        fsc_Samr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sarb fsc_Sarb;

extern "C" {
    BitBlock __get_sc_Sarb (Basis_bits & basis_bits) {
        Struct_sc_Sarb output;
        fsc_Sarb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Saur fsc_Saur;

extern "C" {
    BitBlock __get_sc_Saur (Basis_bits & basis_bits) {
        Struct_sc_Saur output;
        fsc_Saur . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Shaw fsc_Shaw;

extern "C" {
    BitBlock __get_sc_Shaw (Basis_bits & basis_bits) {
        Struct_sc_Shaw output;
        fsc_Shaw . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Shrd fsc_Shrd;

extern "C" {
    BitBlock __get_sc_Shrd (Basis_bits & basis_bits) {
        Struct_sc_Shrd output;
        fsc_Shrd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sidd fsc_Sidd;

extern "C" {
    BitBlock __get_sc_Sidd (Basis_bits & basis_bits) {
        Struct_sc_Sidd output;
        fsc_Sidd . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sind fsc_Sind;

extern "C" {
    BitBlock __get_sc_Sind (Basis_bits & basis_bits) {
        Struct_sc_Sind output;
        fsc_Sind . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sinh fsc_Sinh;

extern "C" {
    BitBlock __get_sc_Sinh (Basis_bits & basis_bits) {
        Struct_sc_Sinh output;
        fsc_Sinh . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sora fsc_Sora;

extern "C" {
    BitBlock __get_sc_Sora (Basis_bits & basis_bits) {
        Struct_sc_Sora output;
        fsc_Sora . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sund fsc_Sund;

extern "C" {
    BitBlock __get_sc_Sund (Basis_bits & basis_bits) {
        Struct_sc_Sund output;
        fsc_Sund . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Sylo fsc_Sylo;

extern "C" {
    BitBlock __get_sc_Sylo (Basis_bits & basis_bits) {
        Struct_sc_Sylo output;
        fsc_Sylo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Syrc fsc_Syrc;

extern "C" {
    BitBlock __get_sc_Syrc (Basis_bits & basis_bits) {
        Struct_sc_Syrc output;
        fsc_Syrc . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tagb fsc_Tagb;

extern "C" {
    BitBlock __get_sc_Tagb (Basis_bits & basis_bits) {
        Struct_sc_Tagb output;
        fsc_Tagb . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Takr fsc_Takr;

extern "C" {
    BitBlock __get_sc_Takr (Basis_bits & basis_bits) {
        Struct_sc_Takr output;
        fsc_Takr . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tale fsc_Tale;

extern "C" {
    BitBlock __get_sc_Tale (Basis_bits & basis_bits) {
        Struct_sc_Tale output;
        fsc_Tale . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Talu fsc_Talu;

extern "C" {
    BitBlock __get_sc_Talu (Basis_bits & basis_bits) {
        Struct_sc_Talu output;
        fsc_Talu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Taml fsc_Taml;

extern "C" {
    BitBlock __get_sc_Taml (Basis_bits & basis_bits) {
        Struct_sc_Taml output;
        fsc_Taml . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tavt fsc_Tavt;

extern "C" {
    BitBlock __get_sc_Tavt (Basis_bits & basis_bits) {
        Struct_sc_Tavt output;
        fsc_Tavt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Telu fsc_Telu;

extern "C" {
    BitBlock __get_sc_Telu (Basis_bits & basis_bits) {
        Struct_sc_Telu output;
        fsc_Telu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tfng fsc_Tfng;

extern "C" {
    BitBlock __get_sc_Tfng (Basis_bits & basis_bits) {
        Struct_sc_Tfng output;
        fsc_Tfng . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tglg fsc_Tglg;

extern "C" {
    BitBlock __get_sc_Tglg (Basis_bits & basis_bits) {
        Struct_sc_Tglg output;
        fsc_Tglg . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Thaa fsc_Thaa;

extern "C" {
    BitBlock __get_sc_Thaa (Basis_bits & basis_bits) {
        Struct_sc_Thaa output;
        fsc_Thaa . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Thai fsc_Thai;

extern "C" {
    BitBlock __get_sc_Thai (Basis_bits & basis_bits) {
        Struct_sc_Thai output;
        fsc_Thai . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tibt fsc_Tibt;

extern "C" {
    BitBlock __get_sc_Tibt (Basis_bits & basis_bits) {
        Struct_sc_Tibt output;
        fsc_Tibt . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Tirh fsc_Tirh;

extern "C" {
    BitBlock __get_sc_Tirh (Basis_bits & basis_bits) {
        Struct_sc_Tirh output;
        fsc_Tirh . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Ugar fsc_Ugar;

extern "C" {
    BitBlock __get_sc_Ugar (Basis_bits & basis_bits) {
        Struct_sc_Ugar output;
        fsc_Ugar . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Vaii fsc_Vaii;

extern "C" {
    BitBlock __get_sc_Vaii (Basis_bits & basis_bits) {
        Struct_sc_Vaii output;
        fsc_Vaii . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Wara fsc_Wara;

extern "C" {
    BitBlock __get_sc_Wara (Basis_bits & basis_bits) {
        Struct_sc_Wara output;
        fsc_Wara . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Xpeo fsc_Xpeo;

extern "C" {
    BitBlock __get_sc_Xpeo (Basis_bits & basis_bits) {
        Struct_sc_Xpeo output;
        fsc_Xpeo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Xsux fsc_Xsux;

extern "C" {
    BitBlock __get_sc_Xsux (Basis_bits & basis_bits) {
        Struct_sc_Xsux output;
        fsc_Xsux . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Yiii fsc_Yiii;

extern "C" {
    BitBlock __get_sc_Yiii (Basis_bits & basis_bits) {
        Struct_sc_Yiii output;
        fsc_Yiii . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Zinh fsc_Zinh;

extern "C" {
    BitBlock __get_sc_Zinh (Basis_bits & basis_bits) {
        Struct_sc_Zinh output;
        fsc_Zinh . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Zyyy fsc_Zyyy;

extern "C" {
    BitBlock __get_sc_Zyyy (Basis_bits & basis_bits) {
        Struct_sc_Zyyy output;
        fsc_Zyyy . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sc_Zzzz fsc_Zzzz;

extern "C" {
    BitBlock __get_sc_Zzzz (Basis_bits & basis_bits) {
        Struct_sc_Zzzz output;
        fsc_Zzzz . do_block(basis_bits, output);
        return output.cc;
    }
}

void install_property_sc_fn_ptrs(pablo::PabloCompiler & p) {
    p.InstallExternalFunction("__get_sc_Aghb", (void *) & __get_sc_Aghb);
  p.InstallExternalFunction("__get_sc_Arab", (void *) & __get_sc_Arab);
  p.InstallExternalFunction("__get_sc_Armi", (void *) & __get_sc_Armi);
  p.InstallExternalFunction("__get_sc_Armn", (void *) & __get_sc_Armn);
  p.InstallExternalFunction("__get_sc_Avst", (void *) & __get_sc_Avst);
  p.InstallExternalFunction("__get_sc_Bali", (void *) & __get_sc_Bali);
  p.InstallExternalFunction("__get_sc_Bamu", (void *) & __get_sc_Bamu);
  p.InstallExternalFunction("__get_sc_Bass", (void *) & __get_sc_Bass);
  p.InstallExternalFunction("__get_sc_Batk", (void *) & __get_sc_Batk);
  p.InstallExternalFunction("__get_sc_Beng", (void *) & __get_sc_Beng);
  p.InstallExternalFunction("__get_sc_Bopo", (void *) & __get_sc_Bopo);
  p.InstallExternalFunction("__get_sc_Brah", (void *) & __get_sc_Brah);
  p.InstallExternalFunction("__get_sc_Brai", (void *) & __get_sc_Brai);
  p.InstallExternalFunction("__get_sc_Bugi", (void *) & __get_sc_Bugi);
  p.InstallExternalFunction("__get_sc_Buhd", (void *) & __get_sc_Buhd);
  p.InstallExternalFunction("__get_sc_Cakm", (void *) & __get_sc_Cakm);
  p.InstallExternalFunction("__get_sc_Cans", (void *) & __get_sc_Cans);
  p.InstallExternalFunction("__get_sc_Cari", (void *) & __get_sc_Cari);
  p.InstallExternalFunction("__get_sc_Cham", (void *) & __get_sc_Cham);
  p.InstallExternalFunction("__get_sc_Cher", (void *) & __get_sc_Cher);
  p.InstallExternalFunction("__get_sc_Copt", (void *) & __get_sc_Copt);
  p.InstallExternalFunction("__get_sc_Cprt", (void *) & __get_sc_Cprt);
  p.InstallExternalFunction("__get_sc_Cyrl", (void *) & __get_sc_Cyrl);
  p.InstallExternalFunction("__get_sc_Deva", (void *) & __get_sc_Deva);
  p.InstallExternalFunction("__get_sc_Dsrt", (void *) & __get_sc_Dsrt);
  p.InstallExternalFunction("__get_sc_Dupl", (void *) & __get_sc_Dupl);
  p.InstallExternalFunction("__get_sc_Egyp", (void *) & __get_sc_Egyp);
  p.InstallExternalFunction("__get_sc_Elba", (void *) & __get_sc_Elba);
  p.InstallExternalFunction("__get_sc_Ethi", (void *) & __get_sc_Ethi);
  p.InstallExternalFunction("__get_sc_Geor", (void *) & __get_sc_Geor);
  p.InstallExternalFunction("__get_sc_Glag", (void *) & __get_sc_Glag);
  p.InstallExternalFunction("__get_sc_Goth", (void *) & __get_sc_Goth);
  p.InstallExternalFunction("__get_sc_Gran", (void *) & __get_sc_Gran);
  p.InstallExternalFunction("__get_sc_Grek", (void *) & __get_sc_Grek);
  p.InstallExternalFunction("__get_sc_Gujr", (void *) & __get_sc_Gujr);
  p.InstallExternalFunction("__get_sc_Guru", (void *) & __get_sc_Guru);
  p.InstallExternalFunction("__get_sc_Hang", (void *) & __get_sc_Hang);
  p.InstallExternalFunction("__get_sc_Hani", (void *) & __get_sc_Hani);
  p.InstallExternalFunction("__get_sc_Hano", (void *) & __get_sc_Hano);
  p.InstallExternalFunction("__get_sc_Hebr", (void *) & __get_sc_Hebr);
  p.InstallExternalFunction("__get_sc_Hira", (void *) & __get_sc_Hira);
  p.InstallExternalFunction("__get_sc_Hmng", (void *) & __get_sc_Hmng);
  p.InstallExternalFunction("__get_sc_Hrkt", (void *) & __get_sc_Hrkt);
  p.InstallExternalFunction("__get_sc_Ital", (void *) & __get_sc_Ital);
  p.InstallExternalFunction("__get_sc_Java", (void *) & __get_sc_Java);
  p.InstallExternalFunction("__get_sc_Kali", (void *) & __get_sc_Kali);
  p.InstallExternalFunction("__get_sc_Kana", (void *) & __get_sc_Kana);
  p.InstallExternalFunction("__get_sc_Khar", (void *) & __get_sc_Khar);
  p.InstallExternalFunction("__get_sc_Khmr", (void *) & __get_sc_Khmr);
  p.InstallExternalFunction("__get_sc_Khoj", (void *) & __get_sc_Khoj);
  p.InstallExternalFunction("__get_sc_Knda", (void *) & __get_sc_Knda);
  p.InstallExternalFunction("__get_sc_Kthi", (void *) & __get_sc_Kthi);
  p.InstallExternalFunction("__get_sc_Lana", (void *) & __get_sc_Lana);
  p.InstallExternalFunction("__get_sc_Laoo", (void *) & __get_sc_Laoo);
  p.InstallExternalFunction("__get_sc_Latn", (void *) & __get_sc_Latn);
  p.InstallExternalFunction("__get_sc_Lepc", (void *) & __get_sc_Lepc);
  p.InstallExternalFunction("__get_sc_Limb", (void *) & __get_sc_Limb);
  p.InstallExternalFunction("__get_sc_Lina", (void *) & __get_sc_Lina);
  p.InstallExternalFunction("__get_sc_Linb", (void *) & __get_sc_Linb);
  p.InstallExternalFunction("__get_sc_Lisu", (void *) & __get_sc_Lisu);
  p.InstallExternalFunction("__get_sc_Lyci", (void *) & __get_sc_Lyci);
  p.InstallExternalFunction("__get_sc_Lydi", (void *) & __get_sc_Lydi);
  p.InstallExternalFunction("__get_sc_Mahj", (void *) & __get_sc_Mahj);
  p.InstallExternalFunction("__get_sc_Mand", (void *) & __get_sc_Mand);
  p.InstallExternalFunction("__get_sc_Mani", (void *) & __get_sc_Mani);
  p.InstallExternalFunction("__get_sc_Mend", (void *) & __get_sc_Mend);
  p.InstallExternalFunction("__get_sc_Merc", (void *) & __get_sc_Merc);
  p.InstallExternalFunction("__get_sc_Mero", (void *) & __get_sc_Mero);
  p.InstallExternalFunction("__get_sc_Mlym", (void *) & __get_sc_Mlym);
  p.InstallExternalFunction("__get_sc_Modi", (void *) & __get_sc_Modi);
  p.InstallExternalFunction("__get_sc_Mong", (void *) & __get_sc_Mong);
  p.InstallExternalFunction("__get_sc_Mroo", (void *) & __get_sc_Mroo);
  p.InstallExternalFunction("__get_sc_Mtei", (void *) & __get_sc_Mtei);
  p.InstallExternalFunction("__get_sc_Mymr", (void *) & __get_sc_Mymr);
  p.InstallExternalFunction("__get_sc_Narb", (void *) & __get_sc_Narb);
  p.InstallExternalFunction("__get_sc_Nbat", (void *) & __get_sc_Nbat);
  p.InstallExternalFunction("__get_sc_Nkoo", (void *) & __get_sc_Nkoo);
  p.InstallExternalFunction("__get_sc_Ogam", (void *) & __get_sc_Ogam);
  p.InstallExternalFunction("__get_sc_Olck", (void *) & __get_sc_Olck);
  p.InstallExternalFunction("__get_sc_Orkh", (void *) & __get_sc_Orkh);
  p.InstallExternalFunction("__get_sc_Orya", (void *) & __get_sc_Orya);
  p.InstallExternalFunction("__get_sc_Osma", (void *) & __get_sc_Osma);
  p.InstallExternalFunction("__get_sc_Palm", (void *) & __get_sc_Palm);
  p.InstallExternalFunction("__get_sc_Pauc", (void *) & __get_sc_Pauc);
  p.InstallExternalFunction("__get_sc_Perm", (void *) & __get_sc_Perm);
  p.InstallExternalFunction("__get_sc_Phag", (void *) & __get_sc_Phag);
  p.InstallExternalFunction("__get_sc_Phli", (void *) & __get_sc_Phli);
  p.InstallExternalFunction("__get_sc_Phlp", (void *) & __get_sc_Phlp);
  p.InstallExternalFunction("__get_sc_Phnx", (void *) & __get_sc_Phnx);
  p.InstallExternalFunction("__get_sc_Plrd", (void *) & __get_sc_Plrd);
  p.InstallExternalFunction("__get_sc_Prti", (void *) & __get_sc_Prti);
  p.InstallExternalFunction("__get_sc_Rjng", (void *) & __get_sc_Rjng);
  p.InstallExternalFunction("__get_sc_Runr", (void *) & __get_sc_Runr);
  p.InstallExternalFunction("__get_sc_Samr", (void *) & __get_sc_Samr);
  p.InstallExternalFunction("__get_sc_Sarb", (void *) & __get_sc_Sarb);
  p.InstallExternalFunction("__get_sc_Saur", (void *) & __get_sc_Saur);
  p.InstallExternalFunction("__get_sc_Shaw", (void *) & __get_sc_Shaw);
  p.InstallExternalFunction("__get_sc_Shrd", (void *) & __get_sc_Shrd);
  p.InstallExternalFunction("__get_sc_Sidd", (void *) & __get_sc_Sidd);
  p.InstallExternalFunction("__get_sc_Sind", (void *) & __get_sc_Sind);
  p.InstallExternalFunction("__get_sc_Sinh", (void *) & __get_sc_Sinh);
  p.InstallExternalFunction("__get_sc_Sora", (void *) & __get_sc_Sora);
  p.InstallExternalFunction("__get_sc_Sund", (void *) & __get_sc_Sund);
  p.InstallExternalFunction("__get_sc_Sylo", (void *) & __get_sc_Sylo);
  p.InstallExternalFunction("__get_sc_Syrc", (void *) & __get_sc_Syrc);
  p.InstallExternalFunction("__get_sc_Tagb", (void *) & __get_sc_Tagb);
  p.InstallExternalFunction("__get_sc_Takr", (void *) & __get_sc_Takr);
  p.InstallExternalFunction("__get_sc_Tale", (void *) & __get_sc_Tale);
  p.InstallExternalFunction("__get_sc_Talu", (void *) & __get_sc_Talu);
  p.InstallExternalFunction("__get_sc_Taml", (void *) & __get_sc_Taml);
  p.InstallExternalFunction("__get_sc_Tavt", (void *) & __get_sc_Tavt);
  p.InstallExternalFunction("__get_sc_Telu", (void *) & __get_sc_Telu);
  p.InstallExternalFunction("__get_sc_Tfng", (void *) & __get_sc_Tfng);
  p.InstallExternalFunction("__get_sc_Tglg", (void *) & __get_sc_Tglg);
  p.InstallExternalFunction("__get_sc_Thaa", (void *) & __get_sc_Thaa);
  p.InstallExternalFunction("__get_sc_Thai", (void *) & __get_sc_Thai);
  p.InstallExternalFunction("__get_sc_Tibt", (void *) & __get_sc_Tibt);
  p.InstallExternalFunction("__get_sc_Tirh", (void *) & __get_sc_Tirh);
  p.InstallExternalFunction("__get_sc_Ugar", (void *) & __get_sc_Ugar);
  p.InstallExternalFunction("__get_sc_Vaii", (void *) & __get_sc_Vaii);
  p.InstallExternalFunction("__get_sc_Wara", (void *) & __get_sc_Wara);
  p.InstallExternalFunction("__get_sc_Xpeo", (void *) & __get_sc_Xpeo);
  p.InstallExternalFunction("__get_sc_Xsux", (void *) & __get_sc_Xsux);
  p.InstallExternalFunction("__get_sc_Yiii", (void *) & __get_sc_Yiii);
  p.InstallExternalFunction("__get_sc_Zinh", (void *) & __get_sc_Zinh);
  p.InstallExternalFunction("__get_sc_Zyyy", (void *) & __get_sc_Zyyy);
  p.InstallExternalFunction("__get_sc_Zzzz", (void *) & __get_sc_Zzzz);

}

#endif
