#ifndef UCD_PRECOMPILED_BLK_H
#define UCD_PRECOMPILED_BLK_H
/*
 *  Copyright (c) 2014 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include "pablo/pablo_compiler.h"


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\


  struct Struct_blk_Aegean_Numbers {
  BitBlock cc;
};

  struct Struct_blk_Alchemical {
  BitBlock cc;
};

  struct Struct_blk_Alphabetic_PF {
  BitBlock cc;
};

  struct Struct_blk_Ancient_Greek_Music {
  BitBlock cc;
};

  struct Struct_blk_Ancient_Greek_Numbers {
  BitBlock cc;
};

  struct Struct_blk_Ancient_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Arabic {
  BitBlock cc;
};

  struct Struct_blk_Arabic_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Arabic_Math {
  BitBlock cc;
};

  struct Struct_blk_Arabic_PF_A {
  BitBlock cc;
};

  struct Struct_blk_Arabic_PF_B {
  BitBlock cc;
};

  struct Struct_blk_Arabic_Sup {
  BitBlock cc;
};

  struct Struct_blk_Armenian {
  BitBlock cc;
};

  struct Struct_blk_Arrows {
  BitBlock cc;
};

  struct Struct_blk_ASCII {
  BitBlock cc;
};

  struct Struct_blk_Avestan {
  BitBlock cc;
};

  struct Struct_blk_Balinese {
  BitBlock cc;
};

  struct Struct_blk_Bamum {
  BitBlock cc;
};

  struct Struct_blk_Bamum_Sup {
  BitBlock cc;
};

  struct Struct_blk_Bassa_Vah {
  BitBlock cc;
};

  struct Struct_blk_Batak {
  BitBlock cc;
};

  struct Struct_blk_Bengali {
  BitBlock cc;
};

  struct Struct_blk_Block_Elements {
  BitBlock cc;
};

  struct Struct_blk_Bopomofo {
  BitBlock cc;
};

  struct Struct_blk_Bopomofo_Ext {
  BitBlock cc;
};

  struct Struct_blk_Box_Drawing {
  BitBlock cc;
};

  struct Struct_blk_Brahmi {
  BitBlock cc;
};

  struct Struct_blk_Braille {
  BitBlock cc;
};

  struct Struct_blk_Buginese {
  BitBlock cc;
};

  struct Struct_blk_Buhid {
  BitBlock cc;
};

  struct Struct_blk_Byzantine_Music {
  BitBlock cc;
};

  struct Struct_blk_Carian {
  BitBlock cc;
};

  struct Struct_blk_Caucasian_Albanian {
  BitBlock cc;
};

  struct Struct_blk_Chakma {
  BitBlock cc;
};

  struct Struct_blk_Cham {
  BitBlock cc;
};

  struct Struct_blk_Cherokee {
  BitBlock cc;
};

  struct Struct_blk_CJK {
  BitBlock cc;
};

  struct Struct_blk_CJK_Compat {
  BitBlock cc;
};

  struct Struct_blk_CJK_Compat_Forms {
  BitBlock cc;
};

  struct Struct_blk_CJK_Compat_Ideographs {
  BitBlock cc;
};

  struct Struct_blk_CJK_Compat_Ideographs_Sup {
  BitBlock cc;
};

  struct Struct_blk_CJK_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_CJK_Ext_B {
  BitBlock cc;
};

  struct Struct_blk_CJK_Ext_C {
  BitBlock cc;
};

  struct Struct_blk_CJK_Ext_D {
  BitBlock cc;
};

  struct Struct_blk_CJK_Radicals_Sup {
  BitBlock cc;
};

  struct Struct_blk_CJK_Strokes {
  BitBlock cc;
};

  struct Struct_blk_CJK_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Compat_Jamo {
  BitBlock cc;
};

  struct Struct_blk_Control_Pictures {
  BitBlock cc;
};

  struct Struct_blk_Coptic {
  BitBlock cc;
};

  struct Struct_blk_Coptic_Epact_Numbers {
  BitBlock cc;
};

  struct Struct_blk_Counting_Rod {
  BitBlock cc;
};

  struct Struct_blk_Cuneiform {
  BitBlock cc;
};

  struct Struct_blk_Cuneiform_Numbers {
  BitBlock cc;
};

  struct Struct_blk_Currency_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Cypriot_Syllabary {
  BitBlock cc;
};

  struct Struct_blk_Cyrillic {
  BitBlock cc;
};

  struct Struct_blk_Cyrillic_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Cyrillic_Ext_B {
  BitBlock cc;
};

  struct Struct_blk_Cyrillic_Sup {
  BitBlock cc;
};

  struct Struct_blk_Deseret {
  BitBlock cc;
};

  struct Struct_blk_Devanagari {
  BitBlock cc;
};

  struct Struct_blk_Devanagari_Ext {
  BitBlock cc;
};

  struct Struct_blk_Diacriticals {
  BitBlock cc;
};

  struct Struct_blk_Diacriticals_Ext {
  BitBlock cc;
};

  struct Struct_blk_Diacriticals_For_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Diacriticals_Sup {
  BitBlock cc;
};

  struct Struct_blk_Dingbats {
  BitBlock cc;
};

  struct Struct_blk_Domino {
  BitBlock cc;
};

  struct Struct_blk_Duployan {
  BitBlock cc;
};

  struct Struct_blk_Egyptian_Hieroglyphs {
  BitBlock cc;
};

  struct Struct_blk_Elbasan {
  BitBlock cc;
};

  struct Struct_blk_Emoticons {
  BitBlock cc;
};

  struct Struct_blk_Enclosed_Alphanum {
  BitBlock cc;
};

  struct Struct_blk_Enclosed_Alphanum_Sup {
  BitBlock cc;
};

  struct Struct_blk_Enclosed_CJK {
  BitBlock cc;
};

  struct Struct_blk_Enclosed_Ideographic_Sup {
  BitBlock cc;
};

  struct Struct_blk_Ethiopic {
  BitBlock cc;
};

  struct Struct_blk_Ethiopic_Ext {
  BitBlock cc;
};

  struct Struct_blk_Ethiopic_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Ethiopic_Sup {
  BitBlock cc;
};

  struct Struct_blk_Geometric_Shapes {
  BitBlock cc;
};

  struct Struct_blk_Geometric_Shapes_Ext {
  BitBlock cc;
};

  struct Struct_blk_Georgian {
  BitBlock cc;
};

  struct Struct_blk_Georgian_Sup {
  BitBlock cc;
};

  struct Struct_blk_Glagolitic {
  BitBlock cc;
};

  struct Struct_blk_Gothic {
  BitBlock cc;
};

  struct Struct_blk_Grantha {
  BitBlock cc;
};

  struct Struct_blk_Greek {
  BitBlock cc;
};

  struct Struct_blk_Greek_Ext {
  BitBlock cc;
};

  struct Struct_blk_Gujarati {
  BitBlock cc;
};

  struct Struct_blk_Gurmukhi {
  BitBlock cc;
};

  struct Struct_blk_Half_And_Full_Forms {
  BitBlock cc;
};

  struct Struct_blk_Half_Marks {
  BitBlock cc;
};

  struct Struct_blk_Hangul {
  BitBlock cc;
};

  struct Struct_blk_Hanunoo {
  BitBlock cc;
};

  struct Struct_blk_Hebrew {
  BitBlock cc;
};

  struct Struct_blk_High_PU_Surrogates {
  BitBlock cc;
};

  struct Struct_blk_High_Surrogates {
  BitBlock cc;
};

  struct Struct_blk_Hiragana {
  BitBlock cc;
};

  struct Struct_blk_IDC {
  BitBlock cc;
};

  struct Struct_blk_Imperial_Aramaic {
  BitBlock cc;
};

  struct Struct_blk_Indic_Number_Forms {
  BitBlock cc;
};

  struct Struct_blk_Inscriptional_Pahlavi {
  BitBlock cc;
};

  struct Struct_blk_Inscriptional_Parthian {
  BitBlock cc;
};

  struct Struct_blk_IPA_Ext {
  BitBlock cc;
};

  struct Struct_blk_Jamo {
  BitBlock cc;
};

  struct Struct_blk_Jamo_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Jamo_Ext_B {
  BitBlock cc;
};

  struct Struct_blk_Javanese {
  BitBlock cc;
};

  struct Struct_blk_Kaithi {
  BitBlock cc;
};

  struct Struct_blk_Kana_Sup {
  BitBlock cc;
};

  struct Struct_blk_Kanbun {
  BitBlock cc;
};

  struct Struct_blk_Kangxi {
  BitBlock cc;
};

  struct Struct_blk_Kannada {
  BitBlock cc;
};

  struct Struct_blk_Katakana {
  BitBlock cc;
};

  struct Struct_blk_Katakana_Ext {
  BitBlock cc;
};

  struct Struct_blk_Kayah_Li {
  BitBlock cc;
};

  struct Struct_blk_Kharoshthi {
  BitBlock cc;
};

  struct Struct_blk_Khmer {
  BitBlock cc;
};

  struct Struct_blk_Khmer_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Khojki {
  BitBlock cc;
};

  struct Struct_blk_Khudawadi {
  BitBlock cc;
};

  struct Struct_blk_Lao {
  BitBlock cc;
};

  struct Struct_blk_Latin_1_Sup {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_Additional {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_B {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_C {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_D {
  BitBlock cc;
};

  struct Struct_blk_Latin_Ext_E {
  BitBlock cc;
};

  struct Struct_blk_Lepcha {
  BitBlock cc;
};

  struct Struct_blk_Letterlike_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Limbu {
  BitBlock cc;
};

  struct Struct_blk_Linear_A {
  BitBlock cc;
};

  struct Struct_blk_Linear_B_Ideograms {
  BitBlock cc;
};

  struct Struct_blk_Linear_B_Syllabary {
  BitBlock cc;
};

  struct Struct_blk_Lisu {
  BitBlock cc;
};

  struct Struct_blk_Low_Surrogates {
  BitBlock cc;
};

  struct Struct_blk_Lycian {
  BitBlock cc;
};

  struct Struct_blk_Lydian {
  BitBlock cc;
};

  struct Struct_blk_Mahajani {
  BitBlock cc;
};

  struct Struct_blk_Mahjong {
  BitBlock cc;
};

  struct Struct_blk_Malayalam {
  BitBlock cc;
};

  struct Struct_blk_Mandaic {
  BitBlock cc;
};

  struct Struct_blk_Manichaean {
  BitBlock cc;
};

  struct Struct_blk_Math_Alphanum {
  BitBlock cc;
};

  struct Struct_blk_Math_Operators {
  BitBlock cc;
};

  struct Struct_blk_Meetei_Mayek {
  BitBlock cc;
};

  struct Struct_blk_Meetei_Mayek_Ext {
  BitBlock cc;
};

  struct Struct_blk_Mende_Kikakui {
  BitBlock cc;
};

  struct Struct_blk_Meroitic_Cursive {
  BitBlock cc;
};

  struct Struct_blk_Meroitic_Hieroglyphs {
  BitBlock cc;
};

  struct Struct_blk_Miao {
  BitBlock cc;
};

  struct Struct_blk_Misc_Arrows {
  BitBlock cc;
};

  struct Struct_blk_Misc_Math_Symbols_A {
  BitBlock cc;
};

  struct Struct_blk_Misc_Math_Symbols_B {
  BitBlock cc;
};

  struct Struct_blk_Misc_Pictographs {
  BitBlock cc;
};

  struct Struct_blk_Misc_Symbols {
  BitBlock cc;
};

  struct Struct_blk_Misc_Technical {
  BitBlock cc;
};

  struct Struct_blk_Modi {
  BitBlock cc;
};

  struct Struct_blk_Modifier_Letters {
  BitBlock cc;
};

  struct Struct_blk_Modifier_Tone_Letters {
  BitBlock cc;
};

  struct Struct_blk_Mongolian {
  BitBlock cc;
};

  struct Struct_blk_Mro {
  BitBlock cc;
};

  struct Struct_blk_Music {
  BitBlock cc;
};

  struct Struct_blk_Myanmar {
  BitBlock cc;
};

  struct Struct_blk_Myanmar_Ext_A {
  BitBlock cc;
};

  struct Struct_blk_Myanmar_Ext_B {
  BitBlock cc;
};

  struct Struct_blk_Nabataean {
  BitBlock cc;
};

  struct Struct_blk_NB {
  BitBlock cc;
};

  struct Struct_blk_New_Tai_Lue {
  BitBlock cc;
};

  struct Struct_blk_NKo {
  BitBlock cc;
};

  struct Struct_blk_Number_Forms {
  BitBlock cc;
};

  struct Struct_blk_OCR {
  BitBlock cc;
};

  struct Struct_blk_Ogham {
  BitBlock cc;
};

  struct Struct_blk_Ol_Chiki {
  BitBlock cc;
};

  struct Struct_blk_Old_Italic {
  BitBlock cc;
};

  struct Struct_blk_Old_North_Arabian {
  BitBlock cc;
};

  struct Struct_blk_Old_Permic {
  BitBlock cc;
};

  struct Struct_blk_Old_Persian {
  BitBlock cc;
};

  struct Struct_blk_Old_South_Arabian {
  BitBlock cc;
};

  struct Struct_blk_Old_Turkic {
  BitBlock cc;
};

  struct Struct_blk_Oriya {
  BitBlock cc;
};

  struct Struct_blk_Ornamental_Dingbats {
  BitBlock cc;
};

  struct Struct_blk_Osmanya {
  BitBlock cc;
};

  struct Struct_blk_Pahawh_Hmong {
  BitBlock cc;
};

  struct Struct_blk_Palmyrene {
  BitBlock cc;
};

  struct Struct_blk_Pau_Cin_Hau {
  BitBlock cc;
};

  struct Struct_blk_Phags_Pa {
  BitBlock cc;
};

  struct Struct_blk_Phaistos {
  BitBlock cc;
};

  struct Struct_blk_Phoenician {
  BitBlock cc;
};

  struct Struct_blk_Phonetic_Ext {
  BitBlock cc;
};

  struct Struct_blk_Phonetic_Ext_Sup {
  BitBlock cc;
};

  struct Struct_blk_Playing_Cards {
  BitBlock cc;
};

  struct Struct_blk_Psalter_Pahlavi {
  BitBlock cc;
};

  struct Struct_blk_PUA {
  BitBlock cc;
};

  struct Struct_blk_Punctuation {
  BitBlock cc;
};

  struct Struct_blk_Rejang {
  BitBlock cc;
};

  struct Struct_blk_Rumi {
  BitBlock cc;
};

  struct Struct_blk_Runic {
  BitBlock cc;
};

  struct Struct_blk_Samaritan {
  BitBlock cc;
};

  struct Struct_blk_Saurashtra {
  BitBlock cc;
};

  struct Struct_blk_Sharada {
  BitBlock cc;
};

  struct Struct_blk_Shavian {
  BitBlock cc;
};

  struct Struct_blk_Shorthand_Format_Controls {
  BitBlock cc;
};

  struct Struct_blk_Siddham {
  BitBlock cc;
};

  struct Struct_blk_Sinhala {
  BitBlock cc;
};

  struct Struct_blk_Sinhala_Archaic_Numbers {
  BitBlock cc;
};

  struct Struct_blk_Small_Forms {
  BitBlock cc;
};

  struct Struct_blk_Sora_Sompeng {
  BitBlock cc;
};

  struct Struct_blk_Specials {
  BitBlock cc;
};

  struct Struct_blk_Sundanese {
  BitBlock cc;
};

  struct Struct_blk_Sundanese_Sup {
  BitBlock cc;
};

  struct Struct_blk_Sup_Arrows_A {
  BitBlock cc;
};

  struct Struct_blk_Sup_Arrows_B {
  BitBlock cc;
};

  struct Struct_blk_Sup_Arrows_C {
  BitBlock cc;
};

  struct Struct_blk_Sup_Math_Operators {
  BitBlock cc;
};

  struct Struct_blk_Sup_PUA_A {
  BitBlock cc;
};

  struct Struct_blk_Sup_PUA_B {
  BitBlock cc;
};

  struct Struct_blk_Sup_Punctuation {
  BitBlock cc;
};

  struct Struct_blk_Super_And_Sub {
  BitBlock cc;
};

  struct Struct_blk_Syloti_Nagri {
  BitBlock cc;
};

  struct Struct_blk_Syriac {
  BitBlock cc;
};

  struct Struct_blk_Tagalog {
  BitBlock cc;
};

  struct Struct_blk_Tagbanwa {
  BitBlock cc;
};

  struct Struct_blk_Tags {
  BitBlock cc;
};

  struct Struct_blk_Tai_Le {
  BitBlock cc;
};

  struct Struct_blk_Tai_Tham {
  BitBlock cc;
};

  struct Struct_blk_Tai_Viet {
  BitBlock cc;
};

  struct Struct_blk_Tai_Xuan_Jing {
  BitBlock cc;
};

  struct Struct_blk_Takri {
  BitBlock cc;
};

  struct Struct_blk_Tamil {
  BitBlock cc;
};

  struct Struct_blk_Telugu {
  BitBlock cc;
};

  struct Struct_blk_Thaana {
  BitBlock cc;
};

  struct Struct_blk_Thai {
  BitBlock cc;
};

  struct Struct_blk_Tibetan {
  BitBlock cc;
};

  struct Struct_blk_Tifinagh {
  BitBlock cc;
};

  struct Struct_blk_Tirhuta {
  BitBlock cc;
};

  struct Struct_blk_Transport_And_Map {
  BitBlock cc;
};

  struct Struct_blk_UCAS {
  BitBlock cc;
};

  struct Struct_blk_UCAS_Ext {
  BitBlock cc;
};

  struct Struct_blk_Ugaritic {
  BitBlock cc;
};

  struct Struct_blk_Vai {
  BitBlock cc;
};

  struct Struct_blk_Vedic_Ext {
  BitBlock cc;
};

  struct Struct_blk_Vertical_Forms {
  BitBlock cc;
};

  struct Struct_blk_VS {
  BitBlock cc;
};

  struct Struct_blk_VS_Sup {
  BitBlock cc;
};

  struct Struct_blk_Warang_Citi {
  BitBlock cc;
};

  struct Struct_blk_Yi_Radicals {
  BitBlock cc;
};

  struct Struct_blk_Yi_Syllables {
  BitBlock cc;
};

  struct Struct_blk_Yijing {
  BitBlock cc;
};

  struct Property_blk_Ancient_Symbols {
  Property_blk_Ancient_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ancient_Symbols & struct_blk_Ancient_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_86, r10000_10ffff_tmp13, sequence_f0_90_86;
		BitBlock sequence_f0_90_adv, byte_range_90_bf, sequence_f0_90_86_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_87, sequence_f0_90_87, byte_range_80_8f, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Ancient_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_86 = simd_and(r10000_10ffff_tmp13, byte_86);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(2), sequence_f0_90_86_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_86_adv, byte_range_90_bf);
            struct_blk_Ancient_Symbols.cc = simd_or(struct_blk_Ancient_Symbols.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            byte_range_80_8f = r10000_10ffff_tmp9;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(3), sequence_f0_90_87_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_87_adv, byte_range_80_8f);
            struct_blk_Ancient_Symbols.cc = simd_or(struct_blk_Ancient_Symbols.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Diacriticals_Ext {
  Property_blk_Diacriticals_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Diacriticals_Ext & struct_blk_Diacriticals_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_aa, r1000_1fff_tmp5, sequence_e1_aa;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, byte_range_b0_bf, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_ab;
		BitBlock sequence_e1_ab, byte_range_80_bf, sequence_e1_ab_adv;
		BitBlock r1000_1fff_tmp10;




        struct_blk_Diacriticals_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_aa = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_aa = simd_and(r1000_1fff_tmp5, byte_aa);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(2), sequence_e1_aa_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_aa_adv, byte_range_b0_bf);
                  struct_blk_Diacriticals_Ext.cc = simd_or(struct_blk_Diacriticals_Ext.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  byte_ab = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp9);
                  sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(3), sequence_e1_ab_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
                  struct_blk_Diacriticals_Ext.cc = simd_or(struct_blk_Diacriticals_Ext.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Siddham {
  Property_blk_Siddham() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Siddham & struct_blk_Siddham) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock byte_range_96_97, r10000_10ffff_tmp12;
		BitBlock sequence_f0_91_byte_range_96_97, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp13, sequence_f0_91_byte_range_96_97_sfx;




        struct_blk_Siddham.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_byte_range_96_97 = simd_and(r10000_10ffff_tmp12, byte_range_96_97);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_96_97, carryQ.get_carry_in(2), r10000_10ffff_tmp13));
            sequence_f0_91_byte_range_96_97_sfx = simd_and(r10000_10ffff_tmp13, byte_range_80_bf);
            struct_blk_Siddham.cc = simd_or(struct_blk_Siddham.cc, sequence_f0_91_byte_range_96_97_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ol_Chiki {
  Property_blk_Ol_Chiki() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ol_Chiki & struct_blk_Ol_Chiki) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b1, r1000_1fff_tmp3;
		BitBlock sequence_e1_b1, byte_e1_adv, r1000_1fff_tmp4, byte_range_90_bf;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp5;




        struct_blk_Ol_Chiki.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_b1 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_b1 = simd_and(r1000_1fff_tmp3, byte_b1);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(2), sequence_e1_b1_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_b1_adv, byte_range_90_bf);
                  struct_blk_Ol_Chiki.cc = simd_or(struct_blk_Ol_Chiki.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Phaistos {
  Property_blk_Phaistos() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Phaistos & struct_blk_Phaistos) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_87, r10000_10ffff_tmp13, sequence_f0_90_87;
		BitBlock sequence_f0_90_adv, byte_range_90_bf, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Phaistos.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp13, byte_87);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(2), sequence_f0_90_87_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_87_adv, byte_range_90_bf);
            struct_blk_Phaistos.cc = simd_or(struct_blk_Phaistos.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Enclosed_Alphanum_Sup {
  Property_blk_Enclosed_Alphanum_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Enclosed_Alphanum_Sup & struct_blk_Enclosed_Alphanum_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_84_87;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_byte_range_84_87;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9f_byte_range_84_87_sfx;




        struct_blk_Enclosed_Alphanum_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            byte_range_84_87 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9f_byte_range_84_87 = simd_and(r10000_10ffff_tmp14, byte_range_84_87);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_84_87, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_9f_byte_range_84_87_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Enclosed_Alphanum_Sup.cc = simd_or(struct_blk_Enclosed_Alphanum_Sup.cc, sequence_f0_9f_byte_range_84_87_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Yi_Syllables {
  Property_blk_Yi_Syllables() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Yi_Syllables & struct_blk_Yi_Syllables) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_range_80_91;
		BitBlock ra000_ffff_tmp9, byte_ea_byte_range_80_91, byte_range_80_bf;
		BitBlock ra000_ffff_tmp10, byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_92, byte_ea_adv;
		BitBlock sequence_ea_92, ra000_ffff_tmp14, byte_range_80_8f, ra000_ffff_tmp15;
		BitBlock sequence_ea_92_byte_range_80_8f;




        struct_blk_Yi_Syllables.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(ra000_ffff_tmp6, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_3, ra000_ffff_tmp7);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp9, byte_range_80_91);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(1), ra000_ffff_tmp10));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp10, byte_range_80_bf);
              struct_blk_Yi_Syllables.cc = simd_or(struct_blk_Yi_Syllables.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp12 = simd_and(byte_range_80_bf, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp6);
              byte_92 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp13);
              byte_ea_adv = ra000_ffff_tmp9;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(byte_range_80_bf, ra000_ffff_tmp14);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(2), ra000_ffff_tmp15));
              sequence_ea_92_byte_range_80_8f = simd_and(ra000_ffff_tmp15, byte_range_80_8f);
              struct_blk_Yi_Syllables.cc = simd_or(struct_blk_Yi_Syllables.cc, sequence_ea_92_byte_range_80_8f);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Myanmar {
  Property_blk_Myanmar() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Myanmar & struct_blk_Myanmar) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_range_80_81;
		BitBlock r1000_1fff_tmp3, byte_e1_byte_range_80_81, byte_range_80_bf;
		BitBlock r1000_1fff_tmp4, byte_e1_byte_range_80_81_sfx, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_82, byte_e1_adv;
		BitBlock sequence_e1_82, byte_range_80_9f, r1000_1fff_tmp8;
		BitBlock sequence_e1_82_byte_range_80_9f;




        struct_blk_Myanmar.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  byte_e1_byte_range_80_81 = simd_and(r1000_1fff_tmp3, byte_range_80_81);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_80_81, carryQ.get_carry_in(2), r1000_1fff_tmp4));
                  byte_e1_byte_range_80_81_sfx = simd_and(r1000_1fff_tmp4, byte_range_80_bf);
                  struct_blk_Myanmar.cc = simd_or(struct_blk_Myanmar.cc, byte_e1_byte_range_80_81_sfx);
                  r1000_1fff_tmp5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  byte_e1_adv = r1000_1fff_tmp3;
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(3), r1000_1fff_tmp8));
                  sequence_e1_82_byte_range_80_9f = simd_and(r1000_1fff_tmp8, byte_range_80_9f);
                  struct_blk_Myanmar.cc = simd_or(struct_blk_Myanmar.cc, sequence_e1_82_byte_range_80_9f);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_CJK_Compat {
  Property_blk_CJK_Compat() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Compat & struct_blk_CJK_Compat) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_range_8c_8f, r3000_4dff_tmp4;
		BitBlock byte_e3_byte_range_8c_8f, byte_range_80_bf, r3000_4dff_tmp5;
		BitBlock byte_e3_byte_range_8c_8f_sfx;




        struct_blk_CJK_Compat.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_8c_8f = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  byte_e3_byte_range_8c_8f = simd_and(r3000_4dff_tmp4, byte_range_8c_8f);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8c_8f, carryQ.get_carry_in(2), r3000_4dff_tmp5));
                  byte_e3_byte_range_8c_8f_sfx = simd_and(r3000_4dff_tmp5, byte_range_80_bf);
                  struct_blk_CJK_Compat.cc = simd_or(struct_blk_CJK_Compat.cc, byte_e3_byte_range_8c_8f_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Kangxi {
  Property_blk_Kangxi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kangxi & struct_blk_Kangxi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_range_bc_be;
		BitBlock r2000_2fff_tmp6, byte_e2_byte_range_bc_be, byte_range_80_bf;
		BitBlock r2000_2fff_tmp7, byte_e2_byte_range_bc_be_sfx, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, byte_bf, byte_e2_adv, sequence_e2_bf;
		BitBlock byte_range_80_9f, r2000_2fff_tmp10, sequence_e2_bf_byte_range_80_9f;




        struct_blk_Kangxi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_bc_be = simd_andc(r2000_2fff_tmp4, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  byte_e2_byte_range_bc_be = simd_and(r2000_2fff_tmp6, byte_range_bc_be);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_bc_be, carryQ.get_carry_in(2), r2000_2fff_tmp7));
                  byte_e2_byte_range_bc_be_sfx = simd_and(r2000_2fff_tmp7, byte_range_80_bf);
                  struct_blk_Kangxi.cc = simd_or(struct_blk_Kangxi.cc, byte_e2_byte_range_bc_be_sfx);
                  r2000_2fff_tmp8 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp5);
                  byte_bf = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp9);
                  byte_e2_adv = r2000_2fff_tmp6;
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(3), r2000_2fff_tmp10));
                  sequence_e2_bf_byte_range_80_9f = simd_and(r2000_2fff_tmp10, byte_range_80_9f);
                  struct_blk_Kangxi.cc = simd_or(struct_blk_Kangxi.cc, sequence_e2_bf_byte_range_80_9f);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Latin_1_Sup {
  Property_blk_Latin_1_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_1_Sup & struct_blk_Latin_1_Sup) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_c2_c3, byte_range_80_bf;
		BitBlock r80_7ff_tmp5, byte_range_c2_c3_sfx;




        struct_blk_Latin_1_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, r80_7ff_tmp3);
            byte_range_c2_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_range_c2_c3, carryQ.get_carry_in(0), r80_7ff_tmp5));
            byte_range_c2_c3_sfx = simd_and(r80_7ff_tmp5, byte_range_80_bf);
            struct_blk_Latin_1_Sup.cc = simd_or(struct_blk_Latin_1_Sup.cc, byte_range_c2_c3_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_Sinhala {
  Property_blk_Sinhala() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sinhala & struct_blk_Sinhala) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_b6_b7;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_b6_b7, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_b6_b7_sfx;




        struct_blk_Sinhala.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_b6_b7 = simd_and(r800_fff_tmp4, byte_range_b6_b7);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_b6_b7, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_b6_b7_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Sinhala.cc = simd_or(struct_blk_Sinhala.cc, byte_e0_byte_range_b6_b7_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ethiopic_Ext_A {
  Property_blk_Ethiopic_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ethiopic_Ext_A & struct_blk_Ethiopic_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_ac;
		BitBlock ra000_ffff_tmp9, sequence_ea_ac, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_80_af, sequence_ea_ac_adv, ra000_ffff_tmp11;




        struct_blk_Ethiopic_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_ac = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_ac = simd_and(ra000_ffff_tmp9, byte_ac);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(1), sequence_ea_ac_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_ac_adv, byte_range_80_af);
              struct_blk_Ethiopic_Ext_A.cc = simd_or(struct_blk_Ethiopic_Ext_A.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_D {
  Property_blk_Latin_Ext_D() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_D & struct_blk_Latin_Ext_D) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_9c, ra000_ffff_tmp10, sequence_ea_9c, byte_ea_adv;
		BitBlock byte_range_a0_bf, sequence_ea_9c_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, byte_range_9d_9f, byte_ea_byte_range_9d_9f;
		BitBlock byte_range_80_bf, ra000_ffff_tmp13, byte_ea_byte_range_9d_9f_sfx;




        struct_blk_Latin_Ext_D.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_9c = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ea_9c = simd_and(ra000_ffff_tmp10, byte_9c);
              byte_ea_adv = ra000_ffff_tmp10;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(1), sequence_ea_9c_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_9c_adv, byte_range_a0_bf);
              struct_blk_Latin_Ext_D.cc = simd_or(struct_blk_Latin_Ext_D.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp8);
              byte_ea_byte_range_9d_9f = simd_and(byte_ea_adv, byte_range_9d_9f);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_9d_9f, carryQ.get_carry_in(2), ra000_ffff_tmp13));
              byte_ea_byte_range_9d_9f_sfx = simd_and(ra000_ffff_tmp13, byte_range_80_bf);
              struct_blk_Latin_Ext_D.cc = simd_or(struct_blk_Latin_Ext_D.cc, byte_ea_byte_range_9d_9f_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cuneiform_Numbers {
  Property_blk_Cuneiform_Numbers() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cuneiform_Numbers & struct_blk_Cuneiform_Numbers) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_92, r10000_10ffff_tmp9;
		BitBlock sequence_f0_92, byte_f0_adv, r10000_10ffff_tmp10, byte_range_90_91;
		BitBlock r10000_10ffff_tmp11, sequence_f0_92_byte_range_90_91;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_92_byte_range_90_91_sfx;




        struct_blk_Cuneiform_Numbers.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_92 = simd_and(r10000_10ffff_tmp9, byte_92);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_92_byte_range_90_91 = simd_and(r10000_10ffff_tmp11, byte_range_90_91);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_90_91, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_92_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Cuneiform_Numbers.cc = simd_or(struct_blk_Cuneiform_Numbers.cc, sequence_f0_92_byte_range_90_91_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Low_Surrogates {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Low_Surrogates & struct_blk_Low_Surrogates) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef;




        struct_blk_Low_Surrogates.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if (bitblock::any(byte_range_c0_ff)) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if (bitblock::any(byte_range_e0_ef)) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
          }
        }
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };

  struct Property_blk_Kaithi {
  Property_blk_Kaithi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kaithi & struct_blk_Kaithi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_82;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_82, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_82_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_83, sequence_f0_91_83, byte_range_80_8f;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp20;




        struct_blk_Kaithi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_82 = simd_and(r10000_10ffff_tmp14, byte_82);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(2), sequence_f0_91_82_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_82_adv, byte_range_80_bf);
            struct_blk_Kaithi.cc = simd_or(struct_blk_Kaithi.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp18, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp19);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            byte_range_80_8f = r10000_10ffff_tmp17;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(3), sequence_f0_91_83_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_91_83_adv, byte_range_80_8f);
            struct_blk_Kaithi.cc = simd_or(struct_blk_Kaithi.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Batak {
  Property_blk_Batak() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Batak & struct_blk_Batak) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_af, r1000_1fff_tmp5, sequence_e1_af;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_af_adv, r1000_1fff_tmp6;




        struct_blk_Batak.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_af = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_af = simd_and(r1000_1fff_tmp5, byte_af);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(2), sequence_e1_af_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_af_adv, byte_range_80_bf);
                  struct_blk_Batak.cc = simd_or(struct_blk_Batak.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Yi_Radicals {
  Property_blk_Yi_Radicals() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Yi_Radicals & struct_blk_Yi_Radicals) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_92;
		BitBlock ra000_ffff_tmp9, sequence_ea_92, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_90_bf, sequence_ea_92_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_93, sequence_ea_93;
		BitBlock byte_range_80_8f, sequence_ea_93_adv, ra000_ffff_tmp14;




        struct_blk_Yi_Radicals.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp7);
              byte_92 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_92 = simd_and(ra000_ffff_tmp9, byte_92);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(1), sequence_ea_92_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
              struct_blk_Yi_Radicals.cc = simd_or(struct_blk_Yi_Radicals.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp13 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp7);
              byte_93 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp13);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              byte_range_80_8f = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(2), sequence_ea_93_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_93_adv, byte_range_80_8f);
              struct_blk_Yi_Radicals.cc = simd_or(struct_blk_Yi_Radicals.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Small_Forms {
  Property_blk_Small_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Small_Forms & struct_blk_Small_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b9, ra000_ffff_tmp10, sequence_ef_b9, byte_ef_adv;
		BitBlock ra000_ffff_tmp11, byte_range_90_af, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp12;




        struct_blk_Small_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b9 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp10, byte_b9);
              byte_ef_adv = ra000_ffff_tmp10;
              ra000_ffff_tmp11 = simd_xor(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_af = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(1), sequence_ef_b9_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_b9_adv, byte_range_90_af);
              struct_blk_Small_Forms.cc = simd_or(struct_blk_Small_Forms.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Tai_Xuan_Jing {
  Property_blk_Tai_Xuan_Jing() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tai_Xuan_Jing & struct_blk_Tai_Xuan_Jing) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_8c;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9d_8c, sequence_f0_9d_adv;
		BitBlock byte_range_80_bf, sequence_f0_9d_8c_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_8d, sequence_f0_9d_8d;
		BitBlock byte_range_80_9f, sequence_f0_9d_8d_adv, r10000_10ffff_tmp18;




        struct_blk_Tai_Xuan_Jing.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9d_8c = simd_and(r10000_10ffff_tmp14, byte_8c);
            sequence_f0_9d_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(2), sequence_f0_9d_8c_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_9d_8c_adv, byte_range_80_bf);
            struct_blk_Tai_Xuan_Jing.cc = simd_or(struct_blk_Tai_Xuan_Jing.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp9);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(3), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_9d_8d_adv, byte_range_80_9f);
            struct_blk_Tai_Xuan_Jing.cc = simd_or(struct_blk_Tai_Xuan_Jing.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_CJK_Ext_C {
  Property_blk_CJK_Ext_C() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Ext_C & struct_blk_CJK_Ext_C) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_aa;
		BitBlock r10000_10ffff_tmp10, sequence_f0_aa, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_9c_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_aa_byte_range_9c_bf;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_aa_byte_range_9c_bf_sfx, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_ab, sequence_f0_ab;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock byte_range_80_9c, r10000_10ffff_tmp22;
		BitBlock sequence_f0_ab_byte_range_80_9c, r10000_10ffff_tmp23;
		BitBlock sequence_f0_ab_byte_range_80_9c_sfx;




        struct_blk_CJK_Ext_C.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_aa = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_aa = simd_and(r10000_10ffff_tmp10, byte_aa);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp12);
            byte_range_9c_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_aa_byte_range_9c_bf = simd_and(r10000_10ffff_tmp14, byte_range_9c_bf);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_byte_range_9c_bf, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_aa_byte_range_9c_bf_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_CJK_Ext_C.cc = simd_or(struct_blk_CJK_Ext_C.cc, sequence_f0_aa_byte_range_9c_bf_sfx);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp17);
            byte_ab = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            r10000_10ffff_tmp19 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            byte_range_80_9c = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp21);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(3), r10000_10ffff_tmp22));
            sequence_f0_ab_byte_range_80_9c = simd_and(r10000_10ffff_tmp22, byte_range_80_9c);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_80_9c, carryQ.get_carry_in(4), r10000_10ffff_tmp23));
            sequence_f0_ab_byte_range_80_9c_sfx = simd_and(r10000_10ffff_tmp23, byte_range_80_bf);
            struct_blk_CJK_Ext_C.cc = simd_or(struct_blk_CJK_Ext_C.cc, sequence_f0_ab_byte_range_80_9c_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_blk_CJK_Ext_B {
  Property_blk_CJK_Ext_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Ext_B & struct_blk_CJK_Ext_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_range_a0_a9;
		BitBlock r10000_10ffff_tmp9, byte_f0_byte_range_a0_a9, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp10, byte_f0_byte_range_a0_a9_sfx;
		BitBlock r10000_10ffff_tmp11, byte_f0_byte_range_a0_a9_sfx_sfx;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_aa, byte_f0_adv, sequence_f0_aa;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_80, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, byte_range_80_9f, r10000_10ffff_tmp18;
		BitBlock sequence_f0_aa_80_byte_range_80_9f;




        struct_blk_CJK_Ext_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp7);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            byte_f0_byte_range_a0_a9 = simd_and(r10000_10ffff_tmp9, byte_range_a0_a9);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(2), r10000_10ffff_tmp11));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp11, byte_range_80_bf);
            struct_blk_CJK_Ext_B.cc = simd_or(struct_blk_CJK_Ext_B.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            r10000_10ffff_tmp12 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_aa = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            byte_f0_adv = r10000_10ffff_tmp9;
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp16);
            byte_80 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp3);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(3), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(4), r10000_10ffff_tmp18));
            sequence_f0_aa_80_byte_range_80_9f = simd_and(r10000_10ffff_tmp18, byte_range_80_9f);
            struct_blk_CJK_Ext_B.cc = simd_or(struct_blk_CJK_Ext_B.cc, sequence_f0_aa_80_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_blk_CJK_Ext_A {
  Property_blk_CJK_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Ext_A & struct_blk_CJK_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock byte_range_90_bf, r3000_4dff_tmp2, byte_e3_byte_range_90_bf;
		BitBlock byte_range_80_bf, r3000_4dff_tmp3, byte_e3_byte_range_90_bf_sfx;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock byte_range_80_b6, byte_e4_byte_range_80_b6, r3000_4dff_tmp8;
		BitBlock byte_e4_byte_range_80_b6_sfx;




        struct_blk_CJK_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp2));
                  byte_e3_byte_range_90_bf = simd_and(r3000_4dff_tmp2, byte_range_90_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(2), r3000_4dff_tmp3));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp3, byte_range_80_bf);
                  struct_blk_CJK_Ext_A.cc = simd_or(struct_blk_CJK_Ext_A.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_5, r2000_4dff_tmp1);
                  r3000_4dff_tmp5 = simd_or(basis_bits.bit_4, r3000_4dff_tmp4);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_3, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_and(basis_bits.bit_2, r3000_4dff_tmp6);
                  byte_range_80_b6 = simd_andc(byte_range_80_bf, r3000_4dff_tmp7);
                  byte_e4_byte_range_80_b6 = simd_and(r800_ffff_tmp8, byte_range_80_b6);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b6, carryQ.get_carry_in(3), r3000_4dff_tmp8));
                  byte_e4_byte_range_80_b6_sfx = simd_and(r3000_4dff_tmp8, byte_range_80_bf);
                  struct_blk_CJK_Ext_A.cc = simd_or(struct_blk_CJK_Ext_A.cc, byte_e4_byte_range_80_b6_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Coptic_Epact_Numbers {
  Property_blk_Coptic_Epact_Numbers() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Coptic_Epact_Numbers & struct_blk_Coptic_Epact_Numbers) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8b, r10000_10ffff_tmp13, sequence_f0_90_8b;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Coptic_Epact_Numbers.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8b = simd_and(r10000_10ffff_tmp13, byte_8b);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(2), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8b_adv, byte_range_a0_bf);
            struct_blk_Coptic_Epact_Numbers.cc = simd_or(struct_blk_Coptic_Epact_Numbers.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_CJK_Ext_D {
  Property_blk_CJK_Ext_D() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Ext_D & struct_blk_CJK_Ext_D) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_ab;
		BitBlock r10000_10ffff_tmp10, sequence_f0_ab, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_9d_9f, r10000_10ffff_tmp15;
		BitBlock sequence_f0_ab_byte_range_9d_9f, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp16, sequence_f0_ab_byte_range_9d_9f_sfx;
		BitBlock r10000_10ffff_tmp17, byte_a0, sequence_f0_ab_adv, sequence_f0_ab_a0;
		BitBlock byte_range_80_9f, r10000_10ffff_tmp18;
		BitBlock sequence_f0_ab_a0_byte_range_80_9f;




        struct_blk_CJK_Ext_D.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_ab = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_ab = simd_and(r10000_10ffff_tmp10, byte_ab);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_range_9d_9f = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp2);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_ab_byte_range_9d_9f = simd_and(r10000_10ffff_tmp15, byte_range_9d_9f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_byte_range_9d_9f, carryQ.get_carry_in(2), r10000_10ffff_tmp16));
            sequence_f0_ab_byte_range_9d_9f_sfx = simd_and(r10000_10ffff_tmp16, byte_range_80_bf);
            struct_blk_CJK_Ext_D.cc = simd_or(struct_blk_CJK_Ext_D.cc, sequence_f0_ab_byte_range_9d_9f_sfx);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_a0 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp3);
            sequence_f0_ab_adv = r10000_10ffff_tmp15;
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(3), r10000_10ffff_tmp18));
            sequence_f0_ab_a0_byte_range_80_9f = simd_and(r10000_10ffff_tmp18, byte_range_80_9f);
            struct_blk_CJK_Ext_D.cc = simd_or(struct_blk_CJK_Ext_D.cc, sequence_f0_ab_a0_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Arabic_Math {
  Property_blk_Arabic_Math() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic_Math & struct_blk_Arabic_Math) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9e;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9e, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_b8_bb, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9e_byte_range_b8_bb, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9e_byte_range_b8_bb_sfx;




        struct_blk_Arabic_Math.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9e = simd_and(r10000_10ffff_tmp10, byte_9e);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_b8_bb = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9e_byte_range_b8_bb = simd_and(r10000_10ffff_tmp13, byte_range_b8_bb);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_b8_bb, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9e_byte_range_b8_bb_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Arabic_Math.cc = simd_or(struct_blk_Arabic_Math.cc, sequence_f0_9e_byte_range_b8_bb_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Math_Alphanum {
  Property_blk_Math_Alphanum() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Math_Alphanum & struct_blk_Math_Alphanum) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, byte_range_90_9f;
		BitBlock r10000_10ffff_tmp11, sequence_f0_9d_byte_range_90_9f;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_9d_byte_range_90_9f_sfx;




        struct_blk_Math_Alphanum.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            byte_range_90_9f = r10000_10ffff_tmp6;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_9d_byte_range_90_9f = simd_and(r10000_10ffff_tmp11, byte_range_90_9f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_90_9f, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_9d_byte_range_90_9f_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Math_Alphanum.cc = simd_or(struct_blk_Math_Alphanum.cc, sequence_f0_9d_byte_range_90_9f_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Brahmi {
  Property_blk_Brahmi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Brahmi & struct_blk_Brahmi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_80_81, r10000_10ffff_tmp13;
		BitBlock sequence_f0_91_byte_range_80_81, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_byte_range_80_81_sfx;




        struct_blk_Brahmi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_91_byte_range_80_81 = simd_and(r10000_10ffff_tmp13, byte_range_80_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_80_81, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_91_byte_range_80_81_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Brahmi.cc = simd_or(struct_blk_Brahmi.cc, sequence_f0_91_byte_range_80_81_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Georgian_Sup {
  Property_blk_Georgian_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Georgian_Sup & struct_blk_Georgian_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_b4;
		BitBlock r2000_2fff_tmp3, sequence_e2_b4, byte_e2_adv, byte_range_80_af;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp4;




        struct_blk_Georgian_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_b4 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_b4 = simd_and(r2000_2fff_tmp3, byte_b4);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_80_af = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(2), sequence_e2_b4_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_b4_adv, byte_range_80_af);
                  struct_blk_Georgian_Sup.cc = simd_or(struct_blk_Georgian_Sup.cc, r2000_2fff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_Italic {
  Property_blk_Old_Italic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_Italic & struct_blk_Old_Italic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8c;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_8c, sequence_f0_90_adv;
		BitBlock byte_range_80_af, sequence_f0_90_8c_adv, r10000_10ffff_tmp13;




        struct_blk_Old_Italic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_8c = simd_and(r10000_10ffff_tmp12, byte_8c);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(2), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_8c_adv, byte_range_80_af);
            struct_blk_Old_Italic.cc = simd_or(struct_blk_Old_Italic.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_VS {
  Property_blk_VS() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_VS & struct_blk_VS) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b8, ra000_ffff_tmp10, sequence_ef_b8, byte_ef_adv;
		BitBlock ra000_ffff_tmp11, byte_range_80_8f, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp12;




        struct_blk_VS.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp10, byte_b8);
              byte_ef_adv = ra000_ffff_tmp10;
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(1), sequence_ef_b8_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_blk_VS.cc = simd_or(struct_blk_VS.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Lao {
  Property_blk_Lao() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Lao & struct_blk_Lao) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock byte_range_ba_bb, r800_fff_tmp5, byte_e0_byte_range_ba_bb;
		BitBlock byte_range_80_bf, r800_fff_tmp6, byte_e0_byte_range_ba_bb_sfx;




        struct_blk_Lao.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_and(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  byte_e0_byte_range_ba_bb = simd_and(r800_fff_tmp5, byte_range_ba_bb);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_ba_bb, carryQ.get_carry_in(2), r800_fff_tmp6));
                  byte_e0_byte_range_ba_bb_sfx = simd_and(r800_fff_tmp6, byte_range_80_bf);
                  struct_blk_Lao.cc = simd_or(struct_blk_Lao.cc, byte_e0_byte_range_ba_bb_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ethiopic_Sup {
  Property_blk_Ethiopic_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ethiopic_Sup & struct_blk_Ethiopic_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_8e, r1000_1fff_tmp6;
		BitBlock sequence_e1_8e, byte_e1_adv, byte_range_80_9f, sequence_e1_8e_adv;
		BitBlock r1000_1fff_tmp7;




        struct_blk_Ethiopic_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_8e = simd_and(r1000_1fff_tmp6, byte_8e);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(2), sequence_e1_8e_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_8e_adv, byte_range_80_9f);
                  struct_blk_Ethiopic_Sup.cc = simd_or(struct_blk_Ethiopic_Sup.cc, r1000_1fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Phoenician {
  Property_blk_Phoenician() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Phoenician & struct_blk_Phoenician) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a4;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a4, sequence_f0_90_adv;
		BitBlock byte_range_80_9f, sequence_f0_90_a4_adv, r10000_10ffff_tmp13;




        struct_blk_Phoenician.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a4 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a4 = simd_and(r10000_10ffff_tmp12, byte_a4);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(2), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a4_adv, byte_range_80_9f);
            struct_blk_Phoenician.cc = simd_or(struct_blk_Phoenician.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Syloti_Nagri {
  Property_blk_Syloti_Nagri() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Syloti_Nagri & struct_blk_Syloti_Nagri) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a0;
		BitBlock ra000_ffff_tmp9, sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_80_af, sequence_ea_a0_adv, ra000_ffff_tmp11;




        struct_blk_Syloti_Nagri.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_or(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a0 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp9, byte_a0);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(1), sequence_ea_a0_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a0_adv, byte_range_80_af);
              struct_blk_Syloti_Nagri.cc = simd_or(struct_blk_Syloti_Nagri.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Math_Operators {
  Property_blk_Math_Operators() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Math_Operators & struct_blk_Math_Operators) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_range_88_8b, r2000_2fff_tmp4;
		BitBlock byte_e2_byte_range_88_8b, byte_range_80_bf, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_88_8b_sfx;




        struct_blk_Math_Operators.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_88_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  byte_e2_byte_range_88_8b = simd_and(r2000_2fff_tmp4, byte_range_88_8b);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_88_8b, carryQ.get_carry_in(2), r2000_2fff_tmp5));
                  byte_e2_byte_range_88_8b_sfx = simd_and(r2000_2fff_tmp5, byte_range_80_bf);
                  struct_blk_Math_Operators.cc = simd_or(struct_blk_Math_Operators.cc, byte_e2_byte_range_88_8b_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Warang_Citi {
  Property_blk_Warang_Citi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Warang_Citi & struct_blk_Warang_Citi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_a2;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_a2, sequence_f0_91_adv;
		BitBlock byte_range_a0_bf, sequence_f0_91_a2_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_a3, sequence_f0_91_a3;
		BitBlock byte_range_80_bf, sequence_f0_91_a3_adv, r10000_10ffff_tmp18;




        struct_blk_Warang_Citi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(2), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_blk_Warang_Citi.cc = simd_or(struct_blk_Warang_Citi.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_a3 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp17);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(3), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_a3_adv, byte_range_80_bf);
            struct_blk_Warang_Citi.cc = simd_or(struct_blk_Warang_Citi.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Elbasan {
  Property_blk_Elbasan() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Elbasan & struct_blk_Elbasan) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_94, r10000_10ffff_tmp10, sequence_f0_90_94;
		BitBlock sequence_f0_90_adv, byte_range_80_af, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp11;




        struct_blk_Elbasan.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_94 = simd_and(r10000_10ffff_tmp10, byte_94);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(2), sequence_f0_90_94_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_94_adv, byte_range_80_af);
            struct_blk_Elbasan.cc = simd_or(struct_blk_Elbasan.cc, r10000_10ffff_tmp11);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Music {
  Property_blk_Music() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Music & struct_blk_Music) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_84_87;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9d_byte_range_84_87;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9d_byte_range_84_87_sfx;




        struct_blk_Music.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            byte_range_84_87 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9d_byte_range_84_87 = simd_and(r10000_10ffff_tmp14, byte_range_84_87);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_84_87, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_9d_byte_range_84_87_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Music.cc = simd_or(struct_blk_Music.cc, sequence_f0_9d_byte_range_84_87_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Inscriptional_Pahlavi {
  Property_blk_Inscriptional_Pahlavi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Inscriptional_Pahlavi & struct_blk_Inscriptional_Pahlavi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ad, r10000_10ffff_tmp13, sequence_f0_90_ad;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_ad_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Inscriptional_Pahlavi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ad = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ad = simd_and(r10000_10ffff_tmp13, byte_ad);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(2), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_ad_adv, byte_range_a0_bf);
            struct_blk_Inscriptional_Pahlavi.cc = simd_or(struct_blk_Inscriptional_Pahlavi.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Counting_Rod {
  Property_blk_Counting_Rod() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Counting_Rod & struct_blk_Counting_Rod) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8d, r10000_10ffff_tmp13, sequence_f0_9d_8d;
		BitBlock sequence_f0_9d_adv, byte_range_a0_bf, sequence_f0_9d_8d_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Counting_Rod.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9d_8d = simd_and(r10000_10ffff_tmp13, byte_8d);
            sequence_f0_9d_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(2), sequence_f0_9d_8d_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_bf);
            struct_blk_Counting_Rod.cc = simd_or(struct_blk_Counting_Rod.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Carian {
  Property_blk_Carian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Carian & struct_blk_Carian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8a, r10000_10ffff_tmp13, sequence_f0_90_8a;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_8b, sequence_f0_90_8b, byte_range_80_9f, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Carian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8a = simd_and(r10000_10ffff_tmp13, byte_8a);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(2), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8a_adv, byte_range_a0_bf);
            struct_blk_Carian.cc = simd_or(struct_blk_Carian.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(3), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_8b_adv, byte_range_80_9f);
            struct_blk_Carian.cc = simd_or(struct_blk_Carian.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Jamo_Ext_A {
  Property_blk_Jamo_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Jamo_Ext_A & struct_blk_Jamo_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a5;
		BitBlock ra000_ffff_tmp9, sequence_ea_a5, byte_ea_adv, byte_range_a0_bf;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp10;




        struct_blk_Jamo_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a5 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a5 = simd_and(ra000_ffff_tmp9, byte_a5);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(1), sequence_ea_a5_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a5_adv, byte_range_a0_bf);
              struct_blk_Jamo_Ext_A.cc = simd_or(struct_blk_Jamo_Ext_A.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Sup_Arrows_B {
  Property_blk_Sup_Arrows_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_Arrows_B & struct_blk_Sup_Arrows_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock byte_range_a4_a5, r2000_2fff_tmp3, byte_e2_byte_range_a4_a5;
		BitBlock byte_range_80_bf, r2000_2fff_tmp4, byte_e2_byte_range_a4_a5_sfx;




        struct_blk_Sup_Arrows_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  byte_e2_byte_range_a4_a5 = simd_and(r2000_2fff_tmp3, byte_range_a4_a5);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a4_a5, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  byte_e2_byte_range_a4_a5_sfx = simd_and(r2000_2fff_tmp4, byte_range_80_bf);
                  struct_blk_Sup_Arrows_B.cc = simd_or(struct_blk_Sup_Arrows_B.cc, byte_e2_byte_range_a4_a5_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_E {
  Property_blk_Latin_Ext_E() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_E & struct_blk_Latin_Ext_E) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_ac;
		BitBlock ra000_ffff_tmp9, sequence_ea_ac, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_b0_bf, sequence_ea_ac_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_ad, sequence_ea_ad;
		BitBlock byte_range_80_af, sequence_ea_ad_adv, ra000_ffff_tmp14;




        struct_blk_Latin_Ext_E.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_ac = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_ac = simd_and(ra000_ffff_tmp9, byte_ac);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(1), sequence_ea_ac_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_blk_Latin_Ext_E.cc = simd_or(struct_blk_Latin_Ext_E.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp12);
              byte_ad = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp13);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_80_af = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(2), sequence_ea_ad_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_ad_adv, byte_range_80_af);
              struct_blk_Latin_Ext_E.cc = simd_or(struct_blk_Latin_Ext_E.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Alchemical {
  Property_blk_Alchemical() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Alchemical & struct_blk_Alchemical) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock byte_range_9c_9d, r10000_10ffff_tmp12;
		BitBlock sequence_f0_9f_byte_range_9c_9d, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp13, sequence_f0_9f_byte_range_9c_9d_sfx;




        struct_blk_Alchemical.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp7, basis_bits.bit_6);
            byte_range_9c_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_9f_byte_range_9c_9d = simd_and(r10000_10ffff_tmp12, byte_range_9c_9d);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_9c_9d, carryQ.get_carry_in(2), r10000_10ffff_tmp13));
            sequence_f0_9f_byte_range_9c_9d_sfx = simd_and(r10000_10ffff_tmp13, byte_range_80_bf);
            struct_blk_Alchemical.cc = simd_or(struct_blk_Alchemical.cc, sequence_f0_9f_byte_range_9c_9d_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Arabic_PF_B {
  Property_blk_Arabic_PF_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic_PF_B & struct_blk_Arabic_PF_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b9, ra000_ffff_tmp10, sequence_ef_b9, byte_ef_adv;
		BitBlock byte_range_b0_bf, sequence_ef_b9_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, byte_range_ba_bb, byte_ef_byte_range_ba_bb;
		BitBlock byte_range_80_bf, ra000_ffff_tmp13, byte_ef_byte_range_ba_bb_sfx;




        struct_blk_Arabic_PF_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b9 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp10, byte_b9);
              byte_ef_adv = ra000_ffff_tmp10;
              byte_range_b0_bf = ra000_ffff_tmp6;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(1), sequence_ef_b9_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_b9_adv, byte_range_b0_bf);
              struct_blk_Arabic_PF_B.cc = simd_or(struct_blk_Arabic_PF_B.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp7, basis_bits.bit_6);
              byte_range_ba_bb = simd_and(byte_range_b0_bf, ra000_ffff_tmp12);
              byte_ef_byte_range_ba_bb = simd_and(byte_ef_adv, byte_range_ba_bb);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_ba_bb, carryQ.get_carry_in(2), ra000_ffff_tmp13));
              byte_ef_byte_range_ba_bb_sfx = simd_and(ra000_ffff_tmp13, byte_range_80_bf);
              struct_blk_Arabic_PF_B.cc = simd_or(struct_blk_Arabic_PF_B.cc, byte_ef_byte_range_ba_bb_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cyrillic_Ext_B {
  Property_blk_Cyrillic_Ext_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cyrillic_Ext_B & struct_blk_Cyrillic_Ext_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_99;
		BitBlock ra000_ffff_tmp9, sequence_ea_99, byte_ea_adv, byte_range_80_bf;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp10, ra000_ffff_tmp11, byte_9a;
		BitBlock sequence_ea_9a, byte_range_80_9f, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp12;




        struct_blk_Cyrillic_Ext_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp7);
              byte_99 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_99 = simd_and(ra000_ffff_tmp9, byte_99);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(1), sequence_ea_99_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_99_adv, byte_range_80_bf);
              struct_blk_Cyrillic_Ext_B.cc = simd_or(struct_blk_Cyrillic_Ext_B.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(byte_range_80_bf, ra000_ffff_tmp5);
              byte_9a = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(2), sequence_ea_9a_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_9a_adv, byte_range_80_9f);
              struct_blk_Cyrillic_Ext_B.cc = simd_or(struct_blk_Cyrillic_Ext_B.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cyrillic_Ext_A {
  Property_blk_Cyrillic_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cyrillic_Ext_A & struct_blk_Cyrillic_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_b7, r2000_2fff_tmp5;
		BitBlock sequence_e2_b7, byte_e2_adv, byte_range_a0_bf, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp6;




        struct_blk_Cyrillic_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b7 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_b7 = simd_and(r2000_2fff_tmp5, byte_b7);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(2), sequence_e2_b7_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_blk_Cyrillic_Ext_A.cc = simd_or(struct_blk_Cyrillic_Ext_A.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Arabic_PF_A {
  Property_blk_Arabic_PF_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic_PF_A & struct_blk_Arabic_PF_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ad, ra000_ffff_tmp8;
		BitBlock sequence_ef_ad, byte_ef_adv, ra000_ffff_tmp9, byte_range_90_bf;
		BitBlock sequence_ef_ad_adv, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock byte_range_ae_b7, byte_ef_byte_range_ae_b7, byte_range_80_bf;
		BitBlock ra000_ffff_tmp15, byte_ef_byte_range_ae_b7_sfx;




        struct_blk_Arabic_PF_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ad = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ef_ad = simd_and(ra000_ffff_tmp8, byte_ad);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp9);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(1), sequence_ef_ad_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_ad_adv, byte_range_90_bf);
              struct_blk_Arabic_PF_A.cc = simd_or(struct_blk_Arabic_PF_A.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              ra000_ffff_tmp12 = simd_not(basis_bits.bit_4);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp14 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp12), simd_andc(ra000_ffff_tmp13, basis_bits.bit_3));
              byte_range_ae_b7 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp14);
              byte_ef_byte_range_ae_b7 = simd_and(byte_ef_adv, byte_range_ae_b7);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_ae_b7, carryQ.get_carry_in(2), ra000_ffff_tmp15));
              byte_ef_byte_range_ae_b7_sfx = simd_and(ra000_ffff_tmp15, byte_range_80_bf);
              struct_blk_Arabic_PF_A.cc = simd_or(struct_blk_Arabic_PF_A.cc, byte_ef_byte_range_ae_b7_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tagbanwa {
  Property_blk_Tagbanwa() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tagbanwa & struct_blk_Tagbanwa) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9d, r1000_1fff_tmp5, sequence_e1_9d;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_9d_adv, r1000_1fff_tmp6;




        struct_blk_Tagbanwa.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_9d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9d = simd_and(r1000_1fff_tmp5, byte_9d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(2), sequence_e1_9d_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_9d_adv, byte_range_a0_bf);
                  struct_blk_Tagbanwa.cc = simd_or(struct_blk_Tagbanwa.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Linear_B_Ideograms {
  Property_blk_Linear_B_Ideograms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Linear_B_Ideograms & struct_blk_Linear_B_Ideograms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_range_82_83;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_byte_range_82_83;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_90_byte_range_82_83_sfx;




        struct_blk_Linear_B_Ideograms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_90_byte_range_82_83 = simd_and(r10000_10ffff_tmp11, byte_range_82_83);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_82_83, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_90_byte_range_82_83_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Linear_B_Ideograms.cc = simd_or(struct_blk_Linear_B_Ideograms.cc, sequence_f0_90_byte_range_82_83_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_CJK_Compat_Ideographs_Sup {
  Property_blk_CJK_Compat_Ideographs_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Compat_Ideographs_Sup & struct_blk_CJK_Compat_Ideographs_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_af;
		BitBlock r10000_10ffff_tmp10, sequence_f0_af, byte_f0_adv, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp11, sequence_f0_af_byte_range_a0_a7;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_af_byte_range_a0_a7_sfx, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, byte_a8, sequence_f0_af_adv;
		BitBlock sequence_f0_af_a8, byte_range_80_9f, r10000_10ffff_tmp16;
		BitBlock sequence_f0_af_a8_byte_range_80_9f;




        struct_blk_CJK_Compat_Ideographs_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_af = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_af = simd_and(r10000_10ffff_tmp10, byte_af);
            byte_f0_adv = r10000_10ffff_tmp10;
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_af_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp11, byte_range_a0_a7);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_af_byte_range_a0_a7, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_af_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_CJK_Compat_Ideographs_Sup.cc = simd_or(struct_blk_CJK_Compat_Ideographs_Sup.cc, sequence_f0_af_byte_range_a0_a7_sfx);
            r10000_10ffff_tmp13 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp15);
            sequence_f0_af_adv = r10000_10ffff_tmp11;
            sequence_f0_af_a8 = simd_and(sequence_f0_af_adv, byte_a8);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a8, carryQ.get_carry_in(3), r10000_10ffff_tmp16));
            sequence_f0_af_a8_byte_range_80_9f = simd_and(r10000_10ffff_tmp16, byte_range_80_9f);
            struct_blk_CJK_Compat_Ideographs_Sup.cc = simd_or(struct_blk_CJK_Compat_Ideographs_Sup.cc, sequence_f0_af_a8_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Myanmar_Ext_B {
  Property_blk_Myanmar_Ext_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Myanmar_Ext_B & struct_blk_Myanmar_Ext_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a7;
		BitBlock ra000_ffff_tmp9, sequence_ea_a7, byte_ea_adv, byte_range_a0_bf;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp10;




        struct_blk_Myanmar_Ext_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a7 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a7 = simd_and(ra000_ffff_tmp9, byte_a7);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(1), sequence_ea_a7_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a7_adv, byte_range_a0_bf);
              struct_blk_Myanmar_Ext_B.cc = simd_or(struct_blk_Myanmar_Ext_B.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Manichaean {
  Property_blk_Manichaean() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Manichaean & struct_blk_Manichaean) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ab, r10000_10ffff_tmp13, sequence_f0_90_ab;
		BitBlock sequence_f0_90_adv, byte_range_80_bf, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Manichaean.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ab = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ab = simd_and(r10000_10ffff_tmp13, byte_ab);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(2), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_ab_adv, byte_range_80_bf);
            struct_blk_Manichaean.cc = simd_or(struct_blk_Manichaean.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Linear_B_Syllabary {
  Property_blk_Linear_B_Syllabary() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Linear_B_Syllabary & struct_blk_Linear_B_Syllabary) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_range_80_81;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_byte_range_80_81;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_90_byte_range_80_81_sfx;




        struct_blk_Linear_B_Syllabary.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_90_byte_range_80_81 = simd_and(r10000_10ffff_tmp11, byte_range_80_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_81, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_90_byte_range_80_81_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Linear_B_Syllabary.cc = simd_or(struct_blk_Linear_B_Syllabary.cc, sequence_f0_90_byte_range_80_81_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sundanese_Sup {
  Property_blk_Sundanese_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sundanese_Sup & struct_blk_Sundanese_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_b3, r1000_1fff_tmp5, sequence_e1_b3;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, byte_range_80_8f, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp7;




        struct_blk_Sundanese_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_b3 = simd_and(r1000_1fff_tmp5, byte_b3);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_8f = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(2), sequence_e1_b3_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_b3_adv, byte_range_80_8f);
                  struct_blk_Sundanese_Sup.cc = simd_or(struct_blk_Sundanese_Sup.cc, r1000_1fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Katakana_Ext {
  Property_blk_Katakana_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Katakana_Ext & struct_blk_Katakana_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_87, r3000_4dff_tmp4;
		BitBlock sequence_e3_87, byte_e3_adv, r3000_4dff_tmp5, byte_range_b0_bf;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp6;




        struct_blk_Katakana_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  sequence_e3_87 = simd_and(r3000_4dff_tmp4, byte_87);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(2), sequence_e3_87_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_blk_Katakana_Ext.cc = simd_or(struct_blk_Katakana_Ext.cc, r3000_4dff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Bamum {
  Property_blk_Bamum() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bamum & struct_blk_Bamum) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_9a, ra000_ffff_tmp7, sequence_ea_9a;
		BitBlock byte_ea_adv, byte_range_a0_bf, sequence_ea_9a_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, byte_9b, sequence_ea_9b;
		BitBlock byte_range_80_bf, sequence_ea_9b_adv, ra000_ffff_tmp11;




        struct_blk_Bamum.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              byte_9a = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp3);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp7));
              sequence_ea_9a = simd_and(ra000_ffff_tmp7, byte_9a);
              byte_ea_adv = ra000_ffff_tmp7;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(1), sequence_ea_9a_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ea_9a_adv, byte_range_a0_bf);
              struct_blk_Bamum.cc = simd_or(struct_blk_Bamum.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_9b = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp10);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(2), sequence_ea_9b_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_9b_adv, byte_range_80_bf);
              struct_blk_Bamum.cc = simd_or(struct_blk_Bamum.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Katakana {
  Property_blk_Katakana() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Katakana & struct_blk_Katakana) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_82;
		BitBlock r3000_4dff_tmp5, sequence_e3_82, byte_e3_adv, byte_range_a0_bf;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp6, byte_83, sequence_e3_83;
		BitBlock byte_range_80_bf, sequence_e3_83_adv, r3000_4dff_tmp7;




        struct_blk_Katakana.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_82 = simd_and(r3000_4dff_tmp5, byte_82);
                  byte_e3_adv = r3000_4dff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(2), sequence_e3_82_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_82_adv, byte_range_a0_bf);
                  struct_blk_Katakana.cc = simd_or(struct_blk_Katakana.cc, r3000_4dff_tmp6);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(3), sequence_e3_83_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_83_adv, byte_range_80_bf);
                  struct_blk_Katakana.cc = simd_or(struct_blk_Katakana.cc, r3000_4dff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Balinese {
  Property_blk_Balinese() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Balinese & struct_blk_Balinese) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock byte_range_ac_ad, r1000_1fff_tmp4, byte_e1_byte_range_ac_ad;
		BitBlock byte_range_80_bf, r1000_1fff_tmp5, byte_e1_byte_range_ac_ad_sfx;




        struct_blk_Balinese.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_6);
                  byte_range_ac_ad = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  byte_e1_byte_range_ac_ad = simd_and(r1000_1fff_tmp4, byte_range_ac_ad);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_ac_ad, carryQ.get_carry_in(2), r1000_1fff_tmp5));
                  byte_e1_byte_range_ac_ad_sfx = simd_and(r1000_1fff_tmp5, byte_range_80_bf);
                  struct_blk_Balinese.cc = simd_or(struct_blk_Balinese.cc, byte_e1_byte_range_ac_ad_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Box_Drawing {
  Property_blk_Box_Drawing() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Box_Drawing & struct_blk_Box_Drawing) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_range_94_95, r2000_2fff_tmp4;
		BitBlock byte_e2_byte_range_94_95, byte_range_80_bf, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_94_95_sfx;




        struct_blk_Box_Drawing.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_94_95 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  byte_e2_byte_range_94_95 = simd_and(r2000_2fff_tmp4, byte_range_94_95);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_94_95, carryQ.get_carry_in(2), r2000_2fff_tmp5));
                  byte_e2_byte_range_94_95_sfx = simd_and(r2000_2fff_tmp5, byte_range_80_bf);
                  struct_blk_Box_Drawing.cc = simd_or(struct_blk_Box_Drawing.cc, byte_e2_byte_range_94_95_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_IDC {
  Property_blk_IDC() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_IDC & struct_blk_IDC) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_bf;
		BitBlock r2000_2fff_tmp6, sequence_e2_bf, byte_e2_adv, byte_range_b0_bf;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp7;




        struct_blk_IDC.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_bf = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  sequence_e2_bf = simd_and(r2000_2fff_tmp6, byte_bf);
                  byte_e2_adv = r2000_2fff_tmp6;
                  byte_range_b0_bf = r2000_2fff_tmp2;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(2), sequence_e2_bf_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_bf_adv, byte_range_b0_bf);
                  struct_blk_IDC.cc = simd_or(struct_blk_IDC.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Inscriptional_Parthian {
  Property_blk_Inscriptional_Parthian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Inscriptional_Parthian & struct_blk_Inscriptional_Parthian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ad, r10000_10ffff_tmp13, sequence_f0_90_ad;
		BitBlock sequence_f0_90_adv, byte_range_80_9f, sequence_f0_90_ad_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Inscriptional_Parthian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ad = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ad = simd_and(r10000_10ffff_tmp13, byte_ad);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(2), sequence_f0_90_ad_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_ad_adv, byte_range_80_9f);
            struct_blk_Inscriptional_Parthian.cc = simd_or(struct_blk_Inscriptional_Parthian.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Meroitic_Cursive {
  Property_blk_Meroitic_Cursive() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Meroitic_Cursive & struct_blk_Meroitic_Cursive) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a6, r10000_10ffff_tmp13, sequence_f0_90_a6;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_a6_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_a7, sequence_f0_90_a7, byte_range_80_bf, sequence_f0_90_a7_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Meroitic_Cursive.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a6 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a6 = simd_and(r10000_10ffff_tmp13, byte_a6);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(2), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a6_adv, byte_range_a0_bf);
            struct_blk_Meroitic_Cursive.cc = simd_or(struct_blk_Meroitic_Cursive.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_a7 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(3), sequence_f0_90_a7_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_a7_adv, byte_range_80_bf);
            struct_blk_Meroitic_Cursive.cc = simd_or(struct_blk_Meroitic_Cursive.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Pahawh_Hmong {
  Property_blk_Pahawh_Hmong() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Pahawh_Hmong & struct_blk_Pahawh_Hmong) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_ac_ad, r10000_10ffff_tmp15;
		BitBlock sequence_f0_96_byte_range_ac_ad, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp16, sequence_f0_96_byte_range_ac_ad_sfx;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_ae, sequence_f0_96_adv, sequence_f0_96_ae, r10000_10ffff_tmp20;
		BitBlock byte_range_80_8f, r10000_10ffff_tmp21;
		BitBlock sequence_f0_96_ae_byte_range_80_8f;




        struct_blk_Pahawh_Hmong.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, basis_bits.bit_6);
            byte_range_ac_ad = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_96_byte_range_ac_ad = simd_and(r10000_10ffff_tmp15, byte_range_ac_ad);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_ac_ad, carryQ.get_carry_in(2), r10000_10ffff_tmp16));
            sequence_f0_96_byte_range_ac_ad_sfx = simd_and(r10000_10ffff_tmp16, byte_range_80_bf);
            struct_blk_Pahawh_Hmong.cc = simd_or(struct_blk_Pahawh_Hmong.cc, sequence_f0_96_byte_range_ac_ad_sfx);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp18 = simd_and(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp8);
            byte_ae = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            sequence_f0_96_adv = r10000_10ffff_tmp15;
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp20);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(3), r10000_10ffff_tmp21));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp21, byte_range_80_8f);
            struct_blk_Pahawh_Hmong.cc = simd_or(struct_blk_Pahawh_Hmong.cc, sequence_f0_96_ae_byte_range_80_8f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Gothic {
  Property_blk_Gothic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Gothic & struct_blk_Gothic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8c;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_8c, sequence_f0_90_adv;
		BitBlock byte_range_b0_bf, sequence_f0_90_8c_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, byte_8d, sequence_f0_90_8d;
		BitBlock byte_range_80_8f, sequence_f0_90_8d_adv, r10000_10ffff_tmp16;




        struct_blk_Gothic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_8c = simd_and(r10000_10ffff_tmp12, byte_8c);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(2), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_8c_adv, byte_range_b0_bf);
            struct_blk_Gothic.cc = simd_or(struct_blk_Gothic.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp14);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            byte_range_80_8f = r10000_10ffff_tmp9;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(3), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_8d_adv, byte_range_80_8f);
            struct_blk_Gothic.cc = simd_or(struct_blk_Gothic.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Kannada {
  Property_blk_Kannada() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kannada & struct_blk_Kannada) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_b2_b3;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_b2_b3, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_b2_b3_sfx;




        struct_blk_Kannada.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_b2_b3 = simd_and(r800_fff_tmp4, byte_range_b2_b3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_b2_b3, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_b2_b3_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Kannada.cc = simd_or(struct_blk_Kannada.cc, byte_e0_byte_range_b2_b3_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Mende_Kikakui {
  Property_blk_Mende_Kikakui() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mende_Kikakui & struct_blk_Mende_Kikakui) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9e;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9e, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_a0_a2, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9e_byte_range_a0_a2, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp16, sequence_f0_9e_byte_range_a0_a2_sfx;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_a3, sequence_f0_9e_adv, sequence_f0_9e_a3, byte_range_80_9f;
		BitBlock r10000_10ffff_tmp20, sequence_f0_9e_a3_byte_range_80_9f;




        struct_blk_Mende_Kikakui.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9e = simd_and(r10000_10ffff_tmp10, byte_9e);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp15, byte_range_a0_a2);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(2), r10000_10ffff_tmp16));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp16, byte_range_80_bf);
            struct_blk_Mende_Kikakui.cc = simd_or(struct_blk_Mende_Kikakui.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp18 = simd_and(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_a3 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            sequence_f0_9e_adv = r10000_10ffff_tmp15;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(3), r10000_10ffff_tmp20));
            sequence_f0_9e_a3_byte_range_80_9f = simd_and(r10000_10ffff_tmp20, byte_range_80_9f);
            struct_blk_Mende_Kikakui.cc = simd_or(struct_blk_Mende_Kikakui.cc, sequence_f0_9e_a3_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Cuneiform {
  Property_blk_Cuneiform() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cuneiform & struct_blk_Cuneiform) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_92, r10000_10ffff_tmp9;
		BitBlock sequence_f0_92, byte_f0_adv, r10000_10ffff_tmp10, byte_range_80_8f;
		BitBlock r10000_10ffff_tmp11, sequence_f0_92_byte_range_80_8f;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_92_byte_range_80_8f_sfx;




        struct_blk_Cuneiform.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_92 = simd_and(r10000_10ffff_tmp9, byte_92);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_92_byte_range_80_8f = simd_and(r10000_10ffff_tmp11, byte_range_80_8f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8f, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_92_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Cuneiform.cc = simd_or(struct_blk_Cuneiform.cc, sequence_f0_92_byte_range_80_8f_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cham {
  Property_blk_Cham() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cham & struct_blk_Cham) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a8, ra000_ffff_tmp8;
		BitBlock sequence_ea_a8, byte_ea_adv, byte_range_80_bf, sequence_ea_a8_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_a9, sequence_ea_a9, byte_range_80_9f, sequence_ea_a9_adv;
		BitBlock ra000_ffff_tmp13;




        struct_blk_Cham.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_a8 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a8 = simd_and(ra000_ffff_tmp8, byte_a8);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(1), sequence_ea_a8_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a8_adv, byte_range_80_bf);
              struct_blk_Cham.cc = simd_or(struct_blk_Cham.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              byte_a9 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(2), sequence_ea_a9_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_a9_adv, byte_range_80_9f);
              struct_blk_Cham.cc = simd_or(struct_blk_Cham.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Enclosed_Alphanum {
  Property_blk_Enclosed_Alphanum() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Enclosed_Alphanum & struct_blk_Enclosed_Alphanum) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_91, r2000_2fff_tmp5;
		BitBlock sequence_e2_91, byte_e2_adv, byte_range_a0_bf, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp6, byte_range_92_93, byte_e2_byte_range_92_93;
		BitBlock byte_range_80_bf, r2000_2fff_tmp7, byte_e2_byte_range_92_93_sfx;




        struct_blk_Enclosed_Alphanum.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_91 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_91 = simd_and(r2000_2fff_tmp5, byte_91);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(2), sequence_e2_91_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
                  struct_blk_Enclosed_Alphanum.cc = simd_or(struct_blk_Enclosed_Alphanum.cc, r2000_2fff_tmp6);
                  byte_range_92_93 = simd_and(r2000_2fff_tmp2, r800_4dff_tmp1);
                  byte_e2_byte_range_92_93 = simd_and(byte_e2_adv, byte_range_92_93);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_92_93, carryQ.get_carry_in(3), r2000_2fff_tmp7));
                  byte_e2_byte_range_92_93_sfx = simd_and(r2000_2fff_tmp7, byte_range_80_bf);
                  struct_blk_Enclosed_Alphanum.cc = simd_or(struct_blk_Enclosed_Alphanum.cc, byte_e2_byte_range_92_93_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Phonetic_Ext_Sup {
  Property_blk_Phonetic_Ext_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Phonetic_Ext_Sup & struct_blk_Phonetic_Ext_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_b6, r1000_1fff_tmp5, sequence_e1_b6;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_b6_adv, r1000_1fff_tmp6;




        struct_blk_Phonetic_Ext_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp3);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_b6 = simd_and(r1000_1fff_tmp5, byte_b6);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(2), sequence_e1_b6_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_b6_adv, byte_range_80_bf);
                  struct_blk_Phonetic_Ext_Sup.cc = simd_or(struct_blk_Phonetic_Ext_Sup.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Gurmukhi {
  Property_blk_Gurmukhi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Gurmukhi & struct_blk_Gurmukhi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_a8_a9;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_a8_a9, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_a8_a9_sfx;




        struct_blk_Gurmukhi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_a8_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_a8_a9 = simd_and(r800_fff_tmp4, byte_range_a8_a9);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_a8_a9, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_a8_a9_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Gurmukhi.cc = simd_or(struct_blk_Gurmukhi.cc, byte_e0_byte_range_a8_a9_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Modifier_Letters {
  Property_blk_Modifier_Letters() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Modifier_Letters & struct_blk_Modifier_Letters) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_ca, r100_2ff_tmp4;
		BitBlock r100_2ff_tmp5, byte_range_b0_bf, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, r100_2ff_tmp9, byte_cb, r100_2ff_tmp10, byte_ca_adv;
		BitBlock r2b0_2ff_tmp1, byte_range_80_bf, byte_cb_adv, r2b0_2ff_tmp2;




        struct_blk_Modifier_Letters.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp1, r100_2ff_tmp2);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r100_2ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(0), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_b0_bf);
                r100_2ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp1, r100_2ff_tmp8);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp9);
                r100_2ff_tmp10 = simd_or(r100_2ff_tmp7, byte_cb);
                if ((bitblock::any(r100_2ff_tmp10) || carryQ.CarryTest(1, 1))) {
                  byte_ca_adv = r100_2ff_tmp6;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_blk_Modifier_Letters.cc = simd_or(struct_blk_Modifier_Letters.cc, r2b0_2ff_tmp1);
                  byte_range_80_bf = r100_2ff_tmp4;
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(1), byte_cb_adv));
                  r2b0_2ff_tmp2 = simd_and(byte_cb_adv, byte_range_80_bf);
                  struct_blk_Modifier_Letters.cc = simd_or(struct_blk_Modifier_Letters.cc, r2b0_2ff_tmp2);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Duployan {
  Property_blk_Duployan() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Duployan & struct_blk_Duployan) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9b;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9b, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_b0_b1, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9b_byte_range_b0_b1, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9b_byte_range_b0_b1_sfx;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_b2, sequence_f0_9b_adv, sequence_f0_9b_b2;
		BitBlock byte_range_80_9f, r10000_10ffff_tmp19;
		BitBlock sequence_f0_9b_b2_byte_range_80_9f;




        struct_blk_Duployan.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_b0_b1 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9b_byte_range_b0_b1 = simd_and(r10000_10ffff_tmp13, byte_range_b0_b1);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_b0_b1, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9b_byte_range_b0_b1_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Duployan.cc = simd_or(struct_blk_Duployan.cc, sequence_f0_9b_byte_range_b0_b1_sfx);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp1);
            byte_b2 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_9b_adv = r10000_10ffff_tmp13;
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(3), r10000_10ffff_tmp19));
            sequence_f0_9b_b2_byte_range_80_9f = simd_and(r10000_10ffff_tmp19, byte_range_80_9f);
            struct_blk_Duployan.cc = simd_or(struct_blk_Duployan.cc, sequence_f0_9b_b2_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Telugu {
  Property_blk_Telugu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Telugu & struct_blk_Telugu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, byte_range_b0_b1, r800_fff_tmp3;
		BitBlock byte_e0_byte_range_b0_b1, byte_range_80_bf, r800_fff_tmp4;
		BitBlock byte_e0_byte_range_b0_b1_sfx;




        struct_blk_Telugu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  byte_range_b0_b1 = simd_andc(r800_fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  byte_e0_byte_range_b0_b1 = simd_and(r800_fff_tmp3, byte_range_b0_b1);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_b0_b1, carryQ.get_carry_in(2), r800_fff_tmp4));
                  byte_e0_byte_range_b0_b1_sfx = simd_and(r800_fff_tmp4, byte_range_80_bf);
                  struct_blk_Telugu.cc = simd_or(struct_blk_Telugu.cc, byte_e0_byte_range_b0_b1_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Kharoshthi {
  Property_blk_Kharoshthi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kharoshthi & struct_blk_Kharoshthi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a8;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a8, sequence_f0_90_adv;
		BitBlock byte_range_80_bf, sequence_f0_90_a8_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_a9, sequence_f0_90_a9, byte_range_80_9f;
		BitBlock sequence_f0_90_a9_adv, r10000_10ffff_tmp18;




        struct_blk_Kharoshthi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a8 = simd_and(r10000_10ffff_tmp12, byte_a8);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(2), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a8_adv, byte_range_80_bf);
            struct_blk_Kharoshthi.cc = simd_or(struct_blk_Kharoshthi.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_a9 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(3), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_a9_adv, byte_range_80_9f);
            struct_blk_Kharoshthi.cc = simd_or(struct_blk_Kharoshthi.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Diacriticals_For_Symbols {
  Property_blk_Diacriticals_For_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Diacriticals_For_Symbols & struct_blk_Diacriticals_For_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_83, r2000_2fff_tmp5;
		BitBlock sequence_e2_83, byte_e2_adv, byte_range_90_bf, sequence_e2_83_adv;
		BitBlock r2000_2fff_tmp6;




        struct_blk_Diacriticals_For_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_83 = simd_and(r2000_2fff_tmp5, byte_83);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(2), sequence_e2_83_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_83_adv, byte_range_90_bf);
                  struct_blk_Diacriticals_For_Symbols.cc = simd_or(struct_blk_Diacriticals_For_Symbols.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Takri {
  Property_blk_Takri() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Takri & struct_blk_Takri) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_9a, r10000_10ffff_tmp13, sequence_f0_91_9a;
		BitBlock sequence_f0_91_adv, byte_range_80_bf, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_9b, sequence_f0_91_9b, r10000_10ffff_tmp18;
		BitBlock byte_range_80_8f, sequence_f0_91_9b_adv, r10000_10ffff_tmp19;




        struct_blk_Takri.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_91_9a = simd_and(r10000_10ffff_tmp13, byte_9a);
            sequence_f0_91_adv = r10000_10ffff_tmp13;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(2), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_91_9a_adv, byte_range_80_bf);
            struct_blk_Takri.cc = simd_or(struct_blk_Takri.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_9b = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(3), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_9b_adv, byte_range_80_8f);
            struct_blk_Takri.cc = simd_or(struct_blk_Takri.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_CJK_Compat_Forms {
  Property_blk_CJK_Compat_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Compat_Forms & struct_blk_CJK_Compat_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b8, ra000_ffff_tmp10, sequence_ef_b8, byte_ef_adv;
		BitBlock byte_range_b0_bf, sequence_ef_b8_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_b9, sequence_ef_b9;
		BitBlock ra000_ffff_tmp14, byte_range_80_8f, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp15;




        struct_blk_CJK_Compat_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp10, byte_b8);
              byte_ef_adv = ra000_ffff_tmp10;
              byte_range_b0_bf = ra000_ffff_tmp6;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(1), sequence_ef_b8_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_b8_adv, byte_range_b0_bf);
              struct_blk_CJK_Compat_Forms.cc = simd_or(struct_blk_CJK_Compat_Forms.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp12);
              byte_b9 = simd_and(byte_range_b0_bf, ra000_ffff_tmp13);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp14);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(2), sequence_ef_b9_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ef_b9_adv, byte_range_80_8f);
              struct_blk_CJK_Compat_Forms.cc = simd_or(struct_blk_CJK_Compat_Forms.cc, ra000_ffff_tmp15);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Misc_Pictographs {
  Property_blk_Misc_Pictographs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Pictographs & struct_blk_Misc_Pictographs) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_8c_97;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_byte_range_8c_97;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9f_byte_range_8c_97_sfx;




        struct_blk_Misc_Pictographs.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp12 = simd_not(basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp12), simd_andc(r10000_10ffff_tmp7, basis_bits.bit_3));
            byte_range_8c_97 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9f_byte_range_8c_97 = simd_and(r10000_10ffff_tmp14, byte_range_8c_97);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_8c_97, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_9f_byte_range_8c_97_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Misc_Pictographs.cc = simd_or(struct_blk_Misc_Pictographs.cc, sequence_f0_9f_byte_range_8c_97_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Bopomofo {
  Property_blk_Bopomofo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bopomofo & struct_blk_Bopomofo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, byte_84, r3000_4dff_tmp3, sequence_e3_84;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, byte_range_80_af, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp5;




        struct_blk_Bopomofo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp3));
                  sequence_e3_84 = simd_and(r3000_4dff_tmp3, byte_84);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(2), sequence_e3_84_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_84_adv, byte_range_80_af);
                  struct_blk_Bopomofo.cc = simd_or(struct_blk_Bopomofo.cc, r3000_4dff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Miao {
  Property_blk_Miao() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Miao & struct_blk_Miao) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_bc_bd;
		BitBlock r10000_10ffff_tmp14, sequence_f0_96_byte_range_bc_bd;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_96_byte_range_bc_bd_sfx, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_be, sequence_f0_96_adv;
		BitBlock sequence_f0_96_be, byte_range_80_9f, r10000_10ffff_tmp19;
		BitBlock sequence_f0_96_be_byte_range_80_9f;




        struct_blk_Miao.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, basis_bits.bit_6);
            byte_range_bc_bd = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_96_byte_range_bc_bd = simd_and(r10000_10ffff_tmp14, byte_range_bc_bd);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_bc_bd, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_96_byte_range_bc_bd_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Miao.cc = simd_or(struct_blk_Miao.cc, sequence_f0_96_byte_range_bc_bd_sfx);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp8);
            byte_be = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            sequence_f0_96_adv = r10000_10ffff_tmp14;
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(3), r10000_10ffff_tmp19));
            sequence_f0_96_be_byte_range_80_9f = simd_and(r10000_10ffff_tmp19, byte_range_80_9f);
            struct_blk_Miao.cc = simd_or(struct_blk_Miao.cc, sequence_f0_96_be_byte_range_80_9f);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Psalter_Pahlavi {
  Property_blk_Psalter_Pahlavi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Psalter_Pahlavi & struct_blk_Psalter_Pahlavi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_ae, r10000_10ffff_tmp13, sequence_f0_90_ae;
		BitBlock sequence_f0_90_adv, byte_range_80_af, sequence_f0_90_ae_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Psalter_Pahlavi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_ae = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_ae = simd_and(r10000_10ffff_tmp13, byte_ae);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(2), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_ae_adv, byte_range_80_af);
            struct_blk_Psalter_Pahlavi.cc = simd_or(struct_blk_Psalter_Pahlavi.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Arabic {
  Property_blk_Arabic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic & struct_blk_Arabic) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_d8_db, byte_range_80_bf, r600_6ff_tmp1;
		BitBlock byte_range_d8_db_sfx;




        struct_blk_Arabic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(0, 1))) {
              byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_range_d8_db, carryQ.get_carry_in(0), r600_6ff_tmp1));
              byte_range_d8_db_sfx = simd_and(r600_6ff_tmp1, byte_range_80_bf);
              struct_blk_Arabic.cc = simd_or(struct_blk_Arabic.cc, byte_range_d8_db_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_Arabic_Ext_A {
  Property_blk_Arabic_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic_Ext_A & struct_blk_Arabic_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a2, r800_fff_tmp4;
		BitBlock sequence_e0_a2, byte_e0_adv, byte_range_a0_bf, sequence_e0_a2_adv;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, byte_a3, sequence_e0_a3;
		BitBlock byte_range_80_bf, sequence_e0_a3_adv, r800_fff_tmp8;




        struct_blk_Arabic_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a2 = simd_and(r800_fff_tmp4, byte_a2);
                  byte_e0_adv = r800_fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(2), sequence_e0_a2_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a2_adv, byte_range_a0_bf);
                  struct_blk_Arabic_Ext_A.cc = simd_or(struct_blk_Arabic_Ext_A.cc, r800_fff_tmp5);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp7);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(3), sequence_e0_a3_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a3_adv, byte_range_80_bf);
                  struct_blk_Arabic_Ext_A.cc = simd_or(struct_blk_Arabic_Ext_A.cc, r800_fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Avestan {
  Property_blk_Avestan() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Avestan & struct_blk_Avestan) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_ac;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_ac, sequence_f0_90_adv;
		BitBlock byte_range_80_bf, sequence_f0_90_ac_adv, r10000_10ffff_tmp13;




        struct_blk_Avestan.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_ac = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_ac = simd_and(r10000_10ffff_tmp12, byte_ac);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(2), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_ac_adv, byte_range_80_bf);
            struct_blk_Avestan.cc = simd_or(struct_blk_Avestan.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Byzantine_Music {
  Property_blk_Byzantine_Music() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Byzantine_Music & struct_blk_Byzantine_Music) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_80_83, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9d_byte_range_80_83, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9d_byte_range_80_83_sfx;




        struct_blk_Byzantine_Music.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9d_byte_range_80_83 = simd_and(r10000_10ffff_tmp13, byte_range_80_83);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_83, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9d_byte_range_80_83_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Byzantine_Music.cc = simd_or(struct_blk_Byzantine_Music.cc, sequence_f0_9d_byte_range_80_83_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Lydian {
  Property_blk_Lydian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Lydian & struct_blk_Lydian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a4;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a4, sequence_f0_90_adv;
		BitBlock byte_range_a0_bf, sequence_f0_90_a4_adv, r10000_10ffff_tmp13;




        struct_blk_Lydian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_a4 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a4 = simd_and(r10000_10ffff_tmp12, byte_a4);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(2), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a4_adv, byte_range_a0_bf);
            struct_blk_Lydian.cc = simd_or(struct_blk_Lydian.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Hiragana {
  Property_blk_Hiragana() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Hiragana & struct_blk_Hiragana) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_81;
		BitBlock r3000_4dff_tmp5, sequence_e3_81, byte_e3_adv, byte_range_80_bf;
		BitBlock sequence_e3_81_adv, r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, byte_82, sequence_e3_82, byte_range_80_9f;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp10;




        struct_blk_Hiragana.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_andc(r3000_4dff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_81 = simd_and(r3000_4dff_tmp5, byte_81);
                  byte_e3_adv = r3000_4dff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(2), sequence_e3_81_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_81_adv, byte_range_80_bf);
                  struct_blk_Hiragana.cc = simd_or(struct_blk_Hiragana.cc, r3000_4dff_tmp6);
                  r3000_4dff_tmp7 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp9 = simd_andc(r3000_4dff_tmp8, r800_ffff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp9);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(3), sequence_e3_82_adv));
                  r3000_4dff_tmp10 = simd_and(sequence_e3_82_adv, byte_range_80_9f);
                  struct_blk_Hiragana.cc = simd_or(struct_blk_Hiragana.cc, r3000_4dff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Javanese {
  Property_blk_Javanese() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Javanese & struct_blk_Javanese) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a6, ra000_ffff_tmp8;
		BitBlock sequence_ea_a6, byte_ea_adv, byte_range_80_bf, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_a7, sequence_ea_a7, byte_range_80_9f, sequence_ea_a7_adv;
		BitBlock ra000_ffff_tmp13;




        struct_blk_Javanese.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a6 = simd_and(ra000_ffff_tmp8, byte_a6);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(1), sequence_ea_a6_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a6_adv, byte_range_80_bf);
              struct_blk_Javanese.cc = simd_or(struct_blk_Javanese.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp11);
              byte_a7 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(2), sequence_ea_a7_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_a7_adv, byte_range_80_9f);
              struct_blk_Javanese.cc = simd_or(struct_blk_Javanese.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Imperial_Aramaic {
  Property_blk_Imperial_Aramaic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Imperial_Aramaic & struct_blk_Imperial_Aramaic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a1;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a1, sequence_f0_90_adv;
		BitBlock byte_range_80_9f, sequence_f0_90_a1_adv, r10000_10ffff_tmp13;




        struct_blk_Imperial_Aramaic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a1 = simd_and(r10000_10ffff_tmp12, byte_a1);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(2), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a1_adv, byte_range_80_9f);
            struct_blk_Imperial_Aramaic.cc = simd_or(struct_blk_Imperial_Aramaic.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Yijing {
  Property_blk_Yijing() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Yijing & struct_blk_Yijing) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_b7, sequence_e4_b7;
		BitBlock byte_e4_adv, byte_range_80_bf, sequence_e4_b7_adv, r3000_4dff_tmp4;




        struct_blk_Yijing.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 1))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 1))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 1))) {
                  r3000_4dff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_b7 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  sequence_e4_b7 = simd_and(r800_ffff_tmp8, byte_b7);
                  byte_e4_adv = r800_ffff_tmp8;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(1), sequence_e4_b7_adv));
                  r3000_4dff_tmp4 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
                  struct_blk_Yijing.cc = simd_or(struct_blk_Yijing.cc, r3000_4dff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Bengali {
  Property_blk_Bengali() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bengali & struct_blk_Bengali) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, byte_range_a6_a7, r800_fff_tmp3;
		BitBlock byte_e0_byte_range_a6_a7, byte_range_80_bf, r800_fff_tmp4;
		BitBlock byte_e0_byte_range_a6_a7_sfx;




        struct_blk_Bengali.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a6_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  byte_e0_byte_range_a6_a7 = simd_and(r800_fff_tmp3, byte_range_a6_a7);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_a6_a7, carryQ.get_carry_in(2), r800_fff_tmp4));
                  byte_e0_byte_range_a6_a7_sfx = simd_and(r800_fff_tmp4, byte_range_80_bf);
                  struct_blk_Bengali.cc = simd_or(struct_blk_Bengali.cc, byte_e0_byte_range_a6_a7_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Mahajani {
  Property_blk_Mahajani() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mahajani & struct_blk_Mahajani) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_85;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_85, sequence_f0_91_adv;
		BitBlock byte_range_90_bf, sequence_f0_91_85_adv, r10000_10ffff_tmp15;




        struct_blk_Mahajani.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_85 = simd_and(r10000_10ffff_tmp14, byte_85);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(2), sequence_f0_91_85_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_85_adv, byte_range_90_bf);
            struct_blk_Mahajani.cc = simd_or(struct_blk_Mahajani.cc, r10000_10ffff_tmp15);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_CJK_Strokes {
  Property_blk_CJK_Strokes() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Strokes & struct_blk_CJK_Strokes) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_87, r3000_4dff_tmp4;
		BitBlock sequence_e3_87, byte_e3_adv, r3000_4dff_tmp5, byte_range_80_af;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp6;




        struct_blk_CJK_Strokes.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  sequence_e3_87 = simd_and(r3000_4dff_tmp4, byte_87);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(2), sequence_e3_87_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_87_adv, byte_range_80_af);
                  struct_blk_CJK_Strokes.cc = simd_or(struct_blk_CJK_Strokes.cc, r3000_4dff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Caucasian_Albanian {
  Property_blk_Caucasian_Albanian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Caucasian_Albanian & struct_blk_Caucasian_Albanian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_94, r10000_10ffff_tmp10, sequence_f0_90_94;
		BitBlock sequence_f0_90_adv, byte_range_b0_bf, sequence_f0_90_94_adv;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock byte_95, sequence_f0_90_95, byte_range_80_af, sequence_f0_90_95_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Caucasian_Albanian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_94 = simd_and(r10000_10ffff_tmp10, byte_94);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(2), sequence_f0_90_94_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_94_adv, byte_range_b0_bf);
            struct_blk_Caucasian_Albanian.cc = simd_or(struct_blk_Caucasian_Albanian.cc, r10000_10ffff_tmp11);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp12);
            byte_95 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp13);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(3), sequence_f0_90_95_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_95_adv, byte_range_80_af);
            struct_blk_Caucasian_Albanian.cc = simd_or(struct_blk_Caucasian_Albanian.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Cypriot_Syllabary {
  Property_blk_Cypriot_Syllabary() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cypriot_Syllabary & struct_blk_Cypriot_Syllabary) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_a0, r10000_10ffff_tmp10, sequence_f0_90_a0;
		BitBlock sequence_f0_90_adv, byte_range_80_bf, sequence_f0_90_a0_adv;
		BitBlock r10000_10ffff_tmp11;




        struct_blk_Cypriot_Syllabary.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_a0 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_a0 = simd_and(r10000_10ffff_tmp10, byte_a0);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(2), sequence_f0_90_a0_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_a0_adv, byte_range_80_bf);
            struct_blk_Cypriot_Syllabary.cc = simd_or(struct_blk_Cypriot_Syllabary.cc, r10000_10ffff_tmp11);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Mro {
  Property_blk_Mro() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mro & struct_blk_Mro) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_a9, r10000_10ffff_tmp16, sequence_f0_96_a9;
		BitBlock sequence_f0_96_adv, byte_range_80_af, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Mro.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_a9 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp16));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp16, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp16;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(2), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_96_a9_adv, byte_range_80_af);
            struct_blk_Mro.cc = simd_or(struct_blk_Mro.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Greek_Ext {
  Property_blk_Greek_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Greek_Ext & struct_blk_Greek_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock byte_range_bc_bf, r1000_1fff_tmp4, byte_e1_byte_range_bc_bf;
		BitBlock byte_range_80_bf, r1000_1fff_tmp5, byte_e1_byte_range_bc_bf_sfx;




        struct_blk_Greek_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_bc_bf = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  byte_e1_byte_range_bc_bf = simd_and(r1000_1fff_tmp4, byte_range_bc_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_bc_bf, carryQ.get_carry_in(2), r1000_1fff_tmp5));
                  byte_e1_byte_range_bc_bf_sfx = simd_and(r1000_1fff_tmp5, byte_range_80_bf);
                  struct_blk_Greek_Ext.cc = simd_or(struct_blk_Greek_Ext.cc, byte_e1_byte_range_bc_bf_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Emoticons {
  Property_blk_Emoticons() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Emoticons & struct_blk_Emoticons) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_98, r10000_10ffff_tmp13, sequence_f0_9f_98;
		BitBlock sequence_f0_9f_adv, byte_range_80_bf, sequence_f0_9f_98_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_99, sequence_f0_9f_99, r10000_10ffff_tmp18;
		BitBlock byte_range_80_8f, sequence_f0_9f_99_adv, r10000_10ffff_tmp19;




        struct_blk_Emoticons.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9f_98 = simd_and(r10000_10ffff_tmp13, byte_98);
            sequence_f0_9f_adv = r10000_10ffff_tmp13;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_98, carryQ.get_carry_in(2), sequence_f0_9f_98_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9f_98_adv, byte_range_80_bf);
            struct_blk_Emoticons.cc = simd_or(struct_blk_Emoticons.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp16);
            byte_99 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp18);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(3), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_9f_99_adv, byte_range_80_8f);
            struct_blk_Emoticons.cc = simd_or(struct_blk_Emoticons.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Misc_Technical {
  Property_blk_Misc_Technical() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Technical & struct_blk_Misc_Technical) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_range_8c_8f, r2000_2fff_tmp4;
		BitBlock byte_e2_byte_range_8c_8f, byte_range_80_bf, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_8c_8f_sfx;




        struct_blk_Misc_Technical.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_8c_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  byte_e2_byte_range_8c_8f = simd_and(r2000_2fff_tmp4, byte_range_8c_8f);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_8c_8f, carryQ.get_carry_in(2), r2000_2fff_tmp5));
                  byte_e2_byte_range_8c_8f_sfx = simd_and(r2000_2fff_tmp5, byte_range_80_bf);
                  struct_blk_Misc_Technical.cc = simd_or(struct_blk_Misc_Technical.cc, byte_e2_byte_range_8c_8f_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Limbu {
  Property_blk_Limbu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Limbu & struct_blk_Limbu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, byte_a4, r1000_1fff_tmp2, sequence_e1_a4;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_a4_adv, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_a5, sequence_e1_a5;
		BitBlock r1000_1fff_tmp6, byte_range_80_8f, sequence_e1_a5_adv;
		BitBlock r1000_1fff_tmp7;




        struct_blk_Limbu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r1000_1fff_tmp1, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp2));
                  sequence_e1_a4 = simd_and(r1000_1fff_tmp2, byte_a4);
                  byte_e1_adv = r1000_1fff_tmp2;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(2), sequence_e1_a4_adv));
                  r1000_1fff_tmp3 = simd_and(sequence_e1_a4_adv, byte_range_80_bf);
                  struct_blk_Limbu.cc = simd_or(struct_blk_Limbu.cc, r1000_1fff_tmp3);
                  r1000_1fff_tmp4 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp5 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp5);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_8f = simd_andc(byte_range_80_bf, r1000_1fff_tmp6);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(3), sequence_e1_a5_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_a5_adv, byte_range_80_8f);
                  struct_blk_Limbu.cc = simd_or(struct_blk_Limbu.cc, r1000_1fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Chakma {
  Property_blk_Chakma() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Chakma & struct_blk_Chakma) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_84;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_84, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_84_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_85, sequence_f0_91_85, byte_range_80_8f, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp19;




        struct_blk_Chakma.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_84 = simd_and(r10000_10ffff_tmp14, byte_84);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(2), sequence_f0_91_84_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_84_adv, byte_range_80_bf);
            struct_blk_Chakma.cc = simd_or(struct_blk_Chakma.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            byte_range_80_8f = r10000_10ffff_tmp17;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(3), sequence_f0_91_85_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_85_adv, byte_range_80_8f);
            struct_blk_Chakma.cc = simd_or(struct_blk_Chakma.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Meetei_Mayek {
  Property_blk_Meetei_Mayek() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Meetei_Mayek & struct_blk_Meetei_Mayek) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_af;
		BitBlock ra000_ffff_tmp9, sequence_ea_af, byte_ea_adv, byte_range_80_bf;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp10;




        struct_blk_Meetei_Mayek.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_af = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_af = simd_and(ra000_ffff_tmp9, byte_af);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(1), sequence_ea_af_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_af_adv, byte_range_80_bf);
              struct_blk_Meetei_Mayek.cc = simd_or(struct_blk_Meetei_Mayek.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Half_And_Full_Forms {
  Property_blk_Half_And_Full_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Half_And_Full_Forms & struct_blk_Half_And_Full_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_range_bc_be, ra000_ffff_tmp8;
		BitBlock byte_ef_byte_range_bc_be, byte_range_80_bf, ra000_ffff_tmp9;
		BitBlock byte_ef_byte_range_bc_be_sfx, ra000_ffff_tmp10, byte_bf, byte_ef_adv;
		BitBlock sequence_ef_bf, byte_range_80_af, ra000_ffff_tmp11;
		BitBlock sequence_ef_bf_byte_range_80_af;




        struct_blk_Half_And_Full_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp1);
              byte_range_bc_be = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp2);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              byte_ef_byte_range_bc_be = simd_and(ra000_ffff_tmp8, byte_range_bc_be);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_bc_be, carryQ.get_carry_in(1), ra000_ffff_tmp9));
              byte_ef_byte_range_bc_be_sfx = simd_and(ra000_ffff_tmp9, byte_range_80_bf);
              struct_blk_Half_And_Full_Forms.cc = simd_or(struct_blk_Half_And_Full_Forms.cc, byte_ef_byte_range_bc_be_sfx);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp5);
              byte_bf = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              byte_ef_adv = ra000_ffff_tmp8;
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_80_af = simd_andc(byte_range_80_bf, ra000_ffff_tmp5);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(2), ra000_ffff_tmp11));
              sequence_ef_bf_byte_range_80_af = simd_and(ra000_ffff_tmp11, byte_range_80_af);
              struct_blk_Half_And_Full_Forms.cc = simd_or(struct_blk_Half_And_Full_Forms.cc, sequence_ef_bf_byte_range_80_af);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cyrillic {
  Property_blk_Cyrillic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cyrillic & struct_blk_Cyrillic) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, byte_range_d0_d3, byte_range_80_bf;
		BitBlock r400_4ff_tmp1, byte_range_d0_d3_sfx;




        struct_blk_Cyrillic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 1))) {
              r400_5ff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp2, r400_5ff_tmp1);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(0, 1))) {
                byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_range_d0_d3, carryQ.get_carry_in(0), r400_4ff_tmp1));
                byte_range_d0_d3_sfx = simd_and(r400_4ff_tmp1, byte_range_80_bf);
                struct_blk_Cyrillic.cc = simd_or(struct_blk_Cyrillic.cc, byte_range_d0_d3_sfx);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_UCAS_Ext {
  Property_blk_UCAS_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_UCAS_Ext & struct_blk_UCAS_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a2;
		BitBlock r1000_1fff_tmp4, sequence_e1_a2, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock byte_range_b0_bf, sequence_e1_a2_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_a3, sequence_e1_a3;
		BitBlock byte_range_80_bf, sequence_e1_a3_adv, r1000_1fff_tmp9;




        struct_blk_UCAS_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a2 = simd_and(r1000_1fff_tmp4, byte_a2);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(2), sequence_e1_a2_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_a2_adv, byte_range_b0_bf);
                  struct_blk_UCAS_Ext.cc = simd_or(struct_blk_UCAS_Ext.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, r800_ffff_tmp1);
                  byte_a3 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp8);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(3), sequence_e1_a3_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_a3_adv, byte_range_80_bf);
                  struct_blk_UCAS_Ext.cc = simd_or(struct_blk_UCAS_Ext.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Glagolitic {
  Property_blk_Glagolitic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Glagolitic & struct_blk_Glagolitic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_b0, r2000_2fff_tmp4, sequence_e2_b0;
		BitBlock byte_e2_adv, byte_range_80_bf, sequence_e2_b0_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_b1;
		BitBlock sequence_e2_b1, byte_range_80_9f, sequence_e2_b1_adv, r2000_2fff_tmp9;




        struct_blk_Glagolitic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_b0 = simd_and(r2000_2fff_tmp4, byte_b0);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(2), sequence_e2_b0_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_b0_adv, byte_range_80_bf);
                  struct_blk_Glagolitic.cc = simd_or(struct_blk_Glagolitic.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_andc(r2000_2fff_tmp7, r800_ffff_tmp1);
                  byte_b1 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp8);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(3), sequence_e2_b1_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_b1_adv, byte_range_80_9f);
                  struct_blk_Glagolitic.cc = simd_or(struct_blk_Glagolitic.cc, r2000_2fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Buhid {
  Property_blk_Buhid() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Buhid & struct_blk_Buhid) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9d, r1000_1fff_tmp5, sequence_e1_9d;
		BitBlock byte_e1_adv, byte_range_80_9f, sequence_e1_9d_adv, r1000_1fff_tmp6;




        struct_blk_Buhid.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_9d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9d = simd_and(r1000_1fff_tmp5, byte_9d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(2), sequence_e1_9d_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_9d_adv, byte_range_80_9f);
                  struct_blk_Buhid.cc = simd_or(struct_blk_Buhid.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sup_PUA_B {
  Property_blk_Sup_PUA_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_PUA_B & struct_blk_Sup_PUA_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f4;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, byte_range_80_8f;
		BitBlock r10000_10ffff_tmp6, byte_f4_byte_range_80_8f, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp7, byte_f4_byte_range_80_8f_sfx, r10000_10ffff_tmp8;
		BitBlock byte_f4_byte_range_80_8f_sfx_sfx;




        struct_blk_Sup_PUA_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(0), r10000_10ffff_tmp6));
            byte_f4_byte_range_80_8f = simd_and(r10000_10ffff_tmp6, byte_range_80_8f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f, carryQ.get_carry_in(1), r10000_10ffff_tmp7));
            byte_f4_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp7, byte_range_80_bf);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_f4_byte_range_80_8f_sfx, carryQ.get_carry_in(2), r10000_10ffff_tmp8));
            byte_f4_byte_range_80_8f_sfx_sfx = simd_and(r10000_10ffff_tmp8, byte_range_80_bf);
            struct_blk_Sup_PUA_B.cc = simd_or(struct_blk_Sup_PUA_B.cc, byte_f4_byte_range_80_8f_sfx_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_New_Tai_Lue {
  Property_blk_New_Tai_Lue() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_New_Tai_Lue & struct_blk_New_Tai_Lue) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a6;
		BitBlock r1000_1fff_tmp4, sequence_e1_a6, byte_e1_adv, byte_range_80_bf;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, byte_a7, sequence_e1_a7, byte_range_80_9f;
		BitBlock sequence_e1_a7_adv, r1000_1fff_tmp9;




        struct_blk_New_Tai_Lue.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp2);
                  byte_a6 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a6 = simd_and(r1000_1fff_tmp4, byte_a6);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(2), sequence_e1_a6_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a6_adv, byte_range_80_bf);
                  struct_blk_New_Tai_Lue.cc = simd_or(struct_blk_New_Tai_Lue.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp7);
                  byte_a7 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp8);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(3), sequence_e1_a7_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_a7_adv, byte_range_80_9f);
                  struct_blk_New_Tai_Lue.cc = simd_or(struct_blk_New_Tai_Lue.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Geometric_Shapes {
  Property_blk_Geometric_Shapes() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Geometric_Shapes & struct_blk_Geometric_Shapes) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_96, r2000_2fff_tmp4, sequence_e2_96;
		BitBlock byte_e2_adv, byte_range_a0_bf, sequence_e2_96_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_97, sequence_e2_97;
		BitBlock byte_range_80_bf, sequence_e2_97_adv, r2000_2fff_tmp8;




        struct_blk_Geometric_Shapes.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_96 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_96 = simd_and(r2000_2fff_tmp4, byte_96);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(2), sequence_e2_96_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_96_adv, byte_range_a0_bf);
                  struct_blk_Geometric_Shapes.cc = simd_or(struct_blk_Geometric_Shapes.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp6);
                  byte_97 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(3), sequence_e2_97_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_97_adv, byte_range_80_bf);
                  struct_blk_Geometric_Shapes.cc = simd_or(struct_blk_Geometric_Shapes.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Sinhala_Archaic_Numbers {
  Property_blk_Sinhala_Archaic_Numbers() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sinhala_Archaic_Numbers & struct_blk_Sinhala_Archaic_Numbers) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_87, r10000_10ffff_tmp15, sequence_f0_91_87, sequence_f0_91_adv;
		BitBlock byte_range_a0_bf, sequence_f0_91_87_adv, r10000_10ffff_tmp16;




        struct_blk_Sinhala_Archaic_Numbers.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_87 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_87 = simd_and(r10000_10ffff_tmp15, byte_87);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(2), sequence_f0_91_87_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_87_adv, byte_range_a0_bf);
            struct_blk_Sinhala_Archaic_Numbers.cc = simd_or(struct_blk_Sinhala_Archaic_Numbers.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ogham {
  Property_blk_Ogham() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ogham & struct_blk_Ogham) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9a, r1000_1fff_tmp6;
		BitBlock sequence_e1_9a, byte_e1_adv, byte_range_80_9f, sequence_e1_9a_adv;
		BitBlock r1000_1fff_tmp7;




        struct_blk_Ogham.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(2), sequence_e1_9a_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_9a_adv, byte_range_80_9f);
                  struct_blk_Ogham.cc = simd_or(struct_blk_Ogham.cc, r1000_1fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Kana_Sup {
  Property_blk_Kana_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kana_Sup & struct_blk_Kana_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9b;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9b, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_80_83, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9b_byte_range_80_83, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9b_byte_range_80_83_sfx;




        struct_blk_Kana_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9b_byte_range_80_83 = simd_and(r10000_10ffff_tmp13, byte_range_80_83);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_byte_range_80_83, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9b_byte_range_80_83_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Kana_Sup.cc = simd_or(struct_blk_Kana_Sup.cc, sequence_f0_9b_byte_range_80_83_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Bassa_Vah {
  Property_blk_Bassa_Vah() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bassa_Vah & struct_blk_Bassa_Vah) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, byte_ab, r10000_10ffff_tmp16, sequence_f0_96_ab;
		BitBlock sequence_f0_96_adv, r10000_10ffff_tmp17, byte_range_90_bf;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp18;




        struct_blk_Bassa_Vah.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_ab = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp16));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp16, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp16;
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(2), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_96_ab_adv, byte_range_90_bf);
            struct_blk_Bassa_Vah.cc = simd_or(struct_blk_Bassa_Vah.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Specials {
  Property_blk_Specials() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Specials & struct_blk_Specials) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_bf, ra000_ffff_tmp7, sequence_ef_bf;
		BitBlock byte_ef_adv, byte_range_b0_bf, sequence_ef_bf_adv, ra000_ffff_tmp8;




        struct_blk_Specials.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              byte_bf = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp3);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp7));
              sequence_ef_bf = simd_and(ra000_ffff_tmp7, byte_bf);
              byte_ef_adv = ra000_ffff_tmp7;
              byte_range_b0_bf = ra000_ffff_tmp6;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(1), sequence_ef_bf_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ef_bf_adv, byte_range_b0_bf);
              struct_blk_Specials.cc = simd_or(struct_blk_Specials.cc, ra000_ffff_tmp8);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Mongolian {
  Property_blk_Mongolian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mongolian & struct_blk_Mongolian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, byte_range_a0_a1, r1000_1fff_tmp2;
		BitBlock byte_e1_byte_range_a0_a1, byte_range_80_bf, r1000_1fff_tmp3;
		BitBlock byte_e1_byte_range_a0_a1_sfx, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, byte_a2, byte_e1_adv, sequence_e1_a2;
		BitBlock r1000_1fff_tmp7, byte_range_80_af, r1000_1fff_tmp8;
		BitBlock sequence_e1_a2_byte_range_80_af;




        struct_blk_Mongolian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a1 = simd_andc(r1000_1fff_tmp1, r800_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp2));
                  byte_e1_byte_range_a0_a1 = simd_and(r1000_1fff_tmp2, byte_range_a0_a1);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_a0_a1, carryQ.get_carry_in(2), r1000_1fff_tmp3));
                  byte_e1_byte_range_a0_a1_sfx = simd_and(r1000_1fff_tmp3, byte_range_80_bf);
                  struct_blk_Mongolian.cc = simd_or(struct_blk_Mongolian.cc, byte_e1_byte_range_a0_a1_sfx);
                  r1000_1fff_tmp4 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp6);
                  byte_e1_adv = r1000_1fff_tmp2;
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(byte_range_80_bf, r1000_1fff_tmp7);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(3), r1000_1fff_tmp8));
                  sequence_e1_a2_byte_range_80_af = simd_and(r1000_1fff_tmp8, byte_range_80_af);
                  struct_blk_Mongolian.cc = simd_or(struct_blk_Mongolian.cc, sequence_e1_a2_byte_range_80_af);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_IPA_Ext {
  Property_blk_IPA_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_IPA_Ext & struct_blk_IPA_Ext) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_c9, r100_2ff_tmp4;
		BitBlock byte_range_90_bf, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, byte_ca, r100_2ff_tmp9, byte_range_80_af;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r100_2ff_tmp12, byte_c9_adv;
		BitBlock r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;




        struct_blk_IPA_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp1, r100_2ff_tmp2);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_90_bf = simd_and(r100_2ff_tmp4, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                r100_2ff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp1, r100_2ff_tmp7);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp8);
                r100_2ff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r100_2ff_tmp4, r100_2ff_tmp9);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp10));
                r100_2ff_tmp11 = simd_and(r100_2ff_tmp10, byte_range_80_af);
                r100_2ff_tmp12 = simd_or(r100_2ff_tmp6, r100_2ff_tmp11);
                if (bitblock::any(r100_2ff_tmp12)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_blk_IPA_Ext.cc = simd_or(struct_blk_IPA_Ext.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp10;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_blk_IPA_Ext.cc = simd_or(struct_blk_IPA_Ext.cc, r250_2af_tmp2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Greek {
  Property_blk_Greek() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Greek & struct_blk_Greek) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, byte_cd_adv, r370_3ff_tmp1;
		BitBlock byte_range_80_bf, r370_3ff_tmp2, byte_range_ce_cf_sfx;




        struct_blk_Greek.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(1, 1))) {
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_range_b0_bf);
                struct_blk_Greek.cc = simd_or(struct_blk_Greek.cc, r370_3ff_tmp1);
                byte_range_80_bf = r100_3ff_tmp4;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_range_ce_cf, carryQ.get_carry_in(1), r370_3ff_tmp2));
                byte_range_ce_cf_sfx = simd_and(r370_3ff_tmp2, byte_range_80_bf);
                struct_blk_Greek.cc = simd_or(struct_blk_Greek.cc, byte_range_ce_cf_sfx);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_Additional {
  Property_blk_Latin_Ext_Additional() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_Additional & struct_blk_Latin_Ext_Additional) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock byte_range_b8_bb, r1000_1fff_tmp4, byte_e1_byte_range_b8_bb;
		BitBlock byte_range_80_bf, r1000_1fff_tmp5, byte_e1_byte_range_b8_bb_sfx;




        struct_blk_Latin_Ext_Additional.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_b8_bb = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  byte_e1_byte_range_b8_bb = simd_and(r1000_1fff_tmp4, byte_range_b8_bb);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b8_bb, carryQ.get_carry_in(2), r1000_1fff_tmp5));
                  byte_e1_byte_range_b8_bb_sfx = simd_and(r1000_1fff_tmp5, byte_range_80_bf);
                  struct_blk_Latin_Ext_Additional.cc = simd_or(struct_blk_Latin_Ext_Additional.cc, byte_e1_byte_range_b8_bb_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Malayalam {
  Property_blk_Malayalam() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Malayalam & struct_blk_Malayalam) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_b4_b5;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_b4_b5, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_b4_b5_sfx;




        struct_blk_Malayalam.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_b4_b5 = simd_and(r800_fff_tmp4, byte_range_b4_b5);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_b4_b5, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_b4_b5_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Malayalam.cc = simd_or(struct_blk_Malayalam.cc, byte_e0_byte_range_b4_b5_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sup_Punctuation {
  Property_blk_Sup_Punctuation() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_Punctuation & struct_blk_Sup_Punctuation) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_range_b8_b9, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_b8_b9, byte_range_80_bf, r2000_2fff_tmp6;
		BitBlock byte_e2_byte_range_b8_b9_sfx;




        struct_blk_Sup_Punctuation.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  byte_e2_byte_range_b8_b9 = simd_and(r2000_2fff_tmp5, byte_range_b8_b9);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_b8_b9, carryQ.get_carry_in(2), r2000_2fff_tmp6));
                  byte_e2_byte_range_b8_b9_sfx = simd_and(r2000_2fff_tmp6, byte_range_80_bf);
                  struct_blk_Sup_Punctuation.cc = simd_or(struct_blk_Sup_Punctuation.cc, byte_e2_byte_range_b8_b9_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Khmer_Symbols {
  Property_blk_Khmer_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Khmer_Symbols & struct_blk_Khmer_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a7;
		BitBlock r1000_1fff_tmp4, sequence_e1_a7, byte_e1_adv, byte_range_a0_bf;
		BitBlock sequence_e1_a7_adv, r1000_1fff_tmp5;




        struct_blk_Khmer_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp2);
                  byte_a7 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a7 = simd_and(r1000_1fff_tmp4, byte_a7);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(2), sequence_e1_a7_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a7_adv, byte_range_a0_bf);
                  struct_blk_Khmer_Symbols.cc = simd_or(struct_blk_Khmer_Symbols.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Kayah_Li {
  Property_blk_Kayah_Li() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kayah_Li & struct_blk_Kayah_Li) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a4;
		BitBlock ra000_ffff_tmp9, sequence_ea_a4, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_80_af, sequence_ea_a4_adv, ra000_ffff_tmp11;




        struct_blk_Kayah_Li.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a4 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a4 = simd_and(ra000_ffff_tmp9, byte_a4);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(1), sequence_ea_a4_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a4_adv, byte_range_80_af);
              struct_blk_Kayah_Li.cc = simd_or(struct_blk_Kayah_Li.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Mandaic {
  Property_blk_Mandaic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mandaic & struct_blk_Mandaic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a1, r800_fff_tmp4;
		BitBlock sequence_e0_a1, byte_e0_adv, byte_range_80_9f, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp5;




        struct_blk_Mandaic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a1 = simd_and(r800_fff_tmp4, byte_a1);
                  byte_e0_adv = r800_fff_tmp4;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(2), sequence_e0_a1_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a1_adv, byte_range_80_9f);
                  struct_blk_Mandaic.cc = simd_or(struct_blk_Mandaic.cc, r800_fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Dingbats {
  Property_blk_Dingbats() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Dingbats & struct_blk_Dingbats) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_range_9c_9e;
		BitBlock r2000_2fff_tmp6, byte_e2_byte_range_9c_9e, byte_range_80_bf;
		BitBlock r2000_2fff_tmp7, byte_e2_byte_range_9c_9e_sfx;




        struct_blk_Dingbats.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_9c_9e = simd_andc(r2000_2fff_tmp4, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  byte_e2_byte_range_9c_9e = simd_and(r2000_2fff_tmp6, byte_range_9c_9e);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_9c_9e, carryQ.get_carry_in(2), r2000_2fff_tmp7));
                  byte_e2_byte_range_9c_9e_sfx = simd_and(r2000_2fff_tmp7, byte_range_80_bf);
                  struct_blk_Dingbats.cc = simd_or(struct_blk_Dingbats.cc, byte_e2_byte_range_9c_9e_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Number_Forms {
  Property_blk_Number_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Number_Forms & struct_blk_Number_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_85, r2000_2fff_tmp5;
		BitBlock sequence_e2_85, byte_e2_adv, byte_range_90_bf, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_86, sequence_e2_86;
		BitBlock byte_range_80_8f, sequence_e2_86_adv, r2000_2fff_tmp8;




        struct_blk_Number_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_85 = simd_and(r2000_2fff_tmp5, byte_85);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(2), sequence_e2_85_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_85_adv, byte_range_90_bf);
                  struct_blk_Number_Forms.cc = simd_or(struct_blk_Number_Forms.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(3), sequence_e2_86_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_86_adv, byte_range_80_8f);
                  struct_blk_Number_Forms.cc = simd_or(struct_blk_Number_Forms.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Runic {
  Property_blk_Runic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Runic & struct_blk_Runic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9a, r1000_1fff_tmp6;
		BitBlock sequence_e1_9a, byte_e1_adv, byte_range_a0_bf, sequence_e1_9a_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_9b;
		BitBlock sequence_e1_9b, byte_range_80_bf, sequence_e1_9b_adv;
		BitBlock r1000_1fff_tmp10;




        struct_blk_Runic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(2), sequence_e1_9a_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_9a_adv, byte_range_a0_bf);
                  struct_blk_Runic.cc = simd_or(struct_blk_Runic.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp8);
                  byte_9b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(3), sequence_e1_9b_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_9b_adv, byte_range_80_bf);
                  struct_blk_Runic.cc = simd_or(struct_blk_Runic.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Tai_Tham {
  Property_blk_Tai_Tham() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tai_Tham & struct_blk_Tai_Tham) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a8;
		BitBlock r1000_1fff_tmp4, sequence_e1_a8, byte_e1_adv, byte_range_a0_bf;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_a9;
		BitBlock sequence_e1_a9, byte_range_80_bf, sequence_e1_a9_adv, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10, byte_aa;
		BitBlock sequence_e1_aa, r1000_1fff_tmp11, byte_range_80_af;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp12;




        struct_blk_Tai_Tham.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 4))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a8 = simd_and(r1000_1fff_tmp4, byte_a8);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(2), sequence_e1_a8_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a8_adv, byte_range_a0_bf);
                  struct_blk_Tai_Tham.cc = simd_or(struct_blk_Tai_Tham.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp1);
                  byte_a9 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp6);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(3), sequence_e1_a9_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_a9_adv, byte_range_80_bf);
                  struct_blk_Tai_Tham.cc = simd_or(struct_blk_Tai_Tham.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  byte_aa = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(byte_range_80_bf, r1000_1fff_tmp11);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(4), sequence_e1_aa_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_aa_adv, byte_range_80_af);
                  struct_blk_Tai_Tham.cc = simd_or(struct_blk_Tai_Tham.cc, r1000_1fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_blk_Lisu {
  Property_blk_Lisu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Lisu & struct_blk_Lisu) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_93, ra000_ffff_tmp10, sequence_ea_93, byte_ea_adv;
		BitBlock ra000_ffff_tmp11, byte_range_90_bf, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp12;




        struct_blk_Lisu.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp7);
              byte_93 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ea_93 = simd_and(ra000_ffff_tmp10, byte_93);
              byte_ea_adv = ra000_ffff_tmp10;
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(1), sequence_ea_93_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_93_adv, byte_range_90_bf);
              struct_blk_Lisu.cc = simd_or(struct_blk_Lisu.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Alphabetic_PF {
  Property_blk_Alphabetic_PF() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Alphabetic_PF & struct_blk_Alphabetic_PF) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ac, ra000_ffff_tmp8;
		BitBlock sequence_ef_ac, byte_ef_adv, byte_range_80_bf, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_ad, sequence_ef_ad, ra000_ffff_tmp13, byte_range_80_8f;
		BitBlock sequence_ef_ad_adv, ra000_ffff_tmp14;




        struct_blk_Alphabetic_PF.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ac = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ef_ac = simd_and(ra000_ffff_tmp8, byte_ac);
              byte_ef_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(1), sequence_ef_ac_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ef_ac_adv, byte_range_80_bf);
              struct_blk_Alphabetic_PF.cc = simd_or(struct_blk_Alphabetic_PF.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              byte_ad = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              ra000_ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(byte_range_80_bf, ra000_ffff_tmp13);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(2), sequence_ef_ad_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_ad_adv, byte_range_80_8f);
              struct_blk_Alphabetic_PF.cc = simd_or(struct_blk_Alphabetic_PF.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_VS_Sup {
  Property_blk_VS_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_VS_Sup & struct_blk_VS_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f3;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_a0, r10000_10ffff_tmp9;
		BitBlock sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_84_86;
		BitBlock r10000_10ffff_tmp14, sequence_f3_a0_byte_range_84_86;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_87, sequence_f3_a0_adv;
		BitBlock sequence_f3_a0_87, byte_range_80_af, r10000_10ffff_tmp19;
		BitBlock sequence_f3_a0_87_byte_range_80_af;




        struct_blk_VS_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            byte_a0 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp9, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp2);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp14, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_VS_Sup.cc = simd_or(struct_blk_VS_Sup.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_87 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            sequence_f3_a0_adv = r10000_10ffff_tmp14;
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp1);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(3), r10000_10ffff_tmp19));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp19, byte_range_80_af);
            struct_blk_VS_Sup.cc = simd_or(struct_blk_VS_Sup.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_OCR {
  Property_blk_OCR() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_OCR & struct_blk_OCR) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_91, r2000_2fff_tmp5;
		BitBlock sequence_e2_91, byte_e2_adv, byte_range_80_9f, sequence_e2_91_adv;
		BitBlock r2000_2fff_tmp6;




        struct_blk_OCR.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_91 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_91 = simd_and(r2000_2fff_tmp5, byte_91);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(2), sequence_e2_91_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_91_adv, byte_range_80_9f);
                  struct_blk_OCR.cc = simd_or(struct_blk_OCR.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Indic_Number_Forms {
  Property_blk_Indic_Number_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Indic_Number_Forms & struct_blk_Indic_Number_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a0;
		BitBlock ra000_ffff_tmp9, sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_b0_bf, sequence_ea_a0_adv, ra000_ffff_tmp11;




        struct_blk_Indic_Number_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_or(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a0 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp9, byte_a0);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(1), sequence_ea_a0_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a0_adv, byte_range_b0_bf);
              struct_blk_Indic_Number_Forms.cc = simd_or(struct_blk_Indic_Number_Forms.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Ancient_Greek_Music {
  Property_blk_Ancient_Greek_Music() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ancient_Greek_Music & struct_blk_Ancient_Greek_Music) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9d;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_88, r10000_10ffff_tmp15, sequence_f0_9d_88, sequence_f0_9d_adv;
		BitBlock byte_range_80_bf, sequence_f0_9d_88_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_89, sequence_f0_9d_89, byte_range_80_8f, sequence_f0_9d_89_adv;
		BitBlock r10000_10ffff_tmp20;




        struct_blk_Ancient_Greek_Music.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_9d_88 = simd_and(r10000_10ffff_tmp15, byte_88);
            sequence_f0_9d_adv = r10000_10ffff_tmp15;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(2), sequence_f0_9d_88_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9d_88_adv, byte_range_80_bf);
            struct_blk_Ancient_Greek_Music.cc = simd_or(struct_blk_Ancient_Greek_Music.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp18 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp8);
            byte_89 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp19);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            byte_range_80_8f = r10000_10ffff_tmp18;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(3), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_9d_89_adv, byte_range_80_8f);
            struct_blk_Ancient_Greek_Music.cc = simd_or(struct_blk_Ancient_Greek_Music.cc, r10000_10ffff_tmp20);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Pau_Cin_Hau {
  Property_blk_Pau_Cin_Hau() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Pau_Cin_Hau & struct_blk_Pau_Cin_Hau) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_ab, r10000_10ffff_tmp15, sequence_f0_91_ab, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_ab_adv, r10000_10ffff_tmp16;




        struct_blk_Pau_Cin_Hau.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_ab = simd_and(r10000_10ffff_tmp15, byte_ab);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(2), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_ab_adv, byte_range_80_bf);
            struct_blk_Pau_Cin_Hau.cc = simd_or(struct_blk_Pau_Cin_Hau.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Modi {
  Property_blk_Modi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Modi & struct_blk_Modi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock byte_98, r10000_10ffff_tmp12, sequence_f0_91_98, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_98_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, byte_99, sequence_f0_91_99;
		BitBlock byte_range_80_9f, sequence_f0_91_99_adv, r10000_10ffff_tmp16;




        struct_blk_Modi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_98 = simd_and(r10000_10ffff_tmp12, byte_98);
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(2), sequence_f0_91_98_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_98_adv, byte_range_80_bf);
            struct_blk_Modi.cc = simd_or(struct_blk_Modi.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp7);
            byte_99 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(3), sequence_f0_91_99_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_99_adv, byte_range_80_9f);
            struct_blk_Modi.cc = simd_or(struct_blk_Modi.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_CJK {
  Property_blk_CJK() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK & struct_blk_CJK) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e4, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, byte_range_b8_bf, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_e5_e9, r800_ffff_tmp13;
		BitBlock byte_e4_byte_range_b8_bf, byte_range_80_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, byte_range_e5_e9_sfx;
		BitBlock r4e00_9fff_tmp3, byte_range_e5_e9_sfx_sfx;




        struct_blk_CJK.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp3 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp2);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
            r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp6 = simd_and(r800_ffff_tmp4, r800_ffff_tmp5);
            byte_range_b8_bf = simd_and(r800_ffff_tmp6, basis_bits.bit_4);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp7));
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, byte_range_b8_bf);
            r800_ffff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp10 = simd_not(r800_ffff_tmp9);
            r800_ffff_tmp11 = simd_and(basis_bits.bit_5, r800_ffff_tmp2);
            r800_ffff_tmp12 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp10), simd_andc(r800_ffff_tmp11, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp12);
            r800_ffff_tmp13 = simd_or(r800_ffff_tmp8, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp13) || carryQ.CarryTest(1, 3))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp8;
              byte_range_80_bf = r800_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(1), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_blk_CJK.cc = simd_or(struct_blk_CJK.cc, byte_e4_byte_range_b8_bf_sfx);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_range_e5_e9, carryQ.get_carry_in(2), r4e00_9fff_tmp2));
              byte_range_e5_e9_sfx = simd_and(r4e00_9fff_tmp2, byte_range_80_bf);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_e5_e9_sfx, carryQ.get_carry_in(3), r4e00_9fff_tmp3));
              byte_range_e5_e9_sfx_sfx = simd_and(r4e00_9fff_tmp3, byte_range_80_bf);
              struct_blk_CJK.cc = simd_or(struct_blk_CJK.cc, byte_range_e5_e9_sfx_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Hangul {
  Property_blk_Hangul() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Hangul & struct_blk_Hangul) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock byte_range_b0_bf, ra000_ffff_tmp6, byte_ea_byte_range_b0_bf;
		BitBlock byte_range_80_bf, ra000_ffff_tmp7, byte_ea_byte_range_b0_bf_sfx;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock byte_range_eb_ec, ra000_ffff_tmp12, byte_range_eb_ec_sfx;
		BitBlock ra000_ffff_tmp13, byte_range_eb_ec_sfx_sfx, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, byte_ed, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20, byte_80;
		BitBlock byte_ed_adv, sequence_ed_80, byte_range_80_af, ra000_ffff_tmp21;
		BitBlock sequence_ed_80_byte_range_80_af;




        struct_blk_Hangul.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 6))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp6));
              byte_ea_byte_range_b0_bf = simd_and(ra000_ffff_tmp6, byte_range_b0_bf);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_b0_bf, carryQ.get_carry_in(1), ra000_ffff_tmp7));
              byte_ea_byte_range_b0_bf_sfx = simd_and(ra000_ffff_tmp7, byte_range_80_bf);
              struct_blk_Hangul.cc = simd_or(struct_blk_Hangul.cc, byte_ea_byte_range_b0_bf_sfx);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_not(ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp9), simd_andc(ra000_ffff_tmp10, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp1, ra000_ffff_tmp11);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(2), ra000_ffff_tmp12));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp12, byte_range_80_bf);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(3), ra000_ffff_tmp13));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp13, byte_range_80_bf);
              struct_blk_Hangul.cc = simd_or(struct_blk_Hangul.cc, byte_range_eb_ec_sfx_sfx);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp15);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp18 = simd_andc(byte_range_80_bf, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp20 = simd_or(ra000_ffff_tmp19, ra000_ffff_tmp8);
              byte_80 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp20);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(4), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              byte_range_80_af = simd_andc(byte_range_80_bf, ra000_ffff_tmp5);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(5), ra000_ffff_tmp21));
              sequence_ed_80_byte_range_80_af = simd_and(ra000_ffff_tmp21, byte_range_80_af);
              struct_blk_Hangul.cc = simd_or(struct_blk_Hangul.cc, sequence_ed_80_byte_range_80_af);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_blk_Modifier_Tone_Letters {
  Property_blk_Modifier_Tone_Letters() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Modifier_Tone_Letters & struct_blk_Modifier_Tone_Letters) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_9c, ra000_ffff_tmp10, sequence_ea_9c, byte_ea_adv;
		BitBlock byte_range_80_9f, sequence_ea_9c_adv, ra000_ffff_tmp11;




        struct_blk_Modifier_Tone_Letters.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_9c = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ea_9c = simd_and(ra000_ffff_tmp10, byte_9c);
              byte_ea_adv = ra000_ffff_tmp10;
              byte_range_80_9f = simd_andc(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(1), sequence_ea_9c_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_9c_adv, byte_range_80_9f);
              struct_blk_Modifier_Tone_Letters.cc = simd_or(struct_blk_Modifier_Tone_Letters.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Egyptian_Hieroglyphs {
  Property_blk_Egyptian_Hieroglyphs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Egyptian_Hieroglyphs & struct_blk_Egyptian_Hieroglyphs) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_93, r10000_10ffff_tmp9;
		BitBlock sequence_f0_93, byte_f0_adv, r10000_10ffff_tmp10, byte_range_80_8f;
		BitBlock r10000_10ffff_tmp11, sequence_f0_93_byte_range_80_8f;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp12;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, r10000_10ffff_tmp13, byte_90;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, byte_range_80_af;
		BitBlock r10000_10ffff_tmp14, sequence_f0_93_90_byte_range_80_af;




        struct_blk_Egyptian_Hieroglyphs.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_93 = simd_and(r10000_10ffff_tmp9, byte_93);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(1), r10000_10ffff_tmp11));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp11, byte_range_80_8f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(2), r10000_10ffff_tmp12));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp12, byte_range_80_bf);
            struct_blk_Egyptian_Hieroglyphs.cc = simd_or(struct_blk_Egyptian_Hieroglyphs.cc, sequence_f0_93_byte_range_80_8f_sfx);
            r10000_10ffff_tmp13 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp3);
            sequence_f0_93_adv = r10000_10ffff_tmp11;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp1);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(3), r10000_10ffff_tmp14));
            sequence_f0_93_90_byte_range_80_af = simd_and(r10000_10ffff_tmp14, byte_range_80_af);
            struct_blk_Egyptian_Hieroglyphs.cc = simd_or(struct_blk_Egyptian_Hieroglyphs.cc, sequence_f0_93_90_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Super_And_Sub {
  Property_blk_Super_And_Sub() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Super_And_Sub & struct_blk_Super_And_Sub) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5;
		BitBlock sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6, byte_range_b0_bf;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp7, byte_82, sequence_e2_82;
		BitBlock byte_range_80_9f, sequence_e2_82_adv, r2000_2fff_tmp8;




        struct_blk_Super_And_Sub.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(2), sequence_e2_81_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_81_adv, byte_range_b0_bf);
                  struct_blk_Super_And_Sub.cc = simd_or(struct_blk_Super_And_Sub.cc, r2000_2fff_tmp7);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(3), sequence_e2_82_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_82_adv, byte_range_80_9f);
                  struct_blk_Super_And_Sub.cc = simd_or(struct_blk_Super_And_Sub.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Syriac {
  Property_blk_Syriac() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Syriac & struct_blk_Syriac) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock r700_77f_tmp2, byte_dc, r700_77f_tmp3, r700_77f_tmp4, byte_dd;
		BitBlock r700_77f_tmp5, r700_77f_tmp6, byte_range_80_8f, r700_77f_tmp7;
		BitBlock r700_77f_tmp8, r700_77f_tmp9, byte_range_80_bf, byte_dc_adv;
		BitBlock r700_74f_tmp1, byte_dd_adv, r700_74f_tmp2;




        struct_blk_Syriac.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(0, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp3, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp2, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp3, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp2, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r700_77f_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r700_77f_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(0), r700_77f_tmp7));
              r700_77f_tmp8 = simd_and(r700_77f_tmp7, byte_range_80_8f);
              r700_77f_tmp9 = simd_or(byte_dc, r700_77f_tmp8);
              if ((bitblock::any(r700_77f_tmp9) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r700_77f_tmp5;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(1), byte_dc_adv));
                r700_74f_tmp1 = simd_and(byte_dc_adv, byte_range_80_bf);
                struct_blk_Syriac.cc = simd_or(struct_blk_Syriac.cc, r700_74f_tmp1);
                byte_dd_adv = r700_77f_tmp7;
                r700_74f_tmp2 = simd_and(byte_dd_adv, byte_range_80_8f);
                struct_blk_Syriac.cc = simd_or(struct_blk_Syriac.cc, r700_74f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Bamum_Sup {
  Property_blk_Bamum_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bamum_Sup & struct_blk_Bamum_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_96;
		BitBlock r10000_10ffff_tmp10, sequence_f0_96, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_range_a0_a8, r10000_10ffff_tmp15;
		BitBlock sequence_f0_96_byte_range_a0_a8, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp16, sequence_f0_96_byte_range_a0_a8_sfx;




        struct_blk_Bamum_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_96 = simd_and(r10000_10ffff_tmp10, byte_96);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp13);
            byte_range_a0_a8 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_96_byte_range_a0_a8 = simd_and(r10000_10ffff_tmp15, byte_range_a0_a8);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a8, carryQ.get_carry_in(2), r10000_10ffff_tmp16));
            sequence_f0_96_byte_range_a0_a8_sfx = simd_and(r10000_10ffff_tmp16, byte_range_80_bf);
            struct_blk_Bamum_Sup.cc = simd_or(struct_blk_Bamum_Sup.cc, sequence_f0_96_byte_range_a0_a8_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_South_Arabian {
  Property_blk_Old_South_Arabian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_South_Arabian & struct_blk_Old_South_Arabian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a9, r10000_10ffff_tmp13, sequence_f0_90_a9;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_a9_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Old_South_Arabian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a9 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a9 = simd_and(r10000_10ffff_tmp13, byte_a9);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(2), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bf);
            struct_blk_Old_South_Arabian.cc = simd_or(struct_blk_Old_South_Arabian.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Gujarati {
  Property_blk_Gujarati() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Gujarati & struct_blk_Gujarati) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_aa_ab;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_aa_ab, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_aa_ab_sfx;




        struct_blk_Gujarati.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_and(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_aa_ab = simd_and(r800_fff_tmp4, byte_range_aa_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_aa_ab, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_aa_ab_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Gujarati.cc = simd_or(struct_blk_Gujarati.cc, byte_e0_byte_range_aa_ab_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Arrows {
  Property_blk_Arrows() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arrows & struct_blk_Arrows) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_86, r2000_2fff_tmp4, sequence_e2_86;
		BitBlock byte_e2_adv, byte_range_90_bf, sequence_e2_86_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, byte_87, sequence_e2_87;
		BitBlock byte_range_80_bf, sequence_e2_87_adv, r2000_2fff_tmp8;




        struct_blk_Arrows.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_86 = simd_and(r2000_2fff_tmp4, byte_86);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(2), sequence_e2_86_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_86_adv, byte_range_90_bf);
                  struct_blk_Arrows.cc = simd_or(struct_blk_Arrows.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp6);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(3), sequence_e2_87_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_87_adv, byte_range_80_bf);
                  struct_blk_Arrows.cc = simd_or(struct_blk_Arrows.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Block_Elements {
  Property_blk_Block_Elements() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Block_Elements & struct_blk_Block_Elements) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_96, r2000_2fff_tmp4, sequence_e2_96;
		BitBlock byte_e2_adv, byte_range_80_9f, sequence_e2_96_adv, r2000_2fff_tmp5;




        struct_blk_Block_Elements.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_96 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_96 = simd_and(r2000_2fff_tmp4, byte_96);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(2), sequence_e2_96_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_96_adv, byte_range_80_9f);
                  struct_blk_Block_Elements.cc = simd_or(struct_blk_Block_Elements.cc, r2000_2fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Diacriticals_Sup {
  Property_blk_Diacriticals_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Diacriticals_Sup & struct_blk_Diacriticals_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_b7, r1000_1fff_tmp5, sequence_e1_b7;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_b7_adv, r1000_1fff_tmp6;




        struct_blk_Diacriticals_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp3);
                  byte_b7 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_b7 = simd_and(r1000_1fff_tmp5, byte_b7);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(2), sequence_e1_b7_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_b7_adv, byte_range_80_bf);
                  struct_blk_Diacriticals_Sup.cc = simd_or(struct_blk_Diacriticals_Sup.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Grantha {
  Property_blk_Grantha() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Grantha & struct_blk_Grantha) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_8c_8d;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_byte_range_8c_8d;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_91_byte_range_8c_8d_sfx;




        struct_blk_Grantha.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, basis_bits.bit_6);
            byte_range_8c_8d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_byte_range_8c_8d = simd_and(r10000_10ffff_tmp14, byte_range_8c_8d);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_8c_8d, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_91_byte_range_8c_8d_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Grantha.cc = simd_or(struct_blk_Grantha.cc, sequence_f0_91_byte_range_8c_8d_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ethiopic_Ext {
  Property_blk_Ethiopic_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ethiopic_Ext & struct_blk_Ethiopic_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_b6, r2000_2fff_tmp4, sequence_e2_b6;
		BitBlock byte_e2_adv, byte_range_80_bf, sequence_e2_b6_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_b7;
		BitBlock sequence_e2_b7, byte_range_80_9f, sequence_e2_b7_adv, r2000_2fff_tmp9;




        struct_blk_Ethiopic_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_b6 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_b6 = simd_and(r2000_2fff_tmp4, byte_b6);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(2), sequence_e2_b6_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_b6_adv, byte_range_80_bf);
                  struct_blk_Ethiopic_Ext.cc = simd_or(struct_blk_Ethiopic_Ext.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp7);
                  byte_b7 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp8);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(3), sequence_e2_b7_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_b7_adv, byte_range_80_9f);
                  struct_blk_Ethiopic_Ext.cc = simd_or(struct_blk_Ethiopic_Ext.cc, r2000_2fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Compat_Jamo {
  Property_blk_Compat_Jamo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Compat_Jamo & struct_blk_Compat_Jamo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, byte_84, r3000_4dff_tmp3, sequence_e3_84;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, byte_range_b0_bf, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, byte_85;
		BitBlock sequence_e3_85, byte_range_80_bf, sequence_e3_85_adv, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11, byte_86;
		BitBlock sequence_e3_86, byte_range_80_8f, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp12;




        struct_blk_Compat_Jamo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 4))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp3));
                  sequence_e3_84 = simd_and(r3000_4dff_tmp3, byte_84);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(2), sequence_e3_84_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_84_adv, byte_range_b0_bf);
                  struct_blk_Compat_Jamo.cc = simd_or(struct_blk_Compat_Jamo.cc, r3000_4dff_tmp5);
                  r3000_4dff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp6);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp7);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(3), sequence_e3_85_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_blk_Compat_Jamo.cc = simd_or(struct_blk_Compat_Jamo.cc, r3000_4dff_tmp8);
                  r3000_4dff_tmp9 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp10);
                  byte_86 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp11);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  byte_range_80_8f = r3000_4dff_tmp9;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(4), sequence_e3_86_adv));
                  r3000_4dff_tmp12 = simd_and(sequence_e3_86_adv, byte_range_80_8f);
                  struct_blk_Compat_Jamo.cc = simd_or(struct_blk_Compat_Jamo.cc, r3000_4dff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_blk_Lepcha {
  Property_blk_Lepcha() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Lepcha & struct_blk_Lepcha) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_b0;
		BitBlock r1000_1fff_tmp4, sequence_e1_b0, byte_e1_adv, byte_range_80_bf;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_b1;
		BitBlock sequence_e1_b1, r1000_1fff_tmp7, byte_range_80_8f, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp8;




        struct_blk_Lepcha.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_b0 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_b0 = simd_and(r1000_1fff_tmp4, byte_b0);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(2), sequence_e1_b0_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_b0_adv, byte_range_80_bf);
                  struct_blk_Lepcha.cc = simd_or(struct_blk_Lepcha.cc, r1000_1fff_tmp5);
                  r1000_1fff_tmp6 = simd_and(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_b1 = simd_and(r1000_1fff_tmp6, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_8f = simd_andc(byte_range_80_bf, r1000_1fff_tmp7);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(3), sequence_e1_b1_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_b1_adv, byte_range_80_8f);
                  struct_blk_Lepcha.cc = simd_or(struct_blk_Lepcha.cc, r1000_1fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Vertical_Forms {
  Property_blk_Vertical_Forms() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Vertical_Forms & struct_blk_Vertical_Forms) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b8, ra000_ffff_tmp10, sequence_ef_b8, byte_ef_adv;
		BitBlock ra000_ffff_tmp11, byte_range_90_9f, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp12;




        struct_blk_Vertical_Forms.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp10, byte_b8);
              byte_ef_adv = ra000_ffff_tmp10;
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              byte_range_90_9f = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(1), sequence_ef_b8_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_b8_adv, byte_range_90_9f);
              struct_blk_Vertical_Forms.cc = simd_or(struct_blk_Vertical_Forms.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Vedic_Ext {
  Property_blk_Vedic_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Vedic_Ext & struct_blk_Vedic_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_b3, r1000_1fff_tmp5, sequence_e1_b3;
		BitBlock byte_e1_adv, r1000_1fff_tmp6, byte_range_90_bf, sequence_e1_b3_adv;
		BitBlock r1000_1fff_tmp7;




        struct_blk_Vedic_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_b3 = simd_and(r1000_1fff_tmp5, byte_b3);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(2), sequence_e1_b3_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_b3_adv, byte_range_90_bf);
                  struct_blk_Vedic_Ext.cc = simd_or(struct_blk_Vedic_Ext.cc, r1000_1fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Diacriticals {
  Property_blk_Diacriticals() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Diacriticals & struct_blk_Diacriticals) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, byte_range_80_bf, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2;




        struct_blk_Diacriticals.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r100_3ff_tmp6;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(1), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_blk_Diacriticals.cc = simd_or(struct_blk_Diacriticals.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_blk_Diacriticals.cc = simd_or(struct_blk_Diacriticals.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Samaritan {
  Property_blk_Samaritan() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Samaritan & struct_blk_Samaritan) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock byte_range_80_bf, sequence_e0_a0_adv, r800_fff_tmp3;




        struct_blk_Samaritan.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(2), sequence_e0_a0_adv));
                  r800_fff_tmp3 = simd_and(sequence_e0_a0_adv, byte_range_80_bf);
                  struct_blk_Samaritan.cc = simd_or(struct_blk_Samaritan.cc, r800_fff_tmp3);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tamil {
  Property_blk_Tamil() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tamil & struct_blk_Tamil) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_ae_af;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_ae_af, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_ae_af_sfx;




        struct_blk_Tamil.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_and(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_ae_af = simd_and(r800_fff_tmp4, byte_range_ae_af);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_ae_af, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_ae_af_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Tamil.cc = simd_or(struct_blk_Tamil.cc, byte_e0_byte_range_ae_af_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_Turkic {
  Property_blk_Old_Turkic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_Turkic & struct_blk_Old_Turkic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock byte_b0, r10000_10ffff_tmp9, sequence_f0_90_b0, sequence_f0_90_adv;
		BitBlock byte_range_80_bf, sequence_f0_90_b0_adv, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, byte_b1, sequence_f0_90_b1, r10000_10ffff_tmp15;
		BitBlock byte_range_80_8f, sequence_f0_90_b1_adv, r10000_10ffff_tmp16;




        struct_blk_Old_Turkic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_b0 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp9));
            sequence_f0_90_b0 = simd_and(r10000_10ffff_tmp9, byte_b0);
            sequence_f0_90_adv = r10000_10ffff_tmp9;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(2), sequence_f0_90_b0_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
            struct_blk_Old_Turkic.cc = simd_or(struct_blk_Old_Turkic.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp12 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp1);
            byte_b1 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp15);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(3), sequence_f0_90_b1_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_b1_adv, byte_range_80_8f);
            struct_blk_Old_Turkic.cc = simd_or(struct_blk_Old_Turkic.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Sharada {
  Property_blk_Sharada() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sharada & struct_blk_Sharada) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_86, r10000_10ffff_tmp15, sequence_f0_91_86, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_86_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_87, sequence_f0_91_87, byte_range_80_9f;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp21;




        struct_blk_Sharada.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_86 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_86 = simd_and(r10000_10ffff_tmp15, byte_86);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(2), sequence_f0_91_86_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_86_adv, byte_range_80_bf);
            struct_blk_Sharada.cc = simd_or(struct_blk_Sharada.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp18 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp19);
            byte_87 = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp20);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(3), sequence_f0_91_87_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_87_adv, byte_range_80_9f);
            struct_blk_Sharada.cc = simd_or(struct_blk_Sharada.cc, r10000_10ffff_tmp21);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Khojki {
  Property_blk_Khojki() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Khojki & struct_blk_Khojki) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_88;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_88, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_88_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_89, sequence_f0_91_89, byte_range_80_8f, sequence_f0_91_89_adv;
		BitBlock r10000_10ffff_tmp19;




        struct_blk_Khojki.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_88 = simd_and(r10000_10ffff_tmp14, byte_88);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(2), sequence_f0_91_88_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_88_adv, byte_range_80_bf);
            struct_blk_Khojki.cc = simd_or(struct_blk_Khojki.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_89 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            sequence_f0_91_89 = simd_and(sequence_f0_91_adv, byte_89);
            byte_range_80_8f = r10000_10ffff_tmp17;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_89, carryQ.get_carry_in(3), sequence_f0_91_89_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_89_adv, byte_range_80_8f);
            struct_blk_Khojki.cc = simd_or(struct_blk_Khojki.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Arabic_Sup {
  Property_blk_Arabic_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Arabic_Sup & struct_blk_Arabic_Sup) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock r700_77f_tmp2, byte_dd, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock byte_range_90_bf, r700_77f_tmp5, r700_77f_tmp6, byte_dd_adv;
		BitBlock r750_77f_tmp1;




        struct_blk_Arabic_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(0, 1))) {
              r700_77f_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp3, r700_77f_tmp1);
              byte_dd = simd_and(r80_7ff_tmp2, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r700_77f_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r700_77f_tmp3, r700_77f_tmp4);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(0), r700_77f_tmp5));
              r700_77f_tmp6 = simd_and(r700_77f_tmp5, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp5;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_blk_Arabic_Sup.cc = simd_or(struct_blk_Arabic_Sup.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_Armenian {
  Property_blk_Armenian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Armenian & struct_blk_Armenian) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock byte_range_80_8f, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3;
		BitBlock byte_range_b0_bf, r500_58f_tmp4, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r500_58f_tmp7, byte_d5, r500_58f_tmp8, r500_58f_tmp9, byte_d4_adv;
		BitBlock r530_58f_tmp1, byte_range_80_bf, byte_d5_adv, r530_58f_tmp2;
		BitBlock byte_d6_adv, r530_58f_tmp3;




        struct_blk_Armenian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 3))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r400_5ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp7));
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp7, byte_range_80_8f);
              r400_5ff_tmp9 = simd_or(byte_range_d4_d5, r400_5ff_tmp8);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(1, 2))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp2, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp8);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(2, 1))) {
                  byte_d4_adv = r500_58f_tmp4;
                  r530_58f_tmp1 = simd_and(byte_d4_adv, byte_range_b0_bf);
                  struct_blk_Armenian.cc = simd_or(struct_blk_Armenian.cc, r530_58f_tmp1);
                  byte_range_80_bf = r400_5ff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(2), byte_d5_adv));
                  r530_58f_tmp2 = simd_and(byte_d5_adv, byte_range_80_bf);
                  struct_blk_Armenian.cc = simd_or(struct_blk_Armenian.cc, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp7;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_range_80_8f);
                  struct_blk_Armenian.cc = simd_or(struct_blk_Armenian.cc, r530_58f_tmp3);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Misc_Symbols {
  Property_blk_Misc_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Symbols & struct_blk_Misc_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_range_98_9b, r2000_2fff_tmp4;
		BitBlock byte_e2_byte_range_98_9b, byte_range_80_bf, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_98_9b_sfx;




        struct_blk_Misc_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_98_9b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  byte_e2_byte_range_98_9b = simd_and(r2000_2fff_tmp4, byte_range_98_9b);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_98_9b, carryQ.get_carry_in(2), r2000_2fff_tmp5));
                  byte_e2_byte_range_98_9b_sfx = simd_and(r2000_2fff_tmp5, byte_range_80_bf);
                  struct_blk_Misc_Symbols.cc = simd_or(struct_blk_Misc_Symbols.cc, byte_e2_byte_range_98_9b_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tirhuta {
  Property_blk_Tirhuta() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tirhuta & struct_blk_Tirhuta) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock byte_92, r10000_10ffff_tmp12, sequence_f0_91_92, sequence_f0_91_adv;
		BitBlock byte_range_80_bf, sequence_f0_91_92_adv, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_93, sequence_f0_91_93, byte_range_80_9f, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Tirhuta.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_91_92 = simd_and(r10000_10ffff_tmp12, byte_92);
            sequence_f0_91_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(2), sequence_f0_91_92_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_91_92_adv, byte_range_80_bf);
            struct_blk_Tirhuta.cc = simd_or(struct_blk_Tirhuta.cc, r10000_10ffff_tmp13);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp16);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(3), sequence_f0_91_93_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_91_93_adv, byte_range_80_9f);
            struct_blk_Tirhuta.cc = simd_or(struct_blk_Tirhuta.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Tibetan {
  Property_blk_Tibetan() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tibetan & struct_blk_Tibetan) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_bc_bf;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_bc_bf, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_bc_bf_sfx;




        struct_blk_Tibetan.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_bc_bf = simd_and(r800_fff_tmp2, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_bc_bf = simd_and(r800_fff_tmp4, byte_range_bc_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_bc_bf, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_bc_bf_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Tibetan.cc = simd_or(struct_blk_Tibetan.cc, byte_e0_byte_range_bc_bf_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Thai {
  Property_blk_Thai() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Thai & struct_blk_Thai) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock byte_range_b8_b9, r800_fff_tmp5, byte_e0_byte_range_b8_b9;
		BitBlock byte_range_80_bf, r800_fff_tmp6, byte_e0_byte_range_b8_b9_sfx;




        struct_blk_Thai.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(r800_fff_tmp3, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r800_fff_tmp2, r800_fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp5));
                  byte_e0_byte_range_b8_b9 = simd_and(r800_fff_tmp5, byte_range_b8_b9);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_b8_b9, carryQ.get_carry_in(2), r800_fff_tmp6));
                  byte_e0_byte_range_b8_b9_sfx = simd_and(r800_fff_tmp6, byte_range_80_bf);
                  struct_blk_Thai.cc = simd_or(struct_blk_Thai.cc, byte_e0_byte_range_b8_b9_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Jamo_Ext_B {
  Property_blk_Jamo_Ext_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Jamo_Ext_B & struct_blk_Jamo_Ext_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ed, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_9e;
		BitBlock ra000_ffff_tmp9, sequence_ed_9e, byte_ed_adv, ra000_ffff_tmp10;
		BitBlock byte_range_b0_bf, sequence_ed_9e_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_9f, sequence_ed_9f;
		BitBlock byte_range_80_bf, sequence_ed_9f_adv, ra000_ffff_tmp14;




        struct_blk_Jamo_Ext_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp7);
              byte_9e = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ed_9e = simd_and(ra000_ffff_tmp9, byte_9e);
              byte_ed_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(1), sequence_ed_9e_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ed_9e_adv, byte_range_b0_bf);
              struct_blk_Jamo_Ext_B.cc = simd_or(struct_blk_Jamo_Ext_B.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp12);
              byte_9f = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp13);
              sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(2), sequence_ed_9f_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ed_9f_adv, byte_range_80_bf);
              struct_blk_Jamo_Ext_B.cc = simd_or(struct_blk_Jamo_Ext_B.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Punctuation {
  Property_blk_Punctuation() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Punctuation & struct_blk_Punctuation) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4, sequence_e2_80;
		BitBlock byte_e2_adv, byte_range_80_bf, sequence_e2_80_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_81;
		BitBlock sequence_e2_81, r2000_2fff_tmp9, byte_range_80_af, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp10;




        struct_blk_Punctuation.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_80_adv, byte_range_80_bf);
                  struct_blk_Punctuation.cc = simd_or(struct_blk_Punctuation.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_andc(r2000_2fff_tmp7, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp8);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(byte_range_80_bf, r2000_2fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(3), sequence_e2_81_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_81_adv, byte_range_80_af);
                  struct_blk_Punctuation.cc = simd_or(struct_blk_Punctuation.cc, r2000_2fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Cherokee {
  Property_blk_Cherokee() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cherokee & struct_blk_Cherokee) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_8e, r1000_1fff_tmp6;
		BitBlock sequence_e1_8e, byte_e1_adv, byte_range_a0_bf, sequence_e1_8e_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, byte_8f;
		BitBlock sequence_e1_8f, byte_range_80_bf, sequence_e1_8f_adv;
		BitBlock r1000_1fff_tmp10;




        struct_blk_Cherokee.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_8e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp6));
                  sequence_e1_8e = simd_and(r1000_1fff_tmp6, byte_8e);
                  byte_e1_adv = r1000_1fff_tmp6;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(2), sequence_e1_8e_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_8e_adv, byte_range_a0_bf);
                  struct_blk_Cherokee.cc = simd_or(struct_blk_Cherokee.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp8);
                  byte_8f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(3), sequence_e1_8f_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_8f_adv, byte_range_80_bf);
                  struct_blk_Cherokee.cc = simd_or(struct_blk_Cherokee.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_High_Surrogates {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_High_Surrogates & struct_blk_High_Surrogates) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef;




        struct_blk_High_Surrogates.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if (bitblock::any(byte_range_c0_ff)) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if (bitblock::any(byte_range_e0_ef)) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
          }
        }
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };

  struct Property_blk_Braille {
  Property_blk_Braille() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Braille & struct_blk_Braille) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, byte_range_a0_a3;
		BitBlock r2000_2fff_tmp2, byte_e2_byte_range_a0_a3, byte_range_80_bf;
		BitBlock r2000_2fff_tmp3, byte_e2_byte_range_a0_a3_sfx;




        struct_blk_Braille.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_range_a0_a3 = simd_andc(r2000_2fff_tmp1, r800_ffff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp2));
                  byte_e2_byte_range_a0_a3 = simd_and(r2000_2fff_tmp2, byte_range_a0_a3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a0_a3, carryQ.get_carry_in(2), r2000_2fff_tmp3));
                  byte_e2_byte_range_a0_a3_sfx = simd_and(r2000_2fff_tmp3, byte_range_80_bf);
                  struct_blk_Braille.cc = simd_or(struct_blk_Braille.cc, byte_e2_byte_range_a0_a3_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_CJK_Radicals_Sup {
  Property_blk_CJK_Radicals_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Radicals_Sup & struct_blk_CJK_Radicals_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_range_ba_bb, r2000_2fff_tmp5;
		BitBlock byte_e2_byte_range_ba_bb, byte_range_80_bf, r2000_2fff_tmp6;
		BitBlock byte_e2_byte_range_ba_bb_sfx;




        struct_blk_CJK_Radicals_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp3, basis_bits.bit_6);
                  byte_range_ba_bb = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  byte_e2_byte_range_ba_bb = simd_and(r2000_2fff_tmp5, byte_range_ba_bb);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_ba_bb, carryQ.get_carry_in(2), r2000_2fff_tmp6));
                  byte_e2_byte_range_ba_bb_sfx = simd_and(r2000_2fff_tmp6, byte_range_80_bf);
                  struct_blk_CJK_Radicals_Sup.cc = simd_or(struct_blk_CJK_Radicals_Sup.cc, byte_e2_byte_range_ba_bb_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Linear_A {
  Property_blk_Linear_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Linear_A & struct_blk_Linear_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_range_98_9d, r10000_10ffff_tmp10;
		BitBlock sequence_f0_90_byte_range_98_9d, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_byte_range_98_9d_sfx;




        struct_blk_Linear_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp6, basis_bits.bit_4);
            r10000_10ffff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_98_9d = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_byte_range_98_9d = simd_and(r10000_10ffff_tmp10, byte_range_98_9d);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_98_9d, carryQ.get_carry_in(2), r10000_10ffff_tmp11));
            sequence_f0_90_byte_range_98_9d_sfx = simd_and(r10000_10ffff_tmp11, byte_range_80_bf);
            struct_blk_Linear_A.cc = simd_or(struct_blk_Linear_A.cc, sequence_f0_90_byte_range_98_9d_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_Permic {
  Property_blk_Old_Permic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_Permic & struct_blk_Old_Permic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8d, r10000_10ffff_tmp13, sequence_f0_90_8d;
		BitBlock sequence_f0_90_adv, byte_range_90_bf, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Old_Permic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8d = simd_and(r10000_10ffff_tmp13, byte_8d);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(2), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8d_adv, byte_range_90_bf);
            struct_blk_Old_Permic.cc = simd_or(struct_blk_Old_Permic.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Enclosed_CJK {
  Property_blk_Enclosed_CJK() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Enclosed_CJK & struct_blk_Enclosed_CJK) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_range_88_8b, r3000_4dff_tmp4;
		BitBlock byte_e3_byte_range_88_8b, byte_range_80_bf, r3000_4dff_tmp5;
		BitBlock byte_e3_byte_range_88_8b_sfx;




        struct_blk_Enclosed_CJK.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_88_8b = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  byte_e3_byte_range_88_8b = simd_and(r3000_4dff_tmp4, byte_range_88_8b);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_88_8b, carryQ.get_carry_in(2), r3000_4dff_tmp5));
                  byte_e3_byte_range_88_8b_sfx = simd_and(r3000_4dff_tmp5, byte_range_80_bf);
                  struct_blk_Enclosed_CJK.cc = simd_or(struct_blk_Enclosed_CJK.cc, byte_e3_byte_range_88_8b_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ugaritic {
  Property_blk_Ugaritic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ugaritic & struct_blk_Ugaritic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8e, r10000_10ffff_tmp13, sequence_f0_90_8e;
		BitBlock sequence_f0_90_adv, byte_range_80_9f, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Ugaritic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8e = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8e = simd_and(r10000_10ffff_tmp13, byte_8e);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(2), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8e_adv, byte_range_80_9f);
            struct_blk_Ugaritic.cc = simd_or(struct_blk_Ugaritic.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Shavian {
  Property_blk_Shavian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Shavian & struct_blk_Shavian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_91, r10000_10ffff_tmp10, sequence_f0_90_91;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp11, byte_range_90_bf;
		BitBlock sequence_f0_90_91_adv, r10000_10ffff_tmp12;




        struct_blk_Shavian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_91 = simd_and(r10000_10ffff_tmp10, byte_91);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(2), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_90_bf);
            struct_blk_Shavian.cc = simd_or(struct_blk_Shavian.cc, r10000_10ffff_tmp12);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_CJK_Compat_Ideographs {
  Property_blk_CJK_Compat_Ideographs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Compat_Ideographs & struct_blk_CJK_Compat_Ideographs) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_range_a4_ab, ra000_ffff_tmp7;
		BitBlock byte_ef_byte_range_a4_ab, byte_range_80_bf, ra000_ffff_tmp8;
		BitBlock byte_ef_byte_range_a4_ab_sfx;




        struct_blk_CJK_Compat_Ideographs.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_a4_ab = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp7));
              byte_ef_byte_range_a4_ab = simd_and(ra000_ffff_tmp7, byte_range_a4_ab);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_ab, carryQ.get_carry_in(1), ra000_ffff_tmp8));
              byte_ef_byte_range_a4_ab_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_blk_CJK_Compat_Ideographs.cc = simd_or(struct_blk_CJK_Compat_Ideographs.cc, byte_ef_byte_range_a4_ab_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Khmer {
  Property_blk_Khmer() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Khmer & struct_blk_Khmer) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_range_9e_9f, r1000_1fff_tmp5;
		BitBlock byte_e1_byte_range_9e_9f, byte_range_80_bf, r1000_1fff_tmp6;
		BitBlock byte_e1_byte_range_9e_9f_sfx;




        struct_blk_Khmer.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, basis_bits.bit_6);
                  byte_range_9e_9f = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  byte_e1_byte_range_9e_9f = simd_and(r1000_1fff_tmp5, byte_range_9e_9f);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_9e_9f, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  byte_e1_byte_range_9e_9f_sfx = simd_and(r1000_1fff_tmp6, byte_range_80_bf);
                  struct_blk_Khmer.cc = simd_or(struct_blk_Khmer.cc, byte_e1_byte_range_9e_9f_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Coptic {
  Property_blk_Coptic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Coptic & struct_blk_Coptic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock byte_range_b2_b3, r2000_2fff_tmp3, byte_e2_byte_range_b2_b3;
		BitBlock byte_range_80_bf, r2000_2fff_tmp4, byte_e2_byte_range_b2_b3_sfx;




        struct_blk_Coptic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  byte_e2_byte_range_b2_b3 = simd_and(r2000_2fff_tmp3, byte_range_b2_b3);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_b2_b3, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  byte_e2_byte_range_b2_b3_sfx = simd_and(r2000_2fff_tmp4, byte_range_80_bf);
                  struct_blk_Coptic.cc = simd_or(struct_blk_Coptic.cc, byte_e2_byte_range_b2_b3_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tai_Le {
  Property_blk_Tai_Le() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tai_Le & struct_blk_Tai_Le) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a5, r1000_1fff_tmp3;
		BitBlock sequence_e1_a5, byte_e1_adv, r1000_1fff_tmp4, byte_range_90_bf;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp5;




        struct_blk_Tai_Le.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_a5 = simd_and(r1000_1fff_tmp3, byte_a5);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp4);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(2), sequence_e1_a5_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a5_adv, byte_range_90_bf);
                  struct_blk_Tai_Le.cc = simd_or(struct_blk_Tai_Le.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Meroitic_Hieroglyphs {
  Property_blk_Meroitic_Hieroglyphs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Meroitic_Hieroglyphs & struct_blk_Meroitic_Hieroglyphs) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_a6, r10000_10ffff_tmp13, sequence_f0_90_a6;
		BitBlock sequence_f0_90_adv, byte_range_80_9f, sequence_f0_90_a6_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Meroitic_Hieroglyphs.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_a6 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_a6 = simd_and(r10000_10ffff_tmp13, byte_a6);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(2), sequence_f0_90_a6_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a6_adv, byte_range_80_9f);
            struct_blk_Meroitic_Hieroglyphs.cc = simd_or(struct_blk_Meroitic_Hieroglyphs.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Buginese {
  Property_blk_Buginese() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Buginese & struct_blk_Buginese) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_a8;
		BitBlock r1000_1fff_tmp4, sequence_e1_a8, byte_e1_adv, byte_range_80_9f;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp5;




        struct_blk_Buginese.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  sequence_e1_a8 = simd_and(r1000_1fff_tmp4, byte_a8);
                  byte_e1_adv = r1000_1fff_tmp4;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(2), sequence_e1_a8_adv));
                  r1000_1fff_tmp5 = simd_and(sequence_e1_a8_adv, byte_range_80_9f);
                  struct_blk_Buginese.cc = simd_or(struct_blk_Buginese.cc, r1000_1fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Phags_Pa {
  Property_blk_Phags_Pa() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Phags_Pa & struct_blk_Phags_Pa) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a1;
		BitBlock ra000_ffff_tmp9, sequence_ea_a1, byte_ea_adv, byte_range_80_bf;
		BitBlock sequence_ea_a1_adv, ra000_ffff_tmp10;




        struct_blk_Phags_Pa.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp6);
              byte_a1 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a1 = simd_and(ra000_ffff_tmp9, byte_a1);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(1), sequence_ea_a1_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a1_adv, byte_range_80_bf);
              struct_blk_Phags_Pa.cc = simd_or(struct_blk_Phags_Pa.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Devanagari {
  Property_blk_Devanagari() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Devanagari & struct_blk_Devanagari) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, byte_range_a4_a5, r800_fff_tmp3;
		BitBlock byte_e0_byte_range_a4_a5, byte_range_80_bf, r800_fff_tmp4;
		BitBlock byte_e0_byte_range_a4_a5_sfx;




        struct_blk_Devanagari.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp3));
                  byte_e0_byte_range_a4_a5 = simd_and(r800_fff_tmp3, byte_range_a4_a5);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_a4_a5, carryQ.get_carry_in(2), r800_fff_tmp4));
                  byte_e0_byte_range_a4_a5_sfx = simd_and(r800_fff_tmp4, byte_range_80_bf);
                  struct_blk_Devanagari.cc = simd_or(struct_blk_Devanagari.cc, byte_e0_byte_range_a4_a5_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Misc_Arrows {
  Property_blk_Misc_Arrows() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Arrows & struct_blk_Misc_Arrows) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock byte_range_ac_af, r2000_2fff_tmp3, byte_e2_byte_range_ac_af;
		BitBlock byte_range_80_bf, r2000_2fff_tmp4, byte_e2_byte_range_ac_af_sfx;




        struct_blk_Misc_Arrows.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_ac_af = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  byte_e2_byte_range_ac_af = simd_and(r2000_2fff_tmp3, byte_range_ac_af);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_ac_af, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  byte_e2_byte_range_ac_af_sfx = simd_and(r2000_2fff_tmp4, byte_range_80_bf);
                  struct_blk_Misc_Arrows.cc = simd_or(struct_blk_Misc_Arrows.cc, byte_e2_byte_range_ac_af_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sup_Arrows_C {
  Property_blk_Sup_Arrows_C() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_Arrows_C & struct_blk_Sup_Arrows_C) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_a0_a3, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9f_byte_range_a0_a3, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_byte_range_a0_a3_sfx;




        struct_blk_Sup_Arrows_C.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9f_byte_range_a0_a3 = simd_and(r10000_10ffff_tmp13, byte_range_a0_a3);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_a0_a3, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9f_byte_range_a0_a3_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Sup_Arrows_C.cc = simd_or(struct_blk_Sup_Arrows_C.cc, sequence_f0_9f_byte_range_a0_a3_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Cyrillic_Sup {
  Property_blk_Cyrillic_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Cyrillic_Sup & struct_blk_Cyrillic_Sup) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock byte_range_80_8f, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3;
		BitBlock byte_range_80_af, r500_58f_tmp4, r500_58f_tmp5, byte_d4_adv;
		BitBlock r500_52f_tmp1;




        struct_blk_Cyrillic_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r400_5ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp7));
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp7, byte_range_80_8f);
              r400_5ff_tmp9 = simd_or(byte_range_d4_d5, r400_5ff_tmp8);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp5)) {
                  byte_d4_adv = r500_58f_tmp4;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_blk_Cyrillic_Sup.cc = simd_or(struct_blk_Cyrillic_Sup.cc, r500_52f_tmp1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Sup_Arrows_A {
  Property_blk_Sup_Arrows_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_Arrows_A & struct_blk_Sup_Arrows_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_9f;
		BitBlock r2000_2fff_tmp6, sequence_e2_9f, byte_e2_adv, r2000_2fff_tmp7;
		BitBlock byte_range_b0_bf, sequence_e2_9f_adv, r2000_2fff_tmp8;




        struct_blk_Sup_Arrows_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_9f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  sequence_e2_9f = simd_and(r2000_2fff_tmp6, byte_9f);
                  byte_e2_adv = r2000_2fff_tmp6;
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_b0_bf = simd_and(r800_ffff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(2), sequence_e2_9f_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_9f_adv, byte_range_b0_bf);
                  struct_blk_Sup_Arrows_A.cc = simd_or(struct_blk_Sup_Arrows_A.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tagalog {
  Property_blk_Tagalog() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tagalog & struct_blk_Tagalog) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9c, r1000_1fff_tmp5, sequence_e1_9c;
		BitBlock byte_e1_adv, byte_range_80_9f, sequence_e1_9c_adv, r1000_1fff_tmp6;




        struct_blk_Tagalog.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9c = simd_and(r1000_1fff_tmp5, byte_9c);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(2), sequence_e1_9c_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_9c_adv, byte_range_80_9f);
                  struct_blk_Tagalog.cc = simd_or(struct_blk_Tagalog.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Currency_Symbols {
  Property_blk_Currency_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Currency_Symbols & struct_blk_Currency_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_82;
		BitBlock r2000_2fff_tmp3, sequence_e2_82, byte_e2_adv, byte_range_a0_bf;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock byte_83, sequence_e2_83, byte_range_80_8f, sequence_e2_83_adv;
		BitBlock r2000_2fff_tmp7;




        struct_blk_Currency_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_82 = simd_and(r2000_2fff_tmp3, byte_82);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(2), sequence_e2_82_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_82_adv, byte_range_a0_bf);
                  struct_blk_Currency_Symbols.cc = simd_or(struct_blk_Currency_Symbols.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp5, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(3), sequence_e2_83_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_83_adv, byte_range_80_8f);
                  struct_blk_Currency_Symbols.cc = simd_or(struct_blk_Currency_Symbols.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Bopomofo_Ext {
  Property_blk_Bopomofo_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Bopomofo_Ext & struct_blk_Bopomofo_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_86;
		BitBlock r3000_4dff_tmp5, sequence_e3_86, byte_e3_adv, byte_range_a0_bf;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp6;




        struct_blk_Bopomofo_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp4 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp3);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_86 = simd_and(r3000_4dff_tmp5, byte_86);
                  byte_e3_adv = r3000_4dff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(2), sequence_e3_86_adv));
                  r3000_4dff_tmp6 = simd_and(sequence_e3_86_adv, byte_range_a0_bf);
                  struct_blk_Bopomofo_Ext.cc = simd_or(struct_blk_Bopomofo_Ext.cc, r3000_4dff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Transport_And_Map {
  Property_blk_Transport_And_Map() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Transport_And_Map & struct_blk_Transport_And_Map) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_9a_9b, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9f_byte_range_9a_9b, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_byte_range_9a_9b_sfx;




        struct_blk_Transport_And_Map.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_9a_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9f_byte_range_9a_9b = simd_and(r10000_10ffff_tmp13, byte_range_9a_9b);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_9a_9b, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f0_9f_byte_range_9a_9b_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Transport_And_Map.cc = simd_or(struct_blk_Transport_And_Map.cc, sequence_f0_9f_byte_range_9a_9b_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_NKo {
  Property_blk_NKo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_NKo & struct_blk_NKo) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_df, byte_range_80_bf, byte_df_adv, r7c0_7ff_tmp1;




        struct_blk_NKo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(0, 1))) {
              r780_7ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp3, r780_7ff_tmp1);
              byte_df = simd_and(r80_7ff_tmp2, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(0, 1))) {
                byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(0), byte_df_adv));
                r7c0_7ff_tmp1 = simd_and(byte_df_adv, byte_range_80_bf);
                struct_blk_NKo.cc = simd_or(struct_blk_NKo.cc, r7c0_7ff_tmp1);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_High_PU_Surrogates {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_High_PU_Surrogates & struct_blk_High_PU_Surrogates) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef;




        struct_blk_High_PU_Surrogates.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if (bitblock::any(byte_range_c0_ff)) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if (bitblock::any(byte_range_e0_ef)) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
          }
        }
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };

  struct Property_blk_Misc_Math_Symbols_B {
  Property_blk_Misc_Math_Symbols_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Math_Symbols_B & struct_blk_Misc_Math_Symbols_B) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock byte_range_a6_a7, r2000_2fff_tmp3, byte_e2_byte_range_a6_a7;
		BitBlock byte_range_80_bf, r2000_2fff_tmp4, byte_e2_byte_range_a6_a7_sfx;




        struct_blk_Misc_Math_Symbols_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_a6_a7 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  byte_e2_byte_range_a6_a7 = simd_and(r2000_2fff_tmp3, byte_range_a6_a7);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a6_a7, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  byte_e2_byte_range_a6_a7_sfx = simd_and(r2000_2fff_tmp4, byte_range_80_bf);
                  struct_blk_Misc_Math_Symbols_B.cc = simd_or(struct_blk_Misc_Math_Symbols_B.cc, byte_e2_byte_range_a6_a7_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Saurashtra {
  Property_blk_Saurashtra() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Saurashtra & struct_blk_Saurashtra) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a2, ra000_ffff_tmp8;
		BitBlock sequence_ea_a2, byte_ea_adv, byte_range_80_bf, sequence_ea_a2_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_a3, sequence_ea_a3, byte_range_80_9f, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp13;




        struct_blk_Saurashtra.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp6);
              byte_a2 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a2 = simd_and(ra000_ffff_tmp8, byte_a2);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(1), sequence_ea_a2_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a2_adv, byte_range_80_bf);
              struct_blk_Saurashtra.cc = simd_or(struct_blk_Saurashtra.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_andc(ra000_ffff_tmp11, ra000_ffff_tmp6);
              byte_a3 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp12);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(2), sequence_ea_a3_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_a3_adv, byte_range_80_9f);
              struct_blk_Saurashtra.cc = simd_or(struct_blk_Saurashtra.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Rejang {
  Property_blk_Rejang() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Rejang & struct_blk_Rejang) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a4;
		BitBlock ra000_ffff_tmp9, sequence_ea_a4, byte_ea_adv, ra000_ffff_tmp10;
		BitBlock byte_range_b0_bf, sequence_ea_a4_adv, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_a5, sequence_ea_a5;
		BitBlock byte_range_80_9f, sequence_ea_a5_adv, ra000_ffff_tmp14;




        struct_blk_Rejang.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp7);
              byte_a4 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a4 = simd_and(ra000_ffff_tmp9, byte_a4);
              byte_ea_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(1), sequence_ea_a4_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_a4_adv, byte_range_b0_bf);
              struct_blk_Rejang.cc = simd_or(struct_blk_Rejang.cc, ra000_ffff_tmp11);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp12);
              byte_a5 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp13);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_range_80_9f = simd_andc(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(2), sequence_ea_a5_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_a5_adv, byte_range_80_9f);
              struct_blk_Rejang.cc = simd_or(struct_blk_Rejang.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Jamo {
  Property_blk_Jamo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Jamo & struct_blk_Jamo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_range_84_87;
		BitBlock r1000_1fff_tmp3, byte_e1_byte_range_84_87, byte_range_80_bf;
		BitBlock r1000_1fff_tmp4, byte_e1_byte_range_84_87_sfx;




        struct_blk_Jamo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_range_84_87 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  byte_e1_byte_range_84_87 = simd_and(r1000_1fff_tmp3, byte_range_84_87);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_87, carryQ.get_carry_in(2), r1000_1fff_tmp4));
                  byte_e1_byte_range_84_87_sfx = simd_and(r1000_1fff_tmp4, byte_range_80_bf);
                  struct_blk_Jamo.cc = simd_or(struct_blk_Jamo.cc, byte_e1_byte_range_84_87_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_UCAS {
  Property_blk_UCAS() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_UCAS & struct_blk_UCAS) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_range_90_99, r1000_1fff_tmp5;
		BitBlock byte_e1_byte_range_90_99, byte_range_80_bf, r1000_1fff_tmp6;
		BitBlock byte_e1_byte_range_90_99_sfx;




        struct_blk_UCAS.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_4, r1000_1fff_tmp3);
                  byte_range_90_99 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  byte_e1_byte_range_90_99 = simd_and(r1000_1fff_tmp5, byte_range_90_99);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_90_99, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  byte_e1_byte_range_90_99_sfx = simd_and(r1000_1fff_tmp6, byte_range_80_bf);
                  struct_blk_UCAS.cc = simd_or(struct_blk_UCAS.cc, byte_e1_byte_range_90_99_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Nabataean {
  Property_blk_Nabataean() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Nabataean & struct_blk_Nabataean) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a2;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a2, sequence_f0_90_adv;
		BitBlock byte_range_80_af, sequence_f0_90_a2_adv, r10000_10ffff_tmp13;




        struct_blk_Nabataean.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a2 = simd_and(r10000_10ffff_tmp12, byte_a2);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(2), sequence_f0_90_a2_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a2_adv, byte_range_80_af);
            struct_blk_Nabataean.cc = simd_or(struct_blk_Nabataean.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Thaana {
  Property_blk_Thaana() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Thaana & struct_blk_Thaana) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, byte_range_de_df, r780_7ff_tmp1;
		BitBlock r780_7ff_tmp2, byte_de, byte_range_80_bf, byte_de_adv, r780_7bf_tmp1;




        struct_blk_Thaana.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 1))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(0, 1))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp3, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp2, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(0, 1))) {
                byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(0), byte_de_adv));
                r780_7bf_tmp1 = simd_and(byte_de_adv, byte_range_80_bf);
                struct_blk_Thaana.cc = simd_or(struct_blk_Thaana.cc, r780_7bf_tmp1);
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<1, 0> carryQ;
  };

  struct Property_blk_Shorthand_Format_Controls {
  Property_blk_Shorthand_Format_Controls() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Shorthand_Format_Controls & struct_blk_Shorthand_Format_Controls) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9b;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9b, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_b2;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock r10000_10ffff_tmp15, byte_range_a0_af, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp16;




        struct_blk_Shorthand_Format_Controls.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_b2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp14, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_a0_af = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp15);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(2), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9b_b2_adv, byte_range_a0_af);
            struct_blk_Shorthand_Format_Controls.cc = simd_or(struct_blk_Shorthand_Format_Controls.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ornamental_Dingbats {
  Property_blk_Ornamental_Dingbats() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ornamental_Dingbats & struct_blk_Ornamental_Dingbats) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_99;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_99, sequence_f0_9f_adv;
		BitBlock r10000_10ffff_tmp15, byte_range_90_bf, sequence_f0_9f_99_adv;
		BitBlock r10000_10ffff_tmp16;




        struct_blk_Ornamental_Dingbats.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9f_99 = simd_and(r10000_10ffff_tmp14, byte_99);
            sequence_f0_9f_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp15);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(2), sequence_f0_9f_99_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9f_99_adv, byte_range_90_bf);
            struct_blk_Ornamental_Dingbats.cc = simd_or(struct_blk_Ornamental_Dingbats.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_NB {
  Property_blk_NB() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_NB & struct_blk_NB) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a1, r800_fff_tmp4;
		BitBlock sequence_e0_a1, byte_e0_adv, byte_range_a0_bf, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, byte_a2, sequence_e0_a2;
		BitBlock byte_range_80_9f, sequence_e0_a2_adv, r800_fff_tmp8, r800_1fff_tmp2;
		BitBlock r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, byte_b2, r1000_1fff_tmp5;
		BitBlock sequence_e1_b2, byte_e1_adv, byte_range_80_bf, sequence_e1_b2_adv;
		BitBlock r1000_1fff_tmp6, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock byte_bf, r2000_2fff_tmp6, sequence_e2_bf, byte_e2_adv;
		BitBlock byte_range_a0_af, sequence_e2_bf_adv, r2000_2fff_tmp7;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ad;
		BitBlock ra000_ffff_tmp8, sequence_ea_ad, byte_ea_adv, ra000_ffff_tmp9;
		BitBlock byte_range_b0_bf, sequence_ea_ad_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_ae, sequence_ea_ae, sequence_ea_ae_adv;
		BitBlock ra000_ffff_tmp12, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock byte_range_88_89, r10000_10ffff_tmp12;
		BitBlock sequence_f0_90_byte_range_88_89, r10000_10ffff_tmp13;
		BitBlock sequence_f0_90_byte_range_88_89_sfx, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, byte_8f, sequence_f0_90_adv, sequence_f0_90_8f;
		BitBlock r10000_10ffff_tmp19, sequence_f0_90_8f_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, byte_92, sequence_f0_90_92;
		BitBlock r10000_10ffff_tmp22, sequence_f0_90_92_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp23, byte_93, sequence_f0_90_93, r10000_10ffff_tmp24;
		BitBlock sequence_f0_90_93_byte_range_80_bf, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp28, sequence_f0_90_95_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp29, byte_96, sequence_f0_90_96, r10000_10ffff_tmp30;
		BitBlock sequence_f0_90_96_byte_range_80_bf, r10000_10ffff_tmp31, byte_9e;
		BitBlock sequence_f0_90_9e, r10000_10ffff_tmp32;
		BitBlock sequence_f0_90_9e_byte_range_80_bf, r10000_10ffff_tmp33;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp34;
		BitBlock sequence_f0_90_a2_byte_range_b0_bf, byte_a3, sequence_f0_90_a3;
		BitBlock r10000_10ffff_tmp35, sequence_f0_90_a3_byte_range_80_bf, byte_a5;
		BitBlock sequence_f0_90_a5, r10000_10ffff_tmp36;
		BitBlock sequence_f0_90_a5_byte_range_80_bf, r10000_10ffff_tmp37, byte_aa;
		BitBlock sequence_f0_90_aa, r10000_10ffff_tmp38;
		BitBlock sequence_f0_90_aa_byte_range_a0_bf, sequence_f0_90_ae;
		BitBlock r10000_10ffff_tmp39, sequence_f0_90_ae_byte_range_b0_bf, byte_af;
		BitBlock sequence_f0_90_af, r10000_10ffff_tmp40;
		BitBlock sequence_f0_90_af_byte_range_80_bf, r10000_10ffff_tmp41, byte_b1;
		BitBlock sequence_f0_90_b1, byte_range_90_bf, r10000_10ffff_tmp42;
		BitBlock sequence_f0_90_b1_byte_range_90_bf, sequence_f0_90_b2;
		BitBlock r10000_10ffff_tmp43, sequence_f0_90_b2_byte_range_80_bf;
		BitBlock r10000_10ffff_tmp44, byte_b9, sequence_f0_90_b9, r10000_10ffff_tmp45;
		BitBlock sequence_f0_90_b9_byte_range_80_9f, byte_ba, sequence_f0_90_ba;
		BitBlock r10000_10ffff_tmp46, sequence_f0_90_ba_byte_range_80_bf, byte_91;
		BitBlock sequence_f0_91, byte_89, r10000_10ffff_tmp47, sequence_f0_91_89;
		BitBlock sequence_f0_91_adv, sequence_f0_91_89_adv, r10000_10ffff_tmp48;
		BitBlock byte_8a, sequence_f0_91_8a, byte_range_80_af, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, byte_range_8e_91;
		BitBlock sequence_f0_91_byte_range_8e_91, r10000_10ffff_tmp54;
		BitBlock sequence_f0_91_byte_range_8e_91_sfx, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp55, sequence_f0_91_93_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp56, byte_94, sequence_f0_91_94, r10000_10ffff_tmp57;
		BitBlock sequence_f0_91_94_byte_range_80_bf, byte_99, sequence_f0_91_99;
		BitBlock r10000_10ffff_tmp58, sequence_f0_91_99_byte_range_a0_bf;
		BitBlock r10000_10ffff_tmp59, byte_9b, sequence_f0_91_9b, r10000_10ffff_tmp60;
		BitBlock sequence_f0_91_9b_byte_range_90_bf, r10000_10ffff_tmp61, byte_9c;
		BitBlock sequence_f0_91_9c, r10000_10ffff_tmp62;
		BitBlock sequence_f0_91_9c_byte_range_80_bf, sequence_f0_91_a2;
		BitBlock r10000_10ffff_tmp63, sequence_f0_91_a2_byte_range_80_9f, byte_a4;
		BitBlock sequence_f0_91_a4, r10000_10ffff_tmp64;
		BitBlock sequence_f0_91_a4_byte_range_80_bf, byte_ac, sequence_f0_91_ac;
		BitBlock r10000_10ffff_tmp65, sequence_f0_91_ac_byte_range_80_bf;
		BitBlock sequence_f0_92, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock byte_range_92_bf, r10000_10ffff_tmp68;
		BitBlock sequence_f0_92_byte_range_92_bf, r10000_10ffff_tmp69;
		BitBlock sequence_f0_92_byte_range_92_bf_sfx, sequence_f0_93;
		BitBlock r10000_10ffff_tmp70, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock sequence_f0_93_90_adv, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, byte_range_91_bf;
		BitBlock sequence_f0_93_byte_range_91_bf, r10000_10ffff_tmp74;
		BitBlock sequence_f0_93_byte_range_91_bf_sfx, r10000_10ffff_tmp75;
		BitBlock byte_range_94_95, byte_f0_byte_range_94_95, r10000_10ffff_tmp76;
		BitBlock byte_f0_byte_range_94_95_sfx, r10000_10ffff_tmp77;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, sequence_f0_96, byte_80;
		BitBlock sequence_f0_96_adv, sequence_f0_96_80, r10000_10ffff_tmp78;
		BitBlock sequence_f0_96_80_byte_range_80_bf, r10000_10ffff_tmp79, byte_97;
		BitBlock sequence_f0_97, sequence_f0_97_adv, sequence_f0_97_80;
		BitBlock r10000_10ffff_tmp80, sequence_f0_97_80_byte_range_80_bf;
		BitBlock sequence_f0_9b, byte_84, sequence_f0_9b_adv, sequence_f0_9b_84;
		BitBlock r10000_10ffff_tmp81, sequence_f0_9b_84_byte_range_80_bf;
		BitBlock sequence_f0_9c, sequence_f0_9c_adv, sequence_f0_9c_80;
		BitBlock r10000_10ffff_tmp82, sequence_f0_9c_80_byte_range_80_bf;
		BitBlock r10000_10ffff_tmp83, byte_9d, sequence_f0_9d, sequence_f0_9d_adv;
		BitBlock sequence_f0_9d_89, r10000_10ffff_tmp84;
		BitBlock sequence_f0_9d_89_byte_range_90_bf, sequence_f0_9e;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_80, r10000_10ffff_tmp85;
		BitBlock sequence_f0_9e_80_byte_range_80_bf, byte_9f, sequence_f0_9f;
		BitBlock sequence_f0_9f_adv, sequence_f0_9f_a4, r10000_10ffff_tmp86;
		BitBlock sequence_f0_9f_a4_byte_range_80_bf, sequence_f0_aa;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b, r10000_10ffff_tmp87;
		BitBlock sequence_f0_aa_9b_byte_range_a0_bf, byte_ab, sequence_f0_ab, byte_a0;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_a0, r10000_10ffff_tmp88;
		BitBlock sequence_f0_ab_a0_byte_range_a0_bf, sequence_f0_ac;
		BitBlock sequence_f0_ac_adv, sequence_f0_ac_80, r10000_10ffff_tmp89;
		BitBlock sequence_f0_ac_80_byte_range_80_bf, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_80, r10000_10ffff_tmp90;
		BitBlock sequence_f0_af_80_byte_range_80_bf, byte_b0, sequence_f0_b0;
		BitBlock sequence_f0_b0_adv, sequence_f0_b0_80, r10000_10ffff_tmp91;
		BitBlock sequence_f0_b0_80_byte_range_80_bf, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, byte_range_f1_f2, r10000_10ffff_tmp94;
		BitBlock byte_range_f1_f2_sfx, r10000_10ffff_tmp95, byte_range_f1_f2_sfx_sfx;
		BitBlock r10000_10ffff_tmp96, byte_range_f1_f2_sfx_sfx_sfx, byte_f3;
		BitBlock byte_f3_adv, sequence_f3_80, sequence_f3_80_adv, sequence_f3_80_80;
		BitBlock r10000_10ffff_tmp97, sequence_f3_80_80_byte_range_80_bf;




        struct_blk_NB.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 79))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 11))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 7))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 5))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a1 = simd_and(r800_fff_tmp4, byte_a1);
                  byte_e0_adv = r800_fff_tmp4;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(2), sequence_e0_a1_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a1_adv, byte_range_a0_bf);
                  struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r800_fff_tmp5);
                  r800_fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp6, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp7);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  byte_range_80_9f = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(3), sequence_e0_a2_adv));
                  r800_fff_tmp8 = simd_and(sequence_e0_a2_adv, byte_range_80_9f);
                  struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r800_fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(4, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_b2 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r1000_1fff_tmp5));
                  sequence_e1_b2 = simd_and(r1000_1fff_tmp5, byte_b2);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(5), sequence_e1_b2_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
                  struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 5);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(6, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_bf = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp6));
                  sequence_e2_bf = simd_and(r2000_2fff_tmp6, byte_bf);
                  byte_e2_adv = r2000_2fff_tmp6;
                  byte_range_a0_af = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(7), sequence_e2_bf_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_bf_adv, byte_range_a0_af);
                  struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 7);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(8, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              byte_ad = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(8), ra000_ffff_tmp8));
              sequence_ea_ad = simd_and(ra000_ffff_tmp8, byte_ad);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r800_ffff_tmp5, ra000_ffff_tmp9);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(9), sequence_ea_ad_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_ad_adv, byte_range_b0_bf);
              struct_blk_NB.cc = simd_or(struct_blk_NB.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp2);
              byte_ae = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ea_ae = simd_and(byte_ea_adv, byte_ae);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_ea_ae, carryQ.get_carry_in(10), sequence_ea_ae_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_ae_adv, byte_range_80_bf);
              struct_blk_NB.cc = simd_or(struct_blk_NB.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 11);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(11, 68))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(11), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, basis_bits.bit_6);
            byte_range_88_89 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(12), r10000_10ffff_tmp12));
            sequence_f0_90_byte_range_88_89 = simd_and(r10000_10ffff_tmp12, byte_range_88_89);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(13), r10000_10ffff_tmp13));
            sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10ffff_tmp13, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_byte_range_88_89_sfx);
            r10000_10ffff_tmp14 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp15 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp17);
            byte_8f = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp18);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(14), r10000_10ffff_tmp19));
            sequence_f0_90_8f_byte_range_a0_bf = simd_and(r10000_10ffff_tmp19, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_8f_byte_range_a0_bf);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp21);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_b0_bf = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(15), r10000_10ffff_tmp22));
            sequence_f0_90_92_byte_range_b0_bf = simd_and(r10000_10ffff_tmp22, byte_range_b0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_92_byte_range_b0_bf);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp23);
            sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(16), r10000_10ffff_tmp24));
            sequence_f0_90_93_byte_range_80_bf = simd_and(r10000_10ffff_tmp24, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_93_byte_range_80_bf);
            r10000_10ffff_tmp25 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp26);
            byte_95 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp27);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(17), r10000_10ffff_tmp28));
            sequence_f0_90_95_byte_range_b0_bf = simd_and(r10000_10ffff_tmp28, byte_range_b0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_95_byte_range_b0_bf);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp20);
            byte_96 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp29);
            sequence_f0_90_96 = simd_and(sequence_f0_90_adv, byte_96);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_90_96, carryQ.get_carry_in(18), r10000_10ffff_tmp30));
            sequence_f0_90_96_byte_range_80_bf = simd_and(r10000_10ffff_tmp30, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_96_byte_range_80_bf);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp20);
            byte_9e = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp31);
            sequence_f0_90_9e = simd_and(sequence_f0_90_adv, byte_9e);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9e, carryQ.get_carry_in(19), r10000_10ffff_tmp32));
            sequence_f0_90_9e_byte_range_80_bf = simd_and(r10000_10ffff_tmp32, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_9e_byte_range_80_bf);
            r10000_10ffff_tmp33 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a2 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp21);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(20), r10000_10ffff_tmp34));
            sequence_f0_90_a2_byte_range_b0_bf = simd_and(r10000_10ffff_tmp34, byte_range_b0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_a2_byte_range_b0_bf);
            byte_a3 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp23);
            sequence_f0_90_a3 = simd_and(sequence_f0_90_adv, byte_a3);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a3, carryQ.get_carry_in(21), r10000_10ffff_tmp35));
            sequence_f0_90_a3_byte_range_80_bf = simd_and(r10000_10ffff_tmp35, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_a3_byte_range_80_bf);
            byte_a5 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp27);
            sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(22), r10000_10ffff_tmp36));
            sequence_f0_90_a5_byte_range_80_bf = simd_and(r10000_10ffff_tmp36, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_a5_byte_range_80_bf);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp20);
            byte_aa = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp37);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(23), r10000_10ffff_tmp38));
            sequence_f0_90_aa_byte_range_a0_bf = simd_and(r10000_10ffff_tmp38, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_aa_byte_range_a0_bf);
            byte_ae = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp31);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(24), r10000_10ffff_tmp39));
            sequence_f0_90_ae_byte_range_b0_bf = simd_and(r10000_10ffff_tmp39, byte_range_b0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_ae_byte_range_b0_bf);
            byte_af = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp18);
            sequence_f0_90_af = simd_and(sequence_f0_90_adv, byte_af);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_90_af, carryQ.get_carry_in(25), r10000_10ffff_tmp40));
            sequence_f0_90_af_byte_range_80_bf = simd_and(r10000_10ffff_tmp40, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_af_byte_range_80_bf);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp1);
            byte_b1 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp41);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            byte_range_90_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp8);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(26), r10000_10ffff_tmp42));
            sequence_f0_90_b1_byte_range_90_bf = simd_and(r10000_10ffff_tmp42, byte_range_90_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_b1_byte_range_90_bf);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp21);
            sequence_f0_90_b2 = simd_and(sequence_f0_90_adv, byte_b2);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b2, carryQ.get_carry_in(27), r10000_10ffff_tmp43));
            sequence_f0_90_b2_byte_range_80_bf = simd_and(r10000_10ffff_tmp43, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_b2_byte_range_80_bf);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp26);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp44);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(28), r10000_10ffff_tmp45));
            sequence_f0_90_b9_byte_range_80_9f = simd_and(r10000_10ffff_tmp45, byte_range_80_9f);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_b9_byte_range_80_9f);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp37);
            sequence_f0_90_ba = simd_and(sequence_f0_90_adv, byte_ba);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ba, carryQ.get_carry_in(29), r10000_10ffff_tmp46));
            sequence_f0_90_ba_byte_range_80_bf = simd_and(r10000_10ffff_tmp46, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_90_ba_byte_range_80_bf);
            byte_91 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp41);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_89 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp44);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(30), r10000_10ffff_tmp47));
            sequence_f0_91_89 = simd_and(r10000_10ffff_tmp47, byte_89);
            sequence_f0_91_adv = r10000_10ffff_tmp47;
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_91_89, carryQ.get_carry_in(31), sequence_f0_91_89_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_89_adv, byte_range_90_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r10000_10ffff_tmp48);
            byte_8a = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp37);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(32), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_91_8a_adv, byte_range_80_af);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp51 = simd_not(r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp16, basis_bits.bit_6);
            r10000_10ffff_tmp53 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp51), simd_andc(r10000_10ffff_tmp52, basis_bits.bit_3));
            byte_range_8e_91 = simd_and(byte_range_80_9f, r10000_10ffff_tmp53);
            sequence_f0_91_byte_range_8e_91 = simd_and(sequence_f0_91_adv, byte_range_8e_91);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_8e_91, carryQ.get_carry_in(33), r10000_10ffff_tmp54));
            sequence_f0_91_byte_range_8e_91_sfx = simd_and(r10000_10ffff_tmp54, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_byte_range_8e_91_sfx);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(34), r10000_10ffff_tmp55));
            sequence_f0_91_93_byte_range_a0_bf = simd_and(r10000_10ffff_tmp55, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_93_byte_range_a0_bf);
            r10000_10ffff_tmp56 = simd_andc(r10000_10ffff_tmp25, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp56);
            sequence_f0_91_94 = simd_and(sequence_f0_91_adv, byte_94);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_91_94, carryQ.get_carry_in(35), r10000_10ffff_tmp57));
            sequence_f0_91_94_byte_range_80_bf = simd_and(r10000_10ffff_tmp57, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_94_byte_range_80_bf);
            byte_99 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp44);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(36), r10000_10ffff_tmp58));
            sequence_f0_91_99_byte_range_a0_bf = simd_and(r10000_10ffff_tmp58, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_99_byte_range_a0_bf);
            r10000_10ffff_tmp59 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp17);
            byte_9b = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp59);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(37), r10000_10ffff_tmp60));
            sequence_f0_91_9b_byte_range_90_bf = simd_and(r10000_10ffff_tmp60, byte_range_90_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_9b_byte_range_90_bf);
            r10000_10ffff_tmp61 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp2);
            byte_9c = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp61);
            sequence_f0_91_9c = simd_and(sequence_f0_91_adv, byte_9c);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9c, carryQ.get_carry_in(38), r10000_10ffff_tmp62));
            sequence_f0_91_9c_byte_range_80_bf = simd_and(r10000_10ffff_tmp62, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_9c_byte_range_80_bf);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(39), r10000_10ffff_tmp63));
            sequence_f0_91_a2_byte_range_80_9f = simd_and(r10000_10ffff_tmp63, byte_range_80_9f);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_a2_byte_range_80_9f);
            byte_a4 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp56);
            sequence_f0_91_a4 = simd_and(sequence_f0_91_adv, byte_a4);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a4, carryQ.get_carry_in(40), r10000_10ffff_tmp64));
            sequence_f0_91_a4_byte_range_80_bf = simd_and(r10000_10ffff_tmp64, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_a4_byte_range_80_bf);
            byte_ac = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp61);
            sequence_f0_91_ac = simd_and(sequence_f0_91_adv, byte_ac);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ac, carryQ.get_carry_in(41), r10000_10ffff_tmp65));
            sequence_f0_91_ac_byte_range_80_bf = simd_and(r10000_10ffff_tmp65, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_91_ac_byte_range_80_bf);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            r10000_10ffff_tmp66 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp50);
            r10000_10ffff_tmp67 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp66);
            byte_range_92_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp67);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(42), r10000_10ffff_tmp68));
            sequence_f0_92_byte_range_92_bf = simd_and(r10000_10ffff_tmp68, byte_range_92_bf);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_92_bf, carryQ.get_carry_in(43), r10000_10ffff_tmp69));
            sequence_f0_92_byte_range_92_bf_sfx = simd_and(r10000_10ffff_tmp69, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_92_byte_range_92_bf_sfx);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(44), r10000_10ffff_tmp70));
            sequence_f0_93_90 = simd_and(r10000_10ffff_tmp70, byte_90);
            sequence_f0_93_adv = r10000_10ffff_tmp70;
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(45), sequence_f0_93_90_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_93_90_adv, byte_range_b0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp73 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp72);
            byte_range_91_bf = simd_and(byte_range_80_bf, r10000_10ffff_tmp73);
            sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(46), r10000_10ffff_tmp74));
            sequence_f0_93_byte_range_91_bf_sfx = simd_and(r10000_10ffff_tmp74, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_93_byte_range_91_bf_sfx);
            r10000_10ffff_tmp75 = simd_andc(r10000_10ffff_tmp25, basis_bits.bit_6);
            byte_range_94_95 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp75);
            byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(47), r10000_10ffff_tmp76));
            byte_f0_byte_range_94_95_sfx = simd_and(r10000_10ffff_tmp76, byte_range_80_bf);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(48), r10000_10ffff_tmp77));
            byte_f0_byte_range_94_95_sfx_sfx = simd_and(r10000_10ffff_tmp77, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, byte_f0_byte_range_94_95_sfx_sfx);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_80 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp3);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(49), sequence_f0_96_adv));
            sequence_f0_96_80 = simd_and(sequence_f0_96_adv, byte_80);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_96_80, carryQ.get_carry_in(50), r10000_10ffff_tmp78));
            sequence_f0_96_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp78, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_96_80_byte_range_80_bf);
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp17);
            byte_97 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp79);
            sequence_f0_97 = simd_and(byte_f0_adv, byte_97);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_97, carryQ.get_carry_in(51), sequence_f0_97_adv));
            sequence_f0_97_80 = simd_and(sequence_f0_97_adv, byte_80);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_97_80, carryQ.get_carry_in(52), r10000_10ffff_tmp80));
            sequence_f0_97_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp80, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_97_80_byte_range_80_bf);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_84 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp56);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(53), sequence_f0_9b_adv));
            sequence_f0_9b_84 = simd_and(sequence_f0_9b_adv, byte_84);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_84, carryQ.get_carry_in(54), r10000_10ffff_tmp81));
            sequence_f0_9b_84_byte_range_80_bf = simd_and(r10000_10ffff_tmp81, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_9b_84_byte_range_80_bf);
            sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(55), sequence_f0_9c_adv));
            sequence_f0_9c_80 = simd_and(sequence_f0_9c_adv, byte_80);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_80, carryQ.get_carry_in(56), r10000_10ffff_tmp82));
            sequence_f0_9c_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp82, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_9c_80_byte_range_80_bf);
            r10000_10ffff_tmp83 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp26);
            byte_9d = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp83);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(57), sequence_f0_9d_adv));
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(58), r10000_10ffff_tmp84));
            sequence_f0_9d_89_byte_range_90_bf = simd_and(r10000_10ffff_tmp84, byte_range_90_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_9d_89_byte_range_90_bf);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(59), sequence_f0_9e_adv));
            sequence_f0_9e_80 = simd_and(sequence_f0_9e_adv, byte_80);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_80, carryQ.get_carry_in(60), r10000_10ffff_tmp85));
            sequence_f0_9e_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp85, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_9e_80_byte_range_80_bf);
            byte_9f = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp18);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(61), sequence_f0_9f_adv));
            sequence_f0_9f_a4 = simd_and(sequence_f0_9f_adv, byte_a4);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a4, carryQ.get_carry_in(62), r10000_10ffff_tmp86));
            sequence_f0_9f_a4_byte_range_80_bf = simd_and(r10000_10ffff_tmp86, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_9f_a4_byte_range_80_bf);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(63), sequence_f0_aa_adv));
            sequence_f0_aa_9b = simd_and(sequence_f0_aa_adv, byte_9b);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(64), r10000_10ffff_tmp87));
            sequence_f0_aa_9b_byte_range_a0_bf = simd_and(r10000_10ffff_tmp87, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_aa_9b_byte_range_a0_bf);
            byte_ab = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp59);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            byte_a0 = simd_andc(r10000_10ffff_tmp33, r10000_10ffff_tmp3);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(65), sequence_f0_ab_adv));
            sequence_f0_ab_a0 = simd_and(sequence_f0_ab_adv, byte_a0);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_a0, carryQ.get_carry_in(66), r10000_10ffff_tmp88));
            sequence_f0_ab_a0_byte_range_a0_bf = simd_and(r10000_10ffff_tmp88, byte_range_a0_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_ab_a0_byte_range_a0_bf);
            sequence_f0_ac = simd_and(byte_f0_adv, byte_ac);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_ac, carryQ.get_carry_in(67), sequence_f0_ac_adv));
            sequence_f0_ac_80 = simd_and(sequence_f0_ac_adv, byte_80);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_ac_80, carryQ.get_carry_in(68), r10000_10ffff_tmp89));
            sequence_f0_ac_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp89, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_ac_80_byte_range_80_bf);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(69), sequence_f0_af_adv));
            sequence_f0_af_80 = simd_and(sequence_f0_af_adv, byte_80);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_af_80, carryQ.get_carry_in(70), r10000_10ffff_tmp90));
            sequence_f0_af_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp90, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_af_80_byte_range_80_bf);
            byte_b0 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp3);
            sequence_f0_b0 = simd_and(byte_f0_adv, byte_b0);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_b0, carryQ.get_carry_in(71), sequence_f0_b0_adv));
            sequence_f0_b0_80 = simd_and(sequence_f0_b0_adv, byte_80);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_b0_80, carryQ.get_carry_in(72), r10000_10ffff_tmp91));
            sequence_f0_b0_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp91, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f0_b0_80_byte_range_80_bf);
            r10000_10ffff_tmp92 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp1);
            r10000_10ffff_tmp93 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_f1_f2 = simd_and(r10000_10ffff_tmp92, r10000_10ffff_tmp93);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(73), r10000_10ffff_tmp94));
            byte_range_f1_f2_sfx = simd_and(r10000_10ffff_tmp94, byte_range_80_bf);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(74), r10000_10ffff_tmp95));
            byte_range_f1_f2_sfx_sfx = simd_and(r10000_10ffff_tmp95, byte_range_80_bf);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(75), r10000_10ffff_tmp96));
            byte_range_f1_f2_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp96, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, byte_range_f1_f2_sfx_sfx_sfx);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp23);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(76), byte_f3_adv));
            sequence_f3_80 = simd_and(byte_f3_adv, byte_80);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f3_80, carryQ.get_carry_in(77), sequence_f3_80_adv));
            sequence_f3_80_80 = simd_and(sequence_f3_80_adv, byte_80);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f3_80_80, carryQ.get_carry_in(78), r10000_10ffff_tmp97));
            sequence_f3_80_80_byte_range_80_bf = simd_and(r10000_10ffff_tmp97, byte_range_80_bf);
            struct_blk_NB.cc = simd_or(struct_blk_NB.cc, sequence_f3_80_80_byte_range_80_bf);
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 68);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 79);
        }
        carryQ.CarryQ_Adjust(79);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<79, 0> carryQ;
  };

  struct Property_blk_Sup_Math_Operators {
  Property_blk_Sup_Math_Operators() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_Math_Operators & struct_blk_Sup_Math_Operators) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock byte_range_a8_ab, r2000_2fff_tmp3, byte_e2_byte_range_a8_ab;
		BitBlock byte_range_80_bf, r2000_2fff_tmp4, byte_e2_byte_range_a8_ab_sfx;




        struct_blk_Sup_Math_Operators.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp2 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  byte_range_a8_ab = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  byte_e2_byte_range_a8_ab = simd_and(r2000_2fff_tmp3, byte_range_a8_ab);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_a8_ab, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  byte_e2_byte_range_a8_ab_sfx = simd_and(r2000_2fff_tmp4, byte_range_80_bf);
                  struct_blk_Sup_Math_Operators.cc = simd_or(struct_blk_Sup_Math_Operators.cc, byte_e2_byte_range_a8_ab_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_A {
  Property_blk_Latin_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_A & struct_blk_Latin_Ext_A) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock byte_c9, r100_2ff_tmp8, byte_range_80_8f, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx;




        struct_blk_Latin_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp5, r100_2ff_tmp6);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp7);
                r100_2ff_tmp8 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_80_8f = simd_andc(r100_2ff_tmp8, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_8f);
                r100_2ff_tmp11 = simd_or(byte_range_c4_c8, r100_2ff_tmp10);
                if ((bitblock::any(r100_2ff_tmp11) || carryQ.CarryTest(1, 1))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(1, 1))) {
                    byte_range_80_bf = r100_2ff_tmp8;
                    carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(1), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_blk_Latin_Ext_A.cc = simd_or(struct_blk_Latin_Ext_A.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(1, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Deseret {
  Property_blk_Deseret() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Deseret & struct_blk_Deseret) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock sequence_f0_90_90, sequence_f0_90_adv, byte_range_80_bf;
		BitBlock sequence_f0_90_90_adv, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_91, sequence_f0_90_91;
		BitBlock r10000_10ffff_tmp13, byte_range_80_8f, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Deseret.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp8));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp8, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp8;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(2), sequence_f0_90_90_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_90_90_adv, byte_range_80_bf);
            struct_blk_Deseret.cc = simd_or(struct_blk_Deseret.cc, r10000_10ffff_tmp9);
            r10000_10ffff_tmp10 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp12);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp13);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(3), sequence_f0_90_91_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_blk_Deseret.cc = simd_or(struct_blk_Deseret.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_C {
  Property_blk_Latin_Ext_C() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_C & struct_blk_Latin_Ext_C) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_b1, r2000_2fff_tmp5;
		BitBlock sequence_e2_b1, byte_e2_adv, byte_range_a0_bf, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp6;




        struct_blk_Latin_Ext_C.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_b1 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_b1 = simd_and(r2000_2fff_tmp5, byte_b1);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(2), sequence_e2_b1_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_b1_adv, byte_range_a0_bf);
                  struct_blk_Latin_Ext_C.cc = simd_or(struct_blk_Latin_Ext_C.cc, r2000_2fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Latin_Ext_B {
  Property_blk_Latin_Ext_B() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Latin_Ext_B & struct_blk_Latin_Ext_B) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock byte_c9, r100_2ff_tmp8, byte_range_80_8f, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c6_c8, r100_24f_tmp3, byte_range_80_bf, r180_24f_tmp1;
		BitBlock byte_range_c6_c8_sfx, byte_c9_byte_range_80_8f;




        struct_blk_Latin_Ext_B.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp5, r100_2ff_tmp6);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp7);
                r100_2ff_tmp8 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_80_8f = simd_andc(r100_2ff_tmp8, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_8f);
                r100_2ff_tmp11 = simd_or(byte_range_c4_c8, r100_2ff_tmp10);
                if ((bitblock::any(r100_2ff_tmp11) || carryQ.CarryTest(1, 1))) {
                  r100_24f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp2 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(r100_24f_tmp1, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  r100_24f_tmp3 = simd_or(byte_range_c6_c8, r100_2ff_tmp10);
                  if ((bitblock::any(r100_24f_tmp3) || carryQ.CarryTest(1, 1))) {
                    byte_range_80_bf = r100_2ff_tmp8;
                    carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(1), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_blk_Latin_Ext_B.cc = simd_or(struct_blk_Latin_Ext_B.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp10;
                    struct_blk_Latin_Ext_B.cc = simd_or(struct_blk_Latin_Ext_B.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(1, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Mahjong {
  Property_blk_Mahjong() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Mahjong & struct_blk_Mahjong) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_80, r10000_10ffff_tmp13, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, byte_range_80_af, sequence_f0_9f_80_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Mahjong.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_80 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp13, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp13;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(2), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9f_80_adv, byte_range_80_af);
            struct_blk_Mahjong.cc = simd_or(struct_blk_Mahjong.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Lycian {
  Property_blk_Lycian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Lycian & struct_blk_Lycian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8a, r10000_10ffff_tmp13, sequence_f0_90_8a;
		BitBlock sequence_f0_90_adv, byte_range_80_9f, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Lycian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8a = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8a = simd_and(r10000_10ffff_tmp13, byte_8a);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(2), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8a_adv, byte_range_80_9f);
            struct_blk_Lycian.cc = simd_or(struct_blk_Lycian.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Oriya {
  Property_blk_Oriya() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Oriya & struct_blk_Oriya) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_range_ac_ad;
		BitBlock r800_fff_tmp4, byte_e0_byte_range_ac_ad, byte_range_80_bf;
		BitBlock r800_fff_tmp5, byte_e0_byte_range_ac_ad_sfx;




        struct_blk_Oriya.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp3 = simd_andc(r800_fff_tmp2, basis_bits.bit_6);
                  byte_range_ac_ad = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  byte_e0_byte_range_ac_ad = simd_and(r800_fff_tmp4, byte_range_ac_ad);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e0_byte_range_ac_ad, carryQ.get_carry_in(2), r800_fff_tmp5));
                  byte_e0_byte_range_ac_ad_sfx = simd_and(r800_fff_tmp5, byte_range_80_bf);
                  struct_blk_Oriya.cc = simd_or(struct_blk_Oriya.cc, byte_e0_byte_range_ac_ad_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Rumi {
  Property_blk_Rumi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Rumi & struct_blk_Rumi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_b9;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_b9, sequence_f0_90_adv;
		BitBlock byte_range_a0_bf, sequence_f0_90_b9_adv, r10000_10ffff_tmp13;




        struct_blk_Rumi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            byte_b9 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_b9 = simd_and(r10000_10ffff_tmp12, byte_b9);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(2), sequence_f0_90_b9_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_bf);
            struct_blk_Rumi.cc = simd_or(struct_blk_Rumi.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Control_Pictures {
  Property_blk_Control_Pictures() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Control_Pictures & struct_blk_Control_Pictures) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_90, r2000_2fff_tmp4, sequence_e2_90;
		BitBlock byte_e2_adv, byte_range_80_bf, sequence_e2_90_adv, r2000_2fff_tmp5;




        struct_blk_Control_Pictures.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_90 = simd_and(r2000_2fff_tmp4, byte_90);
                  byte_e2_adv = r2000_2fff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(2), sequence_e2_90_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_90_adv, byte_range_80_bf);
                  struct_blk_Control_Pictures.cc = simd_or(struct_blk_Control_Pictures.cc, r2000_2fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Aegean_Numbers {
  Property_blk_Aegean_Numbers() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Aegean_Numbers & struct_blk_Aegean_Numbers) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_84;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_84, sequence_f0_90_adv;
		BitBlock byte_range_80_bf, sequence_f0_90_84_adv, r10000_10ffff_tmp13;




        struct_blk_Aegean_Numbers.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_84 = simd_and(r10000_10ffff_tmp12, byte_84);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(2), sequence_f0_90_84_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_84_adv, byte_range_80_bf);
            struct_blk_Aegean_Numbers.cc = simd_or(struct_blk_Aegean_Numbers.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Khudawadi {
  Property_blk_Khudawadi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Khudawadi & struct_blk_Khudawadi) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_8a, r10000_10ffff_tmp15, sequence_f0_91_8a, sequence_f0_91_adv;
		BitBlock byte_range_b0_bf, sequence_f0_91_8a_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_8b, sequence_f0_91_8b;
		BitBlock byte_range_80_bf, sequence_f0_91_8b_adv, r10000_10ffff_tmp19;




        struct_blk_Khudawadi.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_8a = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_91_8a = simd_and(r10000_10ffff_tmp15, byte_8a);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(2), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_blk_Khudawadi.cc = simd_or(struct_blk_Khudawadi.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            byte_8b = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp18);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(3), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_91_8b_adv, byte_range_80_bf);
            struct_blk_Khudawadi.cc = simd_or(struct_blk_Khudawadi.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Devanagari_Ext {
  Property_blk_Devanagari_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Devanagari_Ext & struct_blk_Devanagari_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_a3;
		BitBlock ra000_ffff_tmp9, sequence_ea_a3, byte_ea_adv, byte_range_a0_bf;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp10;




        struct_blk_Devanagari_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp6);
              byte_a3 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ea_a3 = simd_and(ra000_ffff_tmp9, byte_a3);
              byte_ea_adv = ra000_ffff_tmp9;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(1), sequence_ea_a3_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a3_adv, byte_range_a0_bf);
              struct_blk_Devanagari_Ext.cc = simd_or(struct_blk_Devanagari_Ext.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Tifinagh {
  Property_blk_Tifinagh() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tifinagh & struct_blk_Tifinagh) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_b4;
		BitBlock r2000_2fff_tmp3, sequence_e2_b4, byte_e2_adv, byte_range_b0_bf;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock byte_b5, sequence_e2_b5, byte_range_80_bf, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp7;




        struct_blk_Tifinagh.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_b4 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_b4 = simd_and(r2000_2fff_tmp3, byte_b4);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_b0_bf = r2000_2fff_tmp2;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(2), sequence_e2_b4_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
                  struct_blk_Tifinagh.cc = simd_or(struct_blk_Tifinagh.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp5);
                  byte_b5 = simd_and(byte_range_b0_bf, r2000_2fff_tmp6);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(3), sequence_e2_b5_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_b5_adv, byte_range_80_bf);
                  struct_blk_Tifinagh.cc = simd_or(struct_blk_Tifinagh.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Enclosed_Ideographic_Sup {
  Property_blk_Enclosed_Ideographic_Sup() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Enclosed_Ideographic_Sup & struct_blk_Enclosed_Ideographic_Sup) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_88_8b;
		BitBlock r10000_10ffff_tmp14, sequence_f0_9f_byte_range_88_8b;
		BitBlock byte_range_80_bf, r10000_10ffff_tmp15;
		BitBlock sequence_f0_9f_byte_range_88_8b_sfx;




        struct_blk_Enclosed_Ideographic_Sup.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_88_8b = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_9f_byte_range_88_8b = simd_and(r10000_10ffff_tmp14, byte_range_88_8b);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_88_8b, carryQ.get_carry_in(2), r10000_10ffff_tmp15));
            sequence_f0_9f_byte_range_88_8b_sfx = simd_and(r10000_10ffff_tmp15, byte_range_80_bf);
            struct_blk_Enclosed_Ideographic_Sup.cc = simd_or(struct_blk_Enclosed_Ideographic_Sup.cc, sequence_f0_9f_byte_range_88_8b_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Myanmar_Ext_A {
  Property_blk_Myanmar_Ext_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Myanmar_Ext_A & struct_blk_Myanmar_Ext_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_a9, ra000_ffff_tmp8;
		BitBlock sequence_ea_a9, byte_ea_adv, byte_range_a0_bf, sequence_ea_a9_adv;
		BitBlock ra000_ffff_tmp9;




        struct_blk_Myanmar_Ext_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_a9 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_a9 = simd_and(ra000_ffff_tmp8, byte_a9);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(1), sequence_ea_a9_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_a9_adv, byte_range_a0_bf);
              struct_blk_Myanmar_Ext_A.cc = simd_or(struct_blk_Myanmar_Ext_A.cc, ra000_ffff_tmp9);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Hanunoo {
  Property_blk_Hanunoo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Hanunoo & struct_blk_Hanunoo) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_9c, r1000_1fff_tmp5, sequence_e1_9c;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_9c_adv, r1000_1fff_tmp6;




        struct_blk_Hanunoo.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_9c = simd_and(r1000_1fff_tmp5, byte_9c);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(2), sequence_e1_9c_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_9c_adv, byte_range_a0_bf);
                  struct_blk_Hanunoo.cc = simd_or(struct_blk_Hanunoo.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Geometric_Shapes_Ext {
  Property_blk_Geometric_Shapes_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Geometric_Shapes_Ext & struct_blk_Geometric_Shapes_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock byte_range_9e_9f, r10000_10ffff_tmp12;
		BitBlock sequence_f0_9f_byte_range_9e_9f, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp13, sequence_f0_9f_byte_range_9e_9f_sfx;




        struct_blk_Geometric_Shapes_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp7, basis_bits.bit_6);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_9f_byte_range_9e_9f = simd_and(r10000_10ffff_tmp12, byte_range_9e_9f);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_9e_9f, carryQ.get_carry_in(2), r10000_10ffff_tmp13));
            sequence_f0_9f_byte_range_9e_9f_sfx = simd_and(r10000_10ffff_tmp13, byte_range_80_bf);
            struct_blk_Geometric_Shapes_Ext.cc = simd_or(struct_blk_Geometric_Shapes_Ext.cc, sequence_f0_9f_byte_range_9e_9f_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Georgian {
  Property_blk_Georgian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Georgian & struct_blk_Georgian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_83, sequence_e1_83;
		BitBlock byte_range_80_bf, sequence_e1_83_adv, r1000_1fff_tmp9;




        struct_blk_Georgian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(2), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_blk_Georgian.cc = simd_or(struct_blk_Georgian.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(3), sequence_e1_83_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_83_adv, byte_range_80_bf);
                  struct_blk_Georgian.cc = simd_or(struct_blk_Georgian.cc, r1000_1fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Palmyrene {
  Property_blk_Palmyrene() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Palmyrene & struct_blk_Palmyrene) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_a1;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_a1, sequence_f0_90_adv;
		BitBlock byte_range_a0_bf, sequence_f0_90_a1_adv, r10000_10ffff_tmp13;




        struct_blk_Palmyrene.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            byte_a1 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp11);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp12));
            sequence_f0_90_a1 = simd_and(r10000_10ffff_tmp12, byte_a1);
            sequence_f0_90_adv = r10000_10ffff_tmp12;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(2), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a1_adv, byte_range_a0_bf);
            struct_blk_Palmyrene.cc = simd_or(struct_blk_Palmyrene.cc, r10000_10ffff_tmp13);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_North_Arabian {
  Property_blk_Old_North_Arabian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_North_Arabian & struct_blk_Old_North_Arabian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_aa, r10000_10ffff_tmp13, sequence_f0_90_aa;
		BitBlock sequence_f0_90_adv, byte_range_80_9f, sequence_f0_90_aa_adv;
		BitBlock r10000_10ffff_tmp14;




        struct_blk_Old_North_Arabian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_aa = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_aa = simd_and(r10000_10ffff_tmp13, byte_aa);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(2), sequence_f0_90_aa_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_aa_adv, byte_range_80_9f);
            struct_blk_Old_North_Arabian.cc = simd_or(struct_blk_Old_North_Arabian.cc, r10000_10ffff_tmp14);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Letterlike_Symbols {
  Property_blk_Letterlike_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Letterlike_Symbols & struct_blk_Letterlike_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84;
		BitBlock r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv, byte_range_80_bf;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, byte_85, sequence_e2_85, byte_range_80_8f;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp8;




        struct_blk_Letterlike_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(2), sequence_e2_84_adv));
                  r2000_2fff_tmp4 = simd_and(sequence_e2_84_adv, byte_range_80_bf);
                  struct_blk_Letterlike_Symbols.cc = simd_or(struct_blk_Letterlike_Symbols.cc, r2000_2fff_tmp4);
                  r2000_2fff_tmp5 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp6);
                  byte_85 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  byte_range_80_8f = r2000_2fff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(3), sequence_e2_85_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_85_adv, byte_range_80_8f);
                  struct_blk_Letterlike_Symbols.cc = simd_or(struct_blk_Letterlike_Symbols.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Osmanya {
  Property_blk_Osmanya() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Osmanya & struct_blk_Osmanya) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_92, r10000_10ffff_tmp10, sequence_f0_90_92;
		BitBlock sequence_f0_90_adv, byte_range_80_af, sequence_f0_90_92_adv;
		BitBlock r10000_10ffff_tmp11;




        struct_blk_Osmanya.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp10));
            sequence_f0_90_92 = simd_and(r10000_10ffff_tmp10, byte_92);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            byte_range_80_af = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(2), sequence_f0_90_92_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_92_adv, byte_range_80_af);
            struct_blk_Osmanya.cc = simd_or(struct_blk_Osmanya.cc, r10000_10ffff_tmp11);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tags {
  Property_blk_Tags() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tags & struct_blk_Tags) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f3;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_a0, r10000_10ffff_tmp9;
		BitBlock sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_range_80_81, r10000_10ffff_tmp13;
		BitBlock sequence_f3_a0_byte_range_80_81, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f3_a0_byte_range_80_81_sfx;




        struct_blk_Tags.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            byte_a0 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp9, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f3_a0_byte_range_80_81 = simd_and(r10000_10ffff_tmp13, byte_range_80_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_80_81, carryQ.get_carry_in(2), r10000_10ffff_tmp14));
            sequence_f3_a0_byte_range_80_81_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_blk_Tags.cc = simd_or(struct_blk_Tags.cc, sequence_f3_a0_byte_range_80_81_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Ethiopic {
  Property_blk_Ethiopic() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ethiopic & struct_blk_Ethiopic) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_range_88_8d, r1000_1fff_tmp5;
		BitBlock byte_e1_byte_range_88_8d, byte_range_80_bf, r1000_1fff_tmp6;
		BitBlock byte_e1_byte_range_88_8d_sfx;




        struct_blk_Ethiopic.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_88_8d = simd_andc(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  byte_e1_byte_range_88_8d = simd_and(r1000_1fff_tmp5, byte_range_88_8d);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_88_8d, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  byte_e1_byte_range_88_8d_sfx = simd_and(r1000_1fff_tmp6, byte_range_80_bf);
                  struct_blk_Ethiopic.cc = simd_or(struct_blk_Ethiopic.cc, byte_e1_byte_range_88_8d_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Old_Persian {
  Property_blk_Old_Persian() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Old_Persian & struct_blk_Old_Persian) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_8e, r10000_10ffff_tmp13, sequence_f0_90_8e;
		BitBlock sequence_f0_90_adv, byte_range_a0_bf, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_8f, sequence_f0_90_8f, byte_range_80_9f, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp17;




        struct_blk_Old_Persian.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8e = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_8e = simd_and(r10000_10ffff_tmp13, byte_8e);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(2), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_8e_adv, byte_range_a0_bf);
            struct_blk_Old_Persian.cc = simd_or(struct_blk_Old_Persian.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            byte_8f = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp16);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(3), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_90_8f_adv, byte_range_80_9f);
            struct_blk_Old_Persian.cc = simd_or(struct_blk_Old_Persian.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Phonetic_Ext {
  Property_blk_Phonetic_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Phonetic_Ext & struct_blk_Phonetic_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock byte_range_b4_b5, r1000_1fff_tmp4, byte_e1_byte_range_b4_b5;
		BitBlock byte_range_80_bf, r1000_1fff_tmp5, byte_e1_byte_range_b4_b5_sfx;




        struct_blk_Phonetic_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp4));
                  byte_e1_byte_range_b4_b5 = simd_and(r1000_1fff_tmp4, byte_range_b4_b5);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b4_b5, carryQ.get_carry_in(2), r1000_1fff_tmp5));
                  byte_e1_byte_range_b4_b5_sfx = simd_and(r1000_1fff_tmp5, byte_range_80_bf);
                  struct_blk_Phonetic_Ext.cc = simd_or(struct_blk_Phonetic_Ext.cc, byte_e1_byte_range_b4_b5_sfx);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sup_PUA_A {
  Property_blk_Sup_PUA_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sup_PUA_A & struct_blk_Sup_PUA_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f3;
		BitBlock r10000_10ffff_tmp4, byte_range_b0_bf, r10000_10ffff_tmp5;
		BitBlock byte_f3_byte_range_b0_bf, byte_range_80_bf, r10000_10ffff_tmp6;
		BitBlock byte_f3_byte_range_b0_bf_sfx, r10000_10ffff_tmp7;
		BitBlock byte_f3_byte_range_b0_bf_sfx_sfx;




        struct_blk_Sup_PUA_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(0), r10000_10ffff_tmp5));
            byte_f3_byte_range_b0_bf = simd_and(r10000_10ffff_tmp5, byte_range_b0_bf);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_bf, carryQ.get_carry_in(1), r10000_10ffff_tmp6));
            byte_f3_byte_range_b0_bf_sfx = simd_and(r10000_10ffff_tmp6, byte_range_80_bf);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_bf_sfx, carryQ.get_carry_in(2), r10000_10ffff_tmp7));
            byte_f3_byte_range_b0_bf_sfx_sfx = simd_and(r10000_10ffff_tmp7, byte_range_80_bf);
            struct_blk_Sup_PUA_A.cc = simd_or(struct_blk_Sup_PUA_A.cc, byte_f3_byte_range_b0_bf_sfx_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Meetei_Mayek_Ext {
  Property_blk_Meetei_Mayek_Ext() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Meetei_Mayek_Ext & struct_blk_Meetei_Mayek_Ext) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ab, ra000_ffff_tmp8;
		BitBlock sequence_ea_ab, byte_ea_adv, byte_range_a0_bf, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp9;




        struct_blk_Meetei_Mayek_Ext.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ab = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp8));
              sequence_ea_ab = simd_and(ra000_ffff_tmp8, byte_ab);
              byte_ea_adv = ra000_ffff_tmp8;
              byte_range_a0_bf = simd_and(ra000_ffff_tmp4, basis_bits.bit_2);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(1), sequence_ea_ab_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_ab_adv, byte_range_a0_bf);
              struct_blk_Meetei_Mayek_Ext.cc = simd_or(struct_blk_Meetei_Mayek_Ext.cc, ra000_ffff_tmp9);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Ancient_Greek_Numbers {
  Property_blk_Ancient_Greek_Numbers() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Ancient_Greek_Numbers & struct_blk_Ancient_Greek_Numbers) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_85, r10000_10ffff_tmp13, sequence_f0_90_85;
		BitBlock sequence_f0_90_adv, byte_range_80_bf, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_86, sequence_f0_90_86;
		BitBlock byte_range_80_8f, sequence_f0_90_86_adv, r10000_10ffff_tmp19;




        struct_blk_Ancient_Greek_Numbers.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_90_85 = simd_and(r10000_10ffff_tmp13, byte_85);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(2), sequence_f0_90_85_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_85_adv, byte_range_80_bf);
            struct_blk_Ancient_Greek_Numbers.cc = simd_or(struct_blk_Ancient_Greek_Numbers.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp17);
            byte_86 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp18);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            byte_range_80_8f = r10000_10ffff_tmp16;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(3), sequence_f0_90_86_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_86_adv, byte_range_80_8f);
            struct_blk_Ancient_Greek_Numbers.cc = simd_or(struct_blk_Ancient_Greek_Numbers.cc, r10000_10ffff_tmp19);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Domino {
  Property_blk_Domino() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Domino & struct_blk_Domino) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, byte_80, r10000_10ffff_tmp13, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, byte_range_b0_bf, sequence_f0_9f_80_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock byte_81, sequence_f0_9f_81, byte_range_80_bf, sequence_f0_9f_81_adv;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, byte_82, sequence_f0_9f_82;
		BitBlock byte_range_80_9f, sequence_f0_9f_82_adv, r10000_10ffff_tmp22;




        struct_blk_Domino.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            byte_80 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp3);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp13));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp13, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp13;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(2), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9f_80_adv, byte_range_b0_bf);
            struct_blk_Domino.cc = simd_or(struct_blk_Domino.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp16);
            sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(3), sequence_f0_9f_81_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
            struct_blk_Domino.cc = simd_or(struct_blk_Domino.cc, r10000_10ffff_tmp17);
            r10000_10ffff_tmp18 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp19 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp11);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp21);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(4), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9f_82_adv, byte_range_80_9f);
            struct_blk_Domino.cc = simd_or(struct_blk_Domino.cc, r10000_10ffff_tmp22);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_blk_Half_Marks {
  Property_blk_Half_Marks() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Half_Marks & struct_blk_Half_Marks) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_b8, ra000_ffff_tmp10, sequence_ef_b8, byte_ef_adv;
		BitBlock byte_range_a0_af, sequence_ef_b8_adv, ra000_ffff_tmp11;




        struct_blk_Half_Marks.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b8 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp9);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp10));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp10, byte_b8);
              byte_ef_adv = ra000_ffff_tmp10;
              byte_range_a0_af = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(1), sequence_ef_b8_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_b8_adv, byte_range_a0_af);
              struct_blk_Half_Marks.cc = simd_or(struct_blk_Half_Marks.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Vai {
  Property_blk_Vai() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Vai & struct_blk_Vai) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, byte_range_94_98, ra000_ffff_tmp11;
		BitBlock byte_ea_byte_range_94_98, byte_range_80_bf, ra000_ffff_tmp12;
		BitBlock byte_ea_byte_range_94_98_sfx;




        struct_blk_Vai.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 2))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_5, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_not(ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp9), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_94_98 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp10);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp11));
              byte_ea_byte_range_94_98 = simd_and(ra000_ffff_tmp11, byte_range_94_98);
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_94_98, carryQ.get_carry_in(1), ra000_ffff_tmp12));
              byte_ea_byte_range_94_98_sfx = simd_and(ra000_ffff_tmp12, byte_range_80_bf);
              struct_blk_Vai.cc = simd_or(struct_blk_Vai.cc, byte_ea_byte_range_94_98_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Hebrew {
  Property_blk_Hebrew() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Hebrew & struct_blk_Hebrew) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, r400_5ff_tmp3;
		BitBlock byte_d6, r400_5ff_tmp4, r400_5ff_tmp5, byte_range_90_bf;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9, byte_d7;
		BitBlock r400_5ff_tmp10, byte_d6_adv, r590_5ff_tmp1, byte_range_80_bf;
		BitBlock byte_d7_adv, r590_5ff_tmp2;




        struct_blk_Hebrew.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 2))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r400_5ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_90_bf);
              r400_5ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp1, r400_5ff_tmp8);
              byte_d7 = simd_and(r80_7ff_tmp2, r400_5ff_tmp9);
              r400_5ff_tmp10 = simd_or(r400_5ff_tmp7, byte_d7);
              if ((bitblock::any(r400_5ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_d6_adv = r400_5ff_tmp6;
                r590_5ff_tmp1 = simd_and(byte_d6_adv, byte_range_90_bf);
                struct_blk_Hebrew.cc = simd_or(struct_blk_Hebrew.cc, r590_5ff_tmp1);
                byte_range_80_bf = r400_5ff_tmp4;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(1), byte_d7_adv));
                r590_5ff_tmp2 = simd_and(byte_d7_adv, byte_range_80_bf);
                struct_blk_Hebrew.cc = simd_or(struct_blk_Hebrew.cc, r590_5ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 2);
        }
        carryQ.CarryQ_Adjust(2);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<2, 0> carryQ;
  };

  struct Property_blk_Playing_Cards {
  Property_blk_Playing_Cards() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Playing_Cards & struct_blk_Playing_Cards) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_82, r10000_10ffff_tmp15, sequence_f0_9f_82, sequence_f0_9f_adv;
		BitBlock byte_range_a0_bf, sequence_f0_9f_82_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, byte_83, sequence_f0_9f_83, byte_range_80_bf;
		BitBlock sequence_f0_9f_83_adv, r10000_10ffff_tmp18;




        struct_blk_Playing_Cards.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(1), r10000_10ffff_tmp15));
            sequence_f0_9f_82 = simd_and(r10000_10ffff_tmp15, byte_82);
            sequence_f0_9f_adv = r10000_10ffff_tmp15;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(2), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9f_82_adv, byte_range_a0_bf);
            struct_blk_Playing_Cards.cc = simd_or(struct_blk_Playing_Cards.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(3), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_9f_83_adv, byte_range_80_bf);
            struct_blk_Playing_Cards.cc = simd_or(struct_blk_Playing_Cards.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_Kanbun {
  Property_blk_Kanbun() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Kanbun & struct_blk_Kanbun) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, byte_86;
		BitBlock r3000_4dff_tmp5, sequence_e3_86, byte_e3_adv, r3000_4dff_tmp6;
		BitBlock byte_range_90_9f, sequence_e3_86_adv, r3000_4dff_tmp7;




        struct_blk_Kanbun.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp4 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp3);
                  byte_86 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp5));
                  sequence_e3_86 = simd_and(r3000_4dff_tmp5, byte_86);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  byte_range_90_9f = simd_and(r800_ffff_tmp5, r3000_4dff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(2), sequence_e3_86_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_86_adv, byte_range_90_9f);
                  struct_blk_Kanbun.cc = simd_or(struct_blk_Kanbun.cc, r3000_4dff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Tai_Viet {
  Property_blk_Tai_Viet() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Tai_Viet & struct_blk_Tai_Viet) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_aa;
		BitBlock ra000_ffff_tmp6, sequence_ea_aa, byte_ea_adv, byte_range_80_bf;
		BitBlock sequence_ea_aa_adv, ra000_ffff_tmp7, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, byte_ab, sequence_ea_ab, byte_range_80_9f;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp11;




        struct_blk_Tai_Viet.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp4, r80_10ffff_tmp1);
              byte_aa = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(0), ra000_ffff_tmp6));
              sequence_ea_aa = simd_and(ra000_ffff_tmp6, byte_aa);
              byte_ea_adv = ra000_ffff_tmp6;
              byte_range_80_bf = ra000_ffff_tmp4;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(1), sequence_ea_aa_adv));
              ra000_ffff_tmp7 = simd_and(sequence_ea_aa_adv, byte_range_80_bf);
              struct_blk_Tai_Viet.cc = simd_or(struct_blk_Tai_Viet.cc, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp9);
              byte_ab = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp10);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(2), sequence_ea_ab_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ea_ab_adv, byte_range_80_9f);
              struct_blk_Tai_Viet.cc = simd_or(struct_blk_Tai_Viet.cc, ra000_ffff_tmp11);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_PUA {
  Property_blk_PUA() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_PUA & struct_blk_PUA) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ee, byte_range_80_bf, ra000_ffff_tmp4;
		BitBlock byte_ee_byte_range_80_bf, ra000_ffff_tmp5;
		BitBlock byte_ee_byte_range_80_bf_sfx, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_ef, ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock byte_range_80_a3, ra000_ffff_tmp11, byte_ef_byte_range_80_a3;
		BitBlock ra000_ffff_tmp12, byte_ef_byte_range_80_a3_sfx;




        struct_blk_PUA.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 4))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ee = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(0), ra000_ffff_tmp4));
              byte_ee_byte_range_80_bf = simd_and(ra000_ffff_tmp4, byte_range_80_bf);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(1), ra000_ffff_tmp5));
              byte_ee_byte_range_80_bf_sfx = simd_and(ra000_ffff_tmp5, byte_range_80_bf);
              struct_blk_PUA.cc = simd_or(struct_blk_PUA.cc, byte_ee_byte_range_80_bf_sfx);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_3, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_2, ra000_ffff_tmp9);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp10);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(2), ra000_ffff_tmp11));
              byte_ef_byte_range_80_a3 = simd_and(ra000_ffff_tmp11, byte_range_80_a3);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(3), ra000_ffff_tmp12));
              byte_ef_byte_range_80_a3_sfx = simd_and(ra000_ffff_tmp12, byte_range_80_bf);
              struct_blk_PUA.cc = simd_or(struct_blk_PUA.cc, byte_ef_byte_range_80_a3_sfx);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_blk_CJK_Symbols {
  Property_blk_CJK_Symbols() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_CJK_Symbols & struct_blk_CJK_Symbols) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_80, r3000_4dff_tmp4;
		BitBlock sequence_e3_80, byte_e3_adv, byte_range_80_bf, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp5;




        struct_blk_CJK_Symbols.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(2), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_range_80_bf);
                  struct_blk_CJK_Symbols.cc = simd_or(struct_blk_CJK_Symbols.cc, r3000_4dff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Misc_Math_Symbols_A {
  Property_blk_Misc_Math_Symbols_A() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Misc_Math_Symbols_A & struct_blk_Misc_Math_Symbols_A) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_9f;
		BitBlock r2000_2fff_tmp6, sequence_e2_9f, byte_e2_adv, r2000_2fff_tmp7;
		BitBlock byte_range_80_af, sequence_e2_9f_adv, r2000_2fff_tmp8;




        struct_blk_Misc_Math_Symbols_A.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_9f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  sequence_e2_9f = simd_and(r2000_2fff_tmp6, byte_9f);
                  byte_e2_adv = r2000_2fff_tmp6;
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_80_af = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(2), sequence_e2_9f_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_9f_adv, byte_range_80_af);
                  struct_blk_Misc_Math_Symbols_A.cc = simd_or(struct_blk_Misc_Math_Symbols_A.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sundanese {
  Property_blk_Sundanese() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sundanese & struct_blk_Sundanese) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_ae, r1000_1fff_tmp5, sequence_e1_ae;
		BitBlock byte_e1_adv, byte_range_80_bf, sequence_e1_ae_adv, r1000_1fff_tmp6;




        struct_blk_Sundanese.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  byte_ae = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp5));
                  sequence_e1_ae = simd_and(r1000_1fff_tmp5, byte_ae);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(2), sequence_e1_ae_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_ae_adv, byte_range_80_bf);
                  struct_blk_Sundanese.cc = simd_or(struct_blk_Sundanese.cc, r1000_1fff_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_Sora_Sompeng {
  Property_blk_Sora_Sompeng() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_Sora_Sompeng & struct_blk_Sora_Sompeng) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_83;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_83, sequence_f0_91_adv;
		BitBlock byte_range_90_bf, sequence_f0_91_83_adv, r10000_10ffff_tmp15;




        struct_blk_Sora_Sompeng.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(0, 3))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(1), r10000_10ffff_tmp14));
            sequence_f0_91_83 = simd_and(r10000_10ffff_tmp14, byte_83);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_90_bf = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(2), sequence_f0_91_83_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_83_adv, byte_range_90_bf);
            struct_blk_Sora_Sompeng.cc = simd_or(struct_blk_Sora_Sompeng.cc, r10000_10ffff_tmp15);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_blk_ASCII {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_blk_ASCII & struct_blk_ASCII) {
		BitBlock byte_range_0_7f;




        struct_blk_ASCII.cc = simd<1>::constant<0>();
        byte_range_0_7f = simd_not(basis_bits.bit_0);
        struct_blk_ASCII.cc = simd_or(struct_blk_ASCII.cc, byte_range_0_7f);
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };





Property_blk_Aegean_Numbers fblk_Aegean_Numbers;

extern "C" {
    BitBlock __get_blk_Aegean_Numbers (Basis_bits & basis_bits) {
        Struct_blk_Aegean_Numbers output;
        fblk_Aegean_Numbers . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Alchemical fblk_Alchemical;

extern "C" {
    BitBlock __get_blk_Alchemical (Basis_bits & basis_bits) {
        Struct_blk_Alchemical output;
        fblk_Alchemical . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Alphabetic_PF fblk_Alphabetic_PF;

extern "C" {
    BitBlock __get_blk_Alphabetic_PF (Basis_bits & basis_bits) {
        Struct_blk_Alphabetic_PF output;
        fblk_Alphabetic_PF . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ancient_Greek_Music fblk_Ancient_Greek_Music;

extern "C" {
    BitBlock __get_blk_Ancient_Greek_Music (Basis_bits & basis_bits) {
        Struct_blk_Ancient_Greek_Music output;
        fblk_Ancient_Greek_Music . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ancient_Greek_Numbers fblk_Ancient_Greek_Numbers;

extern "C" {
    BitBlock __get_blk_Ancient_Greek_Numbers (Basis_bits & basis_bits) {
        Struct_blk_Ancient_Greek_Numbers output;
        fblk_Ancient_Greek_Numbers . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ancient_Symbols fblk_Ancient_Symbols;

extern "C" {
    BitBlock __get_blk_Ancient_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Ancient_Symbols output;
        fblk_Ancient_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic fblk_Arabic;

extern "C" {
    BitBlock __get_blk_Arabic (Basis_bits & basis_bits) {
        Struct_blk_Arabic output;
        fblk_Arabic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic_Ext_A fblk_Arabic_Ext_A;

extern "C" {
    BitBlock __get_blk_Arabic_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Arabic_Ext_A output;
        fblk_Arabic_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic_Math fblk_Arabic_Math;

extern "C" {
    BitBlock __get_blk_Arabic_Math (Basis_bits & basis_bits) {
        Struct_blk_Arabic_Math output;
        fblk_Arabic_Math . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic_PF_A fblk_Arabic_PF_A;

extern "C" {
    BitBlock __get_blk_Arabic_PF_A (Basis_bits & basis_bits) {
        Struct_blk_Arabic_PF_A output;
        fblk_Arabic_PF_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic_PF_B fblk_Arabic_PF_B;

extern "C" {
    BitBlock __get_blk_Arabic_PF_B (Basis_bits & basis_bits) {
        Struct_blk_Arabic_PF_B output;
        fblk_Arabic_PF_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arabic_Sup fblk_Arabic_Sup;

extern "C" {
    BitBlock __get_blk_Arabic_Sup (Basis_bits & basis_bits) {
        Struct_blk_Arabic_Sup output;
        fblk_Arabic_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Armenian fblk_Armenian;

extern "C" {
    BitBlock __get_blk_Armenian (Basis_bits & basis_bits) {
        Struct_blk_Armenian output;
        fblk_Armenian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Arrows fblk_Arrows;

extern "C" {
    BitBlock __get_blk_Arrows (Basis_bits & basis_bits) {
        Struct_blk_Arrows output;
        fblk_Arrows . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_ASCII fblk_ASCII;

extern "C" {
    BitBlock __get_blk_ASCII (Basis_bits & basis_bits) {
        Struct_blk_ASCII output;
        fblk_ASCII . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Avestan fblk_Avestan;

extern "C" {
    BitBlock __get_blk_Avestan (Basis_bits & basis_bits) {
        Struct_blk_Avestan output;
        fblk_Avestan . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Balinese fblk_Balinese;

extern "C" {
    BitBlock __get_blk_Balinese (Basis_bits & basis_bits) {
        Struct_blk_Balinese output;
        fblk_Balinese . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bamum fblk_Bamum;

extern "C" {
    BitBlock __get_blk_Bamum (Basis_bits & basis_bits) {
        Struct_blk_Bamum output;
        fblk_Bamum . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bamum_Sup fblk_Bamum_Sup;

extern "C" {
    BitBlock __get_blk_Bamum_Sup (Basis_bits & basis_bits) {
        Struct_blk_Bamum_Sup output;
        fblk_Bamum_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bassa_Vah fblk_Bassa_Vah;

extern "C" {
    BitBlock __get_blk_Bassa_Vah (Basis_bits & basis_bits) {
        Struct_blk_Bassa_Vah output;
        fblk_Bassa_Vah . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Batak fblk_Batak;

extern "C" {
    BitBlock __get_blk_Batak (Basis_bits & basis_bits) {
        Struct_blk_Batak output;
        fblk_Batak . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bengali fblk_Bengali;

extern "C" {
    BitBlock __get_blk_Bengali (Basis_bits & basis_bits) {
        Struct_blk_Bengali output;
        fblk_Bengali . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Block_Elements fblk_Block_Elements;

extern "C" {
    BitBlock __get_blk_Block_Elements (Basis_bits & basis_bits) {
        Struct_blk_Block_Elements output;
        fblk_Block_Elements . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bopomofo fblk_Bopomofo;

extern "C" {
    BitBlock __get_blk_Bopomofo (Basis_bits & basis_bits) {
        Struct_blk_Bopomofo output;
        fblk_Bopomofo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Bopomofo_Ext fblk_Bopomofo_Ext;

extern "C" {
    BitBlock __get_blk_Bopomofo_Ext (Basis_bits & basis_bits) {
        Struct_blk_Bopomofo_Ext output;
        fblk_Bopomofo_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Box_Drawing fblk_Box_Drawing;

extern "C" {
    BitBlock __get_blk_Box_Drawing (Basis_bits & basis_bits) {
        Struct_blk_Box_Drawing output;
        fblk_Box_Drawing . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Brahmi fblk_Brahmi;

extern "C" {
    BitBlock __get_blk_Brahmi (Basis_bits & basis_bits) {
        Struct_blk_Brahmi output;
        fblk_Brahmi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Braille fblk_Braille;

extern "C" {
    BitBlock __get_blk_Braille (Basis_bits & basis_bits) {
        Struct_blk_Braille output;
        fblk_Braille . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Buginese fblk_Buginese;

extern "C" {
    BitBlock __get_blk_Buginese (Basis_bits & basis_bits) {
        Struct_blk_Buginese output;
        fblk_Buginese . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Buhid fblk_Buhid;

extern "C" {
    BitBlock __get_blk_Buhid (Basis_bits & basis_bits) {
        Struct_blk_Buhid output;
        fblk_Buhid . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Byzantine_Music fblk_Byzantine_Music;

extern "C" {
    BitBlock __get_blk_Byzantine_Music (Basis_bits & basis_bits) {
        Struct_blk_Byzantine_Music output;
        fblk_Byzantine_Music . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Carian fblk_Carian;

extern "C" {
    BitBlock __get_blk_Carian (Basis_bits & basis_bits) {
        Struct_blk_Carian output;
        fblk_Carian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Caucasian_Albanian fblk_Caucasian_Albanian;

extern "C" {
    BitBlock __get_blk_Caucasian_Albanian (Basis_bits & basis_bits) {
        Struct_blk_Caucasian_Albanian output;
        fblk_Caucasian_Albanian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Chakma fblk_Chakma;

extern "C" {
    BitBlock __get_blk_Chakma (Basis_bits & basis_bits) {
        Struct_blk_Chakma output;
        fblk_Chakma . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cham fblk_Cham;

extern "C" {
    BitBlock __get_blk_Cham (Basis_bits & basis_bits) {
        Struct_blk_Cham output;
        fblk_Cham . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cherokee fblk_Cherokee;

extern "C" {
    BitBlock __get_blk_Cherokee (Basis_bits & basis_bits) {
        Struct_blk_Cherokee output;
        fblk_Cherokee . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK fblk_CJK;

extern "C" {
    BitBlock __get_blk_CJK (Basis_bits & basis_bits) {
        Struct_blk_CJK output;
        fblk_CJK . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Compat fblk_CJK_Compat;

extern "C" {
    BitBlock __get_blk_CJK_Compat (Basis_bits & basis_bits) {
        Struct_blk_CJK_Compat output;
        fblk_CJK_Compat . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Compat_Forms fblk_CJK_Compat_Forms;

extern "C" {
    BitBlock __get_blk_CJK_Compat_Forms (Basis_bits & basis_bits) {
        Struct_blk_CJK_Compat_Forms output;
        fblk_CJK_Compat_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Compat_Ideographs fblk_CJK_Compat_Ideographs;

extern "C" {
    BitBlock __get_blk_CJK_Compat_Ideographs (Basis_bits & basis_bits) {
        Struct_blk_CJK_Compat_Ideographs output;
        fblk_CJK_Compat_Ideographs . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Compat_Ideographs_Sup fblk_CJK_Compat_Ideographs_Sup;

extern "C" {
    BitBlock __get_blk_CJK_Compat_Ideographs_Sup (Basis_bits & basis_bits) {
        Struct_blk_CJK_Compat_Ideographs_Sup output;
        fblk_CJK_Compat_Ideographs_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Ext_A fblk_CJK_Ext_A;

extern "C" {
    BitBlock __get_blk_CJK_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_CJK_Ext_A output;
        fblk_CJK_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Ext_B fblk_CJK_Ext_B;

extern "C" {
    BitBlock __get_blk_CJK_Ext_B (Basis_bits & basis_bits) {
        Struct_blk_CJK_Ext_B output;
        fblk_CJK_Ext_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Ext_C fblk_CJK_Ext_C;

extern "C" {
    BitBlock __get_blk_CJK_Ext_C (Basis_bits & basis_bits) {
        Struct_blk_CJK_Ext_C output;
        fblk_CJK_Ext_C . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Ext_D fblk_CJK_Ext_D;

extern "C" {
    BitBlock __get_blk_CJK_Ext_D (Basis_bits & basis_bits) {
        Struct_blk_CJK_Ext_D output;
        fblk_CJK_Ext_D . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Radicals_Sup fblk_CJK_Radicals_Sup;

extern "C" {
    BitBlock __get_blk_CJK_Radicals_Sup (Basis_bits & basis_bits) {
        Struct_blk_CJK_Radicals_Sup output;
        fblk_CJK_Radicals_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Strokes fblk_CJK_Strokes;

extern "C" {
    BitBlock __get_blk_CJK_Strokes (Basis_bits & basis_bits) {
        Struct_blk_CJK_Strokes output;
        fblk_CJK_Strokes . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_CJK_Symbols fblk_CJK_Symbols;

extern "C" {
    BitBlock __get_blk_CJK_Symbols (Basis_bits & basis_bits) {
        Struct_blk_CJK_Symbols output;
        fblk_CJK_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Compat_Jamo fblk_Compat_Jamo;

extern "C" {
    BitBlock __get_blk_Compat_Jamo (Basis_bits & basis_bits) {
        Struct_blk_Compat_Jamo output;
        fblk_Compat_Jamo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Control_Pictures fblk_Control_Pictures;

extern "C" {
    BitBlock __get_blk_Control_Pictures (Basis_bits & basis_bits) {
        Struct_blk_Control_Pictures output;
        fblk_Control_Pictures . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Coptic fblk_Coptic;

extern "C" {
    BitBlock __get_blk_Coptic (Basis_bits & basis_bits) {
        Struct_blk_Coptic output;
        fblk_Coptic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Coptic_Epact_Numbers fblk_Coptic_Epact_Numbers;

extern "C" {
    BitBlock __get_blk_Coptic_Epact_Numbers (Basis_bits & basis_bits) {
        Struct_blk_Coptic_Epact_Numbers output;
        fblk_Coptic_Epact_Numbers . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Counting_Rod fblk_Counting_Rod;

extern "C" {
    BitBlock __get_blk_Counting_Rod (Basis_bits & basis_bits) {
        Struct_blk_Counting_Rod output;
        fblk_Counting_Rod . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cuneiform fblk_Cuneiform;

extern "C" {
    BitBlock __get_blk_Cuneiform (Basis_bits & basis_bits) {
        Struct_blk_Cuneiform output;
        fblk_Cuneiform . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cuneiform_Numbers fblk_Cuneiform_Numbers;

extern "C" {
    BitBlock __get_blk_Cuneiform_Numbers (Basis_bits & basis_bits) {
        Struct_blk_Cuneiform_Numbers output;
        fblk_Cuneiform_Numbers . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Currency_Symbols fblk_Currency_Symbols;

extern "C" {
    BitBlock __get_blk_Currency_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Currency_Symbols output;
        fblk_Currency_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cypriot_Syllabary fblk_Cypriot_Syllabary;

extern "C" {
    BitBlock __get_blk_Cypriot_Syllabary (Basis_bits & basis_bits) {
        Struct_blk_Cypriot_Syllabary output;
        fblk_Cypriot_Syllabary . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cyrillic fblk_Cyrillic;

extern "C" {
    BitBlock __get_blk_Cyrillic (Basis_bits & basis_bits) {
        Struct_blk_Cyrillic output;
        fblk_Cyrillic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cyrillic_Ext_A fblk_Cyrillic_Ext_A;

extern "C" {
    BitBlock __get_blk_Cyrillic_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Cyrillic_Ext_A output;
        fblk_Cyrillic_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cyrillic_Ext_B fblk_Cyrillic_Ext_B;

extern "C" {
    BitBlock __get_blk_Cyrillic_Ext_B (Basis_bits & basis_bits) {
        Struct_blk_Cyrillic_Ext_B output;
        fblk_Cyrillic_Ext_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Cyrillic_Sup fblk_Cyrillic_Sup;

extern "C" {
    BitBlock __get_blk_Cyrillic_Sup (Basis_bits & basis_bits) {
        Struct_blk_Cyrillic_Sup output;
        fblk_Cyrillic_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Deseret fblk_Deseret;

extern "C" {
    BitBlock __get_blk_Deseret (Basis_bits & basis_bits) {
        Struct_blk_Deseret output;
        fblk_Deseret . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Devanagari fblk_Devanagari;

extern "C" {
    BitBlock __get_blk_Devanagari (Basis_bits & basis_bits) {
        Struct_blk_Devanagari output;
        fblk_Devanagari . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Devanagari_Ext fblk_Devanagari_Ext;

extern "C" {
    BitBlock __get_blk_Devanagari_Ext (Basis_bits & basis_bits) {
        Struct_blk_Devanagari_Ext output;
        fblk_Devanagari_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Diacriticals fblk_Diacriticals;

extern "C" {
    BitBlock __get_blk_Diacriticals (Basis_bits & basis_bits) {
        Struct_blk_Diacriticals output;
        fblk_Diacriticals . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Diacriticals_Ext fblk_Diacriticals_Ext;

extern "C" {
    BitBlock __get_blk_Diacriticals_Ext (Basis_bits & basis_bits) {
        Struct_blk_Diacriticals_Ext output;
        fblk_Diacriticals_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Diacriticals_For_Symbols fblk_Diacriticals_For_Symbols;

extern "C" {
    BitBlock __get_blk_Diacriticals_For_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Diacriticals_For_Symbols output;
        fblk_Diacriticals_For_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Diacriticals_Sup fblk_Diacriticals_Sup;

extern "C" {
    BitBlock __get_blk_Diacriticals_Sup (Basis_bits & basis_bits) {
        Struct_blk_Diacriticals_Sup output;
        fblk_Diacriticals_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Dingbats fblk_Dingbats;

extern "C" {
    BitBlock __get_blk_Dingbats (Basis_bits & basis_bits) {
        Struct_blk_Dingbats output;
        fblk_Dingbats . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Domino fblk_Domino;

extern "C" {
    BitBlock __get_blk_Domino (Basis_bits & basis_bits) {
        Struct_blk_Domino output;
        fblk_Domino . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Duployan fblk_Duployan;

extern "C" {
    BitBlock __get_blk_Duployan (Basis_bits & basis_bits) {
        Struct_blk_Duployan output;
        fblk_Duployan . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Egyptian_Hieroglyphs fblk_Egyptian_Hieroglyphs;

extern "C" {
    BitBlock __get_blk_Egyptian_Hieroglyphs (Basis_bits & basis_bits) {
        Struct_blk_Egyptian_Hieroglyphs output;
        fblk_Egyptian_Hieroglyphs . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Elbasan fblk_Elbasan;

extern "C" {
    BitBlock __get_blk_Elbasan (Basis_bits & basis_bits) {
        Struct_blk_Elbasan output;
        fblk_Elbasan . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Emoticons fblk_Emoticons;

extern "C" {
    BitBlock __get_blk_Emoticons (Basis_bits & basis_bits) {
        Struct_blk_Emoticons output;
        fblk_Emoticons . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Enclosed_Alphanum fblk_Enclosed_Alphanum;

extern "C" {
    BitBlock __get_blk_Enclosed_Alphanum (Basis_bits & basis_bits) {
        Struct_blk_Enclosed_Alphanum output;
        fblk_Enclosed_Alphanum . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Enclosed_Alphanum_Sup fblk_Enclosed_Alphanum_Sup;

extern "C" {
    BitBlock __get_blk_Enclosed_Alphanum_Sup (Basis_bits & basis_bits) {
        Struct_blk_Enclosed_Alphanum_Sup output;
        fblk_Enclosed_Alphanum_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Enclosed_CJK fblk_Enclosed_CJK;

extern "C" {
    BitBlock __get_blk_Enclosed_CJK (Basis_bits & basis_bits) {
        Struct_blk_Enclosed_CJK output;
        fblk_Enclosed_CJK . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Enclosed_Ideographic_Sup fblk_Enclosed_Ideographic_Sup;

extern "C" {
    BitBlock __get_blk_Enclosed_Ideographic_Sup (Basis_bits & basis_bits) {
        Struct_blk_Enclosed_Ideographic_Sup output;
        fblk_Enclosed_Ideographic_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ethiopic fblk_Ethiopic;

extern "C" {
    BitBlock __get_blk_Ethiopic (Basis_bits & basis_bits) {
        Struct_blk_Ethiopic output;
        fblk_Ethiopic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ethiopic_Ext fblk_Ethiopic_Ext;

extern "C" {
    BitBlock __get_blk_Ethiopic_Ext (Basis_bits & basis_bits) {
        Struct_blk_Ethiopic_Ext output;
        fblk_Ethiopic_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ethiopic_Ext_A fblk_Ethiopic_Ext_A;

extern "C" {
    BitBlock __get_blk_Ethiopic_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Ethiopic_Ext_A output;
        fblk_Ethiopic_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ethiopic_Sup fblk_Ethiopic_Sup;

extern "C" {
    BitBlock __get_blk_Ethiopic_Sup (Basis_bits & basis_bits) {
        Struct_blk_Ethiopic_Sup output;
        fblk_Ethiopic_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Geometric_Shapes fblk_Geometric_Shapes;

extern "C" {
    BitBlock __get_blk_Geometric_Shapes (Basis_bits & basis_bits) {
        Struct_blk_Geometric_Shapes output;
        fblk_Geometric_Shapes . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Geometric_Shapes_Ext fblk_Geometric_Shapes_Ext;

extern "C" {
    BitBlock __get_blk_Geometric_Shapes_Ext (Basis_bits & basis_bits) {
        Struct_blk_Geometric_Shapes_Ext output;
        fblk_Geometric_Shapes_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Georgian fblk_Georgian;

extern "C" {
    BitBlock __get_blk_Georgian (Basis_bits & basis_bits) {
        Struct_blk_Georgian output;
        fblk_Georgian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Georgian_Sup fblk_Georgian_Sup;

extern "C" {
    BitBlock __get_blk_Georgian_Sup (Basis_bits & basis_bits) {
        Struct_blk_Georgian_Sup output;
        fblk_Georgian_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Glagolitic fblk_Glagolitic;

extern "C" {
    BitBlock __get_blk_Glagolitic (Basis_bits & basis_bits) {
        Struct_blk_Glagolitic output;
        fblk_Glagolitic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Gothic fblk_Gothic;

extern "C" {
    BitBlock __get_blk_Gothic (Basis_bits & basis_bits) {
        Struct_blk_Gothic output;
        fblk_Gothic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Grantha fblk_Grantha;

extern "C" {
    BitBlock __get_blk_Grantha (Basis_bits & basis_bits) {
        Struct_blk_Grantha output;
        fblk_Grantha . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Greek fblk_Greek;

extern "C" {
    BitBlock __get_blk_Greek (Basis_bits & basis_bits) {
        Struct_blk_Greek output;
        fblk_Greek . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Greek_Ext fblk_Greek_Ext;

extern "C" {
    BitBlock __get_blk_Greek_Ext (Basis_bits & basis_bits) {
        Struct_blk_Greek_Ext output;
        fblk_Greek_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Gujarati fblk_Gujarati;

extern "C" {
    BitBlock __get_blk_Gujarati (Basis_bits & basis_bits) {
        Struct_blk_Gujarati output;
        fblk_Gujarati . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Gurmukhi fblk_Gurmukhi;

extern "C" {
    BitBlock __get_blk_Gurmukhi (Basis_bits & basis_bits) {
        Struct_blk_Gurmukhi output;
        fblk_Gurmukhi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Half_And_Full_Forms fblk_Half_And_Full_Forms;

extern "C" {
    BitBlock __get_blk_Half_And_Full_Forms (Basis_bits & basis_bits) {
        Struct_blk_Half_And_Full_Forms output;
        fblk_Half_And_Full_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Half_Marks fblk_Half_Marks;

extern "C" {
    BitBlock __get_blk_Half_Marks (Basis_bits & basis_bits) {
        Struct_blk_Half_Marks output;
        fblk_Half_Marks . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Hangul fblk_Hangul;

extern "C" {
    BitBlock __get_blk_Hangul (Basis_bits & basis_bits) {
        Struct_blk_Hangul output;
        fblk_Hangul . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Hanunoo fblk_Hanunoo;

extern "C" {
    BitBlock __get_blk_Hanunoo (Basis_bits & basis_bits) {
        Struct_blk_Hanunoo output;
        fblk_Hanunoo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Hebrew fblk_Hebrew;

extern "C" {
    BitBlock __get_blk_Hebrew (Basis_bits & basis_bits) {
        Struct_blk_Hebrew output;
        fblk_Hebrew . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_High_PU_Surrogates fblk_High_PU_Surrogates;

extern "C" {
    BitBlock __get_blk_High_PU_Surrogates (Basis_bits & basis_bits) {
        Struct_blk_High_PU_Surrogates output;
        fblk_High_PU_Surrogates . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_High_Surrogates fblk_High_Surrogates;

extern "C" {
    BitBlock __get_blk_High_Surrogates (Basis_bits & basis_bits) {
        Struct_blk_High_Surrogates output;
        fblk_High_Surrogates . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Hiragana fblk_Hiragana;

extern "C" {
    BitBlock __get_blk_Hiragana (Basis_bits & basis_bits) {
        Struct_blk_Hiragana output;
        fblk_Hiragana . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_IDC fblk_IDC;

extern "C" {
    BitBlock __get_blk_IDC (Basis_bits & basis_bits) {
        Struct_blk_IDC output;
        fblk_IDC . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Imperial_Aramaic fblk_Imperial_Aramaic;

extern "C" {
    BitBlock __get_blk_Imperial_Aramaic (Basis_bits & basis_bits) {
        Struct_blk_Imperial_Aramaic output;
        fblk_Imperial_Aramaic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Indic_Number_Forms fblk_Indic_Number_Forms;

extern "C" {
    BitBlock __get_blk_Indic_Number_Forms (Basis_bits & basis_bits) {
        Struct_blk_Indic_Number_Forms output;
        fblk_Indic_Number_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Inscriptional_Pahlavi fblk_Inscriptional_Pahlavi;

extern "C" {
    BitBlock __get_blk_Inscriptional_Pahlavi (Basis_bits & basis_bits) {
        Struct_blk_Inscriptional_Pahlavi output;
        fblk_Inscriptional_Pahlavi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Inscriptional_Parthian fblk_Inscriptional_Parthian;

extern "C" {
    BitBlock __get_blk_Inscriptional_Parthian (Basis_bits & basis_bits) {
        Struct_blk_Inscriptional_Parthian output;
        fblk_Inscriptional_Parthian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_IPA_Ext fblk_IPA_Ext;

extern "C" {
    BitBlock __get_blk_IPA_Ext (Basis_bits & basis_bits) {
        Struct_blk_IPA_Ext output;
        fblk_IPA_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Jamo fblk_Jamo;

extern "C" {
    BitBlock __get_blk_Jamo (Basis_bits & basis_bits) {
        Struct_blk_Jamo output;
        fblk_Jamo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Jamo_Ext_A fblk_Jamo_Ext_A;

extern "C" {
    BitBlock __get_blk_Jamo_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Jamo_Ext_A output;
        fblk_Jamo_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Jamo_Ext_B fblk_Jamo_Ext_B;

extern "C" {
    BitBlock __get_blk_Jamo_Ext_B (Basis_bits & basis_bits) {
        Struct_blk_Jamo_Ext_B output;
        fblk_Jamo_Ext_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Javanese fblk_Javanese;

extern "C" {
    BitBlock __get_blk_Javanese (Basis_bits & basis_bits) {
        Struct_blk_Javanese output;
        fblk_Javanese . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kaithi fblk_Kaithi;

extern "C" {
    BitBlock __get_blk_Kaithi (Basis_bits & basis_bits) {
        Struct_blk_Kaithi output;
        fblk_Kaithi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kana_Sup fblk_Kana_Sup;

extern "C" {
    BitBlock __get_blk_Kana_Sup (Basis_bits & basis_bits) {
        Struct_blk_Kana_Sup output;
        fblk_Kana_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kanbun fblk_Kanbun;

extern "C" {
    BitBlock __get_blk_Kanbun (Basis_bits & basis_bits) {
        Struct_blk_Kanbun output;
        fblk_Kanbun . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kangxi fblk_Kangxi;

extern "C" {
    BitBlock __get_blk_Kangxi (Basis_bits & basis_bits) {
        Struct_blk_Kangxi output;
        fblk_Kangxi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kannada fblk_Kannada;

extern "C" {
    BitBlock __get_blk_Kannada (Basis_bits & basis_bits) {
        Struct_blk_Kannada output;
        fblk_Kannada . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Katakana fblk_Katakana;

extern "C" {
    BitBlock __get_blk_Katakana (Basis_bits & basis_bits) {
        Struct_blk_Katakana output;
        fblk_Katakana . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Katakana_Ext fblk_Katakana_Ext;

extern "C" {
    BitBlock __get_blk_Katakana_Ext (Basis_bits & basis_bits) {
        Struct_blk_Katakana_Ext output;
        fblk_Katakana_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kayah_Li fblk_Kayah_Li;

extern "C" {
    BitBlock __get_blk_Kayah_Li (Basis_bits & basis_bits) {
        Struct_blk_Kayah_Li output;
        fblk_Kayah_Li . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Kharoshthi fblk_Kharoshthi;

extern "C" {
    BitBlock __get_blk_Kharoshthi (Basis_bits & basis_bits) {
        Struct_blk_Kharoshthi output;
        fblk_Kharoshthi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Khmer fblk_Khmer;

extern "C" {
    BitBlock __get_blk_Khmer (Basis_bits & basis_bits) {
        Struct_blk_Khmer output;
        fblk_Khmer . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Khmer_Symbols fblk_Khmer_Symbols;

extern "C" {
    BitBlock __get_blk_Khmer_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Khmer_Symbols output;
        fblk_Khmer_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Khojki fblk_Khojki;

extern "C" {
    BitBlock __get_blk_Khojki (Basis_bits & basis_bits) {
        Struct_blk_Khojki output;
        fblk_Khojki . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Khudawadi fblk_Khudawadi;

extern "C" {
    BitBlock __get_blk_Khudawadi (Basis_bits & basis_bits) {
        Struct_blk_Khudawadi output;
        fblk_Khudawadi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Lao fblk_Lao;

extern "C" {
    BitBlock __get_blk_Lao (Basis_bits & basis_bits) {
        Struct_blk_Lao output;
        fblk_Lao . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_1_Sup fblk_Latin_1_Sup;

extern "C" {
    BitBlock __get_blk_Latin_1_Sup (Basis_bits & basis_bits) {
        Struct_blk_Latin_1_Sup output;
        fblk_Latin_1_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_A fblk_Latin_Ext_A;

extern "C" {
    BitBlock __get_blk_Latin_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_A output;
        fblk_Latin_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_Additional fblk_Latin_Ext_Additional;

extern "C" {
    BitBlock __get_blk_Latin_Ext_Additional (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_Additional output;
        fblk_Latin_Ext_Additional . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_B fblk_Latin_Ext_B;

extern "C" {
    BitBlock __get_blk_Latin_Ext_B (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_B output;
        fblk_Latin_Ext_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_C fblk_Latin_Ext_C;

extern "C" {
    BitBlock __get_blk_Latin_Ext_C (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_C output;
        fblk_Latin_Ext_C . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_D fblk_Latin_Ext_D;

extern "C" {
    BitBlock __get_blk_Latin_Ext_D (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_D output;
        fblk_Latin_Ext_D . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Latin_Ext_E fblk_Latin_Ext_E;

extern "C" {
    BitBlock __get_blk_Latin_Ext_E (Basis_bits & basis_bits) {
        Struct_blk_Latin_Ext_E output;
        fblk_Latin_Ext_E . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Lepcha fblk_Lepcha;

extern "C" {
    BitBlock __get_blk_Lepcha (Basis_bits & basis_bits) {
        Struct_blk_Lepcha output;
        fblk_Lepcha . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Letterlike_Symbols fblk_Letterlike_Symbols;

extern "C" {
    BitBlock __get_blk_Letterlike_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Letterlike_Symbols output;
        fblk_Letterlike_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Limbu fblk_Limbu;

extern "C" {
    BitBlock __get_blk_Limbu (Basis_bits & basis_bits) {
        Struct_blk_Limbu output;
        fblk_Limbu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Linear_A fblk_Linear_A;

extern "C" {
    BitBlock __get_blk_Linear_A (Basis_bits & basis_bits) {
        Struct_blk_Linear_A output;
        fblk_Linear_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Linear_B_Ideograms fblk_Linear_B_Ideograms;

extern "C" {
    BitBlock __get_blk_Linear_B_Ideograms (Basis_bits & basis_bits) {
        Struct_blk_Linear_B_Ideograms output;
        fblk_Linear_B_Ideograms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Linear_B_Syllabary fblk_Linear_B_Syllabary;

extern "C" {
    BitBlock __get_blk_Linear_B_Syllabary (Basis_bits & basis_bits) {
        Struct_blk_Linear_B_Syllabary output;
        fblk_Linear_B_Syllabary . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Lisu fblk_Lisu;

extern "C" {
    BitBlock __get_blk_Lisu (Basis_bits & basis_bits) {
        Struct_blk_Lisu output;
        fblk_Lisu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Low_Surrogates fblk_Low_Surrogates;

extern "C" {
    BitBlock __get_blk_Low_Surrogates (Basis_bits & basis_bits) {
        Struct_blk_Low_Surrogates output;
        fblk_Low_Surrogates . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Lycian fblk_Lycian;

extern "C" {
    BitBlock __get_blk_Lycian (Basis_bits & basis_bits) {
        Struct_blk_Lycian output;
        fblk_Lycian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Lydian fblk_Lydian;

extern "C" {
    BitBlock __get_blk_Lydian (Basis_bits & basis_bits) {
        Struct_blk_Lydian output;
        fblk_Lydian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mahajani fblk_Mahajani;

extern "C" {
    BitBlock __get_blk_Mahajani (Basis_bits & basis_bits) {
        Struct_blk_Mahajani output;
        fblk_Mahajani . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mahjong fblk_Mahjong;

extern "C" {
    BitBlock __get_blk_Mahjong (Basis_bits & basis_bits) {
        Struct_blk_Mahjong output;
        fblk_Mahjong . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Malayalam fblk_Malayalam;

extern "C" {
    BitBlock __get_blk_Malayalam (Basis_bits & basis_bits) {
        Struct_blk_Malayalam output;
        fblk_Malayalam . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mandaic fblk_Mandaic;

extern "C" {
    BitBlock __get_blk_Mandaic (Basis_bits & basis_bits) {
        Struct_blk_Mandaic output;
        fblk_Mandaic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Manichaean fblk_Manichaean;

extern "C" {
    BitBlock __get_blk_Manichaean (Basis_bits & basis_bits) {
        Struct_blk_Manichaean output;
        fblk_Manichaean . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Math_Alphanum fblk_Math_Alphanum;

extern "C" {
    BitBlock __get_blk_Math_Alphanum (Basis_bits & basis_bits) {
        Struct_blk_Math_Alphanum output;
        fblk_Math_Alphanum . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Math_Operators fblk_Math_Operators;

extern "C" {
    BitBlock __get_blk_Math_Operators (Basis_bits & basis_bits) {
        Struct_blk_Math_Operators output;
        fblk_Math_Operators . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Meetei_Mayek fblk_Meetei_Mayek;

extern "C" {
    BitBlock __get_blk_Meetei_Mayek (Basis_bits & basis_bits) {
        Struct_blk_Meetei_Mayek output;
        fblk_Meetei_Mayek . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Meetei_Mayek_Ext fblk_Meetei_Mayek_Ext;

extern "C" {
    BitBlock __get_blk_Meetei_Mayek_Ext (Basis_bits & basis_bits) {
        Struct_blk_Meetei_Mayek_Ext output;
        fblk_Meetei_Mayek_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mende_Kikakui fblk_Mende_Kikakui;

extern "C" {
    BitBlock __get_blk_Mende_Kikakui (Basis_bits & basis_bits) {
        Struct_blk_Mende_Kikakui output;
        fblk_Mende_Kikakui . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Meroitic_Cursive fblk_Meroitic_Cursive;

extern "C" {
    BitBlock __get_blk_Meroitic_Cursive (Basis_bits & basis_bits) {
        Struct_blk_Meroitic_Cursive output;
        fblk_Meroitic_Cursive . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Meroitic_Hieroglyphs fblk_Meroitic_Hieroglyphs;

extern "C" {
    BitBlock __get_blk_Meroitic_Hieroglyphs (Basis_bits & basis_bits) {
        Struct_blk_Meroitic_Hieroglyphs output;
        fblk_Meroitic_Hieroglyphs . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Miao fblk_Miao;

extern "C" {
    BitBlock __get_blk_Miao (Basis_bits & basis_bits) {
        Struct_blk_Miao output;
        fblk_Miao . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Arrows fblk_Misc_Arrows;

extern "C" {
    BitBlock __get_blk_Misc_Arrows (Basis_bits & basis_bits) {
        Struct_blk_Misc_Arrows output;
        fblk_Misc_Arrows . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Math_Symbols_A fblk_Misc_Math_Symbols_A;

extern "C" {
    BitBlock __get_blk_Misc_Math_Symbols_A (Basis_bits & basis_bits) {
        Struct_blk_Misc_Math_Symbols_A output;
        fblk_Misc_Math_Symbols_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Math_Symbols_B fblk_Misc_Math_Symbols_B;

extern "C" {
    BitBlock __get_blk_Misc_Math_Symbols_B (Basis_bits & basis_bits) {
        Struct_blk_Misc_Math_Symbols_B output;
        fblk_Misc_Math_Symbols_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Pictographs fblk_Misc_Pictographs;

extern "C" {
    BitBlock __get_blk_Misc_Pictographs (Basis_bits & basis_bits) {
        Struct_blk_Misc_Pictographs output;
        fblk_Misc_Pictographs . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Symbols fblk_Misc_Symbols;

extern "C" {
    BitBlock __get_blk_Misc_Symbols (Basis_bits & basis_bits) {
        Struct_blk_Misc_Symbols output;
        fblk_Misc_Symbols . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Misc_Technical fblk_Misc_Technical;

extern "C" {
    BitBlock __get_blk_Misc_Technical (Basis_bits & basis_bits) {
        Struct_blk_Misc_Technical output;
        fblk_Misc_Technical . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Modi fblk_Modi;

extern "C" {
    BitBlock __get_blk_Modi (Basis_bits & basis_bits) {
        Struct_blk_Modi output;
        fblk_Modi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Modifier_Letters fblk_Modifier_Letters;

extern "C" {
    BitBlock __get_blk_Modifier_Letters (Basis_bits & basis_bits) {
        Struct_blk_Modifier_Letters output;
        fblk_Modifier_Letters . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Modifier_Tone_Letters fblk_Modifier_Tone_Letters;

extern "C" {
    BitBlock __get_blk_Modifier_Tone_Letters (Basis_bits & basis_bits) {
        Struct_blk_Modifier_Tone_Letters output;
        fblk_Modifier_Tone_Letters . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mongolian fblk_Mongolian;

extern "C" {
    BitBlock __get_blk_Mongolian (Basis_bits & basis_bits) {
        Struct_blk_Mongolian output;
        fblk_Mongolian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Mro fblk_Mro;

extern "C" {
    BitBlock __get_blk_Mro (Basis_bits & basis_bits) {
        Struct_blk_Mro output;
        fblk_Mro . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Music fblk_Music;

extern "C" {
    BitBlock __get_blk_Music (Basis_bits & basis_bits) {
        Struct_blk_Music output;
        fblk_Music . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Myanmar fblk_Myanmar;

extern "C" {
    BitBlock __get_blk_Myanmar (Basis_bits & basis_bits) {
        Struct_blk_Myanmar output;
        fblk_Myanmar . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Myanmar_Ext_A fblk_Myanmar_Ext_A;

extern "C" {
    BitBlock __get_blk_Myanmar_Ext_A (Basis_bits & basis_bits) {
        Struct_blk_Myanmar_Ext_A output;
        fblk_Myanmar_Ext_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Myanmar_Ext_B fblk_Myanmar_Ext_B;

extern "C" {
    BitBlock __get_blk_Myanmar_Ext_B (Basis_bits & basis_bits) {
        Struct_blk_Myanmar_Ext_B output;
        fblk_Myanmar_Ext_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Nabataean fblk_Nabataean;

extern "C" {
    BitBlock __get_blk_Nabataean (Basis_bits & basis_bits) {
        Struct_blk_Nabataean output;
        fblk_Nabataean . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_NB fblk_NB;

extern "C" {
    BitBlock __get_blk_NB (Basis_bits & basis_bits) {
        Struct_blk_NB output;
        fblk_NB . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_New_Tai_Lue fblk_New_Tai_Lue;

extern "C" {
    BitBlock __get_blk_New_Tai_Lue (Basis_bits & basis_bits) {
        Struct_blk_New_Tai_Lue output;
        fblk_New_Tai_Lue . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_NKo fblk_NKo;

extern "C" {
    BitBlock __get_blk_NKo (Basis_bits & basis_bits) {
        Struct_blk_NKo output;
        fblk_NKo . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Number_Forms fblk_Number_Forms;

extern "C" {
    BitBlock __get_blk_Number_Forms (Basis_bits & basis_bits) {
        Struct_blk_Number_Forms output;
        fblk_Number_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_OCR fblk_OCR;

extern "C" {
    BitBlock __get_blk_OCR (Basis_bits & basis_bits) {
        Struct_blk_OCR output;
        fblk_OCR . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ogham fblk_Ogham;

extern "C" {
    BitBlock __get_blk_Ogham (Basis_bits & basis_bits) {
        Struct_blk_Ogham output;
        fblk_Ogham . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ol_Chiki fblk_Ol_Chiki;

extern "C" {
    BitBlock __get_blk_Ol_Chiki (Basis_bits & basis_bits) {
        Struct_blk_Ol_Chiki output;
        fblk_Ol_Chiki . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_Italic fblk_Old_Italic;

extern "C" {
    BitBlock __get_blk_Old_Italic (Basis_bits & basis_bits) {
        Struct_blk_Old_Italic output;
        fblk_Old_Italic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_North_Arabian fblk_Old_North_Arabian;

extern "C" {
    BitBlock __get_blk_Old_North_Arabian (Basis_bits & basis_bits) {
        Struct_blk_Old_North_Arabian output;
        fblk_Old_North_Arabian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_Permic fblk_Old_Permic;

extern "C" {
    BitBlock __get_blk_Old_Permic (Basis_bits & basis_bits) {
        Struct_blk_Old_Permic output;
        fblk_Old_Permic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_Persian fblk_Old_Persian;

extern "C" {
    BitBlock __get_blk_Old_Persian (Basis_bits & basis_bits) {
        Struct_blk_Old_Persian output;
        fblk_Old_Persian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_South_Arabian fblk_Old_South_Arabian;

extern "C" {
    BitBlock __get_blk_Old_South_Arabian (Basis_bits & basis_bits) {
        Struct_blk_Old_South_Arabian output;
        fblk_Old_South_Arabian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Old_Turkic fblk_Old_Turkic;

extern "C" {
    BitBlock __get_blk_Old_Turkic (Basis_bits & basis_bits) {
        Struct_blk_Old_Turkic output;
        fblk_Old_Turkic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Oriya fblk_Oriya;

extern "C" {
    BitBlock __get_blk_Oriya (Basis_bits & basis_bits) {
        Struct_blk_Oriya output;
        fblk_Oriya . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ornamental_Dingbats fblk_Ornamental_Dingbats;

extern "C" {
    BitBlock __get_blk_Ornamental_Dingbats (Basis_bits & basis_bits) {
        Struct_blk_Ornamental_Dingbats output;
        fblk_Ornamental_Dingbats . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Osmanya fblk_Osmanya;

extern "C" {
    BitBlock __get_blk_Osmanya (Basis_bits & basis_bits) {
        Struct_blk_Osmanya output;
        fblk_Osmanya . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Pahawh_Hmong fblk_Pahawh_Hmong;

extern "C" {
    BitBlock __get_blk_Pahawh_Hmong (Basis_bits & basis_bits) {
        Struct_blk_Pahawh_Hmong output;
        fblk_Pahawh_Hmong . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Palmyrene fblk_Palmyrene;

extern "C" {
    BitBlock __get_blk_Palmyrene (Basis_bits & basis_bits) {
        Struct_blk_Palmyrene output;
        fblk_Palmyrene . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Pau_Cin_Hau fblk_Pau_Cin_Hau;

extern "C" {
    BitBlock __get_blk_Pau_Cin_Hau (Basis_bits & basis_bits) {
        Struct_blk_Pau_Cin_Hau output;
        fblk_Pau_Cin_Hau . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Phags_Pa fblk_Phags_Pa;

extern "C" {
    BitBlock __get_blk_Phags_Pa (Basis_bits & basis_bits) {
        Struct_blk_Phags_Pa output;
        fblk_Phags_Pa . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Phaistos fblk_Phaistos;

extern "C" {
    BitBlock __get_blk_Phaistos (Basis_bits & basis_bits) {
        Struct_blk_Phaistos output;
        fblk_Phaistos . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Phoenician fblk_Phoenician;

extern "C" {
    BitBlock __get_blk_Phoenician (Basis_bits & basis_bits) {
        Struct_blk_Phoenician output;
        fblk_Phoenician . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Phonetic_Ext fblk_Phonetic_Ext;

extern "C" {
    BitBlock __get_blk_Phonetic_Ext (Basis_bits & basis_bits) {
        Struct_blk_Phonetic_Ext output;
        fblk_Phonetic_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Phonetic_Ext_Sup fblk_Phonetic_Ext_Sup;

extern "C" {
    BitBlock __get_blk_Phonetic_Ext_Sup (Basis_bits & basis_bits) {
        Struct_blk_Phonetic_Ext_Sup output;
        fblk_Phonetic_Ext_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Playing_Cards fblk_Playing_Cards;

extern "C" {
    BitBlock __get_blk_Playing_Cards (Basis_bits & basis_bits) {
        Struct_blk_Playing_Cards output;
        fblk_Playing_Cards . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Psalter_Pahlavi fblk_Psalter_Pahlavi;

extern "C" {
    BitBlock __get_blk_Psalter_Pahlavi (Basis_bits & basis_bits) {
        Struct_blk_Psalter_Pahlavi output;
        fblk_Psalter_Pahlavi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_PUA fblk_PUA;

extern "C" {
    BitBlock __get_blk_PUA (Basis_bits & basis_bits) {
        Struct_blk_PUA output;
        fblk_PUA . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Punctuation fblk_Punctuation;

extern "C" {
    BitBlock __get_blk_Punctuation (Basis_bits & basis_bits) {
        Struct_blk_Punctuation output;
        fblk_Punctuation . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Rejang fblk_Rejang;

extern "C" {
    BitBlock __get_blk_Rejang (Basis_bits & basis_bits) {
        Struct_blk_Rejang output;
        fblk_Rejang . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Rumi fblk_Rumi;

extern "C" {
    BitBlock __get_blk_Rumi (Basis_bits & basis_bits) {
        Struct_blk_Rumi output;
        fblk_Rumi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Runic fblk_Runic;

extern "C" {
    BitBlock __get_blk_Runic (Basis_bits & basis_bits) {
        Struct_blk_Runic output;
        fblk_Runic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Samaritan fblk_Samaritan;

extern "C" {
    BitBlock __get_blk_Samaritan (Basis_bits & basis_bits) {
        Struct_blk_Samaritan output;
        fblk_Samaritan . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Saurashtra fblk_Saurashtra;

extern "C" {
    BitBlock __get_blk_Saurashtra (Basis_bits & basis_bits) {
        Struct_blk_Saurashtra output;
        fblk_Saurashtra . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sharada fblk_Sharada;

extern "C" {
    BitBlock __get_blk_Sharada (Basis_bits & basis_bits) {
        Struct_blk_Sharada output;
        fblk_Sharada . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Shavian fblk_Shavian;

extern "C" {
    BitBlock __get_blk_Shavian (Basis_bits & basis_bits) {
        Struct_blk_Shavian output;
        fblk_Shavian . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Shorthand_Format_Controls fblk_Shorthand_Format_Controls;

extern "C" {
    BitBlock __get_blk_Shorthand_Format_Controls (Basis_bits & basis_bits) {
        Struct_blk_Shorthand_Format_Controls output;
        fblk_Shorthand_Format_Controls . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Siddham fblk_Siddham;

extern "C" {
    BitBlock __get_blk_Siddham (Basis_bits & basis_bits) {
        Struct_blk_Siddham output;
        fblk_Siddham . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sinhala fblk_Sinhala;

extern "C" {
    BitBlock __get_blk_Sinhala (Basis_bits & basis_bits) {
        Struct_blk_Sinhala output;
        fblk_Sinhala . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sinhala_Archaic_Numbers fblk_Sinhala_Archaic_Numbers;

extern "C" {
    BitBlock __get_blk_Sinhala_Archaic_Numbers (Basis_bits & basis_bits) {
        Struct_blk_Sinhala_Archaic_Numbers output;
        fblk_Sinhala_Archaic_Numbers . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Small_Forms fblk_Small_Forms;

extern "C" {
    BitBlock __get_blk_Small_Forms (Basis_bits & basis_bits) {
        Struct_blk_Small_Forms output;
        fblk_Small_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sora_Sompeng fblk_Sora_Sompeng;

extern "C" {
    BitBlock __get_blk_Sora_Sompeng (Basis_bits & basis_bits) {
        Struct_blk_Sora_Sompeng output;
        fblk_Sora_Sompeng . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Specials fblk_Specials;

extern "C" {
    BitBlock __get_blk_Specials (Basis_bits & basis_bits) {
        Struct_blk_Specials output;
        fblk_Specials . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sundanese fblk_Sundanese;

extern "C" {
    BitBlock __get_blk_Sundanese (Basis_bits & basis_bits) {
        Struct_blk_Sundanese output;
        fblk_Sundanese . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sundanese_Sup fblk_Sundanese_Sup;

extern "C" {
    BitBlock __get_blk_Sundanese_Sup (Basis_bits & basis_bits) {
        Struct_blk_Sundanese_Sup output;
        fblk_Sundanese_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_Arrows_A fblk_Sup_Arrows_A;

extern "C" {
    BitBlock __get_blk_Sup_Arrows_A (Basis_bits & basis_bits) {
        Struct_blk_Sup_Arrows_A output;
        fblk_Sup_Arrows_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_Arrows_B fblk_Sup_Arrows_B;

extern "C" {
    BitBlock __get_blk_Sup_Arrows_B (Basis_bits & basis_bits) {
        Struct_blk_Sup_Arrows_B output;
        fblk_Sup_Arrows_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_Arrows_C fblk_Sup_Arrows_C;

extern "C" {
    BitBlock __get_blk_Sup_Arrows_C (Basis_bits & basis_bits) {
        Struct_blk_Sup_Arrows_C output;
        fblk_Sup_Arrows_C . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_Math_Operators fblk_Sup_Math_Operators;

extern "C" {
    BitBlock __get_blk_Sup_Math_Operators (Basis_bits & basis_bits) {
        Struct_blk_Sup_Math_Operators output;
        fblk_Sup_Math_Operators . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_PUA_A fblk_Sup_PUA_A;

extern "C" {
    BitBlock __get_blk_Sup_PUA_A (Basis_bits & basis_bits) {
        Struct_blk_Sup_PUA_A output;
        fblk_Sup_PUA_A . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_PUA_B fblk_Sup_PUA_B;

extern "C" {
    BitBlock __get_blk_Sup_PUA_B (Basis_bits & basis_bits) {
        Struct_blk_Sup_PUA_B output;
        fblk_Sup_PUA_B . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Sup_Punctuation fblk_Sup_Punctuation;

extern "C" {
    BitBlock __get_blk_Sup_Punctuation (Basis_bits & basis_bits) {
        Struct_blk_Sup_Punctuation output;
        fblk_Sup_Punctuation . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Super_And_Sub fblk_Super_And_Sub;

extern "C" {
    BitBlock __get_blk_Super_And_Sub (Basis_bits & basis_bits) {
        Struct_blk_Super_And_Sub output;
        fblk_Super_And_Sub . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Syloti_Nagri fblk_Syloti_Nagri;

extern "C" {
    BitBlock __get_blk_Syloti_Nagri (Basis_bits & basis_bits) {
        Struct_blk_Syloti_Nagri output;
        fblk_Syloti_Nagri . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Syriac fblk_Syriac;

extern "C" {
    BitBlock __get_blk_Syriac (Basis_bits & basis_bits) {
        Struct_blk_Syriac output;
        fblk_Syriac . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tagalog fblk_Tagalog;

extern "C" {
    BitBlock __get_blk_Tagalog (Basis_bits & basis_bits) {
        Struct_blk_Tagalog output;
        fblk_Tagalog . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tagbanwa fblk_Tagbanwa;

extern "C" {
    BitBlock __get_blk_Tagbanwa (Basis_bits & basis_bits) {
        Struct_blk_Tagbanwa output;
        fblk_Tagbanwa . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tags fblk_Tags;

extern "C" {
    BitBlock __get_blk_Tags (Basis_bits & basis_bits) {
        Struct_blk_Tags output;
        fblk_Tags . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tai_Le fblk_Tai_Le;

extern "C" {
    BitBlock __get_blk_Tai_Le (Basis_bits & basis_bits) {
        Struct_blk_Tai_Le output;
        fblk_Tai_Le . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tai_Tham fblk_Tai_Tham;

extern "C" {
    BitBlock __get_blk_Tai_Tham (Basis_bits & basis_bits) {
        Struct_blk_Tai_Tham output;
        fblk_Tai_Tham . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tai_Viet fblk_Tai_Viet;

extern "C" {
    BitBlock __get_blk_Tai_Viet (Basis_bits & basis_bits) {
        Struct_blk_Tai_Viet output;
        fblk_Tai_Viet . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tai_Xuan_Jing fblk_Tai_Xuan_Jing;

extern "C" {
    BitBlock __get_blk_Tai_Xuan_Jing (Basis_bits & basis_bits) {
        Struct_blk_Tai_Xuan_Jing output;
        fblk_Tai_Xuan_Jing . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Takri fblk_Takri;

extern "C" {
    BitBlock __get_blk_Takri (Basis_bits & basis_bits) {
        Struct_blk_Takri output;
        fblk_Takri . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tamil fblk_Tamil;

extern "C" {
    BitBlock __get_blk_Tamil (Basis_bits & basis_bits) {
        Struct_blk_Tamil output;
        fblk_Tamil . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Telugu fblk_Telugu;

extern "C" {
    BitBlock __get_blk_Telugu (Basis_bits & basis_bits) {
        Struct_blk_Telugu output;
        fblk_Telugu . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Thaana fblk_Thaana;

extern "C" {
    BitBlock __get_blk_Thaana (Basis_bits & basis_bits) {
        Struct_blk_Thaana output;
        fblk_Thaana . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Thai fblk_Thai;

extern "C" {
    BitBlock __get_blk_Thai (Basis_bits & basis_bits) {
        Struct_blk_Thai output;
        fblk_Thai . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tibetan fblk_Tibetan;

extern "C" {
    BitBlock __get_blk_Tibetan (Basis_bits & basis_bits) {
        Struct_blk_Tibetan output;
        fblk_Tibetan . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tifinagh fblk_Tifinagh;

extern "C" {
    BitBlock __get_blk_Tifinagh (Basis_bits & basis_bits) {
        Struct_blk_Tifinagh output;
        fblk_Tifinagh . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Tirhuta fblk_Tirhuta;

extern "C" {
    BitBlock __get_blk_Tirhuta (Basis_bits & basis_bits) {
        Struct_blk_Tirhuta output;
        fblk_Tirhuta . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Transport_And_Map fblk_Transport_And_Map;

extern "C" {
    BitBlock __get_blk_Transport_And_Map (Basis_bits & basis_bits) {
        Struct_blk_Transport_And_Map output;
        fblk_Transport_And_Map . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_UCAS fblk_UCAS;

extern "C" {
    BitBlock __get_blk_UCAS (Basis_bits & basis_bits) {
        Struct_blk_UCAS output;
        fblk_UCAS . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_UCAS_Ext fblk_UCAS_Ext;

extern "C" {
    BitBlock __get_blk_UCAS_Ext (Basis_bits & basis_bits) {
        Struct_blk_UCAS_Ext output;
        fblk_UCAS_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Ugaritic fblk_Ugaritic;

extern "C" {
    BitBlock __get_blk_Ugaritic (Basis_bits & basis_bits) {
        Struct_blk_Ugaritic output;
        fblk_Ugaritic . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Vai fblk_Vai;

extern "C" {
    BitBlock __get_blk_Vai (Basis_bits & basis_bits) {
        Struct_blk_Vai output;
        fblk_Vai . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Vedic_Ext fblk_Vedic_Ext;

extern "C" {
    BitBlock __get_blk_Vedic_Ext (Basis_bits & basis_bits) {
        Struct_blk_Vedic_Ext output;
        fblk_Vedic_Ext . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Vertical_Forms fblk_Vertical_Forms;

extern "C" {
    BitBlock __get_blk_Vertical_Forms (Basis_bits & basis_bits) {
        Struct_blk_Vertical_Forms output;
        fblk_Vertical_Forms . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_VS fblk_VS;

extern "C" {
    BitBlock __get_blk_VS (Basis_bits & basis_bits) {
        Struct_blk_VS output;
        fblk_VS . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_VS_Sup fblk_VS_Sup;

extern "C" {
    BitBlock __get_blk_VS_Sup (Basis_bits & basis_bits) {
        Struct_blk_VS_Sup output;
        fblk_VS_Sup . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Warang_Citi fblk_Warang_Citi;

extern "C" {
    BitBlock __get_blk_Warang_Citi (Basis_bits & basis_bits) {
        Struct_blk_Warang_Citi output;
        fblk_Warang_Citi . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Yi_Radicals fblk_Yi_Radicals;

extern "C" {
    BitBlock __get_blk_Yi_Radicals (Basis_bits & basis_bits) {
        Struct_blk_Yi_Radicals output;
        fblk_Yi_Radicals . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Yi_Syllables fblk_Yi_Syllables;

extern "C" {
    BitBlock __get_blk_Yi_Syllables (Basis_bits & basis_bits) {
        Struct_blk_Yi_Syllables output;
        fblk_Yi_Syllables . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_blk_Yijing fblk_Yijing;

extern "C" {
    BitBlock __get_blk_Yijing (Basis_bits & basis_bits) {
        Struct_blk_Yijing output;
        fblk_Yijing . do_block(basis_bits, output);
        return output.cc;
    }
}

void install_property_blk_fn_ptrs(pablo::PabloCompiler & p) {
    p.InstallExternalFunction("__get_blk_Aegean_Numbers", (void *) & __get_blk_Aegean_Numbers);
  p.InstallExternalFunction("__get_blk_Alchemical", (void *) & __get_blk_Alchemical);
  p.InstallExternalFunction("__get_blk_Alphabetic_PF", (void *) & __get_blk_Alphabetic_PF);
  p.InstallExternalFunction("__get_blk_Ancient_Greek_Music", (void *) & __get_blk_Ancient_Greek_Music);
  p.InstallExternalFunction("__get_blk_Ancient_Greek_Numbers", (void *) & __get_blk_Ancient_Greek_Numbers);
  p.InstallExternalFunction("__get_blk_Ancient_Symbols", (void *) & __get_blk_Ancient_Symbols);
  p.InstallExternalFunction("__get_blk_Arabic", (void *) & __get_blk_Arabic);
  p.InstallExternalFunction("__get_blk_Arabic_Ext_A", (void *) & __get_blk_Arabic_Ext_A);
  p.InstallExternalFunction("__get_blk_Arabic_Math", (void *) & __get_blk_Arabic_Math);
  p.InstallExternalFunction("__get_blk_Arabic_PF_A", (void *) & __get_blk_Arabic_PF_A);
  p.InstallExternalFunction("__get_blk_Arabic_PF_B", (void *) & __get_blk_Arabic_PF_B);
  p.InstallExternalFunction("__get_blk_Arabic_Sup", (void *) & __get_blk_Arabic_Sup);
  p.InstallExternalFunction("__get_blk_Armenian", (void *) & __get_blk_Armenian);
  p.InstallExternalFunction("__get_blk_Arrows", (void *) & __get_blk_Arrows);
  p.InstallExternalFunction("__get_blk_ASCII", (void *) & __get_blk_ASCII);
  p.InstallExternalFunction("__get_blk_Avestan", (void *) & __get_blk_Avestan);
  p.InstallExternalFunction("__get_blk_Balinese", (void *) & __get_blk_Balinese);
  p.InstallExternalFunction("__get_blk_Bamum", (void *) & __get_blk_Bamum);
  p.InstallExternalFunction("__get_blk_Bamum_Sup", (void *) & __get_blk_Bamum_Sup);
  p.InstallExternalFunction("__get_blk_Bassa_Vah", (void *) & __get_blk_Bassa_Vah);
  p.InstallExternalFunction("__get_blk_Batak", (void *) & __get_blk_Batak);
  p.InstallExternalFunction("__get_blk_Bengali", (void *) & __get_blk_Bengali);
  p.InstallExternalFunction("__get_blk_Block_Elements", (void *) & __get_blk_Block_Elements);
  p.InstallExternalFunction("__get_blk_Bopomofo", (void *) & __get_blk_Bopomofo);
  p.InstallExternalFunction("__get_blk_Bopomofo_Ext", (void *) & __get_blk_Bopomofo_Ext);
  p.InstallExternalFunction("__get_blk_Box_Drawing", (void *) & __get_blk_Box_Drawing);
  p.InstallExternalFunction("__get_blk_Brahmi", (void *) & __get_blk_Brahmi);
  p.InstallExternalFunction("__get_blk_Braille", (void *) & __get_blk_Braille);
  p.InstallExternalFunction("__get_blk_Buginese", (void *) & __get_blk_Buginese);
  p.InstallExternalFunction("__get_blk_Buhid", (void *) & __get_blk_Buhid);
  p.InstallExternalFunction("__get_blk_Byzantine_Music", (void *) & __get_blk_Byzantine_Music);
  p.InstallExternalFunction("__get_blk_Carian", (void *) & __get_blk_Carian);
  p.InstallExternalFunction("__get_blk_Caucasian_Albanian", (void *) & __get_blk_Caucasian_Albanian);
  p.InstallExternalFunction("__get_blk_Chakma", (void *) & __get_blk_Chakma);
  p.InstallExternalFunction("__get_blk_Cham", (void *) & __get_blk_Cham);
  p.InstallExternalFunction("__get_blk_Cherokee", (void *) & __get_blk_Cherokee);
  p.InstallExternalFunction("__get_blk_CJK", (void *) & __get_blk_CJK);
  p.InstallExternalFunction("__get_blk_CJK_Compat", (void *) & __get_blk_CJK_Compat);
  p.InstallExternalFunction("__get_blk_CJK_Compat_Forms", (void *) & __get_blk_CJK_Compat_Forms);
  p.InstallExternalFunction("__get_blk_CJK_Compat_Ideographs", (void *) & __get_blk_CJK_Compat_Ideographs);
  p.InstallExternalFunction("__get_blk_CJK_Compat_Ideographs_Sup", (void *) & __get_blk_CJK_Compat_Ideographs_Sup);
  p.InstallExternalFunction("__get_blk_CJK_Ext_A", (void *) & __get_blk_CJK_Ext_A);
  p.InstallExternalFunction("__get_blk_CJK_Ext_B", (void *) & __get_blk_CJK_Ext_B);
  p.InstallExternalFunction("__get_blk_CJK_Ext_C", (void *) & __get_blk_CJK_Ext_C);
  p.InstallExternalFunction("__get_blk_CJK_Ext_D", (void *) & __get_blk_CJK_Ext_D);
  p.InstallExternalFunction("__get_blk_CJK_Radicals_Sup", (void *) & __get_blk_CJK_Radicals_Sup);
  p.InstallExternalFunction("__get_blk_CJK_Strokes", (void *) & __get_blk_CJK_Strokes);
  p.InstallExternalFunction("__get_blk_CJK_Symbols", (void *) & __get_blk_CJK_Symbols);
  p.InstallExternalFunction("__get_blk_Compat_Jamo", (void *) & __get_blk_Compat_Jamo);
  p.InstallExternalFunction("__get_blk_Control_Pictures", (void *) & __get_blk_Control_Pictures);
  p.InstallExternalFunction("__get_blk_Coptic", (void *) & __get_blk_Coptic);
  p.InstallExternalFunction("__get_blk_Coptic_Epact_Numbers", (void *) & __get_blk_Coptic_Epact_Numbers);
  p.InstallExternalFunction("__get_blk_Counting_Rod", (void *) & __get_blk_Counting_Rod);
  p.InstallExternalFunction("__get_blk_Cuneiform", (void *) & __get_blk_Cuneiform);
  p.InstallExternalFunction("__get_blk_Cuneiform_Numbers", (void *) & __get_blk_Cuneiform_Numbers);
  p.InstallExternalFunction("__get_blk_Currency_Symbols", (void *) & __get_blk_Currency_Symbols);
  p.InstallExternalFunction("__get_blk_Cypriot_Syllabary", (void *) & __get_blk_Cypriot_Syllabary);
  p.InstallExternalFunction("__get_blk_Cyrillic", (void *) & __get_blk_Cyrillic);
  p.InstallExternalFunction("__get_blk_Cyrillic_Ext_A", (void *) & __get_blk_Cyrillic_Ext_A);
  p.InstallExternalFunction("__get_blk_Cyrillic_Ext_B", (void *) & __get_blk_Cyrillic_Ext_B);
  p.InstallExternalFunction("__get_blk_Cyrillic_Sup", (void *) & __get_blk_Cyrillic_Sup);
  p.InstallExternalFunction("__get_blk_Deseret", (void *) & __get_blk_Deseret);
  p.InstallExternalFunction("__get_blk_Devanagari", (void *) & __get_blk_Devanagari);
  p.InstallExternalFunction("__get_blk_Devanagari_Ext", (void *) & __get_blk_Devanagari_Ext);
  p.InstallExternalFunction("__get_blk_Diacriticals", (void *) & __get_blk_Diacriticals);
  p.InstallExternalFunction("__get_blk_Diacriticals_Ext", (void *) & __get_blk_Diacriticals_Ext);
  p.InstallExternalFunction("__get_blk_Diacriticals_For_Symbols", (void *) & __get_blk_Diacriticals_For_Symbols);
  p.InstallExternalFunction("__get_blk_Diacriticals_Sup", (void *) & __get_blk_Diacriticals_Sup);
  p.InstallExternalFunction("__get_blk_Dingbats", (void *) & __get_blk_Dingbats);
  p.InstallExternalFunction("__get_blk_Domino", (void *) & __get_blk_Domino);
  p.InstallExternalFunction("__get_blk_Duployan", (void *) & __get_blk_Duployan);
  p.InstallExternalFunction("__get_blk_Egyptian_Hieroglyphs", (void *) & __get_blk_Egyptian_Hieroglyphs);
  p.InstallExternalFunction("__get_blk_Elbasan", (void *) & __get_blk_Elbasan);
  p.InstallExternalFunction("__get_blk_Emoticons", (void *) & __get_blk_Emoticons);
  p.InstallExternalFunction("__get_blk_Enclosed_Alphanum", (void *) & __get_blk_Enclosed_Alphanum);
  p.InstallExternalFunction("__get_blk_Enclosed_Alphanum_Sup", (void *) & __get_blk_Enclosed_Alphanum_Sup);
  p.InstallExternalFunction("__get_blk_Enclosed_CJK", (void *) & __get_blk_Enclosed_CJK);
  p.InstallExternalFunction("__get_blk_Enclosed_Ideographic_Sup", (void *) & __get_blk_Enclosed_Ideographic_Sup);
  p.InstallExternalFunction("__get_blk_Ethiopic", (void *) & __get_blk_Ethiopic);
  p.InstallExternalFunction("__get_blk_Ethiopic_Ext", (void *) & __get_blk_Ethiopic_Ext);
  p.InstallExternalFunction("__get_blk_Ethiopic_Ext_A", (void *) & __get_blk_Ethiopic_Ext_A);
  p.InstallExternalFunction("__get_blk_Ethiopic_Sup", (void *) & __get_blk_Ethiopic_Sup);
  p.InstallExternalFunction("__get_blk_Geometric_Shapes", (void *) & __get_blk_Geometric_Shapes);
  p.InstallExternalFunction("__get_blk_Geometric_Shapes_Ext", (void *) & __get_blk_Geometric_Shapes_Ext);
  p.InstallExternalFunction("__get_blk_Georgian", (void *) & __get_blk_Georgian);
  p.InstallExternalFunction("__get_blk_Georgian_Sup", (void *) & __get_blk_Georgian_Sup);
  p.InstallExternalFunction("__get_blk_Glagolitic", (void *) & __get_blk_Glagolitic);
  p.InstallExternalFunction("__get_blk_Gothic", (void *) & __get_blk_Gothic);
  p.InstallExternalFunction("__get_blk_Grantha", (void *) & __get_blk_Grantha);
  p.InstallExternalFunction("__get_blk_Greek", (void *) & __get_blk_Greek);
  p.InstallExternalFunction("__get_blk_Greek_Ext", (void *) & __get_blk_Greek_Ext);
  p.InstallExternalFunction("__get_blk_Gujarati", (void *) & __get_blk_Gujarati);
  p.InstallExternalFunction("__get_blk_Gurmukhi", (void *) & __get_blk_Gurmukhi);
  p.InstallExternalFunction("__get_blk_Half_And_Full_Forms", (void *) & __get_blk_Half_And_Full_Forms);
  p.InstallExternalFunction("__get_blk_Half_Marks", (void *) & __get_blk_Half_Marks);
  p.InstallExternalFunction("__get_blk_Hangul", (void *) & __get_blk_Hangul);
  p.InstallExternalFunction("__get_blk_Hanunoo", (void *) & __get_blk_Hanunoo);
  p.InstallExternalFunction("__get_blk_Hebrew", (void *) & __get_blk_Hebrew);
  p.InstallExternalFunction("__get_blk_High_PU_Surrogates", (void *) & __get_blk_High_PU_Surrogates);
  p.InstallExternalFunction("__get_blk_High_Surrogates", (void *) & __get_blk_High_Surrogates);
  p.InstallExternalFunction("__get_blk_Hiragana", (void *) & __get_blk_Hiragana);
  p.InstallExternalFunction("__get_blk_IDC", (void *) & __get_blk_IDC);
  p.InstallExternalFunction("__get_blk_Imperial_Aramaic", (void *) & __get_blk_Imperial_Aramaic);
  p.InstallExternalFunction("__get_blk_Indic_Number_Forms", (void *) & __get_blk_Indic_Number_Forms);
  p.InstallExternalFunction("__get_blk_Inscriptional_Pahlavi", (void *) & __get_blk_Inscriptional_Pahlavi);
  p.InstallExternalFunction("__get_blk_Inscriptional_Parthian", (void *) & __get_blk_Inscriptional_Parthian);
  p.InstallExternalFunction("__get_blk_IPA_Ext", (void *) & __get_blk_IPA_Ext);
  p.InstallExternalFunction("__get_blk_Jamo", (void *) & __get_blk_Jamo);
  p.InstallExternalFunction("__get_blk_Jamo_Ext_A", (void *) & __get_blk_Jamo_Ext_A);
  p.InstallExternalFunction("__get_blk_Jamo_Ext_B", (void *) & __get_blk_Jamo_Ext_B);
  p.InstallExternalFunction("__get_blk_Javanese", (void *) & __get_blk_Javanese);
  p.InstallExternalFunction("__get_blk_Kaithi", (void *) & __get_blk_Kaithi);
  p.InstallExternalFunction("__get_blk_Kana_Sup", (void *) & __get_blk_Kana_Sup);
  p.InstallExternalFunction("__get_blk_Kanbun", (void *) & __get_blk_Kanbun);
  p.InstallExternalFunction("__get_blk_Kangxi", (void *) & __get_blk_Kangxi);
  p.InstallExternalFunction("__get_blk_Kannada", (void *) & __get_blk_Kannada);
  p.InstallExternalFunction("__get_blk_Katakana", (void *) & __get_blk_Katakana);
  p.InstallExternalFunction("__get_blk_Katakana_Ext", (void *) & __get_blk_Katakana_Ext);
  p.InstallExternalFunction("__get_blk_Kayah_Li", (void *) & __get_blk_Kayah_Li);
  p.InstallExternalFunction("__get_blk_Kharoshthi", (void *) & __get_blk_Kharoshthi);
  p.InstallExternalFunction("__get_blk_Khmer", (void *) & __get_blk_Khmer);
  p.InstallExternalFunction("__get_blk_Khmer_Symbols", (void *) & __get_blk_Khmer_Symbols);
  p.InstallExternalFunction("__get_blk_Khojki", (void *) & __get_blk_Khojki);
  p.InstallExternalFunction("__get_blk_Khudawadi", (void *) & __get_blk_Khudawadi);
  p.InstallExternalFunction("__get_blk_Lao", (void *) & __get_blk_Lao);
  p.InstallExternalFunction("__get_blk_Latin_1_Sup", (void *) & __get_blk_Latin_1_Sup);
  p.InstallExternalFunction("__get_blk_Latin_Ext_A", (void *) & __get_blk_Latin_Ext_A);
  p.InstallExternalFunction("__get_blk_Latin_Ext_Additional", (void *) & __get_blk_Latin_Ext_Additional);
  p.InstallExternalFunction("__get_blk_Latin_Ext_B", (void *) & __get_blk_Latin_Ext_B);
  p.InstallExternalFunction("__get_blk_Latin_Ext_C", (void *) & __get_blk_Latin_Ext_C);
  p.InstallExternalFunction("__get_blk_Latin_Ext_D", (void *) & __get_blk_Latin_Ext_D);
  p.InstallExternalFunction("__get_blk_Latin_Ext_E", (void *) & __get_blk_Latin_Ext_E);
  p.InstallExternalFunction("__get_blk_Lepcha", (void *) & __get_blk_Lepcha);
  p.InstallExternalFunction("__get_blk_Letterlike_Symbols", (void *) & __get_blk_Letterlike_Symbols);
  p.InstallExternalFunction("__get_blk_Limbu", (void *) & __get_blk_Limbu);
  p.InstallExternalFunction("__get_blk_Linear_A", (void *) & __get_blk_Linear_A);
  p.InstallExternalFunction("__get_blk_Linear_B_Ideograms", (void *) & __get_blk_Linear_B_Ideograms);
  p.InstallExternalFunction("__get_blk_Linear_B_Syllabary", (void *) & __get_blk_Linear_B_Syllabary);
  p.InstallExternalFunction("__get_blk_Lisu", (void *) & __get_blk_Lisu);
  p.InstallExternalFunction("__get_blk_Low_Surrogates", (void *) & __get_blk_Low_Surrogates);
  p.InstallExternalFunction("__get_blk_Lycian", (void *) & __get_blk_Lycian);
  p.InstallExternalFunction("__get_blk_Lydian", (void *) & __get_blk_Lydian);
  p.InstallExternalFunction("__get_blk_Mahajani", (void *) & __get_blk_Mahajani);
  p.InstallExternalFunction("__get_blk_Mahjong", (void *) & __get_blk_Mahjong);
  p.InstallExternalFunction("__get_blk_Malayalam", (void *) & __get_blk_Malayalam);
  p.InstallExternalFunction("__get_blk_Mandaic", (void *) & __get_blk_Mandaic);
  p.InstallExternalFunction("__get_blk_Manichaean", (void *) & __get_blk_Manichaean);
  p.InstallExternalFunction("__get_blk_Math_Alphanum", (void *) & __get_blk_Math_Alphanum);
  p.InstallExternalFunction("__get_blk_Math_Operators", (void *) & __get_blk_Math_Operators);
  p.InstallExternalFunction("__get_blk_Meetei_Mayek", (void *) & __get_blk_Meetei_Mayek);
  p.InstallExternalFunction("__get_blk_Meetei_Mayek_Ext", (void *) & __get_blk_Meetei_Mayek_Ext);
  p.InstallExternalFunction("__get_blk_Mende_Kikakui", (void *) & __get_blk_Mende_Kikakui);
  p.InstallExternalFunction("__get_blk_Meroitic_Cursive", (void *) & __get_blk_Meroitic_Cursive);
  p.InstallExternalFunction("__get_blk_Meroitic_Hieroglyphs", (void *) & __get_blk_Meroitic_Hieroglyphs);
  p.InstallExternalFunction("__get_blk_Miao", (void *) & __get_blk_Miao);
  p.InstallExternalFunction("__get_blk_Misc_Arrows", (void *) & __get_blk_Misc_Arrows);
  p.InstallExternalFunction("__get_blk_Misc_Math_Symbols_A", (void *) & __get_blk_Misc_Math_Symbols_A);
  p.InstallExternalFunction("__get_blk_Misc_Math_Symbols_B", (void *) & __get_blk_Misc_Math_Symbols_B);
  p.InstallExternalFunction("__get_blk_Misc_Pictographs", (void *) & __get_blk_Misc_Pictographs);
  p.InstallExternalFunction("__get_blk_Misc_Symbols", (void *) & __get_blk_Misc_Symbols);
  p.InstallExternalFunction("__get_blk_Misc_Technical", (void *) & __get_blk_Misc_Technical);
  p.InstallExternalFunction("__get_blk_Modi", (void *) & __get_blk_Modi);
  p.InstallExternalFunction("__get_blk_Modifier_Letters", (void *) & __get_blk_Modifier_Letters);
  p.InstallExternalFunction("__get_blk_Modifier_Tone_Letters", (void *) & __get_blk_Modifier_Tone_Letters);
  p.InstallExternalFunction("__get_blk_Mongolian", (void *) & __get_blk_Mongolian);
  p.InstallExternalFunction("__get_blk_Mro", (void *) & __get_blk_Mro);
  p.InstallExternalFunction("__get_blk_Music", (void *) & __get_blk_Music);
  p.InstallExternalFunction("__get_blk_Myanmar", (void *) & __get_blk_Myanmar);
  p.InstallExternalFunction("__get_blk_Myanmar_Ext_A", (void *) & __get_blk_Myanmar_Ext_A);
  p.InstallExternalFunction("__get_blk_Myanmar_Ext_B", (void *) & __get_blk_Myanmar_Ext_B);
  p.InstallExternalFunction("__get_blk_Nabataean", (void *) & __get_blk_Nabataean);
  p.InstallExternalFunction("__get_blk_NB", (void *) & __get_blk_NB);
  p.InstallExternalFunction("__get_blk_New_Tai_Lue", (void *) & __get_blk_New_Tai_Lue);
  p.InstallExternalFunction("__get_blk_NKo", (void *) & __get_blk_NKo);
  p.InstallExternalFunction("__get_blk_Number_Forms", (void *) & __get_blk_Number_Forms);
  p.InstallExternalFunction("__get_blk_OCR", (void *) & __get_blk_OCR);
  p.InstallExternalFunction("__get_blk_Ogham", (void *) & __get_blk_Ogham);
  p.InstallExternalFunction("__get_blk_Ol_Chiki", (void *) & __get_blk_Ol_Chiki);
  p.InstallExternalFunction("__get_blk_Old_Italic", (void *) & __get_blk_Old_Italic);
  p.InstallExternalFunction("__get_blk_Old_North_Arabian", (void *) & __get_blk_Old_North_Arabian);
  p.InstallExternalFunction("__get_blk_Old_Permic", (void *) & __get_blk_Old_Permic);
  p.InstallExternalFunction("__get_blk_Old_Persian", (void *) & __get_blk_Old_Persian);
  p.InstallExternalFunction("__get_blk_Old_South_Arabian", (void *) & __get_blk_Old_South_Arabian);
  p.InstallExternalFunction("__get_blk_Old_Turkic", (void *) & __get_blk_Old_Turkic);
  p.InstallExternalFunction("__get_blk_Oriya", (void *) & __get_blk_Oriya);
  p.InstallExternalFunction("__get_blk_Ornamental_Dingbats", (void *) & __get_blk_Ornamental_Dingbats);
  p.InstallExternalFunction("__get_blk_Osmanya", (void *) & __get_blk_Osmanya);
  p.InstallExternalFunction("__get_blk_Pahawh_Hmong", (void *) & __get_blk_Pahawh_Hmong);
  p.InstallExternalFunction("__get_blk_Palmyrene", (void *) & __get_blk_Palmyrene);
  p.InstallExternalFunction("__get_blk_Pau_Cin_Hau", (void *) & __get_blk_Pau_Cin_Hau);
  p.InstallExternalFunction("__get_blk_Phags_Pa", (void *) & __get_blk_Phags_Pa);
  p.InstallExternalFunction("__get_blk_Phaistos", (void *) & __get_blk_Phaistos);
  p.InstallExternalFunction("__get_blk_Phoenician", (void *) & __get_blk_Phoenician);
  p.InstallExternalFunction("__get_blk_Phonetic_Ext", (void *) & __get_blk_Phonetic_Ext);
  p.InstallExternalFunction("__get_blk_Phonetic_Ext_Sup", (void *) & __get_blk_Phonetic_Ext_Sup);
  p.InstallExternalFunction("__get_blk_Playing_Cards", (void *) & __get_blk_Playing_Cards);
  p.InstallExternalFunction("__get_blk_Psalter_Pahlavi", (void *) & __get_blk_Psalter_Pahlavi);
  p.InstallExternalFunction("__get_blk_PUA", (void *) & __get_blk_PUA);
  p.InstallExternalFunction("__get_blk_Punctuation", (void *) & __get_blk_Punctuation);
  p.InstallExternalFunction("__get_blk_Rejang", (void *) & __get_blk_Rejang);
  p.InstallExternalFunction("__get_blk_Rumi", (void *) & __get_blk_Rumi);
  p.InstallExternalFunction("__get_blk_Runic", (void *) & __get_blk_Runic);
  p.InstallExternalFunction("__get_blk_Samaritan", (void *) & __get_blk_Samaritan);
  p.InstallExternalFunction("__get_blk_Saurashtra", (void *) & __get_blk_Saurashtra);
  p.InstallExternalFunction("__get_blk_Sharada", (void *) & __get_blk_Sharada);
  p.InstallExternalFunction("__get_blk_Shavian", (void *) & __get_blk_Shavian);
  p.InstallExternalFunction("__get_blk_Shorthand_Format_Controls", (void *) & __get_blk_Shorthand_Format_Controls);
  p.InstallExternalFunction("__get_blk_Siddham", (void *) & __get_blk_Siddham);
  p.InstallExternalFunction("__get_blk_Sinhala", (void *) & __get_blk_Sinhala);
  p.InstallExternalFunction("__get_blk_Sinhala_Archaic_Numbers", (void *) & __get_blk_Sinhala_Archaic_Numbers);
  p.InstallExternalFunction("__get_blk_Small_Forms", (void *) & __get_blk_Small_Forms);
  p.InstallExternalFunction("__get_blk_Sora_Sompeng", (void *) & __get_blk_Sora_Sompeng);
  p.InstallExternalFunction("__get_blk_Specials", (void *) & __get_blk_Specials);
  p.InstallExternalFunction("__get_blk_Sundanese", (void *) & __get_blk_Sundanese);
  p.InstallExternalFunction("__get_blk_Sundanese_Sup", (void *) & __get_blk_Sundanese_Sup);
  p.InstallExternalFunction("__get_blk_Sup_Arrows_A", (void *) & __get_blk_Sup_Arrows_A);
  p.InstallExternalFunction("__get_blk_Sup_Arrows_B", (void *) & __get_blk_Sup_Arrows_B);
  p.InstallExternalFunction("__get_blk_Sup_Arrows_C", (void *) & __get_blk_Sup_Arrows_C);
  p.InstallExternalFunction("__get_blk_Sup_Math_Operators", (void *) & __get_blk_Sup_Math_Operators);
  p.InstallExternalFunction("__get_blk_Sup_PUA_A", (void *) & __get_blk_Sup_PUA_A);
  p.InstallExternalFunction("__get_blk_Sup_PUA_B", (void *) & __get_blk_Sup_PUA_B);
  p.InstallExternalFunction("__get_blk_Sup_Punctuation", (void *) & __get_blk_Sup_Punctuation);
  p.InstallExternalFunction("__get_blk_Super_And_Sub", (void *) & __get_blk_Super_And_Sub);
  p.InstallExternalFunction("__get_blk_Syloti_Nagri", (void *) & __get_blk_Syloti_Nagri);
  p.InstallExternalFunction("__get_blk_Syriac", (void *) & __get_blk_Syriac);
  p.InstallExternalFunction("__get_blk_Tagalog", (void *) & __get_blk_Tagalog);
  p.InstallExternalFunction("__get_blk_Tagbanwa", (void *) & __get_blk_Tagbanwa);
  p.InstallExternalFunction("__get_blk_Tags", (void *) & __get_blk_Tags);
  p.InstallExternalFunction("__get_blk_Tai_Le", (void *) & __get_blk_Tai_Le);
  p.InstallExternalFunction("__get_blk_Tai_Tham", (void *) & __get_blk_Tai_Tham);
  p.InstallExternalFunction("__get_blk_Tai_Viet", (void *) & __get_blk_Tai_Viet);
  p.InstallExternalFunction("__get_blk_Tai_Xuan_Jing", (void *) & __get_blk_Tai_Xuan_Jing);
  p.InstallExternalFunction("__get_blk_Takri", (void *) & __get_blk_Takri);
  p.InstallExternalFunction("__get_blk_Tamil", (void *) & __get_blk_Tamil);
  p.InstallExternalFunction("__get_blk_Telugu", (void *) & __get_blk_Telugu);
  p.InstallExternalFunction("__get_blk_Thaana", (void *) & __get_blk_Thaana);
  p.InstallExternalFunction("__get_blk_Thai", (void *) & __get_blk_Thai);
  p.InstallExternalFunction("__get_blk_Tibetan", (void *) & __get_blk_Tibetan);
  p.InstallExternalFunction("__get_blk_Tifinagh", (void *) & __get_blk_Tifinagh);
  p.InstallExternalFunction("__get_blk_Tirhuta", (void *) & __get_blk_Tirhuta);
  p.InstallExternalFunction("__get_blk_Transport_And_Map", (void *) & __get_blk_Transport_And_Map);
  p.InstallExternalFunction("__get_blk_UCAS", (void *) & __get_blk_UCAS);
  p.InstallExternalFunction("__get_blk_UCAS_Ext", (void *) & __get_blk_UCAS_Ext);
  p.InstallExternalFunction("__get_blk_Ugaritic", (void *) & __get_blk_Ugaritic);
  p.InstallExternalFunction("__get_blk_Vai", (void *) & __get_blk_Vai);
  p.InstallExternalFunction("__get_blk_Vedic_Ext", (void *) & __get_blk_Vedic_Ext);
  p.InstallExternalFunction("__get_blk_Vertical_Forms", (void *) & __get_blk_Vertical_Forms);
  p.InstallExternalFunction("__get_blk_VS", (void *) & __get_blk_VS);
  p.InstallExternalFunction("__get_blk_VS_Sup", (void *) & __get_blk_VS_Sup);
  p.InstallExternalFunction("__get_blk_Warang_Citi", (void *) & __get_blk_Warang_Citi);
  p.InstallExternalFunction("__get_blk_Yi_Radicals", (void *) & __get_blk_Yi_Radicals);
  p.InstallExternalFunction("__get_blk_Yi_Syllables", (void *) & __get_blk_Yi_Syllables);
  p.InstallExternalFunction("__get_blk_Yijing", (void *) & __get_blk_Yijing);

}

#endif
