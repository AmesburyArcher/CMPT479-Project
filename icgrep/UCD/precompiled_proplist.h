#ifndef UCD_PRECOMPILED_PROPLIST_H
#define UCD_PRECOMPILED_PROPLIST_H
/*
 *  Copyright (c) 2015 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by generate_UCD_property_functions.py - manual edits may be lost.
 */

#include "pablo/pablo_compiler.h"


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\


  struct Struct_wspace_Y {
  BitBlock cc;
};

  struct Struct_bidi_c_Y {
  BitBlock cc;
};

  struct Struct_join_c_Y {
  BitBlock cc;
};

  struct Struct_dash_Y {
  BitBlock cc;
};

  struct Struct_hyphen_Y {
  BitBlock cc;
};

  struct Struct_qmark_Y {
  BitBlock cc;
};

  struct Struct_term_Y {
  BitBlock cc;
};

  struct Struct_omath_Y {
  BitBlock cc;
};

  struct Struct_hex_Y {
  BitBlock cc;
};

  struct Struct_ahex_Y {
  BitBlock cc;
};

  struct Struct_oalpha_Y {
  BitBlock cc;
};

  struct Struct_ideo_Y {
  BitBlock cc;
};

  struct Struct_dia_Y {
  BitBlock cc;
};

  struct Struct_ext_Y {
  BitBlock cc;
};

  struct Struct_olower_Y {
  BitBlock cc;
};

  struct Struct_oupper_Y {
  BitBlock cc;
};

  struct Struct_nchar_Y {
  BitBlock cc;
};

  struct Struct_ogr_ext_Y {
  BitBlock cc;
};

  struct Struct_idsb_Y {
  BitBlock cc;
};

  struct Struct_idst_Y {
  BitBlock cc;
};

  struct Struct_radical_Y {
  BitBlock cc;
};

  struct Struct_uideo_Y {
  BitBlock cc;
};

  struct Struct_odi_Y {
  BitBlock cc;
};

  struct Struct_dep_Y {
  BitBlock cc;
};

  struct Struct_sd_Y {
  BitBlock cc;
};

  struct Struct_loe_Y {
  BitBlock cc;
};

  struct Struct_oids_Y {
  BitBlock cc;
};

  struct Struct_oidc_Y {
  BitBlock cc;
};

  struct Struct_sterm_Y {
  BitBlock cc;
};

  struct Struct_vs_Y {
  BitBlock cc;
};

  struct Struct_pat_ws_Y {
  BitBlock cc;
};

  struct Struct_pat_syn_Y {
  BitBlock cc;
};

  struct Property_sterm_Y {
  Property_sterm_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sterm_Y & struct_sterm_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, cc_range_21_3f_1, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock byte_d6, r400_5ff_tmp4, r400_5ff_tmp5, byte_range_80_8f;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, r500_58f_tmp1;
		BitBlock r500_58f_tmp2, byte_d4, byte_range_b0_bf, r500_58f_tmp3;
		BitBlock r500_58f_tmp4, r500_58f_tmp5, byte_d5, r500_58f_tmp6, r500_58f_tmp7;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_89, byte_d6_adv, r530_58f_tmp3;
		BitBlock r80_7ff_tmp3, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, byte_9f, byte_d8_adv, r600_6ff_tmp5;
		BitBlock r600_6ff_tmp6, byte_db, r600_6ff_tmp7, r600_6ff_tmp8, byte_94;
		BitBlock byte_db_adv, r600_6ff_tmp9, r80_7ff_tmp4, byte_range_dc_dd;
		BitBlock r700_77f_tmp1, r700_77f_tmp2, byte_dc, r700_77f_tmp3, byte_dd;
		BitBlock r700_77f_tmp4, r700_77f_tmp5, r700_77f_tmp6, r700_77f_tmp7;
		BitBlock r700_77f_tmp8, r700_74f_tmp1, byte_range_80_82, byte_dc_adv;
		BitBlock r700_74f_tmp2, r80_7ff_tmp5, byte_range_de_df, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, byte_b9, byte_df_adv, r7c0_7ff_tmp4;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, byte_e4, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, byte_range_80_b7, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e0, r800_fff_tmp1, r800_fff_tmp2, byte_a5, r800_fff_tmp3;
		BitBlock sequence_e0_a5, byte_e0_adv, r800_fff_tmp4, byte_range_a4_a5;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp5, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_81, r1000_1fff_tmp3, sequence_e1_81;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, byte_range_8a_8b;
		BitBlock sequence_e1_81_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_8d;
		BitBlock sequence_e1_8d, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, cc_range_1362_1367_3, sequence_e1_8d_adv;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, byte_99, sequence_e1_99, byte_ae;
		BitBlock sequence_e1_99_adv, r1000_1fff_tmp19, r1000_1fff_tmp20, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock byte_range_b5_b6, sequence_e1_9c_adv, r1000_1fff_tmp24, byte_a0;
		BitBlock sequence_e1_a0, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock cc_range_1803_1809_3, sequence_e1_a0_adv, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, sequence_e1_a5, r1000_1fff_tmp29, byte_range_84_85;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp30, r1000_1fff_tmp31, byte_aa;
		BitBlock sequence_e1_aa, byte_range_a8_ab, sequence_e1_aa_adv;
		BitBlock r1000_1fff_tmp32, byte_ad, sequence_e1_ad, r1000_1fff_tmp33;
		BitBlock cc_range_1b5a_1b5e_3, sequence_e1_ad_adv, r1000_1fff_tmp34, byte_b0;
		BitBlock sequence_e1_b0, r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock byte_range_bb_bc, sequence_e1_b0_adv, r1000_1fff_tmp38, byte_b1;
		BitBlock sequence_e1_b1, r1000_1fff_tmp39, byte_range_be_bf;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp40, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, byte_range_bc_bd, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp7, sequence_e2_81, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, byte_range_87_89;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, byte_b8, sequence_e2_b8, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock cc_range_2e2e_2e3c_3, sequence_e2_b8_adv, r2000_2fff_tmp19;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, byte_82, sequence_e3_80_adv, r3000_4dff_tmp5;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, byte_ea, ra000_ffff_tmp3, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, byte_93, ra000_ffff_tmp6, sequence_ea_93;
		BitBlock byte_ea_adv, ra000_ffff_tmp7, byte_bf, sequence_ea_93_adv;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, byte_98, sequence_ea_98;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_range_8e_8f, sequence_ea_98_adv, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_9b, sequence_ea_9b, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, cc_range_a6f3_a6f7_3, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, byte_a1, sequence_ea_a1;
		BitBlock ra000_ffff_tmp19, byte_range_b6_b7, sequence_ea_a1_adv;
		BitBlock ra000_ffff_tmp20, byte_a3, sequence_ea_a3, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp21, byte_a4, sequence_ea_a4, byte_af;
		BitBlock sequence_ea_a4_adv, ra000_ffff_tmp22, ra000_ffff_tmp23, byte_a7;
		BitBlock sequence_ea_a7, ra000_ffff_tmp24, byte_range_88_89;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp25, ra000_ffff_tmp26, byte_a9;
		BitBlock sequence_ea_a9, ra000_ffff_tmp27, byte_range_9d_9f;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp28, byte_ab, sequence_ea_ab;
		BitBlock ra000_ffff_tmp29, byte_range_b0_b1, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp30, sequence_ea_af, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp31, byte_ef, ra000_ffff_tmp32, sequence_ef_b9;
		BitBlock byte_ef_adv, ra000_ffff_tmp33, ra000_ffff_tmp34, cc_range_fe52_fe56_3;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp35, ra000_ffff_tmp36, byte_bc;
		BitBlock sequence_ef_bc, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock cc_range_ff01_ff1f_3, sequence_ef_bc_adv, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, byte_bd, sequence_ef_bd, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp41, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, byte_f0, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, byte_90, r10000_10ffff_tmp6, sequence_f0_90;
		BitBlock byte_f0_adv, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, sequence_f0_90_a9;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock byte_range_96_97, sequence_f0_90_a9_adv, r10000_10ffff_tmp13, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, sequence_f0_91_81, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, byte_range_87_88, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, byte_83, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp27, byte_range_80_81, sequence_f0_91_83_adv;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, byte_85, sequence_f0_91_85;
		BitBlock r10000_10ffff_tmp30, byte_range_81_83, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, byte_87, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, cc_range_111c5_111cd_4;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock byte_88, sequence_f0_91_88, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, cc_range_11238_1123b_4, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp46, byte_97, sequence_f0_91_97, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, cc_range_115c2_115c9_4, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp49, sequence_f0_91_99, byte_range_81_82;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock byte_96, sequence_f0_96, r10000_10ffff_tmp52, sequence_f0_96_a9;
		BitBlock sequence_f0_96_adv, byte_range_ae_af, sequence_f0_96_a9_adv;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, sequence_f0_96_ab, byte_b5;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock byte_ac, sequence_f0_96_ac, byte_range_b7_b8, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp57, sequence_f0_96_ad, r10000_10ffff_tmp58, byte_84;
		BitBlock sequence_f0_96_ad_adv, r10000_10ffff_tmp59, sequence_f0_9b, byte_b2;
		BitBlock r10000_10ffff_tmp60, sequence_f0_9b_b2, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp61;




        struct_sterm_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_andc(tmp5, tmp4);
        tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_or(tmp6, tmp9);
        tmp11 = simd_and(tmp3, tmp10);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_andc(tmp12, tmp1);
        tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp15 = simd_and(tmp7, tmp14);
        tmp16 = simd_and(tmp13, tmp15);
        cc_range_21_3f_1 = simd_or(tmp11, tmp16);
        struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, cc_range_21_3f_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 61))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 7))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, tmp8);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp4, r400_5ff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp6));
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp6, byte_range_80_8f);
              r400_5ff_tmp8 = simd_or(byte_range_d4_d5, r400_5ff_tmp7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(1, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                byte_range_b0_bf = simd_and(r400_5ff_tmp4, tmp12);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp3));
                r500_58f_tmp4 = simd_and(r500_58f_tmp3, byte_range_b0_bf);
                r500_58f_tmp5 = simd_and(r400_5ff_tmp1, tmp5);
                byte_d5 = simd_and(r80_7ff_tmp2, r500_58f_tmp5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp7 = simd_or(r500_58f_tmp6, r400_5ff_tmp7);
                if (bitblock::any(r500_58f_tmp7)) {
                  r530_58f_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, tmp5);
                  byte_89 = simd_and(byte_range_80_8f, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp6;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_89);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(2, 2))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp2, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp1);
              byte_9f = simd_and(r600_6ff_tmp4, tmp15);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(2), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_9f);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(r80_7ff_tmp3, tmp14);
              byte_db = simd_and(r80_7ff_tmp2, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r600_6ff_tmp8 = simd_andc(r600_6ff_tmp7, r600_6ff_tmp1);
              byte_94 = simd_and(r600_6ff_tmp4, r600_6ff_tmp8);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(3), byte_db_adv));
              r600_6ff_tmp9 = simd_and(byte_db_adv, byte_94);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r600_6ff_tmp9);
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 2);
            }
            r80_7ff_tmp4 = simd_andc(tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(4, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp2, r700_77f_tmp2);
              r700_77f_tmp3 = simd_and(tmp7, tmp5);
              byte_dd = simd_and(r80_7ff_tmp2, r700_77f_tmp3);
              r700_77f_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r700_77f_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r700_77f_tmp4, r700_77f_tmp5);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(4), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(5, 1))) {
                r700_74f_tmp1 = simd_andc(byte_range_80_8f, tmp4);
                byte_range_80_82 = simd_andc(r700_74f_tmp1, tmp14);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(5), byte_dc_adv));
                r700_74f_tmp2 = simd_and(byte_dc_adv, byte_range_80_82);
                struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r700_74f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 2);
            }
            r80_7ff_tmp5 = simd_and(tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(6, 1))) {
              byte_df = simd_and(r80_7ff_tmp2, tmp15);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(6, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, tmp12);
                r7c0_7ff_tmp3 = simd_and(r80_7ff_tmp3, tmp5);
                byte_b9 = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp3);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(6), byte_df_adv));
                r7c0_7ff_tmp4 = simd_and(byte_df_adv, byte_b9);
                struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r7c0_7ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 7);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(7, 35))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp3 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp2);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
            r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp6);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(7), r800_ffff_tmp7));
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, byte_range_80_b7);
            r800_ffff_tmp9 = simd_or(byte_range_e0_e3, r800_ffff_tmp8);
            if ((bitblock::any(r800_ffff_tmp9) || carryQ.CarryTest(8, 19))) {
              r800_4dff_tmp1 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(8, 13))) {
                r800_1fff_tmp1 = simd_or(tmp4, r800_ffff_tmp2);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(8, 2))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp4, tmp2);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp1, tmp5);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp2);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(8), r800_fff_tmp3));
                  sequence_e0_a5 = simd_and(r800_fff_tmp3, byte_a5);
                  byte_e0_adv = r800_fff_tmp3;
                  r800_fff_tmp4 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(9), sequence_e0_a5_adv));
                  r800_fff_tmp5 = simd_and(sequence_e0_a5_adv, byte_range_a4_a5);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r800_fff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 2);
                }
                byte_e1 = simd_and(byte_range_e0_ef, tmp6);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(10, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp4, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp2, tmp6);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(10), r1000_1fff_tmp3));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp3, byte_81);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp4, basis_bits.bit_6);
                  byte_range_8a_8b = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(11), sequence_e1_81_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_81_adv, byte_range_8a_8b);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_and(tmp7, tmp5);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp4, tmp2);
                  r1000_1fff_tmp9 = simd_andc(tmp8, tmp4);
                  r1000_1fff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp2);
                  r1000_1fff_tmp11 = simd_not(r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_5, tmp14);
                  r1000_1fff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp11), simd_andc(r1000_1fff_tmp12, basis_bits.bit_4));
                  r1000_1fff_tmp14 = simd_or(r1000_1fff_tmp9, r1000_1fff_tmp13);
                  cc_range_1362_1367_3 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp14);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(12), sequence_e1_8d_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_8d_adv, cc_range_1362_1367_3);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp17 = simd_and(r800_ffff_tmp4, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp4, tmp5);
                  byte_99 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  byte_ae = simd_and(r1000_1fff_tmp8, tmp9);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(13), sequence_e1_99_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_99_adv, byte_ae);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp19);
                  r1000_1fff_tmp20 = simd_andc(tmp7, r800_ffff_tmp2);
                  byte_9c = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp20);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp4, tmp12);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp21, r800_ffff_tmp1);
                  r1000_1fff_tmp23 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(14), sequence_e1_9c_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp24);
                  byte_a0 = simd_andc(r1000_1fff_tmp8, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp25 = simd_andc(tmp14, tmp4);
                  r1000_1fff_tmp26 = simd_or(r1000_1fff_tmp25, r1000_1fff_tmp18);
                  cc_range_1803_1809_3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(15), sequence_e1_a0_adv));
                  r1000_1fff_tmp27 = simd_and(sequence_e1_a0_adv, cc_range_1803_1809_3);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp27);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp1, tmp5);
                  byte_a5 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp28);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp29 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_84_85 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp29);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(16), sequence_e1_a5_adv));
                  r1000_1fff_tmp30 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp30);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp4, tmp8);
                  byte_aa = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp31);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  byte_range_a8_ab = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp4);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(17), sequence_e1_aa_adv));
                  r1000_1fff_tmp32 = simd_and(sequence_e1_aa_adv, byte_range_a8_ab);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp32);
                  byte_ad = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp7);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp33 = simd_and(basis_bits.bit_6, basis_bits.bit_4);
                  cc_range_1b5a_1b5e_3 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp33);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(18), sequence_e1_ad_adv));
                  r1000_1fff_tmp34 = simd_and(sequence_e1_ad_adv, cc_range_1b5a_1b5e_3);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp34);
                  byte_b0 = simd_andc(r1000_1fff_tmp21, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp35 = simd_and(r1000_1fff_tmp21, basis_bits.bit_4);
                  r1000_1fff_tmp36 = simd_not(r800_ffff_tmp2);
                  r1000_1fff_tmp37 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp36), simd_andc(tmp14, basis_bits.bit_5));
                  byte_range_bb_bc = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp37);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(19), sequence_e1_b0_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_b0_adv, byte_range_bb_bc);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp38);
                  byte_b1 = simd_and(r1000_1fff_tmp21, tmp6);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp39 = simd_and(tmp7, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp39);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(20), sequence_e1_b1_adv));
                  r1000_1fff_tmp40 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r1000_1fff_tmp40);
                }
                else {
                  carryQ.CarryDequeueEnqueue(10, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 13);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp8);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(21, 6))) {
                r2000_4dff_tmp1 = simd_andc(tmp8, tmp4);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(21, 4))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp4, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(tmp4, r800_ffff_tmp2);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(21), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp4, tmp12);
                  r2000_2fff_tmp6 = simd_andc(tmp7, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(22), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_bc_bd);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r2000_2fff_tmp7);
                  byte_81 = simd_and(r2000_2fff_tmp2, tmp6);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_not(r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_5, tmp14);
                  r2000_2fff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp9), simd_andc(r2000_2fff_tmp10, basis_bits.bit_4));
                  byte_range_87_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp11);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(23), sequence_e2_81_adv));
                  r2000_2fff_tmp12 = simd_and(sequence_e2_81_adv, byte_range_87_89);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp14 = simd_andc(r2000_2fff_tmp13, r800_ffff_tmp2);
                  byte_b8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp14);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp4, tmp2);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp15, tmp9);
                  r2000_2fff_tmp17 = simd_andc(tmp7, r800_ffff_tmp2);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp17);
                  cc_range_2e2e_2e3c_3 = simd_or(r2000_2fff_tmp16, r2000_2fff_tmp18);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(24), sequence_e2_b8_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_b8_adv, cc_range_2e2e_2e3c_3);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r2000_2fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(21, 4);
                }
                r2000_4dff_tmp2 = simd_andc(tmp14, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp8);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(25, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp4, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(tmp4, r800_ffff_tmp2);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(25), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp1);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(26), sequence_e3_80_adv));
                  r3000_4dff_tmp5 = simd_and(sequence_e3_80_adv, byte_82);
                  struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r3000_4dff_tmp5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(25, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(21, 6);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 19);
            }
            r800_ffff_tmp10 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp11);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(27, 15))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp8);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp4, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(tmp14, tmp4);
              byte_93 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(27), ra000_ffff_tmp6));
              sequence_ea_93 = simd_and(ra000_ffff_tmp6, byte_93);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp4, tmp12);
              byte_bf = simd_and(ra000_ffff_tmp7, tmp15);
              carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(28), sequence_ea_93_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ea_93_adv, byte_bf);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp2);
              byte_98 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp9);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp11 = simd_andc(r800_ffff_tmp4, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(tmp7, basis_bits.bit_6);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(29), sequence_ea_98_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_98_adv, byte_range_8e_8f);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp1, tmp14);
              byte_9b = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp15 = simd_andc(tmp4, r800_ffff_tmp1);
              ra000_ffff_tmp16 = simd_andc(tmp14, ra000_ffff_tmp15);
              cc_range_a6f3_a6f7_3 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp16);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(30), sequence_ea_9b_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_9b_adv, cc_range_a6f3_a6f7_3);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp4, tmp2);
              byte_a1 = simd_and(ra000_ffff_tmp18, tmp6);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_b6_b7 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp19);
              carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(31), sequence_ea_a1_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a1_adv, byte_range_b6_b7);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp20);
              byte_a3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp5);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(32), sequence_ea_a3_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a3_adv, byte_range_8e_8f);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp21);
              byte_a4 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp3);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              byte_af = simd_and(ra000_ffff_tmp18, tmp15);
              carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(33), sequence_ea_a4_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_a4_adv, byte_af);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, tmp14);
              byte_a7 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp23);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp24 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_88_89 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp24);
              carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(34), sequence_ea_a7_adv));
              ra000_ffff_tmp25 = simd_and(sequence_ea_a7_adv, byte_range_88_89);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp25);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp1, tmp5);
              byte_a9 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp26);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp4, tmp7);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp27, r800_ffff_tmp2);
              carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(35), sequence_ea_a9_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_a9_adv, byte_range_9d_9f);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp28);
              byte_ab = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp14);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp29 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp29);
              carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(36), sequence_ea_ab_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ea_ab_adv, byte_range_b0_b1);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp30);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(37), sequence_ea_af_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_af_adv, byte_ab);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp31);
              byte_ef = simd_and(byte_range_e0_ef, tmp15);
              byte_b9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp26);
              carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(38), ra000_ffff_tmp32));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp32, byte_b9);
              byte_ef_adv = ra000_ffff_tmp32;
              ra000_ffff_tmp33 = simd_andc(tmp8, tmp4);
              ra000_ffff_tmp34 = simd_or(ra000_ffff_tmp33, ra000_ffff_tmp19);
              cc_range_fe52_fe56_3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp34);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(39), sequence_ef_b9_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ef_b9_adv, cc_range_fe52_fe56_3);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_andc(tmp7, r800_ffff_tmp2);
              byte_bc = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp36);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp37 = simd_and(ra000_ffff_tmp11, tmp10);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp4, tmp15);
              cc_range_ff01_ff1f_3 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(40), sequence_ef_bc_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ef_bc_adv, cc_range_ff01_ff1f_3);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_and(tmp7, tmp5);
              byte_bd = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp40);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(41), sequence_ef_bd_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ef_bd_adv, byte_a1);
              struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, ra000_ffff_tmp41);
            }
            else {
              carryQ.CarryDequeueEnqueue(27, 15);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(7, 35);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp12);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(42, 19))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp2 = simd_or(tmp4, r10000_10ffff_tmp1);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp2);
            r10000_10ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp4);
            byte_90 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp2);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(42), r10000_10ffff_tmp6));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp6, byte_90);
            byte_f0_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_and(r10000_10ffff_tmp3, tmp2);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp8, tmp5);
            byte_a9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(43), r10000_10ffff_tmp10));
            sequence_f0_90_a9 = simd_and(r10000_10ffff_tmp10, byte_a9);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp12);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(44), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_a9_adv, byte_range_96_97);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp13);
            byte_91 = simd_and(r10000_10ffff_tmp5, tmp6);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp14);
            byte_81 = simd_and(r10000_10ffff_tmp15, tmp6);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(45), r10000_10ffff_tmp16));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp16, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp16;
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp1);
            r10000_10ffff_tmp18 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp18), simd_andc(r10000_10ffff_tmp19, basis_bits.bit_4));
            byte_range_87_88 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp20);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(46), sequence_f0_91_81_adv));
            r10000_10ffff_tmp21 = simd_and(sequence_f0_91_81_adv, byte_range_87_88);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_andc(tmp8, tmp4);
            byte_82 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp22);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp3, tmp12);
            r10000_10ffff_tmp24 = simd_and(tmp7, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(47), sequence_f0_91_82_adv));
            r10000_10ffff_tmp25 = simd_and(sequence_f0_91_82_adv, byte_range_be_bf);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp25);
            r10000_10ffff_tmp26 = simd_andc(tmp14, tmp4);
            byte_83 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp26);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp27 = simd_or(tmp4, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp27);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(48), sequence_f0_91_83_adv));
            r10000_10ffff_tmp28 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp11, tmp5);
            byte_85 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp29);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp30 = simd_andc(r10000_10ffff_tmp15, tmp4);
            byte_range_81_83 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp1);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(49), sequence_f0_91_85_adv));
            r10000_10ffff_tmp31 = simd_and(sequence_f0_91_85_adv, byte_range_81_83);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp11, tmp14);
            byte_87 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp32);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp11);
            r10000_10ffff_tmp34 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_and(tmp7, tmp5);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp36);
            cc_range_111c5_111cd_4 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp37);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(50), sequence_f0_91_87_adv));
            r10000_10ffff_tmp38 = simd_and(sequence_f0_91_87_adv, cc_range_111c5_111cd_4);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_88 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp39);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp40 = simd_andc(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp23, basis_bits.bit_4);
            r10000_10ffff_tmp43 = simd_not(r10000_10ffff_tmp1);
            r10000_10ffff_tmp44 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp43), simd_andc(tmp14, basis_bits.bit_5));
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp44);
            cc_range_11238_1123b_4 = simd_or(r10000_10ffff_tmp41, r10000_10ffff_tmp45);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(51), sequence_f0_91_88_adv));
            r10000_10ffff_tmp46 = simd_and(sequence_f0_91_88_adv, cc_range_11238_1123b_4);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp46);
            byte_97 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp32);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp47 = simd_andc(basis_bits.bit_6, tmp4);
            r10000_10ffff_tmp48 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp9);
            cc_range_115c2_115c9_4 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp48);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(52), sequence_f0_91_97_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_91_97_adv, cc_range_115c2_115c9_4);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp49);
            byte_99 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp9);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_81_82 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp34);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(53), sequence_f0_91_99_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_91_99_adv, byte_range_81_82);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_and(r10000_10ffff_tmp11, tmp8);
            byte_96 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp51);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(54), r10000_10ffff_tmp52));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp52, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp52;
            byte_range_ae_af = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp24);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(55), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_96_a9_adv, byte_range_ae_af);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp8, tmp14);
            byte_ab = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp54);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            byte_b5 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp29);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(56), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp55 = simd_and(sequence_f0_96_ab_adv, byte_b5);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_andc(tmp7, r10000_10ffff_tmp1);
            byte_ac = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp56);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_b7_b8 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp20);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(57), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp57 = simd_and(sequence_f0_96_ac_adv, byte_range_b7_b8);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp57);
            byte_ad = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp36);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_84 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp58);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(58), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_96_ad_adv, byte_84);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp59);
            byte_9b = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp54);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp22);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(59), r10000_10ffff_tmp60));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp60, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp60;
            byte_9f = simd_and(r10000_10ffff_tmp5, tmp15);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(60), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_9b_b2_adv, byte_9f);
            struct_sterm_Y.cc = simd_or(struct_sterm_Y.cc, r10000_10ffff_tmp61);
          }
          else {
            carryQ.CarryDequeueEnqueue(42, 19);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 61);
        }
        carryQ.CarryQ_Adjust(61);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<61, 0> carryQ;
  };

  struct Property_uideo_Y {
  Property_uideo_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_uideo_Y & struct_uideo_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock byte_range_90_bf, r3000_4dff_tmp2, byte_e3_byte_range_90_bf;
		BitBlock byte_range_80_bf, r3000_4dff_tmp3, byte_e3_byte_range_90_bf_sfx;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock byte_range_80_b5, byte_e4_byte_range_80_b5, r3000_4dff_tmp8;
		BitBlock byte_e4_byte_range_80_b5_sfx, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, byte_b6, byte_e4_adv;
		BitBlock sequence_e4_b6, r3000_4dff_tmp13, sequence_e4_b6_byte_range_80_b5;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_b8_bf, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock byte_range_e5_e9, r800_ffff_tmp18, byte_e4_byte_range_b8_bf;
		BitBlock r4e00_9fff_tmp1, byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2;
		BitBlock r4e00_9fff_tmp3, r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12, byte_80;
		BitBlock byte_e9_adv, sequence_e9_80, r4e00_9fff_tmp13, byte_range_80_8c;
		BitBlock r4e00_9fff_tmp14, sequence_e9_80_byte_range_80_8c, r800_ffff_tmp19;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, byte_a8;
		BitBlock ra000_ffff_tmp7, sequence_ef_a8, byte_ef_adv, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, cc_range_fa0e_fa27_3;
		BitBlock sequence_ef_a8_adv, ra000_ffff_tmp33, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_range_a0_a9;
		BitBlock r10000_10ffff_tmp8, byte_f0_byte_range_a0_a9, r10000_10ffff_tmp9;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp10;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_aa, byte_f0_adv, sequence_f0_aa, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, sequence_f0_aa_adv, sequence_f0_aa_80;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, byte_range_80_96;
		BitBlock r10000_10ffff_tmp22, sequence_f0_aa_80_byte_range_80_96;
		BitBlock r10000_10ffff_tmp23, byte_ab, sequence_f0_ab, sequence_f0_ab_adv;
		BitBlock sequence_f0_ab_80, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, byte_range_80_b4;
		BitBlock r10000_10ffff_tmp28, sequence_f0_ab_80_byte_range_80_b4;




        struct_uideo_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 19))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 12))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 4))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp1);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp2));
                  byte_e3_byte_range_90_bf = simd_and(r3000_4dff_tmp2, byte_range_90_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(2), r3000_4dff_tmp3));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp3, byte_range_80_bf);
                  struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp5 = simd_or(basis_bits.bit_4, r3000_4dff_tmp4);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_3, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_and(basis_bits.bit_2, r3000_4dff_tmp6);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp7);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp8, byte_range_80_b5);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(3), r3000_4dff_tmp8));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp8, byte_range_80_bf);
                  struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  r3000_4dff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp10 = simd_and(byte_range_80_bf, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp11);
                  byte_b6 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp12);
                  byte_e4_adv = r800_ffff_tmp8;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(4), r3000_4dff_tmp13));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp13, byte_range_80_b5);
                  struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(5, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp13;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(5), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(6), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(7), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              r4e00_9fff_tmp12 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(8), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp13);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(9), r4e00_9fff_tmp14));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp14, byte_range_80_8c);
              struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 5);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(10, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(10), ra000_ffff_tmp7));
              sequence_ef_a8 = simd_and(ra000_ffff_tmp7, byte_a8);
              byte_ef_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp9 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp13 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp15 = simd_andc(ra000_ffff_tmp14, r800_ffff_tmp1);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_or(ra000_ffff_tmp11, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              ra000_ffff_tmp19 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp20 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp19), simd_andc(ra000_ffff_tmp2, basis_bits.bit_5));
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp17, ra000_ffff_tmp21);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp3);
              ra000_ffff_tmp24 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp15);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_andc(ra000_ffff_tmp4, basis_bits.bit_4);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp20);
              ra000_ffff_tmp29 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_5, ra000_ffff_tmp2);
              ra000_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(ra000_ffff_tmp30, basis_bits.bit_4));
              ra000_ffff_tmp32 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp31);
              cc_range_fa0e_fa27_3 = simd_or(ra000_ffff_tmp29, ra000_ffff_tmp32);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_ef_a8, carryQ.get_carry_in(11), sequence_ef_a8_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ef_a8_adv, cc_range_fa0e_fa27_3);
              struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, ra000_ffff_tmp33);
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 12);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(12, 7))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp6);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(12), r10000_10ffff_tmp8));
            byte_f0_byte_range_a0_a9 = simd_and(r10000_10ffff_tmp8, byte_range_a0_a9);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(13), r10000_10ffff_tmp9));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp9, byte_range_80_bf);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(14), r10000_10ffff_tmp10));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_aa = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            byte_f0_adv = r10000_10ffff_tmp8;
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp15);
            byte_80 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp3);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(15), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp21);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(16), r10000_10ffff_tmp22));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp22, byte_range_80_96);
            struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp18);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp23);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(17), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp26);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp27);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(18), r10000_10ffff_tmp28));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp28, byte_range_80_b4);
            struct_uideo_Y.cc = simd_or(struct_uideo_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
          }
          else {
            carryQ.CarryDequeueEnqueue(12, 7);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 19);
        }
        carryQ.CarryQ_Adjust(19);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<19, 0> carryQ;
  };

  struct Property_ahex_Y {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ahex_Y & struct_ahex_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20;
		BitBlock cc_range_30_61_1;




        struct_ahex_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_andc(tmp3, tmp5);
        tmp7 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp7, tmp8);
        tmp10 = simd_andc(tmp9, basis_bits.bit_4);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_not(tmp11);
        tmp13 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp14 = simd_or(simd_and(basis_bits.bit_5, tmp12), simd_andc(tmp13, basis_bits.bit_5));
        tmp15 = simd_and(tmp10, tmp14);
        tmp16 = simd_or(tmp6, tmp15);
        tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_and(tmp7, tmp17);
        tmp19 = simd_andc(tmp18, basis_bits.bit_4);
        tmp20 = simd_and(tmp19, tmp14);
        cc_range_30_61_1 = simd_or(tmp16, tmp20);
        struct_ahex_Y.cc = simd_or(struct_ahex_Y.cc, cc_range_30_61_1);
  }
  IDISA_INLINE void clear() { 
 }
  
  
  };

  struct Property_pat_syn_Y {
  Property_pat_syn_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_pat_syn_Y & struct_pat_syn_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, cc_range_21_7b_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, cc_range_a1_bf_2, byte_c2_adv, r80_7ff_tmp35;
		BitBlock r80_7ff_tmp36, byte_c3, r80_7ff_tmp37, r80_7ff_tmp38;
		BitBlock cc_range_d7_f7_2, byte_c3_adv, r80_7ff_tmp39, byte_range_e0_ef;
		BitBlock byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2, byte_e4;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1;
		BitBlock byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, byte_80, r2000_2fff_tmp2, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, cc_range_2010_2030_3, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_81;
		BitBlock sequence_e2_81, r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock cc_range_2041_2055_3, sequence_e2_81_adv, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, byte_86, sequence_e2_86, byte_range_90_bf;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, byte_range_87_90;
		BitBlock byte_e2_byte_range_87_90, byte_range_80_bf, r2000_2fff_tmp29;
		BitBlock byte_e2_byte_range_87_90_sfx, r2000_2fff_tmp30, byte_91;
		BitBlock sequence_e2_91, byte_range_80_9f, r2000_2fff_tmp31;
		BitBlock sequence_e2_91_byte_range_80_9f, byte_94, sequence_e2_94;
		BitBlock r2000_2fff_tmp32, sequence_e2_94_byte_range_80_bf, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, byte_9d, sequence_e2_9d, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock byte_range_80_b5, r2000_2fff_tmp39, sequence_e2_9d_byte_range_80_b5;
		BitBlock r2000_2fff_tmp40, byte_9e, sequence_e2_9e, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, byte_range_94_bf, r2000_2fff_tmp43;
		BitBlock sequence_e2_9e_byte_range_94_bf, r2000_2fff_tmp44, byte_9f;
		BitBlock sequence_e2_9f, r2000_2fff_tmp45, sequence_e2_9f_byte_range_80_bf;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48, byte_b8;
		BitBlock sequence_e2_b8, r2000_2fff_tmp49, sequence_e2_b8_byte_range_80_bf;
		BitBlock r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, cc_range_3001_3030_3, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp13, r800_ffff_tmp9, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3, byte_b4, ra000_ffff_tmp4;
		BitBlock sequence_ef_b4, byte_ef_adv, ra000_ffff_tmp5, byte_range_be_bf;
		BitBlock sequence_ef_b4_adv, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, byte_b9, sequence_ef_b9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_85_86;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp13;




        struct_pat_syn_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp5 = simd_or(basis_bits.bit_5, tmp4);
        tmp6 = simd_or(basis_bits.bit_4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp10 = simd_or(tmp9, tmp4);
        tmp11 = simd_or(tmp8, tmp10);
        tmp12 = simd_not(tmp11);
        tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp15 = simd_and(basis_bits.bit_4, tmp14);
        tmp16 = simd_and(tmp13, tmp15);
        tmp17 = simd_or(simd_and(basis_bits.bit_1, tmp12), simd_andc(tmp16, basis_bits.bit_1));
        tmp18 = simd_andc(tmp17, basis_bits.bit_0);
        tmp19 = simd_or(tmp7, tmp18);
        tmp20 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp21 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp22 = simd_and(tmp20, tmp21);
        tmp23 = simd_and(tmp22, basis_bits.bit_4);
        tmp24 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp25 = simd_xor(basis_bits.bit_5, tmp24);
        tmp26 = simd_and(tmp23, tmp25);
        tmp27 = simd_or(tmp19, tmp26);
        tmp28 = simd_and(tmp20, tmp2);
        tmp29 = simd_andc(tmp28, tmp10);
        tmp30 = simd_or(tmp27, tmp29);
        tmp31 = simd_and(tmp20, tmp13);
        tmp32 = simd_and(tmp31, basis_bits.bit_4);
        tmp33 = simd_and(tmp32, tmp25);
        cc_range_21_7b_1 = simd_or(tmp30, tmp33);
        struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, cc_range_21_7b_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 19))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp8);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp9);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp5);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_or(r80_7ff_tmp7, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_not(tmp4);
            r80_7ff_tmp15 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp14), simd_andc(tmp24, basis_bits.bit_5));
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp12, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp19 = simd_and(r80_7ff_tmp18, r80_7ff_tmp2);
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp5, r80_7ff_tmp19);
            r80_7ff_tmp21 = simd_or(r80_7ff_tmp17, r80_7ff_tmp20);
            r80_7ff_tmp22 = simd_and(r80_7ff_tmp4, tmp13);
            r80_7ff_tmp23 = simd_or(tmp9, basis_bits.bit_6);
            r80_7ff_tmp24 = simd_andc(r80_7ff_tmp22, r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_or(r80_7ff_tmp21, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp27 = simd_and(r80_7ff_tmp26, r80_7ff_tmp2);
            r80_7ff_tmp28 = simd_and(r80_7ff_tmp22, r80_7ff_tmp27);
            r80_7ff_tmp29 = simd_or(r80_7ff_tmp25, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_and(r80_7ff_tmp8, tmp24);
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp22, r80_7ff_tmp30);
            r80_7ff_tmp32 = simd_or(r80_7ff_tmp29, r80_7ff_tmp31);
            r80_7ff_tmp33 = simd_and(r80_7ff_tmp18, tmp24);
            r80_7ff_tmp34 = simd_and(r80_7ff_tmp22, r80_7ff_tmp33);
            cc_range_a1_bf_2 = simd_or(r80_7ff_tmp32, r80_7ff_tmp34);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp35 = simd_and(byte_c2_adv, cc_range_a1_bf_2);
            struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r80_7ff_tmp35);
            r80_7ff_tmp36 = simd_andc(tmp24, tmp9);
            byte_c3 = simd_and(r80_7ff_tmp1, r80_7ff_tmp36);
            r80_7ff_tmp37 = simd_and(r80_7ff_tmp26, tmp24);
            r80_7ff_tmp38 = simd_and(r80_7ff_tmp4, basis_bits.bit_3);
            cc_range_d7_f7_2 = simd_and(r80_7ff_tmp37, r80_7ff_tmp38);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp39 = simd_and(byte_c3_adv, cc_range_d7_f7_2);
            struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r80_7ff_tmp39);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 17))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp9);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp4);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(3, 13))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, tmp9);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(3, 13))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp9);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(3, 11))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp8);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp10);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(3), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp4 = simd_not(r2000_2fff_tmp3);
                  r2000_2fff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp4), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, tmp13);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_5, tmp24);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_4, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  cc_range_2010_2030_3 = simd_or(r2000_2fff_tmp6, r2000_2fff_tmp10);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(4), sequence_e2_80_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_80_adv, cc_range_2010_2030_3);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, tmp9);
                  byte_81 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp13);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp14 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp15 = simd_not(tmp9);
                  r2000_2fff_tmp16 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp15), simd_andc(tmp10, basis_bits.bit_3));
                  r2000_2fff_tmp17 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp3, tmp21);
                  r2000_2fff_tmp19 = simd_not(r2000_2fff_tmp8);
                  r2000_2fff_tmp20 = simd_and(basis_bits.bit_5, tmp4);
                  r2000_2fff_tmp21 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp19), simd_andc(r2000_2fff_tmp20, basis_bits.bit_4));
                  r2000_2fff_tmp22 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp21);
                  cc_range_2041_2055_3 = simd_or(r2000_2fff_tmp17, r2000_2fff_tmp22);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(5), sequence_e2_81_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_81_adv, cc_range_2041_2055_3);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp24);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  byte_range_90_bf = simd_and(r800_ffff_tmp3, tmp8);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(6), sequence_e2_86_adv));
                  r2000_2fff_tmp25 = simd_and(sequence_e2_86_adv, byte_range_90_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r2000_2fff_tmp25);
                  r2000_2fff_tmp26 = simd_not(tmp10);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_4, r2000_2fff_tmp8);
                  r2000_2fff_tmp28 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp26), simd_andc(r2000_2fff_tmp27, basis_bits.bit_3));
                  byte_range_87_90 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp28);
                  byte_e2_byte_range_87_90 = simd_and(byte_e2_adv, byte_range_87_90);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_87_90, carryQ.get_carry_in(7), r2000_2fff_tmp29));
                  byte_e2_byte_range_87_90_sfx = simd_and(r2000_2fff_tmp29, byte_range_80_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, byte_e2_byte_range_87_90_sfx);
                  r2000_2fff_tmp30 = simd_and(byte_range_80_bf, tmp21);
                  byte_91 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp13);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(8), r2000_2fff_tmp31));
                  sequence_e2_91_byte_range_80_9f = simd_and(r2000_2fff_tmp31, byte_range_80_9f);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_91_byte_range_80_9f);
                  byte_94 = simd_and(r2000_2fff_tmp30, r800_ffff_tmp2);
                  sequence_e2_94 = simd_and(byte_e2_adv, byte_94);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_94, carryQ.get_carry_in(9), r2000_2fff_tmp32));
                  sequence_e2_94_byte_range_80_bf = simd_and(r2000_2fff_tmp32, byte_range_80_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_94_byte_range_80_bf);
                  r2000_2fff_tmp33 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp33, r2000_2fff_tmp12);
                  byte_9d = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp34);
                  sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
                  r2000_2fff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp36 = simd_or(basis_bits.bit_4, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_and(basis_bits.bit_3, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(basis_bits.bit_2, r2000_2fff_tmp37);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r2000_2fff_tmp38);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(10), r2000_2fff_tmp39));
                  sequence_e2_9d_byte_range_80_b5 = simd_and(r2000_2fff_tmp39, byte_range_80_b5);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_9d_byte_range_80_b5);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp33, r2000_4dff_tmp1);
                  byte_9e = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp40);
                  sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
                  r2000_2fff_tmp41 = simd_and(basis_bits.bit_3, tmp9);
                  r2000_2fff_tmp42 = simd_or(basis_bits.bit_2, r2000_2fff_tmp41);
                  byte_range_94_bf = simd_and(byte_range_80_bf, r2000_2fff_tmp42);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(11), r2000_2fff_tmp43));
                  sequence_e2_9e_byte_range_94_bf = simd_and(r2000_2fff_tmp43, byte_range_94_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_9e_byte_range_94_bf);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp33, tmp24);
                  byte_9f = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp44);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(12), r2000_2fff_tmp45));
                  sequence_e2_9f_byte_range_80_bf = simd_and(r2000_2fff_tmp45, byte_range_80_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_9f_byte_range_80_bf);
                  r2000_2fff_tmp46 = simd_and(byte_range_80_bf, tmp13);
                  r2000_2fff_tmp47 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp48 = simd_andc(r2000_2fff_tmp47, tmp4);
                  byte_b8 = simd_and(r2000_2fff_tmp46, r2000_2fff_tmp48);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(13), r2000_2fff_tmp49));
                  sequence_e2_b8_byte_range_80_bf = simd_and(r2000_2fff_tmp49, byte_range_80_bf);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, sequence_e2_b8_byte_range_80_bf);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 11);
                }
                r2000_4dff_tmp3 = simd_andc(tmp24, tmp9);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(14, 2))) {
                  r3000_4dff_tmp1 = simd_andc(r800_ffff_tmp3, tmp8);
                  byte_80 = simd_andc(r3000_4dff_tmp1, tmp10);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), r3000_4dff_tmp2));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp2, byte_80);
                  byte_e3_adv = r3000_4dff_tmp2;
                  r3000_4dff_tmp3 = simd_andc(r3000_4dff_tmp1, tmp9);
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp3, tmp4);
                  r3000_4dff_tmp5 = simd_or(basis_bits.bit_3, tmp10);
                  r3000_4dff_tmp6 = simd_not(r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r3000_4dff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp6), simd_andc(r3000_4dff_tmp7, basis_bits.bit_2));
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(r3000_4dff_tmp4, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp3, tmp13);
                  r3000_4dff_tmp12 = simd_andc(r3000_4dff_tmp11, tmp10);
                  cc_range_3001_3030_3 = simd_or(r3000_4dff_tmp10, r3000_4dff_tmp12);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
                  r3000_4dff_tmp13 = simd_and(sequence_e3_80_adv, cc_range_3001_3030_3);
                  struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, r3000_4dff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 13);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 13);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(16, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp24);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp3, tmp13);
              byte_b4 = simd_and(ra000_ffff_tmp3, r800_ffff_tmp2);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), ra000_ffff_tmp4));
              sequence_ef_b4 = simd_and(ra000_ffff_tmp4, byte_b4);
              byte_ef_adv = ra000_ffff_tmp4;
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp5);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(17), sequence_ef_b4_adv));
              ra000_ffff_tmp6 = simd_and(sequence_ef_b4_adv, byte_range_be_bf);
              struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, ra000_ffff_tmp6);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp8);
              byte_b9 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp9);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp10 = simd_andc(r800_ffff_tmp3, tmp8);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp1);
              ra000_ffff_tmp12 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_85_86 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(18), sequence_ef_b9_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_b9_adv, byte_range_85_86);
              struct_pat_syn_Y.cc = simd_or(struct_pat_syn_Y.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 17);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 19);
        }
        carryQ.CarryQ_Adjust(19);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<19, 0> carryQ;
  };

  struct Property_oidc_Y {
  Property_oidc_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_oidc_Y & struct_oidc_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_b7, byte_c2_adv, r80_7ff_tmp12, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, r100_3ff_tmp2, r100_3ff_tmp3, byte_cd;
		BitBlock byte_range_b0_bf, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock byte_range_ce_cf, r100_3ff_tmp7, r370_3ff_tmp1, byte_ce;
		BitBlock r370_3ff_tmp2, byte_87, byte_ce_adv, r370_3ff_tmp3, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, byte_8d;
		BitBlock r1000_1fff_tmp5, sequence_e1_8d, byte_e1_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock byte_range_a9_b1, sequence_e1_8d_adv, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, r1000_1fff_tmp14, byte_a7;
		BitBlock sequence_e1_a7, r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, r1000_1fff_tmp19, byte_9a, sequence_e1_a7_adv;
		BitBlock r1000_1fff_tmp20;




        struct_oidc_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 7))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_b7 = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_b7);
            struct_oidc_Y.cc = simd_or(struct_oidc_Y.cc, r80_7ff_tmp12);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp8;
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(1), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp1, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(2, 1))) {
                r370_3ff_tmp1 = simd_and(r100_3ff_tmp1, r80_7ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                byte_87 = simd_and(r370_3ff_tmp2, r80_7ff_tmp11);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(2), byte_ce_adv));
                r370_3ff_tmp3 = simd_and(byte_ce_adv, byte_87);
                struct_oidc_Y.cc = simd_or(struct_oidc_Y.cc, r370_3ff_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(4, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_and(r1000_1fff_tmp3, r800_1fff_tmp1);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r1000_1fff_tmp5));
                  sequence_e1_8d = simd_and(r1000_1fff_tmp5, byte_8d);
                  byte_e1_adv = r1000_1fff_tmp5;
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp7 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp8 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, r1000_1fff_tmp8);
                  r1000_1fff_tmp10 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp7), simd_andc(r1000_1fff_tmp9, basis_bits.bit_3));
                  byte_range_a9_b1 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp10);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(5), sequence_e1_8d_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_8d_adv, byte_range_a9_b1);
                  struct_oidc_Y.cc = simd_or(struct_oidc_Y.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp13);
                  byte_a7 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp14);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  byte_9a = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp19);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(6), sequence_e1_a7_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_a7_adv, byte_9a);
                  struct_oidc_Y.cc = simd_or(struct_oidc_Y.cc, r1000_1fff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 7);
        }
        carryQ.CarryQ_Adjust(7);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<7, 0> carryQ;
  };

  struct Property_hex_Y {
  Property_hex_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_hex_Y & struct_hex_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20;
		BitBlock cc_range_30_61_1, byte_range_c0_ff, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, byte_ef;
		BitBlock ra000_ffff_tmp3, ra000_ffff_tmp4, ra000_ffff_tmp5, byte_bc;
		BitBlock ra000_ffff_tmp6, sequence_ef_bc, byte_ef_adv, ra000_ffff_tmp7;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, cc_range_ff10_ff21_3, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15, byte_bd;
		BitBlock sequence_ef_bd, ra000_ffff_tmp16, ra000_ffff_tmp17, byte_range_81_86;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp18;




        struct_hex_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_andc(tmp3, tmp5);
        tmp7 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp7, tmp8);
        tmp10 = simd_andc(tmp9, basis_bits.bit_4);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_not(tmp11);
        tmp13 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp14 = simd_or(simd_and(basis_bits.bit_5, tmp12), simd_andc(tmp13, basis_bits.bit_5));
        tmp15 = simd_and(tmp10, tmp14);
        tmp16 = simd_or(tmp6, tmp15);
        tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_and(tmp7, tmp17);
        tmp19 = simd_andc(tmp18, basis_bits.bit_4);
        tmp20 = simd_and(tmp19, tmp14);
        cc_range_30_61_1 = simd_or(tmp16, tmp20);
        struct_hex_Y.cc = simd_or(struct_hex_Y.cc, cc_range_30_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp17);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, tmp4);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp11);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp4 = simd_and(ra000_ffff_tmp3, tmp2);
              ra000_ffff_tmp5 = simd_andc(ra000_ffff_tmp1, tmp13);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp6));
              sequence_ef_bc = simd_and(ra000_ffff_tmp6, byte_bc);
              byte_ef_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp8, tmp5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp3, tmp17);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_4);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp11, tmp14);
              cc_range_ff10_ff21_3 = simd_or(ra000_ffff_tmp9, ra000_ffff_tmp12);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(1), sequence_ef_bc_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_bc_adv, cc_range_ff10_ff21_3);
              struct_hex_Y.cc = simd_or(struct_hex_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp14);
              byte_bd = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp15);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp3, tmp8);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp16, basis_bits.bit_4);
              byte_range_81_86 = simd_and(ra000_ffff_tmp17, tmp14);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(2), sequence_ef_bd_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ef_bd_adv, byte_range_81_86);
              struct_hex_Y.cc = simd_or(struct_hex_Y.cc, ra000_ffff_tmp18);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_dash_Y {
  Property_dash_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_dash_Y & struct_dash_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_2d, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, byte_range_d0_d7;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6;
		BitBlock byte_range_80_8f, r400_5ff_tmp7, r400_5ff_tmp8, r400_5ff_tmp9;
		BitBlock r500_58f_tmp1, r500_58f_tmp2, byte_d4, r500_58f_tmp3;
		BitBlock byte_range_b0_bf, r500_58f_tmp4, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock byte_d5, r500_58f_tmp7, r500_58f_tmp8, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock byte_8a, byte_d6_adv, r530_58f_tmp3, byte_range_90_bf, r400_5ff_tmp10;
		BitBlock r400_5ff_tmp11, r400_5ff_tmp12, byte_d7, r400_5ff_tmp13;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, byte_be, r590_5ff_tmp4;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, byte_90, r1000_1fff_tmp4, sequence_e1_90;
		BitBlock byte_e1_adv, r1000_1fff_tmp5, r1000_1fff_tmp6, byte_80;
		BitBlock sequence_e1_90_adv, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_a0;
		BitBlock sequence_e1_a0, r1000_1fff_tmp9, r1000_1fff_tmp10, byte_86;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp11, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_range_90_95;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp9, r2000_2fff_tmp10, byte_81;
		BitBlock sequence_e2_81, r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, cc_range_2053_207b_3;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp19, byte_82, sequence_e2_82;
		BitBlock byte_8b, sequence_e2_82_adv, r2000_2fff_tmp20, r2000_2fff_tmp21;
		BitBlock byte_88, sequence_e2_88, byte_92, sequence_e2_88_adv;
		BitBlock r2000_2fff_tmp22, byte_b8, sequence_e2_b8, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, cc_range_2e17_2e3a_3;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp29, r2000_2fff_tmp30, byte_b9;
		BitBlock sequence_e2_b9, sequence_e2_b9_adv, r2000_2fff_tmp31, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock cc_range_301c_3030_3, sequence_e3_80_adv, r3000_4dff_tmp12;
		BitBlock sequence_e3_82, r3000_4dff_tmp13, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock sequence_ef_b8, byte_ef_adv, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_range_b1_b2, sequence_ef_b8_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, sequence_ef_b9, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, cc_range_fe58_fe63_3, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, byte_bc, sequence_ef_bc;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, byte_8d, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp22;




        struct_dash_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        byte_2d = simd_and(tmp3, tmp6);
        struct_dash_Y.cc = simd_or(struct_dash_Y.cc, byte_2d);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 20))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp2, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(0, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp2, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp2, r400_5ff_tmp4);
              r400_5ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r400_5ff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r400_5ff_tmp5, r400_5ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), r400_5ff_tmp7));
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp7, byte_range_80_8f);
              r400_5ff_tmp9 = simd_or(byte_range_d4_d5, r400_5ff_tmp8);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(1, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp2, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r400_5ff_tmp5, r500_58f_tmp3);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(1), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_and(r400_5ff_tmp1, tmp5);
                byte_d5 = simd_and(r80_7ff_tmp2, r500_58f_tmp6);
                r500_58f_tmp7 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp8 = simd_or(r500_58f_tmp7, r400_5ff_tmp8);
                if (bitblock::any(r500_58f_tmp8)) {
                  r530_58f_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, r400_5ff_tmp3);
                  byte_8a = simd_and(byte_range_80_8f, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp7;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_8a);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
              byte_range_90_bf = simd_and(r400_5ff_tmp5, r400_5ff_tmp6);
              r400_5ff_tmp10 = simd_and(r400_5ff_tmp7, byte_range_90_bf);
              r400_5ff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp12 = simd_and(r400_5ff_tmp1, r400_5ff_tmp11);
              byte_d7 = simd_and(r80_7ff_tmp2, r400_5ff_tmp12);
              r400_5ff_tmp13 = simd_or(r400_5ff_tmp10, byte_d7);
              if (bitblock::any(r400_5ff_tmp13)) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp2 = simd_and(r400_5ff_tmp5, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_and(tmp4, r400_5ff_tmp3);
                byte_be = simd_and(r590_5ff_tmp2, r590_5ff_tmp3);
                byte_d6_adv = r400_5ff_tmp7;
                r590_5ff_tmp4 = simd_and(byte_d6_adv, byte_be);
                struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r590_5ff_tmp4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 18))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 13))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(3, 3))) {
                r800_1fff_tmp1 = simd_andc(tmp5, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(3, 3))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_90 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r1000_1fff_tmp4));
                  sequence_e1_90 = simd_and(r1000_1fff_tmp4, byte_90);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp6 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp5);
                  byte_80 = simd_andc(r1000_1fff_tmp6, r1000_1fff_tmp3);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(4), sequence_e1_90_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_90_adv, byte_80);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_a0 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp3);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp9);
                  byte_86 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp10);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(5), sequence_e1_a0_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_a0_adv, byte_86);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r1000_1fff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(6, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 7))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_90_95 = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_80_adv, byte_range_90_95);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_andc(tmp5, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp10);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp12 = simd_andc(r2000_2fff_tmp11, r800_ffff_tmp1);
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp17 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp11);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp17);
                  cc_range_2053_207b_3 = simd_or(r2000_2fff_tmp13, r2000_2fff_tmp18);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(8), sequence_e2_81_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_81_adv, cc_range_2053_207b_3);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp19);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  byte_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(9), sequence_e2_82_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_82_adv, byte_8b);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_andc(r2000_2fff_tmp16, r800_ffff_tmp3);
                  byte_88 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp21);
                  sequence_e2_88 = simd_and(byte_e2_adv, byte_88);
                  byte_92 = simd_and(r2000_2fff_tmp6, r2000_4dff_tmp2);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_88, carryQ.get_carry_in(10), sequence_e2_88_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_88_adv, byte_92);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp22);
                  byte_b8 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp21);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp23 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp11);
                  r2000_2fff_tmp24 = simd_and(r2000_2fff_tmp16, r2000_4dff_tmp1);
                  r2000_2fff_tmp25 = simd_or(r2000_2fff_tmp23, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_and(r2000_2fff_tmp16, basis_bits.bit_6);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp27);
                  cc_range_2e17_2e3a_3 = simd_or(r2000_2fff_tmp26, r2000_2fff_tmp28);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(11), sequence_e2_b8_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_b8_adv, cc_range_2e17_2e3a_3);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp16, tmp5);
                  byte_b9 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp30);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(12), sequence_e2_b9_adv));
                  r2000_2fff_tmp31 = simd_and(sequence_e2_b9_adv, byte_80);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r2000_2fff_tmp31);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 7);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(13, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(13), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_andc(tmp4, r800_ffff_tmp3);
                  r3000_4dff_tmp8 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(r3000_4dff_tmp10, r3000_4dff_tmp3);
                  cc_range_301c_3030_3 = simd_or(r3000_4dff_tmp8, r3000_4dff_tmp11);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(14), sequence_e3_80_adv));
                  r3000_4dff_tmp12 = simd_and(sequence_e3_80_adv, cc_range_301c_3030_3);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r3000_4dff_tmp12);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp13 = simd_and(r800_ffff_tmp5, tmp2);
                  byte_a0 = simd_andc(r3000_4dff_tmp13, r3000_4dff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(15), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_a0);
                  struct_dash_Y.cc = simd_or(struct_dash_Y.cc, r3000_4dff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 13);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(16, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp4, ra000_ffff_tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), ra000_ffff_tmp7));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp7, byte_b8);
              byte_ef_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp4, r800_ffff_tmp1);
              ra000_ffff_tmp9 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              byte_range_b1_b2 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(17), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_range_b1_b2);
              struct_dash_Y.cc = simd_or(struct_dash_Y.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp5, tmp5);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp13 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp6);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp5, tmp2);
              ra000_ffff_tmp16 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp1);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_fe58_fe63_3 = simd_or(ra000_ffff_tmp14, ra000_ffff_tmp17);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(18), sequence_ef_b9_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ef_b9_adv, cc_range_fe58_fe63_3);
              struct_dash_Y.cc = simd_or(struct_dash_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp19);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp21 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp20);
              byte_8d = simd_and(ra000_ffff_tmp21, tmp6);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(19), sequence_ef_bc_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ef_bc_adv, byte_8d);
              struct_dash_Y.cc = simd_or(struct_dash_Y.cc, ra000_ffff_tmp22);
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 18);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 20);
        }
        carryQ.CarryQ_Adjust(20);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<20, 0> carryQ;
  };

  struct Property_ext_Y {
  Property_ext_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ext_Y & struct_ext_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_b7, byte_c2_adv, r80_7ff_tmp12, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2;
		BitBlock byte_ca, byte_range_b0_bf, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock r100_2ff_tmp5, byte_cb, r100_2ff_tmp6, r2b0_2ff_tmp1, r2b0_2ff_tmp2;
		BitBlock r2b0_2ff_tmp3, byte_range_90_91, byte_cb_adv, r2b0_2ff_tmp4;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, byte_range_d8_db;
		BitBlock r600_6ff_tmp1, r600_6ff_tmp2, byte_d9, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock r600_6ff_tmp5, byte_80, byte_d9_adv, r600_6ff_tmp6, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, byte_range_de_df, r780_7ff_tmp1, byte_df;
		BitBlock r7c0_7ff_tmp1, byte_ba, byte_df_adv, r7c0_7ff_tmp2, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_b9, r800_fff_tmp6, sequence_e0_b9;
		BitBlock byte_e0_adv, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, byte_86, sequence_e0_b9_adv, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp14, r800_1fff_tmp2, r800_1fff_tmp3;
		BitBlock byte_e1, r1000_1fff_tmp1, byte_a0, r1000_1fff_tmp2, sequence_e1_a0;
		BitBlock byte_e1_adv, r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_8a, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp8, byte_a1, sequence_e1_a1, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, byte_83, sequence_e1_a1_adv, r1000_1fff_tmp11;
		BitBlock byte_aa, sequence_e1_aa, r1000_1fff_tmp12, byte_a7;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, byte_b0, sequence_e1_b0, r1000_1fff_tmp16, byte_b6;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp17, byte_b1, sequence_e1_b1;
		BitBlock r1000_1fff_tmp18, sequence_e1_b1_adv, r1000_1fff_tmp19;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, r3000_4dff_tmp11;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, cc_range_3005_3031_3;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp14, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, byte_82, sequence_e3_82, r3000_4dff_tmp17;
		BitBlock r3000_4dff_tmp18, r3000_4dff_tmp19, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, byte_range_9d_9e, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp22, sequence_e3_83, r3000_4dff_tmp23, byte_range_bc_be;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp24, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, sequence_ea_80, byte_ea_adv;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock byte_95, sequence_ea_80_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock byte_98, sequence_ea_98, ra000_ffff_tmp14, ra000_ffff_tmp15, byte_8c;
		BitBlock sequence_ea_98_adv, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, sequence_ea_a7, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock cc_range_a9cf_a9e6_3, sequence_ea_a7_adv, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, byte_a9, sequence_ea_a9, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, sequence_ea_a9_adv, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, byte_ab, sequence_ea_ab, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, cc_range_aadd_aaf3_3;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp36, byte_ef, byte_bd;
		BitBlock ra000_ffff_tmp37, sequence_ef_bd, byte_ef_adv, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp38, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91, r10000_10ffff_tmp9;
		BitBlock sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_8d;
		BitBlock r10000_10ffff_tmp14, sequence_f0_91_8d, sequence_f0_91_adv, byte_9d;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, byte_97, sequence_f0_91_97;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, byte_range_86_88, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock byte_96, sequence_f0_96, r10000_10ffff_tmp26, byte_ad;
		BitBlock r10000_10ffff_tmp27, sequence_f0_96_ad, sequence_f0_96_adv;
		BitBlock r10000_10ffff_tmp28, byte_range_82_83, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp29;




        struct_ext_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 33))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_b7 = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_b7);
            struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r80_7ff_tmp12);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 2))) {
                r100_2ff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp2 = simd_and(r100_2ff_tmp1, r80_7ff_tmp4);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp2);
                byte_range_b0_bf = r80_7ff_tmp8;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp3));
                r100_2ff_tmp4 = simd_and(r100_2ff_tmp3, byte_range_b0_bf);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp1, r80_7ff_tmp10);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                r100_2ff_tmp6 = simd_or(r100_2ff_tmp4, byte_cb);
                if ((bitblock::any(r100_2ff_tmp6) || carryQ.CarryTest(2, 1))) {
                  r2b0_2ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2b0_2ff_tmp2 = simd_and(r80_7ff_tmp6, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp3 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                  byte_range_90_91 = simd_andc(r2b0_2ff_tmp2, r2b0_2ff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(2), byte_cb_adv));
                  r2b0_2ff_tmp4 = simd_and(byte_cb_adv, byte_range_90_91);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r2b0_2ff_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp15);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(3, 1))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp15, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp14, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              r600_6ff_tmp4 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp5 = simd_or(r80_7ff_tmp3, r600_6ff_tmp4);
              byte_80 = simd_andc(r600_6ff_tmp3, r600_6ff_tmp5);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(3), byte_d9_adv));
              r600_6ff_tmp6 = simd_and(byte_d9_adv, byte_80);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r600_6ff_tmp6);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 1);
            }
            r80_7ff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp17 = simd_and(r80_7ff_tmp16, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp14, r80_7ff_tmp17);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(4, 1))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp16, r80_7ff_tmp10);
              byte_df = simd_and(r80_7ff_tmp14, r780_7ff_tmp1);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(4, 1))) {
                r7c0_7ff_tmp1 = simd_and(r80_7ff_tmp15, r80_7ff_tmp4);
                byte_ba = simd_and(r80_7ff_tmp8, r7c0_7ff_tmp1);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(4), byte_df_adv));
                r7c0_7ff_tmp2 = simd_and(byte_df_adv, byte_ba);
                struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r7c0_7ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 22))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(6, 13))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(6, 9))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(6, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_and(r800_fff_tmp3, r800_fff_tmp4);
                  byte_b9 = simd_and(r800_fff_tmp2, r800_fff_tmp5);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(6), r800_fff_tmp6));
                  sequence_e0_b9 = simd_and(r800_fff_tmp6, byte_b9);
                  byte_e0_adv = r800_fff_tmp6;
                  r800_fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp8 = simd_andc(r800_ffff_tmp5, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp10 = simd_and(r800_ffff_tmp2, r800_fff_tmp9);
                  byte_86 = simd_and(r800_fff_tmp8, r800_fff_tmp10);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(7), sequence_e0_b9_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_b9_adv, byte_86);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp3, r800_fff_tmp12);
                  byte_bb = simd_and(r800_fff_tmp2, r800_fff_tmp13);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(8), sequence_e0_bb_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_bb_adv, byte_86);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r800_fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 3);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(9, 6))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(9), r1000_1fff_tmp2));
                  sequence_e1_a0 = simd_and(r1000_1fff_tmp2, byte_a0);
                  byte_e1_adv = r1000_1fff_tmp2;
                  r1000_1fff_tmp3 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp4 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp3);
                  r1000_1fff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp6);
                  byte_8a = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp7);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(10), sequence_e1_a0_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_a0_adv, byte_8a);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r1000_1fff_tmp8);
                  byte_a1 = simd_and(r1000_1fff_tmp1, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp9, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp10);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(11), sequence_e1_a1_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_a1_adv, byte_83);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r1000_1fff_tmp11);
                  byte_aa = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp7);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp12 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp9);
                  byte_a7 = simd_and(r1000_1fff_tmp1, r1000_1fff_tmp12);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(12), sequence_e1_aa_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_aa_adv, byte_a7);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp14);
                  byte_b0 = simd_andc(r1000_1fff_tmp15, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp16 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_b6 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(13), sequence_e1_b0_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_b0_adv, byte_b6);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r1000_1fff_tmp17);
                  byte_b1 = simd_and(r1000_1fff_tmp15, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp9);
                  byte_bb = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp18);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(14), sequence_e1_b1_adv));
                  r1000_1fff_tmp19 = simd_and(sequence_e1_b1_adv, byte_bb);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r1000_1fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 6);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 9);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(15, 4))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(15, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(15), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp6);
                  r3000_4dff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp9 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_andc(r3000_4dff_tmp9, basis_bits.bit_4);
                  r3000_4dff_tmp11 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp11), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  r3000_4dff_tmp13 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp12);
                  cc_range_3005_3031_3 = simd_or(r3000_4dff_tmp7, r3000_4dff_tmp13);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(16), sequence_e3_80_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_80_adv, cc_range_3005_3031_3);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r3000_4dff_tmp14);
                  r3000_4dff_tmp15 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp16 = simd_andc(r3000_4dff_tmp15, r800_ffff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp16);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp17 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp18 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp18, r3000_4dff_tmp19);
                  r3000_4dff_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_9d_9e = simd_and(r3000_4dff_tmp20, r3000_4dff_tmp21);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(17), sequence_e3_82_adv));
                  r3000_4dff_tmp22 = simd_and(sequence_e3_82_adv, byte_range_9d_9e);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r3000_4dff_tmp22);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp23 = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp19);
                  byte_range_bc_be = simd_andc(r3000_4dff_tmp23, r2000_4dff_tmp1);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(18), sequence_e3_83_adv));
                  r3000_4dff_tmp24 = simd_and(sequence_e3_83_adv, byte_range_bc_be);
                  struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r3000_4dff_tmp24);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 13);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(19, 8))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp6);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(19), ra000_ffff_tmp7));
              sequence_ea_80 = simd_and(ra000_ffff_tmp7, byte_80);
              byte_ea_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_95 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp11);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(20), sequence_ea_80_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_80_adv, byte_95);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp13);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp15 = simd_andc(ra000_ffff_tmp14, r800_ffff_tmp3);
              byte_8c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp15);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(21), sequence_ea_98_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_98_adv, byte_8c);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp18);
              byte_a7 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp19);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp20 = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp18);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp22);
              cc_range_a9cf_a9e6_3 = simd_or(ra000_ffff_tmp21, ra000_ffff_tmp23);
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(22), sequence_ea_a7_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_a7_adv, cc_range_a9cf_a9e6_3);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_a9 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp25);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp26 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp27 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp26);
              byte_b0 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp6);
              carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(23), sequence_ea_a9_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_a9_adv, byte_b0);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp18);
              byte_ab = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp29);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp30 = simd_and(ra000_ffff_tmp14, ra000_ffff_tmp10);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_andc(ra000_ffff_tmp27, basis_bits.bit_4);
              ra000_ffff_tmp33 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp34 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp33), simd_andc(ra000_ffff_tmp18, basis_bits.bit_5));
              ra000_ffff_tmp35 = simd_and(ra000_ffff_tmp32, ra000_ffff_tmp34);
              cc_range_aadd_aaf3_3 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp35);
              carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(24), sequence_ea_ab_adv));
              ra000_ffff_tmp36 = simd_and(sequence_ea_ab_adv, cc_range_aadd_aaf3_3);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp36);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp20);
              byte_bd = simd_and(ra000_ffff_tmp27, ra000_ffff_tmp30);
              carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(25), ra000_ffff_tmp37));
              sequence_ef_bd = simd_and(ra000_ffff_tmp37, byte_bd);
              byte_ef_adv = ra000_ffff_tmp37;
              carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(26), sequence_ef_bd_adv));
              ra000_ffff_tmp38 = simd_and(sequence_ef_bd_adv, byte_b0);
              struct_ext_Y.cc = simd_or(struct_ext_Y.cc, ra000_ffff_tmp38);
            }
            else {
              carryQ.CarryDequeueEnqueue(19, 8);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 22);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(27, 6))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(27), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_8d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(28), r10000_10ffff_tmp14));
            sequence_f0_91_8d = simd_and(r10000_10ffff_tmp14, byte_8d);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp13);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(29), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_8d_adv, byte_9d);
            struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp17);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp18);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp20 = simd_not(r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp22 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp20), simd_andc(r10000_10ffff_tmp21, basis_bits.bit_4));
            byte_range_86_88 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp22);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(30), sequence_f0_91_97_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_97_adv, byte_range_86_88);
            struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp24);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp25);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_ad = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp13);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(31), r10000_10ffff_tmp27));
            sequence_f0_96_ad = simd_and(r10000_10ffff_tmp27, byte_ad);
            sequence_f0_96_adv = r10000_10ffff_tmp27;
            r10000_10ffff_tmp28 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp28);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(32), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_96_ad_adv, byte_range_82_83);
            struct_ext_Y.cc = simd_or(struct_ext_Y.cc, r10000_10ffff_tmp29);
          }
          else {
            carryQ.CarryDequeueEnqueue(27, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 33);
        }
        carryQ.CarryQ_Adjust(33);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<33, 0> carryQ;
  };

  struct Property_wspace_Y {
  Property_wspace_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_wspace_Y & struct_wspace_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_9_20_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, cc_range_85_a0_2, byte_c2_adv;
		BitBlock r80_7ff_tmp12, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9a;
		BitBlock r1000_1fff_tmp6, sequence_e1_9a, byte_e1_adv, r1000_1fff_tmp7;
		BitBlock byte_80, sequence_e1_9a_adv, r1000_1fff_tmp8, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, cc_range_2000_202f_3;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, byte_81, sequence_e2_81, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, byte_9f, sequence_e2_81_adv, r2000_2fff_tmp20;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, sequence_e3_80, byte_e3_adv;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp3;




        struct_wspace_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_or(tmp1, tmp2);
        tmp4 = simd_andc(basis_bits.bit_4, tmp3);
        tmp5 = simd_not(basis_bits.bit_6);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(simd_and(basis_bits.bit_5, tmp5), simd_andc(tmp6, basis_bits.bit_5));
        tmp8 = simd_and(tmp4, tmp7);
        tmp9 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp10 = simd_andc(tmp9, tmp1);
        tmp11 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp12 = simd_or(tmp11, tmp6);
        tmp13 = simd_andc(tmp10, tmp12);
        cc_range_9_20_1 = simd_or(tmp8, tmp13);
        struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, cc_range_9_20_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 9))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp2);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp11);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp4, tmp9);
            r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp12);
            cc_range_85_a0_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, cc_range_85_a0_2);
            struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, r80_7ff_tmp12);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp9);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 8))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp11);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(2, 7))) {
              r800_4dff_tmp1 = simd_or(tmp11, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp11);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(2, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9a = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), r1000_1fff_tmp6));
                  sequence_e1_9a = simd_and(r1000_1fff_tmp6, byte_9a);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_andc(r800_ffff_tmp3, tmp2);
                  byte_80 = simd_andc(r1000_1fff_tmp7, tmp12);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(3), sequence_e1_9a_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_9a_adv, byte_80);
                  struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, r1000_1fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp11);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(4, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp11);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(4, 3))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp2);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp12);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_or(basis_bits.bit_5, r2000_2fff_tmp3);
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp1, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, tmp9);
                  r2000_2fff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp8, basis_bits.bit_6);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_or(r2000_2fff_tmp6, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp12, r2000_2fff_tmp3);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp13);
                  cc_range_2000_202f_3 = simd_or(r2000_2fff_tmp11, r2000_2fff_tmp14);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(5), sequence_e2_80_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_80_adv, cc_range_2000_202f_3);
                  struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp17 = simd_andc(r2000_2fff_tmp16, tmp11);
                  byte_81 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp17);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp18);
                  byte_9f = simd_and(r2000_2fff_tmp19, r2000_2fff_tmp13);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(6), sequence_e2_81_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_81_adv, byte_9f);
                  struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, r2000_2fff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, tmp11);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(7, 2))) {
                  r3000_4dff_tmp1 = simd_andc(r800_ffff_tmp3, tmp2);
                  byte_80 = simd_andc(r3000_4dff_tmp1, tmp12);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(7), r3000_4dff_tmp2));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp2, byte_80);
                  byte_e3_adv = r3000_4dff_tmp2;
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(8), sequence_e3_80_adv));
                  r3000_4dff_tmp3 = simd_and(sequence_e3_80_adv, byte_80);
                  struct_wspace_Y.cc = simd_or(struct_wspace_Y.cc, r3000_4dff_tmp3);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<9, 0> carryQ;
  };

  struct Property_bidi_c_Y {
  Property_bidi_c_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_bidi_c_Y & struct_bidi_c_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, byte_9c;
		BitBlock byte_d8_adv, r600_6ff_tmp7, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4;
		BitBlock sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock cc_range_200e_202a_3, sequence_e2_80_adv, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_81, sequence_e2_81;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, byte_range_a6_a9, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp21;




        struct_bidi_c_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp2 = simd_and(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(0, 1))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp3, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp2, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp1);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp6 = simd_andc(r600_6ff_tmp5, r600_6ff_tmp1);
              byte_9c = simd_and(r600_6ff_tmp4, r600_6ff_tmp6);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(0), byte_d8_adv));
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_9c);
              struct_bidi_c_Y.cc = simd_or(struct_bidi_c_Y.cc, r600_6ff_tmp7);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 3))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(2, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(2, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_and(r2000_2fff_tmp5, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp12);
                  cc_range_200e_202a_3 = simd_or(r2000_2fff_tmp7, r2000_2fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, cc_range_200e_202a_3);
                  struct_bidi_c_Y.cc = simd_or(struct_bidi_c_Y.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp15, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp17 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_not(r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp20 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp18), simd_andc(r2000_2fff_tmp19, basis_bits.bit_4));
                  byte_range_a6_a9 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp20);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(4), sequence_e2_81_adv));
                  r2000_2fff_tmp21 = simd_and(sequence_e2_81_adv, byte_range_a6_a9);
                  struct_bidi_c_Y.cc = simd_or(struct_bidi_c_Y.cc, r2000_2fff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_olower_Y {
  Property_olower_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_olower_Y & struct_olower_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, cc_range_aa_ba_2;
		BitBlock byte_c2_adv, r80_7ff_tmp10, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, byte_ca, r100_2ff_tmp1, byte_range_b0_bf;
		BitBlock r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4, r100_2ff_tmp5, byte_cb;
		BitBlock r100_2ff_tmp6, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock byte_range_b0_b8, byte_ca_adv, r2b0_2ff_tmp4, r2b0_2ff_tmp5;
		BitBlock r2b0_2ff_tmp6, r2b0_2ff_tmp7, r2b0_2ff_tmp8, r2b0_2ff_tmp9;
		BitBlock r2b0_2ff_tmp10, r2b0_2ff_tmp11, r2b0_2ff_tmp12, cc_range_2c0_2e0_2;
		BitBlock byte_cb_adv, r2b0_2ff_tmp13, r100_3ff_tmp2, r100_3ff_tmp3;
		BitBlock r100_3ff_tmp4, byte_cc, r100_3ff_tmp5, r100_3ff_tmp6, byte_cd;
		BitBlock r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8, r100_3ff_tmp9;
		BitBlock r100_3ff_tmp10, r300_36f_tmp1, r300_36f_tmp2, r300_36f_tmp3, byte_85;
		BitBlock byte_cd_adv, r300_36f_tmp4, r100_3ff_tmp11, r100_3ff_tmp12;
		BitBlock byte_range_ce_cf, r100_3ff_tmp13, byte_ba, r370_3ff_tmp1;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, byte_b4, r1000_1fff_tmp3;
		BitBlock sequence_e1_b4, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, byte_range_ac_bf, sequence_e1_b4_adv;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_b5, sequence_e1_b5;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, cc_range_1d40_1d78_3;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_b6, sequence_e1_b6, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, byte_range_9b_bf, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp23, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81;
		BitBlock r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, cc_range_2071_207f_3, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp12, byte_82, sequence_e2_82, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock byte_range_90_9c, sequence_e2_82_adv, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, sequence_e2_85, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, byte_93, sequence_e2_93;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, byte_range_90_a9;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp26, byte_b1, sequence_e2_b1;
		BitBlock r2000_2fff_tmp27, byte_range_bc_bd, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp28, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, byte_9a, ra000_ffff_tmp6;
		BitBlock sequence_ea_9a, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock byte_range_9c_9d, sequence_ea_9a_adv, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_9d, sequence_ea_9d;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14, byte_b0;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_9f, sequence_ea_9f, ra000_ffff_tmp18;
		BitBlock byte_range_b8_b9, sequence_ea_9f_adv, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, byte_ad, sequence_ea_ad, byte_range_9c_9f;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp21;




        struct_olower_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 20))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, r80_7ff_tmp4);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, basis_bits.bit_2);
            cc_range_aa_ba_2 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp10 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r80_7ff_tmp10);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 3))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 2))) {
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp7);
                r100_2ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r80_7ff_tmp8, r100_2ff_tmp1);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp2));
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp2, byte_range_b0_bf);
                r100_2ff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp5 = simd_and(r80_7ff_tmp6, r100_2ff_tmp4);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                r100_2ff_tmp6 = simd_or(r100_2ff_tmp3, byte_cb);
                if ((bitblock::any(r100_2ff_tmp6) || carryQ.CarryTest(2, 1))) {
                  r2b0_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                  r2b0_2ff_tmp2 = simd_or(basis_bits.bit_5, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp3 = simd_and(basis_bits.bit_4, r2b0_2ff_tmp2);
                  byte_range_b0_b8 = simd_andc(byte_range_b0_bf, r2b0_2ff_tmp3);
                  byte_ca_adv = r100_2ff_tmp2;
                  r2b0_2ff_tmp4 = simd_and(byte_ca_adv, byte_range_b0_b8);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2b0_2ff_tmp4);
                  r2b0_2ff_tmp5 = simd_andc(r80_7ff_tmp8, r80_7ff_tmp1);
                  r2b0_2ff_tmp6 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                  r2b0_2ff_tmp7 = simd_andc(r2b0_2ff_tmp5, r2b0_2ff_tmp6);
                  r2b0_2ff_tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r2b0_2ff_tmp9 = simd_and(r80_7ff_tmp8, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r2b0_2ff_tmp9, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  cc_range_2c0_2e0_2 = simd_or(r2b0_2ff_tmp7, r2b0_2ff_tmp12);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(2), byte_cb_adv));
                  r2b0_2ff_tmp13 = simd_and(byte_cb_adv, cc_range_2c0_2e0_2);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2b0_2ff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp4 = simd_andc(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp2, r100_3ff_tmp5);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r80_7ff_tmp8, r100_3ff_tmp7);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(3), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if (bitblock::any(r100_3ff_tmp10)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp8, r80_7ff_tmp1);
                r300_36f_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r300_36f_tmp3 = simd_and(r300_36f_tmp2, r100_3ff_tmp5);
                byte_85 = simd_and(r300_36f_tmp1, r300_36f_tmp3);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp4 = simd_and(byte_cd_adv, byte_85);
                struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r300_36f_tmp4);
              }
              byte_range_b0_bf = simd_and(r80_7ff_tmp8, r100_3ff_tmp7);
              r100_3ff_tmp11 = simd_and(r100_3ff_tmp8, byte_range_b0_bf);
              r100_3ff_tmp12 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp12);
              r100_3ff_tmp13 = simd_or(r100_3ff_tmp11, byte_range_ce_cf);
              if (bitblock::any(r100_3ff_tmp13)) {
                byte_ba = simd_and(byte_range_b0_bf, r80_7ff_tmp7);
                byte_cd_adv = r100_3ff_tmp8;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_ba);
                struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r370_3ff_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 4);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 16))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(4), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(5, 10))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(5, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(5, 4))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_b4 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(5), r1000_1fff_tmp3));
                  sequence_e1_b4 = simd_and(r1000_1fff_tmp3, byte_b4);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  byte_range_ac_bf = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(6), sequence_e1_b4_adv));
                  r1000_1fff_tmp7 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r1000_1fff_tmp7);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_or(basis_bits.bit_5, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_4, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_or(basis_bits.bit_3, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_2, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_andc(r1000_1fff_tmp15, r800_ffff_tmp3);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp16);
                  cc_range_1d40_1d78_3 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp17);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(7), sequence_e1_b5_adv));
                  r1000_1fff_tmp18 = simd_and(sequence_e1_b5_adv, cc_range_1d40_1d78_3);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r1000_1fff_tmp18);
                  r1000_1fff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp19);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp20);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp21 = simd_and(basis_bits.bit_3, r1000_1fff_tmp11);
                  r1000_1fff_tmp22 = simd_or(basis_bits.bit_2, r1000_1fff_tmp21);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp5, r1000_1fff_tmp22);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(8), sequence_e1_b6_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_b6_adv, byte_range_9b_bf);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r1000_1fff_tmp23);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 4);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(9, 6))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(9, 6))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(9), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp10);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp11);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(10), sequence_e2_81_adv));
                  r2000_2fff_tmp12 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2000_2fff_tmp12);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp13);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp16 = simd_and(basis_bits.bit_4, r2000_2fff_tmp15);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp14, r2000_2fff_tmp16);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(11), sequence_e2_82_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  byte_range_b0_bf = r2000_2fff_tmp7;
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(12), sequence_e2_85_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_85_adv, byte_range_b0_bf);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2000_2fff_tmp19);
                  r2000_2fff_tmp20 = simd_andc(r2000_2fff_tmp9, r800_ffff_tmp1);
                  byte_93 = simd_and(r2000_2fff_tmp14, r2000_2fff_tmp20);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp21 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp22 = simd_and(basis_bits.bit_4, r2000_2fff_tmp21);
                  r2000_2fff_tmp23 = simd_or(basis_bits.bit_3, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_not(r2000_2fff_tmp23);
                  r2000_2fff_tmp25 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp24), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_a9 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp25);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(13), sequence_e2_93_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_93_adv, byte_range_90_a9);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2000_2fff_tmp26);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp27 = simd_andc(r2000_2fff_tmp8, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(byte_range_b0_bf, r2000_2fff_tmp27);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(14), sequence_e2_b1_adv));
                  r2000_2fff_tmp28 = simd_and(sequence_e2_b1_adv, byte_range_bc_bd);
                  struct_olower_Y.cc = simd_or(struct_olower_Y.cc, r2000_2fff_tmp28);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 6);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 6);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 10);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(15, 5))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(15), ra000_ffff_tmp6));
              sequence_ea_9a = simd_and(ra000_ffff_tmp6, byte_9a);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp7, basis_bits.bit_6);
              byte_range_9c_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp8);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(16), sequence_ea_9a_adv));
              ra000_ffff_tmp9 = simd_and(sequence_ea_9a_adv, byte_range_9c_9d);
              struct_olower_Y.cc = simd_or(struct_olower_Y.cc, ra000_ffff_tmp9);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp10);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp11);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_b0 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(17), sequence_ea_9d_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_9d_adv, byte_b0);
              struct_olower_Y.cc = simd_or(struct_olower_Y.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp16);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp18 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_b8_b9 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp18);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(18), sequence_ea_9f_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
              struct_olower_Y.cc = simd_or(struct_olower_Y.cc, ra000_ffff_tmp19);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              byte_ad = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp11);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_9c_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(19), sequence_ea_ad_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_ad_adv, byte_range_9c_9f);
              struct_olower_Y.cc = simd_or(struct_olower_Y.cc, ra000_ffff_tmp21);
            }
            else {
              carryQ.CarryDequeueEnqueue(15, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(4, 16);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 20);
        }
        carryQ.CarryQ_Adjust(20);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<20, 0> carryQ;
  };

  struct Property_term_Y {
  Property_term_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_term_Y & struct_term_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, cc_range_21_3f_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, byte_range_c4_cf, r100_3ff_tmp1, byte_cd;
		BitBlock r100_3ff_tmp2, byte_range_b0_bf, r100_3ff_tmp3, r100_3ff_tmp4;
		BitBlock r100_3ff_tmp5, byte_range_ce_cf, r100_3ff_tmp6, byte_be, byte_cd_adv;
		BitBlock r370_3ff_tmp1, byte_ce, r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock byte_87, byte_ce_adv, r370_3ff_tmp5, r80_7ff_tmp3, r80_7ff_tmp4;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, byte_d6, r400_5ff_tmp4, byte_range_80_8f;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7, r500_58f_tmp1, byte_d4;
		BitBlock r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4, byte_d5, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r530_58f_tmp1, byte_89, byte_d6_adv, r530_58f_tmp2;
		BitBlock byte_range_90_bf, r400_5ff_tmp8, r400_5ff_tmp9, byte_d7;
		BitBlock r400_5ff_tmp10, r590_5ff_tmp1, byte_83, byte_d7_adv, r590_5ff_tmp2;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, byte_d8, r600_6ff_tmp2;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, r600_6ff_tmp8, r600_6ff_tmp9, cc_range_60c_61f_2;
		BitBlock byte_d8_adv, r600_6ff_tmp10, byte_db, r600_6ff_tmp11, r600_6ff_tmp12;
		BitBlock byte_94, byte_db_adv, r600_6ff_tmp13, r80_7ff_tmp5, byte_range_dc_dd;
		BitBlock byte_dc, r700_77f_tmp1, byte_dd, r700_77f_tmp2, r700_77f_tmp3;
		BitBlock r700_77f_tmp4, r700_77f_tmp5, r700_74f_tmp1, r700_74f_tmp2;
		BitBlock r700_74f_tmp3, cc_range_700_70c_2, byte_dc_adv, r700_74f_tmp4;
		BitBlock r80_7ff_tmp6, byte_range_de_df, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, byte_range_b8_b9, byte_df_adv, r7c0_7ff_tmp4;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5, byte_range_b0_be;
		BitBlock sequence_e0_a0_adv, r800_fff_tmp6, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_9e, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp11, byte_range_a4_a5, sequence_e0_a5_adv, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_b9, sequence_e0_b9, byte_range_9a_9b;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp14, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock r800_fff_tmp23, r800_fff_tmp24, cc_range_f08_f0d_3;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp25, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_81, r1000_1fff_tmp3, sequence_e1_81;
		BitBlock byte_e1_adv, byte_range_8a_8b, sequence_e1_81_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, byte_8d, sequence_e1_8d, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, byte_range_a1_a8;
		BitBlock sequence_e1_8d_adv, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, byte_99, sequence_e1_99;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, byte_range_ad_ae;
		BitBlock sequence_e1_99_adv, r1000_1fff_tmp15, r1000_1fff_tmp16, byte_9b;
		BitBlock sequence_e1_9b, r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock byte_range_ab_ad, sequence_e1_9b_adv, r1000_1fff_tmp20, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp21, r1000_1fff_tmp22, byte_range_b5_b6;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp23, byte_9f, sequence_e1_9f;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, cc_range_17d4_17da_3, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp28, sequence_e1_a0, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock cc_range_1802_1808_3, sequence_e1_a0_adv, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, sequence_e1_a5, r1000_1fff_tmp36, byte_range_84_85;
		BitBlock sequence_e1_a5_adv, r1000_1fff_tmp37, byte_aa, sequence_e1_aa;
		BitBlock byte_range_a8_ab, sequence_e1_aa_adv, r1000_1fff_tmp38, byte_ad;
		BitBlock sequence_e1_ad, r1000_1fff_tmp39, r1000_1fff_tmp40, r1000_1fff_tmp41;
		BitBlock cc_range_1b5a_1b5d_3, sequence_e1_ad_adv, r1000_1fff_tmp42, byte_b0;
		BitBlock sequence_e1_b0, r1000_1fff_tmp43, r1000_1fff_tmp44, byte_range_bb_bf;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp45, byte_b1, sequence_e1_b1;
		BitBlock r1000_1fff_tmp46, byte_range_be_bf, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp47, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, byte_range_bc_bd;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp7, sequence_e2_81, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, byte_range_87_89;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_b8;
		BitBlock sequence_e2_b8, r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16;
		BitBlock cc_range_2e2e_2e3c_3, sequence_e2_b8_adv, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, sequence_e2_b9, sequence_e2_b9_adv;
		BitBlock r2000_2fff_tmp19, r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock byte_range_81_82, sequence_e3_80_adv, r3000_4dff_tmp7, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1, byte_ea;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, ra000_ffff_tmp4, byte_93;
		BitBlock ra000_ffff_tmp5, sequence_ea_93, byte_ea_adv, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, sequence_ea_93_adv, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_98, sequence_ea_98, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, byte_range_8d_8f, sequence_ea_98_adv;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, sequence_ea_9b, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_range_b3_b7, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, sequence_ea_a1, ra000_ffff_tmp19;
		BitBlock byte_range_b6_b7, sequence_ea_a1_adv, ra000_ffff_tmp20, byte_a3;
		BitBlock sequence_ea_a3, byte_range_8e_8f, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp21, byte_a4, sequence_ea_a4, byte_af;
		BitBlock sequence_ea_a4_adv, ra000_ffff_tmp22, ra000_ffff_tmp23, byte_a7;
		BitBlock sequence_ea_a7, ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp27, ra000_ffff_tmp28, byte_a9;
		BitBlock sequence_ea_a9, ra000_ffff_tmp29, byte_range_9d_9f;
		BitBlock sequence_ea_a9_adv, ra000_ffff_tmp30, byte_ab, sequence_ea_ab;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock cc_range_aadf_aaf0_3, sequence_ea_ab_adv, ra000_ffff_tmp34;
		BitBlock sequence_ea_af, sequence_ea_af_adv, ra000_ffff_tmp35, byte_ef;
		BitBlock ra000_ffff_tmp36, sequence_ef_b9, byte_ef_adv, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, cc_range_fe50_fe54_3;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp40, sequence_ef_bc;
		BitBlock ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock cc_range_ff01_ff1f_3, sequence_ef_bc_adv, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, byte_bd, sequence_ef_bd, ra000_ffff_tmp46;
		BitBlock cc_range_ff61_ff64_3, sequence_ef_bd_adv, ra000_ffff_tmp47;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, byte_f0, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, r10000_10ffff_tmp4, byte_90, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock byte_8e, r10000_10ffff_tmp8, sequence_f0_90_8e, sequence_f0_90_adv;
		BitBlock sequence_f0_90_8e_adv, r10000_10ffff_tmp9, byte_8f, sequence_f0_90_8f;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock sequence_f0_90_a1, r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_97;
		BitBlock sequence_f0_90_a1_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock sequence_f0_90_a4, sequence_f0_90_a4_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, sequence_f0_90_a9, r10000_10ffff_tmp18;
		BitBlock byte_range_96_97, sequence_f0_90_a9_adv, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, sequence_f0_90_ab, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, byte_range_b0_b5;
		BitBlock sequence_f0_90_ab_adv, r10000_10ffff_tmp24, byte_ac;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_ba_bf, sequence_f0_90_ac_adv, r10000_10ffff_tmp27, byte_ae;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock byte_range_99_9c, sequence_f0_90_ae_adv, r10000_10ffff_tmp30, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp31, sequence_f0_91_81;
		BitBlock sequence_f0_91_adv, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, byte_range_87_8d, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_82, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp37, sequence_f0_91_82_adv, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, sequence_f0_91_83, r10000_10ffff_tmp40;
		BitBlock byte_range_80_81, sequence_f0_91_83_adv, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, byte_85, sequence_f0_91_85, r10000_10ffff_tmp43;
		BitBlock byte_range_81_83, sequence_f0_91_85_adv, r10000_10ffff_tmp44;
		BitBlock sequence_f0_91_87, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock cc_range_111c5_111cd_4, sequence_f0_91_87_adv, r10000_10ffff_tmp50;
		BitBlock r10000_10ffff_tmp51, byte_88, sequence_f0_91_88, r10000_10ffff_tmp52;
		BitBlock byte_range_b8_bc, sequence_f0_91_88_adv, r10000_10ffff_tmp53;
		BitBlock sequence_f0_91_97, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, cc_range_115c2_115c9_4;
		BitBlock sequence_f0_91_97_adv, r10000_10ffff_tmp58, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp59, byte_92, sequence_f0_92;
		BitBlock r10000_10ffff_tmp60, sequence_f0_92_91, sequence_f0_92_adv;
		BitBlock byte_range_b0_b4, sequence_f0_92_91_adv, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, byte_96, sequence_f0_96, r10000_10ffff_tmp63;
		BitBlock sequence_f0_96_a9, sequence_f0_96_adv, byte_range_ae_af;
		BitBlock sequence_f0_96_a9_adv, r10000_10ffff_tmp64, sequence_f0_96_ab;
		BitBlock byte_b5, sequence_f0_96_ab_adv, r10000_10ffff_tmp65;
		BitBlock sequence_f0_96_ac, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock byte_range_b7_b9, sequence_f0_96_ac_adv, r10000_10ffff_tmp68;
		BitBlock sequence_f0_96_ad, byte_84, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp69, sequence_f0_9b, byte_b2, r10000_10ffff_tmp70;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp71;




        struct_term_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_andc(tmp5, tmp4);
        tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_andc(tmp7, tmp8);
        tmp10 = simd_or(tmp6, tmp9);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp7, tmp11);
        tmp13 = simd_or(tmp10, tmp12);
        tmp14 = simd_and(tmp3, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_andc(tmp15, tmp1);
        tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp18 = simd_and(tmp17, basis_bits.bit_6);
        tmp19 = simd_and(tmp16, tmp18);
        tmp20 = simd_or(tmp14, tmp19);
        tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp22 = simd_and(tmp7, tmp21);
        tmp23 = simd_and(tmp16, tmp22);
        cc_range_21_3f_1 = simd_or(tmp20, tmp23);
        struct_term_Y.cc = simd_or(struct_term_Y.cc, cc_range_21_3f_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 80))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 10))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp4);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(tmp7, tmp5);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_b0_bf = simd_and(r100_3ff_tmp2, tmp15);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp3));
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp3, byte_range_b0_bf);
              r100_3ff_tmp5 = simd_and(tmp7, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_or(r100_3ff_tmp4, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(1, 1))) {
                byte_be = simd_and(byte_range_b0_bf, tmp12);
                byte_cd_adv = r100_3ff_tmp3;
                r370_3ff_tmp1 = simd_and(byte_cd_adv, byte_be);
                struct_term_Y.cc = simd_or(struct_term_Y.cc, r370_3ff_tmp1);
                byte_ce = simd_and(r80_7ff_tmp2, tmp12);
                r370_3ff_tmp2 = simd_andc(r100_3ff_tmp2, r80_7ff_tmp1);
                r370_3ff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp4 = simd_and(r370_3ff_tmp3, tmp21);
                byte_87 = simd_and(r370_3ff_tmp2, r370_3ff_tmp4);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(1), byte_ce_adv));
                r370_3ff_tmp5 = simd_and(byte_ce_adv, byte_87);
                struct_term_Y.cc = simd_or(struct_term_Y.cc, r370_3ff_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp4 = simd_and(byte_range_c0_ff, r80_7ff_tmp3);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp4, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 3))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp4, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, tmp11);
              byte_d6 = simd_and(r80_7ff_tmp4, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r400_5ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(2), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_80_8f);
              r400_5ff_tmp7 = simd_or(byte_range_d4_d5, r400_5ff_tmp6);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(3, 1))) {
                r500_58f_tmp1 = simd_andc(r400_5ff_tmp1, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp4, r500_58f_tmp1);
                byte_range_b0_bf = simd_and(r400_5ff_tmp4, tmp15);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(3), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp4 = simd_and(r400_5ff_tmp1, tmp5);
                byte_d5 = simd_and(r80_7ff_tmp4, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp3, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp6);
                if (bitblock::any(r500_58f_tmp6)) {
                  r530_58f_tmp1 = simd_and(tmp17, tmp5);
                  byte_89 = simd_and(byte_range_80_8f, r530_58f_tmp1);
                  byte_d6_adv = r400_5ff_tmp5;
                  r530_58f_tmp2 = simd_and(byte_d6_adv, byte_89);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r530_58f_tmp2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 1);
              }
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r80_7ff_tmp1);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp5, byte_range_90_bf);
              r400_5ff_tmp9 = simd_and(r400_5ff_tmp1, tmp21);
              byte_d7 = simd_and(r80_7ff_tmp4, r400_5ff_tmp9);
              r400_5ff_tmp10 = simd_or(r400_5ff_tmp8, byte_d7);
              if ((bitblock::any(r400_5ff_tmp10) || carryQ.CarryTest(4, 1))) {
                r590_5ff_tmp1 = simd_andc(tmp21, tmp4);
                byte_83 = simd_and(byte_range_80_8f, r590_5ff_tmp1);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(4), byte_d7_adv));
                r590_5ff_tmp2 = simd_and(byte_d7_adv, byte_83);
                struct_term_Y.cc = simd_or(struct_term_Y.cc, r590_5ff_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp4, tmp17);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(5, 2))) {
              r600_6ff_tmp1 = simd_andc(tmp17, tmp8);
              byte_d8 = simd_and(r80_7ff_tmp4, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp3 = simd_andc(r600_6ff_tmp2, r80_7ff_tmp1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, tmp9);
              r600_6ff_tmp5 = simd_and(r600_6ff_tmp2, r80_7ff_tmp3);
              r600_6ff_tmp6 = simd_and(tmp17, tmp21);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp5, r600_6ff_tmp6);
              r600_6ff_tmp8 = simd_or(r600_6ff_tmp4, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_and(r600_6ff_tmp5, tmp22);
              cc_range_60c_61f_2 = simd_or(r600_6ff_tmp8, r600_6ff_tmp9);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(5), byte_d8_adv));
              r600_6ff_tmp10 = simd_and(byte_d8_adv, cc_range_60c_61f_2);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, r600_6ff_tmp10);
              byte_db = simd_and(r80_7ff_tmp4, r600_6ff_tmp6);
              r600_6ff_tmp11 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r600_6ff_tmp12 = simd_andc(r600_6ff_tmp11, tmp8);
              byte_94 = simd_and(r600_6ff_tmp5, r600_6ff_tmp12);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(6), byte_db_adv));
              r600_6ff_tmp13 = simd_and(byte_db_adv, byte_94);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, r600_6ff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 2);
            }
            r80_7ff_tmp5 = simd_andc(tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp4, r80_7ff_tmp5);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(7, 2))) {
              byte_dc = simd_and(r80_7ff_tmp4, tmp9);
              r700_77f_tmp1 = simd_and(tmp7, tmp5);
              byte_dd = simd_and(r80_7ff_tmp4, r700_77f_tmp1);
              r700_77f_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp2, r80_7ff_tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(7), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(8, 1))) {
                r700_74f_tmp1 = simd_or(basis_bits.bit_5, tmp21);
                r700_74f_tmp2 = simd_and(basis_bits.bit_4, r700_74f_tmp1);
                r700_74f_tmp3 = simd_andc(r700_74f_tmp2, tmp9);
                cc_range_700_70c_2 = simd_andc(byte_range_80_8f, r700_74f_tmp3);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(8), byte_dc_adv));
                r700_74f_tmp4 = simd_and(byte_dc_adv, cc_range_700_70c_2);
                struct_term_Y.cc = simd_or(struct_term_Y.cc, r700_74f_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 2);
            }
            r80_7ff_tmp6 = simd_and(tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp4, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(9, 1))) {
              byte_df = simd_and(r80_7ff_tmp4, tmp22);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(9, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, tmp15);
                r7c0_7ff_tmp3 = simd_andc(tmp17, basis_bits.bit_6);
                byte_range_b8_b9 = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp3);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(9), byte_df_adv));
                r7c0_7ff_tmp4 = simd_and(byte_df_adv, byte_range_b8_b9);
                struct_term_Y.cc = simd_or(struct_term_Y.cc, r7c0_7ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 10);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(10, 42))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(10), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(11, 26))) {
              r800_4dff_tmp1 = simd_or(tmp4, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(11, 19))) {
                r800_1fff_tmp1 = simd_or(tmp4, tmp8);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(11, 6))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, tmp2);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(11), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp3, tmp15);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, tmp21);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_4, r800_fff_tmp4);
                  byte_range_b0_be = simd_andc(r800_fff_tmp3, r800_fff_tmp5);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(12), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r800_fff_tmp6);
                  byte_a1 = simd_and(r800_fff_tmp1, tmp6);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp8 = simd_and(r800_ffff_tmp3, r800_fff_tmp7);
                  byte_9e = simd_and(r800_fff_tmp8, tmp12);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(13), sequence_e0_a1_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a1_adv, byte_9e);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(r800_ffff_tmp1, tmp5);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp11 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_a4_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp11);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(14), sequence_e0_a5_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_a5_adv, byte_range_a4_a5);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_and(tmp17, tmp5);
                  byte_b9 = simd_and(r800_fff_tmp3, r800_fff_tmp13);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  byte_range_9a_9b = simd_and(r800_fff_tmp8, tmp18);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(15), sequence_e0_b9_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_b9_adv, byte_range_9a_9b);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r800_fff_tmp14);
                  byte_bc = simd_and(r800_fff_tmp3, tmp9);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp16 = simd_andc(r800_ffff_tmp3, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_andc(tmp17, tmp8);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp16, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp20 = simd_or(tmp4, tmp21);
                  r800_fff_tmp21 = simd_not(r800_fff_tmp20);
                  r800_fff_tmp22 = simd_and(tmp7, tmp8);
                  r800_fff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp21), simd_andc(r800_fff_tmp22, basis_bits.bit_3));
                  r800_fff_tmp24 = simd_and(r800_fff_tmp19, r800_fff_tmp23);
                  cc_range_f08_f0d_3 = simd_or(r800_fff_tmp18, r800_fff_tmp24);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(16), sequence_e0_bc_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_bc_adv, cc_range_f08_f0d_3);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r800_fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(11, 6);
                }
                byte_e1 = simd_and(byte_range_e0_ef, tmp6);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(17, 13))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp2, tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(17), r1000_1fff_tmp3));
                  sequence_e1_81 = simd_and(r1000_1fff_tmp3, byte_81);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_8a_8b = simd_and(r1000_1fff_tmp2, tmp18);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(18), sequence_e1_81_adv));
                  r1000_1fff_tmp4 = simd_and(sequence_e1_81_adv, byte_range_8a_8b);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp4);
                  r1000_1fff_tmp5 = simd_and(tmp7, tmp5);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp6 = simd_and(r800_ffff_tmp3, tmp2);
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp8 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp7);
                  byte_range_a1_a8 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp8);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(19), sequence_e1_8d_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_8d_adv, byte_range_a1_a8);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(tmp17, tmp5);
                  byte_99 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp12);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp6, tmp7);
                  r1000_1fff_tmp14 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_ad_ae = simd_and(r1000_1fff_tmp13, r1000_1fff_tmp14);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(20), sequence_e1_99_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_99_adv, byte_range_ad_ae);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(tmp17, tmp21);
                  byte_9b = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp16);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp6, basis_bits.bit_4);
                  r1000_1fff_tmp18 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp19 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp18), simd_andc(tmp21, basis_bits.bit_5));
                  byte_range_ab_ad = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp19);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(21), sequence_e1_9b_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp20);
                  byte_9c = simd_and(r1000_1fff_tmp11, tmp9);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp3, tmp15);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp21, r800_ffff_tmp1);
                  byte_range_b5_b6 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp14);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(22), sequence_e1_9c_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp23);
                  byte_9f = simd_and(r1000_1fff_tmp11, tmp22);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp11, r800_ffff_tmp1);
                  r1000_1fff_tmp25 = simd_andc(r1000_1fff_tmp24, tmp21);
                  r1000_1fff_tmp26 = simd_and(tmp17, tmp11);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp26);
                  cc_range_17d4_17da_3 = simd_or(r1000_1fff_tmp25, r1000_1fff_tmp27);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(23), sequence_e1_9f_adv));
                  r1000_1fff_tmp28 = simd_and(sequence_e1_9f_adv, cc_range_17d4_17da_3);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp28);
                  byte_a0 = simd_andc(r1000_1fff_tmp6, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp29 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp30 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_andc(tmp17, basis_bits.bit_6);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp32);
                  cc_range_1802_1808_3 = simd_or(r1000_1fff_tmp31, r1000_1fff_tmp33);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(24), sequence_e1_a0_adv));
                  r1000_1fff_tmp34 = simd_and(sequence_e1_a0_adv, cc_range_1802_1808_3);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(r800_ffff_tmp1, tmp5);
                  byte_a5 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp35);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp36 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_84_85 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp36);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(25), sequence_e1_a5_adv));
                  r1000_1fff_tmp37 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp37);
                  byte_aa = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp26);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  byte_range_a8_ab = simd_and(r1000_1fff_tmp6, tmp17);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(26), sequence_e1_aa_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_aa_adv, byte_range_a8_ab);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp38);
                  byte_ad = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp5);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp11, tmp18);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp11, tmp7);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp40, tmp8);
                  cc_range_1b5a_1b5d_3 = simd_or(r1000_1fff_tmp39, r1000_1fff_tmp41);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(27), sequence_e1_ad_adv));
                  r1000_1fff_tmp42 = simd_and(sequence_e1_ad_adv, cc_range_1b5a_1b5d_3);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp42);
                  byte_b0 = simd_andc(r1000_1fff_tmp21, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp21, basis_bits.bit_4);
                  r1000_1fff_tmp44 = simd_or(basis_bits.bit_5, tmp21);
                  byte_range_bb_bf = simd_and(r1000_1fff_tmp43, r1000_1fff_tmp44);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(28), sequence_e1_b0_adv));
                  r1000_1fff_tmp45 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp45);
                  byte_b1 = simd_and(r1000_1fff_tmp21, tmp6);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp46 = simd_and(tmp7, basis_bits.bit_6);
                  byte_range_be_bf = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp46);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(29), sequence_e1_b1_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r1000_1fff_tmp47);
                }
                else {
                  carryQ.CarryDequeueEnqueue(17, 13);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 19);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(30, 7))) {
                r2000_4dff_tmp1 = simd_andc(tmp11, tmp4);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(30, 5))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(tmp4, tmp8);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(30), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp3, tmp15);
                  r2000_2fff_tmp6 = simd_andc(tmp7, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(31), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_bc_bd);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r2000_2fff_tmp7);
                  byte_81 = simd_and(r2000_2fff_tmp2, tmp6);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_not(r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_5, tmp21);
                  r2000_2fff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp9), simd_andc(r2000_2fff_tmp10, basis_bits.bit_4));
                  byte_range_87_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp11);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(32), sequence_e2_81_adv));
                  r2000_2fff_tmp12 = simd_and(sequence_e2_81_adv, byte_range_87_89);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r2000_2fff_tmp12);
                  r2000_2fff_tmp13 = simd_andc(tmp17, tmp8);
                  byte_b8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp13);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp14 = simd_and(r800_ffff_tmp3, tmp2);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp14, tmp12);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp5, tmp9);
                  cc_range_2e2e_2e3c_3 = simd_or(r2000_2fff_tmp15, r2000_2fff_tmp16);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(33), sequence_e2_b8_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_b8_adv, cc_range_2e2e_2e3c_3);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(tmp17, tmp5);
                  byte_b9 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp18);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(34), sequence_e2_b9_adv));
                  r2000_2fff_tmp19 = simd_and(sequence_e2_b9_adv, byte_81);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r2000_2fff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 5);
                }
                r2000_4dff_tmp2 = simd_andc(tmp21, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(35, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(tmp4, tmp8);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(35), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_andc(r3000_4dff_tmp2, tmp4);
                  r3000_4dff_tmp6 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_81_82 = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp6);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(36), sequence_e3_80_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_range_81_82);
                  struct_term_Y.cc = simd_or(struct_term_Y.cc, r3000_4dff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(35, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(30, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 26);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(37, 15))) {
              ra000_ffff_tmp1 = simd_and(tmp17, tmp11);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp1);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp2);
              ra000_ffff_tmp4 = simd_andc(tmp21, tmp4);
              byte_93 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp4);
              carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(37), ra000_ffff_tmp5));
              sequence_ea_93 = simd_and(ra000_ffff_tmp5, byte_93);
              byte_ea_adv = ra000_ffff_tmp5;
              ra000_ffff_tmp6 = simd_and(r800_ffff_tmp3, tmp15);
              ra000_ffff_tmp7 = simd_and(tmp7, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp7);
              carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(38), sequence_ea_93_adv));
              ra000_ffff_tmp8 = simd_and(sequence_ea_93_adv, byte_range_be_bf);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp8);
              ra000_ffff_tmp9 = simd_andc(tmp17, tmp8);
              byte_98 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp9);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp11 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp11, tmp7);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp12, tmp8);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(39), sequence_ea_98_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_98_adv, byte_range_8d_8f);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_and(tmp17, tmp21);
              byte_9b = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp14);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp15 = simd_andc(ra000_ffff_tmp6, basis_bits.bit_4);
              ra000_ffff_tmp16 = simd_or(basis_bits.bit_5, tmp21);
              byte_range_b3_b7 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp16);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(40), sequence_ea_9b_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_9b_adv, byte_range_b3_b7);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp17);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp3, tmp2);
              byte_a1 = simd_and(ra000_ffff_tmp18, tmp6);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_b6_b7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp19);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(41), sequence_ea_a1_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a1_adv, byte_range_b6_b7);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp20);
              byte_a3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp4);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_8e_8f = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp7);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(42), sequence_ea_a3_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a3_adv, byte_range_8e_8f);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp21);
              byte_a4 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              byte_af = simd_and(ra000_ffff_tmp18, tmp22);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(43), sequence_ea_a4_adv));
              ra000_ffff_tmp22 = simd_and(sequence_ea_a4_adv, byte_af);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp22);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, tmp21);
              byte_a7 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp23);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp24 = simd_not(r800_ffff_tmp10);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_5, tmp21);
              ra000_ffff_tmp26 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp24), simd_andc(ra000_ffff_tmp25, basis_bits.bit_4));
              byte_range_87_89 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp26);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(44), sequence_ea_a7_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ea_a7_adv, byte_range_87_89);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(tmp17, tmp5);
              byte_a9 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp28);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp3, tmp7);
              byte_range_9d_9f = simd_and(ra000_ffff_tmp29, tmp8);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(45), sequence_ea_a9_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ea_a9_adv, byte_range_9d_9f);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp30);
              byte_ab = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp14);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp3, tmp22);
              ra000_ffff_tmp32 = simd_or(tmp4, basis_bits.bit_6);
              ra000_ffff_tmp33 = simd_andc(ra000_ffff_tmp6, ra000_ffff_tmp32);
              cc_range_aadf_aaf0_3 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp33);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(46), sequence_ea_ab_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ea_ab_adv, cc_range_aadf_aaf0_3);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp34);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(47), sequence_ea_af_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_af_adv, byte_ab);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp35);
              byte_ef = simd_and(byte_range_e0_ef, tmp22);
              byte_b9 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp28);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(48), ra000_ffff_tmp36));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp36, byte_b9);
              byte_ef_adv = ra000_ffff_tmp36;
              ra000_ffff_tmp37 = simd_andc(ra000_ffff_tmp3, tmp4);
              ra000_ffff_tmp38 = simd_andc(ra000_ffff_tmp37, tmp21);
              ra000_ffff_tmp39 = simd_and(ra000_ffff_tmp3, r800_ffff_tmp1);
              cc_range_fe50_fe54_3 = simd_or(ra000_ffff_tmp38, ra000_ffff_tmp39);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(49), sequence_ef_b9_adv));
              ra000_ffff_tmp40 = simd_and(sequence_ef_b9_adv, cc_range_fe50_fe54_3);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp40);
              byte_bc = simd_and(ra000_ffff_tmp6, tmp9);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp11, tmp13);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp3, tmp18);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              cc_range_ff01_ff1f_3 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp31);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(50), sequence_ef_bc_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ef_bc_adv, cc_range_ff01_ff1f_3);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(tmp7, tmp5);
              byte_bd = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp45);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp46 = simd_or(tmp6, r800_ffff_tmp2);
              cc_range_ff61_ff64_3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp46);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(51), sequence_ef_bd_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ef_bd_adv, cc_range_ff61_ff64_3);
              struct_term_Y.cc = simd_or(struct_term_Y.cc, ra000_ffff_tmp47);
            }
            else {
              carryQ.CarryDequeueEnqueue(37, 15);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(10, 42);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp15);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(52, 28))) {
            r10000_10ffff_tmp1 = simd_or(tmp4, tmp8);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp4 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp3);
            byte_90 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp1);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(52), r10000_10ffff_tmp5));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            byte_f0_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp7 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp6);
            byte_8e = simd_and(r10000_10ffff_tmp7, tmp12);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(53), r10000_10ffff_tmp8));
            sequence_f0_90_8e = simd_and(r10000_10ffff_tmp8, byte_8e);
            sequence_f0_90_adv = r10000_10ffff_tmp8;
            byte_9f = simd_and(r10000_10ffff_tmp4, tmp22);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(54), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_90_8e_adv, byte_9f);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp9);
            byte_8f = simd_and(r10000_10ffff_tmp7, tmp22);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(55), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_8f_adv, byte_90);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp2, tmp2);
            byte_a1 = simd_and(r10000_10ffff_tmp11, tmp6);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp12, tmp21);
            byte_97 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp13);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(56), sequence_f0_90_a1_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_90_a1_adv, byte_97);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp12, tmp8);
            byte_a4 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp15);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(57), sequence_f0_90_a4_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_a4_adv, byte_9f);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(tmp17, tmp5);
            byte_a9 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp17);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp18);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(58), sequence_f0_90_a9_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_90_a9_adv, byte_range_96_97);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_and(tmp17, tmp21);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp20);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp2, tmp15);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_b0_b5 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(59), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp24 = simd_and(sequence_f0_90_ab_adv, byte_range_b0_b5);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp24);
            byte_ac = simd_and(r10000_10ffff_tmp11, tmp9);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp26 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ba_bf = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp26);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(60), sequence_f0_90_ac_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_ac_adv, byte_range_ba_bf);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp27);
            byte_ae = simd_and(r10000_10ffff_tmp11, tmp12);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_4);
            r10000_10ffff_tmp29 = simd_xor(basis_bits.bit_5, tmp8);
            byte_range_99_9c = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(61), sequence_f0_90_ae_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_90_ae_adv, byte_range_99_9c);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp30);
            byte_91 = simd_and(r10000_10ffff_tmp4, tmp6);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_81 = simd_and(r10000_10ffff_tmp7, tmp6);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(62), r10000_10ffff_tmp31));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp31, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp31;
            r10000_10ffff_tmp32 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp33 = simd_and(basis_bits.bit_5, tmp21);
            r10000_10ffff_tmp34 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp32), simd_andc(r10000_10ffff_tmp33, basis_bits.bit_4));
            byte_range_87_8d = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp34);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(63), sequence_f0_91_81_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_91_81_adv, byte_range_87_8d);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_andc(tmp11, tmp4);
            byte_82 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp36);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp37 = simd_and(tmp7, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp37);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(64), sequence_f0_91_82_adv));
            r10000_10ffff_tmp38 = simd_and(sequence_f0_91_82_adv, byte_range_be_bf);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_andc(tmp21, tmp4);
            byte_83 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp39);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp40 = simd_or(tmp4, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp40);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(65), sequence_f0_91_83_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp12, tmp5);
            byte_85 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp42);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp7, tmp4);
            byte_range_81_83 = simd_and(r10000_10ffff_tmp43, tmp8);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(66), sequence_f0_91_85_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_85_adv, byte_range_81_83);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp44);
            byte_87 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp13);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp12);
            r10000_10ffff_tmp46 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_and(tmp7, tmp5);
            r10000_10ffff_tmp49 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp48);
            cc_range_111c5_111cd_4 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp49);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(67), sequence_f0_91_87_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_91_87_adv, cc_range_111c5_111cd_4);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_andc(tmp17, tmp8);
            byte_88 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp51);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp52 = simd_and(basis_bits.bit_5, tmp8);
            byte_range_b8_bc = simd_andc(r10000_10ffff_tmp25, r10000_10ffff_tmp52);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(68), sequence_f0_91_88_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_88_adv, byte_range_b8_bc);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp53);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp54 = simd_andc(r10000_10ffff_tmp7, basis_bits.bit_4);
            r10000_10ffff_tmp55 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp55);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp17);
            cc_range_115c2_115c9_4 = simd_or(r10000_10ffff_tmp56, r10000_10ffff_tmp57);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(69), sequence_f0_91_97_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_91_97_adv, cc_range_115c2_115c9_4);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp58);
            byte_99 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp17);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            byte_range_81_82 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp46);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(70), sequence_f0_91_99_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_91_99_adv, byte_range_81_82);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp59);
            byte_92 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp36);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(71), r10000_10ffff_tmp60));
            sequence_f0_92_91 = simd_and(r10000_10ffff_tmp60, byte_91);
            sequence_f0_92_adv = r10000_10ffff_tmp60;
            byte_range_b0_b4 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp52);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(72), sequence_f0_92_91_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b4);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp12, tmp11);
            byte_96 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp62);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(73), r10000_10ffff_tmp63));
            sequence_f0_96_a9 = simd_and(r10000_10ffff_tmp63, byte_a9);
            sequence_f0_96_adv = r10000_10ffff_tmp63;
            byte_range_ae_af = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp37);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(74), sequence_f0_96_a9_adv));
            r10000_10ffff_tmp64 = simd_and(sequence_f0_96_a9_adv, byte_range_ae_af);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp64);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            byte_b5 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp42);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(75), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_96_ab_adv, byte_b5);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp65);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            r10000_10ffff_tmp66 = simd_not(r10000_10ffff_tmp26);
            r10000_10ffff_tmp67 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp66), simd_andc(r10000_10ffff_tmp33, basis_bits.bit_4));
            byte_range_b7_b9 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp67);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(76), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_96_ac_adv, byte_range_b7_b9);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp68);
            byte_ad = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp48);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_84 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp15);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(77), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_96_ad_adv, byte_84);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp69);
            byte_9b = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp36);
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(78), r10000_10ffff_tmp70));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp70, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp70;
            carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(79), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_9b_b2_adv, byte_9f);
            struct_term_Y.cc = simd_or(struct_term_Y.cc, r10000_10ffff_tmp71);
          }
          else {
            carryQ.CarryDequeueEnqueue(52, 28);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 80);
        }
        carryQ.CarryQ_Adjust(80);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<80, 0> carryQ;
  };

  struct Property_join_c_Y {
  Property_join_c_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_join_c_Y & struct_join_c_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6, byte_range_8c_8d;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp7;




        struct_join_c_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp5, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_8c_8d);
                  struct_join_c_Y.cc = simd_or(struct_join_c_Y.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_sd_Y {
  Property_sd_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_sd_Y & struct_sd_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_range_69_6a;
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, byte_c9;
		BitBlock r100_2ff_tmp7, byte_range_80_8f, r100_2ff_tmp8, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_24f_tmp1, r100_24f_tmp2, byte_range_c4_c5;
		BitBlock r100_17f_tmp1, byte_c4, r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4;
		BitBlock r100_17f_tmp5, byte_af, byte_c4_adv, r100_17f_tmp6, r100_24f_tmp3;
		BitBlock r100_24f_tmp4, byte_range_c6_c8, r100_24f_tmp5, byte_89, byte_c9_adv;
		BitBlock r180_24f_tmp1, byte_range_90_bf, r100_2ff_tmp11, r100_2ff_tmp12;
		BitBlock r100_2ff_tmp13, byte_ca, r100_2ff_tmp14, byte_range_80_af;
		BitBlock r100_2ff_tmp15, r100_2ff_tmp16, r100_2ff_tmp17, r250_2af_tmp1;
		BitBlock r250_2af_tmp2, byte_a8, r250_2af_tmp3, r250_2af_tmp4, r250_2af_tmp5;
		BitBlock r250_2af_tmp6, r250_2af_tmp7, byte_9d, byte_ca_adv, r250_2af_tmp8;
		BitBlock byte_range_b0_bf, r100_2ff_tmp18, r100_2ff_tmp19, r100_2ff_tmp20;
		BitBlock byte_cb, r100_2ff_tmp21, r2b0_2ff_tmp1, byte_b2, r2b0_2ff_tmp2;
		BitBlock r100_3ff_tmp2, r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8, r100_3ff_tmp9;
		BitBlock byte_range_ce_cf, r100_3ff_tmp10, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock byte_cf, r370_3ff_tmp3, byte_b3, byte_cf_adv, r370_3ff_tmp4;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_range_d0_d7, byte_range_d0_d3;
		BitBlock r400_4ff_tmp1, r400_4ff_tmp2, byte_d1, r400_4ff_tmp3, r400_4ff_tmp4;
		BitBlock r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7, r400_4ff_tmp8;
		BitBlock r400_4ff_tmp9, r400_4ff_tmp10, cc_range_456_458_2, byte_d1_adv;
		BitBlock r400_4ff_tmp11, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_b5;
		BitBlock r1000_1fff_tmp4, sequence_e1_b5, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_a2, sequence_e1_b5_adv;
		BitBlock r1000_1fff_tmp8, r1000_1fff_tmp9, byte_b6, sequence_e1_b6;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, cc_range_1d96_1da8_3, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp17, byte_b8, sequence_e1_b8, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, byte_ad, sequence_e1_b8_adv, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, byte_bb, sequence_e1_bb;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, byte_8b, sequence_e1_bb_adv;
		BitBlock r1000_1fff_tmp25, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81;
		BitBlock r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, byte_b1, sequence_e2_81_adv, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, byte_85, sequence_e2_85, r2000_2fff_tmp10;
		BitBlock byte_range_88_89, sequence_e2_85_adv, r2000_2fff_tmp11;
		BitBlock sequence_e2_b1, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_bc;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp14, r80_10ffff_tmp1;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, sequence_f0_9d, byte_f0_adv;
		BitBlock byte_90, r10000_10ffff_tmp11, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, byte_range_a2_a3;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock byte_91, sequence_f0_9d_91, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_range_96_97, sequence_f0_9d_91_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_92, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, cc_range_1d48a_1d4be_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock byte_93, sequence_f0_9d_93, byte_range_b2_b3, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, byte_94, sequence_f0_9d_94;
		BitBlock byte_range_a6_a7, sequence_f0_9d_94_adv, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, byte_95, sequence_f0_9d_95, byte_range_9a_9b;
		BitBlock sequence_f0_9d_95_adv, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock byte_96, sequence_f0_9d_96, byte_range_8e_8f, sequence_f0_9d_96_adv;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, byte_97, sequence_f0_9d_97;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, cc_range_1d5c2_1d5f6_4;
		BitBlock sequence_f0_9d_97_adv, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock byte_98, sequence_f0_9d_98, byte_range_aa_ab, sequence_f0_9d_98_adv;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_99, sequence_f0_9d_99;
		BitBlock byte_range_9e_9f, sequence_f0_9d_99_adv, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, byte_9a, sequence_f0_9d_9a, byte_range_92_93;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp47;




        struct_sd_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(tmp3, tmp4);
        tmp6 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
        byte_range_69_6a = simd_and(tmp5, tmp6);
        struct_sd_Y.cc = simd_or(struct_sd_Y.cc, byte_range_69_6a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 29))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 6))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 5))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 3))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(tmp4, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                r100_2ff_tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_80_8f = simd_andc(r100_2ff_tmp7, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp8));
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp8, byte_range_80_8f);
                r100_2ff_tmp10 = simd_or(byte_range_c4_c8, r100_2ff_tmp9);
                if ((bitblock::any(r100_2ff_tmp10) || carryQ.CarryTest(1, 1))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(1, 1))) {
                    r100_17f_tmp1 = simd_andc(r100_24f_tmp1, r100_2ff_tmp1);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_and(r100_2ff_tmp7, tmp2);
                    r100_17f_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r100_17f_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                    r100_17f_tmp5 = simd_and(r100_17f_tmp3, r100_17f_tmp4);
                    byte_af = simd_and(r100_17f_tmp2, r100_17f_tmp5);
                    carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(1), byte_c4_adv));
                    r100_17f_tmp6 = simd_and(byte_c4_adv, byte_af);
                    struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r100_17f_tmp6);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(1, 1);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp9);
                  if (bitblock::any(r100_24f_tmp5)) {
                    byte_89 = simd_and(byte_range_80_8f, r100_2ff_tmp6);
                    byte_c9_adv = r100_2ff_tmp8;
                    r180_24f_tmp1 = simd_and(byte_c9_adv, byte_89);
                    struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r180_24f_tmp1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
                byte_range_90_bf = simd_and(r100_2ff_tmp7, r80_7ff_tmp1);
                r100_2ff_tmp11 = simd_and(r100_2ff_tmp8, byte_range_90_bf);
                r100_2ff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp13 = simd_and(tmp4, r100_2ff_tmp12);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r100_2ff_tmp7, r100_2ff_tmp14);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(2), r100_2ff_tmp15));
                r100_2ff_tmp16 = simd_and(r100_2ff_tmp15, byte_range_80_af);
                r100_2ff_tmp17 = simd_or(r100_2ff_tmp11, r100_2ff_tmp16);
                if (bitblock::any(r100_2ff_tmp17)) {
                  r250_2af_tmp1 = simd_and(r100_2ff_tmp7, tmp2);
                  r250_2af_tmp2 = simd_andc(tmp4, r100_2ff_tmp1);
                  byte_a8 = simd_and(r250_2af_tmp1, r250_2af_tmp2);
                  byte_c9_adv = r100_2ff_tmp8;
                  r250_2af_tmp3 = simd_and(byte_c9_adv, byte_a8);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r250_2af_tmp3);
                  r250_2af_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r250_2af_tmp5 = simd_and(r100_2ff_tmp7, r250_2af_tmp4);
                  r250_2af_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r250_2af_tmp7 = simd_and(r250_2af_tmp6, r100_2ff_tmp5);
                  byte_9d = simd_and(r250_2af_tmp5, r250_2af_tmp7);
                  byte_ca_adv = r100_2ff_tmp15;
                  r250_2af_tmp8 = simd_and(byte_ca_adv, byte_9d);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r250_2af_tmp8);
                }
                byte_range_b0_bf = simd_and(r100_2ff_tmp7, r100_2ff_tmp14);
                r100_2ff_tmp18 = simd_and(r100_2ff_tmp15, byte_range_b0_bf);
                r100_2ff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp20 = simd_and(tmp4, r100_2ff_tmp19);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp20);
                r100_2ff_tmp21 = simd_or(r100_2ff_tmp18, byte_cb);
                if (bitblock::any(r100_2ff_tmp21)) {
                  r2b0_2ff_tmp1 = simd_andc(r100_2ff_tmp12, r80_7ff_tmp3);
                  byte_b2 = simd_and(byte_range_b0_bf, r2b0_2ff_tmp1);
                  byte_ca_adv = r100_2ff_tmp15;
                  r2b0_2ff_tmp2 = simd_and(byte_ca_adv, byte_b2);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r2b0_2ff_tmp2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 3);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp5, r100_3ff_tmp6);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(3), r100_3ff_tmp7));
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp7, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(4, 1))) {
                r370_3ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp2 = simd_and(r100_3ff_tmp2, r370_3ff_tmp1);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp2);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r80_7ff_tmp3);
                byte_b3 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(4), byte_cf_adv));
                r370_3ff_tmp4 = simd_and(byte_cf_adv, byte_b3);
                struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r370_3ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 5);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(5, 1))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(5, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r80_7ff_tmp3);
                byte_d1 = simd_and(r80_7ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_and(r400_4ff_tmp3, r80_7ff_tmp4);
                r400_4ff_tmp5 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r400_4ff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp7 = simd_and(r400_4ff_tmp5, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp9 = simd_andc(tmp4, r400_4ff_tmp8);
                r400_4ff_tmp10 = simd_or(r400_4ff_tmp7, r400_4ff_tmp9);
                cc_range_456_458_2 = simd_and(r400_4ff_tmp4, r400_4ff_tmp10);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(5), byte_d1_adv));
                r400_4ff_tmp11 = simd_and(byte_d1_adv, cc_range_456_458_2);
                struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r400_4ff_tmp11);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(6, 10))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(6), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(7, 9))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(7, 5))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(7, 5))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(7), r1000_1fff_tmp4));
                  sequence_e1_b5 = simd_and(r1000_1fff_tmp4, byte_b5);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(r800_ffff_tmp5, tmp2);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp1);
                  byte_a2 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(8), sequence_e1_b5_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_b5_adv, byte_a2);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_b6 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp9);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp9);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp5, r800_ffff_tmp4);
                  r1000_1fff_tmp14 = simd_or(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(tmp4, r800_ffff_tmp3);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp15);
                  cc_range_1d96_1da8_3 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(9), sequence_e1_b6_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_b6_adv, cc_range_1d96_1da8_3);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r1000_1fff_tmp17);
                  byte_b8 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp18, r800_1fff_tmp1);
                  byte_ad = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp19);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(10), sequence_e1_b8_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_b8_adv, byte_ad);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp22 = simd_and(tmp4, r1000_1fff_tmp21);
                  byte_bb = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp22);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  r1000_1fff_tmp23 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp24 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp23);
                  byte_8b = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp22);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(11), sequence_e1_bb_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_bb_adv, byte_8b);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r1000_1fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(7, 5);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(12, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(12, 4))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp6);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(13), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_b1);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp9);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp10 = simd_andc(tmp4, basis_bits.bit_6);
                  byte_range_88_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp10);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(14), sequence_e2_85_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_85_adv, byte_range_88_89);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r2000_2fff_tmp11);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_andc(r2000_2fff_tmp12, r800_ffff_tmp3);
                  byte_bc = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp13);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(15), sequence_e2_b1_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_b1_adv, byte_bc);
                  struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r2000_2fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 9);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(6, 10);
          }
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(16, 13))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(16), r10000_10ffff_tmp10));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp10, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp10;
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(17), r10000_10ffff_tmp11));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp11, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp11;
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, tmp2);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_a2_a3 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(18), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9d_90_adv, byte_range_a2_a3);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp15);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp16, basis_bits.bit_6);
            byte_range_96_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(19), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_9d_91_adv, byte_range_96_97);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp22 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(tmp4, basis_bits.bit_6);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp7, basis_bits.bit_6);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp26);
            cc_range_1d48a_1d4be_4 = simd_or(r10000_10ffff_tmp24, r10000_10ffff_tmp27);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(20), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp28 = simd_and(sequence_f0_9d_92_adv, cc_range_1d48a_1d4be_4);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp28);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp30 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp30);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            byte_range_b2_b3 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp13);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(21), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp31 = simd_and(sequence_f0_9d_93_adv, byte_range_b2_b3);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp31);
            r10000_10ffff_tmp32 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp32);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            byte_range_a6_a7 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(22), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_9d_94_adv, byte_range_a6_a7);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp8);
            byte_95 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp34);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            byte_range_9a_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp23);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(23), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_9d_95_adv, byte_range_9a_9b);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp19);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp36);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            byte_range_8e_8f = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp26);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(24), sequence_f0_9d_96_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_9d_96_adv, byte_range_8e_8f);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp29);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp13);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp25, r10000_10ffff_tmp17);
            cc_range_1d5c2_1d5f6_4 = simd_or(r10000_10ffff_tmp39, r10000_10ffff_tmp40);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(25), sequence_f0_9d_97_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_9d_97_adv, cc_range_1d5c2_1d5f6_4);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_andc(tmp4, r10000_10ffff_tmp2);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp42);
            sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
            byte_range_aa_ab = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp23);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(26), sequence_f0_9d_98_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_9d_98_adv, byte_range_aa_ab);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_and(tmp4, r10000_10ffff_tmp8);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp44);
            sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
            byte_range_9e_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp26);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(27), sequence_f0_9d_99_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_9d_99_adv, byte_range_9e_9f);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_and(tmp4, r10000_10ffff_tmp19);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp46);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            byte_range_92_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp13);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(28), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_9d_9a_adv, byte_range_92_93);
            struct_sd_Y.cc = simd_or(struct_sd_Y.cc, r10000_10ffff_tmp47);
          }
          else {
            carryQ.CarryDequeueEnqueue(16, 13);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 29);
        }
        carryQ.CarryQ_Adjust(29);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<29, 0> carryQ;
  };

  struct Property_omath_Y {
  Property_omath_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_omath_Y & struct_omath_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_5e, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2, byte_cd;
		BitBlock r100_3ff_tmp3, r100_3ff_tmp4, byte_range_b0_bf, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_ce_cf, r100_3ff_tmp8;
		BitBlock r370_3ff_tmp1, r370_3ff_tmp2, byte_cf, r370_3ff_tmp3, r370_3ff_tmp4;
		BitBlock r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8;
		BitBlock r370_3ff_tmp9, r370_3ff_tmp10, r370_3ff_tmp11, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, cc_range_3d0_3f4_2, byte_cf_adv;
		BitBlock r370_3ff_tmp15, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, cc_range_2016_2032_3, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16, byte_81;
		BitBlock sequence_e2_81, r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, cc_range_2040_207d_3;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp25, byte_82, sequence_e2_82;
		BitBlock r2000_2fff_tmp26, byte_range_8d_8e, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29, byte_83;
		BitBlock sequence_e2_83, r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, cc_range_20d0_20eb_3;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp41, byte_84, sequence_e2_84;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, r2000_2fff_tmp55, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock r2000_2fff_tmp78, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock cc_range_2102_213c_3, sequence_e2_84_adv, r2000_2fff_tmp81, byte_85;
		BitBlock sequence_e2_85, r2000_2fff_tmp82, r2000_2fff_tmp83, byte_range_85_89;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp84, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp85, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock r2000_2fff_tmp91, r2000_2fff_tmp92, r2000_2fff_tmp93;
		BitBlock r2000_2fff_tmp94, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, cc_range_2195_21bc_3;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp102, byte_87, sequence_e2_87;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, r2000_2fff_tmp110, r2000_2fff_tmp111;
		BitBlock r2000_2fff_tmp112, r2000_2fff_tmp113, r2000_2fff_tmp114;
		BitBlock r2000_2fff_tmp115, r2000_2fff_tmp116, cc_range_21c0_21e4_3;
		BitBlock sequence_e2_87_adv, r2000_2fff_tmp117, r2000_2fff_tmp118, byte_8c;
		BitBlock sequence_e2_8c, byte_range_88_8b, sequence_e2_8c_adv;
		BitBlock r2000_2fff_tmp119, byte_8e, sequence_e2_8e, r2000_2fff_tmp120;
		BitBlock r2000_2fff_tmp121, cc_range_23b4_23b7_3, sequence_e2_8e_adv;
		BitBlock r2000_2fff_tmp122, byte_8f, sequence_e2_8f, r2000_2fff_tmp123;
		BitBlock r2000_2fff_tmp124, cc_range_23d0_23e2_3, sequence_e2_8f_adv;
		BitBlock r2000_2fff_tmp125, byte_96, sequence_e2_96, r2000_2fff_tmp126;
		BitBlock r2000_2fff_tmp127, r2000_2fff_tmp128, r2000_2fff_tmp129;
		BitBlock r2000_2fff_tmp130, r2000_2fff_tmp131, r2000_2fff_tmp132;
		BitBlock r2000_2fff_tmp133, cc_range_25a0_25bc_3, sequence_e2_96_adv;
		BitBlock r2000_2fff_tmp134, byte_97, sequence_e2_97, r2000_2fff_tmp135;
		BitBlock r2000_2fff_tmp136, r2000_2fff_tmp137, r2000_2fff_tmp138;
		BitBlock r2000_2fff_tmp139, r2000_2fff_tmp140, r2000_2fff_tmp141;
		BitBlock r2000_2fff_tmp142, r2000_2fff_tmp143, r2000_2fff_tmp144;
		BitBlock r2000_2fff_tmp145, r2000_2fff_tmp146, cc_range_25c0_25e7_3;
		BitBlock sequence_e2_97_adv, r2000_2fff_tmp147, r2000_2fff_tmp148, byte_98;
		BitBlock sequence_e2_98, r2000_2fff_tmp149, byte_range_85_86;
		BitBlock sequence_e2_98_adv, r2000_2fff_tmp150, r2000_2fff_tmp151, byte_99;
		BitBlock sequence_e2_99, r2000_2fff_tmp152, r2000_2fff_tmp153;
		BitBlock r2000_2fff_tmp154, r2000_2fff_tmp155, r2000_2fff_tmp156;
		BitBlock cc_range_2640_266d_3, sequence_e2_99_adv, r2000_2fff_tmp157, byte_9f;
		BitBlock sequence_e2_9f, r2000_2fff_tmp158, r2000_2fff_tmp159;
		BitBlock cc_range_27c5_27e6_3, sequence_e2_9f_adv, r2000_2fff_tmp160, byte_a6;
		BitBlock sequence_e2_a6, r2000_2fff_tmp161, r2000_2fff_tmp162;
		BitBlock r2000_2fff_tmp163, r2000_2fff_tmp164, byte_range_83_98;
		BitBlock sequence_e2_a6_adv, r2000_2fff_tmp165, byte_a7, sequence_e2_a7;
		BitBlock r2000_2fff_tmp166, r2000_2fff_tmp167, cc_range_29d8_29fc_3;
		BitBlock sequence_e2_a7_adv, r2000_2fff_tmp168, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock byte_ef, ra000_ffff_tmp3, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_b9, ra000_ffff_tmp8;
		BitBlock sequence_ef_b9, byte_ef_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, cc_range_fe61_fe68_3;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp13, ra000_ffff_tmp14, byte_bc;
		BitBlock sequence_ef_bc, ra000_ffff_tmp15, ra000_ffff_tmp16;
		BitBlock cc_range_ff3c_ff3e_3, sequence_ef_bc_adv, ra000_ffff_tmp17;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_9d;
		BitBlock r10000_10ffff_tmp8, sequence_f0_9d, byte_f0_adv, byte_90;
		BitBlock r10000_10ffff_tmp9, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock byte_range_80_bf, sequence_f0_9d_90_adv, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, byte_91, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, cc_range_1d440_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, byte_92, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, byte_93, sequence_f0_9d_93, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, cc_range_1d4c0_1d4c5_4;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock byte_94, sequence_f0_9d_94, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, r10000_10ffff_tmp92, cc_range_1d500_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock byte_95, sequence_f0_9d_95, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock r10000_10ffff_tmp106, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock byte_range_96_99, sequence_f0_9d_byte_range_96_99;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9d_byte_range_96_99_sfx;
		BitBlock r10000_10ffff_tmp111, byte_9a, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp112, r10000_10ffff_tmp113, byte_range_80_a5;
		BitBlock r10000_10ffff_tmp114, sequence_f0_9d_9a_byte_range_80_a5, byte_9b;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp115, sequence_f0_9d_9b_80;
		BitBlock r10000_10ffff_tmp116, byte_9c, sequence_f0_9d_9c, byte_range_80_94;
		BitBlock r10000_10ffff_tmp117, sequence_f0_9d_9c_byte_range_80_94;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp118, byte_range_80_8e;
		BitBlock r10000_10ffff_tmp119, sequence_f0_9d_9d_byte_range_80_8e, byte_9e;
		BitBlock sequence_f0_9d_9e, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock byte_range_80_88, r10000_10ffff_tmp122;
		BitBlock sequence_f0_9d_9e_byte_range_80_88, r10000_10ffff_tmp123;
		BitBlock sequence_f0_9d_9f, byte_range_80_82, r10000_10ffff_tmp124;
		BitBlock sequence_f0_9d_9f_byte_range_80_82, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp125, byte_b8, r10000_10ffff_tmp126;
		BitBlock sequence_f0_9e_b8, sequence_f0_9e_adv, r10000_10ffff_tmp127;
		BitBlock r10000_10ffff_tmp128, r10000_10ffff_tmp129, r10000_10ffff_tmp130;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, r10000_10ffff_tmp135, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, r10000_10ffff_tmp142;
		BitBlock r10000_10ffff_tmp143, r10000_10ffff_tmp144, r10000_10ffff_tmp145;
		BitBlock r10000_10ffff_tmp146, cc_range_1ee00_1ee3b_4, sequence_f0_9e_b8_adv;
		BitBlock r10000_10ffff_tmp147, sequence_f0_9e_b9, r10000_10ffff_tmp148;
		BitBlock r10000_10ffff_tmp149, r10000_10ffff_tmp150, r10000_10ffff_tmp151;
		BitBlock r10000_10ffff_tmp152, r10000_10ffff_tmp153, r10000_10ffff_tmp154;
		BitBlock r10000_10ffff_tmp155, r10000_10ffff_tmp156, r10000_10ffff_tmp157;
		BitBlock r10000_10ffff_tmp158, r10000_10ffff_tmp159, r10000_10ffff_tmp160;
		BitBlock r10000_10ffff_tmp161, r10000_10ffff_tmp162, r10000_10ffff_tmp163;
		BitBlock r10000_10ffff_tmp164, r10000_10ffff_tmp165, r10000_10ffff_tmp166;
		BitBlock r10000_10ffff_tmp167, r10000_10ffff_tmp168, r10000_10ffff_tmp169;
		BitBlock r10000_10ffff_tmp170, r10000_10ffff_tmp171, r10000_10ffff_tmp172;
		BitBlock r10000_10ffff_tmp173, r10000_10ffff_tmp174, r10000_10ffff_tmp175;
		BitBlock r10000_10ffff_tmp176, r10000_10ffff_tmp177, cc_range_1ee42_1ee7e_4;
		BitBlock sequence_f0_9e_b9_adv, r10000_10ffff_tmp178, byte_ba;
		BitBlock sequence_f0_9e_ba, r10000_10ffff_tmp179, r10000_10ffff_tmp180;
		BitBlock r10000_10ffff_tmp181, r10000_10ffff_tmp182, r10000_10ffff_tmp183;
		BitBlock r10000_10ffff_tmp184, r10000_10ffff_tmp185, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, r10000_10ffff_tmp189;
		BitBlock r10000_10ffff_tmp190, cc_range_1ee80_1eeab_4, sequence_f0_9e_ba_adv;
		BitBlock r10000_10ffff_tmp191;




        struct_omath_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        byte_5e = simd_and(tmp3, tmp6);
        struct_omath_Y.cc = simd_or(struct_omath_Y.cc, byte_5e);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 44))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 2))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp2 = simd_and(tmp4, r100_3ff_tmp1);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r100_3ff_tmp3, r100_3ff_tmp4);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp7 = simd_and(tmp4, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp7);
              r100_3ff_tmp8 = simd_or(r100_3ff_tmp6, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp8) || carryQ.CarryTest(1, 1))) {
                r370_3ff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp2 = simd_and(tmp4, r370_3ff_tmp1);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp2);
                r370_3ff_tmp3 = simd_and(r100_3ff_tmp3, tmp2);
                r370_3ff_tmp4 = simd_andc(r370_3ff_tmp3, r80_7ff_tmp3);
                r370_3ff_tmp5 = simd_andc(r370_3ff_tmp4, r370_3ff_tmp1);
                r370_3ff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp7 = simd_and(r370_3ff_tmp6, r100_3ff_tmp1);
                r370_3ff_tmp8 = simd_and(r370_3ff_tmp3, r370_3ff_tmp7);
                r370_3ff_tmp9 = simd_or(r370_3ff_tmp5, r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r370_3ff_tmp11 = simd_andc(byte_range_b0_bf, r370_3ff_tmp10);
                r370_3ff_tmp12 = simd_or(r370_3ff_tmp9, r370_3ff_tmp11);
                r370_3ff_tmp13 = simd_andc(r370_3ff_tmp6, basis_bits.bit_6);
                r370_3ff_tmp14 = simd_and(byte_range_b0_bf, r370_3ff_tmp13);
                cc_range_3d0_3f4_2 = simd_or(r370_3ff_tmp12, r370_3ff_tmp14);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(1), byte_cf_adv));
                r370_3ff_tmp15 = simd_and(byte_cf_adv, cc_range_3d0_3f4_2);
                struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r370_3ff_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 2);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(2, 23))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(2), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(3, 19))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(3, 19))) {
                r2000_4dff_tmp1 = simd_andc(tmp5, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(3, 19))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(3), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, tmp2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp2, tmp5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp9, basis_bits.bit_4);
                  r2000_2fff_tmp11 = simd_not(r800_ffff_tmp3);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  cc_range_2016_2032_3 = simd_or(r2000_2fff_tmp7, r2000_2fff_tmp13);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(4), sequence_e2_80_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, cc_range_2016_2032_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp15, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp18 = simd_andc(r2000_2fff_tmp17, basis_bits.bit_4);
                  r2000_2fff_tmp19 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp20 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_or(byte_80, r2000_2fff_tmp20);
                  r2000_2fff_tmp22 = simd_and(r2000_2fff_tmp9, tmp4);
                  r2000_2fff_tmp23 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp24 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp23);
                  cc_range_2040_207d_3 = simd_or(r2000_2fff_tmp21, r2000_2fff_tmp24);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(5), sequence_e2_81_adv));
                  r2000_2fff_tmp25 = simd_and(sequence_e2_81_adv, cc_range_2040_207d_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp25);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp1);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp2, tmp4);
                  byte_range_8d_8e = simd_and(r2000_2fff_tmp26, r2000_2fff_tmp23);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(6), sequence_e2_82_adv));
                  r2000_2fff_tmp27 = simd_and(sequence_e2_82_adv, byte_range_8d_8e);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp27);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp29 = simd_andc(r2000_2fff_tmp28, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp29);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp30 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_4, r2000_2fff_tmp30);
                  r2000_2fff_tmp32 = simd_andc(r2000_2fff_tmp5, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp16);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp32, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp17, r800_ffff_tmp2);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp23);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp17, basis_bits.bit_4);
                  r2000_2fff_tmp39 = simd_or(basis_bits.bit_5, r2000_2fff_tmp28);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp38, r2000_2fff_tmp39);
                  cc_range_20d0_20eb_3 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp40);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(7), sequence_e2_83_adv));
                  r2000_2fff_tmp41 = simd_and(sequence_e2_83_adv, cc_range_20d0_20eb_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp41);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp42 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp28);
                  r2000_2fff_tmp43 = simd_or(r2000_4dff_tmp1, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp46 = simd_not(r800_ffff_tmp1);
                  r2000_2fff_tmp47 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp48 = simd_and(basis_bits.bit_4, r2000_2fff_tmp47);
                  r2000_2fff_tmp49 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp46), simd_andc(r2000_2fff_tmp48, basis_bits.bit_3));
                  r2000_2fff_tmp50 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp49);
                  r2000_2fff_tmp51 = simd_or(r2000_2fff_tmp44, r2000_2fff_tmp50);
                  r2000_2fff_tmp52 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp15);
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp5, basis_bits.bit_4);
                  r2000_2fff_tmp56 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp57 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp56), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  r2000_2fff_tmp58 = simd_and(r2000_2fff_tmp55, r2000_2fff_tmp57);
                  r2000_2fff_tmp59 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp58);
                  r2000_2fff_tmp60 = simd_and(r2000_2fff_tmp17, r800_ffff_tmp4);
                  r2000_2fff_tmp61 = simd_or(r2000_2fff_tmp59, r2000_2fff_tmp60);
                  r2000_2fff_tmp62 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp63 = simd_andc(r2000_2fff_tmp62, basis_bits.bit_6);
                  r2000_2fff_tmp64 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_or(r2000_2fff_tmp61, r2000_2fff_tmp64);
                  r2000_2fff_tmp66 = simd_andc(tmp4, basis_bits.bit_6);
                  r2000_2fff_tmp67 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_or(r2000_2fff_tmp65, r2000_2fff_tmp67);
                  r2000_2fff_tmp69 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp70 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
                  r2000_2fff_tmp71 = simd_not(r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_and(tmp4, r2000_2fff_tmp28);
                  r2000_2fff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp71), simd_andc(r2000_2fff_tmp72, basis_bits.bit_3));
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp69, r2000_2fff_tmp73);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp68, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp77 = simd_not(r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp77), simd_andc(r2000_2fff_tmp39, basis_bits.bit_4));
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp78);
                  r2000_2fff_tmp80 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp79);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp80, r2000_2fff_tmp22);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(8), sequence_e2_84_adv));
                  r2000_2fff_tmp81 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp81);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp52);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp82 = simd_not(r2000_2fff_tmp47);
                  r2000_2fff_tmp83 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp82), simd_andc(r2000_2fff_tmp30, basis_bits.bit_4));
                  byte_range_85_89 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp83);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(9), sequence_e2_85_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_85_adv, byte_range_85_89);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp84);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp85 = simd_or(r2000_2fff_tmp83, tmp4);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_andc(r2000_2fff_tmp17, r800_ffff_tmp1);
                  r2000_2fff_tmp88 = simd_and(r2000_2fff_tmp87, r2000_2fff_tmp23);
                  r2000_2fff_tmp89 = simd_or(r2000_2fff_tmp86, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  r2000_2fff_tmp91 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp42);
                  r2000_2fff_tmp94 = simd_or(r2000_2fff_tmp92, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_and(r2000_2fff_tmp38, r2000_2fff_tmp57);
                  r2000_2fff_tmp96 = simd_or(r2000_2fff_tmp94, r2000_2fff_tmp95);
                  r2000_2fff_tmp97 = simd_andc(r2000_2fff_tmp9, r2000_2fff_tmp70);
                  r2000_2fff_tmp98 = simd_or(r2000_2fff_tmp96, r2000_2fff_tmp97);
                  r2000_2fff_tmp99 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r2000_2fff_tmp100 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp99);
                  r2000_2fff_tmp101 = simd_or(r2000_2fff_tmp98, r2000_2fff_tmp100);
                  cc_range_2195_21bc_3 = simd_or(r2000_2fff_tmp101, r2000_2fff_tmp22);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(10), sequence_e2_86_adv));
                  r2000_2fff_tmp102 = simd_and(sequence_e2_86_adv, cc_range_2195_21bc_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp102);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp42);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  r2000_2fff_tmp103 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp104 = simd_and(basis_bits.bit_4, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp104);
                  r2000_2fff_tmp106 = simd_andc(r2000_2fff_tmp5, r2000_2fff_tmp70);
                  r2000_2fff_tmp107 = simd_or(r2000_2fff_tmp105, r2000_2fff_tmp106);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp29);
                  r2000_2fff_tmp109 = simd_or(r2000_2fff_tmp107, r2000_2fff_tmp108);
                  r2000_2fff_tmp110 = simd_not(basis_bits.bit_5);
                  r2000_2fff_tmp111 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp110), simd_andc(r2000_2fff_tmp30, basis_bits.bit_4));
                  r2000_2fff_tmp112 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp111);
                  r2000_2fff_tmp113 = simd_or(r2000_2fff_tmp109, r2000_2fff_tmp112);
                  r2000_2fff_tmp114 = simd_and(tmp4, r2000_2fff_tmp15);
                  r2000_2fff_tmp115 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp114);
                  r2000_2fff_tmp116 = simd_or(r2000_2fff_tmp113, r2000_2fff_tmp115);
                  cc_range_21c0_21e4_3 = simd_or(r2000_2fff_tmp116, r2000_2fff_tmp91);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(11), sequence_e2_87_adv));
                  r2000_2fff_tmp117 = simd_and(sequence_e2_87_adv, cc_range_21c0_21e4_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp117);
                  r2000_2fff_tmp118 = simd_andc(tmp4, r800_ffff_tmp3);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp118);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  byte_range_88_8b = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp62);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(12), sequence_e2_8c_adv));
                  r2000_2fff_tmp119 = simd_and(sequence_e2_8c_adv, byte_range_88_8b);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp119);
                  byte_8e = simd_and(r2000_2fff_tmp2, tmp6);
                  sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
                  r2000_2fff_tmp120 = simd_andc(basis_bits.bit_6, r2000_2fff_tmp28);
                  r2000_2fff_tmp121 = simd_andc(r800_ffff_tmp2, r2000_2fff_tmp120);
                  cc_range_23b4_23b7_3 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp121);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(13), sequence_e2_8e_adv));
                  r2000_2fff_tmp122 = simd_and(sequence_e2_8e_adv, cc_range_23b4_23b7_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp122);
                  byte_8f = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp72);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp123 = simd_andc(r2000_2fff_tmp5, r2000_2fff_tmp3);
                  r2000_2fff_tmp124 = simd_and(r2000_2fff_tmp17, r2000_4dff_tmp1);
                  cc_range_23d0_23e2_3 = simd_or(r2000_2fff_tmp123, r2000_2fff_tmp124);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(14), sequence_e2_8f_adv));
                  r2000_2fff_tmp125 = simd_and(sequence_e2_8f_adv, cc_range_23d0_23e2_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp125);
                  byte_96 = r2000_2fff_tmp7;
                  sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
                  r2000_2fff_tmp126 = simd_andc(r2000_2fff_tmp17, r2000_2fff_tmp70);
                  r2000_2fff_tmp127 = simd_and(basis_bits.bit_5, r2000_2fff_tmp28);
                  r2000_2fff_tmp128 = simd_or(basis_bits.bit_4, r2000_2fff_tmp127);
                  r2000_2fff_tmp129 = simd_not(r2000_2fff_tmp128);
                  r2000_2fff_tmp130 = simd_and(tmp4, basis_bits.bit_6);
                  r2000_2fff_tmp131 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp129), simd_andc(r2000_2fff_tmp130, basis_bits.bit_3));
                  r2000_2fff_tmp132 = simd_and(r2000_2fff_tmp69, r2000_2fff_tmp131);
                  r2000_2fff_tmp133 = simd_or(r2000_2fff_tmp126, r2000_2fff_tmp132);
                  cc_range_25a0_25bc_3 = simd_or(r2000_2fff_tmp133, r2000_2fff_tmp22);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(15), sequence_e2_96_adv));
                  r2000_2fff_tmp134 = simd_and(sequence_e2_96_adv, cc_range_25a0_25bc_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp134);
                  byte_97 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp42);
                  sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
                  r2000_2fff_tmp135 = simd_andc(r2000_2fff_tmp3, r2000_2fff_tmp99);
                  r2000_2fff_tmp136 = simd_and(r2000_2fff_tmp62, basis_bits.bit_6);
                  r2000_2fff_tmp137 = simd_andc(r2000_2fff_tmp135, r2000_2fff_tmp136);
                  r2000_2fff_tmp138 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp137);
                  r2000_2fff_tmp139 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp46), simd_andc(r2000_2fff_tmp72, basis_bits.bit_3));
                  r2000_2fff_tmp140 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp139);
                  r2000_2fff_tmp141 = simd_or(r2000_2fff_tmp138, r2000_2fff_tmp140);
                  r2000_2fff_tmp142 = simd_or(r2000_2fff_tmp141, r2000_2fff_tmp124);
                  r2000_2fff_tmp143 = simd_or(r2000_2fff_tmp142, r2000_2fff_tmp60);
                  r2000_2fff_tmp144 = simd_not(r2000_2fff_tmp30);
                  r2000_2fff_tmp145 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp144), simd_andc(r2000_2fff_tmp127, basis_bits.bit_4));
                  r2000_2fff_tmp146 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp145);
                  cc_range_25c0_25e7_3 = simd_or(r2000_2fff_tmp143, r2000_2fff_tmp146);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(16), sequence_e2_97_adv));
                  r2000_2fff_tmp147 = simd_and(sequence_e2_97_adv, cc_range_25c0_25e7_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp147);
                  r2000_2fff_tmp148 = simd_andc(r2000_2fff_tmp62, r800_ffff_tmp3);
                  byte_98 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp148);
                  sequence_e2_98 = simd_and(byte_e2_adv, byte_98);
                  r2000_2fff_tmp149 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r2000_2fff_tmp149, r2000_2fff_tmp23);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e2_98, carryQ.get_carry_in(17), sequence_e2_98_adv));
                  r2000_2fff_tmp150 = simd_and(sequence_e2_98_adv, byte_range_85_86);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp150);
                  r2000_2fff_tmp151 = simd_and(r2000_2fff_tmp62, r2000_2fff_tmp15);
                  byte_99 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp151);
                  sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
                  r2000_2fff_tmp152 = simd_andc(r2000_2fff_tmp3, r2000_4dff_tmp1);
                  r2000_2fff_tmp153 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp152);
                  r2000_2fff_tmp154 = simd_or(r2000_2fff_tmp153, r2000_2fff_tmp87);
                  r2000_2fff_tmp155 = simd_and(r2000_2fff_tmp17, tmp4);
                  r2000_2fff_tmp156 = simd_and(r2000_2fff_tmp155, r2000_2fff_tmp23);
                  cc_range_2640_266d_3 = simd_or(r2000_2fff_tmp154, r2000_2fff_tmp156);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(18), sequence_e2_99_adv));
                  r2000_2fff_tmp157 = simd_and(sequence_e2_99_adv, cc_range_2640_266d_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp157);
                  byte_9f = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp72);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  r2000_2fff_tmp158 = simd_or(basis_bits.bit_4, r2000_2fff_tmp103);
                  r2000_2fff_tmp159 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp158);
                  cc_range_27c5_27e6_3 = simd_or(byte_range_85_86, r2000_2fff_tmp159);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(19), sequence_e2_9f_adv));
                  r2000_2fff_tmp160 = simd_and(sequence_e2_9f_adv, cc_range_27c5_27e6_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp160);
                  byte_a6 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp6);
                  sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
                  r2000_2fff_tmp161 = simd_and(basis_bits.bit_4, r2000_2fff_tmp76);
                  r2000_2fff_tmp162 = simd_not(r2000_2fff_tmp161);
                  r2000_2fff_tmp163 = simd_or(r800_ffff_tmp1, r2000_2fff_tmp28);
                  r2000_2fff_tmp164 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp162), simd_andc(r2000_2fff_tmp163, basis_bits.bit_3));
                  byte_range_83_98 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp164);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(20), sequence_e2_a6_adv));
                  r2000_2fff_tmp165 = simd_and(sequence_e2_a6_adv, byte_range_83_98);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp165);
                  byte_a7 = r2000_2fff_tmp93;
                  sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
                  r2000_2fff_tmp166 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp62);
                  r2000_2fff_tmp167 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp66);
                  cc_range_29d8_29fc_3 = simd_or(r2000_2fff_tmp166, r2000_2fff_tmp167);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(21), sequence_e2_a7_adv));
                  r2000_2fff_tmp168 = simd_and(sequence_e2_a7_adv, cc_range_29d8_29fc_3);
                  struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r2000_2fff_tmp168);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 19);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 19);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 19);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(22, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp4, ra000_ffff_tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(22), ra000_ffff_tmp8));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp8, byte_b9);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp10 = simd_andc(basis_bits.bit_7, r800_ffff_tmp1);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp5, r800_ffff_tmp3);
              ra000_ffff_tmp12 = simd_or(ra000_ffff_tmp10, ra000_ffff_tmp11);
              cc_range_fe61_fe68_3 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp12);
              carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(23), sequence_ef_b9_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_b9_adv, cc_range_fe61_fe68_3);
              struct_omath_Y.cc = simd_or(struct_omath_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, tmp5);
              ra000_ffff_tmp16 = simd_andc(tmp4, ra000_ffff_tmp15);
              cc_range_ff3c_ff3e_3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp16);
              carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(24), sequence_ef_bc_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ef_bc_adv, cc_range_ff3c_ff3e_3);
              struct_omath_Y.cc = simd_or(struct_omath_Y.cc, ra000_ffff_tmp17);
            }
            else {
              carryQ.CarryDequeueEnqueue(22, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(2, 23);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(25, 19))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, tmp2);
            r10000_10ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp7 = simd_and(tmp4, r10000_10ffff_tmp6);
            byte_9d = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(25), r10000_10ffff_tmp8));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp8, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp8;
            byte_90 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp3);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(26), r10000_10ffff_tmp9));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp9, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp9;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(27), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp12);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp13 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_and(byte_range_80_bf, r10000_10ffff_tmp21);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp17, r10000_10ffff_tmp22);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(28), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_andc(tmp5, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp24);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp25 = simd_and(tmp4, r10000_10ffff_tmp2);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_and(tmp4, basis_bits.bit_6);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(r10000_10ffff_tmp27, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp24);
            r10000_10ffff_tmp33 = simd_or(r10000_10ffff_tmp30, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp35, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_or(r10000_10ffff_tmp33, r10000_10ffff_tmp37);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp31, basis_bits.bit_4);
            r10000_10ffff_tmp40 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp39, r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_or(r10000_10ffff_tmp38, r10000_10ffff_tmp41);
            r10000_10ffff_tmp43 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp44 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp45 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp44);
            r10000_10ffff_tmp46 = simd_not(r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp46), simd_andc(r10000_10ffff_tmp28, basis_bits.bit_3));
            r10000_10ffff_tmp48 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp47);
            r10000_10ffff_tmp49 = simd_or(r10000_10ffff_tmp42, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp51 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp52 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp52);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp53);
            r10000_10ffff_tmp55 = simd_or(r10000_10ffff_tmp49, r10000_10ffff_tmp54);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp50, tmp4);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp2);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp55, r10000_10ffff_tmp57);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(29), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp58);
            r10000_10ffff_tmp59 = simd_andc(r10000_10ffff_tmp52, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp59);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp61 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp60);
            r10000_10ffff_tmp62 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp1);
            r10000_10ffff_tmp63 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp15);
            r10000_10ffff_tmp64 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp63);
            r10000_10ffff_tmp65 = simd_and(byte_range_80_bf, r10000_10ffff_tmp64);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp62, r10000_10ffff_tmp65);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(30), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp2);
            byte_94 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp67);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp68 = simd_andc(r10000_10ffff_tmp61, basis_bits.bit_4);
            r10000_10ffff_tmp69 = simd_andc(r10000_10ffff_tmp68, r10000_10ffff_tmp18);
            r10000_10ffff_tmp70 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp52);
            r10000_10ffff_tmp71 = simd_not(r10000_10ffff_tmp70);
            r10000_10ffff_tmp72 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp52);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_4));
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_or(r10000_10ffff_tmp69, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_not(r10000_10ffff_tmp15);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp76), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_3));
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp77);
            r10000_10ffff_tmp79 = simd_or(r10000_10ffff_tmp75, r10000_10ffff_tmp78);
            r10000_10ffff_tmp80 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp81 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp80), simd_andc(r10000_10ffff_tmp18, basis_bits.bit_4));
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_or(r10000_10ffff_tmp79, r10000_10ffff_tmp82);
            r10000_10ffff_tmp84 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp45);
            r10000_10ffff_tmp85 = simd_not(r10000_10ffff_tmp84);
            r10000_10ffff_tmp86 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp87 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp85), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_2));
            r10000_10ffff_tmp88 = simd_and(byte_range_80_bf, r10000_10ffff_tmp87);
            r10000_10ffff_tmp89 = simd_or(r10000_10ffff_tmp83, r10000_10ffff_tmp88);
            r10000_10ffff_tmp90 = simd_and(r10000_10ffff_tmp50, basis_bits.bit_4);
            r10000_10ffff_tmp91 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp52);
            r10000_10ffff_tmp92 = simd_and(r10000_10ffff_tmp90, r10000_10ffff_tmp91);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp89, r10000_10ffff_tmp92);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(31), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp6);
            byte_95 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp94);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp95 = simd_andc(r10000_10ffff_tmp68, r10000_10ffff_tmp14);
            r10000_10ffff_tmp96 = simd_and(r10000_10ffff_tmp34, tmp5);
            r10000_10ffff_tmp97 = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp96);
            r10000_10ffff_tmp98 = simd_or(r10000_10ffff_tmp95, r10000_10ffff_tmp97);
            r10000_10ffff_tmp99 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp100 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp99), simd_andc(r10000_10ffff_tmp45, basis_bits.bit_3));
            r10000_10ffff_tmp101 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp100);
            r10000_10ffff_tmp102 = simd_or(r10000_10ffff_tmp98, r10000_10ffff_tmp101);
            r10000_10ffff_tmp103 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp104 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp103);
            r10000_10ffff_tmp105 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp104);
            r10000_10ffff_tmp106 = simd_and(byte_range_80_bf, r10000_10ffff_tmp105);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp102, r10000_10ffff_tmp106);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(32), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp107 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_not(r10000_10ffff_tmp44);
            r10000_10ffff_tmp109 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp108), simd_andc(r10000_10ffff_tmp18, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp109);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(33), r10000_10ffff_tmp110));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp110, byte_range_80_bf);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp51, tmp5);
            byte_9a = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp111);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp112 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp19);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp113);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(34), r10000_10ffff_tmp114));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp114, byte_range_80_a5);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            byte_9b = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp53);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            byte_80 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp3);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(35), r10000_10ffff_tmp115));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp115, byte_80);
            r10000_10ffff_tmp116 = simd_andc(tmp4, r10000_10ffff_tmp2);
            byte_9c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp116);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp17;
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(36), r10000_10ffff_tmp117));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp117, byte_range_80_94);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp72);
            byte_range_80_8e = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp118);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(37), r10000_10ffff_tmp119));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp119, byte_range_80_8e);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = simd_and(r10000_10ffff_tmp11, tmp6);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp120 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp121 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp120);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp121);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(38), r10000_10ffff_tmp122));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp122, byte_range_80_88);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            r10000_10ffff_tmp123 = simd_and(tmp4, r10000_10ffff_tmp52);
            byte_9f = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp123);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp62, r10000_10ffff_tmp52);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(39), r10000_10ffff_tmp124));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp124, byte_range_80_82);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp125 = simd_andc(r10000_10ffff_tmp51, r10000_10ffff_tmp2);
            byte_b8 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp125);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(40), r10000_10ffff_tmp126));
            sequence_f0_9e_b8 = simd_and(r10000_10ffff_tmp126, byte_b8);
            sequence_f0_9e_adv = r10000_10ffff_tmp126;
            r10000_10ffff_tmp127 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp63);
            r10000_10ffff_tmp128 = simd_or(r10000_10ffff_tmp62, r10000_10ffff_tmp127);
            r10000_10ffff_tmp129 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp1);
            r10000_10ffff_tmp130 = simd_and(r10000_10ffff_tmp129, r10000_10ffff_tmp36);
            r10000_10ffff_tmp131 = simd_or(r10000_10ffff_tmp128, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp67);
            r10000_10ffff_tmp133 = simd_or(r10000_10ffff_tmp131, r10000_10ffff_tmp132);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp52);
            r10000_10ffff_tmp135 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp134);
            r10000_10ffff_tmp136 = simd_or(r10000_10ffff_tmp133, r10000_10ffff_tmp135);
            r10000_10ffff_tmp137 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp52);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp138), simd_andc(r10000_10ffff_tmp121, basis_bits.bit_3));
            r10000_10ffff_tmp140 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp139);
            r10000_10ffff_tmp141 = simd_or(r10000_10ffff_tmp136, r10000_10ffff_tmp140);
            r10000_10ffff_tmp142 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp34);
            r10000_10ffff_tmp143 = simd_or(r10000_10ffff_tmp141, r10000_10ffff_tmp142);
            r10000_10ffff_tmp144 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp6);
            r10000_10ffff_tmp145 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp144);
            r10000_10ffff_tmp146 = simd_or(r10000_10ffff_tmp143, r10000_10ffff_tmp145);
            cc_range_1ee00_1ee3b_4 = simd_or(r10000_10ffff_tmp146, r10000_10ffff_tmp54);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(41), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp147 = simd_and(sequence_f0_9e_b8_adv, cc_range_1ee00_1ee3b_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp147);
            byte_b9 = r10000_10ffff_tmp145;
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            r10000_10ffff_tmp148 = simd_or(r10000_10ffff_tmp24, r10000_10ffff_tmp134);
            r10000_10ffff_tmp149 = simd_or(r10000_10ffff_tmp148, r10000_10ffff_tmp144);
            r10000_10ffff_tmp150 = simd_or(r10000_10ffff_tmp149, r10000_10ffff_tmp53);
            r10000_10ffff_tmp151 = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp150);
            r10000_10ffff_tmp152 = simd_and(r10000_10ffff_tmp61, tmp4);
            r10000_10ffff_tmp153 = simd_and(r10000_10ffff_tmp152, r10000_10ffff_tmp2);
            r10000_10ffff_tmp154 = simd_or(r10000_10ffff_tmp151, r10000_10ffff_tmp153);
            r10000_10ffff_tmp155 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            r10000_10ffff_tmp156 = simd_and(r10000_10ffff_tmp155, r10000_10ffff_tmp36);
            r10000_10ffff_tmp157 = simd_or(r10000_10ffff_tmp154, r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(r10000_10ffff_tmp157, byte_94);
            r10000_10ffff_tmp159 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp134);
            r10000_10ffff_tmp160 = simd_or(r10000_10ffff_tmp158, r10000_10ffff_tmp159);
            r10000_10ffff_tmp161 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp144);
            r10000_10ffff_tmp162 = simd_or(r10000_10ffff_tmp160, r10000_10ffff_tmp161);
            r10000_10ffff_tmp163 = simd_or(r10000_10ffff_tmp162, byte_9b);
            r10000_10ffff_tmp164 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp7);
            r10000_10ffff_tmp165 = simd_or(r10000_10ffff_tmp163, r10000_10ffff_tmp164);
            r10000_10ffff_tmp166 = simd_or(r10000_10ffff_tmp165, byte_9f);
            r10000_10ffff_tmp167 = simd_or(r10000_10ffff_tmp166, r10000_10ffff_tmp130);
            r10000_10ffff_tmp168 = simd_or(r10000_10ffff_tmp167, r10000_10ffff_tmp132);
            r10000_10ffff_tmp169 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp73);
            r10000_10ffff_tmp170 = simd_or(r10000_10ffff_tmp168, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp138), simd_andc(tmp4, basis_bits.bit_3));
            r10000_10ffff_tmp172 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp171);
            r10000_10ffff_tmp173 = simd_or(r10000_10ffff_tmp170, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(r10000_10ffff_tmp173, r10000_10ffff_tmp142);
            r10000_10ffff_tmp175 = simd_and(r10000_10ffff_tmp90, r10000_10ffff_tmp40);
            r10000_10ffff_tmp176 = simd_or(r10000_10ffff_tmp174, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_and(r10000_10ffff_tmp50, tmp6);
            cc_range_1ee42_1ee7e_4 = simd_or(r10000_10ffff_tmp176, r10000_10ffff_tmp177);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(42), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_9e_b9_adv, cc_range_1ee42_1ee7e_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp178);
            byte_ba = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp111);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            r10000_10ffff_tmp179 = simd_andc(r10000_10ffff_tmp61, r10000_10ffff_tmp45);
            r10000_10ffff_tmp180 = simd_not(tmp4);
            r10000_10ffff_tmp181 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp70);
            r10000_10ffff_tmp182 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp180), simd_andc(r10000_10ffff_tmp181, basis_bits.bit_3));
            r10000_10ffff_tmp183 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_or(r10000_10ffff_tmp179, r10000_10ffff_tmp183);
            r10000_10ffff_tmp185 = simd_and(r10000_10ffff_tmp129, r10000_10ffff_tmp2);
            r10000_10ffff_tmp186 = simd_or(r10000_10ffff_tmp184, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp108), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4));
            r10000_10ffff_tmp188 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp187);
            r10000_10ffff_tmp189 = simd_or(r10000_10ffff_tmp186, r10000_10ffff_tmp188);
            r10000_10ffff_tmp190 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp182);
            cc_range_1ee80_1eeab_4 = simd_or(r10000_10ffff_tmp189, r10000_10ffff_tmp190);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(43), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp191 = simd_and(sequence_f0_9e_ba_adv, cc_range_1ee80_1eeab_4);
            struct_omath_Y.cc = simd_or(struct_omath_Y.cc, r10000_10ffff_tmp191);
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 19);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 44);
        }
        carryQ.CarryQ_Adjust(44);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<44, 0> carryQ;
  };

  struct Property_vs_Y {
  Property_vs_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_vs_Y & struct_vs_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a0, r1000_1fff_tmp3;
		BitBlock sequence_e1_a0, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock byte_range_8b_8d, sequence_e1_a0_adv, r1000_1fff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_b8;
		BitBlock ra000_ffff_tmp8, sequence_ef_b8, byte_ef_adv, ra000_ffff_tmp9;
		BitBlock byte_range_80_8f, sequence_ef_b8_adv, ra000_ffff_tmp10;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock r10000_10ffff_tmp8, sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock byte_range_84_86, r10000_10ffff_tmp13;
		BitBlock sequence_f3_a0_byte_range_84_86, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp14, sequence_f3_a0_byte_range_84_86_sfx;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_87, sequence_f3_a0_adv, sequence_f3_a0_87, byte_range_80_af;
		BitBlock r10000_10ffff_tmp18, sequence_f3_a0_87_byte_range_80_af;




        struct_vs_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 9))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 2))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(1, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp2 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_a0 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r1000_1fff_tmp3));
                  sequence_e1_a0 = simd_and(r1000_1fff_tmp3, byte_a0);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(r1000_1fff_tmp5, basis_bits.bit_4);
                  r1000_1fff_tmp7 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp7), simd_andc(r1000_1fff_tmp8, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(2), sequence_e1_a0_adv));
                  r1000_1fff_tmp10 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
                  struct_vs_Y.cc = simd_or(struct_vs_Y.cc, r1000_1fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(3, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(3), ra000_ffff_tmp8));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp8, byte_b8);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp9);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(4), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_vs_Y.cc = simd_or(struct_vs_Y.cc, ra000_ffff_tmp10);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(5, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp7 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp6);
            byte_a0 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(5), r10000_10ffff_tmp8));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp8, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp8;
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp9);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(6), r10000_10ffff_tmp13));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp13, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(7), r10000_10ffff_tmp14));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp14, byte_range_80_bf);
            struct_vs_Y.cc = simd_or(struct_vs_Y.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp15 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp9);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp2);
            byte_87 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp17);
            sequence_f3_a0_adv = r10000_10ffff_tmp13;
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(8), r10000_10ffff_tmp18));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp18, byte_range_80_af);
            struct_vs_Y.cc = simd_or(struct_vs_Y.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<9, 0> carryQ;
  };

  struct Property_nchar_Y {
  Property_nchar_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_nchar_Y & struct_nchar_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8, byte_b7;
		BitBlock ra000_ffff_tmp9, sequence_ef_b7, byte_ef_adv, ra000_ffff_tmp10;
		BitBlock byte_range_90_af, sequence_ef_b7_adv, ra000_ffff_tmp11, byte_bf;
		BitBlock sequence_ef_bf, ra000_ffff_tmp12, byte_range_be_bf;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp13, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_9f, r10000_10ffff_tmp10, sequence_f0_9f;
		BitBlock byte_f0_adv, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock sequence_f0_9f_bf, sequence_f0_9f_adv, r10000_10ffff_tmp13;
		BitBlock sequence_f0_9f_bf_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock byte_af, sequence_f0_af, r10000_10ffff_tmp16, sequence_f0_af_bf;
		BitBlock sequence_f0_af_adv, sequence_f0_af_bf_adv, r10000_10ffff_tmp17;
		BitBlock sequence_f0_bf, r10000_10ffff_tmp18, sequence_f0_bf_bf;
		BitBlock sequence_f0_bf_adv, sequence_f0_bf_bf_adv, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, byte_f1;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, byte_8f;
		BitBlock r10000_10ffff_tmp24, sequence_f1_8f, byte_f1_adv, r10000_10ffff_tmp25;
		BitBlock sequence_f1_8f_bf, sequence_f1_8f_adv, sequence_f1_8f_bf_adv;
		BitBlock r10000_10ffff_tmp26, sequence_f1_9f, r10000_10ffff_tmp27;
		BitBlock sequence_f1_9f_bf, sequence_f1_9f_adv, sequence_f1_9f_bf_adv;
		BitBlock r10000_10ffff_tmp28, sequence_f1_af, r10000_10ffff_tmp29;
		BitBlock sequence_f1_af_bf, sequence_f1_af_adv, sequence_f1_af_bf_adv;
		BitBlock r10000_10ffff_tmp30, sequence_f1_bf, r10000_10ffff_tmp31;
		BitBlock sequence_f1_bf_bf, sequence_f1_bf_adv, sequence_f1_bf_bf_adv;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock byte_f2, r10000_10ffff_tmp35, sequence_f2_8f, byte_f2_adv;
		BitBlock r10000_10ffff_tmp36, sequence_f2_8f_bf, sequence_f2_8f_adv;
		BitBlock sequence_f2_8f_bf_adv, r10000_10ffff_tmp37, sequence_f2_9f;
		BitBlock r10000_10ffff_tmp38, sequence_f2_9f_bf, sequence_f2_9f_adv;
		BitBlock sequence_f2_9f_bf_adv, r10000_10ffff_tmp39, sequence_f2_af;
		BitBlock r10000_10ffff_tmp40, sequence_f2_af_bf, sequence_f2_af_adv;
		BitBlock sequence_f2_af_bf_adv, r10000_10ffff_tmp41, sequence_f2_bf;
		BitBlock r10000_10ffff_tmp42, sequence_f2_bf_bf, sequence_f2_bf_adv;
		BitBlock sequence_f2_bf_bf_adv, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock byte_f3, r10000_10ffff_tmp45, sequence_f3_8f, byte_f3_adv;
		BitBlock r10000_10ffff_tmp46, sequence_f3_8f_bf, sequence_f3_8f_adv;
		BitBlock sequence_f3_8f_bf_adv, r10000_10ffff_tmp47, sequence_f3_9f;
		BitBlock r10000_10ffff_tmp48, sequence_f3_9f_bf, sequence_f3_9f_adv;
		BitBlock sequence_f3_9f_bf_adv, r10000_10ffff_tmp49, sequence_f3_af;
		BitBlock r10000_10ffff_tmp50, sequence_f3_af_bf, sequence_f3_af_adv;
		BitBlock sequence_f3_af_bf_adv, r10000_10ffff_tmp51, sequence_f3_bf;
		BitBlock r10000_10ffff_tmp52, sequence_f3_bf_bf, sequence_f3_bf_adv;
		BitBlock sequence_f3_bf_bf_adv, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, byte_f4, r10000_10ffff_tmp56, sequence_f4_8f;
		BitBlock byte_f4_adv, r10000_10ffff_tmp57, sequence_f4_8f_bf;
		BitBlock sequence_f4_8f_adv, sequence_f4_8f_bf_adv, r10000_10ffff_tmp58;




        struct_nchar_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 40))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(0, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              ra000_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp2);
              byte_b7 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp8);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(0), ra000_ffff_tmp9));
              sequence_ef_b7 = simd_and(ra000_ffff_tmp9, byte_b7);
              byte_ef_adv = ra000_ffff_tmp9;
              ra000_ffff_tmp10 = simd_xor(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_90_af = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp10);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(1), sequence_ef_b7_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_b7_adv, byte_range_90_af);
              struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, ra000_ffff_tmp11);
              byte_bf = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp3);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_be_bf = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp12);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(2), sequence_ef_bf_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_bf_adv, byte_range_be_bf);
              struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, ra000_ffff_tmp13);
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(3, 37))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(3), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            byte_bf = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp9);
            carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(4), r10000_10ffff_tmp12));
            sequence_f0_9f_bf = simd_and(r10000_10ffff_tmp12, byte_bf);
            sequence_f0_9f_adv = r10000_10ffff_tmp12;
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp7, basis_bits.bit_6);
            byte_range_be_bf = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_bf, carryQ.get_carry_in(5), sequence_f0_9f_bf_adv));
            r10000_10ffff_tmp14 = simd_and(sequence_f0_9f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp14);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_af = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp9);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(6), r10000_10ffff_tmp16));
            sequence_f0_af_bf = simd_and(r10000_10ffff_tmp16, byte_bf);
            sequence_f0_af_adv = r10000_10ffff_tmp16;
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_af_bf, carryQ.get_carry_in(7), sequence_f0_af_bf_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f0_af_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp17);
            sequence_f0_bf = simd_and(byte_f0_adv, byte_bf);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_bf, carryQ.get_carry_in(8), r10000_10ffff_tmp18));
            sequence_f0_bf_bf = simd_and(r10000_10ffff_tmp18, byte_bf);
            sequence_f0_bf_adv = r10000_10ffff_tmp18;
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_bf_bf, carryQ.get_carry_in(9), sequence_f0_bf_bf_adv));
            r10000_10ffff_tmp19 = simd_and(sequence_f0_bf_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp19);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp1);
            byte_f1 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp21);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp22);
            byte_8f = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp9);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_f1, carryQ.get_carry_in(10), r10000_10ffff_tmp24));
            sequence_f1_8f = simd_and(r10000_10ffff_tmp24, byte_8f);
            byte_f1_adv = r10000_10ffff_tmp24;
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f1_8f, carryQ.get_carry_in(11), r10000_10ffff_tmp25));
            sequence_f1_8f_bf = simd_and(r10000_10ffff_tmp25, byte_bf);
            sequence_f1_8f_adv = r10000_10ffff_tmp25;
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f1_8f_bf, carryQ.get_carry_in(12), sequence_f1_8f_bf_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f1_8f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp26);
            sequence_f1_9f = simd_and(byte_f1_adv, byte_9f);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f1_9f, carryQ.get_carry_in(13), r10000_10ffff_tmp27));
            sequence_f1_9f_bf = simd_and(r10000_10ffff_tmp27, byte_bf);
            sequence_f1_9f_adv = r10000_10ffff_tmp27;
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f1_9f_bf, carryQ.get_carry_in(14), sequence_f1_9f_bf_adv));
            r10000_10ffff_tmp28 = simd_and(sequence_f1_9f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp28);
            sequence_f1_af = simd_and(byte_f1_adv, byte_af);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f1_af, carryQ.get_carry_in(15), r10000_10ffff_tmp29));
            sequence_f1_af_bf = simd_and(r10000_10ffff_tmp29, byte_bf);
            sequence_f1_af_adv = r10000_10ffff_tmp29;
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f1_af_bf, carryQ.get_carry_in(16), sequence_f1_af_bf_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f1_af_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp30);
            sequence_f1_bf = simd_and(byte_f1_adv, byte_bf);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f1_bf, carryQ.get_carry_in(17), r10000_10ffff_tmp31));
            sequence_f1_bf_bf = simd_and(r10000_10ffff_tmp31, byte_bf);
            sequence_f1_bf_adv = r10000_10ffff_tmp31;
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f1_bf_bf, carryQ.get_carry_in(18), sequence_f1_bf_bf_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f1_bf_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp33, r10000_10ffff_tmp1);
            byte_f2 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp34);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_f2, carryQ.get_carry_in(19), r10000_10ffff_tmp35));
            sequence_f2_8f = simd_and(r10000_10ffff_tmp35, byte_8f);
            byte_f2_adv = r10000_10ffff_tmp35;
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f2_8f, carryQ.get_carry_in(20), r10000_10ffff_tmp36));
            sequence_f2_8f_bf = simd_and(r10000_10ffff_tmp36, byte_bf);
            sequence_f2_8f_adv = r10000_10ffff_tmp36;
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f2_8f_bf, carryQ.get_carry_in(21), sequence_f2_8f_bf_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f2_8f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp37);
            sequence_f2_9f = simd_and(byte_f2_adv, byte_9f);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f2_9f, carryQ.get_carry_in(22), r10000_10ffff_tmp38));
            sequence_f2_9f_bf = simd_and(r10000_10ffff_tmp38, byte_bf);
            sequence_f2_9f_adv = r10000_10ffff_tmp38;
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f2_9f_bf, carryQ.get_carry_in(23), sequence_f2_9f_bf_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f2_9f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp39);
            sequence_f2_af = simd_and(byte_f2_adv, byte_af);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f2_af, carryQ.get_carry_in(24), r10000_10ffff_tmp40));
            sequence_f2_af_bf = simd_and(r10000_10ffff_tmp40, byte_bf);
            sequence_f2_af_adv = r10000_10ffff_tmp40;
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f2_af_bf, carryQ.get_carry_in(25), sequence_f2_af_bf_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f2_af_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp41);
            sequence_f2_bf = simd_and(byte_f2_adv, byte_bf);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f2_bf, carryQ.get_carry_in(26), r10000_10ffff_tmp42));
            sequence_f2_bf_bf = simd_and(r10000_10ffff_tmp42, byte_bf);
            sequence_f2_bf_adv = r10000_10ffff_tmp42;
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f2_bf_bf, carryQ.get_carry_in(27), sequence_f2_bf_bf_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f2_bf_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp44);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(28), r10000_10ffff_tmp45));
            sequence_f3_8f = simd_and(r10000_10ffff_tmp45, byte_8f);
            byte_f3_adv = r10000_10ffff_tmp45;
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f3_8f, carryQ.get_carry_in(29), r10000_10ffff_tmp46));
            sequence_f3_8f_bf = simd_and(r10000_10ffff_tmp46, byte_bf);
            sequence_f3_8f_adv = r10000_10ffff_tmp46;
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f3_8f_bf, carryQ.get_carry_in(30), sequence_f3_8f_bf_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f3_8f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp47);
            sequence_f3_9f = simd_and(byte_f3_adv, byte_9f);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f3_9f, carryQ.get_carry_in(31), r10000_10ffff_tmp48));
            sequence_f3_9f_bf = simd_and(r10000_10ffff_tmp48, byte_bf);
            sequence_f3_9f_adv = r10000_10ffff_tmp48;
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f3_9f_bf, carryQ.get_carry_in(32), sequence_f3_9f_bf_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f3_9f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp49);
            sequence_f3_af = simd_and(byte_f3_adv, byte_af);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f3_af, carryQ.get_carry_in(33), r10000_10ffff_tmp50));
            sequence_f3_af_bf = simd_and(r10000_10ffff_tmp50, byte_bf);
            sequence_f3_af_adv = r10000_10ffff_tmp50;
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f3_af_bf, carryQ.get_carry_in(34), sequence_f3_af_bf_adv));
            r10000_10ffff_tmp51 = simd_and(sequence_f3_af_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp51);
            sequence_f3_bf = simd_and(byte_f3_adv, byte_bf);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f3_bf, carryQ.get_carry_in(35), r10000_10ffff_tmp52));
            sequence_f3_bf_bf = simd_and(r10000_10ffff_tmp52, byte_bf);
            sequence_f3_bf_adv = r10000_10ffff_tmp52;
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_bf, carryQ.get_carry_in(36), sequence_f3_bf_bf_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f3_bf_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp55 = simd_andc(r10000_10ffff_tmp54, r10000_10ffff_tmp2);
            byte_f4 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp55);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_f4, carryQ.get_carry_in(37), r10000_10ffff_tmp56));
            sequence_f4_8f = simd_and(r10000_10ffff_tmp56, byte_8f);
            byte_f4_adv = r10000_10ffff_tmp56;
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f4_8f, carryQ.get_carry_in(38), r10000_10ffff_tmp57));
            sequence_f4_8f_bf = simd_and(r10000_10ffff_tmp57, byte_bf);
            sequence_f4_8f_adv = r10000_10ffff_tmp57;
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f4_8f_bf, carryQ.get_carry_in(39), sequence_f4_8f_bf_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f4_8f_bf_adv, byte_range_be_bf);
            struct_nchar_Y.cc = simd_or(struct_nchar_Y.cc, r10000_10ffff_tmp58);
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 37);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 40);
        }
        carryQ.CarryQ_Adjust(40);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<40, 0> carryQ;
  };

  struct Property_oalpha_Y {
  Property_oalpha_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_oalpha_Y & struct_oalpha_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, r300_36f_tmp1, r300_36f_tmp2;
		BitBlock r300_36f_tmp3, byte_85, byte_cd_adv, r300_36f_tmp4, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2;
		BitBlock r400_5ff_tmp3, byte_d6, r400_5ff_tmp4, byte_range_90_bf;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, byte_d7;
		BitBlock r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3;
		BitBlock r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6, r590_5ff_tmp7;
		BitBlock cc_range_5b0_5bf_2, byte_d6_adv, r590_5ff_tmp8, r590_5ff_tmp9;
		BitBlock r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13;
		BitBlock r590_5ff_tmp14, r590_5ff_tmp15, r590_5ff_tmp16, cc_range_5c1_5c7_2;
		BitBlock byte_d7_adv, r590_5ff_tmp17, r80_7ff_tmp6, byte_range_d8_db;
		BitBlock r600_6ff_tmp1, r600_6ff_tmp2, byte_d8, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7, byte_range_90_9a;
		BitBlock byte_d8_adv, r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, byte_d9;
		BitBlock r600_6ff_tmp11, r600_6ff_tmp12, r600_6ff_tmp13, r600_6ff_tmp14;
		BitBlock r600_6ff_tmp15, r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18;
		BitBlock r600_6ff_tmp19, r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22;
		BitBlock cc_range_64b_670_2, byte_d9_adv, r600_6ff_tmp23, r600_6ff_tmp24;
		BitBlock byte_db, r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock r600_6ff_tmp40, r600_6ff_tmp41, r600_6ff_tmp42, r600_6ff_tmp43;
		BitBlock cc_range_6d6_6ed_2, byte_db_adv, r600_6ff_tmp44, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5;
		BitBlock byte_range_80_8f, r700_77f_tmp6, r700_77f_tmp7, r700_77f_tmp8;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock r700_74f_tmp5, cc_range_711_730_2, byte_dc_adv, r700_74f_tmp6;
		BitBlock r80_7ff_tmp9, byte_range_de_df, r780_7ff_tmp1, r780_7ff_tmp2, byte_de;
		BitBlock r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7, r780_7bf_tmp8;
		BitBlock byte_range_a6_b0, byte_de_adv, r780_7bf_tmp9, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19, r800_fff_tmp20;
		BitBlock r800_fff_tmp21, cc_range_816_829_3, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, byte_a3, sequence_e0_a3;
		BitBlock r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26, r800_fff_tmp27;
		BitBlock r800_fff_tmp28, r800_fff_tmp29, cc_range_8e4_8f0_3;
		BitBlock sequence_e0_a3_adv, r800_fff_tmp30, byte_a4, sequence_e0_a4;
		BitBlock r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37, r800_fff_tmp38;
		BitBlock r800_fff_tmp39, r800_fff_tmp40, cc_range_900_93e_3;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock byte_a5, sequence_e0_a5, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48, r800_fff_tmp49;
		BitBlock r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52, cc_range_940_962_3;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55;
		BitBlock byte_a6, sequence_e0_a6, r800_fff_tmp56, cc_range_981_9be_3;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp57, r800_fff_tmp58, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp59, r800_fff_tmp60, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64, r800_fff_tmp65;
		BitBlock r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68, r800_fff_tmp69;
		BitBlock r800_fff_tmp70, r800_fff_tmp71, r800_fff_tmp72, r800_fff_tmp73;
		BitBlock cc_range_9c0_9e2_3, sequence_e0_a7_adv, r800_fff_tmp74;
		BitBlock r800_fff_tmp75, byte_a8, sequence_e0_a8, cc_range_a01_a3e_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp76, r800_fff_tmp77, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp78, r800_fff_tmp79, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84;
		BitBlock r800_fff_tmp85, r800_fff_tmp86, cc_range_a40_a75_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp87, r800_fff_tmp88, byte_aa;
		BitBlock sequence_e0_aa, cc_range_a81_abe_3, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp91, r800_fff_tmp92, r800_fff_tmp93, r800_fff_tmp94;
		BitBlock r800_fff_tmp95, r800_fff_tmp96, cc_range_ac0_ae2_3;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp97, r800_fff_tmp98, byte_ac;
		BitBlock sequence_e0_ac, cc_range_b01_b3e_3, sequence_e0_ac_adv;
		BitBlock r800_fff_tmp99, r800_fff_tmp100, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp101, cc_range_b40_b62_3, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp104, r800_fff_tmp105, cc_range_b82_bbe_3;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp106, r800_fff_tmp107, byte_af;
		BitBlock sequence_e0_af, r800_fff_tmp108, r800_fff_tmp109, r800_fff_tmp110;
		BitBlock r800_fff_tmp111, r800_fff_tmp112, r800_fff_tmp113, cc_range_bc0_bd7_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp114, byte_b0, sequence_e0_b0;
		BitBlock cc_range_c00_c3e_3, sequence_e0_b0_adv, r800_fff_tmp115, byte_b1;
		BitBlock sequence_e0_b1, r800_fff_tmp116, r800_fff_tmp117, r800_fff_tmp118;
		BitBlock r800_fff_tmp119, r800_fff_tmp120, cc_range_c40_c62_3;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp121, byte_b2, sequence_e0_b2;
		BitBlock cc_range_c81_cbe_3, sequence_e0_b2_adv, r800_fff_tmp122, byte_b3;
		BitBlock sequence_e0_b3, cc_range_cc0_ce2_3, sequence_e0_b3_adv;
		BitBlock r800_fff_tmp123, byte_b4, sequence_e0_b4, cc_range_d01_d3e_3;
		BitBlock sequence_e0_b4_adv, r800_fff_tmp124, byte_b5, sequence_e0_b5;
		BitBlock r800_fff_tmp125, cc_range_d40_d62_3, sequence_e0_b5_adv;
		BitBlock r800_fff_tmp126, byte_b6, sequence_e0_b6, byte_range_82_83;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp127, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131;
		BitBlock r800_fff_tmp132, r800_fff_tmp133, r800_fff_tmp134, r800_fff_tmp135;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, cc_range_dcf_df2_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp138, byte_b8, sequence_e0_b8;
		BitBlock r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141, cc_range_e31_e34_3;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp142, byte_b9, sequence_e0_b9, byte_8d;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp143, byte_ba, sequence_e0_ba;
		BitBlock r800_fff_tmp144, r800_fff_tmp145, r800_fff_tmp146, r800_fff_tmp147;
		BitBlock cc_range_eb1_ebb_3, sequence_e0_ba_adv, r800_fff_tmp148, byte_bb;
		BitBlock sequence_e0_bb, sequence_e0_bb_adv, r800_fff_tmp149, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp150, byte_range_b1_bf, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp151, byte_be, sequence_e0_be, r800_fff_tmp152;
		BitBlock r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155, r800_fff_tmp156;
		BitBlock r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160;
		BitBlock r800_fff_tmp161, r800_fff_tmp162, r800_fff_tmp163, cc_range_f80_f99_3;
		BitBlock sequence_e0_be_adv, r800_fff_tmp164, r800_1fff_tmp2, r800_1fff_tmp3;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3;
		BitBlock sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock cc_range_102b_103b_3, sequence_e1_80_adv, r1000_1fff_tmp22, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp23, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, cc_range_1056_1071_3, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp51, byte_82, sequence_e1_82, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, cc_range_1082_109c_3;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock sequence_e1_8d, r1000_1fff_tmp60, byte_9f, sequence_e1_8d_adv;
		BitBlock r1000_1fff_tmp61, r1000_1fff_tmp62, byte_9c, sequence_e1_9c;
		BitBlock r1000_1fff_tmp63, r1000_1fff_tmp64, cc_range_1712_1732_3;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp65, byte_9d, sequence_e1_9d;
		BitBlock cc_range_1752_1772_3, sequence_e1_9d_adv, r1000_1fff_tmp66;
		BitBlock r1000_1fff_tmp67, byte_9e, sequence_e1_9e, r1000_1fff_tmp68;
		BitBlock byte_range_b6_bf, sequence_e1_9e_adv, r1000_1fff_tmp69;
		BitBlock sequence_e1_9f, r1000_1fff_tmp70, byte_range_80_88;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp71, byte_a2, sequence_e1_a2;
		BitBlock r1000_1fff_tmp72, sequence_e1_a2_adv, r1000_1fff_tmp73;
		BitBlock sequence_e1_a4, r1000_1fff_tmp74, r1000_1fff_tmp75;
		BitBlock cc_range_1920_1930_3, sequence_e1_a4_adv, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, sequence_e1_a6, byte_range_b0_bf;
		BitBlock sequence_e1_a6_adv, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock sequence_e1_a7, r1000_1fff_tmp80, r1000_1fff_tmp81;
		BitBlock cc_range_19c0_19c8_3, sequence_e1_a7_adv, r1000_1fff_tmp82;
		BitBlock sequence_e1_a8, r1000_1fff_tmp83, r1000_1fff_tmp84, byte_range_97_9b;
		BitBlock sequence_e1_a8_adv, r1000_1fff_tmp85, sequence_e1_a9;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, cc_range_1a55_1a61_3;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp94, sequence_e1_ac;
		BitBlock r1000_1fff_tmp95, r1000_1fff_tmp96, cc_range_1b00_1b35_3;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp97, sequence_e1_ad;
		BitBlock byte_range_80_83, sequence_e1_ad_adv, r1000_1fff_tmp98;
		BitBlock sequence_e1_ae, r1000_1fff_tmp99, r1000_1fff_tmp100;
		BitBlock r1000_1fff_tmp101, r1000_1fff_tmp102, r1000_1fff_tmp103;
		BitBlock cc_range_1b80_1bac_3, sequence_e1_ae_adv, r1000_1fff_tmp104;
		BitBlock sequence_e1_af, r1000_1fff_tmp105, r1000_1fff_tmp106;
		BitBlock byte_range_a7_b1, sequence_e1_af_adv, r1000_1fff_tmp107;
		BitBlock sequence_e1_b0, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock byte_range_a4_b5, sequence_e1_b0_adv, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, sequence_e1_b3, byte_range_b2_b3;
		BitBlock sequence_e1_b3_adv, r1000_1fff_tmp112, sequence_e1_b7;
		BitBlock r1000_1fff_tmp113, byte_range_a7_b4, sequence_e1_b7_adv;
		BitBlock r1000_1fff_tmp114, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, byte_92, r2000_2fff_tmp3, sequence_e2_92;
		BitBlock byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, sequence_e2_92_adv, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, byte_93, sequence_e2_93, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock byte_range_80_a9, sequence_e2_93_adv, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, sequence_e2_b7, byte_range_a0_bf;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp17, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_99, ra000_ffff_tmp8;
		BitBlock sequence_ea_99, byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_range_b4_bb, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp12, byte_9a, sequence_ea_9a, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, ra000_ffff_tmp15, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18, sequence_ea_a0;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, byte_range_a3_a7;
		BitBlock sequence_ea_a0_adv, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock sequence_ea_a2, ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, cc_range_a880_a8b4_3;
		BitBlock sequence_ea_a2_adv, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock sequence_ea_a3, sequence_ea_a3_adv, ra000_ffff_tmp30, sequence_ea_a4;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock byte_range_a6_aa, sequence_ea_a4_adv, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, sequence_ea_a5, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock ra000_ffff_tmp41, byte_range_87_92, sequence_ea_a5_adv;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, sequence_ea_a6;
		BitBlock cc_range_a980_a9b4_3, sequence_ea_a6_adv, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, sequence_ea_a8, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, ra000_ffff_tmp49, ra000_ffff_tmp50;
		BitBlock byte_range_a9_b6, sequence_ea_a8_adv, ra000_ffff_tmp51;
		BitBlock sequence_ea_a9, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock cc_range_aa43_aa4c_3, sequence_ea_a9_adv, ra000_ffff_tmp54;
		BitBlock sequence_ea_aa, ra000_ffff_tmp55, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, ra000_ffff_tmp66;
		BitBlock cc_range_aab0_aabe_3, sequence_ea_aa_adv, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, sequence_ea_ab, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock ra000_ffff_tmp71, cc_range_aaeb_aaf5_3, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp72, sequence_ea_af, ra000_ffff_tmp73, byte_range_a3_aa;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp74, byte_ef, ra000_ffff_tmp75;
		BitBlock ra000_ffff_tmp76, sequence_ef_ac, byte_ef_adv, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp77, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_90;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, sequence_f0_90_8d;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, byte_range_b6_ba, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, sequence_f0_90_a8, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, cc_range_10a01_10a0c_4, sequence_f0_90_a8_adv;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, byte_91, sequence_f0_91;
		BitBlock r10000_10ffff_tmp34, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, cc_range_11000_11038_4;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp37, sequence_f0_91_81;
		BitBlock r10000_10ffff_tmp38, byte_range_80_85, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock sequence_f0_91_82, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock r10000_10ffff_tmp44, cc_range_11082_110b0_4, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, byte_84, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, cc_range_11100_11127_4, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, byte_86, sequence_f0_91_86;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, cc_range_11180_111b3_4;
		BitBlock sequence_f0_91_86_adv, r10000_10ffff_tmp58, byte_88;
		BitBlock sequence_f0_91_88, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, cc_range_1122c_11237_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock byte_8b, sequence_f0_91_8b, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock byte_range_9f_a8, sequence_f0_91_8b_adv, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, byte_8c, sequence_f0_91_8c, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, cc_range_11301_1133e_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp77, sequence_f0_91_8d, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, cc_range_11340_11362_4, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp92, sequence_f0_91_92, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp95, byte_range_80_81, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp96, byte_96, sequence_f0_91_96, r10000_10ffff_tmp97;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, r10000_10ffff_tmp100;
		BitBlock r10000_10ffff_tmp101, r10000_10ffff_tmp102, cc_range_115af_115b8_4;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp103, byte_98;
		BitBlock sequence_f0_91_98, r10000_10ffff_tmp104, byte_range_b0_be;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp105, r10000_10ffff_tmp106;
		BitBlock sequence_f0_91_99, sequence_f0_91_99_adv, r10000_10ffff_tmp107;
		BitBlock r10000_10ffff_tmp108, sequence_f0_91_9a, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, byte_range_ab_b5, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp111, sequence_f0_96, r10000_10ffff_tmp112;
		BitBlock sequence_f0_96_ac, sequence_f0_96_adv, r10000_10ffff_tmp113;
		BitBlock byte_range_b0_b6, sequence_f0_96_ac_adv, r10000_10ffff_tmp114;
		BitBlock sequence_f0_96_bd, r10000_10ffff_tmp115, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, byte_range_91_be, sequence_f0_96_bd_adv;
		BitBlock r10000_10ffff_tmp118, byte_9b, sequence_f0_9b, r10000_10ffff_tmp119;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, r10000_10ffff_tmp120;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp121, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp122, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock sequence_f0_9f_85, r10000_10ffff_tmp125, r10000_10ffff_tmp126;
		BitBlock r10000_10ffff_tmp127, r10000_10ffff_tmp128, r10000_10ffff_tmp129;
		BitBlock r10000_10ffff_tmp130, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock cc_range_1f140_1f170_4, sequence_f0_9f_85_adv, r10000_10ffff_tmp133;
		BitBlock sequence_f0_9f_86, byte_range_80_89, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp134;




        struct_oalpha_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 110))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 9))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 1))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if (bitblock::any(r100_3ff_tmp10)) {
                r300_36f_tmp1 = simd_andc(r100_3ff_tmp6, r80_7ff_tmp1);
                r300_36f_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r300_36f_tmp3 = simd_and(r300_36f_tmp2, r100_3ff_tmp4);
                byte_85 = simd_and(r300_36f_tmp1, r300_36f_tmp3);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp4 = simd_and(byte_cd_adv, byte_85);
                struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r300_36f_tmp4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(1, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(1), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, r400_5ff_tmp7);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(2, 1))) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp2 = simd_and(r400_5ff_tmp4, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_4, r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp6 = simd_and(r590_5ff_tmp5, r400_5ff_tmp7);
                r590_5ff_tmp7 = simd_andc(r590_5ff_tmp4, r590_5ff_tmp6);
                cc_range_5b0_5bf_2 = simd_andc(r590_5ff_tmp2, r590_5ff_tmp7);
                byte_d6_adv = r400_5ff_tmp5;
                r590_5ff_tmp8 = simd_and(byte_d6_adv, cc_range_5b0_5bf_2);
                struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_andc(r400_5ff_tmp4, r80_7ff_tmp1);
                r590_5ff_tmp10 = simd_andc(r590_5ff_tmp9, r80_7ff_tmp3);
                r590_5ff_tmp11 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp12 = simd_and(r590_5ff_tmp10, r590_5ff_tmp11);
                r590_5ff_tmp13 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
                r590_5ff_tmp14 = simd_and(r590_5ff_tmp9, r590_5ff_tmp13);
                r590_5ff_tmp15 = simd_or(r590_5ff_tmp12, r590_5ff_tmp14);
                r590_5ff_tmp16 = simd_and(r590_5ff_tmp9, r400_5ff_tmp8);
                cc_range_5c1_5c7_2 = simd_or(r590_5ff_tmp15, r590_5ff_tmp16);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(2), byte_d7_adv));
                r590_5ff_tmp17 = simd_and(byte_d7_adv, cc_range_5c1_5c7_2);
                struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r590_5ff_tmp17);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(3, 3))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              byte_range_90_9a = simd_andc(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(3), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_90_9a);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp6, r600_6ff_tmp9);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp12 = simd_not(basis_bits.bit_4);
              r600_6ff_tmp13 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp12), simd_andc(r600_6ff_tmp7, basis_bits.bit_3));
              r600_6ff_tmp14 = simd_and(r600_6ff_tmp11, r600_6ff_tmp13);
              r600_6ff_tmp15 = simd_and(r600_6ff_tmp4, basis_bits.bit_4);
              r600_6ff_tmp16 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp17 = simd_and(r600_6ff_tmp15, r600_6ff_tmp16);
              r600_6ff_tmp18 = simd_or(r600_6ff_tmp14, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp20 = simd_and(r600_6ff_tmp3, r600_6ff_tmp19);
              r600_6ff_tmp21 = simd_or(r80_7ff_tmp3, r600_6ff_tmp1);
              r600_6ff_tmp22 = simd_andc(r600_6ff_tmp20, r600_6ff_tmp21);
              cc_range_64b_670_2 = simd_or(r600_6ff_tmp18, r600_6ff_tmp22);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(4), byte_d9_adv));
              r600_6ff_tmp23 = simd_and(byte_d9_adv, cc_range_64b_670_2);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r600_6ff_tmp23);
              r600_6ff_tmp24 = simd_and(r80_7ff_tmp6, r600_6ff_tmp5);
              byte_db = simd_and(r80_7ff_tmp5, r600_6ff_tmp24);
              r600_6ff_tmp25 = simd_and(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp26 = simd_not(r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp26), simd_andc(r600_6ff_tmp27, basis_bits.bit_4));
              r600_6ff_tmp29 = simd_and(r600_6ff_tmp4, r600_6ff_tmp28);
              r600_6ff_tmp30 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp31 = simd_and(r600_6ff_tmp3, r600_6ff_tmp30);
              r600_6ff_tmp32 = simd_andc(r600_6ff_tmp31, basis_bits.bit_4);
              r600_6ff_tmp33 = simd_xor(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp34 = simd_and(r600_6ff_tmp32, r600_6ff_tmp33);
              r600_6ff_tmp35 = simd_or(r600_6ff_tmp29, r600_6ff_tmp34);
              r600_6ff_tmp36 = simd_not(r600_6ff_tmp16);
              r600_6ff_tmp37 = simd_and(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp38 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp36), simd_andc(r600_6ff_tmp37, basis_bits.bit_4));
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp31, r600_6ff_tmp38);
              r600_6ff_tmp40 = simd_or(r600_6ff_tmp35, r600_6ff_tmp39);
              r600_6ff_tmp41 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp42 = simd_and(r600_6ff_tmp41, r600_6ff_tmp9);
              r600_6ff_tmp43 = simd_and(r600_6ff_tmp31, r600_6ff_tmp42);
              cc_range_6d6_6ed_2 = simd_or(r600_6ff_tmp40, r600_6ff_tmp43);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(5), byte_db_adv));
              r600_6ff_tmp44 = simd_and(byte_db_adv, cc_range_6d6_6ed_2);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r600_6ff_tmp44);
            }
            else {
              carryQ.CarryDequeueEnqueue(3, 3);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(6, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(6), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(7, 1))) {
                r700_74f_tmp1 = simd_and(r700_77f_tmp5, r80_7ff_tmp4);
                r700_74f_tmp2 = simd_andc(r700_77f_tmp3, r80_7ff_tmp3);
                r700_74f_tmp3 = simd_and(r700_74f_tmp1, r700_74f_tmp2);
                r700_74f_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r700_74f_tmp5 = simd_and(r700_77f_tmp5, r700_74f_tmp4);
                cc_range_711_730_2 = simd_or(r700_74f_tmp3, r700_74f_tmp5);
                carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(7), byte_dc_adv));
                r700_74f_tmp6 = simd_and(byte_dc_adv, cc_range_711_730_2);
                struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r700_74f_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(7, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(8, 1))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(8, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(r780_7bf_tmp1, basis_bits.bit_2);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r780_7bf_tmp4 = simd_or(r80_7ff_tmp3, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_not(r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp7 = simd_or(basis_bits.bit_4, r780_7bf_tmp6);
                r780_7bf_tmp8 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp5), simd_andc(r780_7bf_tmp7, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp2, r780_7bf_tmp8);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(8), byte_de_adv));
                r780_7bf_tmp9 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r780_7bf_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 9);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(9, 72))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(9), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(10, 55))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(10, 51))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(10, 29))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(10), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_and(r800_fff_tmp4, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp8 = simd_not(r800_fff_tmp7);
                  r800_fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_5, r800_fff_tmp9);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_4, r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_3, r800_fff_tmp11);
                  r800_fff_tmp13 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp8), simd_andc(r800_fff_tmp12, basis_bits.bit_2));
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp5, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_or(r800_fff_tmp6, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp17 = simd_and(r800_fff_tmp16, r800_ffff_tmp3);
                  r800_fff_tmp18 = simd_or(r800_fff_tmp15, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp20 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp21 = simd_and(r800_fff_tmp19, r800_fff_tmp20);
                  cc_range_816_829_3 = simd_or(r800_fff_tmp18, r800_fff_tmp21);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(11), sequence_e0_a0_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_a0_adv, cc_range_816_829_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp9, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp23);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp25 = simd_not(r800_fff_tmp24);
                  r800_fff_tmp26 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp25), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp27 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp29 = simd_and(r800_ffff_tmp5, r800_fff_tmp28);
                  cc_range_8e4_8f0_3 = simd_or(r800_fff_tmp27, r800_fff_tmp29);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(12), sequence_e0_a3_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_a3_adv, cc_range_8e4_8f0_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp30);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_andc(r800_ffff_tmp5, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_andc(r800_fff_tmp32, r800_ffff_tmp1);
                  r800_fff_tmp34 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp35 = simd_and(r800_fff_tmp34, basis_bits.bit_6);
                  r800_fff_tmp36 = simd_and(r800_fff_tmp29, r800_fff_tmp35);
                  r800_fff_tmp37 = simd_or(r800_fff_tmp33, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp39 = simd_and(r800_fff_tmp38, basis_bits.bit_6);
                  r800_fff_tmp40 = simd_and(r800_fff_tmp29, r800_fff_tmp39);
                  cc_range_900_93e_3 = simd_or(r800_fff_tmp37, r800_fff_tmp40);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(13), sequence_e0_a4_adv));
                  r800_fff_tmp41 = simd_and(sequence_e0_a4_adv, cc_range_900_93e_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp41);
                  r800_fff_tmp42 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp43 = simd_and(r800_ffff_tmp2, r800_fff_tmp42);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp43);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp44 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp45 = simd_and(basis_bits.bit_4, r800_fff_tmp44);
                  r800_fff_tmp46 = simd_andc(r800_fff_tmp45, r800_fff_tmp39);
                  r800_fff_tmp47 = simd_andc(r800_fff_tmp32, r800_fff_tmp46);
                  r800_fff_tmp48 = simd_and(r800_fff_tmp4, r800_ffff_tmp2);
                  r800_fff_tmp49 = simd_and(r800_fff_tmp48, r800_ffff_tmp3);
                  r800_fff_tmp50 = simd_or(r800_fff_tmp47, r800_fff_tmp49);
                  r800_fff_tmp51 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp1, r800_fff_tmp51);
                  cc_range_940_962_3 = simd_or(r800_fff_tmp50, r800_fff_tmp52);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(14), sequence_e0_a5_adv));
                  r800_fff_tmp53 = simd_and(sequence_e0_a5_adv, cc_range_940_962_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp55 = simd_and(r800_ffff_tmp2, r800_fff_tmp54);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp55);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp33, r800_ffff_tmp3);
                  cc_range_981_9be_3 = simd_or(r800_fff_tmp56, r800_fff_tmp40);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(15), sequence_e0_a6_adv));
                  r800_fff_tmp57 = simd_and(sequence_e0_a6_adv, cc_range_981_9be_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp57);
                  r800_fff_tmp58 = simd_and(r800_ffff_tmp2, r800_fff_tmp9);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp58);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp59 = simd_andc(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp60 = simd_andc(r800_fff_tmp59, r800_fff_tmp44);
                  r800_fff_tmp61 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp62 = simd_not(r800_fff_tmp61);
                  r800_fff_tmp63 = simd_and(basis_bits.bit_5, r800_fff_tmp9);
                  r800_fff_tmp64 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp62), simd_andc(r800_fff_tmp63, basis_bits.bit_4));
                  r800_fff_tmp65 = simd_and(r800_fff_tmp32, r800_fff_tmp64);
                  r800_fff_tmp66 = simd_or(r800_fff_tmp60, r800_fff_tmp65);
                  r800_fff_tmp67 = simd_and(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp68 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp69 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp68), simd_andc(r800_fff_tmp9, basis_bits.bit_5));
                  r800_fff_tmp70 = simd_and(r800_fff_tmp67, r800_fff_tmp69);
                  r800_fff_tmp71 = simd_or(r800_fff_tmp66, r800_fff_tmp70);
                  r800_fff_tmp72 = simd_and(r800_fff_tmp4, r800_fff_tmp58);
                  r800_fff_tmp73 = simd_or(r800_fff_tmp71, r800_fff_tmp72);
                  cc_range_9c0_9e2_3 = simd_or(r800_fff_tmp73, r800_fff_tmp52);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(16), sequence_e0_a7_adv));
                  r800_fff_tmp74 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9e2_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp74);
                  r800_fff_tmp75 = simd_andc(r800_fff_tmp34, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp75);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  cc_range_a01_a3e_3 = cc_range_981_9be_3;
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(17), sequence_e0_a8_adv));
                  r800_fff_tmp76 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3e_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp76);
                  r800_fff_tmp77 = simd_and(r800_fff_tmp34, r800_fff_tmp42);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp77);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp78 = simd_andc(r800_fff_tmp33, r800_fff_tmp9);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp78, r800_fff_tmp65);
                  r800_fff_tmp80 = simd_or(r800_fff_tmp79, r800_fff_tmp70);
                  r800_fff_tmp81 = simd_andc(r800_fff_tmp42, r800_ffff_tmp1);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp4, r800_fff_tmp81);
                  r800_fff_tmp83 = simd_or(r800_fff_tmp80, r800_fff_tmp82);
                  r800_fff_tmp84 = simd_andc(r800_fff_tmp29, r800_4dff_tmp1);
                  r800_fff_tmp85 = simd_or(r800_fff_tmp83, r800_fff_tmp84);
                  r800_fff_tmp86 = simd_and(r800_fff_tmp29, r800_fff_tmp43);
                  cc_range_a40_a75_3 = simd_or(r800_fff_tmp85, r800_fff_tmp86);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(18), sequence_e0_a9_adv));
                  r800_fff_tmp87 = simd_and(sequence_e0_a9_adv, cc_range_a40_a75_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp87);
                  r800_fff_tmp88 = simd_and(r800_fff_tmp34, r800_fff_tmp54);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp88);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  cc_range_a81_abe_3 = cc_range_981_9be_3;
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(19), sequence_e0_aa_adv));
                  r800_fff_tmp89 = simd_and(sequence_e0_aa_adv, cc_range_a81_abe_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp89);
                  r800_fff_tmp90 = simd_and(r800_fff_tmp34, r800_fff_tmp9);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp90);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp91 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp92 = simd_andc(r800_fff_tmp59, r800_fff_tmp91);
                  r800_fff_tmp93 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp25), simd_andc(r800_fff_tmp63, basis_bits.bit_4));
                  r800_fff_tmp94 = simd_and(r800_fff_tmp32, r800_fff_tmp93);
                  r800_fff_tmp95 = simd_or(r800_fff_tmp92, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_or(r800_fff_tmp95, r800_fff_tmp70);
                  cc_range_ac0_ae2_3 = simd_or(r800_fff_tmp96, r800_fff_tmp52);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(20), sequence_e0_ab_adv));
                  r800_fff_tmp97 = simd_and(sequence_e0_ab_adv, cc_range_ac0_ae2_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp97);
                  r800_fff_tmp98 = simd_andc(r800_fff_tmp38, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp98);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  cc_range_b01_b3e_3 = cc_range_981_9be_3;
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(21), sequence_e0_ac_adv));
                  r800_fff_tmp99 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3e_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp99);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp38, r800_fff_tmp42);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp100);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp101 = simd_or(r800_fff_tmp71, r800_fff_tmp6);
                  cc_range_b40_b62_3 = simd_or(r800_fff_tmp101, r800_fff_tmp52);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(22), sequence_e0_ad_adv));
                  r800_fff_tmp102 = simd_and(sequence_e0_ad_adv, cc_range_b40_b62_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp102);
                  r800_fff_tmp103 = simd_and(r800_fff_tmp38, r800_fff_tmp54);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp103);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp104 = simd_andc(r800_fff_tmp54, r800_ffff_tmp1);
                  r800_fff_tmp105 = simd_and(r800_fff_tmp32, r800_fff_tmp104);
                  cc_range_b82_bbe_3 = simd_or(r800_fff_tmp105, r800_fff_tmp40);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(23), sequence_e0_ae_adv));
                  r800_fff_tmp106 = simd_and(sequence_e0_ae_adv, cc_range_b82_bbe_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp106);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp38, r800_fff_tmp9);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp107);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp108 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp62), simd_andc(r800_fff_tmp91, basis_bits.bit_4));
                  r800_fff_tmp109 = simd_and(r800_fff_tmp32, r800_fff_tmp108);
                  r800_fff_tmp110 = simd_or(r800_fff_tmp78, r800_fff_tmp109);
                  r800_fff_tmp111 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp68), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp112 = simd_and(r800_fff_tmp67, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_or(r800_fff_tmp110, r800_fff_tmp112);
                  cc_range_bc0_bd7_3 = simd_or(r800_fff_tmp113, r800_fff_tmp72);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(24), sequence_e0_af_adv));
                  r800_fff_tmp114 = simd_and(sequence_e0_af_adv, cc_range_bc0_bd7_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp114);
                  byte_b0 = simd_andc(r800_fff_tmp29, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  cc_range_c00_c3e_3 = simd_or(r800_fff_tmp33, r800_fff_tmp40);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(25), sequence_e0_b0_adv));
                  r800_fff_tmp115 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3e_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp115);
                  byte_b1 = simd_and(r800_fff_tmp29, r800_fff_tmp81);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp116 = simd_or(r800_fff_tmp60, r800_fff_tmp109);
                  r800_fff_tmp117 = simd_or(r800_fff_tmp116, r800_fff_tmp112);
                  r800_fff_tmp118 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp119 = simd_and(r800_fff_tmp48, r800_fff_tmp118);
                  r800_fff_tmp120 = simd_or(r800_fff_tmp117, r800_fff_tmp119);
                  cc_range_c40_c62_3 = simd_or(r800_fff_tmp120, r800_fff_tmp52);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(26), sequence_e0_b1_adv));
                  r800_fff_tmp121 = simd_and(sequence_e0_b1_adv, cc_range_c40_c62_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp121);
                  byte_b2 = simd_and(r800_fff_tmp29, r800_fff_tmp104);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  cc_range_c81_cbe_3 = cc_range_981_9be_3;
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(27), sequence_e0_b2_adv));
                  r800_fff_tmp122 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbe_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp122);
                  byte_b3 = simd_and(r800_fff_tmp29, r800_fff_tmp23);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  cc_range_cc0_ce2_3 = cc_range_c40_c62_3;
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(28), sequence_e0_b3_adv));
                  r800_fff_tmp123 = simd_and(sequence_e0_b3_adv, cc_range_cc0_ce2_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp123);
                  byte_b4 = simd_and(r800_fff_tmp29, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  cc_range_d01_d3e_3 = cc_range_981_9be_3;
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(29), sequence_e0_b4_adv));
                  r800_fff_tmp124 = simd_and(sequence_e0_b4_adv, cc_range_d01_d3e_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp124);
                  byte_b5 = r800_fff_tmp86;
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp125 = simd_or(r800_fff_tmp117, r800_fff_tmp72);
                  cc_range_d40_d62_3 = simd_or(r800_fff_tmp125, r800_fff_tmp52);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(30), sequence_e0_b5_adv));
                  r800_fff_tmp126 = simd_and(sequence_e0_b5_adv, cc_range_d40_d62_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp126);
                  byte_b6 = simd_and(r800_fff_tmp29, r800_fff_tmp55);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  byte_range_82_83 = simd_and(r800_fff_tmp32, r800_fff_tmp51);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(31), sequence_e0_b6_adv));
                  r800_fff_tmp127 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp127);
                  byte_b7 = simd_and(r800_fff_tmp29, r800_fff_tmp58);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp128 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp129 = simd_or(basis_bits.bit_4, r800_fff_tmp44);
                  r800_fff_tmp130 = simd_not(r800_fff_tmp129);
                  r800_fff_tmp131 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp130), simd_andc(r800_fff_tmp107, basis_bits.bit_3));
                  r800_fff_tmp132 = simd_and(r800_fff_tmp128, r800_fff_tmp131);
                  r800_fff_tmp133 = simd_and(r800_fff_tmp4, r800_fff_tmp55);
                  r800_fff_tmp134 = simd_or(r800_fff_tmp132, r800_fff_tmp133);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp4, basis_bits.bit_4);
                  r800_fff_tmp136 = simd_or(r800_fff_tmp134, r800_fff_tmp135);
                  r800_fff_tmp137 = simd_and(r800_fff_tmp29, r800_fff_tmp51);
                  cc_range_dcf_df2_3 = simd_or(r800_fff_tmp136, r800_fff_tmp137);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(32), sequence_e0_b7_adv));
                  r800_fff_tmp138 = simd_and(sequence_e0_b7_adv, cc_range_dcf_df2_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp138);
                  byte_b8 = simd_and(r800_fff_tmp29, r800_fff_tmp75);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp139 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp140 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp139), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp141 = simd_or(r800_fff_tmp81, r800_fff_tmp140);
                  cc_range_e31_e34_3 = simd_and(r800_fff_tmp29, r800_fff_tmp141);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(33), sequence_e0_b8_adv));
                  r800_fff_tmp142 = simd_and(sequence_e0_b8_adv, cc_range_e31_e34_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp142);
                  byte_b9 = simd_and(r800_fff_tmp29, r800_fff_tmp77);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  byte_8d = simd_and(r800_fff_tmp32, r800_fff_tmp100);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(34), sequence_e0_b9_adv));
                  r800_fff_tmp143 = simd_and(sequence_e0_b9_adv, byte_8d);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp143);
                  byte_ba = simd_and(r800_fff_tmp29, r800_fff_tmp88);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp144 = simd_or(r800_fff_tmp81, r800_fff_tmp26);
                  r800_fff_tmp145 = simd_and(r800_fff_tmp29, r800_fff_tmp144);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp29, basis_bits.bit_4);
                  r800_fff_tmp147 = simd_and(r800_fff_tmp146, r800_fff_tmp69);
                  cc_range_eb1_ebb_3 = simd_or(r800_fff_tmp145, r800_fff_tmp147);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(35), sequence_e0_ba_adv));
                  r800_fff_tmp148 = simd_and(sequence_e0_ba_adv, cc_range_eb1_ebb_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp148);
                  byte_bb = simd_and(r800_fff_tmp29, r800_fff_tmp90);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(36), sequence_e0_bb_adv));
                  r800_fff_tmp149 = simd_and(sequence_e0_bb_adv, byte_8d);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp149);
                  byte_bd = simd_and(r800_fff_tmp29, r800_fff_tmp100);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp150 = simd_or(basis_bits.bit_4, r800_fff_tmp61);
                  byte_range_b1_bf = simd_and(r800_fff_tmp29, r800_fff_tmp150);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(37), sequence_e0_bd_adv));
                  r800_fff_tmp151 = simd_and(sequence_e0_bd_adv, byte_range_b1_bf);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp151);
                  byte_be = simd_and(r800_fff_tmp29, r800_fff_tmp103);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp152 = simd_andc(r800_fff_tmp32, r800_4dff_tmp1);
                  r800_fff_tmp153 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp154 = simd_and(r800_fff_tmp38, r800_ffff_tmp3);
                  r800_fff_tmp155 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp153), simd_andc(r800_fff_tmp154, basis_bits.bit_3));
                  r800_fff_tmp156 = simd_and(r800_fff_tmp128, r800_fff_tmp155);
                  r800_fff_tmp157 = simd_or(r800_fff_tmp152, r800_fff_tmp156);
                  r800_fff_tmp158 = simd_and(basis_bits.bit_3, r800_fff_tmp154);
                  r800_fff_tmp159 = simd_not(r800_fff_tmp158);
                  r800_fff_tmp160 = simd_and(basis_bits.bit_4, r800_fff_tmp61);
                  r800_fff_tmp161 = simd_and(basis_bits.bit_3, r800_fff_tmp160);
                  r800_fff_tmp162 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp159), simd_andc(r800_fff_tmp161, basis_bits.bit_2));
                  r800_fff_tmp163 = simd_and(r800_ffff_tmp5, r800_fff_tmp162);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp157, r800_fff_tmp163);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(38), sequence_e0_be_adv));
                  r800_fff_tmp164 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r800_fff_tmp164);
                }
                else {
                  carryQ.CarryDequeueEnqueue(10, 29);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(39, 22))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(39), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_5, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_or(basis_bits.bit_4, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_not(r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_5, r1000_1fff_tmp5);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp8), simd_andc(r1000_1fff_tmp10, basis_bits.bit_3));
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp16 = simd_andc(r1000_1fff_tmp15, r800_ffff_tmp3);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_or(r1000_1fff_tmp12, r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp20 = simd_xor(basis_bits.bit_5, r1000_1fff_tmp5);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  cc_range_102b_103b_3 = simd_or(r1000_1fff_tmp18, r1000_1fff_tmp21);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(40), sequence_e1_80_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_80_adv, cc_range_102b_103b_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp22);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp23 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp24 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp23);
                  r1000_1fff_tmp25 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp26 = simd_not(r1000_1fff_tmp25);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp27, basis_bits.bit_4));
                  r1000_1fff_tmp29 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp31 = simd_not(r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp32, basis_bits.bit_6);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_3, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp31), simd_andc(r1000_1fff_tmp34, basis_bits.bit_2));
                  r1000_1fff_tmp36 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_or(r1000_1fff_tmp29, r1000_1fff_tmp36);
                  r1000_1fff_tmp38 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp40 = simd_andc(r1000_1fff_tmp39, r800_ffff_tmp1);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp40);
                  r1000_1fff_tmp42 = simd_or(r1000_1fff_tmp37, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp44 = simd_not(r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp44), simd_andc(r1000_1fff_tmp6, basis_bits.bit_4));
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_andc(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp49 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp48, r1000_1fff_tmp49);
                  cc_range_1056_1071_3 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp50);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(41), sequence_e1_81_adv));
                  r1000_1fff_tmp51 = simd_and(sequence_e1_81_adv, cc_range_1056_1071_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp51);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp40);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp52 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp53 = simd_not(r1000_1fff_tmp5);
                  r1000_1fff_tmp54 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp53), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp55 = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_andc(r1000_1fff_tmp32, basis_bits.bit_6);
                  r1000_1fff_tmp57 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp56);
                  cc_range_1082_109c_3 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp57);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(42), sequence_e1_82_adv));
                  r1000_1fff_tmp58 = simd_and(sequence_e1_82_adv, cc_range_1082_109c_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp58);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp32, r800_1fff_tmp2);
                  byte_8d = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp59);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp5);
                  byte_9f = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp60);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(43), sequence_e1_8d_adv));
                  r1000_1fff_tmp61 = simd_and(sequence_e1_8d_adv, byte_9f);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_andc(r1000_1fff_tmp32, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp62);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp63 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  r1000_1fff_tmp64 = simd_and(r800_ffff_tmp5, basis_bits.bit_3);
                  cc_range_1712_1732_3 = simd_and(r1000_1fff_tmp63, r1000_1fff_tmp64);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(44), sequence_e1_9c_adv));
                  r1000_1fff_tmp65 = simd_and(sequence_e1_9c_adv, cc_range_1712_1732_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp65);
                  byte_9d = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp59);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  cc_range_1752_1772_3 = cc_range_1712_1732_3;
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(45), sequence_e1_9d_adv));
                  r1000_1fff_tmp66 = simd_and(sequence_e1_9d_adv, cc_range_1752_1772_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp39);
                  byte_9e = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp67);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp68 = simd_or(basis_bits.bit_4, r1000_1fff_tmp27);
                  byte_range_b6_bf = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp68);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(46), sequence_e1_9e_adv));
                  r1000_1fff_tmp69 = simd_and(sequence_e1_9e_adv, byte_range_b6_bf);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp69);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp70 = simd_and(basis_bits.bit_4, r1000_1fff_tmp43);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp70);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(47), sequence_e1_9f_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_9f_adv, byte_range_80_88);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp71);
                  byte_a2 = r1000_1fff_tmp41;
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp72 = simd_and(r1000_1fff_tmp15, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp72);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(48), sequence_e1_a2_adv));
                  r1000_1fff_tmp73 = simd_and(sequence_e1_a2_adv, byte_a9);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp73);
                  byte_a4 = simd_and(r1000_1fff_tmp38, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp74 = simd_andc(r1000_1fff_tmp38, r1000_1fff_tmp32);
                  r1000_1fff_tmp75 = simd_andc(r1000_1fff_tmp14, r1000_1fff_tmp70);
                  cc_range_1920_1930_3 = simd_or(r1000_1fff_tmp74, r1000_1fff_tmp75);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(49), sequence_e1_a4_adv));
                  r1000_1fff_tmp76 = simd_and(sequence_e1_a4_adv, cc_range_1920_1930_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp76);
                  r1000_1fff_tmp77 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp39);
                  byte_a6 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp77);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  byte_range_b0_bf = r1000_1fff_tmp14;
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(50), sequence_e1_a6_adv));
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp78);
                  r1000_1fff_tmp79 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp5);
                  byte_a7 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp79);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp80 = simd_andc(r1000_1fff_tmp15, basis_bits.bit_6);
                  r1000_1fff_tmp81 = simd_andc(r800_1fff_tmp1, r1000_1fff_tmp80);
                  cc_range_19c0_19c8_3 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp81);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(51), sequence_e1_a7_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a7_adv, cc_range_19c0_19c8_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp82);
                  byte_a8 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp16);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp83 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp84 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp83), simd_andc(r1000_1fff_tmp6, basis_bits.bit_4));
                  byte_range_97_9b = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp84);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(52), sequence_e1_a8_adv));
                  r1000_1fff_tmp85 = simd_and(sequence_e1_a8_adv, byte_range_97_9b);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp85);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp86 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp87 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp86), simd_andc(r1000_1fff_tmp87, basis_bits.bit_4));
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp24, r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_or(basis_bits.bit_4, r1000_1fff_tmp87);
                  r1000_1fff_tmp91 = simd_not(r1000_1fff_tmp90);
                  r1000_1fff_tmp92 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp91), simd_andc(r800_1fff_tmp1, basis_bits.bit_3));
                  r1000_1fff_tmp93 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp92);
                  cc_range_1a55_1a61_3 = simd_or(r1000_1fff_tmp89, r1000_1fff_tmp93);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(53), sequence_e1_a9_adv));
                  r1000_1fff_tmp94 = simd_and(sequence_e1_a9_adv, cc_range_1a55_1a61_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp94);
                  byte_ac = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp62);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp95 = simd_andc(r1000_1fff_tmp52, r1000_1fff_tmp87);
                  r1000_1fff_tmp96 = simd_and(byte_range_b0_bf, r1000_1fff_tmp90);
                  cc_range_1b00_1b35_3 = simd_or(r1000_1fff_tmp95, r1000_1fff_tmp96);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(54), sequence_e1_ac_adv));
                  r1000_1fff_tmp97 = simd_and(sequence_e1_ac_adv, cc_range_1b00_1b35_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp97);
                  byte_ad = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp59);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_83 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(55), sequence_e1_ad_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_ad_adv, byte_range_80_83);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp98);
                  byte_ae = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp67);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp99 = simd_andc(byte_range_80_83, r1000_1fff_tmp5);
                  r1000_1fff_tmp100 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp26), simd_andc(r1000_1fff_tmp43, basis_bits.bit_4));
                  r1000_1fff_tmp101 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp100);
                  r1000_1fff_tmp102 = simd_or(r1000_1fff_tmp99, r1000_1fff_tmp101);
                  r1000_1fff_tmp103 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp56);
                  cc_range_1b80_1bac_3 = simd_or(r1000_1fff_tmp102, r1000_1fff_tmp103);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(56), sequence_e1_ae_adv));
                  r1000_1fff_tmp104 = simd_and(sequence_e1_ae_adv, cc_range_1b80_1bac_3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp104);
                  byte_af = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp60);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp105 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp106 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp105), simd_andc(r1000_1fff_tmp7, basis_bits.bit_3));
                  byte_range_a7_b1 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp106);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(57), sequence_e1_af_adv));
                  r1000_1fff_tmp107 = simd_and(sequence_e1_af_adv, byte_range_a7_b1);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp107);
                  byte_b0 = simd_andc(byte_range_b0_bf, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp108 = simd_not(r1000_1fff_tmp68);
                  r1000_1fff_tmp109 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp108), simd_andc(r800_ffff_tmp1, basis_bits.bit_3));
                  byte_range_a4_b5 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp109);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(58), sequence_e1_b0_adv));
                  r1000_1fff_tmp110 = simd_and(sequence_e1_b0_adv, byte_range_a4_b5);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp110);
                  r1000_1fff_tmp111 = simd_andc(r1000_1fff_tmp5, r800_ffff_tmp1);
                  byte_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp111);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_b2_b3 = simd_and(byte_range_b0_bf, r1000_1fff_tmp63);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(59), sequence_e1_b3_adv));
                  r1000_1fff_tmp112 = simd_and(sequence_e1_b3_adv, byte_range_b2_b3);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp112);
                  byte_b7 = simd_and(byte_range_b0_bf, r1000_1fff_tmp79);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp91), simd_andc(r1000_1fff_tmp7, basis_bits.bit_3));
                  byte_range_a7_b4 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp113);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(60), sequence_e1_b7_adv));
                  r1000_1fff_tmp114 = simd_and(sequence_e1_b7_adv, byte_range_a7_b4);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r1000_1fff_tmp114);
                }
                else {
                  carryQ.CarryDequeueEnqueue(39, 22);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 51);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(61, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(61, 4))) {
                  r2000_2fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_92 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(61), r2000_2fff_tmp3));
                  sequence_e2_92 = simd_and(r2000_2fff_tmp3, byte_92);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_4, r2000_2fff_tmp6);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(62), sequence_e2_92_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r2000_2fff_tmp8);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp9, r800_ffff_tmp1);
                  byte_93 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp10);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_4, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_or(basis_bits.bit_3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_2, r2000_2fff_tmp13);
                  byte_range_80_a9 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp14);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(63), sequence_e2_93_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r2000_2fff_tmp15);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp9);
                  byte_b7 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp16);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_a0_bf = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(64), sequence_e2_b7_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r2000_2fff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(61, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(61, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 55);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(65, 16))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(65), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp10 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_b4_bb = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(66), sequence_ea_99_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_99_adv, byte_range_b4_bb);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp12);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp14);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp15);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(67), sequence_ea_9a_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_9a_adv, byte_9f);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp18 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp17, ra000_ffff_tmp18);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp17, basis_bits.bit_4);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_5, ra000_ffff_tmp14);
              byte_range_a3_a7 = simd_and(ra000_ffff_tmp19, ra000_ffff_tmp20);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(68), sequence_ea_a0_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_a0_adv, byte_range_a3_a7);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_a2 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp22);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp23 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp24 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp26 = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp1);
              cc_range_a880_a8b4_3 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp27);
              carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(69), sequence_ea_a2_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_a2_adv, cc_range_a880_a8b4_3);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_andc(ra000_ffff_tmp14, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp29);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_80_83 = simd_andc(ra000_ffff_tmp24, r800_ffff_tmp1);
              carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(70), sequence_ea_a3_adv));
              ra000_ffff_tmp30 = simd_and(sequence_ea_a3_adv, byte_range_80_83);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp30);
              byte_a4 = simd_and(ra000_ffff_tmp17, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp31 = simd_not(ra000_ffff_tmp20);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp33 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp31), simd_andc(ra000_ffff_tmp32, basis_bits.bit_4));
              byte_range_a6_aa = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp33);
              carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(71), sequence_ea_a4_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ea_a4_adv, byte_range_a6_aa);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp34);
              ra000_ffff_tmp35 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp6);
              byte_a5 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp35);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp36 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp37 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp14);
              ra000_ffff_tmp38 = simd_not(ra000_ffff_tmp37);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_5, ra000_ffff_tmp14);
              ra000_ffff_tmp40 = simd_or(basis_bits.bit_4, ra000_ffff_tmp39);
              ra000_ffff_tmp41 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp38), simd_andc(ra000_ffff_tmp40, basis_bits.bit_3));
              byte_range_87_92 = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp41);
              carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(72), sequence_ea_a5_adv));
              ra000_ffff_tmp42 = simd_and(sequence_ea_a5_adv, byte_range_87_92);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp42);
              ra000_ffff_tmp43 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp43);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              cc_range_a980_a9b4_3 = simd_or(byte_range_80_83, ra000_ffff_tmp27);
              carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(73), sequence_ea_a6_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ea_a6_adv, cc_range_a980_a9b4_3);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp45);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp46 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp47 = simd_not(ra000_ffff_tmp40);
              ra000_ffff_tmp48 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp49 = simd_and(basis_bits.bit_4, ra000_ffff_tmp48);
              ra000_ffff_tmp50 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp47), simd_andc(ra000_ffff_tmp49, basis_bits.bit_3));
              byte_range_a9_b6 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp50);
              carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(74), sequence_ea_a8_adv));
              ra000_ffff_tmp51 = simd_and(sequence_ea_a8_adv, byte_range_a9_b6);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp51);
              byte_a9 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp7);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp52 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_6);
              ra000_ffff_tmp53 = simd_or(ra000_ffff_tmp29, ra000_ffff_tmp52);
              cc_range_aa43_aa4c_3 = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp53);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(75), sequence_ea_a9_adv));
              ra000_ffff_tmp54 = simd_and(sequence_ea_a9_adv, cc_range_aa43_aa4c_3);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp54);
              byte_aa = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp10, ra000_ffff_tmp18);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_4);
              ra000_ffff_tmp57 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp58 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp57), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp56, ra000_ffff_tmp58);
              ra000_ffff_tmp60 = simd_or(ra000_ffff_tmp55, ra000_ffff_tmp59);
              ra000_ffff_tmp61 = simd_not(ra000_ffff_tmp48);
              ra000_ffff_tmp62 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp61), simd_andc(ra000_ffff_tmp39, basis_bits.bit_4));
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp60, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp2);
              ra000_ffff_tmp66 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp65);
              cc_range_aab0_aabe_3 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp66);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(76), sequence_ea_aa_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ea_aa_adv, cc_range_aab0_aabe_3);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp14);
              byte_ab = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp68);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp69 = simd_and(ra000_ffff_tmp17, basis_bits.bit_4);
              ra000_ffff_tmp70 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp20);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp35);
              cc_range_aaeb_aaf5_3 = simd_or(ra000_ffff_tmp70, ra000_ffff_tmp71);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(77), sequence_ea_ab_adv));
              ra000_ffff_tmp72 = simd_and(sequence_ea_ab_adv, cc_range_aaeb_aaf5_3);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp72);
              byte_af = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp15);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp73 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp20);
              byte_range_a3_aa = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp73);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(78), sequence_ea_af_adv));
              ra000_ffff_tmp74 = simd_and(sequence_ea_af_adv, byte_range_a3_aa);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp74);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp15);
              ra000_ffff_tmp75 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp3);
              byte_ac = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp75);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(79), ra000_ffff_tmp76));
              sequence_ef_ac = simd_and(ra000_ffff_tmp76, byte_ac);
              byte_ef_adv = ra000_ffff_tmp76;
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp65);
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(80), sequence_ef_ac_adv));
              ra000_ffff_tmp77 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, ra000_ffff_tmp77);
            }
            else {
              carryQ.CarryDequeueEnqueue(65, 16);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(9, 72);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(81, 29))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[81] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(81), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(82), r10000_10ffff_tmp13));
            sequence_f0_90_8d = simd_and(r10000_10ffff_tmp13, byte_8d);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp16 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_not(r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp17), simd_andc(r10000_10ffff_tmp18, basis_bits.bit_4));
            byte_range_b6_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp19);
            carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(83), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp20 = simd_and(sequence_f0_90_8d_adv, byte_range_b6_ba);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp20);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp23);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp2);
            r10000_10ffff_tmp26 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(r10000_10ffff_tmp25, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            cc_range_10a01_10a0c_4 = simd_or(r10000_10ffff_tmp30, r10000_10ffff_tmp31);
            carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(84), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_90_a8_adv, cc_range_10a01_10a0c_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp33);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(85), r10000_10ffff_tmp34));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp34, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp34;
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp15);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp14, basis_bits.bit_4);
            cc_range_11000_11038_4 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp36);
            carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(86), sequence_f0_91_80_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_91_80_adv, cc_range_11000_11038_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp37);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp33);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp18);
            carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(87), sequence_f0_91_81_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_91_81_adv, byte_range_80_85);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp41);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp42 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp42);
            r10000_10ffff_tmp44 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp43);
            cc_range_11082_110b0_4 = simd_or(byte_82, r10000_10ffff_tmp44);
            carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(88), sequence_f0_91_82_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_91_82_adv, cc_range_11082_110b0_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_andc(r10000_10ffff_tmp26, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp46);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp48 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp15);
            r10000_10ffff_tmp49 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp15);
            r10000_10ffff_tmp51 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp49), simd_andc(r10000_10ffff_tmp51, basis_bits.bit_3));
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp52);
            cc_range_11100_11127_4 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp53);
            carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(89), sequence_f0_91_84_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_91_84_adv, cc_range_11100_11127_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp40);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp55);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp56 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp56);
            cc_range_11180_111b3_4 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp57);
            carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(90), sequence_f0_91_86_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_91_86_adv, cc_range_11180_111b3_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp58);
            byte_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp23);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp59 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp59);
            r10000_10ffff_tmp61 = simd_not(r10000_10ffff_tmp60);
            r10000_10ffff_tmp62 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp61), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_3));
            r10000_10ffff_tmp63 = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp15);
            r10000_10ffff_tmp65 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp64);
            cc_range_1122c_11237_4 = simd_or(r10000_10ffff_tmp63, r10000_10ffff_tmp65);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(91), sequence_f0_91_88_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_91_88_adv, cc_range_1122c_11237_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp15);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp67);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp68 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp43);
            r10000_10ffff_tmp69 = simd_not(r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp15);
            r10000_10ffff_tmp71 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp70);
            r10000_10ffff_tmp72 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp69), simd_andc(r10000_10ffff_tmp71, basis_bits.bit_2));
            byte_range_9f_a8 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp72);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(92), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_91_8b_adv, byte_range_9f_a8);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp74);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_6);
            r10000_10ffff_tmp76 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp75);
            cc_range_11301_1133e_4 = simd_or(r10000_10ffff_tmp25, r10000_10ffff_tmp76);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(93), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133e_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp77);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp78 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp59);
            r10000_10ffff_tmp79 = simd_not(r10000_10ffff_tmp42);
            r10000_10ffff_tmp80 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp79), simd_andc(r10000_10ffff_tmp50, basis_bits.bit_4));
            r10000_10ffff_tmp81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp80);
            r10000_10ffff_tmp82 = simd_or(r10000_10ffff_tmp78, r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_and(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp84 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp85 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp84), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_5));
            r10000_10ffff_tmp86 = simd_and(r10000_10ffff_tmp83, r10000_10ffff_tmp85);
            r10000_10ffff_tmp87 = simd_or(r10000_10ffff_tmp82, r10000_10ffff_tmp86);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp64);
            r10000_10ffff_tmp89 = simd_or(r10000_10ffff_tmp87, r10000_10ffff_tmp88);
            r10000_10ffff_tmp90 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp90);
            cc_range_11340_11362_4 = simd_or(r10000_10ffff_tmp89, r10000_10ffff_tmp91);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(94), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_11362_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp92);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp41);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_b0_bf = r10000_10ffff_tmp14;
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(95), sequence_f0_91_92_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_91_92_adv, byte_range_b0_bf);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp94);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp95 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_80_81 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp95);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(96), sequence_f0_91_93_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_91_93_adv, byte_range_80_81);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp96);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp55);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp97 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp18);
            r10000_10ffff_tmp98 = simd_not(r10000_10ffff_tmp97);
            r10000_10ffff_tmp99 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp98), simd_andc(r10000_10ffff_tmp70, basis_bits.bit_3));
            r10000_10ffff_tmp100 = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp99);
            r10000_10ffff_tmp101 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp102 = simd_andc(r10000_10ffff_tmp101, r10000_10ffff_tmp50);
            cc_range_115af_115b8_4 = simd_or(r10000_10ffff_tmp100, r10000_10ffff_tmp102);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(97), sequence_f0_91_96_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_91_96_adv, cc_range_115af_115b8_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp103);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp23);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            r10000_10ffff_tmp104 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp50);
            byte_range_b0_be = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp104);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(98), sequence_f0_91_98_adv));
            r10000_10ffff_tmp105 = simd_and(sequence_f0_91_98_adv, byte_range_b0_be);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp105);
            r10000_10ffff_tmp106 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp11);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp106);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(99), sequence_f0_91_99_adv));
            r10000_10ffff_tmp107 = simd_and(sequence_f0_91_99_adv, byte_80);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp40);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp108);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp109 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp16);
            r10000_10ffff_tmp110 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp98), simd_andc(r10000_10ffff_tmp109, basis_bits.bit_3));
            byte_range_ab_b5 = simd_and(r10000_10ffff_tmp47, r10000_10ffff_tmp110);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(100), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_91_9a_adv, byte_range_ab_b5);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp111);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp74);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(101), r10000_10ffff_tmp112));
            sequence_f0_96_ac = simd_and(r10000_10ffff_tmp112, byte_ac);
            sequence_f0_96_adv = r10000_10ffff_tmp112;
            r10000_10ffff_tmp113 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp113, r10000_10ffff_tmp50);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(102), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp114 = simd_and(sequence_f0_96_ac_adv, byte_range_b0_b6);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp114);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp12);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp115 = simd_not(r10000_10ffff_tmp71);
            r10000_10ffff_tmp116 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp117 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp115), simd_andc(r10000_10ffff_tmp116, basis_bits.bit_2));
            byte_range_91_be = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp117);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(103), sequence_f0_96_bd_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_96_bd_adv, byte_range_91_be);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp118);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp67);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp41);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(104), r10000_10ffff_tmp119));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp119, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp119;
            r10000_10ffff_tmp120 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp40);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp120);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(105), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp121 = simd_and(sequence_f0_9b_b2_adv, byte_9e);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp121);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp70);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(106), r10000_10ffff_tmp122));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp122, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp122;
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(107), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp123 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp26, r10000_10ffff_tmp11);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp124);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp125);
            r10000_10ffff_tmp127 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp126);
            r10000_10ffff_tmp128 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp129 = simd_not(r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp129), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp131 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_or(r10000_10ffff_tmp127, r10000_10ffff_tmp131);
            cc_range_1f140_1f170_4 = simd_or(r10000_10ffff_tmp132, byte_range_b0_bf);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(108), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp133);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_89 = r10000_10ffff_tmp127;
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(109), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_9f_86_adv, byte_range_80_89);
            struct_oalpha_Y.cc = simd_or(struct_oalpha_Y.cc, r10000_10ffff_tmp134);
          }
          else {
            carryQ.CarryDequeueEnqueue(81, 29);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 110);
        }
        carryQ.CarryQ_Adjust(110);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<110, 0> carryQ;
  };

  struct Property_idst_Y {
  Property_idst_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_idst_Y & struct_idst_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_bf;
		BitBlock r2000_2fff_tmp6, sequence_e2_bf, byte_e2_adv, byte_range_b2_b3;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp7;




        struct_idst_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_bf = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  sequence_e2_bf = simd_and(r2000_2fff_tmp6, byte_bf);
                  byte_e2_adv = r2000_2fff_tmp6;
                  byte_range_b2_b3 = simd_and(r2000_2fff_tmp2, r800_4dff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(2), sequence_e2_bf_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_bf_adv, byte_range_b2_b3);
                  struct_idst_Y.cc = simd_or(struct_idst_Y.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_ogr_ext_Y {
  Property_ogr_ext_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ogr_ext_Y & struct_ogr_ext_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a6, r800_fff_tmp4;
		BitBlock sequence_e0_a6, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_be, sequence_e0_a6_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp12, r800_fff_tmp13, byte_97;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp14, r800_fff_tmp15, byte_ac;
		BitBlock sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp16, r800_fff_tmp17;
		BitBlock r800_fff_tmp18, byte_ad, sequence_e0_ad, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp19, byte_ae, sequence_e0_ae, sequence_e0_ae_adv;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, byte_af, sequence_e0_af;
		BitBlock sequence_e0_af_adv, r800_fff_tmp22, r800_fff_tmp23, byte_b3;
		BitBlock sequence_e0_b3, r800_fff_tmp24, r800_fff_tmp25, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock cc_range_cc2_cd5_3, sequence_e0_b3_adv, r800_fff_tmp31, byte_b4;
		BitBlock sequence_e0_b4, sequence_e0_b4_adv, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock byte_b5, sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp34, byte_b7;
		BitBlock sequence_e0_b7, r800_fff_tmp35, r800_fff_tmp36, cc_range_dcf_ddf_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp37, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, byte_range_8c_8d, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp7, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, byte_range_ae_af;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp8, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, ra000_ffff_tmp8, sequence_ef_be, byte_ef_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp12, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_91;
		BitBlock r10000_10ffff_tmp9, sequence_f0_91, byte_f0_adv, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock byte_8c, r10000_10ffff_tmp14, sequence_f0_91_8c, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock byte_8d, sequence_f0_91_8d, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, sequence_f0_91_8d_adv, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, byte_92, sequence_f0_91_92, r10000_10ffff_tmp25;
		BitBlock cc_range_114b0_114bd_4, sequence_f0_91_92_adv, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_96, sequence_f0_91_96, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, sequence_f0_91_96_adv, r10000_10ffff_tmp30;
		BitBlock byte_9d, sequence_f0_9d, r10000_10ffff_tmp31, byte_85;
		BitBlock r10000_10ffff_tmp32, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, cc_range_1d165_1d16e_4, sequence_f0_9d_85_adv;
		BitBlock r10000_10ffff_tmp40;




        struct_ogr_ext_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 26))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 18))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 15))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 11))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 11))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a6 = simd_and(r800_fff_tmp4, byte_a6);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_and(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp8 = simd_and(r800_fff_tmp7, r800_fff_tmp2);
                  byte_be = simd_and(r800_fff_tmp6, r800_fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(2), sequence_e0_a6_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a6_adv, byte_be);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp11 = simd_and(r800_ffff_tmp2, r800_fff_tmp10);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp11);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp13 = simd_and(r800_ffff_tmp5, r800_fff_tmp12);
                  byte_97 = simd_and(r800_fff_tmp13, r800_fff_tmp11);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(3), sequence_e0_a7_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_a7_adv, byte_97);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(r800_fff_tmp7, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp15);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(4), sequence_e0_ac_adv));
                  r800_fff_tmp16 = simd_and(sequence_e0_ac_adv, byte_be);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp16);
                  r800_fff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp7, r800_fff_tmp17);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp18);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(5), sequence_e0_ad_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_ad_adv, byte_97);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp19);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(6), sequence_e0_ae_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_ae_adv, byte_be);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(r800_fff_tmp7, r800_fff_tmp10);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(7), sequence_e0_af_adv));
                  r800_fff_tmp22 = simd_and(sequence_e0_af_adv, byte_97);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp22);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp10, r800_ffff_tmp1);
                  byte_b3 = simd_and(r800_fff_tmp6, r800_fff_tmp23);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp24 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp25 = simd_andc(r800_ffff_tmp5, r800_fff_tmp24);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  r800_fff_tmp27 = simd_and(r800_fff_tmp25, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_and(r800_fff_tmp13, r800_ffff_tmp2);
                  r800_fff_tmp29 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp30 = simd_and(r800_fff_tmp28, r800_fff_tmp29);
                  cc_range_cc2_cd5_3 = simd_or(r800_fff_tmp27, r800_fff_tmp30);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(8), sequence_e0_b3_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_b3_adv, cc_range_cc2_cd5_3);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp31);
                  byte_b4 = simd_and(r800_fff_tmp6, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(9), sequence_e0_b4_adv));
                  r800_fff_tmp32 = simd_and(sequence_e0_b4_adv, byte_be);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_ffff_tmp2, r800_fff_tmp17);
                  byte_b5 = simd_and(r800_fff_tmp6, r800_fff_tmp33);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(10), sequence_e0_b5_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_b5_adv, byte_97);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp34);
                  byte_b7 = simd_and(r800_fff_tmp6, r800_fff_tmp11);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp35 = simd_andc(r800_fff_tmp24, r800_fff_tmp12);
                  r800_fff_tmp36 = simd_andc(r800_ffff_tmp5, r800_fff_tmp35);
                  cc_range_dcf_ddf_3 = simd_and(r800_fff_tmp21, r800_fff_tmp36);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(11), sequence_e0_b7_adv));
                  r800_fff_tmp37 = simd_and(sequence_e0_b7_adv, cc_range_dcf_ddf_3);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r800_fff_tmp37);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(12, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(12, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp5, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(13), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_8c_8d);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r2000_2fff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(12, 2);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(14, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp7 = simd_and(r3000_4dff_tmp6, basis_bits.bit_6);
                  byte_range_ae_af = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_ae_af);
                  struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r3000_4dff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 15);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(16, 2))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_be = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), ra000_ffff_tmp8));
              sequence_ef_be = simd_and(ra000_ffff_tmp8, byte_be);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(17), sequence_ef_be_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, ra000_ffff_tmp12);
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 18);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(18, 8))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp8 = simd_andc(r10000_10ffff_tmp7, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(18), r10000_10ffff_tmp9));
            sequence_f0_91 = simd_and(r10000_10ffff_tmp9, byte_91);
            byte_f0_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(19), r10000_10ffff_tmp14));
            sequence_f0_91_8c = simd_and(r10000_10ffff_tmp14, byte_8c);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp16);
            byte_be = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp17);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(20), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_8c_adv, byte_be);
            struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_8d = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp19);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp20 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp21);
            byte_97 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp22);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(21), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp23 = simd_and(sequence_f0_91_8d_adv, byte_97);
            struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r10000_10ffff_tmp23);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp24);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            r10000_10ffff_tmp25 = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp19);
            cc_range_114b0_114bd_4 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp25);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(22), sequence_f0_91_92_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_91_92_adv, cc_range_114b0_114bd_4);
            struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp16);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp27);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp21);
            byte_af = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(23), sequence_f0_91_96_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_91_96_adv, byte_af);
            struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r10000_10ffff_tmp30);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp19);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp7);
            byte_85 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp31);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(24), r10000_10ffff_tmp32));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp32, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp32;
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp31);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp35 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp21);
            r10000_10ffff_tmp36 = simd_not(r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_6);
            r10000_10ffff_tmp38 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp36), simd_andc(r10000_10ffff_tmp37, basis_bits.bit_3));
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp38);
            cc_range_1d165_1d16e_4 = simd_or(r10000_10ffff_tmp33, r10000_10ffff_tmp39);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(25), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d16e_4);
            struct_ogr_ext_Y.cc = simd_or(struct_ogr_ext_Y.cc, r10000_10ffff_tmp40);
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 26);
        }
        carryQ.CarryQ_Adjust(26);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<26, 0> carryQ;
  };

  struct Property_ideo_Y {
  Property_ideo_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ideo_Y & struct_ideo_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, byte_80, r3000_4dff_tmp4;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, cc_range_3006_3038_3;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp19, byte_range_90_bf;
		BitBlock byte_e3_byte_range_90_bf, byte_range_80_bf, r3000_4dff_tmp20;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp21, r3000_4dff_tmp22;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, byte_range_80_b5;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp25;
		BitBlock byte_e4_byte_range_80_b5_sfx, r3000_4dff_tmp26, r3000_4dff_tmp27;
		BitBlock r3000_4dff_tmp28, byte_b6, byte_e4_adv, sequence_e4_b6;
		BitBlock r3000_4dff_tmp29, sequence_e4_b6_byte_range_80_b5, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, byte_range_b8_bf, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, byte_range_e5_e9;
		BitBlock r800_ffff_tmp18, byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12, byte_e9_adv;
		BitBlock sequence_e9_80, r4e00_9fff_tmp13, byte_range_80_8c, r4e00_9fff_tmp14;
		BitBlock sequence_e9_80_byte_range_80_8c, r800_ffff_tmp19, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_range_a4_a8, ra000_ffff_tmp8, byte_ef_byte_range_a4_a8;
		BitBlock ra000_ffff_tmp9, byte_ef_byte_range_a4_a8_sfx, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, ra000_ffff_tmp13, byte_a9;
		BitBlock byte_ef_adv, sequence_ef_a9, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, byte_range_80_ad, ra000_ffff_tmp17;
		BitBlock sequence_ef_a9_byte_range_80_ad, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock byte_aa, sequence_ef_aa, ra000_ffff_tmp20;
		BitBlock sequence_ef_aa_byte_range_80_bf, ra000_ffff_tmp21, byte_ab;
		BitBlock sequence_ef_ab, ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock byte_range_80_99, ra000_ffff_tmp25, sequence_ef_ab_byte_range_80_99;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock byte_range_a0_a9, r10000_10ffff_tmp8, byte_f0_byte_range_a0_a9;
		BitBlock r10000_10ffff_tmp9, byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp10;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_f0_adv, sequence_f0_aa, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_80, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_80_96, r10000_10ffff_tmp22;
		BitBlock sequence_f0_aa_80_byte_range_80_96, r10000_10ffff_tmp23;
		BitBlock sequence_f0_ab, sequence_f0_ab_adv, sequence_f0_ab_80;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, byte_range_80_b4, r10000_10ffff_tmp28;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, byte_af, sequence_f0_af, byte_a0;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, byte_range_80_9d, r10000_10ffff_tmp33;
		BitBlock sequence_f0_af_a0_byte_range_80_9d;




        struct_ideo_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 25))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 16))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 5))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 5))) {
                r2000_4dff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(1, 5))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(1), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp9 = simd_not(r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp11 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp9), simd_andc(r3000_4dff_tmp10, basis_bits.bit_4));
                  r3000_4dff_tmp12 = simd_and(r3000_4dff_tmp7, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_or(r3000_4dff_tmp6, r3000_4dff_tmp12);
                  r3000_4dff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp15 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp14);
                  r3000_4dff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp17 = simd_and(r3000_4dff_tmp15, r3000_4dff_tmp16);
                  r3000_4dff_tmp18 = simd_andc(r3000_4dff_tmp17, r2000_4dff_tmp1);
                  cc_range_3006_3038_3 = simd_or(r3000_4dff_tmp13, r3000_4dff_tmp18);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(2), sequence_e3_80_adv));
                  r3000_4dff_tmp19 = simd_and(sequence_e3_80_adv, cc_range_3006_3038_3);
                  struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, r3000_4dff_tmp19);
                  byte_range_90_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(3), r3000_4dff_tmp20));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp20, byte_range_80_bf);
                  struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_or(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp23 = simd_and(basis_bits.bit_3, r3000_4dff_tmp22);
                  r3000_4dff_tmp24 = simd_and(basis_bits.bit_2, r3000_4dff_tmp23);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp24);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp8, byte_range_80_b5);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(4), r3000_4dff_tmp25));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp25, byte_range_80_bf);
                  struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  r3000_4dff_tmp26 = simd_and(byte_range_80_bf, r3000_4dff_tmp14);
                  r3000_4dff_tmp27 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp28 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp27);
                  byte_b6 = simd_and(r3000_4dff_tmp26, r3000_4dff_tmp28);
                  byte_e4_adv = r800_ffff_tmp8;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(5), r3000_4dff_tmp29));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp29, byte_range_80_b5);
                  struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
            r800_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp5, r800_ffff_tmp11);
            byte_range_b8_bf = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
            r800_ffff_tmp13 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp14 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp15 = simd_not(r800_ffff_tmp14);
            r800_ffff_tmp16 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp15), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
            r800_ffff_tmp18 = simd_or(r800_ffff_tmp13, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp18) || carryQ.CarryTest(6, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp13;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(6), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(7), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(8), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              r4e00_9fff_tmp12 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(9), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp13);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(10), r4e00_9fff_tmp14));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp14, byte_range_80_8c);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            r800_ffff_tmp19 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp19, r800_ffff_tmp14);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(11, 5))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp6 = simd_not(ra000_ffff_tmp5);
              ra000_ffff_tmp7 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(11), ra000_ffff_tmp8));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp8, byte_range_a4_a8);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(12), ra000_ffff_tmp9));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp9, byte_range_80_bf);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              byte_a9 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp13);
              byte_ef_adv = ra000_ffff_tmp8;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_3, ra000_ffff_tmp14);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_2, ra000_ffff_tmp15);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp16);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(13), ra000_ffff_tmp17));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp17, byte_range_80_ad);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_ef_a9_byte_range_80_ad);
              ra000_ffff_tmp18 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp18);
              byte_aa = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp19);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(14), ra000_ffff_tmp20));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp20, byte_range_80_bf);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_ef_aa_byte_range_80_bf);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp2);
              byte_ab = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp21);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp22 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp23 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              ra000_ffff_tmp24 = simd_and(basis_bits.bit_3, ra000_ffff_tmp23);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp22, ra000_ffff_tmp24);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(15), ra000_ffff_tmp25));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp25, byte_range_80_99);
              struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_ef_ab_byte_range_80_99);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 16);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(16, 9))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp6);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(16), r10000_10ffff_tmp8));
            byte_f0_byte_range_a0_a9 = simd_and(r10000_10ffff_tmp8, byte_range_a0_a9);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(17), r10000_10ffff_tmp9));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp9, byte_range_80_bf);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(18), r10000_10ffff_tmp10));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp10, byte_range_80_bf);
            struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            r10000_10ffff_tmp11 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp13);
            byte_aa = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp14);
            byte_f0_adv = r10000_10ffff_tmp8;
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp16 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp15);
            byte_80 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp3);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(19), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            r10000_10ffff_tmp17 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp20);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp21);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(20), r10000_10ffff_tmp22));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp22, byte_range_80_96);
            struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp18);
            byte_ab = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp23);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(21), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp26);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp27);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(22), r10000_10ffff_tmp28));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp28, byte_range_80_b4);
            struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp18);
            byte_af = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp30);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            byte_a0 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp3);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(23), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp29, basis_bits.bit_6);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp31);
            byte_range_80_9d = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp32);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(24), r10000_10ffff_tmp33));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp33, byte_range_80_9d);
            struct_ideo_Y.cc = simd_or(struct_ideo_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
          }
          else {
            carryQ.CarryDequeueEnqueue(16, 9);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 25);
        }
        carryQ.CarryQ_Adjust(25);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<25, 0> carryQ;
  };

  struct Property_idsb_Y {
  Property_idsb_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_idsb_Y & struct_idsb_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, byte_bf;
		BitBlock r2000_2fff_tmp6, sequence_e2_bf, byte_e2_adv, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, cc_range_2ff0_2ff4_3;
		BitBlock sequence_e2_bf_adv, r2000_2fff_tmp10;




        struct_idsb_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 3))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp4);
                  byte_bf = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp6));
                  sequence_e2_bf = simd_and(r2000_2fff_tmp6, byte_bf);
                  byte_e2_adv = r2000_2fff_tmp6;
                  r2000_2fff_tmp7 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  cc_range_2ff0_2ff4_3 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp9);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(2), sequence_e2_bf_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_bf_adv, cc_range_2ff0_2ff4_3);
                  struct_idsb_Y.cc = simd_or(struct_idsb_Y.cc, r2000_2fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<3, 0> carryQ;
  };

  struct Property_loe_Y {
  Property_loe_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_loe_Y & struct_loe_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, r800_fff_tmp4;
		BitBlock r800_fff_tmp5, byte_b9, r800_fff_tmp6, sequence_e0_b9, byte_e0_adv;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock byte_range_80_84, sequence_e0_b9_adv, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock r800_fff_tmp13, byte_bb, sequence_e0_bb, sequence_e0_bb_adv;
		BitBlock r800_fff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, byte_aa, ra000_ffff_tmp5, sequence_ea_aa;
		BitBlock byte_ea_adv, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, cc_range_aab5_aabb_3, sequence_ea_aa_adv;
		BitBlock ra000_ffff_tmp20;




        struct_loe_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 3))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 3))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 3))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_and(r800_fff_tmp3, r800_fff_tmp4);
                  byte_b9 = simd_and(r800_fff_tmp2, r800_fff_tmp5);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp6));
                  sequence_e0_b9 = simd_and(r800_fff_tmp6, byte_b9);
                  byte_e0_adv = r800_fff_tmp6;
                  r800_fff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp8 = simd_andc(r800_ffff_tmp5, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_andc(r800_fff_tmp8, basis_bits.bit_4);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  byte_range_80_84 = simd_andc(r800_fff_tmp9, r800_fff_tmp10);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(2), sequence_e0_b9_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_b9_adv, byte_range_80_84);
                  struct_loe_Y.cc = simd_or(struct_loe_Y.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp3, r800_fff_tmp12);
                  byte_bb = simd_and(r800_fff_tmp2, r800_fff_tmp13);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(3), sequence_e0_bb_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_bb_adv, byte_range_80_84);
                  struct_loe_Y.cc = simd_or(struct_loe_Y.cc, r800_fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 3);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(4, 2))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              byte_aa = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp3);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(4), ra000_ffff_tmp5));
              sequence_ea_aa = simd_and(ra000_ffff_tmp5, byte_aa);
              byte_ea_adv = ra000_ffff_tmp5;
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp6);
              ra000_ffff_tmp8 = simd_and(ra000_ffff_tmp7, r800_ffff_tmp2);
              ra000_ffff_tmp9 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp12 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_or(ra000_ffff_tmp10, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_and(ra000_ffff_tmp7, basis_bits.bit_4);
              ra000_ffff_tmp16 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp18 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp16), simd_andc(ra000_ffff_tmp17, basis_bits.bit_5));
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp15, ra000_ffff_tmp18);
              cc_range_aab5_aabb_3 = simd_or(ra000_ffff_tmp14, ra000_ffff_tmp19);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(5), sequence_ea_aa_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_aa_adv, cc_range_aab5_aabb_3);
              struct_loe_Y.cc = simd_or(struct_loe_Y.cc, ra000_ffff_tmp20);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_radical_Y {
  Property_radical_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_radical_Y & struct_radical_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_ba, r2000_2fff_tmp5;
		BitBlock sequence_e2_ba, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, cc_range_2e80_2e9b_3;
		BitBlock sequence_e2_ba_adv, r2000_2fff_tmp17, r2000_2fff_tmp18, byte_bb;
		BitBlock sequence_e2_bb, r2000_2fff_tmp19, r2000_2fff_tmp20, byte_range_80_b3;
		BitBlock sequence_e2_bb_adv, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, byte_range_bc_be, byte_e2_byte_range_bc_be;
		BitBlock byte_range_80_bf, r2000_2fff_tmp24, byte_e2_byte_range_bc_be_sfx;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, byte_bf, sequence_e2_bf;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, byte_range_80_95, r2000_2fff_tmp31;
		BitBlock sequence_e2_bf_byte_range_80_95;




        struct_radical_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 6))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 6))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 5))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 5))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp3, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_ba = simd_and(r2000_2fff_tmp5, byte_ba);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_3, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_andc(r2000_2fff_tmp6, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_5, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_and(basis_bits.bit_4, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_3, r2000_2fff_tmp13);
                  r2000_2fff_tmp15 = simd_or(basis_bits.bit_2, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp15);
                  cc_range_2e80_2e9b_3 = simd_or(r2000_2fff_tmp10, r2000_2fff_tmp16);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(2), sequence_e2_ba_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_ba_adv, cc_range_2e80_2e9b_3);
                  struct_radical_Y.cc = simd_or(struct_radical_Y.cc, r2000_2fff_tmp17);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp3, r2000_2fff_tmp11);
                  byte_bb = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  r2000_2fff_tmp19 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp20 = simd_and(basis_bits.bit_2, r2000_2fff_tmp19);
                  byte_range_80_b3 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp20);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(3), sequence_e2_bb_adv));
                  r2000_2fff_tmp21 = simd_and(sequence_e2_bb_adv, byte_range_80_b3);
                  struct_radical_Y.cc = simd_or(struct_radical_Y.cc, r2000_2fff_tmp21);
                  r2000_2fff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  byte_range_bc_be = simd_andc(r2000_2fff_tmp23, r2000_2fff_tmp11);
                  byte_e2_byte_range_bc_be = simd_and(byte_e2_adv, byte_range_bc_be);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_bc_be, carryQ.get_carry_in(4), r2000_2fff_tmp24));
                  byte_e2_byte_range_bc_be_sfx = simd_and(r2000_2fff_tmp24, byte_range_80_bf);
                  struct_radical_Y.cc = simd_or(struct_radical_Y.cc, byte_e2_byte_range_bc_be_sfx);
                  r2000_2fff_tmp25 = simd_and(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp22, r2000_2fff_tmp11);
                  byte_bf = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp26);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  r2000_2fff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp29 = simd_or(basis_bits.bit_4, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(basis_bits.bit_3, r2000_2fff_tmp29);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp27, r2000_2fff_tmp30);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(5), r2000_2fff_tmp31));
                  sequence_e2_bf_byte_range_80_95 = simd_and(r2000_2fff_tmp31, byte_range_80_95);
                  struct_radical_Y.cc = simd_or(struct_radical_Y.cc, sequence_e2_bf_byte_range_80_95);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 6);
        }
        carryQ.CarryQ_Adjust(6);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<6, 0> carryQ;
  };

  struct Property_hyphen_Y {
  Property_hyphen_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_hyphen_Y & struct_hyphen_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_2d, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock byte_ad, byte_c2_adv, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_range_d0_d7, r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5;
		BitBlock r400_5ff_tmp3, byte_d6, byte_range_80_8f, r400_5ff_tmp4;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r500_58f_tmp1, r500_58f_tmp2, byte_d4;
		BitBlock r500_58f_tmp3, byte_range_b0_bf, r500_58f_tmp4, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, byte_d5, r500_58f_tmp7, r500_58f_tmp8, r530_58f_tmp1;
		BitBlock r530_58f_tmp2, byte_8a, byte_d6_adv, r530_58f_tmp3, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_e4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_a0, r1000_1fff_tmp3;
		BitBlock sequence_e1_a0, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, byte_86, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp8, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4;
		BitBlock sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock byte_range_90_91, sequence_e2_80_adv, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock byte_b8, sequence_e2_b8, r2000_2fff_tmp12, r2000_2fff_tmp13, byte_97;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp14, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, byte_83, r3000_4dff_tmp3, sequence_e3_83;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, byte_bb, sequence_e3_83_adv, r3000_4dff_tmp8;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_b9, ra000_ffff_tmp7;
		BitBlock sequence_ef_b9, byte_ef_adv, ra000_ffff_tmp8, ra000_ffff_tmp9;
		BitBlock byte_a3, sequence_ef_b9_adv, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock byte_bc, sequence_ef_bc, ra000_ffff_tmp12, ra000_ffff_tmp13, byte_8d;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp14, byte_bd, sequence_ef_bd;
		BitBlock ra000_ffff_tmp15, byte_a5, sequence_ef_bd_adv, ra000_ffff_tmp16;




        struct_hyphen_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        byte_2d = simd_and(tmp3, tmp6);
        struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, byte_2d);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 15))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp2);
            byte_ad = simd_and(r80_7ff_tmp7, tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp8 = simd_and(byte_c2_adv, byte_ad);
            struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r80_7ff_tmp8);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp10 = simd_and(byte_range_c0_ff, r80_7ff_tmp9);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp10, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(1, 2))) {
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp10, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r80_7ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp10, r400_5ff_tmp3);
              byte_range_80_8f = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(1), r400_5ff_tmp4));
              r400_5ff_tmp5 = simd_and(r400_5ff_tmp4, byte_range_80_8f);
              r400_5ff_tmp6 = simd_or(byte_range_d4_d5, r400_5ff_tmp5);
              if ((bitblock::any(r400_5ff_tmp6) || carryQ.CarryTest(2, 1))) {
                r500_58f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r500_58f_tmp2 = simd_andc(r400_5ff_tmp1, r500_58f_tmp1);
                byte_d4 = simd_and(r80_7ff_tmp10, r500_58f_tmp2);
                r500_58f_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_b0_bf = simd_and(r80_7ff_tmp6, r500_58f_tmp3);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(2), r500_58f_tmp4));
                r500_58f_tmp5 = simd_and(r500_58f_tmp4, byte_range_b0_bf);
                r500_58f_tmp6 = simd_and(r400_5ff_tmp1, tmp5);
                byte_d5 = simd_and(r80_7ff_tmp10, r500_58f_tmp6);
                r500_58f_tmp7 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp8 = simd_or(r500_58f_tmp7, r400_5ff_tmp5);
                if (bitblock::any(r500_58f_tmp8)) {
                  r530_58f_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp2 = simd_and(r530_58f_tmp1, r80_7ff_tmp4);
                  byte_8a = simd_and(byte_range_80_8f, r530_58f_tmp2);
                  byte_d6_adv = r400_5ff_tmp4;
                  r530_58f_tmp3 = simd_and(byte_d6_adv, byte_8a);
                  struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r530_58f_tmp3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 12))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 7))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 2))) {
                r800_1fff_tmp1 = simd_andc(tmp5, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(4, 2))) {
                  r1000_1fff_tmp1 = simd_and(r800_ffff_tmp5, tmp2);
                  r1000_1fff_tmp2 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_a0 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp2);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r1000_1fff_tmp3));
                  sequence_e1_a0 = simd_and(r1000_1fff_tmp3, byte_a0);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp6);
                  byte_86 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(5), sequence_e1_a0_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_a0_adv, byte_86);
                  struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r1000_1fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 2);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(6, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp5);
                  byte_range_90_91 = simd_andc(r2000_2fff_tmp6, r800_4dff_tmp1);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_90_91);
                  struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp11 = simd_andc(r2000_2fff_tmp10, r800_ffff_tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp11);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp12);
                  byte_97 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp13);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(8), sequence_e2_b8_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_b8_adv, byte_97);
                  struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r2000_2fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(9, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp4);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), r3000_4dff_tmp3));
                  sequence_e3_83 = simd_and(r3000_4dff_tmp3, byte_83);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp4);
                  r3000_4dff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp7 = simd_and(r3000_4dff_tmp6, r2000_4dff_tmp3);
                  byte_bb = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp7);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(10), sequence_e3_83_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_83_adv, byte_bb);
                  struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, r3000_4dff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 7);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(11, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp2 = simd_and(tmp4, ra000_ffff_tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_and(ra000_ffff_tmp5, tmp5);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(11), ra000_ffff_tmp7));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp7, byte_b9);
              byte_ef_adv = ra000_ffff_tmp7;
              ra000_ffff_tmp8 = simd_and(r800_ffff_tmp5, tmp2);
              ra000_ffff_tmp9 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(12), sequence_ef_b9_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b9_adv, byte_a3);
              struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_andc(tmp4, r800_ffff_tmp3);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp11);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp12);
              byte_8d = simd_and(ra000_ffff_tmp13, tmp6);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(13), sequence_ef_bc_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_bc_adv, byte_8d);
              struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, ra000_ffff_tmp14);
              byte_bd = simd_and(ra000_ffff_tmp4, tmp6);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp2, tmp5);
              byte_a5 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp15);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(14), sequence_ef_bd_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ef_bd_adv, byte_a5);
              struct_hyphen_Y.cc = simd_or(struct_hyphen_Y.cc, ra000_ffff_tmp16);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 12);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 15);
        }
        carryQ.CarryQ_Adjust(15);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<15, 0> carryQ;
  };

  struct Property_oids_Y {
  Property_oids_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_oids_Y & struct_oids_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84;
		BitBlock r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock cc_range_2118_212e_3, sequence_e2_84_adv, r2000_2fff_tmp13;
		BitBlock r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, byte_82, r3000_4dff_tmp3;
		BitBlock sequence_e3_82, byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8, byte_range_9b_9c;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp9;




        struct_oids_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 5))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, r800_ffff_tmp3);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp10, r2000_4dff_tmp1);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp11);
                  cc_range_2118_212e_3 = simd_or(r2000_2fff_tmp8, r2000_2fff_tmp12);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(2), sequence_e2_84_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_84_adv, cc_range_2118_212e_3);
                  struct_oids_Y.cc = simd_or(struct_oids_Y.cc, r2000_2fff_tmp13);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 2);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(3, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(3), r3000_4dff_tmp3));
                  sequence_e3_82 = simd_and(r3000_4dff_tmp3, byte_82);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp4);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_not(r800_ffff_tmp3);
                  r3000_4dff_tmp8 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp7), simd_andc(r2000_4dff_tmp3, basis_bits.bit_5));
                  byte_range_9b_9c = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp8);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(4), sequence_e3_82_adv));
                  r3000_4dff_tmp9 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
                  struct_oids_Y.cc = simd_or(struct_oids_Y.cc, r3000_4dff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 5);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<5, 0> carryQ;
  };

  struct Property_qmark_Y {
  Property_qmark_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_qmark_Y & struct_qmark_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock cc_range_22_27_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_c2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, cc_range_ab_bb_2, byte_c2_adv, r80_7ff_tmp7;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, cc_range_2018_2039_3, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16, byte_b9;
		BitBlock sequence_e2_b9, byte_82, sequence_e2_b9_adv, r2000_2fff_tmp17;
		BitBlock r2000_4dff_tmp1, byte_e3, r2000_4dff_tmp2, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock cc_range_300c_301d_3, sequence_e3_80_adv, r3000_4dff_tmp11;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, byte_ef, ra000_ffff_tmp3, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock sequence_ef_b9, byte_ef_adv, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_range_81_84;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp13, ra000_ffff_tmp14, byte_bc;
		BitBlock sequence_ef_bc, cc_range_ff02_ff07_3, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, byte_bd, sequence_ef_bd;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, byte_range_a2_a3;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp19;




        struct_qmark_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp5, tmp4);
        tmp7 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_or(tmp6, tmp9);
        cc_range_22_27_1 = simd_and(tmp3, tmp10);
        struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, cc_range_22_27_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 11))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            byte_c2 = simd_and(r80_7ff_tmp2, tmp6);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp8);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
            cc_range_ab_bb_2 = simd_and(r80_7ff_tmp4, r80_7ff_tmp6);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp7 = simd_and(byte_c2_adv, cc_range_ab_bb_2);
            struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, r80_7ff_tmp7);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 10))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp4);
            r800_ffff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp2 = simd_andc(tmp7, r800_ffff_tmp1);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(2, 5))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(2, 5))) {
                byte_e2 = simd_and(byte_range_e0_ef, tmp6);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(2, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(tmp4, r800_ffff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp12);
                  cc_range_2018_2039_3 = simd_or(r2000_2fff_tmp7, r2000_2fff_tmp13);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, cc_range_2018_2039_3);
                  struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp15);
                  byte_b9 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp16);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  byte_82 = simd_and(r2000_2fff_tmp2, tmp6);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(4), sequence_e2_b9_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_b9_adv, byte_82);
                  struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, r2000_2fff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 3);
                }
                r2000_4dff_tmp1 = simd_andc(tmp8, tmp4);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                r2000_4dff_tmp2 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp2) || carryQ.CarryTest(5, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(tmp4, r800_ffff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(5), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp8 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp5);
                  r3000_4dff_tmp10 = simd_and(r3000_4dff_tmp9, r800_ffff_tmp1);
                  cc_range_300c_301d_3 = simd_or(r3000_4dff_tmp6, r3000_4dff_tmp10);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(6), sequence_e3_80_adv));
                  r3000_4dff_tmp11 = simd_and(sequence_e3_80_adv, cc_range_300c_301d_3);
                  struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, r3000_4dff_tmp11);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 5);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(7, 4))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp8);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp3);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp6);
              byte_b9 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp7);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(7), ra000_ffff_tmp8));
              sequence_ef_b9 = simd_and(ra000_ffff_tmp8, byte_b9);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp10 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp10, basis_bits.bit_4);
              ra000_ffff_tmp12 = simd_xor(basis_bits.bit_5, r800_ffff_tmp1);
              byte_range_81_84 = simd_and(ra000_ffff_tmp11, ra000_ffff_tmp12);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(8), sequence_ef_b9_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ef_b9_adv, byte_range_81_84);
              struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp1);
              byte_bc = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              cc_range_ff02_ff07_3 = simd_and(ra000_ffff_tmp10, tmp10);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(9), sequence_ef_bc_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ef_bc_adv, cc_range_ff02_ff07_3);
              struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_bd = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp16);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp3, tmp2);
              ra000_ffff_tmp18 = simd_andc(basis_bits.bit_6, tmp4);
              byte_range_a2_a3 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp18);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(10), sequence_ef_bd_adv));
              ra000_ffff_tmp19 = simd_and(sequence_ef_bd_adv, byte_range_a2_a3);
              struct_qmark_Y.cc = simd_or(struct_qmark_Y.cc, ra000_ffff_tmp19);
            }
            else {
              carryQ.CarryDequeueEnqueue(7, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 10);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 11);
        }
        carryQ.CarryQ_Adjust(11);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<11, 0> carryQ;
  };

  struct Property_pat_ws_Y {
  Property_pat_ws_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_pat_ws_Y & struct_pat_ws_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_9_20_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, byte_85;
		BitBlock byte_c2_adv, r80_7ff_tmp9, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e2_e3;
		BitBlock r800_4dff_tmp2, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, byte_80, r2000_2fff_tmp2, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock cc_range_200e_2028_3, sequence_e2_80_adv, r2000_2fff_tmp10;




        struct_pat_ws_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_or(tmp1, tmp2);
        tmp4 = simd_andc(basis_bits.bit_4, tmp3);
        tmp5 = simd_not(basis_bits.bit_6);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(simd_and(basis_bits.bit_5, tmp5), simd_andc(tmp6, basis_bits.bit_5));
        tmp8 = simd_and(tmp4, tmp7);
        tmp9 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp10 = simd_andc(tmp9, tmp1);
        tmp11 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp12 = simd_or(tmp11, tmp6);
        tmp13 = simd_andc(tmp10, tmp12);
        cc_range_9_20_1 = simd_or(tmp8, tmp13);
        struct_pat_ws_Y.cc = simd_or(struct_pat_ws_Y.cc, cc_range_9_20_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 4))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_andc(byte_range_c0_ff, tmp2);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp11);
            byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            byte_85 = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp9 = simd_and(byte_c2_adv, byte_85);
            struct_pat_ws_Y.cc = simd_or(struct_pat_ws_Y.cc, r80_7ff_tmp9);
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp9);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 3))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp11);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(2, 2))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, tmp11);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(2, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp11);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(2, 2))) {
                  r2000_2fff_tmp1 = simd_andc(r800_ffff_tmp3, tmp2);
                  byte_80 = simd_andc(r2000_2fff_tmp1, tmp12);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), r2000_2fff_tmp2));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp2, byte_80);
                  byte_e2_adv = r2000_2fff_tmp2;
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp3, basis_bits.bit_6);
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp1, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp3, tmp9);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp8 = simd_andc(r2000_2fff_tmp7, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp8);
                  cc_range_200e_2028_3 = simd_or(r2000_2fff_tmp5, r2000_2fff_tmp9);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_80_adv, cc_range_200e_2028_3);
                  struct_pat_ws_Y.cc = simd_or(struct_pat_ws_Y.cc, r2000_2fff_tmp10);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 3);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        carryQ.CarryQ_Adjust(4);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<4, 0> carryQ;
  };

  struct Property_dep_Y {
  Property_dep_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_dep_Y & struct_dep_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, r100_2ff_tmp4;
		BitBlock byte_range_c4_c8, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock byte_c9, r100_2ff_tmp8, byte_range_80_8f, r100_2ff_tmp9;
		BitBlock r100_2ff_tmp10, r100_2ff_tmp11, r100_24f_tmp1, r100_24f_tmp2;
		BitBlock byte_range_c4_c5, r100_17f_tmp1, byte_c5, byte_89, byte_c5_adv;
		BitBlock r100_17f_tmp2, r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d9;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_b3, byte_d9_adv, r600_6ff_tmp8, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, byte_e0, r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_bd, r800_fff_tmp6, sequence_e0_bd;
		BitBlock byte_e0_adv, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, r800_fff_tmp11, cc_range_f77_f79_3;
		BitBlock sequence_e0_bd_adv, r800_fff_tmp12, r800_1fff_tmp2, r800_1fff_tmp3;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, r1000_1fff_tmp5, byte_9e, r1000_1fff_tmp6;
		BitBlock sequence_e1_9e, byte_e1_adv, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, byte_range_a3_a4;
		BitBlock sequence_e1_9e_adv, r1000_1fff_tmp12, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock byte_range_aa_af, sequence_e2_81_adv, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, byte_8c, sequence_e2_8c;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock byte_range_a9_aa, sequence_e2_8c_adv, r2000_2fff_tmp15;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7, byte_a0;
		BitBlock r10000_10ffff_tmp8, sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, byte_80, r10000_10ffff_tmp11, sequence_f3_a0_80;
		BitBlock sequence_f3_a0_adv, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, cc_range_e0001_e0020_4;
		BitBlock sequence_f3_a0_80_adv, r10000_10ffff_tmp16, sequence_f3_a0_81;
		BitBlock byte_range_80_bf, sequence_f3_a0_81_adv, r10000_10ffff_tmp17;




        struct_dep_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 15))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(0, 2))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r100_2ff_tmp2 = simd_or(basis_bits.bit_5, r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_not(r100_2ff_tmp2);
                r100_2ff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp3), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp5, r100_2ff_tmp6);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp7);
                r100_2ff_tmp8 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                byte_range_80_8f = simd_andc(r100_2ff_tmp8, r80_7ff_tmp1);
                carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(0), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_8f);
                r100_2ff_tmp11 = simd_or(byte_range_c4_c8, r100_2ff_tmp10);
                if ((bitblock::any(r100_2ff_tmp11) || carryQ.CarryTest(1, 1))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(1, 1))) {
                    r100_17f_tmp1 = simd_and(r100_24f_tmp1, r100_2ff_tmp6);
                    byte_c5 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    byte_89 = simd_and(byte_range_80_8f, r100_2ff_tmp7);
                    carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(1), byte_c5_adv));
                    r100_17f_tmp2 = simd_and(byte_c5_adv, byte_89);
                    struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r100_17f_tmp2);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(1, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(0, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(2, 1))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp5 = simd_and(r600_6ff_tmp3, r600_6ff_tmp4);
              r600_6ff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp7 = simd_andc(r600_6ff_tmp6, r80_7ff_tmp3);
              byte_b3 = simd_and(r600_6ff_tmp5, r600_6ff_tmp7);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(2), byte_d9_adv));
              r600_6ff_tmp8 = simd_and(byte_d9_adv, byte_b3);
              struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r600_6ff_tmp8);
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 8))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 7))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 4))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(4, 2))) {
                  r800_fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp2 = simd_and(r800_ffff_tmp5, r800_fff_tmp1);
                  r800_fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_and(r800_fff_tmp3, r800_fff_tmp4);
                  byte_bd = simd_and(r800_fff_tmp2, r800_fff_tmp5);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(4), r800_fff_tmp6));
                  sequence_e0_bd = simd_and(r800_fff_tmp6, byte_bd);
                  byte_e0_adv = r800_fff_tmp6;
                  r800_fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp8 = simd_and(r800_ffff_tmp2, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp10 = simd_and(r800_fff_tmp9, r800_fff_tmp4);
                  r800_fff_tmp11 = simd_or(r800_fff_tmp8, r800_fff_tmp10);
                  cc_range_f77_f79_3 = simd_and(r800_fff_tmp2, r800_fff_tmp11);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(5), sequence_e0_bd_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_bd_adv, cc_range_f77_f79_3);
                  struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r800_fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 2);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(6, 2))) {
                  r1000_1fff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp5 = simd_and(r1000_1fff_tmp3, r1000_1fff_tmp4);
                  byte_9e = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r1000_1fff_tmp6));
                  sequence_e1_9e = simd_and(r1000_1fff_tmp6, byte_9e);
                  byte_e1_adv = r1000_1fff_tmp6;
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp9), simd_andc(r1000_1fff_tmp10, basis_bits.bit_5));
                  byte_range_a3_a4 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp11);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(7), sequence_e1_9e_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_9e_adv, byte_range_a3_a4);
                  struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r1000_1fff_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 4);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(8, 3))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(8, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(8), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_af = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(9), sequence_e2_81_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_81_adv, byte_range_aa_af);
                  struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r2000_2fff_tmp9);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp11 = simd_andc(r2000_2fff_tmp10, r800_ffff_tmp3);
                  byte_8c = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp11);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_a9_aa = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp14);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(10), sequence_e2_8c_adv));
                  r2000_2fff_tmp15 = simd_and(sequence_e2_8c_adv, byte_range_a9_aa);
                  struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r2000_2fff_tmp15);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 3);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 8);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(11, 4))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp7 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp6);
            byte_a0 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(11), r10000_10ffff_tmp8));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp8, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp8;
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp9);
            byte_80 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(12), r10000_10ffff_tmp11));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp11, byte_80);
            sequence_f3_a0_adv = r10000_10ffff_tmp11;
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            cc_range_e0001_e0020_4 = simd_or(r10000_10ffff_tmp14, r10000_10ffff_tmp15);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(13), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f3_a0_80_adv, cc_range_e0001_e0020_4);
            struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r10000_10ffff_tmp16);
            byte_81 = r10000_10ffff_tmp14;
            sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(14), sequence_f3_a0_81_adv));
            r10000_10ffff_tmp17 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
            struct_dep_Y.cc = simd_or(struct_dep_Y.cc, r10000_10ffff_tmp17);
          }
          else {
            carryQ.CarryDequeueEnqueue(11, 4);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 15);
        }
        carryQ.CarryQ_Adjust(15);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<15, 0> carryQ;
  };

  struct Property_dia_Y {
  Property_dia_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_dia_Y & struct_dia_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_5e_60_1, byte_range_c0_ff, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, cc_range_a8_b7_2, byte_c2_adv, r80_7ff_tmp23;
		BitBlock byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1;
		BitBlock byte_ca, byte_range_b0_bf, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock r100_2ff_tmp4, byte_cb, r100_2ff_tmp5, byte_ca_adv, r2b0_2ff_tmp1;
		BitBlock byte_range_80_bf, byte_cb_adv, r2b0_2ff_tmp2, r100_3ff_tmp2, byte_cc;
		BitBlock r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, byte_range_80_af;
		BitBlock r100_3ff_tmp5, r100_3ff_tmp6, r100_3ff_tmp7, byte_cc_adv;
		BitBlock r300_36f_tmp1, r300_36f_tmp2, r300_36f_tmp3, r300_36f_tmp4;
		BitBlock r300_36f_tmp5, r300_36f_tmp6, r300_36f_tmp7, r300_36f_tmp8;
		BitBlock r300_36f_tmp9, r300_36f_tmp10, r300_36f_tmp11, r300_36f_tmp12;
		BitBlock r300_36f_tmp13, r300_36f_tmp14, cc_range_340_35d_2, byte_cd_adv;
		BitBlock r300_36f_tmp15, r100_3ff_tmp8, r100_3ff_tmp9, byte_range_ce_cf;
		BitBlock r100_3ff_tmp10, r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3;
		BitBlock cc_range_374_37a_2, r370_3ff_tmp4, byte_ce, r370_3ff_tmp5;
		BitBlock byte_range_84_85, byte_ce_adv, r370_3ff_tmp6, r80_7ff_tmp24;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, byte_d2, r400_4ff_tmp1;
		BitBlock r400_4ff_tmp2, r400_4ff_tmp3, byte_range_83_87, byte_d2_adv;
		BitBlock r400_4ff_tmp4, r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2;
		BitBlock byte_d6, byte_range_80_8f, r400_5ff_tmp3, r400_5ff_tmp4;
		BitBlock r400_5ff_tmp5, byte_d4, r500_58f_tmp1, r500_58f_tmp2, r500_58f_tmp3;
		BitBlock r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1;
		BitBlock r530_58f_tmp2, byte_99, byte_d5_adv, r530_58f_tmp3, byte_range_90_bf;
		BitBlock r400_5ff_tmp6, r400_5ff_tmp7, byte_d7, r400_5ff_tmp8, r590_5ff_tmp1;
		BitBlock r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, r590_5ff_tmp8, r590_5ff_tmp9;
		BitBlock r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13;
		BitBlock r590_5ff_tmp14, cc_range_591_5bf_2, byte_d6_adv, r590_5ff_tmp15;
		BitBlock r590_5ff_tmp16, r590_5ff_tmp17, r590_5ff_tmp18, r590_5ff_tmp19;
		BitBlock cc_range_5c1_5c4_2, byte_d7_adv, r590_5ff_tmp20, byte_range_d8_db;
		BitBlock r600_6ff_tmp1, r600_6ff_tmp2, byte_d9, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, cc_range_64b_657_2;
		BitBlock byte_d9_adv, r600_6ff_tmp12, r600_6ff_tmp13, byte_db, r600_6ff_tmp14;
		BitBlock r600_6ff_tmp15, r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18;
		BitBlock r600_6ff_tmp19, r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22;
		BitBlock r600_6ff_tmp23, r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26;
		BitBlock cc_range_6df_6ea_2, byte_db_adv, r600_6ff_tmp27, r80_7ff_tmp25;
		BitBlock byte_range_dc_dd, r700_77f_tmp1, byte_dc, r700_77f_tmp2;
		BitBlock r700_77f_tmp3, byte_dd, r700_77f_tmp4, r700_77f_tmp5, r700_77f_tmp6;
		BitBlock byte_dc_adv, r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3;
		BitBlock byte_range_80_8a, byte_dd_adv, r700_74f_tmp4, r80_7ff_tmp26;
		BitBlock byte_range_de_df, byte_de, r780_7bf_tmp1, r780_7bf_tmp2;
		BitBlock r780_7bf_tmp3, r780_7bf_tmp4, r780_7bf_tmp5, byte_range_a6_b0;
		BitBlock byte_de_adv, r780_7bf_tmp6, byte_df, r7c0_7ff_tmp1, r7c0_7ff_tmp2;
		BitBlock r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5, r7c0_7ff_tmp6;
		BitBlock r7c0_7ff_tmp7, byte_range_ab_b5, byte_df_adv, r7c0_7ff_tmp8;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_range_98_99, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, byte_a3, sequence_e0_a3;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12;
		BitBlock byte_range_a4_be, sequence_e0_a3_adv, r800_fff_tmp13, byte_a4;
		BitBlock sequence_e0_a4, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock byte_bc, sequence_e0_a4_adv, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock r800_fff_tmp19, byte_a5, sequence_e0_a5, r800_fff_tmp20;
		BitBlock r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24;
		BitBlock r800_fff_tmp25, r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock r800_fff_tmp29, cc_range_94d_971_3, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, byte_a6, sequence_e0_a6;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp32, r800_fff_tmp33, byte_a7;
		BitBlock sequence_e0_a7, byte_8d, sequence_e0_a7_adv, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, byte_a8, sequence_e0_a8, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp36, r800_fff_tmp37, byte_a9, sequence_e0_a9;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp38, r800_fff_tmp39, byte_aa;
		BitBlock sequence_e0_aa, sequence_e0_aa_adv, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock byte_ab, sequence_e0_ab, sequence_e0_ab_adv, r800_fff_tmp42, byte_ac;
		BitBlock sequence_e0_ac, sequence_e0_ac_adv, r800_fff_tmp43, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_fff_tmp44, byte_af;
		BitBlock sequence_e0_af, sequence_e0_af_adv, r800_fff_tmp45, byte_b1;
		BitBlock sequence_e0_b1, sequence_e0_b1_adv, r800_fff_tmp46, r800_fff_tmp47;
		BitBlock byte_b2, sequence_e0_b2, sequence_e0_b2_adv, r800_fff_tmp48, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp49, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp50, byte_b7;
		BitBlock sequence_e0_b7, byte_8a, sequence_e0_b7_adv, r800_fff_tmp51, byte_b9;
		BitBlock sequence_e0_b9, r800_fff_tmp52, r800_fff_tmp53, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, r800_fff_tmp56, cc_range_e47_e4e_3;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp57, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp58, byte_range_88_8c, sequence_e0_bb_adv, r800_fff_tmp59;
		BitBlock sequence_e0_bc, r800_fff_tmp60, r800_fff_tmp61, r800_fff_tmp62;
		BitBlock r800_fff_tmp63, r800_fff_tmp64, cc_range_f18_f3e_3;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp65, byte_be, sequence_e0_be;
		BitBlock r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68, r800_fff_tmp69;
		BitBlock r800_fff_tmp70, r800_fff_tmp71, cc_range_f82_f86_3;
		BitBlock sequence_e0_be_adv, r800_fff_tmp72, byte_bf, sequence_e0_bf, byte_86;
		BitBlock sequence_e0_bf_adv, r800_fff_tmp73, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3;
		BitBlock sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock cc_range_1037_1039_3, sequence_e1_80_adv, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, byte_82, sequence_e1_82, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock cc_range_1087_109a_3, sequence_e1_82_adv, r1000_1fff_tmp25, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, cc_range_17c9_17dd_3;
		BitBlock sequence_e1_9f_adv, r1000_1fff_tmp34, r1000_1fff_tmp35;
		BitBlock sequence_e1_a4, byte_range_b9_bb, sequence_e1_a4_adv;
		BitBlock r1000_1fff_tmp36, r1000_1fff_tmp37, sequence_e1_a9, r1000_1fff_tmp38;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, cc_range_1a75_1a7f_3;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock sequence_e1_aa, r1000_1fff_tmp43, byte_range_b0_bd;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock sequence_e1_ac, byte_b4, sequence_e1_ac_adv, r1000_1fff_tmp46;
		BitBlock sequence_e1_ad, r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock cc_range_1b44_1b6b_3, sequence_e1_ad_adv, r1000_1fff_tmp53, byte_ae;
		BitBlock sequence_e1_ae, byte_range_aa_ab, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp54, byte_b0, sequence_e1_b0, r1000_1fff_tmp55;
		BitBlock byte_range_b6_b7, sequence_e1_b0_adv, r1000_1fff_tmp56;
		BitBlock sequence_e1_b1, r1000_1fff_tmp57, byte_range_b8_bd;
		BitBlock sequence_e1_b1_adv, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock sequence_e1_b3, r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock r1000_1fff_tmp63, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, cc_range_1cd0_1cf8_3;
		BitBlock sequence_e1_b3_adv, r1000_1fff_tmp68, sequence_e1_b4;
		BitBlock r1000_1fff_tmp69, byte_range_ac_bf, sequence_e1_b4_adv;
		BitBlock r1000_1fff_tmp70, r1000_1fff_tmp71, sequence_e1_b5, r1000_1fff_tmp72;
		BitBlock r1000_1fff_tmp73, byte_range_80_aa, sequence_e1_b5_adv;
		BitBlock r1000_1fff_tmp74, sequence_e1_b7, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, cc_range_1dc4_1dfd_3;
		BitBlock sequence_e1_b7_adv, r1000_1fff_tmp79, sequence_e1_be;
		BitBlock r1000_1fff_tmp80, cc_range_1fbd_1fbf_3, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp81, sequence_e1_bf, r1000_1fff_tmp82, r1000_1fff_tmp83;
		BitBlock r1000_1fff_tmp84, r1000_1fff_tmp85, r1000_1fff_tmp86;
		BitBlock r1000_1fff_tmp87, r1000_1fff_tmp88, r1000_1fff_tmp89;
		BitBlock r1000_1fff_tmp90, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock cc_range_1fc0_1ffd_3, sequence_e1_bf_adv, r1000_1fff_tmp93;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_b3, byte_e2_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock byte_range_af_b1, sequence_e2_b3_adv, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, byte_b8, sequence_e2_b8;
		BitBlock r2000_2fff_tmp13, sequence_e2_b8_adv, r2000_2fff_tmp14;
		BitBlock r2000_4dff_tmp2, r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock byte_range_aa_af, sequence_e3_80_adv, r3000_4dff_tmp7, sequence_e3_82;
		BitBlock r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10, byte_range_99_9c;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp11, byte_83, sequence_e3_83;
		BitBlock r3000_4dff_tmp12, r3000_4dff_tmp13, r3000_4dff_tmp14;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp15, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, byte_ea;
		BitBlock ra000_ffff_tmp3, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock sequence_ea_99, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, cc_range_a66f_a67f_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp17, byte_9a, sequence_ea_9a, byte_range_9c_9d;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp18, ra000_ffff_tmp19, byte_9b;
		BitBlock sequence_ea_9b, ra000_ffff_tmp20, byte_range_b0_b1;
		BitBlock sequence_ea_9b_adv, ra000_ffff_tmp21, ra000_ffff_tmp22, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock byte_range_97_a1, sequence_ea_9c_adv, ra000_ffff_tmp29, byte_9e;
		BitBlock sequence_ea_9e, ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock byte_88, sequence_ea_9e_adv, ra000_ffff_tmp33, sequence_ea_9f;
		BitBlock ra000_ffff_tmp34, byte_range_b8_b9, sequence_ea_9f_adv;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, sequence_ea_a3, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock cc_range_a8c4_a8e0_3, sequence_ea_a3_adv, ra000_ffff_tmp41;
		BitBlock sequence_ea_a4, ra000_ffff_tmp42, ra000_ffff_tmp43, byte_range_ab_ae;
		BitBlock sequence_ea_a4_adv, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock sequence_ea_a5, byte_93, sequence_ea_a5_adv, ra000_ffff_tmp46;
		BitBlock ra000_ffff_tmp47, sequence_ea_a6, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp48, ra000_ffff_tmp49, sequence_ea_a7, ra000_ffff_tmp50;
		BitBlock cc_range_a9c0_a9e5_3, sequence_ea_a7_adv, ra000_ffff_tmp51;
		BitBlock sequence_ea_a9, ra000_ffff_tmp52, ra000_ffff_tmp53, ra000_ffff_tmp54;
		BitBlock byte_range_bb_bd, sequence_ea_a9_adv, ra000_ffff_tmp55;
		BitBlock sequence_ea_aa, sequence_ea_aa_adv, ra000_ffff_tmp56, sequence_ea_ab;
		BitBlock ra000_ffff_tmp57, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock cc_range_aac0_aaf6_3, sequence_ea_ab_adv, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, sequence_ea_ad, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock byte_range_9b_9f, sequence_ea_ad_adv, ra000_ffff_tmp64;
		BitBlock sequence_ea_af, byte_range_ac_ad, sequence_ea_af_adv;
		BitBlock ra000_ffff_tmp65, byte_ef, ra000_ffff_tmp66, sequence_ef_ac;
		BitBlock byte_ef_adv, sequence_ef_ac_adv, ra000_ffff_tmp67, sequence_ef_b8;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, byte_range_a0_ad;
		BitBlock sequence_ef_b8_adv, ra000_ffff_tmp70, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp71, byte_bd, sequence_ef_bd;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, cc_range_ff40_ff70_3;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp74, sequence_ef_be;
		BitBlock ra000_ffff_tmp75, byte_range_9e_9f, sequence_ef_be_adv;
		BitBlock ra000_ffff_tmp76, sequence_ef_bf, sequence_ef_bf_adv;
		BitBlock ra000_ffff_tmp77, r80_10ffff_tmp1, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, byte_90, r10000_10ffff_tmp3;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8, byte_8b;
		BitBlock r10000_10ffff_tmp9, sequence_f0_90_8b, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_8b_adv, r10000_10ffff_tmp11;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, byte_range_a5_a6, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_91, sequence_f0_91, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock sequence_f0_91_82, sequence_f0_91_adv, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, byte_range_b9_ba, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, byte_84, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_b3_b4, sequence_f0_91_84_adv, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, byte_85, sequence_f0_91_85, r10000_10ffff_tmp29;
		BitBlock sequence_f0_91_85_adv, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock byte_87, sequence_f0_91_87, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, sequence_f0_91_88;
		BitBlock r10000_10ffff_tmp34, byte_range_b5_b6, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp35, sequence_f0_91_8b, r10000_10ffff_tmp36;
		BitBlock byte_range_a9_aa, sequence_f0_91_8b_adv, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, byte_8c, sequence_f0_91_8c;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, cc_range_1134d_11370_4;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp48, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp49, byte_range_82_83, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp52, sequence_f0_91_96_adv, r10000_10ffff_tmp53;
		BitBlock byte_97, sequence_f0_91_97, sequence_f0_91_97_adv;
		BitBlock r10000_10ffff_tmp54, byte_98, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock sequence_f0_91_9a, r10000_10ffff_tmp57, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp58, sequence_f0_96, r10000_10ffff_tmp59;
		BitBlock sequence_f0_96_ab, sequence_f0_96_adv, byte_range_b0_b4;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp60, sequence_f0_96_be;
		BitBlock r10000_10ffff_tmp61, r10000_10ffff_tmp62, byte_range_8f_9f;
		BitBlock sequence_f0_96_be_adv, r10000_10ffff_tmp63, byte_9d, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp64, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock r10000_10ffff_tmp77, r10000_10ffff_tmp78, r10000_10ffff_tmp79;
		BitBlock cc_range_1d167_1d17b_4, sequence_f0_9d_85_adv, r10000_10ffff_tmp80;
		BitBlock sequence_f0_9d_86, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock r10000_10ffff_tmp89, cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv;
		BitBlock r10000_10ffff_tmp90, sequence_f0_9e, r10000_10ffff_tmp91;
		BitBlock sequence_f0_9e_a3, sequence_f0_9e_adv, r10000_10ffff_tmp92;
		BitBlock byte_range_90_96, sequence_f0_9e_a3_adv, r10000_10ffff_tmp93;




        struct_dia_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_or(tmp10, tmp11);
        tmp13 = simd_andc(tmp9, tmp12);
        cc_range_5e_60_1 = simd_or(tmp7, tmp13);
        struct_dia_Y.cc = simd_or(struct_dia_Y.cc, cc_range_5e_60_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 117))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 17))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp5, tmp10);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp8);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, tmp11);
            r80_7ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp9 = simd_and(tmp4, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_or(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp15 = simd_andc(r80_7ff_tmp14, tmp11);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp11, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_or(basis_bits.bit_5, tmp11);
            r80_7ff_tmp19 = simd_not(r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_and(basis_bits.bit_5, r80_7ff_tmp8);
            r80_7ff_tmp21 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp19), simd_andc(r80_7ff_tmp20, basis_bits.bit_4));
            r80_7ff_tmp22 = simd_and(r80_7ff_tmp13, r80_7ff_tmp21);
            cc_range_a8_b7_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp22);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp23 = simd_and(byte_c2_adv, cc_range_a8_b7_2);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r80_7ff_tmp23);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp10);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 5))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 2))) {
                r100_2ff_tmp1 = simd_and(r80_7ff_tmp6, tmp5);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp1);
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp2));
                r100_2ff_tmp3 = simd_and(r100_2ff_tmp2, byte_range_b0_bf);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                r100_2ff_tmp5 = simd_or(r100_2ff_tmp3, byte_cb);
                if ((bitblock::any(r100_2ff_tmp5) || carryQ.CarryTest(2, 1))) {
                  byte_ca_adv = r100_2ff_tmp2;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r2b0_2ff_tmp1);
                  byte_range_80_bf = r80_7ff_tmp4;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(2), byte_cb_adv));
                  r2b0_2ff_tmp2 = simd_and(byte_cb_adv, byte_range_80_bf);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r2b0_2ff_tmp2);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r100_3ff_tmp2 = simd_andc(tmp4, tmp11);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(tmp4, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              byte_range_80_af = simd_andc(r80_7ff_tmp4, r80_7ff_tmp12);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(3), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_80_af);
              r100_3ff_tmp7 = simd_or(byte_cc, r100_3ff_tmp6);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(4, 1))) {
                byte_range_80_bf = r80_7ff_tmp4;
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(4), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r300_36f_tmp1);
                r300_36f_tmp2 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                r300_36f_tmp3 = simd_and(basis_bits.bit_4, r80_7ff_tmp20);
                r300_36f_tmp4 = simd_andc(r300_36f_tmp2, r300_36f_tmp3);
                r300_36f_tmp5 = simd_and(byte_range_80_bf, tmp2);
                r300_36f_tmp6 = simd_andc(r300_36f_tmp5, basis_bits.bit_4);
                r300_36f_tmp7 = simd_or(r300_36f_tmp4, r300_36f_tmp6);
                r300_36f_tmp8 = simd_or(tmp10, r80_7ff_tmp8);
                r300_36f_tmp9 = simd_or(basis_bits.bit_3, r300_36f_tmp8);
                r300_36f_tmp10 = simd_not(r300_36f_tmp9);
                r300_36f_tmp11 = simd_and(tmp4, tmp11);
                r300_36f_tmp12 = simd_and(basis_bits.bit_3, r300_36f_tmp11);
                r300_36f_tmp13 = simd_or(simd_and(basis_bits.bit_2, r300_36f_tmp10), simd_andc(r300_36f_tmp12, basis_bits.bit_2));
                r300_36f_tmp14 = simd_and(byte_range_80_bf, r300_36f_tmp13);
                cc_range_340_35d_2 = simd_or(r300_36f_tmp7, r300_36f_tmp14);
                byte_cd_adv = r100_3ff_tmp5;
                r300_36f_tmp15 = simd_and(byte_cd_adv, cc_range_340_35d_2);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r300_36f_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
              byte_range_b0_bf = r80_7ff_tmp13;
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(tmp4, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(5, 1))) {
                r370_3ff_tmp1 = simd_andc(r80_7ff_tmp14, basis_bits.bit_6);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp6, tmp5);
                r370_3ff_tmp3 = simd_or(r370_3ff_tmp1, r370_3ff_tmp2);
                cc_range_374_37a_2 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp4 = simd_and(byte_cd_adv, cc_range_374_37a_2);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r370_3ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, tmp6);
                r370_3ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                byte_range_84_85 = simd_and(r370_3ff_tmp5, r370_3ff_tmp1);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(5), byte_ce_adv));
                r370_3ff_tmp6 = simd_and(byte_ce_adv, byte_range_84_85);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r370_3ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
            r80_7ff_tmp24 = simd_and(byte_range_c0_ff, tmp2);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp24, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(6, 5))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp24, tmp10);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(6, 1))) {
                byte_d2 = simd_and(r80_7ff_tmp24, r80_7ff_tmp3);
                r400_4ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, basis_bits.bit_4);
                r400_4ff_tmp3 = simd_or(basis_bits.bit_5, r80_7ff_tmp8);
                byte_range_83_87 = simd_and(r400_4ff_tmp2, r400_4ff_tmp3);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(6), byte_d2_adv));
                r400_4ff_tmp4 = simd_and(byte_d2_adv, byte_range_83_87);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r400_4ff_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp14, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp24, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp14, tmp5);
              byte_d6 = simd_and(r80_7ff_tmp24, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(7), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(8, 2))) {
                byte_d4 = simd_and(r80_7ff_tmp24, r80_7ff_tmp15);
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(8), r500_58f_tmp1));
                r500_58f_tmp2 = simd_and(r500_58f_tmp1, byte_range_b0_bf);
                r500_58f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp4 = simd_and(r80_7ff_tmp14, r500_58f_tmp3);
                byte_d5 = simd_and(r80_7ff_tmp24, r500_58f_tmp4);
                r500_58f_tmp5 = simd_or(r500_58f_tmp2, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(9, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp4, tmp2);
                  r530_58f_tmp2 = simd_and(r80_7ff_tmp6, r500_58f_tmp3);
                  byte_99 = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(9), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_99);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r530_58f_tmp3);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp4, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(r80_7ff_tmp14, r80_7ff_tmp8);
              byte_d7 = simd_and(r80_7ff_tmp24, r400_5ff_tmp7);
              r400_5ff_tmp8 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(10, 1))) {
                r590_5ff_tmp1 = simd_or(tmp10, basis_bits.bit_6);
                r590_5ff_tmp2 = simd_or(basis_bits.bit_3, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_not(r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_3, tmp12);
                r590_5ff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp3), simd_andc(r590_5ff_tmp4, basis_bits.bit_2));
                r590_5ff_tmp6 = simd_and(r80_7ff_tmp4, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                r590_5ff_tmp8 = simd_and(tmp4, basis_bits.bit_6);
                r590_5ff_tmp9 = simd_not(r590_5ff_tmp8);
                r590_5ff_tmp10 = simd_or(tmp10, r80_7ff_tmp8);
                r590_5ff_tmp11 = simd_or(simd_and(basis_bits.bit_3, r590_5ff_tmp9), simd_andc(r590_5ff_tmp10, basis_bits.bit_3));
                r590_5ff_tmp12 = simd_and(r590_5ff_tmp7, r590_5ff_tmp11);
                r590_5ff_tmp13 = simd_or(r590_5ff_tmp6, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_and(r80_7ff_tmp13, r80_7ff_tmp9);
                cc_range_591_5bf_2 = simd_or(r590_5ff_tmp13, r590_5ff_tmp14);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp15 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r590_5ff_tmp15);
                r590_5ff_tmp16 = simd_andc(byte_range_80_8f, tmp10);
                r590_5ff_tmp17 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp18 = simd_and(r590_5ff_tmp16, r590_5ff_tmp17);
                r590_5ff_tmp19 = simd_and(byte_range_80_8f, r80_7ff_tmp15);
                cc_range_5c1_5c4_2 = simd_or(r590_5ff_tmp18, r590_5ff_tmp19);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(10), byte_d7_adv));
                r590_5ff_tmp20 = simd_and(byte_d7_adv, cc_range_5c1_5c4_2);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r590_5ff_tmp20);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp24, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(11, 2))) {
              r600_6ff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d9 = simd_and(r80_7ff_tmp24, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
              r600_6ff_tmp4 = simd_or(tmp10, r80_7ff_tmp8);
              r600_6ff_tmp5 = simd_not(r600_6ff_tmp4);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, r80_7ff_tmp8);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              r600_6ff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp5), simd_andc(r600_6ff_tmp7, basis_bits.bit_3));
              r600_6ff_tmp9 = simd_and(r600_6ff_tmp3, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp4, tmp2);
              r600_6ff_tmp11 = simd_and(r600_6ff_tmp10, r80_7ff_tmp21);
              cc_range_64b_657_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp11);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(11), byte_d9_adv));
              r600_6ff_tmp12 = simd_and(byte_d9_adv, cc_range_64b_657_2);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
              byte_db = simd_and(r80_7ff_tmp24, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_or(basis_bits.bit_3, tmp12);
              r600_6ff_tmp15 = simd_not(r600_6ff_tmp14);
              r600_6ff_tmp16 = simd_and(basis_bits.bit_3, r80_7ff_tmp9);
              r600_6ff_tmp17 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp15), simd_andc(r600_6ff_tmp16, basis_bits.bit_2));
              r600_6ff_tmp18 = simd_and(r80_7ff_tmp4, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(r80_7ff_tmp5, r80_7ff_tmp14);
              r600_6ff_tmp20 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp21 = simd_and(r600_6ff_tmp19, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_or(r600_6ff_tmp18, r600_6ff_tmp21);
              r600_6ff_tmp23 = simd_and(r80_7ff_tmp5, basis_bits.bit_4);
              r600_6ff_tmp24 = simd_not(tmp11);
              r600_6ff_tmp25 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp24), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              r600_6ff_tmp26 = simd_and(r600_6ff_tmp23, r600_6ff_tmp25);
              cc_range_6df_6ea_2 = simd_or(r600_6ff_tmp22, r600_6ff_tmp26);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(12), byte_db_adv));
              r600_6ff_tmp27 = simd_and(byte_db_adv, cc_range_6df_6ea_2);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r600_6ff_tmp27);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 2);
            }
            r80_7ff_tmp25 = simd_andc(tmp4, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp24, r80_7ff_tmp25);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(13, 2))) {
              r700_77f_tmp1 = simd_andc(tmp4, tmp11);
              byte_dc = simd_and(r80_7ff_tmp24, r700_77f_tmp1);
              r700_77f_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp3 = simd_and(tmp4, r700_77f_tmp2);
              byte_dd = simd_and(r80_7ff_tmp24, r700_77f_tmp3);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(13), r700_77f_tmp4));
              r700_77f_tmp5 = simd_and(r700_77f_tmp4, byte_range_80_8f);
              r700_77f_tmp6 = simd_or(byte_dc, r700_77f_tmp5);
              if ((bitblock::any(r700_77f_tmp6) || carryQ.CarryTest(14, 1))) {
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(14), byte_dc_adv));
                r700_74f_tmp1 = simd_and(byte_dc_adv, byte_range_b0_bf);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r700_74f_tmp1);
                r700_74f_tmp2 = simd_or(basis_bits.bit_5, r80_7ff_tmp8);
                r700_74f_tmp3 = simd_and(basis_bits.bit_4, r700_74f_tmp2);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp3);
                byte_dd_adv = r700_77f_tmp4;
                r700_74f_tmp4 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r700_74f_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 2);
            }
            r80_7ff_tmp26 = simd_and(tmp4, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp24, r80_7ff_tmp26);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(15, 2))) {
              byte_de = simd_and(r80_7ff_tmp24, tmp6);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(15, 1))) {
                r780_7bf_tmp1 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                r780_7bf_tmp2 = simd_not(tmp12);
                r780_7bf_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp4 = simd_or(basis_bits.bit_4, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp2), simd_andc(r780_7bf_tmp4, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp1, r780_7bf_tmp5);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(15), byte_de_adv));
                r780_7bf_tmp6 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r780_7bf_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 1);
              }
              byte_df = simd_and(r80_7ff_tmp24, r80_7ff_tmp9);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(16, 1))) {
                r7c0_7ff_tmp1 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_4, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_not(r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_5, r80_7ff_tmp8);
                r7c0_7ff_tmp6 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp5);
                r7c0_7ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r7c0_7ff_tmp4), simd_andc(r7c0_7ff_tmp6, basis_bits.bit_3));
                byte_range_ab_b5 = simd_and(r7c0_7ff_tmp1, r7c0_7ff_tmp7);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(16), byte_df_adv));
                r7c0_7ff_tmp8 = simd_and(byte_df_adv, byte_range_ab_b5);
                struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r7c0_7ff_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(15, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 17);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp8);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(17, 74))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp10);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp11);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(17), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(18, 49))) {
              r800_4dff_tmp1 = simd_or(tmp10, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(18, 42))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp12);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(18, 24))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, tmp8);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp12);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(18), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp3, tmp2);
                  r800_fff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp5 = simd_andc(r800_fff_tmp4, basis_bits.bit_6);
                  byte_range_98_99 = simd_and(r800_fff_tmp3, r800_fff_tmp5);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(19), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_98_99);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, tmp10);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp10 = simd_and(tmp4, r800_fff_tmp7);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp11), simd_andc(tmp10, basis_bits.bit_3));
                  byte_range_a4_be = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(20), sequence_e0_a3_adv));
                  r800_fff_tmp13 = simd_and(sequence_e0_a3_adv, byte_range_a4_be);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp13);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp15 = simd_and(r800_ffff_tmp3, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_andc(tmp4, tmp11);
                  byte_bc = simd_and(r800_fff_tmp15, r800_fff_tmp16);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(21), sequence_e0_a4_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_a4_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp19 = simd_and(r800_ffff_tmp1, r800_fff_tmp18);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp19);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp21 = simd_andc(r800_ffff_tmp3, r800_fff_tmp20);
                  r800_fff_tmp22 = simd_and(tmp4, r800_fff_tmp18);
                  r800_fff_tmp23 = simd_and(r800_fff_tmp21, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_andc(r800_fff_tmp3, basis_bits.bit_4);
                  r800_fff_tmp25 = simd_xor(basis_bits.bit_5, tmp11);
                  r800_fff_tmp26 = simd_and(r800_fff_tmp24, r800_fff_tmp25);
                  r800_fff_tmp27 = simd_or(r800_fff_tmp23, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_andc(r800_fff_tmp18, tmp10);
                  r800_fff_tmp29 = simd_and(r800_fff_tmp15, r800_fff_tmp28);
                  cc_range_94d_971_3 = simd_or(r800_fff_tmp27, r800_fff_tmp29);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(22), sequence_e0_a5_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_a5_adv, cc_range_94d_971_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_and(r800_ffff_tmp1, tmp5);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp31);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(23), sequence_e0_a6_adv));
                  r800_fff_tmp32 = simd_and(sequence_e0_a6_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_ffff_tmp1, r800_fff_tmp7);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp33);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  byte_8d = r800_fff_tmp23;
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(24), sequence_e0_a7_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a7_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_andc(r800_fff_tmp4, tmp11);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp35);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(25), sequence_e0_a8_adv));
                  r800_fff_tmp36 = simd_and(sequence_e0_a8_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp36);
                  r800_fff_tmp37 = simd_and(r800_fff_tmp4, r800_fff_tmp18);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp37);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(26), sequence_e0_a9_adv));
                  r800_fff_tmp38 = simd_and(sequence_e0_a9_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp38);
                  r800_fff_tmp39 = simd_and(r800_fff_tmp4, tmp5);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp39);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(27), sequence_e0_aa_adv));
                  r800_fff_tmp40 = simd_and(sequence_e0_aa_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp40);
                  r800_fff_tmp41 = simd_and(r800_fff_tmp4, r800_fff_tmp7);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp41);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(28), sequence_e0_ab_adv));
                  r800_fff_tmp42 = simd_and(sequence_e0_ab_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp42);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(29), sequence_e0_ac_adv));
                  r800_fff_tmp43 = simd_and(sequence_e0_ac_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp43);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp22);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(30), sequence_e0_ad_adv));
                  r800_fff_tmp44 = simd_and(sequence_e0_ad_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp44);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(31), sequence_e0_af_adv));
                  r800_fff_tmp45 = simd_and(sequence_e0_af_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp45);
                  byte_b1 = r800_fff_tmp29;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(32), sequence_e0_b1_adv));
                  r800_fff_tmp46 = simd_and(sequence_e0_b1_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp46);
                  r800_fff_tmp47 = simd_andc(tmp5, tmp10);
                  byte_b2 = simd_and(r800_fff_tmp15, r800_fff_tmp47);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(33), sequence_e0_b2_adv));
                  r800_fff_tmp48 = simd_and(sequence_e0_b2_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp48);
                  byte_b3 = simd_and(r800_fff_tmp15, r800_fff_tmp8);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(34), sequence_e0_b3_adv));
                  r800_fff_tmp49 = simd_and(sequence_e0_b3_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp49);
                  byte_b5 = simd_and(r800_fff_tmp15, r800_fff_tmp19);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(35), sequence_e0_b5_adv));
                  r800_fff_tmp50 = simd_and(sequence_e0_b5_adv, byte_8d);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp50);
                  byte_b7 = simd_and(r800_fff_tmp15, r800_fff_tmp33);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  byte_8a = simd_and(r800_fff_tmp21, r800_fff_tmp39);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(36), sequence_e0_b7_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_b7_adv, byte_8a);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp51);
                  byte_b9 = simd_and(r800_fff_tmp15, r800_fff_tmp37);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp52 = simd_and(basis_bits.bit_5, tmp11);
                  r800_fff_tmp53 = simd_not(r800_fff_tmp52);
                  r800_fff_tmp54 = simd_and(basis_bits.bit_5, r800_fff_tmp7);
                  r800_fff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp53), simd_andc(r800_fff_tmp54, basis_bits.bit_4));
                  r800_fff_tmp56 = simd_or(r800_fff_tmp55, tmp6);
                  cc_range_e47_e4e_3 = simd_and(r800_fff_tmp21, r800_fff_tmp56);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(37), sequence_e0_b9_adv));
                  r800_fff_tmp57 = simd_and(sequence_e0_b9_adv, cc_range_e47_e4e_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp57);
                  byte_bb = simd_and(r800_fff_tmp15, r800_fff_tmp41);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp58 = simd_and(r800_fff_tmp21, basis_bits.bit_4);
                  byte_range_88_8c = simd_andc(r800_fff_tmp58, r800_fff_tmp52);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(38), sequence_e0_bb_adv));
                  r800_fff_tmp59 = simd_and(sequence_e0_bb_adv, byte_range_88_8c);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp59);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp60 = simd_or(byte_range_98_99, byte_b5);
                  r800_fff_tmp61 = simd_or(r800_fff_tmp60, byte_b7);
                  r800_fff_tmp62 = simd_or(r800_fff_tmp61, byte_b9);
                  r800_fff_tmp63 = simd_and(tmp4, basis_bits.bit_6);
                  r800_fff_tmp64 = simd_and(r800_fff_tmp15, r800_fff_tmp63);
                  cc_range_f18_f3e_3 = simd_or(r800_fff_tmp62, r800_fff_tmp64);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(39), sequence_e0_bc_adv));
                  r800_fff_tmp65 = simd_and(sequence_e0_bc_adv, cc_range_f18_f3e_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp65);
                  byte_be = simd_and(r800_fff_tmp15, tmp6);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp66 = simd_andc(r800_fff_tmp21, basis_bits.bit_4);
                  r800_fff_tmp67 = simd_not(tmp11);
                  r800_fff_tmp68 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp67), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp69 = simd_and(r800_fff_tmp66, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r800_fff_tmp71 = simd_and(r800_fff_tmp21, r800_fff_tmp70);
                  cc_range_f82_f86_3 = simd_or(r800_fff_tmp69, r800_fff_tmp71);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(40), sequence_e0_be_adv));
                  r800_fff_tmp72 = simd_and(sequence_e0_be_adv, cc_range_f82_f86_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp72);
                  byte_bf = simd_and(r800_fff_tmp15, r800_fff_tmp10);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = simd_and(r800_fff_tmp21, r800_fff_tmp31);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(41), sequence_e0_bf_adv));
                  r800_fff_tmp73 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r800_fff_tmp73);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 24);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp10);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(42, 18))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp12);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(42), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp7 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp11);
                  cc_range_1037_1039_3 = simd_or(r1000_1fff_tmp8, r1000_1fff_tmp12);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(43), sequence_e1_80_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_80_adv, cc_range_1037_1039_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_andc(tmp5, tmp10);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp14);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp16 = simd_not(r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_and(basis_bits.bit_5, r1000_1fff_tmp6);
                  r1000_1fff_tmp18 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp16), simd_andc(r1000_1fff_tmp17, basis_bits.bit_4));
                  r1000_1fff_tmp19 = simd_and(tmp4, r1000_1fff_tmp6);
                  r1000_1fff_tmp20 = simd_or(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp20);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp3, tmp2);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp9, basis_bits.bit_6);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp23);
                  cc_range_1087_109a_3 = simd_or(r1000_1fff_tmp21, r1000_1fff_tmp24);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(44), sequence_e1_82_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_82_adv, cc_range_1087_109a_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp25);
                  byte_9f = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp19);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp26 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp27 = simd_not(tmp10);
                  r1000_1fff_tmp28 = simd_or(basis_bits.bit_5, tmp11);
                  r1000_1fff_tmp29 = simd_and(basis_bits.bit_4, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp27), simd_andc(r1000_1fff_tmp29, basis_bits.bit_3));
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(tmp4, r800_1fff_tmp1);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp32);
                  cc_range_17c9_17dd_3 = simd_or(r1000_1fff_tmp31, r1000_1fff_tmp33);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(45), sequence_e1_9f_adv));
                  r1000_1fff_tmp34 = simd_and(sequence_e1_9f_adv, cc_range_17c9_17dd_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_and(r800_ffff_tmp3, tmp8);
                  byte_a4 = simd_and(r1000_1fff_tmp35, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  byte_range_b9_bb = simd_and(r1000_1fff_tmp10, tmp11);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(46), sequence_e1_a4_adv));
                  r1000_1fff_tmp36 = simd_and(sequence_e1_a4_adv, byte_range_b9_bb);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp36);
                  r1000_1fff_tmp37 = simd_and(r1000_1fff_tmp9, r800_1fff_tmp1);
                  byte_a9 = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp37);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp38 = simd_and(basis_bits.bit_5, tmp11);
                  r1000_1fff_tmp39 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp38);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp39, r1000_1fff_tmp19);
                  cc_range_1a75_1a7f_3 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp40);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(47), sequence_e1_a9_adv));
                  r1000_1fff_tmp41 = simd_and(sequence_e1_a9_adv, cc_range_1a75_1a7f_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp41);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp9, tmp5);
                  byte_aa = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp42);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp43 = simd_and(basis_bits.bit_4, r1000_1fff_tmp15);
                  byte_range_b0_bd = simd_andc(r1000_1fff_tmp5, r1000_1fff_tmp43);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(48), sequence_e1_aa_adv));
                  r1000_1fff_tmp44 = simd_and(sequence_e1_aa_adv, byte_range_b0_bd);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_andc(tmp4, tmp11);
                  byte_ac = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp45);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  byte_b4 = simd_and(r1000_1fff_tmp5, r800_ffff_tmp2);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(49), sequence_e1_ac_adv));
                  r1000_1fff_tmp46 = simd_and(sequence_e1_ac_adv, byte_b4);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp46);
                  byte_ad = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp32);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp47 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  r1000_1fff_tmp48 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp49 = simd_or(basis_bits.bit_5, r1000_1fff_tmp6);
                  r1000_1fff_tmp50 = simd_and(basis_bits.bit_4, r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp27), simd_andc(r1000_1fff_tmp50, basis_bits.bit_3));
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp48, r1000_1fff_tmp51);
                  cc_range_1b44_1b6b_3 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp52);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(50), sequence_e1_ad_adv));
                  r1000_1fff_tmp53 = simd_and(sequence_e1_ad_adv, cc_range_1b44_1b6b_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp53);
                  byte_ae = simd_and(r1000_1fff_tmp35, tmp6);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  byte_range_aa_ab = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp23);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(51), sequence_e1_ae_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_ae_adv, byte_range_aa_ab);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp54);
                  byte_b0 = simd_andc(r1000_1fff_tmp5, tmp12);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp55 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  byte_range_b6_b7 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp55);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(52), sequence_e1_b0_adv));
                  r1000_1fff_tmp56 = simd_and(sequence_e1_b0_adv, byte_range_b6_b7);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp56);
                  byte_b1 = simd_and(r1000_1fff_tmp5, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp57 = simd_and(r1000_1fff_tmp5, basis_bits.bit_4);
                  byte_range_b8_bd = simd_andc(r1000_1fff_tmp57, r1000_1fff_tmp15);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(53), sequence_e1_b1_adv));
                  r1000_1fff_tmp58 = simd_and(sequence_e1_b1_adv, byte_range_b8_bd);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp58);
                  r1000_1fff_tmp59 = simd_andc(r1000_1fff_tmp6, tmp10);
                  byte_b3 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp59);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp60 = simd_or(basis_bits.bit_3, r1000_1fff_tmp29);
                  r1000_1fff_tmp61 = simd_not(r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp61), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp63 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp62);
                  r1000_1fff_tmp64 = simd_or(r1000_1fff_tmp63, byte_ad);
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp64, byte_b4);
                  r1000_1fff_tmp66 = simd_andc(r1000_1fff_tmp9, basis_bits.bit_6);
                  r1000_1fff_tmp67 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp66);
                  cc_range_1cd0_1cf8_3 = simd_or(r1000_1fff_tmp65, r1000_1fff_tmp67);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(54), sequence_e1_b3_adv));
                  r1000_1fff_tmp68 = simd_and(sequence_e1_b3_adv, cc_range_1cd0_1cf8_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp68);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  r1000_1fff_tmp69 = simd_or(basis_bits.bit_3, tmp4);
                  byte_range_ac_bf = simd_and(r1000_1fff_tmp48, r1000_1fff_tmp69);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(55), sequence_e1_b4_adv));
                  r1000_1fff_tmp70 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp70);
                  r1000_1fff_tmp71 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp71);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp72 = simd_or(basis_bits.bit_3, r1000_1fff_tmp50);
                  r1000_1fff_tmp73 = simd_and(basis_bits.bit_2, r1000_1fff_tmp72);
                  byte_range_80_aa = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp73);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(56), sequence_e1_b5_adv));
                  r1000_1fff_tmp74 = simd_and(sequence_e1_b5_adv, byte_range_80_aa);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp74);
                  byte_b7 = r1000_1fff_tmp8;
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp75 = simd_and(r1000_1fff_tmp2, tmp10);
                  r1000_1fff_tmp76 = simd_or(r1000_1fff_tmp75, byte_b5);
                  r1000_1fff_tmp77 = simd_and(r1000_1fff_tmp5, tmp4);
                  r1000_1fff_tmp78 = simd_and(r1000_1fff_tmp77, tmp11);
                  cc_range_1dc4_1dfd_3 = simd_or(r1000_1fff_tmp76, r1000_1fff_tmp78);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(57), sequence_e1_b7_adv));
                  r1000_1fff_tmp79 = simd_and(sequence_e1_b7_adv, cc_range_1dc4_1dfd_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp79);
                  byte_be = simd_and(r1000_1fff_tmp5, tmp6);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp80 = simd_and(tmp4, basis_bits.bit_7);
                  cc_range_1fbd_1fbf_3 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp80);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(58), sequence_e1_be_adv));
                  r1000_1fff_tmp81 = simd_and(sequence_e1_be_adv, cc_range_1fbd_1fbf_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp81);
                  byte_bf = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp19);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  r1000_1fff_tmp83 = simd_and(r1000_1fff_tmp2, tmp4);
                  r1000_1fff_tmp84 = simd_and(r1000_1fff_tmp83, tmp11);
                  r1000_1fff_tmp85 = simd_or(r1000_1fff_tmp82, r1000_1fff_tmp84);
                  r1000_1fff_tmp86 = simd_and(r1000_1fff_tmp22, tmp4);
                  r1000_1fff_tmp87 = simd_and(r1000_1fff_tmp86, tmp11);
                  r1000_1fff_tmp88 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp87);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp35, tmp4);
                  r1000_1fff_tmp90 = simd_and(r1000_1fff_tmp89, tmp11);
                  r1000_1fff_tmp91 = simd_or(r1000_1fff_tmp88, r1000_1fff_tmp90);
                  r1000_1fff_tmp92 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp11);
                  cc_range_1fc0_1ffd_3 = simd_or(r1000_1fff_tmp91, r1000_1fff_tmp92);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(59), sequence_e1_bf_adv));
                  r1000_1fff_tmp93 = simd_and(sequence_e1_bf_adv, cc_range_1fc0_1ffd_3);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r1000_1fff_tmp93);
                }
                else {
                  carryQ.CarryDequeueEnqueue(42, 18);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 42);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp10);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(60, 7))) {
                r2000_4dff_tmp1 = simd_andc(tmp5, tmp10);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(60, 3))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp10);
                  byte_b3 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(60), r2000_2fff_tmp5));
                  sequence_e2_b3 = simd_and(r2000_2fff_tmp5, byte_b3);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp7 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp8 = simd_and(tmp4, r2000_2fff_tmp3);
                  r2000_2fff_tmp9 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp7), simd_andc(r2000_2fff_tmp8, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp9);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(61), sequence_e2_b3_adv));
                  r2000_2fff_tmp10 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r2000_2fff_tmp10);
                  r2000_2fff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp12 = simd_andc(r2000_2fff_tmp11, tmp11);
                  byte_b8 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, tmp8);
                  byte_af = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp8);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(62), sequence_e2_b8_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_b8_adv, byte_af);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r2000_2fff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(60, 3);
                }
                r2000_4dff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp3 = simd_andc(r2000_4dff_tmp2, tmp10);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(63, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp12);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(63), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r800_ffff_tmp3, tmp8);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, basis_bits.bit_4);
                  r3000_4dff_tmp6 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_af = simd_and(r3000_4dff_tmp5, r3000_4dff_tmp6);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(64), sequence_e3_80_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_80_adv, byte_range_aa_af);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r3000_4dff_tmp7);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp1);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp8 = simd_and(r800_ffff_tmp3, tmp2);
                  r3000_4dff_tmp9 = simd_and(r3000_4dff_tmp8, basis_bits.bit_4);
                  r3000_4dff_tmp10 = simd_xor(basis_bits.bit_5, tmp11);
                  byte_range_99_9c = simd_and(r3000_4dff_tmp9, r3000_4dff_tmp10);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(65), sequence_e3_82_adv));
                  r3000_4dff_tmp11 = simd_and(sequence_e3_82_adv, byte_range_99_9c);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r3000_4dff_tmp11);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp13 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp12);
                  r3000_4dff_tmp14 = simd_andc(tmp4, tmp11);
                  byte_bc = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp14);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(66), sequence_e3_83_adv));
                  r3000_4dff_tmp15 = simd_and(sequence_e3_83_adv, byte_bc);
                  struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r3000_4dff_tmp15);
                }
                else {
                  carryQ.CarryDequeueEnqueue(63, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(60, 7);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 49);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(67, 24))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(ra000_ffff_tmp1, tmp5);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp2);
              ra000_ffff_tmp3 = simd_and(r800_ffff_tmp3, tmp2);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp5 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp4);
              byte_99 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp5);
              carryQ.cq[67] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(67), ra000_ffff_tmp6));
              sequence_ea_99 = simd_and(ra000_ffff_tmp6, byte_99);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp3, tmp8);
              ra000_ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp9 = simd_and(tmp4, ra000_ffff_tmp8);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp12 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(tmp4, basis_bits.bit_6);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp13);
              ra000_ffff_tmp15 = simd_or(ra000_ffff_tmp10, ra000_ffff_tmp14);
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp9);
              cc_range_a66f_a67f_3 = simd_or(ra000_ffff_tmp15, ra000_ffff_tmp16);
              carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(68), sequence_ea_99_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ea_99_adv, cc_range_a66f_a67f_3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp17);
              byte_9a = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp2);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_range_9c_9d = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp13);
              carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(69), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, byte_range_9c_9d);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp8);
              byte_9b = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp19);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp20 = simd_or(tmp10, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp20);
              carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(70), sequence_ea_9b_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_andc(tmp4, tmp11);
              byte_9c = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp22);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp23 = simd_or(basis_bits.bit_3, ra000_ffff_tmp20);
              ra000_ffff_tmp24 = simd_not(ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_5, ra000_ffff_tmp8);
              ra000_ffff_tmp26 = simd_or(basis_bits.bit_4, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_and(basis_bits.bit_3, ra000_ffff_tmp26);
              ra000_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp24), simd_andc(ra000_ffff_tmp27, basis_bits.bit_2));
              byte_range_97_a1 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp28);
              carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(71), sequence_ea_9c_adv));
              ra000_ffff_tmp29 = simd_and(sequence_ea_9c_adv, byte_range_97_a1);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp29);
              byte_9e = simd_and(ra000_ffff_tmp3, tmp6);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp31 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_andc(ra000_ffff_tmp1, tmp11);
              byte_88 = simd_and(ra000_ffff_tmp31, ra000_ffff_tmp32);
              carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(72), sequence_ea_9e_adv));
              ra000_ffff_tmp33 = simd_and(sequence_ea_9e_adv, byte_88);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp33);
              byte_9f = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp9);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp34 = simd_andc(ra000_ffff_tmp1, basis_bits.bit_6);
              byte_range_b8_b9 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp34);
              carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(73), sequence_ea_9f_adv));
              ra000_ffff_tmp35 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp35);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp8, tmp10);
              byte_a3 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp36);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp37 = simd_and(ra000_ffff_tmp31, r800_ffff_tmp2);
              ra000_ffff_tmp38 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_3, ra000_ffff_tmp20);
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp39);
              cc_range_a8c4_a8e0_3 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp40);
              carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(74), sequence_ea_a3_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_a3_adv, cc_range_a8c4_a8e0_3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp41);
              byte_a4 = simd_and(ra000_ffff_tmp7, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp7, basis_bits.bit_4);
              ra000_ffff_tmp43 = simd_xor(basis_bits.bit_5, ra000_ffff_tmp8);
              byte_range_ab_ae = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp43);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(75), sequence_ea_a4_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ea_a4_adv, byte_range_ab_ae);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp44);
              ra000_ffff_tmp45 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp4);
              byte_a5 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp45);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_93 = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp36);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(76), sequence_ea_a5_adv));
              ra000_ffff_tmp46 = simd_and(sequence_ea_a5_adv, byte_93);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(r800_ffff_tmp1, tmp5);
              byte_a6 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp47);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              byte_b3 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp36);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(77), sequence_ea_a6_adv));
              ra000_ffff_tmp48 = simd_and(sequence_ea_a6_adv, byte_b3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp48);
              ra000_ffff_tmp49 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp8);
              byte_a7 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp49);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp50 = simd_andc(ra000_ffff_tmp31, tmp12);
              cc_range_a9c0_a9e5_3 = simd_or(ra000_ffff_tmp50, byte_a5);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(78), sequence_ea_a7_adv));
              ra000_ffff_tmp51 = simd_and(sequence_ea_a7_adv, cc_range_a9c0_a9e5_3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp51);
              byte_a9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp5);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp52 = simd_and(ra000_ffff_tmp12, basis_bits.bit_4);
              ra000_ffff_tmp53 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp54 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp53), simd_andc(ra000_ffff_tmp8, basis_bits.bit_5));
              byte_range_bb_bd = simd_and(ra000_ffff_tmp52, ra000_ffff_tmp54);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(79), sequence_ea_a9_adv));
              ra000_ffff_tmp55 = simd_and(sequence_ea_a9_adv, byte_range_bb_bd);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp55);
              byte_aa = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp2);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              byte_bf = ra000_ffff_tmp16;
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(80), sequence_ea_aa_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ea_aa_adv, byte_bf);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp56);
              byte_ab = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp19);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp31, tmp10);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp57, ra000_ffff_tmp8);
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp47);
              cc_range_aac0_aaf6_3 = simd_or(ra000_ffff_tmp58, ra000_ffff_tmp59);
              carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(81), sequence_ea_ab_adv));
              ra000_ffff_tmp60 = simd_and(sequence_ea_ab_adv, cc_range_aac0_aaf6_3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp60);
              ra000_ffff_tmp61 = simd_and(tmp4, ra000_ffff_tmp4);
              byte_ad = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp61);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp62 = simd_and(ra000_ffff_tmp3, basis_bits.bit_4);
              ra000_ffff_tmp63 = simd_or(basis_bits.bit_5, ra000_ffff_tmp8);
              byte_range_9b_9f = simd_and(ra000_ffff_tmp62, ra000_ffff_tmp63);
              carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(82), sequence_ea_ad_adv));
              ra000_ffff_tmp64 = simd_and(sequence_ea_ad_adv, byte_range_9b_9f);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp64);
              byte_af = ra000_ffff_tmp10;
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              byte_range_ac_ad = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp13);
              carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(83), sequence_ea_af_adv));
              ra000_ffff_tmp65 = simd_and(sequence_ea_af_adv, byte_range_ac_ad);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp65);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp9);
              byte_ac = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp22);
              carryQ.cq[84] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(84), ra000_ffff_tmp66));
              sequence_ef_ac = simd_and(ra000_ffff_tmp66, byte_ac);
              byte_ef_adv = ra000_ffff_tmp66;
              carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(85), sequence_ef_ac_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp67);
              byte_b8 = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp32);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp68 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp69 = simd_and(basis_bits.bit_4, ra000_ffff_tmp68);
              byte_range_a0_ad = simd_andc(ra000_ffff_tmp7, ra000_ffff_tmp69);
              carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(86), sequence_ef_b8_adv));
              ra000_ffff_tmp70 = simd_and(sequence_ef_b8_adv, byte_range_a0_ad);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp70);
              byte_bc = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp22);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_be = simd_and(ra000_ffff_tmp12, tmp6);
              carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(87), sequence_ef_bc_adv));
              ra000_ffff_tmp71 = simd_and(sequence_ef_bc_adv, byte_be);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp71);
              byte_bd = simd_and(ra000_ffff_tmp12, ra000_ffff_tmp61);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp72 = simd_andc(ra000_ffff_tmp30, ra000_ffff_tmp11);
              ra000_ffff_tmp73 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp72);
              cc_range_ff40_ff70_3 = simd_andc(ra000_ffff_tmp73, tmp12);
              carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(88), sequence_ef_bd_adv));
              ra000_ffff_tmp74 = simd_and(sequence_ef_bd_adv, cc_range_ff40_ff70_3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp74);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp75 = simd_and(tmp4, basis_bits.bit_6);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp3, ra000_ffff_tmp75);
              carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(89), sequence_ef_be_adv));
              ra000_ffff_tmp76 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp76);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(90), sequence_ef_bf_adv));
              ra000_ffff_tmp77 = simd_and(sequence_ef_bf_adv, byte_a3);
              struct_dia_Y.cc = simd_or(struct_dia_Y.cc, ra000_ffff_tmp77);
            }
            else {
              carryQ.CarryDequeueEnqueue(67, 24);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(17, 74);
          }
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(91, 26))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp12);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp12);
            carryQ.cq[91] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(91), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            byte_f0_adv = r10000_10ffff_tmp3;
            r10000_10ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp4);
            r10000_10ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp7);
            byte_8b = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp8);
            carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(92), r10000_10ffff_tmp9));
            sequence_f0_90_8b = simd_and(r10000_10ffff_tmp9, byte_8b);
            sequence_f0_90_adv = r10000_10ffff_tmp9;
            r10000_10ffff_tmp10 = simd_and(r10000_10ffff_tmp1, tmp8);
            byte_a0 = simd_andc(r10000_10ffff_tmp10, tmp12);
            carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(93), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp11);
            byte_ab = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp8);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(94), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_90_ab_adv, byte_range_a5_a6);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_andc(r10000_10ffff_tmp16, tmp10);
            byte_91 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp17);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp18 = simd_andc(tmp5, tmp10);
            byte_82 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp18);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(95), r10000_10ffff_tmp19));
            sequence_f0_91_82 = simd_and(r10000_10ffff_tmp19, byte_82);
            sequence_f0_91_adv = r10000_10ffff_tmp19;
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp6);
            byte_range_b9_ba = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp14);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(96), sequence_f0_91_82_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_91_82_adv, byte_range_b9_ba);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp12, tmp11);
            byte_84 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp23);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp20, basis_bits.bit_4);
            r10000_10ffff_tmp25 = simd_not(tmp11);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp25), simd_andc(r10000_10ffff_tmp7, basis_bits.bit_5));
            byte_range_b3_b4 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp26);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(97), sequence_f0_91_84_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_91_84_adv, byte_range_b3_b4);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp16);
            byte_85 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp28);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp7, tmp10);
            byte_b3 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp29);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(98), sequence_f0_91_85_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_91_85_adv, byte_b3);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp30);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp7);
            byte_87 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp31);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            byte_80 = simd_andc(r10000_10ffff_tmp5, tmp12);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(99), sequence_f0_91_87_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_91_87_adv, byte_80);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp32);
            r10000_10ffff_tmp33 = simd_andc(r10000_10ffff_tmp6, tmp11);
            byte_88 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp33);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp12);
            byte_range_b5_b6 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp14);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(100), sequence_f0_91_88_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_91_88_adv, byte_range_b5_b6);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp35);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp6);
            byte_range_a9_aa = simd_and(r10000_10ffff_tmp36, r10000_10ffff_tmp14);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(101), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp37 = simd_and(sequence_f0_91_8b_adv, byte_range_a9_aa);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp37);
            r10000_10ffff_tmp38 = simd_andc(tmp4, tmp11);
            byte_8c = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp38);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            byte_bc = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp38);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(102), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_91_8c_adv, byte_bc);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(tmp4, r10000_10ffff_tmp16);
            byte_8d = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp40);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp41 = simd_and(basis_bits.bit_5, tmp11);
            r10000_10ffff_tmp42 = simd_not(r10000_10ffff_tmp41);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp44 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp42), simd_andc(r10000_10ffff_tmp43, basis_bits.bit_4));
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp44);
            r10000_10ffff_tmp46 = simd_or(byte_8d, r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp41);
            cc_range_1134d_11370_4 = simd_or(r10000_10ffff_tmp46, r10000_10ffff_tmp47);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(103), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_8d_adv, cc_range_1134d_11370_4);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp48);
            byte_93 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp29);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp49 = simd_andc(basis_bits.bit_6, tmp10);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp49);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(104), sequence_f0_91_93_adv));
            r10000_10ffff_tmp50 = simd_and(sequence_f0_91_93_adv, byte_range_82_83);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp50);
            r10000_10ffff_tmp51 = simd_and(r10000_10ffff_tmp12, tmp5);
            byte_96 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp51);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp52 = simd_and(tmp4, r10000_10ffff_tmp7);
            byte_bf = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp52);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(105), sequence_f0_91_96_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_96_adv, byte_bf);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp53);
            byte_97 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp31);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(106), sequence_f0_91_97_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp54);
            byte_98 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp33);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(107), sequence_f0_91_98_adv));
            r10000_10ffff_tmp55 = simd_and(sequence_f0_91_98_adv, byte_bf);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp55);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp6, tmp5);
            byte_9a = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp56);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_6);
            byte_range_b6_b7 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp57);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(108), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp58 = simd_and(sequence_f0_91_9a_adv, byte_range_b6_b7);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp58);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(109), r10000_10ffff_tmp59));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp59, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp59;
            byte_range_b0_b4 = r10000_10ffff_tmp47;
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(110), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b4);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp60);
            byte_be = simd_and(r10000_10ffff_tmp20, tmp6);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp61 = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp62 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp52);
            byte_range_8f_9f = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp62);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(111), sequence_f0_96_be_adv));
            r10000_10ffff_tmp63 = simd_and(sequence_f0_96_be_adv, byte_range_8f_9f);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp63);
            byte_9d = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp40);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(112), r10000_10ffff_tmp64));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp64, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp64;
            r10000_10ffff_tmp65 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp66 = simd_not(r10000_10ffff_tmp65);
            r10000_10ffff_tmp67 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp7);
            r10000_10ffff_tmp68 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp66), simd_andc(r10000_10ffff_tmp67, basis_bits.bit_4));
            r10000_10ffff_tmp69 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp71 = simd_or(tmp10, r10000_10ffff_tmp7);
            r10000_10ffff_tmp72 = simd_not(r10000_10ffff_tmp71);
            r10000_10ffff_tmp73 = simd_and(tmp4, tmp11);
            r10000_10ffff_tmp74 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp72), simd_andc(r10000_10ffff_tmp73, basis_bits.bit_3));
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_or(r10000_10ffff_tmp69, r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_and(r10000_10ffff_tmp20, basis_bits.bit_4);
            r10000_10ffff_tmp78 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp7);
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp77, r10000_10ffff_tmp78);
            cc_range_1d167_1d17b_4 = simd_or(r10000_10ffff_tmp76, r10000_10ffff_tmp79);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(113), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_9d_85_adv, cc_range_1d167_1d17b_4);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp80);
            byte_86 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp51);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp5, tmp10);
            r10000_10ffff_tmp82 = simd_andc(r10000_10ffff_tmp81, r10000_10ffff_tmp7);
            r10000_10ffff_tmp83 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp84 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp83), simd_andc(r10000_10ffff_tmp41, basis_bits.bit_4));
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp84);
            r10000_10ffff_tmp86 = simd_or(r10000_10ffff_tmp82, r10000_10ffff_tmp85);
            r10000_10ffff_tmp87 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_4);
            r10000_10ffff_tmp88 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp87, r10000_10ffff_tmp88);
            cc_range_1d180_1d1aa_4 = simd_or(r10000_10ffff_tmp86, r10000_10ffff_tmp89);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(114), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp90 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp90);
            byte_9e = simd_and(r10000_10ffff_tmp2, tmp6);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_a3 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp29);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(115), r10000_10ffff_tmp91));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp91, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp91;
            r10000_10ffff_tmp92 = simd_andc(r10000_10ffff_tmp2, basis_bits.bit_4);
            byte_range_90_96 = simd_andc(r10000_10ffff_tmp92, r10000_10ffff_tmp67);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(116), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9e_a3_adv, byte_range_90_96);
            struct_dia_Y.cc = simd_or(struct_dia_Y.cc, r10000_10ffff_tmp93);
          }
          else {
            carryQ.CarryDequeueEnqueue(91, 26);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 117);
        }
        carryQ.CarryQ_Adjust(117);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<117, 0> carryQ;
  };

  struct Property_oupper_Y {
  Property_oupper_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_oupper_Y & struct_oupper_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e2_e3, r800_4dff_tmp2, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_85, r2000_2fff_tmp5;
		BitBlock sequence_e2_85, byte_e2_adv, byte_range_a0_af, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_92;
		BitBlock sequence_e2_92, r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_range_b6_bf, sequence_e2_92_adv;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_93;
		BitBlock sequence_e2_93, byte_range_80_8f, sequence_e2_93_adv;
		BitBlock r2000_2fff_tmp16, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_9f;
		BitBlock r10000_10ffff_tmp10, sequence_f0_9f, byte_f0_adv, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock byte_84, r10000_10ffff_tmp15, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock byte_range_b0_bf, sequence_f0_9f_84_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, sequence_f0_9f_85;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, cc_range_1f140_1f170_4;
		BitBlock sequence_f0_9f_85_adv, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, byte_86, sequence_f0_9f_86, byte_range_80_89;
		BitBlock sequence_f0_9f_86_adv, r10000_10ffff_tmp30;




        struct_oupper_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 10))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 5))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 4))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(1, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(1, 4))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r2000_2fff_tmp5));
                  sequence_e2_85 = simd_and(r2000_2fff_tmp5, byte_85);
                  byte_e2_adv = r2000_2fff_tmp5;
                  byte_range_a0_af = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(2), sequence_e2_85_adv));
                  r2000_2fff_tmp6 = simd_and(sequence_e2_85_adv, byte_range_a0_af);
                  struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r2000_2fff_tmp6);
                  r2000_2fff_tmp7 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp7);
                  byte_92 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp12 = simd_or(basis_bits.bit_4, r2000_2fff_tmp11);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(3), sequence_e2_92_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp15 = simd_andc(r2000_2fff_tmp14, r800_ffff_tmp1);
                  byte_93 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp15);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(4), sequence_e2_93_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_93_adv, byte_range_80_8f);
                  struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r2000_2fff_tmp16);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 4);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(5, 5))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9f = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(5), r10000_10ffff_tmp10));
            sequence_f0_9f = simd_and(r10000_10ffff_tmp10, byte_9f);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(6), r10000_10ffff_tmp15));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp15, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp15;
            byte_range_b0_bf = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(7), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp17);
            byte_85 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp18);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp20);
            r10000_10ffff_tmp23 = simd_not(r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp23), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(r10000_10ffff_tmp21, r10000_10ffff_tmp25);
            cc_range_1f140_1f170_4 = simd_or(r10000_10ffff_tmp26, byte_range_b0_bf);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(8), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp29 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp28);
            byte_86 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp29);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_89 = r10000_10ffff_tmp21;
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(9), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp30 = simd_and(sequence_f0_9f_86_adv, byte_range_80_89);
            struct_oupper_Y.cc = simd_or(struct_oupper_Y.cc, r10000_10ffff_tmp30);
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 10);
        }
        carryQ.CarryQ_Adjust(10);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<10, 0> carryQ;
  };

  struct Property_odi_Y {
  Property_odi_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_odi_Y & struct_odi_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, r300_36f_tmp1, r300_36f_tmp2;
		BitBlock r300_36f_tmp3, byte_8f, byte_cd_adv, r300_36f_tmp4, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_e4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, byte_85, r1000_1fff_tmp4;
		BitBlock sequence_e1_85, byte_e1_adv, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, byte_range_9f_a0;
		BitBlock sequence_e1_85_adv, r1000_1fff_tmp13, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, r1000_1fff_tmp16, r1000_1fff_tmp17, byte_9e;
		BitBlock sequence_e1_9e, r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock byte_range_b4_b5, sequence_e1_9e_adv, r1000_1fff_tmp21;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, byte_81, r2000_2fff_tmp5;
		BitBlock sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock byte_a5, sequence_e2_81_adv, r2000_2fff_tmp8, r2000_4dff_tmp3;
		BitBlock r2000_4dff_tmp4, byte_e3, r2000_4dff_tmp5, r3000_4dff_tmp1;
		BitBlock r3000_4dff_tmp2, r3000_4dff_tmp3, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock sequence_e3_85, byte_e3_adv, r3000_4dff_tmp6, byte_a4;
		BitBlock sequence_e3_85_adv, r3000_4dff_tmp7, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ef, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_be, ra000_ffff_tmp8, sequence_ef_be;
		BitBlock byte_ef_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, byte_a0;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp11, byte_bf, sequence_ef_bf;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, byte_range_b0_b8;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp14, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f3, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock byte_80, r10000_10ffff_tmp11, sequence_f3_a0_80, sequence_f3_a0_adv;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, cc_range_e0000_e0002_4, sequence_f3_a0_80_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_range_82_83;
		BitBlock sequence_f3_a0_byte_range_82_83, byte_range_80_bf;
		BitBlock r10000_10ffff_tmp18, sequence_f3_a0_byte_range_82_83_sfx;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, byte_87, sequence_f3_a0_87, byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp23, sequence_f3_a0_87_byte_range_b0_bf;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, byte_88, sequence_f3_a0_88;
		BitBlock r10000_10ffff_tmp26, sequence_f3_a0_88_byte_range_80_bf;




        struct_odi_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 18))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 1))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if (bitblock::any(r100_3ff_tmp10)) {
                r300_36f_tmp1 = simd_andc(r100_3ff_tmp6, r80_7ff_tmp1);
                r300_36f_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r300_36f_tmp3 = simd_and(r100_3ff_tmp1, r300_36f_tmp2);
                byte_8f = simd_and(r300_36f_tmp1, r300_36f_tmp3);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp4 = simd_and(byte_cd_adv, byte_8f);
                struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r300_36f_tmp4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 1);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 11))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(1), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(2, 7))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(2, 3))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(2, 3))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_85 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), r1000_1fff_tmp4));
                  sequence_e1_85 = simd_and(r1000_1fff_tmp4, byte_85);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp7), simd_andc(r1000_1fff_tmp11, basis_bits.bit_2));
                  byte_range_9f_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp12);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_85, carryQ.get_carry_in(3), sequence_e1_85_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_85_adv, byte_range_9f_a0);
                  struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp16);
                  byte_9e = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp17);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(4), sequence_e1_9e_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_9e_adv, byte_range_b4_b5);
                  struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r1000_1fff_tmp21);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 3);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(5, 4))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(5, 2))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_a5 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(6), sequence_e2_81_adv));
                  r2000_2fff_tmp8 = simd_and(sequence_e2_81_adv, byte_a5);
                  struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r2000_2fff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(5, 2);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(7, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp3);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(7), r3000_4dff_tmp5));
                  sequence_e3_85 = simd_and(r3000_4dff_tmp5, byte_85);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r3000_4dff_tmp6, r800_ffff_tmp4);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(8), sequence_e3_85_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_85_adv, byte_a4);
                  struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r3000_4dff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(7, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 7);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(9, 3))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_be = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(9), ra000_ffff_tmp8));
              sequence_ef_be = simd_and(ra000_ffff_tmp8, byte_be);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp10 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp10);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(10), sequence_ef_be_adv));
              ra000_ffff_tmp11 = simd_and(sequence_ef_be_adv, byte_a0);
              struct_odi_Y.cc = simd_or(struct_odi_Y.cc, ra000_ffff_tmp11);
              byte_bf = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, ra000_ffff_tmp12);
              byte_range_b0_b8 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp13);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(11), sequence_ef_bf_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_bf_adv, byte_range_b0_b8);
              struct_odi_Y.cc = simd_or(struct_odi_Y.cc, ra000_ffff_tmp14);
            }
            else {
              carryQ.CarryDequeueEnqueue(9, 3);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(1, 11);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(12, 6))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_andc(r10000_10ffff_tmp2, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp7 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp6);
            byte_a0 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(12), r10000_10ffff_tmp8));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp8, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp8;
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp9);
            byte_80 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp7);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(13), r10000_10ffff_tmp11));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp11, byte_80);
            sequence_f3_a0_adv = r10000_10ffff_tmp11;
            r10000_10ffff_tmp12 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp13 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            cc_range_e0000_e0002_4 = simd_or(byte_80, r10000_10ffff_tmp15);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(14), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f3_a0_80_adv, cc_range_e0000_e0002_4);
            struct_odi_Y.cc = simd_or(struct_odi_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            byte_range_82_83 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp17);
            sequence_f3_a0_byte_range_82_83 = simd_and(sequence_f3_a0_adv, byte_range_82_83);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_82_83, carryQ.get_carry_in(15), r10000_10ffff_tmp18));
            sequence_f3_a0_byte_range_82_83_sfx = simd_and(r10000_10ffff_tmp18, byte_range_80_bf);
            struct_odi_Y.cc = simd_or(struct_odi_Y.cc, sequence_f3_a0_byte_range_82_83_sfx);
            r10000_10ffff_tmp19 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp20 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp9);
            r10000_10ffff_tmp21 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp2);
            byte_87 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp22);
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_b0_bf = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(16), r10000_10ffff_tmp23));
            sequence_f3_a0_87_byte_range_b0_bf = simd_and(r10000_10ffff_tmp23, byte_range_b0_bf);
            struct_odi_Y.cc = simd_or(struct_odi_Y.cc, sequence_f3_a0_87_byte_range_b0_bf);
            r10000_10ffff_tmp24 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp25 = simd_andc(r10000_10ffff_tmp24, r10000_10ffff_tmp6);
            byte_88 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp25);
            sequence_f3_a0_88 = simd_and(sequence_f3_a0_adv, byte_88);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_88, carryQ.get_carry_in(17), r10000_10ffff_tmp26));
            sequence_f3_a0_88_byte_range_80_bf = simd_and(r10000_10ffff_tmp26, byte_range_80_bf);
            struct_odi_Y.cc = simd_or(struct_odi_Y.cc, sequence_f3_a0_88_byte_range_80_bf);
          }
          else {
            carryQ.CarryDequeueEnqueue(12, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 18);
        }
        carryQ.CarryQ_Adjust(18);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<18, 0> carryQ;
  };





Property_wspace_Y fwspace_Y;

extern "C" {
    BitBlock __get_wspace_Y (Basis_bits & basis_bits) {
        Struct_wspace_Y output;
        fwspace_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_bidi_c_Y fbidi_c_Y;

extern "C" {
    BitBlock __get_bidi_c_Y (Basis_bits & basis_bits) {
        Struct_bidi_c_Y output;
        fbidi_c_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_join_c_Y fjoin_c_Y;

extern "C" {
    BitBlock __get_join_c_Y (Basis_bits & basis_bits) {
        Struct_join_c_Y output;
        fjoin_c_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_dash_Y fdash_Y;

extern "C" {
    BitBlock __get_dash_Y (Basis_bits & basis_bits) {
        Struct_dash_Y output;
        fdash_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_hyphen_Y fhyphen_Y;

extern "C" {
    BitBlock __get_hyphen_Y (Basis_bits & basis_bits) {
        Struct_hyphen_Y output;
        fhyphen_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_qmark_Y fqmark_Y;

extern "C" {
    BitBlock __get_qmark_Y (Basis_bits & basis_bits) {
        Struct_qmark_Y output;
        fqmark_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_term_Y fterm_Y;

extern "C" {
    BitBlock __get_term_Y (Basis_bits & basis_bits) {
        Struct_term_Y output;
        fterm_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_omath_Y fomath_Y;

extern "C" {
    BitBlock __get_omath_Y (Basis_bits & basis_bits) {
        Struct_omath_Y output;
        fomath_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_hex_Y fhex_Y;

extern "C" {
    BitBlock __get_hex_Y (Basis_bits & basis_bits) {
        Struct_hex_Y output;
        fhex_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ahex_Y fahex_Y;

extern "C" {
    BitBlock __get_ahex_Y (Basis_bits & basis_bits) {
        Struct_ahex_Y output;
        fahex_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_oalpha_Y foalpha_Y;

extern "C" {
    BitBlock __get_oalpha_Y (Basis_bits & basis_bits) {
        Struct_oalpha_Y output;
        foalpha_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ideo_Y fideo_Y;

extern "C" {
    BitBlock __get_ideo_Y (Basis_bits & basis_bits) {
        Struct_ideo_Y output;
        fideo_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_dia_Y fdia_Y;

extern "C" {
    BitBlock __get_dia_Y (Basis_bits & basis_bits) {
        Struct_dia_Y output;
        fdia_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ext_Y fext_Y;

extern "C" {
    BitBlock __get_ext_Y (Basis_bits & basis_bits) {
        Struct_ext_Y output;
        fext_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_olower_Y folower_Y;

extern "C" {
    BitBlock __get_olower_Y (Basis_bits & basis_bits) {
        Struct_olower_Y output;
        folower_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_oupper_Y foupper_Y;

extern "C" {
    BitBlock __get_oupper_Y (Basis_bits & basis_bits) {
        Struct_oupper_Y output;
        foupper_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_nchar_Y fnchar_Y;

extern "C" {
    BitBlock __get_nchar_Y (Basis_bits & basis_bits) {
        Struct_nchar_Y output;
        fnchar_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ogr_ext_Y fogr_ext_Y;

extern "C" {
    BitBlock __get_ogr_ext_Y (Basis_bits & basis_bits) {
        Struct_ogr_ext_Y output;
        fogr_ext_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_idsb_Y fidsb_Y;

extern "C" {
    BitBlock __get_idsb_Y (Basis_bits & basis_bits) {
        Struct_idsb_Y output;
        fidsb_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_idst_Y fidst_Y;

extern "C" {
    BitBlock __get_idst_Y (Basis_bits & basis_bits) {
        Struct_idst_Y output;
        fidst_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_radical_Y fradical_Y;

extern "C" {
    BitBlock __get_radical_Y (Basis_bits & basis_bits) {
        Struct_radical_Y output;
        fradical_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_uideo_Y fuideo_Y;

extern "C" {
    BitBlock __get_uideo_Y (Basis_bits & basis_bits) {
        Struct_uideo_Y output;
        fuideo_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_odi_Y fodi_Y;

extern "C" {
    BitBlock __get_odi_Y (Basis_bits & basis_bits) {
        Struct_odi_Y output;
        fodi_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_dep_Y fdep_Y;

extern "C" {
    BitBlock __get_dep_Y (Basis_bits & basis_bits) {
        Struct_dep_Y output;
        fdep_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sd_Y fsd_Y;

extern "C" {
    BitBlock __get_sd_Y (Basis_bits & basis_bits) {
        Struct_sd_Y output;
        fsd_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_loe_Y floe_Y;

extern "C" {
    BitBlock __get_loe_Y (Basis_bits & basis_bits) {
        Struct_loe_Y output;
        floe_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_oids_Y foids_Y;

extern "C" {
    BitBlock __get_oids_Y (Basis_bits & basis_bits) {
        Struct_oids_Y output;
        foids_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_oidc_Y foidc_Y;

extern "C" {
    BitBlock __get_oidc_Y (Basis_bits & basis_bits) {
        Struct_oidc_Y output;
        foidc_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_sterm_Y fsterm_Y;

extern "C" {
    BitBlock __get_sterm_Y (Basis_bits & basis_bits) {
        Struct_sterm_Y output;
        fsterm_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_vs_Y fvs_Y;

extern "C" {
    BitBlock __get_vs_Y (Basis_bits & basis_bits) {
        Struct_vs_Y output;
        fvs_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_pat_ws_Y fpat_ws_Y;

extern "C" {
    BitBlock __get_pat_ws_Y (Basis_bits & basis_bits) {
        Struct_pat_ws_Y output;
        fpat_ws_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_pat_syn_Y fpat_syn_Y;

extern "C" {
    BitBlock __get_pat_syn_Y (Basis_bits & basis_bits) {
        Struct_pat_syn_Y output;
        fpat_syn_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

void install_property_PropList_fn_ptrs(pablo::PabloCompiler & p) {
    p.InstallExternalFunction("__get_wspace_Y", (void *) & __get_wspace_Y);
  p.InstallExternalFunction("__get_bidi_c_Y", (void *) & __get_bidi_c_Y);
  p.InstallExternalFunction("__get_join_c_Y", (void *) & __get_join_c_Y);
  p.InstallExternalFunction("__get_dash_Y", (void *) & __get_dash_Y);
  p.InstallExternalFunction("__get_hyphen_Y", (void *) & __get_hyphen_Y);
  p.InstallExternalFunction("__get_qmark_Y", (void *) & __get_qmark_Y);
  p.InstallExternalFunction("__get_term_Y", (void *) & __get_term_Y);
  p.InstallExternalFunction("__get_omath_Y", (void *) & __get_omath_Y);
  p.InstallExternalFunction("__get_hex_Y", (void *) & __get_hex_Y);
  p.InstallExternalFunction("__get_ahex_Y", (void *) & __get_ahex_Y);
  p.InstallExternalFunction("__get_oalpha_Y", (void *) & __get_oalpha_Y);
  p.InstallExternalFunction("__get_ideo_Y", (void *) & __get_ideo_Y);
  p.InstallExternalFunction("__get_dia_Y", (void *) & __get_dia_Y);
  p.InstallExternalFunction("__get_ext_Y", (void *) & __get_ext_Y);
  p.InstallExternalFunction("__get_olower_Y", (void *) & __get_olower_Y);
  p.InstallExternalFunction("__get_oupper_Y", (void *) & __get_oupper_Y);
  p.InstallExternalFunction("__get_nchar_Y", (void *) & __get_nchar_Y);
  p.InstallExternalFunction("__get_ogr_ext_Y", (void *) & __get_ogr_ext_Y);
  p.InstallExternalFunction("__get_idsb_Y", (void *) & __get_idsb_Y);
  p.InstallExternalFunction("__get_idst_Y", (void *) & __get_idst_Y);
  p.InstallExternalFunction("__get_radical_Y", (void *) & __get_radical_Y);
  p.InstallExternalFunction("__get_uideo_Y", (void *) & __get_uideo_Y);
  p.InstallExternalFunction("__get_odi_Y", (void *) & __get_odi_Y);
  p.InstallExternalFunction("__get_dep_Y", (void *) & __get_dep_Y);
  p.InstallExternalFunction("__get_sd_Y", (void *) & __get_sd_Y);
  p.InstallExternalFunction("__get_loe_Y", (void *) & __get_loe_Y);
  p.InstallExternalFunction("__get_oids_Y", (void *) & __get_oids_Y);
  p.InstallExternalFunction("__get_oidc_Y", (void *) & __get_oidc_Y);
  p.InstallExternalFunction("__get_sterm_Y", (void *) & __get_sterm_Y);
  p.InstallExternalFunction("__get_vs_Y", (void *) & __get_vs_Y);
  p.InstallExternalFunction("__get_pat_ws_Y", (void *) & __get_pat_ws_Y);
  p.InstallExternalFunction("__get_pat_syn_Y", (void *) & __get_pat_syn_Y);

}

#endif
