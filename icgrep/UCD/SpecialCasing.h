#ifndef SPECIALCASING_H
#define SPECIALCASING_H
/*
 *  Copyright (c) 2017 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include "PropertyAliases.h"
#include "PropertyObjects.h"
#include "PropertyValueAliases.h"
#include "UnicodeData.h"
#include "unicode_set.h"

namespace UCD {
    namespace LC_ns {
        /** Code Point Ranges for lc overriding values from SLC
        [00df, 00df], [0149, 0149], [01f0, 01f0], [0307, 0307],
        [0390, 0390], [03b0, 03b0], [0587, 0587], [1e96, 1e9a],
        [1f50, 1f50], [1f52, 1f52], [1f54, 1f54], [1f56, 1f56],
        [1f80, 1f87], [1f90, 1f97], [1fa0, 1fa7], [1fb2, 1fb4],
        [1fb6, 1fb7], [1fc2, 1fc4], [1fc6, 1fc7], [1fd2, 1fd3],
        [1fd6, 1fd7], [1fe2, 1fe4], [1fe6, 1fe7], [1ff2, 1ff4],
        [1ff6, 1ff7], [fb00, fb06], [fb13, fb17]**/

        const UnicodeSet overridden_set
                    {{{Empty, 6}, {Mixed, 1}, {Empty, 3}, {Mixed, 1}, {Empty, 4},
              {Mixed, 1}, {Empty, 8}, {Mixed, 1}, {Empty, 3}, {Mixed, 2},
              {Empty, 14}, {Mixed, 1}, {Empty, 199}, {Mixed, 1}, {Empty, 5},
              {Mixed, 1}, {Empty, 1}, {Mixed, 4}, {Empty, 1752}, {Mixed, 1},
              {Empty, 32807}},
             {0x80000000, 0x00000200, 0x00010000, 0x00000080, 0x00010000,
              0x00010000, 0x00000080, 0x07c00000, 0x00550000, 0x00ff00ff,
              0x00dc00ff, 0x00cc00dc, 0x00dc00dc, 0x00f8007f}};

        const unsigned buffer_length = 298;
        const static char __attribute__ ((aligned (32))) string_buffer[512] = u8R"__(ß
ŉ
ǰ
i̇
ΐ
ΰ
և
ẖ
ẗ
ẘ
ẙ
ẚ
ὐ
ὒ
ὔ
ὖ
ᾀ
ᾁ
ᾂ
ᾃ
ᾄ
ᾅ
ᾆ
ᾇ
ᾐ
ᾑ
ᾒ
ᾓ
ᾔ
ᾕ
ᾖ
ᾗ
ᾠ
ᾡ
ᾢ
ᾣ
ᾤ
ᾥ
ᾦ
ᾧ
ᾲ
ᾳ
ᾴ
ᾶ
ᾷ
ῂ
ῃ
ῄ
ῆ
ῇ
ῒ
ΐ
ῖ
ῗ
ῢ
ΰ
ῤ
ῦ
ῧ
ῲ
ῳ
ῴ
ῶ
ῷ
ﬀ
ﬁ
ﬂ
ﬃ
ﬄ
ﬅ
ﬆ
ﬓ
ﬔ
ﬕ
ﬖ
ﬗ
)__";

        const static std::vector<codepoint_t> defined_cps = {
        0x00df, 0x0149, 0x01f0, 0x0307, 0x0390, 0x03b0, 0x0587, 0x1e96,
        0x1e97, 0x1e98, 0x1e99, 0x1e9a, 0x1f50, 0x1f52, 0x1f54, 0x1f56,
        0x1f80, 0x1f81, 0x1f82, 0x1f83, 0x1f84, 0x1f85, 0x1f86, 0x1f87,
        0x1f90, 0x1f91, 0x1f92, 0x1f93, 0x1f94, 0x1f95, 0x1f96, 0x1f97,
        0x1fa0, 0x1fa1, 0x1fa2, 0x1fa3, 0x1fa4, 0x1fa5, 0x1fa6, 0x1fa7,
        0x1fb2, 0x1fb3, 0x1fb4, 0x1fb6, 0x1fb7, 0x1fc2, 0x1fc3, 0x1fc4,
        0x1fc6, 0x1fc7, 0x1fd2, 0x1fd3, 0x1fd6, 0x1fd7, 0x1fe2, 0x1fe3,
        0x1fe4, 0x1fe6, 0x1fe7, 0x1ff2, 0x1ff3, 0x1ff4, 0x1ff6, 0x1ff7,
        0xfb00, 0xfb01, 0xfb02, 0xfb03, 0xfb04, 0xfb05, 0xfb06, 0xfb13,
        0xfb14, 0xfb15, 0xfb16, 0xfb17};
        static StringOverridePropertyObject property_object(lc, 
                                                    SLC_ns::property_object, 
                                                    overridden_set, 
                                                    static_cast<const char *>(string_buffer), 
                                                    buffer_length, 
                                                    defined_cps);
    }
    namespace UC_ns {
        /** Code Point Ranges for uc overriding values from SUC
        [004e, 004e], [0066, 0066], [0069, 0069], [006c, 006c],
        [0073, 0074], [0130, 0130], [02be, 02be], [0300, 0301],
        [0308, 0308], [030a, 030a], [030c, 030c], [0313, 0313],
        [0331, 0331], [0342, 0342], [0345, 0345], [0565, 0565],
        [056b, 056b], [056d, 056d], [0576, 0576], [0582, 0582],
        [1f88, 1f8f], [1f98, 1f9f], [1fa8, 1faf], [1fbc, 1fbc],
        [1fcc, 1fcc], [1ffc, 1ffc]**/

        const UnicodeSet overridden_set
                    {{{Empty, 2}, {Mixed, 2}, {Empty, 5}, {Mixed, 1}, {Empty, 11},
              {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 16}, {Mixed, 2},
              {Empty, 207}, {Mixed, 4}, {Empty, 34560}},
             {0x00004000, 0x00181240, 0x00010000, 0x40000000, 0x00081503,
              0x00020000, 0x00000024, 0x00402820, 0x00000004, 0xff00ff00,
              0x1000ff00, 0x00001000, 0x10000000}};

        const unsigned buffer_length = 208;
        const static char __attribute__ ((aligned (32))) string_buffer[256] = u8R"__(ʼN
Ff
Ffi
Ffl
Ss
St
İ
Aʾ
Ϋ̀
Ϋ́
T̈
Y̊
J̌
Ρ̓
H̱
Ω͂
ῼ͂
Մե
Մի
Մխ
Վն
Եւ
ᾈ
ᾉ
ᾊ
ᾋ
ᾌ
ᾍ
ᾎ
ᾏ
ᾘ
ᾙ
ᾚ
ᾛ
ᾜ
ᾝ
ᾞ
ᾟ
ᾨ
ᾩ
ᾪ
ᾫ
ᾬ
ᾭ
ᾮ
ᾯ
ᾼ
ῌ
ῼ
)__";

        const static std::vector<codepoint_t> defined_cps = {
        0x004e, 0x0066, 0x0069, 0x006c, 0x0073, 0x0074, 0x0130, 0x02be,
        0x0300, 0x0301, 0x0308, 0x030a, 0x030c, 0x0313, 0x0331, 0x0342,
        0x0345, 0x0565, 0x056b, 0x056d, 0x0576, 0x0582, 0x1f88, 0x1f89,
        0x1f8a, 0x1f8b, 0x1f8c, 0x1f8d, 0x1f8e, 0x1f8f, 0x1f98, 0x1f99,
        0x1f9a, 0x1f9b, 0x1f9c, 0x1f9d, 0x1f9e, 0x1f9f, 0x1fa8, 0x1fa9,
        0x1faa, 0x1fab, 0x1fac, 0x1fad, 0x1fae, 0x1faf, 0x1fbc, 0x1fcc,
        0x1ffc};
        static StringOverridePropertyObject property_object(uc, 
                                                    SUC_ns::property_object, 
                                                    overridden_set, 
                                                    static_cast<const char *>(string_buffer), 
                                                    buffer_length, 
                                                    defined_cps);
    }
    namespace TC_ns {
        /** Code Point Ranges for tc overriding values from STC
        [0046, 0046], [0049, 0049], [004c, 004c], [004e, 004e],
        [0053, 0054], [0130, 0130], [02be, 02be], [0300, 0301],
        [0308, 0308], [030a, 030a], [030c, 030c], [0313, 0313],
        [0331, 0331], [0342, 0342], [0399, 0399], [0535, 0535],
        [053b, 053b], [053d, 053d], [0546, 0546], [0552, 0552]**/

        const UnicodeSet overridden_set
                    {{{Empty, 2}, {Mixed, 1}, {Empty, 6}, {Mixed, 1}, {Empty, 11},
              {Mixed, 1}, {Empty, 2}, {Mixed, 3}, {Empty, 1}, {Mixed, 1},
              {Empty, 12}, {Mixed, 2}, {Empty, 34773}},
             {0x00185240, 0x00010000, 0x40000000, 0x00081503, 0x00020000,
              0x00000004, 0x02000000, 0x28200000, 0x00040040}};

        const unsigned buffer_length = 100;
        const static char __attribute__ ((aligned (32))) string_buffer[256] = u8R"__(FF
FFI
FFL
ʼN
SS
ST
İ
Aʾ
Ϋ̀
Ϋ́
T̈
Y̊
J̌
Ρ̓
H̱
Ω͂
Ω͂Ι
ՄԵ
ՄԻ
ՄԽ
ՎՆ
ԵՒ
)__";

        const static std::vector<codepoint_t> defined_cps = {
        0x0046, 0x0049, 0x004c, 0x004e, 0x0053, 0x0054, 0x0130, 0x02be,
        0x0300, 0x0301, 0x0308, 0x030a, 0x030c, 0x0313, 0x0331, 0x0342,
        0x0399, 0x0535, 0x053b, 0x053d, 0x0546, 0x0552};
        static StringOverridePropertyObject property_object(tc, 
                                                    STC_ns::property_object, 
                                                    overridden_set, 
                                                    static_cast<const char *>(string_buffer), 
                                                    buffer_length, 
                                                    defined_cps);
    }
}


#endif
